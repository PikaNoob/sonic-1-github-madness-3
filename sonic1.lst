00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ12:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SLZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007570 0000                       		dc.w Resize_SLZ3boss-off_7118
00007572 0000                       		dc.w Resize_SLZ3end-off_7118
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_SLZ3main:
00007574 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_7130
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_7130:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            Resize_SLZ3boss:
00007588 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000758E 6500                       		bcs.s	locret_715C
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_7144
00007596 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000759A                            
0000759A                            loc_7144:
0000759A 303C 008C                  		move.w	#$8C,d0
0000759E 6100 A016                  		bsr.w	PlaySound	; play boss music
000075A2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_715C:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SLZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts
000075BC 4E75                       		rts
000075BE                            ; ===========================================================================
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            ; Spring Yard Zone dynamic screen resizing
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            
000075BE                            Resize_SYZ:				; XREF: Resize_Index
000075BE 7000                       		moveq	#0,d0
000075C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C4 D040                       		add.w	d0,d0
000075C6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075D2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SYZ1:
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            Resize_SYZ2:
000075D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075DC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71A2
000075E4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075EA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F0 6500                       		bcs.s	locret_71A2
000075F2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075F8                            
000075F8                            locret_71A2:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SYZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000760A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000760C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SYZ3main:
0000760E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_71CE
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	locret_71CE
0000761C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007620 5438 F742                  		addq.b	#2,($FFFFF742).w
00007624                            
00007624                            locret_71CE:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3boss:
00007626 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7200
0000762E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007634 6100 0000                  		bsr.w	SingleObjLoad
00007638 6600                       		bne.s	loc_71EC
0000763A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000763E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007642                            
00007642                            loc_71EC:
00007642 303C 008C                  		move.w	#$8C,d0
00007646 6100 9F6E                  		bsr.w	PlaySound	; play boss music
0000764A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007650 7011                       		moveq	#$11,d0
00007652 6000 A14C                  		bra.w	LoadPLC		; load boss patterns
00007656                            ; ===========================================================================
00007656                            
00007656                            locret_7200:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ3end:
00007658 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            ; ---------------------------------------------------------------------------
00007660                            ; Scrap	Brain Zone dynamic screen resizing
00007660                            ; ---------------------------------------------------------------------------
00007660                            
00007660                            Resize_SBZ:				; XREF: Resize_Index
00007660 7000                       		moveq	#0,d0
00007662 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007666 D040                       		add.w	d0,d0
00007668 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007672 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007674 0000                       		dc.w Resize_FZ-Resize_SBZx
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SBZ1:
00007676 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000767C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007682 6500                       		bcs.s	locret_7242
00007684 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7242
00007692 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007698                            
00007698                            locret_7242:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SBZ2:
0000769A 7000                       		moveq	#0,d0
0000769C 1038 F742                  		move.b	($FFFFF742).w,d0
000076A0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076A4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076A8                            ; ===========================================================================
000076A8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076AA 0000                       		dc.w Resize_SBZ2boss-off_7252
000076AC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076AE 0000                       		dc.w Resize_SBZ2end-off_7252
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            Resize_SBZ2main:
000076B0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076B6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_727A
000076BE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076C4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_727A
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_727A:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SBZ2boss:
000076D2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7298
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	locret_7298
000076E0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E8 701E                       		moveq	#$1E,d0
000076EA 6000 A0B4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            locret_7298:
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            
000076F0                            Resize_SBZ2boss2:
000076F0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076F6 6500                       		bcs.s	loc_72B6
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_72B0
000076FE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007702 5438 F742                  		addq.b	#2,($FFFFF742).w
00007706                            
00007706                            loc_72B0:
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C                            
0000770C                            loc_72B6:
0000770C 6000                       		bra.s	loc_72C2
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SBZ2end:
0000770E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007714 6500                       		bcs.s	loc_72C2
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            loc_72C2:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_FZ:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007732 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007736 0000                       		dc.w Resize_FZend2-off_72D8
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZmain:
00007738 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_72F4
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744 701F                       		moveq	#$1F,d0
00007746 6100 A058                  		bsr.w	LoadPLC		; load FZ boss patterns
0000774A                            
0000774A                            loc_72F4:
0000774A 60CC                       		bra.s	loc_72C2
0000774C                            ; ===========================================================================
0000774C                            
0000774C                            Resize_FZboss:
0000774C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007752 6500                       		bcs.s	loc_7312
00007754 6100 0000                  		bsr.w	SingleObjLoad
00007758 6600                       		bne.s	loc_7312
0000775A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000775E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007762 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007768                            
00007768                            loc_7312:
00007768 60AE                       		bra.s	loc_72C2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_FZend:
0000776A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007770 6500                       		bcs.s	loc_7320
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            loc_7320:
00007776 60A0                       		bra.s	loc_72C2
00007778                            ; ===========================================================================
00007778                            
00007778                            locret_7322:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            Resize_FZend2:
0000777A 609C                       		bra.s	loc_72C2
0000777C                            ; ===========================================================================
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            ; Ending sequence dynamic screen resizing (empty)
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            
0000777C                            Resize_Ending:				; XREF: Resize_Index
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Object 11 - GHZ bridge
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            
0000777E                            Obj11:					; XREF: Obj_Index
0000777E 7000                       		moveq	#0,d0
00007780 1028 0024                  		move.b	$24(a0),d0
00007784 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007788 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000778C                            ; ===========================================================================
0000778C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007790 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007794 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007798                            ; ===========================================================================
00007798                            
00007798                            Obj11_Main:				; XREF: Obj11_Index
00007798 5428 0024                  		addq.b	#2,$24(a0)
0000779C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077A4 317C 438E 0002             		move.w	#$438E,2(a0)
000077AA 117C 0004 0001             		move.b	#4,1(a0)
000077B0 117C 0003 0018             		move.b	#3,$18(a0)
000077B6 117C 0080 0019             		move.b	#$80,$19(a0)
000077BC 3428 000C                  		move.w	$C(a0),d2
000077C0 3628 0008                  		move.w	8(a0),d3
000077C4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077C6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077CA 7200                       		moveq	#0,d1
000077CC 1212                       		move.b	(a2),d1		; copy a2 to d1
000077CE 14FC 0000                  		move.b	#0,(a2)+
000077D2 3001                       		move.w	d1,d0
000077D4 E248                       		lsr.w	#1,d0
000077D6 E948                       		lsl.w	#4,d0
000077D8 9640                       		sub.w	d0,d3
000077DA 5501                       		subq.b	#2,d1
000077DC 6500                       		bcs.s	Obj11_Action
000077DE                            
000077DE                            Obj11_MakeBdg:
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	Obj11_Action
000077E4 5228 0028                  		addq.b	#1,$28(a0)
000077E8 B668 0008                  		cmp.w	8(a0),d3
000077EC 6600                       		bne.s	loc_73B8
000077EE 0643 0010                  		addi.w	#$10,d3
000077F2 3142 000C                  		move.w	d2,$C(a0)
000077F6 3142 003C                  		move.w	d2,$3C(a0)
000077FA 3A08                       		move.w	a0,d5
000077FC 0445 D000                  		subi.w	#-$3000,d5
00007800 EC4D                       		lsr.w	#6,d5
00007802 0245 007F                  		andi.w	#$7F,d5
00007806 14C5                       		move.b	d5,(a2)+
00007808 5228 0028                  		addq.b	#1,$28(a0)
0000780C                            
0000780C                            loc_73B8:				; XREF: ROM:00007398j
0000780C 3A09                       		move.w	a1,d5
0000780E 0445 D000                  		subi.w	#-$3000,d5
00007812 EC4D                       		lsr.w	#6,d5
00007814 0245 007F                  		andi.w	#$7F,d5
00007818 14C5                       		move.b	d5,(a2)+
0000781A 137C 000A 0024             		move.b	#$A,$24(a1)
00007820 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007822 3342 000C                  		move.w	d2,$C(a1)
00007826 3342 003C                  		move.w	d2,$3C(a1)
0000782A 3343 0008                  		move.w	d3,8(a1)
0000782E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007836 337C 438E 0002             		move.w	#$438E,2(a1)
0000783C 137C 0004 0001             		move.b	#4,1(a1)
00007842 137C 0003 0018             		move.b	#3,$18(a1)
00007848 137C 0008 0019             		move.b	#8,$19(a1)
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007856                            
00007856                            Obj11_Action:				; XREF: Obj11_Index
00007856 6100                       		bsr.s	Obj11_Solid
00007858 4A28 003E                  		tst.b	$3E(a0)
0000785C 6700                       		beq.s	Obj11_Display
0000785E 5928 003E                  		subq.b	#4,$3E(a0)
00007862 6100 0000                  		bsr.w	Obj11_Bend
00007866                            
00007866                            Obj11_Display:
00007866 6100 0000                  		bsr.w	DisplaySprite
0000786A 6000 0000                  		bra.w	Obj11_ChkDel
0000786E                            
0000786E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786E                            
0000786E                            
0000786E                            Obj11_Solid:				; XREF: Obj11_Action
0000786E 7200                       		moveq	#0,d1
00007870 1228 0028                  		move.b	$28(a0),d1
00007874 E749                       		lsl.w	#3,d1
00007876 3401                       		move.w	d1,d2
00007878 5041                       		addq.w	#8,d1
0000787A D442                       		add.w	d2,d2
0000787C 43F8 D000                  		lea	($FFFFD000).w,a1
00007880 4A69 0012                  		tst.w	$12(a1)
00007884 6B00 0000                  		bmi.w	locret_751E
00007888 3029 0008                  		move.w	8(a1),d0
0000788C 9068 0008                  		sub.w	8(a0),d0
00007890 D041                       		add.w	d1,d0
00007892 6B00 0000                  		bmi.w	locret_751E
00007896 B042                       		cmp.w	d2,d0
00007898 6400 0000                  		bcc.w	locret_751E
0000789C 6000                       		bra.s	Platform2
0000789E                            ; End of function Obj11_Solid
0000789E                            
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Platform subroutine
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789E                            
0000789E                            
0000789E                            PlatformObject:
0000789E 43F8 D000                  		lea	($FFFFD000).w,a1
000078A2 4A69 0012                  		tst.w	$12(a1)
000078A6 6B00 0000                  		bmi.w	locret_751E
000078AA 3029 0008                  		move.w	8(a1),d0
000078AE 9068 0008                  		sub.w	8(a0),d0
000078B2 D041                       		add.w	d1,d0
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 D241                       		add.w	d1,d1
000078BA B041                       		cmp.w	d1,d0
000078BC 6400 0000                  		bcc.w	locret_751E
000078C0                            
000078C0                            Platform2:
000078C0 3028 000C                  		move.w	$C(a0),d0
000078C4 5140                       		subq.w	#8,d0
000078C6                            
000078C6                            Platform3:
000078C6 3429 000C                  		move.w	$C(a1),d2
000078CA 1229 0016                  		move.b	$16(a1),d1
000078CE 4881                       		ext.w	d1
000078D0 D242                       		add.w	d2,d1
000078D2 5841                       		addq.w	#4,d1
000078D4 9041                       		sub.w	d1,d0
000078D6 6200 0000                  		bhi.w	locret_751E
000078DA 0C40 FFF0                  		cmpi.w	#-$10,d0
000078DE 6500 0000                  		bcs.w	locret_751E
000078E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078E6 6B00 0000                  		bmi.w	locret_751E
000078EA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F0 6400 0000                  		bcc.w	locret_751E
000078F4 D440                       		add.w	d0,d2
000078F6 5642                       		addq.w	#3,d2
000078F8 3342 000C                  		move.w	d2,$C(a1)
000078FC 5428 0024                  		addq.b	#2,$24(a0)
00007900                            
00007900                            loc_74AE:
00007900 0829 0003 0022             		btst	#3,$22(a1)
00007906 6700                       		beq.s	loc_74DC
00007908 7000                       		moveq	#0,d0
0000790A 1029 003D                  		move.b	$3D(a1),d0
0000790E ED48                       		lsl.w	#6,d0
00007910 0680 00FF D000             		addi.l	#$FFD000,d0
00007916 2440                       		movea.l	d0,a2
00007918 08AA 0003 0022             		bclr	#3,$22(a2)
0000791E 422A 0025                  		clr.b	$25(a2)
00007922 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007928 6600                       		bne.s	loc_74DC
0000792A 552A 0024                  		subq.b	#2,$24(a2)
0000792E                            
0000792E                            loc_74DC:
0000792E 3008                       		move.w	a0,d0
00007930 0440 D000                  		subi.w	#-$3000,d0
00007934 EC48                       		lsr.w	#6,d0
00007936 0240 007F                  		andi.w	#$7F,d0
0000793A 1340 003D                  		move.b	d0,$3D(a1)
0000793E 137C 0000 0026             		move.b	#0,$26(a1)
00007944 337C 0000 0012             		move.w	#0,$12(a1)
0000794A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007950 0829 0001 0022             		btst	#1,$22(a1)
00007956 6700                       		beq.s	loc_7512
00007958 2F08                       		move.l	a0,-(sp)
0000795A 2049                       		movea.l	a1,a0
0000795C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007962 205F                       		movea.l	(sp)+,a0
00007964                            
00007964                            loc_7512:
00007964 08E9 0003 0022             		bset	#3,$22(a1)
0000796A 08E8 0003 0022             		bset	#3,$22(a0)
00007970                            
00007970                            locret_751E:
00007970 4E75                       		rts	
00007972                            ; End of function PlatformObject
00007972                            
00007972                            ; ---------------------------------------------------------------------------
00007972                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007972                            ; ---------------------------------------------------------------------------
00007972                            
00007972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007972                            
00007972                            
00007972                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 4A69 0012                  		tst.w	$12(a1)
0000797A 6B00 FFF4                  		bmi.w	locret_751E
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6BE6                       		bmi.s	locret_751E
0000798A D241                       		add.w	d1,d1
0000798C B041                       		cmp.w	d1,d0
0000798E 64E0                       		bcc.s	locret_751E
00007990 0828 0000 0001             		btst	#0,1(a0)
00007996 6700                       		beq.s	loc_754A
00007998 4640                       		not.w	d0
0000799A D041                       		add.w	d1,d0
0000799C                            
0000799C                            loc_754A:
0000799C E248                       		lsr.w	#1,d0
0000799E 7600                       		moveq	#0,d3
000079A0 1632 0000                  		move.b	(a2,d0.w),d3
000079A4 3028 000C                  		move.w	$C(a0),d0
000079A8 9043                       		sub.w	d3,d0
000079AA 6000 FF1A                  		bra.w	Platform3
000079AE                            ; End of function SlopeObject
000079AE                            
000079AE                            
000079AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AE                            
000079AE                            
000079AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079AE 43F8 D000                  		lea	($FFFFD000).w,a1
000079B2 4A69 0012                  		tst.w	$12(a1)
000079B6 6B00 FFB8                  		bmi.w	locret_751E
000079BA 3029 0008                  		move.w	8(a1),d0
000079BE 9068 0008                  		sub.w	8(a0),d0
000079C2 D041                       		add.w	d1,d0
000079C4 6B00 FFAA                  		bmi.w	locret_751E
000079C8 D241                       		add.w	d1,d1
000079CA B041                       		cmp.w	d1,d0
000079CC 6400 FFA2                  		bcc.w	locret_751E
000079D0 3028 000C                  		move.w	$C(a0),d0
000079D4 9043                       		sub.w	d3,d0
000079D6 6000 FEEE                  		bra.w	Platform3
000079DA                            ; End of function Obj15_Solid
000079DA                            
000079DA                            ; ===========================================================================
000079DA                            
000079DA                            Obj11_Action2:				; XREF: Obj11_Index
000079DA 6100                       		bsr.s	Obj11_WalkOff
000079DC 6100 0000                  		bsr.w	DisplaySprite
000079E0 6000 0000                  		bra.w	Obj11_ChkDel
000079E4                            
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            ; Subroutine allowing Sonic to walk off a bridge
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            
000079E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E4                            
000079E4                            
000079E4                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079E4 7200                       		moveq	#0,d1
000079E6 1228 0028                  		move.b	$28(a0),d1
000079EA E749                       		lsl.w	#3,d1
000079EC 3401                       		move.w	d1,d2
000079EE 5041                       		addq.w	#8,d1
000079F0 6100                       		bsr.s	ExitPlatform2
000079F2 6400                       		bcc.s	locret_75BE
000079F4 E848                       		lsr.w	#4,d0
000079F6 1140 003F                  		move.b	d0,$3F(a0)
000079FA 1028 003E                  		move.b	$3E(a0),d0
000079FE 0C00 0040                  		cmpi.b	#$40,d0
00007A02 6700                       		beq.s	loc_75B6
00007A04 5828 003E                  		addq.b	#4,$3E(a0)
00007A08                            
00007A08                            loc_75B6:
00007A08 6100 0000                  		bsr.w	Obj11_Bend
00007A0C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A10                            
00007A10                            locret_75BE:
00007A10 4E75                       		rts	
00007A12                            ; End of function Obj11_WalkOff
00007A12                            
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            
00007A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A12                            
00007A12                            
00007A12                            ExitPlatform:
00007A12 3401                       		move.w	d1,d2
00007A14                            
00007A14                            ExitPlatform2:
00007A14 D442                       		add.w	d2,d2
00007A16 43F8 D000                  		lea	($FFFFD000).w,a1
00007A1A 0829 0001 0022             		btst	#1,$22(a1)
00007A20 6600                       		bne.s	loc_75E0
00007A22 3029 0008                  		move.w	8(a1),d0
00007A26 9068 0008                  		sub.w	8(a0),d0
00007A2A D041                       		add.w	d1,d0
00007A2C 6B00                       		bmi.s	loc_75E0
00007A2E B042                       		cmp.w	d2,d0
00007A30 6500                       		bcs.s	locret_75F2
00007A32                            
00007A32                            loc_75E0:
00007A32 08A9 0003 0022             		bclr	#3,$22(a1)
00007A38 117C 0002 0024             		move.b	#2,$24(a0)
00007A3E 08A8 0003 0022             		bclr	#3,$22(a0)
00007A44                            
00007A44                            locret_75F2:
00007A44 4E75                       		rts	
00007A46                            ; End of function ExitPlatform
00007A46                            
00007A46                            
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                            
00007A46                            
00007A46                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A46 7000                       		moveq	#0,d0
00007A48 1028 003F                  		move.b	$3F(a0),d0
00007A4C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A50 ED48                       		lsl.w	#6,d0
00007A52 0680 00FF D000             		addi.l	#$FFD000,d0
00007A58 2440                       		movea.l	d0,a2
00007A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A5E 302A 000C                  		move.w	$C(a2),d0
00007A62 5140                       		subq.w	#8,d0
00007A64 7200                       		moveq	#0,d1
00007A66 1229 0016                  		move.b	$16(a1),d1
00007A6A 9041                       		sub.w	d1,d0
00007A6C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_MoveSonic
00007A72                            
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A72 1028 003E                  		move.b	$3E(a0),d0
00007A76 6100 B1AA                  		bsr.w	CalcSine
00007A7A 3800                       		move.w	d0,d4
00007A7C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A82 7000                       		moveq	#0,d0
00007A84 1028 0028                  		move.b	$28(a0),d0
00007A88 E948                       		lsl.w	#4,d0
00007A8A 7600                       		moveq	#0,d3
00007A8C 1628 003F                  		move.b	$3F(a0),d3
00007A90 3403                       		move.w	d3,d2
00007A92 D640                       		add.w	d0,d3
00007A94 7A00                       		moveq	#0,d5
00007A96 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A9C 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA0 0243 000F                  		andi.w	#$F,d3
00007AA4 E94B                       		lsl.w	#4,d3
00007AA6 47F4 3000                  		lea	(a4,d3.w),a3
00007AAA 45E8 0029                  		lea	$29(a0),a2
00007AAE                            
00007AAE                            loc_765C:
00007AAE 7000                       		moveq	#0,d0
00007AB0 101A                       		move.b	(a2)+,d0
00007AB2 ED48                       		lsl.w	#6,d0
00007AB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ABA 2240                       		movea.l	d0,a1
00007ABC 7000                       		moveq	#0,d0
00007ABE 101B                       		move.b	(a3)+,d0
00007AC0 5240                       		addq.w	#1,d0
00007AC2 C0C5                       		mulu.w	d5,d0
00007AC4 C0C4                       		mulu.w	d4,d0
00007AC6 4840                       		swap	d0
00007AC8 D069 003C                  		add.w	$3C(a1),d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)
00007AD0 51CA FFDC                  		dbf	d2,loc_765C
00007AD4 7000                       		moveq	#0,d0
00007AD6 1028 0028                  		move.b	$28(a0),d0
00007ADA 7600                       		moveq	#0,d3
00007ADC 1628 003F                  		move.b	$3F(a0),d3
00007AE0 5203                       		addq.b	#1,d3
00007AE2 9600                       		sub.b	d0,d3
00007AE4 4403                       		neg.b	d3
00007AE6 6B00                       		bmi.s	locret_76CA
00007AE8 3403                       		move.w	d3,d2
00007AEA E94B                       		lsl.w	#4,d3
00007AEC 47F4 3000                  		lea	(a4,d3.w),a3
00007AF0 D6C2                       		adda.w	d2,a3
00007AF2 5342                       		subq.w	#1,d2
00007AF4 6500                       		bcs.s	locret_76CA
00007AF6                            
00007AF6                            loc_76A4:
00007AF6 7000                       		moveq	#0,d0
00007AF8 101A                       		move.b	(a2)+,d0
00007AFA ED48                       		lsl.w	#6,d0
00007AFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007B02 2240                       		movea.l	d0,a1
00007B04 7000                       		moveq	#0,d0
00007B06 1023                       		move.b	-(a3),d0
00007B08 5240                       		addq.w	#1,d0
00007B0A C0C5                       		mulu.w	d5,d0
00007B0C C0C4                       		mulu.w	d4,d0
00007B0E 4840                       		swap	d0
00007B10 D069 003C                  		add.w	$3C(a1),d0
00007B14 3340 000C                  		move.w	d0,$C(a1)
00007B18 51CA FFDC                  		dbf	d2,loc_76A4
00007B1C                            
00007B1C                            locret_76CA:
00007B1C 4E75                       		rts	
00007B1E                            ; End of function Obj11_Bend
00007B1E                            
00007B1E                            ; ===========================================================================
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; GHZ bridge-bending data
00007B1E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C2E                            		even
00007C2E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D2E                            		even
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D2E 3028 0008                  		move.w	8(a0),d0
00007D32 0240 FF80                  		andi.w	#$FF80,d0
00007D36 3238 F700                  		move.w	($FFFFF700).w,d1
00007D3A 0441 0080                  		subi.w	#$80,d1
00007D3E 0241 FF80                  		andi.w	#$FF80,d1
00007D42 9041                       		sub.w	d1,d0
00007D44 0C40 0280                  		cmpi.w	#$280,d0
00007D48 6200 0000                  		bhi.w	Obj11_DelAll
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D4E 7400                       		moveq	#0,d2
00007D50 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D54 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D56 5302                       		subq.b	#1,d2		; subtract 1
00007D58 6500                       		bcs.s	Obj11_Delete
00007D5A                            
00007D5A                            Obj11_DelLoop:
00007D5A 7000                       		moveq	#0,d0
00007D5C 101A                       		move.b	(a2)+,d0
00007D5E ED48                       		lsl.w	#6,d0
00007D60 0680 00FF D000             		addi.l	#$FFD000,d0
00007D66 2240                       		movea.l	d0,a1
00007D68 B048                       		cmp.w	a0,d0
00007D6A 6700                       		beq.s	loc_791E
00007D6C 6100 0000                  		bsr.w	DeleteObject2
00007D70                            
00007D70                            loc_791E:
00007D70 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D74                            
00007D74                            Obj11_Delete:
00007D74 6100 0000                  		bsr.w	DeleteObject
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj11_Delete2:				; XREF: Obj11_Index
00007D7A 6100 0000                  		bsr.w	DeleteObject
00007D7E 4E75                       		rts	
00007D80                            ; ===========================================================================
00007D80                            
00007D80                            Obj11_Display2:				; XREF: Obj11_Index
00007D80 6100 0000                  		bsr.w	DisplaySprite
00007D84 4E75                       		rts	
00007D86                            ; ===========================================================================
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            Map_obj11:
00007D86                            	include "_maps\obj11.asm"
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D8A 0000                       		dc.w byte_794B-Map_obj11
00007D8C 01                         byte_793A:	dc.b 1
00007D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D92 02                         byte_7940:	dc.b 2
00007D93 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D98 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D9D 01                         byte_794B:	dc.b 1
00007D9E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DA4                            ;	    - spiked ball on a chain (SBZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj15:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DB6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DBA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DBE 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC0                            ; ===========================================================================
00007DC0                            
00007DC0                            Obj15_Main:				; XREF: Obj15_Index
00007DC0 5428 0024                  		addq.b	#2,$24(a0)
00007DC4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DCC 317C 4380 0002             		move.w	#$4380,2(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007DE4 117C 0008 0016             		move.b	#8,$16(a0)
00007DEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DF6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DFC 6600                       		bne.s	Obj15_NotSLZ
00007DFE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E06 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E12 117C 0010 0016             		move.b	#$10,$16(a0)
00007E18 117C 0099 0020             		move.b	#$99,$20(a0)
00007E1E                            
00007E1E                            Obj15_NotSLZ:
00007E1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E24 6600                       		bne.s	Obj15_SetLength
00007E26 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E2E 317C 0391 0002             		move.w	#$391,2(a0)
00007E34 117C 0018 0019             		move.b	#$18,$19(a0)
00007E3A 117C 0018 0016             		move.b	#$18,$16(a0)
00007E40 117C 0086 0020             		move.b	#$86,$20(a0)
00007E46 117C 000C 0024             		move.b	#$C,$24(a0)
00007E4C                            
00007E4C                            Obj15_SetLength:
00007E4C 1810                       		move.b	0(a0),d4
00007E4E 7200                       		moveq	#0,d1
00007E50 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E54 1212                       		move.b	(a2),d1		; move a2 to d1
00007E56 3F01                       		move.w	d1,-(sp)
00007E58 0241 000F                  		andi.w	#$F,d1
00007E5C 14FC 0000                  		move.b	#0,(a2)+
00007E60 3601                       		move.w	d1,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 5003                       		addq.b	#8,d3
00007E66 1143 003C                  		move.b	d3,$3C(a0)
00007E6A 5103                       		subq.b	#8,d3
00007E6C 4A28 001A                  		tst.b	$1A(a0)
00007E70 6700                       		beq.s	Obj15_MakeChain
00007E72 5003                       		addq.b	#8,d3
00007E74 5341                       		subq.w	#1,d1
00007E76                            
00007E76                            Obj15_MakeChain:
00007E76 6100 0000                  		bsr.w	SingleObjLoad
00007E7A 6600                       		bne.s	loc_7A92
00007E7C 5228 0028                  		addq.b	#1,$28(a0)
00007E80 3A09                       		move.w	a1,d5
00007E82 0445 D000                  		subi.w	#-$3000,d5
00007E86 EC4D                       		lsr.w	#6,d5
00007E88 0245 007F                  		andi.w	#$7F,d5
00007E8C 14C5                       		move.b	d5,(a2)+
00007E8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E94 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E96 2368 0004 0004             		move.l	4(a0),4(a1)
00007E9C 3368 0002 0002             		move.w	2(a0),2(a1)
00007EA2 08A9 0006 0002             		bclr	#6,2(a1)
00007EA8 137C 0004 0001             		move.b	#4,1(a1)
00007EAE 137C 0004 0018             		move.b	#4,$18(a1)
00007EB4 137C 0008 0019             		move.b	#8,$19(a1)
00007EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC0 1343 003C                  		move.b	d3,$3C(a1)
00007EC4 0403 0010                  		subi.b	#$10,d3
00007EC8 6400                       		bcc.s	loc_7A8E
00007ECA 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED0 137C 0003 0018             		move.b	#3,$18(a1)
00007ED6 08E9 0006 0002             		bset	#6,2(a1)
00007EDC                            
00007EDC                            loc_7A8E:
00007EDC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE0                            
00007EE0                            loc_7A92:
00007EE0 3A08                       		move.w	a0,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EF4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EFA 321F                       		move.w	(sp)+,d1
00007EFC 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F00 6700                       		beq.s	loc_7AD4	; if not, branch
00007F02 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F0A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F10 117C 0001 001A             		move.b	#1,$1A(a0)
00007F16 117C 0002 0018             		move.b	#2,$18(a0)
00007F1C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F22                            
00007F22                            loc_7AD4:
00007F22 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F28 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F2A                            
00007F2A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F2A 7200                       		moveq	#0,d1
00007F2C 1228 0019                  		move.b	$19(a0),d1
00007F30 7600                       		moveq	#0,d3
00007F32 1628 0016                  		move.b	$16(a0),d3
00007F36 6100 FA76                  		bsr.w	Obj15_Solid
00007F3A                            
00007F3A                            Obj15_Action:				; XREF: Obj15_Index
00007F3A 6100 0000                  		bsr.w	Obj15_Move
00007F3E 6100 0000                  		bsr.w	DisplaySprite
00007F42 6000 0000                  		bra.w	Obj15_ChkDel
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj15_Action2:				; XREF: Obj15_Index
00007F46 7200                       		moveq	#0,d1
00007F48 1228 0019                  		move.b	$19(a0),d1
00007F4C 6100 FAC4                  		bsr.w	ExitPlatform
00007F50 3F28 0008                  		move.w	8(a0),-(sp)
00007F54 6100 0000                  		bsr.w	Obj15_Move
00007F58 341F                       		move.w	(sp)+,d2
00007F5A 7600                       		moveq	#0,d3
00007F5C 1628 0016                  		move.b	$16(a0),d3
00007F60 5203                       		addq.b	#1,d3
00007F62 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F66 6100 0000                  		bsr.w	DisplaySprite
00007F6A 6000 0000                  		bra.w	Obj15_ChkDel
00007F6E                            
00007F6E 4E75                       		rts
00007F70                            
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Subroutine to	change Sonic's position with a platform
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            
00007F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F70                            
00007F70                            
00007F70                            MvSonicOnPtfm:
00007F70 43F8 D000                  		lea	($FFFFD000).w,a1
00007F74 3028 000C                  		move.w	$C(a0),d0
00007F78 9043                       		sub.w	d3,d0
00007F7A 6000                       		bra.s	MvSonic2
00007F7C                            ; End of function MvSonicOnPtfm
00007F7C                            
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            ; Subroutine to	change Sonic's position with a platform
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            MvSonicOnPtfm2:
00007F7C 43F8 D000                  		lea	($FFFFD000).w,a1
00007F80 3028 000C                  		move.w	$C(a0),d0
00007F84 0440 0009                  		subi.w	#9,d0
00007F88                            
00007F88                            MvSonic2:
00007F88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F8C 6B00                       		bmi.s	locret_7B62
00007F8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F94 6400                       		bcc.s	locret_7B62
00007F96 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F9A 6600                       		bne.s	locret_7B62
00007F9C 7200                       		moveq	#0,d1
00007F9E 1229 0016                  		move.b	$16(a1),d1
00007FA2 9041                       		sub.w	d1,d0
00007FA4 3340 000C                  		move.w	d0,$C(a1)
00007FA8 9468 0008                  		sub.w	8(a0),d2
00007FAC 9569 0008                  		sub.w	d2,8(a1)
00007FB0                            
00007FB0                            locret_7B62:
00007FB0 4E75                       		rts	
00007FB2                            ; End of function MvSonicOnPtfm2
00007FB2                            
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FB2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FB6 323C 0080                  		move.w	#$80,d1
00007FBA 0828 0000 0022             		btst	#0,$22(a0)
00007FC0 6700                       		beq.s	loc_7B78
00007FC2 4440                       		neg.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_7B78:
00007FC6 6000                       		bra.s	Obj15_Move2
00007FC8                            ; End of function Obj15_Move
00007FC8                            
00007FC8                            
00007FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC8                            
00007FC8                            
00007FC8                            Obj48_Move:				; XREF: Obj48_Display2
00007FC8 4A28 003D                  		tst.b	$3D(a0)
00007FCC 6600                       		bne.s	loc_7B9C
00007FCE 3028 003E                  		move.w	$3E(a0),d0
00007FD2 5040                       		addq.w	#8,d0
00007FD4 3140 003E                  		move.w	d0,$3E(a0)
00007FD8 D168 0026                  		add.w	d0,$26(a0)
00007FDC 0C40 0200                  		cmpi.w	#$200,d0
00007FE0 6600                       		bne.s	loc_7BB6
00007FE2 117C 0001 003D             		move.b	#1,$3D(a0)
00007FE8 6000                       		bra.s	loc_7BB6
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            loc_7B9C:
00007FEA 3028 003E                  		move.w	$3E(a0),d0
00007FEE 5140                       		subq.w	#8,d0
00007FF0 3140 003E                  		move.w	d0,$3E(a0)
00007FF4 D168 0026                  		add.w	d0,$26(a0)
00007FF8 0C40 FE00                  		cmpi.w	#-$200,d0
00007FFC 6600                       		bne.s	loc_7BB6
00007FFE 117C 0000 003D             		move.b	#0,$3D(a0)
00008004                            
00008004                            loc_7BB6:
00008004 1028 0026                  		move.b	$26(a0),d0
00008008                            ; End of function Obj48_Move
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008008 6100 AC18                  		bsr.w	CalcSine
0000800C 3428 0038                  		move.w	$38(a0),d2
00008010 3628 003A                  		move.w	$3A(a0),d3
00008014 45E8 0028                  		lea	$28(a0),a2
00008018 7C00                       		moveq	#0,d6
0000801A 1C1A                       		move.b	(a2)+,d6
0000801C                            
0000801C                            loc_7BCE:
0000801C 7800                       		moveq	#0,d4
0000801E 181A                       		move.b	(a2)+,d4
00008020 ED4C                       		lsl.w	#6,d4
00008022 0684 00FF D000             		addi.l	#$FFD000,d4
00008028 2244                       		movea.l	d4,a1
0000802A 7800                       		moveq	#0,d4
0000802C 1829 003C                  		move.b	$3C(a1),d4
00008030 2A04                       		move.l	d4,d5
00008032 C9C0                       		muls.w	d0,d4
00008034 E084                       		asr.l	#8,d4
00008036 CBC1                       		muls.w	d1,d5
00008038 E085                       		asr.l	#8,d5
0000803A D842                       		add.w	d2,d4
0000803C DA43                       		add.w	d3,d5
0000803E 3344 000C                  		move.w	d4,$C(a1)
00008042 3345 0008                  		move.w	d5,8(a1)
00008046 51CE FFD4                  		dbf	d6,loc_7BCE
0000804A 4E75                       		rts	
0000804C                            ; End of function Obj15_Move2
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000804C 3028 003A                  		move.w	$3A(a0),d0
00008050 0240 FF80                  		andi.w	#$FF80,d0
00008054 3238 F700                  		move.w	($FFFFF700).w,d1
00008058 0441 0080                  		subi.w	#$80,d1
0000805C 0241 FF80                  		andi.w	#$FF80,d1
00008060 9041                       		sub.w	d1,d0
00008062 0C40 0280                  		cmpi.w	#$280,d0
00008066 6200 0000                  		bhi.w	Obj15_DelAll
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000806C 7400                       		moveq	#0,d2
0000806E 45E8 0028                  		lea	$28(a0),a2
00008072 141A                       		move.b	(a2)+,d2
00008074                            
00008074                            Obj15_DelLoop:
00008074 7000                       		moveq	#0,d0
00008076 101A                       		move.b	(a2)+,d0
00008078 ED48                       		lsl.w	#6,d0
0000807A 0680 00FF D000             		addi.l	#$FFD000,d0
00008080 2240                       		movea.l	d0,a1
00008082 6100 0000                  		bsr.w	DeleteObject2
00008086 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000808A 4E75                       		rts	
0000808C                            ; ===========================================================================
0000808C                            
0000808C                            Obj15_Delete:				; XREF: Obj15_Index
0000808C 6100 0000                  		bsr.w	DeleteObject
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Display:				; XREF: Obj15_Index
00008092 6000 0000                  		bra.w	DisplaySprite
00008096                            ; ===========================================================================
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096                            Map_obj15:
00008096                            	include "_maps\obj15ghz.asm"
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096 0000                       		dc.w byte_7C4E-Map_obj15
00008098 0000                       		dc.w byte_7C59-Map_obj15
0000809A 0000                       		dc.w byte_7C5F-Map_obj15
0000809C 02                         byte_7C4E:	dc.b 2
0000809D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080A2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080A7 01                         byte_7C59:	dc.b 1
000080A8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080AD 01                         byte_7C5F:	dc.b 1
000080AE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080B4 00                         		even
000080B4 00                         		even
000080B4                            
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            Map_obj15a:
000080B4                            	include "_maps\obj15slz.asm"
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4 0000                       		dc.w byte_7C6C-Map_obj15a
000080B6 0000                       		dc.w byte_7C95-Map_obj15a
000080B8 0000                       		dc.w byte_7C9B-Map_obj15a
000080BA 08                         byte_7C6C:	dc.b 8
000080BB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080C5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080CA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080CF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080D4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080D9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080DE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080E3 01                         byte_7C95:	dc.b 1
000080E4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080E9 01                         byte_7C9B:	dc.b 1
000080EA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F0 00                         		even
000080F0 00                         		even
000080F0                            
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            
000080F0                            Obj17:					; XREF: Obj_Index
000080F0 7000                       		moveq	#0,d0
000080F2 1028 0024                  		move.b	$24(a0),d0
000080F6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080FA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080FE                            ; ===========================================================================
000080FE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008100 0000                       		dc.w Obj17_Action-Obj17_Index
00008102 0000                       		dc.w Obj17_Action-Obj17_Index
00008104 0000                       		dc.w Obj17_Delete-Obj17_Index
00008106 0000                       		dc.w Obj17_Display-Obj17_Index
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj17_Main:				; XREF: Obj17_Index
00008108 5428 0024                  		addq.b	#2,$24(a0)
0000810C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008114 317C 4398 0002             		move.w	#$4398,2(a0)
0000811A 117C 0007 0022             		move.b	#7,$22(a0)
00008120 117C 0004 0001             		move.b	#4,1(a0)
00008126 117C 0003 0018             		move.b	#3,$18(a0)
0000812C 117C 0008 0019             		move.b	#8,$19(a0)
00008132 3428 000C                  		move.w	$C(a0),d2
00008136 3628 0008                  		move.w	8(a0),d3
0000813A 1810                       		move.b	0(a0),d4
0000813C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008140 7200                       		moveq	#0,d1
00008142 1212                       		move.b	(a2),d1		; move a2 to d1
00008144 14FC 0000                  		move.b	#0,(a2)+
00008148 3001                       		move.w	d1,d0
0000814A E248                       		lsr.w	#1,d0
0000814C E948                       		lsl.w	#4,d0
0000814E 9640                       		sub.w	d0,d3
00008150 5501                       		subq.b	#2,d1
00008152 6500                       		bcs.s	Obj17_Action
00008154 7C00                       		moveq	#0,d6
00008156                            
00008156                            Obj17_MakeHelix:
00008156 6100 0000                  		bsr.w	SingleObjLoad
0000815A 6600                       		bne.s	Obj17_Action
0000815C 5228 0028                  		addq.b	#1,$28(a0)
00008160 3A09                       		move.w	a1,d5
00008162 0445 D000                  		subi.w	#$D000,d5
00008166 EC4D                       		lsr.w	#6,d5
00008168 0245 007F                  		andi.w	#$7F,d5
0000816C 14C5                       		move.b	d5,(a2)+
0000816E 137C 0008 0024             		move.b	#8,$24(a1)
00008174 1284                       		move.b	d4,0(a1)
00008176 3342 000C                  		move.w	d2,$C(a1)
0000817A 3343 0008                  		move.w	d3,8(a1)
0000817E 2368 0004 0004             		move.l	4(a0),4(a1)
00008184 337C 4398 0002             		move.w	#$4398,2(a1)
0000818A 137C 0004 0001             		move.b	#4,1(a1)
00008190 137C 0003 0018             		move.b	#3,$18(a1)
00008196 137C 0008 0019             		move.b	#8,$19(a1)
0000819C 1346 003E                  		move.b	d6,$3E(a1)
000081A0 5206                       		addq.b	#1,d6
000081A2 0206 0007                  		andi.b	#7,d6
000081A6 0643 0010                  		addi.w	#$10,d3
000081AA B668 0008                  		cmp.w	8(a0),d3
000081AE 6600                       		bne.s	loc_7D78
000081B0 1146 003E                  		move.b	d6,$3E(a0)
000081B4 5206                       		addq.b	#1,d6
000081B6 0206 0007                  		andi.b	#7,d6
000081BA 0643 0010                  		addi.w	#$10,d3
000081BE 5228 0028                  		addq.b	#1,$28(a0)
000081C2                            
000081C2                            loc_7D78:
000081C2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081C6                            
000081C6                            Obj17_Action:				; XREF: Obj17_Index
000081C6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081CA 6100 0000                  		bsr.w	DisplaySprite
000081CE 6000 0000                  		bra.w	Obj17_ChkDel
000081D2                            
000081D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D2                            
000081D2                            
000081D2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081D2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081D6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081DC D028 003E                  		add.b	$3E(a0),d0
000081E0 0200 0007                  		andi.b	#7,d0
000081E4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081E8 6600                       		bne.s	locret_7DA6
000081EA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F0                            
000081F0                            locret_7DA6:
000081F0 4E75                       		rts	
000081F2                            ; End of function Obj17_RotateSpikes
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj17_ChkDel:				; XREF: Obj17_Action
000081F2 3028 0008                  		move.w	8(a0),d0
000081F6 0240 FF80                  		andi.w	#$FF80,d0
000081FA 3238 F700                  		move.w	($FFFFF700).w,d1
000081FE 0441 0080                  		subi.w	#$80,d1
00008202 0241 FF80                  		andi.w	#$FF80,d1
00008206 9041                       		sub.w	d1,d0
00008208 0C40 0280                  		cmpi.w	#$280,d0
0000820C 6200 0000                  		bhi.w	Obj17_DelAll
00008210 4E75                       		rts	
00008212                            ; ===========================================================================
00008212                            
00008212                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008212 7400                       		moveq	#0,d2
00008214 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008218 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000821A 5502                       		subq.b	#2,d2
0000821C 6500                       		bcs.s	Obj17_Delete
0000821E                            
0000821E                            Obj17_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008230 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008234                            
00008234                            Obj17_Delete:				; XREF: Obj17_Index
00008234 6100 0000                  		bsr.w	DeleteObject
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj17_Display:				; XREF: Obj17_Index
0000823A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000823E 6000 0000                  		bra.w	DisplaySprite
00008242                            ; ===========================================================================
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242                            Map_obj17:
00008242                            	include "_maps\obj17.asm"
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008246 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000824A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008252 01                         byte_7E08:	dc.b 1
00008253 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008258 01                         byte_7E0E:	dc.b 1
00008259 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000825E 01                         byte_7E14:	dc.b 1
0000825F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008264 01                         byte_7E1A:	dc.b 1
00008265 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000826A 01                         byte_7E20:	dc.b 1
0000826B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008270 01                         byte_7E26:	dc.b 1
00008271 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008276 01                         byte_7E2C:	dc.b 1
00008277 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000827C                            		even
0000827C                            		even
0000827C                            
0000827C                            ; ===========================================================================
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            
0000827C                            Obj18:					; XREF: Obj_Index
0000827C 7000                       		moveq	#0,d0
0000827E 1028 0024                  		move.b	$24(a0),d0
00008282 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008286 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000828A                            ; ===========================================================================
0000828A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000828C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000828E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008290 0000                       		dc.w Obj18_Delete-Obj18_Index
00008292 0000                       		dc.w Obj18_Action-Obj18_Index
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Main:				; XREF: Obj18_Index
00008294 5428 0024                  		addq.b	#2,$24(a0)
00008298 317C 4000 0002             		move.w	#$4000,2(a0)
0000829E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082A6 117C 0020 0019             		move.b	#$20,$19(a0)
000082AC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082B2 6600                       		bne.s	Obj18_NotSYZ
000082B4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082BC 117C 0020 0019             		move.b	#$20,$19(a0)
000082C2                            
000082C2                            Obj18_NotSYZ:
000082C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082C8 6600                       		bne.s	Obj18_NotSLZ
000082CA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082D2 117C 0020 0019             		move.b	#$20,$19(a0)
000082D8 317C 4000 0002             		move.w	#$4000,2(a0)
000082DE 117C 0003 0028             		move.b	#3,$28(a0)
000082E4                            
000082E4                            Obj18_NotSLZ:
000082E4 117C 0004 0001             		move.b	#4,1(a0)
000082EA 117C 0004 0018             		move.b	#4,$18(a0)
000082F0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00008302 317C 0080 0026             		move.w	#$80,$26(a0)
00008308 7200                       		moveq	#0,d1
0000830A 1028 0028                  		move.b	$28(a0),d0
0000830E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008312 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008314 5201                       		addq.b	#1,d1		; use frame #1
00008316 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000831C                            
0000831C                            Obj18_SetFrame:
0000831C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008320                            
00008320                            Obj18_Solid:				; XREF: Obj18_Index
00008320 4A28 0038                  		tst.b	$38(a0)
00008324 6700                       		beq.s	loc_7EE0
00008326 5928 0038                  		subq.b	#4,$38(a0)
0000832A                            
0000832A                            loc_7EE0:
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0019                  		move.b	$19(a0),d1
00008330 6100 F56C                  		bsr.w	PlatformObject
00008334                            
00008334                            Obj18_Action:				; XREF: Obj18_Index
00008334 6100 0000                  		bsr.w	Obj18_Move
00008338 6100 0000                  		bsr.w	Obj18_Nudge
0000833C 6100 0000                  		bsr.w	DisplaySprite
00008340 6000 0000                  		bra.w	Obj18_ChkDel
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Action2:				; XREF: Obj18_Index
00008344 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000834A 6700                       		beq.s	loc_7F06
0000834C 5828 0038                  		addq.b	#4,$38(a0)
00008350                            
00008350                            loc_7F06:
00008350 7200                       		moveq	#0,d1
00008352 1228 0019                  		move.b	$19(a0),d1
00008356 6100 F6BA                  		bsr.w	ExitPlatform
0000835A 3F28 0008                  		move.w	8(a0),-(sp)
0000835E 6100 0000                  		bsr.w	Obj18_Move
00008362 6100 0000                  		bsr.w	Obj18_Nudge
00008366 341F                       		move.w	(sp)+,d2
00008368 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000836C 6100 0000                  		bsr.w	DisplaySprite
00008370 6000 0000                  		bra.w	Obj18_ChkDel
00008374                            
00008374 4E75                       		rts
00008376                            
00008376                            ; ---------------------------------------------------------------------------
00008376                            ; Subroutine to	move platform slightly when you	stand on it
00008376                            ; ---------------------------------------------------------------------------
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008376 1028 0038                  		move.b	$38(a0),d0
0000837A 6100 A8A6                  		bsr.w	CalcSine
0000837E 323C 0400                  		move.w	#$400,d1
00008382 C1C1                       		muls.w	d1,d0
00008384 4840                       		swap	d0
00008386 D068 002C                  		add.w	$2C(a0),d0
0000838A 3140 000C                  		move.w	d0,$C(a0)
0000838E 4E75                       		rts	
00008390                            ; End of function Obj18_Nudge
00008390                            
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Subroutine to	move platforms
00008390                            ; ---------------------------------------------------------------------------
00008390                            
00008390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008390                            
00008390                            
00008390                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008390 7000                       		moveq	#0,d0
00008392 1028 0028                  		move.b	$28(a0),d0
00008396 0240 000F                  		andi.w	#$F,d0
0000839A D040                       		add.w	d0,d0
0000839C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083A4                            ; End of function Obj18_Move
000083A4                            
000083A4                            ; ===========================================================================
000083A4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083A8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083AC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083BC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj18_Type00:
000083BE 4E75                       		rts			; platform 00 doesn't move
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj18_Type05:
000083C0 3028 0032                  		move.w	$32(a0),d0
000083C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083C8 4401                       		neg.b	d1		; reverse platform-motion
000083CA 0601 0040                  		addi.b	#$40,d1
000083CE 6000                       		bra.s	Obj18_01_Move
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Type01:
000083D0 3028 0032                  		move.w	$32(a0),d0
000083D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D8 0401 0040                  		subi.b	#$40,d1
000083DC                            
000083DC                            Obj18_01_Move:
000083DC 4881                       		ext.w	d1
000083DE D041                       		add.w	d1,d0
000083E0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083E4 6000 0000                  		bra.w	Obj18_ChgMotion
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj18_Type0C:
000083E8 3028 0034                  		move.w	$34(a0),d0
000083EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F0 4401                       		neg.b	d1		; reverse platform-motion
000083F2 0601 0030                  		addi.b	#$30,d1
000083F6 6000                       		bra.s	Obj18_02_Move
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_Type0B:
000083F8 3028 0034                  		move.w	$34(a0),d0
000083FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008400 0401 0030                  		subi.b	#$30,d1
00008404 6000                       		bra.s	Obj18_02_Move
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj18_Type06:
00008406 3028 0034                  		move.w	$34(a0),d0
0000840A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000840E 4401                       		neg.b	d1		; reverse platform-motion
00008410 0601 0040                  		addi.b	#$40,d1
00008414 6000                       		bra.s	Obj18_02_Move
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Type02:
00008416 3028 0034                  		move.w	$34(a0),d0
0000841A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000841E 0401 0040                  		subi.b	#$40,d1
00008422                            
00008422                            Obj18_02_Move:
00008422 4881                       		ext.w	d1
00008424 D041                       		add.w	d1,d0
00008426 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000842A 6000 0000                  		bra.w	Obj18_ChgMotion
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj18_Type03:
0000842E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008432 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008434 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000843A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000843C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008442                            
00008442                            Obj18_03_NoMove:
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_03_Wait:
00008444 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008448 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000844A 317C 0020 003A             		move.w	#32,$3A(a0)
00008450 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type04:
00008456 4A68 003A                  		tst.w	$3A(a0)
0000845A 6700                       		beq.s	loc_8048
0000845C 5368 003A                  		subq.w	#1,$3A(a0)
00008460 6600                       		bne.s	loc_8048
00008462 0828 0003 0022             		btst	#3,$22(a0)
00008468 6700                       		beq.s	loc_8042
0000846A 08E9 0001 0022             		bset	#1,$22(a1)
00008470 08A9 0003 0022             		bclr	#3,$22(a1)
00008476 137C 0002 0024             		move.b	#2,$24(a1)
0000847C 08A8 0003 0022             		bclr	#3,$22(a0)
00008482 4228 0025                  		clr.b	$25(a0)
00008486 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000848C                            
0000848C                            loc_8042:
0000848C 117C 0008 0024             		move.b	#8,$24(a0)
00008492                            
00008492                            loc_8048:
00008492 2628 002C                  		move.l	$2C(a0),d3
00008496 3028 0012                  		move.w	$12(a0),d0
0000849A 48C0                       		ext.l	d0
0000849C E180                       		asl.l	#8,d0
0000849E D680                       		add.l	d0,d3
000084A0 2143 002C                  		move.l	d3,$2C(a0)
000084A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000084AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084AE 0640 00E0                  		addi.w	#$E0,d0
000084B2 B068 002C                  		cmp.w	$2C(a0),d0
000084B6 6400                       		bcc.s	locret_8074
000084B8 117C 0006 0024             		move.b	#6,$24(a0)
000084BE                            
000084BE                            locret_8074:
000084BE 4E75                       		rts	
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type07:
000084C0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084C4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084CA 7000                       		moveq	#0,d0
000084CC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084D6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084DE                            
000084DE                            Obj18_07_NoMove:
000084DE 4E75                       		rts	
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj18_07_Wait:
000084E0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084E4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj18_Type08:
000084EC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F0 3028 0034                  		move.w	$34(a0),d0
000084F4 0440 0200                  		subi.w	#$200,d0
000084F8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084FC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008502                            
00008502                            Obj18_08_NoStop:
00008502 4E75                       		rts	
00008504                            ; ===========================================================================
00008504                            
00008504                            Obj18_Type0A:
00008504 3028 0034                  		move.w	$34(a0),d0
00008508 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000850C 0401 0040                  		subi.b	#$40,d1
00008510 4881                       		ext.w	d1
00008512 E241                       		asr.w	#1,d1
00008514 D041                       		add.w	d1,d0
00008516 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000851A                            
0000851A                            Obj18_ChgMotion:
0000851A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008520 4E75                       		rts	
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008522 3028 0032                  		move.w	$32(a0),d0
00008526 0240 FF80                  		andi.w	#$FF80,d0
0000852A 3238 F700                  		move.w	($FFFFF700).w,d1
0000852E 0441 0080                  		subi.w	#$80,d1
00008532 0241 FF80                  		andi.w	#$FF80,d1
00008536 9041                       		sub.w	d1,d0
00008538 0C40 0280                  		cmpi.w	#$280,d0
0000853C 6200                       		bhi.s	Obj18_Delete
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Delete:				; XREF: Obj18_Index
00008540 6000 0000                  		bra.w	DeleteObject
00008544                            ; ===========================================================================
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544                            Map_obj18x:
00008544                            	include "_maps\obj18x.asm"
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544 0000                       		dc.w byte_80FE-Map_obj18x
00008546 0000                       		dc.w byte_8109-Map_obj18x
00008548 02                         byte_80FE:	dc.b 2
00008549 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000854E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008553 0A                         byte_8109:	dc.b $A
00008554 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008559 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000855E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008563 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008568 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000856D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008572 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008577 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000857C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008581 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008586                            		even
00008586                            		even
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586                            Map_obj18:
00008586                            	include "_maps\obj18ghz.asm"
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586 0000                       		dc.w byte_8140-Map_obj18
00008588 0000                       		dc.w byte_8155-Map_obj18
0000858A 04                         byte_8140:	dc.b 4
0000858B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008590 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008595 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000859A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000859F 0A                         byte_8155:	dc.b $A
000085A0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085A5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085AA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085AF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085B4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085B9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085BE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085C3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085C8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085CD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085D2                            		even
000085D2                            		even
000085D2                            
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            Map_obj18a:
000085D2                            	include "_maps\obj18syz.asm"
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2 0000                       		dc.w byte_818A-Map_obj18a
000085D4 03                         byte_818A:	dc.b 3
000085D5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085DA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085DF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085E4                            		even
000085E4                            		even
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            Map_obj18b:
000085E4                            	include "_maps\obj18slz.asm"
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4 0000                       		dc.w byte_819C-Map_obj18b
000085E6 02                         byte_819C:	dc.b 2
000085E7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085EC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085F2 00                         		even
000085F2 00                         		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 19 - blank
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj19:					; XREF: Obj_Index
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            Map_obj48:
000085F4                            	include "_maps\obj48.asm"
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085FC 06                         byte_81B2:	dc.b 6
000085FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008602 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008607 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000860C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008611 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008616 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000861B 04                         byte_81D1:	dc.b 4
0000861C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008621 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008626 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000862B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008630 04                         byte_81E6:	dc.b 4
00008631 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008636 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000863B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008640 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008645 04                         byte_81FB:	dc.b 4
00008646 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000864B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008650 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008655 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000865A                            		even
0000865A                            		even
0000865A                            
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Object 1A - GHZ collapsing ledge
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            Obj1A:					; XREF: Obj_Index
0000865A 7000                       		moveq	#0,d0
0000865C 1028 0024                  		move.b	$24(a0),d0
00008660 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008664 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008668                            ; ===========================================================================
00008668 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000866C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008670 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008674                            ; ===========================================================================
00008674                            
00008674                            Obj1A_Main:				; XREF: Obj1A_Index
00008674 5428 0024                  		addq.b	#2,$24(a0)
00008678 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008680 317C 4000 0002             		move.w	#$4000,2(a0)
00008686 0028 0004 0001             		ori.b	#4,1(a0)
0000868C 117C 0004 0018             		move.b	#4,$18(a0)
00008692 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008698 117C 0064 0019             		move.b	#$64,$19(a0)
0000869E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086A4 117C 0038 0016             		move.b	#$38,$16(a0)
000086AA 08E8 0004 0001             		bset	#4,1(a0)
000086B0                            
000086B0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086B4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086B6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086BA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086C2                            
000086C2                            Obj1A_Slope:
000086C2 323C 0030                  		move.w	#$30,d1
000086C6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086CC 6100 F2A4                  		bsr.w	SlopeObject
000086D0 6000 0000                  		bra.w	MarkObjGone
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Touch:				; XREF: Obj1A_Index
000086D4 4A28 0038                  		tst.b	$38(a0)
000086D8 6700 0000                  		beq.w	loc_847A
000086DC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086E2 5328 0038                  		subq.b	#1,$38(a0)
000086E6                            
000086E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E6                            
000086E6                            
000086E6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086E6 323C 0030                  		move.w	#$30,d1
000086EA 6100 F326                  		bsr.w	ExitPlatform
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086F8 3428 0008                  		move.w	8(a0),d2
000086FC 6100 0000                  		bsr.w	SlopeObject2
00008700 6000 0000                  		bra.w	MarkObjGone
00008704                            ; End of function Obj1A_WalkOff
00008704                            
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj1A_Display:				; XREF: Obj1A_Index
00008704 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008708 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000870A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000870E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008712 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008716 6000 0000                  		bra.w	DisplaySprite
0000871A                            ; ===========================================================================
0000871A                            
0000871A                            loc_82D0:				; XREF: Obj1A_Display
0000871A 5328 0038                  		subq.b	#1,$38(a0)
0000871E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008722 43F8 D000                  		lea	($FFFFD000).w,a1
00008726 0829 0003 0022             		btst	#3,$22(a1)
0000872C 6700                       		beq.s	loc_82FC
0000872E 4A28 0038                  		tst.b	$38(a0)
00008732 6600                       		bne.s	locret_8308
00008734 08A9 0003 0022             		bclr	#3,$22(a1)
0000873A 08A9 0005 0022             		bclr	#5,$22(a1)
00008740 137C 0001 001D             		move.b	#1,$1D(a1)
00008746                            
00008746                            loc_82FC:
00008746 117C 0000 003A             		move.b	#0,$3A(a0)
0000874C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008752                            
00008752                            locret_8308:
00008752 4E75                       		rts	
00008754                            ; ===========================================================================
00008754                            
00008754                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008754 6100 0000                  		bsr.w	ObjectFall
00008758 6100 0000                  		bsr.w	DisplaySprite
0000875C 4A28 0001                  		tst.b	1(a0)
00008760 6A00                       		bpl.s	Obj1A_Delete
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Delete:				; XREF: Obj1A_Index
00008764 6100 0000                  		bsr.w	DeleteObject
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            Obj53:					; XREF: Obj_Index
0000876A 7000                       		moveq	#0,d0
0000876C 1028 0024                  		move.b	$24(a0),d0
00008770 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008774 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008778                            ; ===========================================================================
00008778 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000877C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008780 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj53_Main:				; XREF: Obj53_Index
00008784 5428 0024                  		addq.b	#2,$24(a0)
00008788 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008790 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008796 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000879C 6600                       		bne.s	Obj53_NotSLZ
0000879E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087A4 5428 001A                  		addq.b	#2,$1A(a0)
000087A8                            
000087A8                            Obj53_NotSLZ:
000087A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087AE 6600                       		bne.s	Obj53_NotSBZ
000087B0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087B6                            
000087B6                            Obj53_NotSBZ:
000087B6 0028 0004 0001             		ori.b	#4,1(a0)
000087BC 117C 0004 0018             		move.b	#4,$18(a0)
000087C2 117C 0007 0038             		move.b	#7,$38(a0)
000087C8 117C 0044 0019             		move.b	#$44,$19(a0)
000087CE                            
000087CE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087CE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087D2 6700                       		beq.s	Obj53_Solid	; if not, branch
000087D4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087D8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E0                            
000087E0                            Obj53_Solid:
000087E0 323C 0020                  		move.w	#$20,d1
000087E4 6100 F0B8                  		bsr.w	PlatformObject
000087E8 4A28 0028                  		tst.b	$28(a0)
000087EC 6A00                       		bpl.s	Obj53_MarkAsGone
000087EE 0829 0003 0022             		btst	#3,$22(a1)
000087F4 6700                       		beq.s	Obj53_MarkAsGone
000087F6 08A8 0000 0001             		bclr	#0,1(a0)
000087FC 3029 0008                  		move.w	8(a1),d0
00008800 9068 0008                  		sub.w	8(a0),d0
00008804 6400                       		bcc.s	Obj53_MarkAsGone
00008806 08E8 0000 0001             		bset	#0,1(a0)
0000880C                            
0000880C                            Obj53_MarkAsGone:
0000880C 6000 0000                  		bra.w	MarkObjGone
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Touch:				; XREF: Obj53_Index
00008810 4A28 0038                  		tst.b	$38(a0)
00008814 6700 0000                  		beq.w	loc_8458
00008818 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000881E 5328 0038                  		subq.b	#1,$38(a0)
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            
00008822                            
00008822                            Obj53_WalkOff:				; XREF: Obj53_Index
00008822 323C 0020                  		move.w	#$20,d1
00008826 6100 F1EA                  		bsr.w	ExitPlatform
0000882A 3428 0008                  		move.w	8(a0),d2
0000882E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008832 6000 0000                  		bra.w	MarkObjGone
00008836                            ; End of function Obj53_WalkOff
00008836                            
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj53_Display:				; XREF: Obj53_Index
00008836 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000883A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000883C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008840 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008844 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008848 6000 0000                  		bra.w	DisplaySprite
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            loc_8402:
0000884C 5328 0038                  		subq.b	#1,$38(a0)
00008850 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008854 43F8 D000                  		lea	($FFFFD000).w,a1
00008858 0829 0003 0022             		btst	#3,$22(a1)
0000885E 6700                       		beq.s	loc_842E
00008860 4A28 0038                  		tst.b	$38(a0)
00008864 6600                       		bne.s	locret_843A
00008866 08A9 0003 0022             		bclr	#3,$22(a1)
0000886C 08A9 0005 0022             		bclr	#5,$22(a1)
00008872 137C 0001 001D             		move.b	#1,$1D(a1)
00008878                            
00008878                            loc_842E:
00008878 117C 0000 003A             		move.b	#0,$3A(a0)
0000887E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008884                            
00008884                            locret_843A:
00008884 4E75                       		rts	
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_TimeZero:				; XREF: Obj53_Display
00008886 6100 0000                  		bsr.w	ObjectFall
0000888A 6100 0000                  		bsr.w	DisplaySprite
0000888E 4A28 0001                  		tst.b	1(a0)
00008892 6A00                       		bpl.s	Obj53_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Delete:				; XREF: Obj53_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000889C 117C 0000 003A             		move.b	#0,$3A(a0)
000088A2                            
000088A2                            loc_8458:				; XREF: Obj53_Touch
000088A2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088A8 0828 0000 0028             		btst	#0,$28(a0)
000088AE 6700                       		beq.s	loc_846C
000088B0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088B6                            
000088B6                            loc_846C:
000088B6 7207                       		moveq	#7,d1
000088B8 5228 001A                  		addq.b	#1,$1A(a0)
000088BC 6000                       		bra.s	loc_8486
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088BE 117C 0000 003A             		move.b	#0,$3A(a0)
000088C4                            
000088C4                            loc_847A:				; XREF: Obj1A_Touch
000088C4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088CA 7218                       		moveq	#$18,d1
000088CC 5428 001A                  		addq.b	#2,$1A(a0)
000088D0                            
000088D0                            loc_8486:				; XREF: Obj53_Collapse
000088D0 7000                       		moveq	#0,d0
000088D2 1028 001A                  		move.b	$1A(a0),d0
000088D6 D040                       		add.w	d0,d0
000088D8 2668 0004                  		movea.l	4(a0),a3
000088DC D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E0 524B                       		addq.w	#1,a3
000088E2 08E8 0005 0001             		bset	#5,1(a0)
000088E8 1810                       		move.b	0(a0),d4
000088EA 1A28 0001                  		move.b	1(a0),d5
000088EE 2248                       		movea.l	a0,a1
000088F0 6000                       		bra.s	loc_84B2
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            loc_84AA:
000088F2 6100 0000                  		bsr.w	SingleObjLoad
000088F6 6600                       		bne.s	loc_84F2
000088F8 5A4B                       		addq.w	#5,a3
000088FA                            
000088FA                            loc_84B2:
000088FA 137C 0006 0024             		move.b	#6,$24(a1)
00008900 1284                       		move.b	d4,0(a1)
00008902 234B 0004                  		move.l	a3,4(a1)
00008906 1345 0001                  		move.b	d5,1(a1)
0000890A 3368 0008 0008             		move.w	8(a0),8(a1)
00008910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008916 3368 0002 0002             		move.w	2(a0),2(a1)
0000891C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008922 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008928 135C 0038                  		move.b	(a4)+,$38(a1)
0000892C B3C8                       		cmpa.l	a0,a1
0000892E 6400                       		bcc.s	loc_84EE
00008930 6100 0000                  		bsr.w	DisplaySprite2
00008934                            
00008934                            loc_84EE:
00008934 51C9 FFBC                  		dbf	d1,loc_84AA
00008938                            
00008938                            loc_84F2:
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 303C 00B9                  		move.w	#$B9,d0
00008940 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008956 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008960 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008968 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008970 43F8 D000                  		lea	($FFFFD000).w,a1
00008974 0829 0003 0022             		btst	#3,$22(a1)
0000897A 6700                       		beq.s	locret_856E
0000897C 3029 0008                  		move.w	8(a1),d0
00008980 9068 0008                  		sub.w	8(a0),d0
00008984 D041                       		add.w	d1,d0
00008986 E248                       		lsr.w	#1,d0
00008988 0828 0000 0001             		btst	#0,1(a0)
0000898E 6700                       		beq.s	loc_854E
00008990 4640                       		not.w	d0
00008992 D041                       		add.w	d1,d0
00008994                            
00008994                            loc_854E:
00008994 7200                       		moveq	#0,d1
00008996 1232 0000                  		move.b	(a2,d0.w),d1
0000899A 3028 000C                  		move.w	$C(a0),d0
0000899E 9041                       		sub.w	d1,d0
000089A0 7200                       		moveq	#0,d1
000089A2 1229 0016                  		move.b	$16(a1),d1
000089A6 9041                       		sub.w	d1,d0
000089A8 3340 000C                  		move.w	d0,$C(a1)
000089AC 9468 0008                  		sub.w	8(a0),d2
000089B0 9569 0008                  		sub.w	d2,8(a1)
000089B4                            
000089B4                            locret_856E:
000089B4 4E75                       		rts	
000089B6                            ; End of function SlopeObject2
000089B6                            
000089B6                            ; ===========================================================================
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            ; Collision data for GHZ collapsing ledge
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            Obj1A_SlopeData:
000089B6                            		incbin	misc\ghzledge.bin
000089E6                            		even
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            Map_obj1A:
000089E6                            	include "_maps\obj1A.asm"
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089EA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089EE 10                         byte_85A8:	dc.b $10
000089EF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089F4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089F9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089FE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A3F 10                         byte_85F9:	dc.b $10
00008A40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A90 19                         byte_864A:	dc.b $19
00008A91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008AB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ABE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008AC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ACD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ADC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B0E 19                         byte_86C8:	dc.b $19
00008B0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B8C                            		even
00008B8C                            		even
00008B8C                            
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            Map_obj53:
00008B8C                            	include "_maps\obj53.asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B94 04                         byte_874E:	dc.b 4
00008B95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BA9 08                         byte_8763:	dc.b 8
00008BAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BD2 04                         byte_878C:	dc.b 4
00008BD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BE7 08                         byte_87A1:	dc.b 8
00008BE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C01 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C06 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C0B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C10                            		even
00008C10                            		even
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            
00008C10                            Obj1C:					; XREF: Obj_Index
00008C10 7000                       		moveq	#0,d0
00008C12 1028 0024                  		move.b	$24(a0),d0
00008C16 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C1A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C1E                            ; ===========================================================================
00008C1E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C20 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C22                            ; ===========================================================================
00008C22                            
00008C22                            Obj1C_Main:				; XREF: Obj1C_Index
00008C22 5428 0024                  		addq.b	#2,$24(a0)
00008C26 7000                       		moveq	#0,d0
00008C28 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C2C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C30 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C34 2159 0004                  		move.l	(a1)+,4(a0)
00008C38 3159 0002                  		move.w	(a1)+,2(a0)
00008C3C 0028 0004 0001             		ori.b	#4,1(a0)
00008C42 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C46 1159 0019                  		move.b	(a1)+,$19(a0)
00008C4A 1159 0018                  		move.b	(a1)+,$18(a0)
00008C4E 1159 0020                  		move.b	(a1)+,$20(a0)
00008C52                            
00008C52                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C52 3028 0008                  		move.w	8(a0),d0
00008C56 0240 FF80                  		andi.w	#$FF80,d0
00008C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008C5E 0441 0080                  		subi.w	#$80,d1
00008C62 0241 FF80                  		andi.w	#$FF80,d1
00008C66 9041                       		sub.w	d1,d0
00008C68 0C40 0280                  		cmpi.w	#$280,d0
00008C6C 6200 0000                  		bhi.w	DeleteObject
00008C70 6000 0000                  		bra.w	DisplaySprite
00008C74                            ; ===========================================================================
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Variables for	object $1C are stored in an array
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C78 44D8                       		dc.w $44D8		; VRAM setting
00008C7A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C7E 0000 0000                  		dc.l Map_obj1C
00008C82 44D8                       		dc.w $44D8
00008C84 0008 0200                  		dc.b 0,	8, 2, 0
00008C88 0000 0000                  		dc.l Map_obj1C
00008C8C 44D8                       		dc.w $44D8
00008C8E 0008 0200                  		dc.b 0,	8, 2, 0
00008C92 0000 7D86                  		dc.l Map_obj11
00008C96 438E                       		dc.w $438E
00008C98 0110 0100                  		dc.b 1,	$10, 1,	0
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            Map_obj1C:
00008C9C                            	include "_maps\obj1C.asm"
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C 0000                       		dc.w byte_8858-Map_obj1C
00008C9E 01                         byte_8858:	dc.b 1
00008C9F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CA4                            		even
00008CA4                            		even
00008CA4                            
00008CA4                            ; ===========================================================================
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Object 1D - switch that activates when Sonic touches it
00008CA4                            ; (this	is not used anywhere in	the game)
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            
00008CA4                            Obj1D:					; XREF: Obj_Index
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 0024                  		move.b	$24(a0),d0
00008CAA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CAE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CB4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CB6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1D_Main:				; XREF: Obj1D_Index
00008CB8 5428 0024                  		addq.b	#2,$24(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CC4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CD6 117C 0010 0019             		move.b	#$10,$19(a0)
00008CDC 117C 0005 0018             		move.b	#5,$18(a0)
00008CE2                            
00008CE2                            Obj1D_Action:				; XREF: Obj1D_Index
00008CE2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CE8 323C 0010                  		move.w	#$10,d1
00008CEC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF0 6700                       		beq.s	Obj1D_ChkDel
00008CF2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CF6 7001                       		moveq	#1,d0
00008CF8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CFC                            
00008CFC                            Obj1D_ChkDel:
00008CFC 6100 0000                  		bsr.w	DisplaySprite
00008D00 3028 0008                  		move.w	8(a0),d0
00008D04 0240 FF80                  		andi.w	#$FF80,d0
00008D08 3238 F700                  		move.w	($FFFFF700).w,d1
00008D0C 0441 0080                  		subi.w	#$80,d1
00008D10 0241 FF80                  		andi.w	#$FF80,d1
00008D14 9041                       		sub.w	d1,d0
00008D16 0C40 0280                  		cmpi.w	#$280,d0
00008D1A 6200 0000                  		bhi.w	Obj1D_Delete
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D20 6100 0000                  		bsr.w	DeleteObject
00008D24 4E75                       		rts	
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Subroutine to	check if Sonic touches the object
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D26 43F8 D000                  		lea	($FFFFD000).w,a1
00008D2A 3029 0008                  		move.w	8(a1),d0
00008D2E 9068 0008                  		sub.w	8(a0),d0
00008D32 D041                       		add.w	d1,d0
00008D34 6B00                       		bmi.s	loc_8918
00008D36 D241                       		add.w	d1,d1
00008D38 B041                       		cmp.w	d1,d0
00008D3A 6400                       		bcc.s	loc_8918
00008D3C 3429 000C                  		move.w	$C(a1),d2
00008D40 1229 0016                  		move.b	$16(a1),d1
00008D44 4881                       		ext.w	d1
00008D46 D242                       		add.w	d2,d1
00008D48 3028 000C                  		move.w	$C(a0),d0
00008D4C 0440 0010                  		subi.w	#$10,d0
00008D50 9041                       		sub.w	d1,d0
00008D52 6200                       		bhi.s	loc_8918
00008D54 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D58 6500                       		bcs.s	loc_8918
00008D5A 70FF                       		moveq	#-1,d0
00008D5C 4E75                       		rts	
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            loc_8918:
00008D5E 7000                       		moveq	#0,d0
00008D60 4E75                       		rts	
00008D62                            ; End of function Obj1D_ChkTouch
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            Map_obj1D:
00008D62                            	include "_maps\obj1D.asm"
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62 0000                       		dc.w byte_891E-Map_obj1D
00008D64 04                         byte_891E:	dc.b 4
00008D65 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D6A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D6F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D74 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D7A 00                         		even
00008D7A 00                         		even
00008D7A                            
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Object 2A - doors (SBZ)
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            Obj2A:					; XREF: Obj_Index
00008D7A 7000                       		moveq	#0,d0
00008D7C 1028 0024                  		move.b	$24(a0),d0
00008D80 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D84 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D88                            ; ===========================================================================
00008D88 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D8A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj2A_Main:				; XREF: Obj2A_Index
00008D8C 5428 0024                  		addq.b	#2,$24(a0)
00008D90 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D98 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D9E 0028 0004 0001             		ori.b	#4,1(a0)
00008DA4 117C 0008 0019             		move.b	#8,$19(a0)
00008DAA 117C 0004 0018             		move.b	#4,$18(a0)
00008DB0                            
00008DB0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB0 323C 0040                  		move.w	#$40,d1
00008DB4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00008DBC D041                       		add.w	d1,d0
00008DBE B068 0008                  		cmp.w	8(a0),d0
00008DC2 6500                       		bcs.s	Obj2A_Animate
00008DC4 9041                       		sub.w	d1,d0
00008DC6 9041                       		sub.w	d1,d0
00008DC8 B068 0008                  		cmp.w	8(a0),d0
00008DCC 6400                       		bcc.s	Obj2A_Animate
00008DCE D041                       		add.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	loc_899A
00008DD6 0828 0000 0022             		btst	#0,$22(a0)
00008DDC 6600                       		bne.s	Obj2A_Animate
00008DDE 6000                       		bra.s	Obj2A_Open
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE0 0828 0000 0022             		btst	#0,$22(a0)
00008DE6 6700                       		beq.s	Obj2A_Animate
00008DE8                            
00008DE8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DEE                            
00008DEE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DEE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DF4 6100 0000                  		bsr.w	AnimateSprite
00008DF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DFC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DFE 323C 0011                  		move.w	#$11,d1
00008E02 343C 0020                  		move.w	#$20,d2
00008E06 3602                       		move.w	d2,d3
00008E08 5243                       		addq.w	#1,d3
00008E0A 3828 0008                  		move.w	8(a0),d4
00008E0E 6100 0000                  		bsr.w	SolidObject
00008E12                            
00008E12                            Obj2A_MarkAsUsed:
00008E12 6000 0000                  		bra.w	MarkObjGone
00008E16                            ; ===========================================================================
00008E16                            Ani_obj2A:
00008E16                            	include "_anim\obj2A.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Animation script - doors (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E18 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E1A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E26 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E32                            		even
00008E32                            		even
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            Map_obj2A:
00008E32                            	include "_maps\obj2A.asm"
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E36 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E3A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E42 0000                       		dc.w byte_8A56-Map_obj2A
00008E44 02                         byte_89FE:	dc.b 2
00008E45 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E4A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E4F 02                         byte_8A09:	dc.b 2
00008E50 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E55 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E5A 02                         byte_8A14:	dc.b 2
00008E5B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E60 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E65 02                         byte_8A1F:	dc.b 2
00008E66 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E6B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E70 02                         byte_8A2A:	dc.b 2
00008E71 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E76 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E7B 02                         byte_8A35:	dc.b 2
00008E7C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E81 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E86 02                         byte_8A40:	dc.b 2
00008E87 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E8C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E91 02                         byte_8A4B:	dc.b 2
00008E92 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E97 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E9C 02                         byte_8A56:	dc.b 2
00008E9D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EA2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EA8 00                         		even
00008EA8 00                         		even
00008EA8                            
00008EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA8                            
00008EA8                            
00008EA8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EA8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EAC 6700                       		beq.s	loc_8AA8
00008EAE 6B00 0000                  		bmi.w	loc_8AC4
00008EB2 4A40                       		tst.w	d0
00008EB4 6700 0000                  		beq.w	loc_8A92
00008EB8 6B00                       		bmi.s	loc_8A7C
00008EBA 4A69 0010                  		tst.w	$10(a1)
00008EBE 6B00                       		bmi.s	loc_8A92
00008EC0 6000                       		bra.s	loc_8A82
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            loc_8A7C:
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6A00                       		bpl.s	loc_8A92
00008EC8                            
00008EC8                            loc_8A82:
00008EC8 9169 0008                  		sub.w	d0,8(a1)
00008ECC 337C 0000 0014             		move.w	#0,$14(a1)
00008ED2 337C 0000 0010             		move.w	#0,$10(a1)
00008ED8                            
00008ED8                            loc_8A92:
00008ED8 0829 0001 0022             		btst	#1,$22(a1)
00008EDE 6600                       		bne.s	loc_8AB6
00008EE0 08E9 0005 0022             		bset	#5,$22(a1)
00008EE6 08E8 0005 0022             		bset	#5,$22(a0)
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            loc_8AA8:
00008EEE 0828 0005 0022             		btst	#5,$22(a0)
00008EF4 6700                       		beq.s	locret_8AC2
00008EF6 337C 0001 001C             		move.w	#1,$1C(a1)
00008EFC                            
00008EFC                            loc_8AB6:
00008EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00008F02 08A9 0005 0022             		bclr	#5,$22(a1)
00008F08                            
00008F08                            locret_8AC2:
00008F08 4E75                       		rts	
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            loc_8AC4:
00008F0A 4A69 0012                  		tst.w	$12(a1)
00008F0E 6A00                       		bpl.s	locret_8AD8
00008F10 4A43                       		tst.w	d3
00008F12 6A00                       		bpl.s	locret_8AD8
00008F14 9769 000C                  		sub.w	d3,$C(a1)
00008F18 337C 0000 0012             		move.w	#0,$12(a1)
00008F1E                            
00008F1E                            locret_8AD8:
00008F1E 4E75                       		rts	
00008F20                            ; End of function Obj44_SolidWall
00008F20                            
00008F20                            
00008F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F20                            
00008F20                            
00008F20                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F20 43F8 D000                  		lea	($FFFFD000).w,a1
00008F24 3029 0008                  		move.w	8(a1),d0
00008F28 9068 0008                  		sub.w	8(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00                       		bmi.s	loc_8B48
00008F30 3601                       		move.w	d1,d3
00008F32 D643                       		add.w	d3,d3
00008F34 B043                       		cmp.w	d3,d0
00008F36 6200                       		bhi.s	loc_8B48
00008F38 1629 0016                  		move.b	$16(a1),d3
00008F3C 4883                       		ext.w	d3
00008F3E D443                       		add.w	d3,d2
00008F40 3629 000C                  		move.w	$C(a1),d3
00008F44 9668 000C                  		sub.w	$C(a0),d3
00008F48 D642                       		add.w	d2,d3
00008F4A 6B00                       		bmi.s	loc_8B48
00008F4C 3802                       		move.w	d2,d4
00008F4E D844                       		add.w	d4,d4
00008F50 B644                       		cmp.w	d4,d3
00008F52 6400                       		bcc.s	loc_8B48
00008F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F58 6B00                       		bmi.s	loc_8B48
00008F5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F60 6400                       		bcc.s	loc_8B48
00008F62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F66 6600                       		bne.s	loc_8B48
00008F68 3A00                       		move.w	d0,d5
00008F6A B240                       		cmp.w	d0,d1
00008F6C 6400                       		bcc.s	loc_8B30
00008F6E D241                       		add.w	d1,d1
00008F70 9041                       		sub.w	d1,d0
00008F72 3A00                       		move.w	d0,d5
00008F74 4445                       		neg.w	d5
00008F76                            
00008F76                            loc_8B30:
00008F76 3203                       		move.w	d3,d1
00008F78 B443                       		cmp.w	d3,d2
00008F7A 6400                       		bcc.s	loc_8B3C
00008F7C 9644                       		sub.w	d4,d3
00008F7E 3203                       		move.w	d3,d1
00008F80 4441                       		neg.w	d1
00008F82                            
00008F82                            loc_8B3C:
00008F82 BA41                       		cmp.w	d1,d5
00008F84 6200                       		bhi.s	loc_8B44
00008F86 7801                       		moveq	#1,d4
00008F88 4E75                       		rts	
00008F8A                            ; ===========================================================================
00008F8A                            
00008F8A                            loc_8B44:
00008F8A 78FF                       		moveq	#-1,d4
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            loc_8B48:
00008F8E 7800                       		moveq	#0,d4
00008F90 4E75                       		rts	
00008F92                            ; End of function Obj44_SolidWall2
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 1E - Ball Hog enemy (SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj1E:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FA2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            Obj1E_Main:				; XREF: Obj1E_Index
00008FA4 117C 0013 0016             		move.b	#$13,$16(a0)
00008FAA 117C 0008 0017             		move.b	#8,$17(a0)
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FB8 317C 2302 0002             		move.w	#$2302,2(a0)
00008FBE 117C 0004 0001             		move.b	#4,1(a0)
00008FC4 117C 0004 0018             		move.b	#4,$18(a0)
00008FCA 117C 0005 0020             		move.b	#5,$20(a0)
00008FD0 117C 000C 0019             		move.b	#$C,$19(a0)
00008FD6 6100 0000                  		bsr.w	ObjectFall
00008FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE0 4A41                       		tst.w	d1
00008FE2 6A00                       		bpl.s	locret_8BAC
00008FE4 D368 000C                  		add.w	d1,$C(a0)
00008FE8 317C 0000 0012             		move.w	#0,$12(a0)
00008FEE 5428 0024                  		addq.b	#2,$24(a0)
00008FF2                            
00008FF2                            locret_8BAC:
00008FF2 4E75                       		rts	
00008FF4                            ; ===========================================================================
00008FF4                            
00008FF4                            Obj1E_Action:				; XREF: Obj1E_Index
00008FF4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FFA 6100 0000                  		bsr.w	AnimateSprite
00008FFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009004 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009006 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000900A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000900C 6000                       		bra.s	Obj1E_MarkAsGone
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000900E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009012                            
00009012                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009012 6000 0000                  		bra.w	MarkObjGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009016 117C 0001 0032             		move.b	#1,$32(a0)
0000901C 6100 0000                  		bsr.w	SingleObjLoad
00009020 6600                       		bne.s	loc_8C1A
00009022 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009026 3368 0008 0008             		move.w	8(a0),8(a1)
0000902C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009032 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009038 337C 0000 0012             		move.w	#0,$12(a1)
0000903E 70FC                       		moveq	#-4,d0
00009040 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009046 6700                       		beq.s	loc_8C0A	; if not, branch
00009048 4440                       		neg.w	d0
0000904A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000904E                            
0000904E                            loc_8C0A:
0000904E D169 0008                  		add.w	d0,8(a1)
00009052 0669 000C 000C             		addi.w	#$C,$C(a1)
00009058 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000905E                            
0000905E                            loc_8C1A:
0000905E 60B2                       		bra.s	Obj1E_MarkAsGone
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj20:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009070 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj20_Main:				; XREF: Obj20_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 117C 0007 0016             		move.b	#7,$16(a0)
0000907C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009084 317C 2302 0002             		move.w	#$2302,2(a0)
0000908A 117C 0004 0001             		move.b	#4,1(a0)
00009090 117C 0003 0018             		move.b	#3,$18(a0)
00009096 117C 0087 0020             		move.b	#$87,$20(a0)
0000909C 117C 0008 0019             		move.b	#8,$19(a0)
000090A2 7000                       		moveq	#0,d0
000090A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B0 117C 0004 001A             		move.b	#4,$1A(a0)
000090B6                            
000090B6                            Obj20_Bounce:				; XREF: Obj20_Index
000090B6 4EB9 0000 0000             		jsr	ObjectFall
000090BC 4A68 0012                  		tst.w	$12(a0)
000090C0 6B00                       		bmi.s	Obj20_ChkExplode
000090C2 4EB9 0000 0000             		jsr	ObjHitFloor
000090C8 4A41                       		tst.w	d1
000090CA 6A00                       		bpl.s	Obj20_ChkExplode
000090CC D368 000C                  		add.w	d1,$C(a0)
000090D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000090D6 4A03                       		tst.b	d3
000090D8 6700                       		beq.s	Obj20_ChkExplode
000090DA 6B00                       		bmi.s	loc_8CA4
000090DC 4A68 0010                  		tst.w	$10(a0)
000090E0 6A00                       		bpl.s	Obj20_ChkExplode
000090E2 4468 0010                  		neg.w	$10(a0)
000090E6 6000                       		bra.s	Obj20_ChkExplode
000090E8                            ; ===========================================================================
000090E8                            
000090E8                            loc_8CA4:				; XREF: Obj20_Bounce
000090E8 4A68 0010                  		tst.w	$10(a0)
000090EC 6B00                       		bmi.s	Obj20_ChkExplode
000090EE 4468 0010                  		neg.w	$10(a0)
000090F2                            
000090F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090F8 10BC 0024                  		move.b	#$24,0(a0)
000090FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009100 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009106 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000910A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000910E 6A00                       		bpl.s	Obj20_Display
00009110 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009116 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000911C                            
0000911C                            Obj20_Display:
0000911C 6100 0000                  		bsr.w	DisplaySprite
00009120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009124 0640 00E0                  		addi.w	#$E0,d0
00009128 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000912C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Object 24 - explosion	from a destroyed monitor
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            Obj24:					; XREF: Obj_Index
00009132 7000                       		moveq	#0,d0
00009134 1028 0024                  		move.b	$24(a0),d0
00009138 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000913C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009140                            ; ===========================================================================
00009140 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009142 0000                       		dc.w Obj24_Animate-Obj24_Index
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj24_Main:				; XREF: Obj24_Index
00009144 5428 0024                  		addq.b	#2,$24(a0)
00009148 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009150 317C 041C 0002             		move.w	#$41C,2(a0)
00009156 117C 0004 0001             		move.b	#4,1(a0)
0000915C 117C 0001 0018             		move.b	#1,$18(a0)
00009162 117C 0000 0020             		move.b	#0,$20(a0)
00009168 117C 000C 0019             		move.b	#$C,$19(a0)
0000916E 117C 0009 001E             		move.b	#9,$1E(a0)
00009174 117C 0000 001A             		move.b	#0,$1A(a0)
0000917A 303C 00A5                  		move.w	#$A5,d0
0000917E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009184                            
00009184                            Obj24_Animate:				; XREF: Obj24_Index
00009184 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009188 6A00                       		bpl.s	Obj24_Display
0000918A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009190 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000919A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000919E                            
0000919E                            Obj24_Display:
0000919E 6000 0000                  		bra.w	DisplaySprite
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Object 27 - explosion	from a destroyed enemy
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            
000091A2                            Obj27:					; XREF: Obj_Index
000091A2 7000                       		moveq	#0,d0
000091A4 1028 0024                  		move.b	$24(a0),d0
000091A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B0                            ; ===========================================================================
000091B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091B2 0000                       		dc.w Obj27_Main-Obj27_Index
000091B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000091B6                            ; ===========================================================================
000091B6                            
000091B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091B6 5428 0024                  		addq.b	#2,$24(a0)
000091BA 6100 0000                  		bsr.w	SingleObjLoad
000091BE 6600                       		bne.s	Obj27_Main
000091C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091C4 3368 0008 0008             		move.w	8(a0),8(a1)
000091CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091D6                            
000091D6                            Obj27_Main:				; XREF: Obj27_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091E8 117C 0004 0001             		move.b	#4,1(a0)
000091EE 117C 0001 0018             		move.b	#1,$18(a0)
000091F4 117C 0000 0020             		move.b	#0,$20(a0)
000091FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 117C 0000 001A             		move.b	#0,$1A(a0)
0000920C 303C 00C1                  		move.w	#$C1,d0
00009210 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009216                            
00009216 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000921C 1028 0028                  		move.b	$28(a0),d0
00009220 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009226 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000922C                            
0000922C                            Obj27_Animate:				; XREF: Obj27_Index
0000922C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009230 6A00                       		bpl.s	Obj27_Display
00009232                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009232 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009238 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000923C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009242 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009246                            
00009246                            Obj27_Display:
00009246 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000924C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009252 6000 0000                  		bra.w	DisplaySprite
00009256                            ; ===========================================================================
00009256                            ; ---------------------------------------------------------------------------
00009256                            Obj27_ExplosionXYSpd:
00009256                            		; dc.w	-$350, -$300	; Left
00009256                            		; dc.w	-$200, -$450	; Near middle (left)
00009256                            		; dc.w	0, -$500	; Middle
00009256                            		; dc.w	$200, -$450	; Near middle (right)
00009256                            		; dc.w	$350, -$300	; Right
00009256                            
00009256 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000925A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000925E 0000 FA00                  		dc.w	0, -$600	; Middle
00009262 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009266 0150 FC00                  		dc.w	$150, -$400	; Right
0000926A                            
0000926A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009284                            ; ---------------------------------------------------------------------------
00009284                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009284                            ; ---------------------------------------------------------------------------
00009284                            
00009284                            Obj3F:					; XREF: Obj_Index
00009284 7000                       		moveq	#0,d0
00009286 1028 0024                  		move.b	$24(a0),d0
0000928A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000928E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009292                            ; ===========================================================================
00009292 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009294 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj3F_Main:				; XREF: Obj3F_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092A8 117C 0004 0001             		move.b	#4,1(a0)
000092AE 117C 0001 0018             		move.b	#1,$18(a0)
000092B4 117C 0000 0020             		move.b	#0,$20(a0)
000092BA 117C 000C 0019             		move.b	#$C,$19(a0)
000092C0 117C 0007 001E             		move.b	#7,$1E(a0)
000092C6 117C 0000 001A             		move.b	#0,$1A(a0)
000092CC 303C 00C4                  		move.w	#$C4,d0
000092D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092D6                            ; ===========================================================================
000092D6                            Ani_obj1E:
000092D6                            	include "_anim\obj1E.asm"
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Animation script - doors (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000092D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F0 00                         		even
000092F0 00                         		even
000092F0                            
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_obj1E:
000092F0                            	include "_maps\obj1E.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092F4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092F8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092FC 02                         byte_8E6E:	dc.b 2
000092FD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009302 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009307 02                         byte_8E79:	dc.b 2
00009308 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009312 02                         byte_8E84:	dc.b 2
00009313 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009318 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000931D 02                         byte_8E8F:	dc.b 2
0000931E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009323 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009328 01                         byte_8E9A:	dc.b 1
00009329 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000932E 01                         byte_8EA0:	dc.b 1
0000932F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009334                            		even
00009334                            		even
00009334                            
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334                            Map_obj24:
00009334                            	include "_maps\obj24.asm"
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009338 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000933C 01                         byte_8EAE:	dc.b 1
0000933D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009342 01                         byte_8EB4:	dc.b 1
00009343 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009348 01                         byte_8EBA:	dc.b 1
00009349 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000934E 01                         byte_8EC0:	dc.b 1
0000934F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009354                            		even
00009354                            		even
00009354                            
00009354                            ; ---------------------------------------------------------------------------
00009354                            ; Sprite mappings - explosion
00009354                            ; ---------------------------------------------------------------------------
00009354 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009358 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000935C 0000                       		dc.w byte_8EF7-Map_obj27
0000935E 01                         byte_8ED0:	dc.b 1
0000935F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009364 01                         byte_8ED6:	dc.b 1
00009365 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000936A 01                         byte_8EDC:	dc.b 1
0000936B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009370 04                         byte_8EE2:	dc.b 4
00009371 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009376 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000937B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009380 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009385 04                         byte_8EF7:	dc.b 4
00009386 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000938B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009390 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009395 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000939A                            		even
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000939A                            ; ---------------------------------------------------------------------------
0000939A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000939C 0000                       		dc.w byte_8F16-Map_obj3F
0000939E 0000                       		dc.w byte_8F1C-Map_obj3F
000093A0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093A2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000093A4 01                         byte_8F16:	dc.b 1
000093A5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093AA 01                         byte_8F1C:	dc.b 1
000093AB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B0                            		even
000093B0                            ; ===========================================================================
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            ; Object 28 - animals
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            
000093B0                            Obj28:					; XREF: Obj_Index
000093B0 7000                       		moveq	#0,d0
000093B2 1028 0024                  		move.b	$24(a0),d0
000093B6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093BA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093BE                            ; ===========================================================================
000093BE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093E6 0000                       		dc.w loc_92D6-Obj28_Index
000093E8                            
000093E8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093F4                            
000093F4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093F8 0000 0000                  		dc.l Map_obj28
000093FC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009400 0000 0000                  		dc.l Map_obj28a		; mappings address
00009404 FE80 FD00                  		dc.w $FE80, $FD00
00009408 0000 0000                  		dc.l Map_obj28
0000940C FEC0 FE80                  		dc.w $FEC0, $FE80
00009410 0000 0000                  		dc.l Map_obj28a
00009414 FE40 FD00                  		dc.w $FE40, $FD00
00009418 0000 0000                  		dc.l Map_obj28b
0000941C FD00 FC00                  		dc.w $FD00, $FC00
00009420 0000 0000                  		dc.l Map_obj28a
00009424 FD80 FC80                  		dc.w $FD80, $FC80
00009428 0000 0000                  		dc.l Map_obj28b
0000942C                            
0000942C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000943C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000944C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009458                            
00009458 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000946C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009480 0000 0000                  		dc.l Map_obj28b
00009484                            
00009484 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009496 0565 05B3                  		dc.w $565, $5B3
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Obj28_Ending:				; XREF: Obj28_Index
0000949A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000949E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 D040                       		add.w	d0,d0		; multiply d0 by 2
000094AA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094AE 0440 0014                  		subi.w	#$14,d0
000094B2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094B8 D040                       		add.w	d0,d0
000094BA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094C4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094CA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094D6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094DC 117C 000C 0016             		move.b	#$C,$16(a0)
000094E2 117C 0004 0001             		move.b	#4,1(a0)
000094E8 08E8 0000 0001             		bset	#0,1(a0)
000094EE 117C 0006 0018             		move.b	#6,$18(a0)
000094F4 117C 0008 0019             		move.b	#8,$19(a0)
000094FA 117C 0007 001E             		move.b	#7,$1E(a0)
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009504 5428 0024                  		addq.b	#2,$24(a0)
00009508 6100 96F2                  		bsr.w	RandomNumber
0000950C 0240 0001                  		andi.w	#1,d0
00009510 7200                       		moveq	#0,d1
00009512 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009516 D241                       		add.w	d1,d1
00009518 D240                       		add.w	d0,d1
0000951A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000951E 1031 1000                  		move.b	(a1,d1.w),d0
00009522 1140 0030                  		move.b	d0,$30(a0)
00009526 E748                       		lsl.w	#3,d0
00009528 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000952C D2C0                       		adda.w	d0,a1
0000952E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009532 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009536 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000953A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009540 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009546 6700                       		beq.s	loc_90C0	; if yes, branch
00009548 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000954E                            
0000954E                            loc_90C0:
0000954E 117C 000C 0016             		move.b	#$C,$16(a0)
00009554 117C 0004 0001             		move.b	#4,1(a0)
0000955A 08E8 0000 0001             		bset	#0,1(a0)
00009560 117C 0006 0018             		move.b	#6,$18(a0)
00009566 117C 0008 0019             		move.b	#8,$19(a0)
0000956C 117C 0007 001E             		move.b	#7,$1E(a0)
00009572 117C 0002 001A             		move.b	#2,$1A(a0)
00009578 317C FC00 0012             		move.w	#-$400,$12(a0)
0000957E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009582 6600                       		bne.s	loc_911C
00009584 6100 0000                  		bsr.w	SingleObjLoad
00009588 6600                       		bne.s	Obj28_Display
0000958A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000958E 3368 0008 0008             		move.w	8(a0),8(a1)
00009594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000959A 3028 003E                  		move.w	$3E(a0),d0
0000959E E248                       		lsr.w	#1,d0
000095A0 1340 001A                  		move.b	d0,$1A(a1)
000095A4                            
000095A4                            Obj28_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_911C:
000095A8 117C 0012 0024             		move.b	#$12,$24(a0)
000095AE 4268 0010                  		clr.w	$10(a0)
000095B2 6000 0000                  		bra.w	DisplaySprite
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            loc_912A:				; XREF: Obj28_Index
000095B6 4A28 0001                  		tst.b	1(a0)
000095BA 6A00 0000                  		bpl.w	DeleteObject
000095BE 6100 0000                  		bsr.w	ObjectFall
000095C2 4A68 0012                  		tst.w	$12(a0)
000095C6 6B00                       		bmi.s	loc_9180
000095C8 4EB9 0000 0000             		jsr	ObjHitFloor
000095CE 4A41                       		tst.w	d1
000095D0 6A00                       		bpl.s	loc_9180
000095D2 D368 000C                  		add.w	d1,$C(a0)
000095D6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 1028 0030                  		move.b	$30(a0),d0
000095EC D000                       		add.b	d0,d0
000095EE 5800                       		addq.b	#4,d0
000095F0 1140 0024                  		move.b	d0,$24(a0)
000095F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095F8 6700                       		beq.s	loc_9180
000095FA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009600 6700                       		beq.s	loc_9180
00009602 4468 0010                  		neg.w	$10(a0)
00009606 0868 0000 0001             		bchg	#0,1(a0)
0000960C                            
0000960C                            loc_9180:
0000960C 6000 0000                  		bra.w	DisplaySprite
00009610                            ; ===========================================================================
00009610                            
00009610                            loc_9184:				; XREF: Obj28_Index
00009610 6100 0000                  		bsr.w	ObjectFall
00009614 117C 0001 001A             		move.b	#1,$1A(a0)
0000961A 4A68 0012                  		tst.w	$12(a0)
0000961E 6B00                       		bmi.s	loc_91AE
00009620 117C 0000 001A             		move.b	#0,$1A(a0)
00009626 4EB9 0000 0000             		jsr	ObjHitFloor
0000962C 4A41                       		tst.w	d1
0000962E 6A00                       		bpl.s	loc_91AE
00009630 D368 000C                  		add.w	d1,$C(a0)
00009634 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963A                            
0000963A                            loc_91AE:
0000963A 4A28 0028                  		tst.b	$28(a0)
0000963E 6600                       		bne.s	loc_9224
00009640 4A28 0001                  		tst.b	1(a0)
00009644 6A00 0000                  		bpl.w	DeleteObject
00009648 6000 0000                  		bra.w	DisplaySprite
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_91C0:				; XREF: Obj28_Index
0000964C 6100 0000                  		bsr.w	SpeedToPos
00009650 0668 0018 0012             		addi.w	#$18,$12(a0)
00009656 4A68 0012                  		tst.w	$12(a0)
0000965A 6B00                       		bmi.s	loc_91FC
0000965C 4EB9 0000 0000             		jsr	ObjHitFloor
00009662 4A41                       		tst.w	d1
00009664 6A00                       		bpl.s	loc_91FC
00009666 D368 000C                  		add.w	d1,$C(a0)
0000966A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009670 4A28 0028                  		tst.b	$28(a0)
00009674 6700                       		beq.s	loc_91FC
00009676 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 4468 0010                  		neg.w	$10(a0)
00009682 0868 0000 0001             		bchg	#0,1(a0)
00009688                            
00009688                            loc_91FC:
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_9212
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_9212:
0000969E 4A28 0028                  		tst.b	$28(a0)
000096A2 6600                       		bne.s	loc_9224
000096A4 4A28 0001                  		tst.b	1(a0)
000096A8 6A00 0000                  		bpl.w	DeleteObject
000096AC 6000 0000                  		bra.w	DisplaySprite
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            loc_9224:				; XREF: Obj28_Index
000096B0 3028 0008                  		move.w	8(a0),d0
000096B4 9078 D008                  		sub.w	($FFFFD008).w,d0
000096B8 6500                       		bcs.s	loc_923C
000096BA 0440 0180                  		subi.w	#$180,d0
000096BE 6A00                       		bpl.s	loc_923C
000096C0 4A28 0001                  		tst.b	1(a0)
000096C4 6A00 0000                  		bpl.w	DeleteObject
000096C8                            
000096C8                            loc_923C:
000096C8 6000 0000                  		bra.w	DisplaySprite
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9240:				; XREF: Obj28_Index
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 5368 0036                  		subq.w	#1,$36(a0)
000096D8 6600 0000                  		bne.w	loc_925C
000096DC 117C 0002 0024             		move.b	#2,$24(a0)
000096E2 117C 0003 0018             		move.b	#3,$18(a0)
000096E8                            
000096E8                            loc_925C:
000096E8 6000 0000                  		bra.w	DisplaySprite
000096EC                            ; ===========================================================================
000096EC                            
000096EC                            loc_9260:				; XREF: Obj28_Index
000096EC 6100 0000                  		bsr.w	sub_9404
000096F0 6400                       		bcc.s	loc_927C
000096F2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FE 117C 000E 0024             		move.b	#$E,$24(a0)
00009704 6000 FF46                  		bra.w	loc_91C0
00009708                            ; ===========================================================================
00009708                            
00009708                            loc_927C:
00009708 6000 FFA6                  		bra.w	loc_9224
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_9280:				; XREF: Obj28_Index
0000970C 6100 0000                  		bsr.w	sub_9404
00009710 6A00                       		bpl.s	loc_92B6
00009712 4268 0010                  		clr.w	$10(a0)
00009716 4268 0032                  		clr.w	$32(a0)
0000971A 6100 0000                  		bsr.w	SpeedToPos
0000971E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009724 6100 0000                  		bsr.w	loc_93C4
00009728 6100 0000                  		bsr.w	loc_93EC
0000972C 5328 001E                  		subq.b	#1,$1E(a0)
00009730 6A00                       		bpl.s	loc_92B6
00009732 117C 0001 001E             		move.b	#1,$1E(a0)
00009738 5228 001A                  		addq.b	#1,$1A(a0)
0000973C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009742                            
00009742                            loc_92B6:
00009742 6000 FF6C                  		bra.w	loc_9224
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_92BA:				; XREF: Obj28_Index
00009746 6100 0000                  		bsr.w	sub_9404
0000974A 6A00                       		bpl.s	loc_9310
0000974C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009752 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009758 117C 0004 0024             		move.b	#4,$24(a0)
0000975E 6000 FEB0                  		bra.w	loc_9184
00009762                            ; ===========================================================================
00009762                            
00009762                            loc_92D6:				; XREF: Obj28_Index
00009762 6100 0000                  		bsr.w	ObjectFall
00009766 117C 0001 001A             		move.b	#1,$1A(a0)
0000976C 4A68 0012                  		tst.w	$12(a0)
00009770 6B00                       		bmi.s	loc_9310
00009772 117C 0000 001A             		move.b	#0,$1A(a0)
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E 4A41                       		tst.w	d1
00009780 6A00                       		bpl.s	loc_9310
00009782 4628 0029                  		not.b	$29(a0)
00009786 6600                       		bne.s	loc_9306
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 0868 0000 0001             		bchg	#0,1(a0)
00009792                            
00009792                            loc_9306:
00009792 D368 000C                  		add.w	d1,$C(a0)
00009796 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000979C                            
0000979C                            loc_9310:
0000979C 6000 FF12                  		bra.w	loc_9224
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            loc_9314:				; XREF: Obj28_Index
000097A0 6100 0000                  		bsr.w	sub_9404
000097A4 6A00                       		bpl.s	loc_932E
000097A6 4268 0010                  		clr.w	$10(a0)
000097AA 4268 0032                  		clr.w	$32(a0)
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 6100 0000                  		bsr.w	loc_93C4
000097B6 6100 0000                  		bsr.w	loc_93EC
000097BA                            
000097BA                            loc_932E:
000097BA 6000 FEF4                  		bra.w	loc_9224
000097BE                            ; ===========================================================================
000097BE                            
000097BE                            loc_9332:				; XREF: Obj28_Index
000097BE 6100 0000                  		bsr.w	sub_9404
000097C2 6A00                       		bpl.s	loc_936C
000097C4 6100 0000                  		bsr.w	ObjectFall
000097C8 117C 0001 001A             		move.b	#1,$1A(a0)
000097CE 4A68 0012                  		tst.w	$12(a0)
000097D2 6B00                       		bmi.s	loc_936C
000097D4 117C 0000 001A             		move.b	#0,$1A(a0)
000097DA 4EB9 0000 0000             		jsr	ObjHitFloor
000097E0 4A41                       		tst.w	d1
000097E2 6A00                       		bpl.s	loc_936C
000097E4 4468 0010                  		neg.w	$10(a0)
000097E8 0868 0000 0001             		bchg	#0,1(a0)
000097EE D368 000C                  		add.w	d1,$C(a0)
000097F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097F8                            
000097F8                            loc_936C:
000097F8 6000 FEB6                  		bra.w	loc_9224
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_9370:				; XREF: Obj28_Index
000097FC 6100 0000                  		bsr.w	sub_9404
00009800 6A00                       		bpl.s	loc_93C0
00009802 6100 0000                  		bsr.w	SpeedToPos
00009806 0668 0018 0012             		addi.w	#$18,$12(a0)
0000980C 4A68 0012                  		tst.w	$12(a0)
00009810 6B00                       		bmi.s	loc_93AA
00009812 4EB9 0000 0000             		jsr	ObjHitFloor
00009818 4A41                       		tst.w	d1
0000981A 6A00                       		bpl.s	loc_93AA
0000981C 4628 0029                  		not.b	$29(a0)
00009820 6600                       		bne.s	loc_93A0
00009822 4468 0010                  		neg.w	$10(a0)
00009826 0868 0000 0001             		bchg	#0,1(a0)
0000982C                            
0000982C                            loc_93A0:
0000982C D368 000C                  		add.w	d1,$C(a0)
00009830 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009836                            
00009836                            loc_93AA:
00009836 5328 001E                  		subq.b	#1,$1E(a0)
0000983A 6A00                       		bpl.s	loc_93C0
0000983C 117C 0001 001E             		move.b	#1,$1E(a0)
00009842 5228 001A                  		addq.b	#1,$1A(a0)
00009846 0228 0001 001A             		andi.b	#1,$1A(a0)
0000984C                            
0000984C                            loc_93C0:
0000984C 6000 FE62                  		bra.w	loc_9224
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_93C4:
00009850 117C 0001 001A             		move.b	#1,$1A(a0)
00009856 4A68 0012                  		tst.w	$12(a0)
0000985A 6B00                       		bmi.s	locret_93EA
0000985C 117C 0000 001A             		move.b	#0,$1A(a0)
00009862 4EB9 0000 0000             		jsr	ObjHitFloor
00009868 4A41                       		tst.w	d1
0000986A 6A00                       		bpl.s	locret_93EA
0000986C D368 000C                  		add.w	d1,$C(a0)
00009870 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009876                            
00009876                            locret_93EA:
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            loc_93EC:
00009878 08E8 0000 0001             		bset	#0,1(a0)
0000987E 3028 0008                  		move.w	8(a0),d0
00009882 9078 D008                  		sub.w	($FFFFD008).w,d0
00009886 6400                       		bcc.s	locret_9402
00009888 08A8 0000 0001             		bclr	#0,1(a0)
0000988E                            
0000988E                            locret_9402:
0000988E 4E75                       		rts	
00009890                            
00009890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009890                            
00009890                            
00009890                            sub_9404:
00009890 3038 D008                  		move.w	($FFFFD008).w,d0
00009894 9068 0008                  		sub.w	8(a0),d0
00009898 0440 00B8                  		subi.w	#$B8,d0
0000989C 4E75                       		rts	
0000989E                            ; End of function sub_9404
0000989E                            
0000989E                            ; ===========================================================================
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 29 - points that appear when you destroy something
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            Obj29:					; XREF: Obj_Index
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	$24(a0),d0
000098A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098B2 0000                       		dc.w Obj29_Slower-Obj29_Index
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj29_Main:				; XREF: Obj29_Index
000098B4 5428 0024                  		addq.b	#2,$24(a0)
000098B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C0 317C 2797 0002             		move.w	#$2797,2(a0)
000098C6 117C 0004 0001             		move.b	#4,1(a0)
000098CC 117C 0001 0018             		move.b	#1,$18(a0)
000098D2 117C 0008 0019             		move.b	#8,$19(a0)
000098D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098DE                            
000098DE                            Obj29_Slower:				; XREF: Obj29_Index
000098DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098E6 6100 0000                  		bsr.w	SpeedToPos
000098EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F0 4E75                       		rts	
000098F2                            ; ===========================================================================
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj28:
000098F2                            	include "_maps\obj28.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_9472-Map_obj28
000098F4 0000                       		dc.w byte_9478-Map_obj28
000098F6 0000                       		dc.w byte_946C-Map_obj28
000098F8 01                         byte_946C:	dc.b 1
000098F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FE 01                         byte_9472:	dc.b 1
000098FF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009904 01                         byte_9478:	dc.b 1
00009905 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000990A                            		even
0000990A                            		even
0000990A                            
0000990A                            Map_obj28a:
0000990A                            	include "_maps\obj28a.asm"
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Sprite mappings - animals
0000990A                            ; ---------------------------------------------------------------------------
0000990A 0000                       		dc.w byte_948A-Map_obj28a
0000990C 0000                       		dc.w byte_9490-Map_obj28a
0000990E 0000                       		dc.w byte_9484-Map_obj28a
00009910 01                         byte_9484:	dc.b 1
00009911 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009916 01                         byte_948A:	dc.b 1
00009917 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000991C 01                         byte_9490:	dc.b 1
0000991D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009922                            		even
00009922                            		even
00009922                            
00009922                            Map_obj28b:
00009922                            	include "_maps\obj28b.asm"
00009922                            ; ---------------------------------------------------------------------------
00009922                            ; Sprite mappings - animals
00009922                            ; ---------------------------------------------------------------------------
00009922 0000                       		dc.w byte_94A2-Map_obj28b
00009924 0000                       		dc.w byte_94A8-Map_obj28b
00009926 0000                       		dc.w byte_949C-Map_obj28b
00009928 01                         byte_949C:	dc.b 1
00009929 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000992E 01                         byte_94A2:	dc.b 1
0000992F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009934 01                         byte_94A8:	dc.b 1
00009935 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000993A                            		even
0000993A                            		even
0000993A                            
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            Map_obj29:
0000993A                            	include "_maps\obj29.asm"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000993E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009942 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009946 0000                       		dc.w byte_94E5-Map_obj29
00009948 01                         byte_94BC:	dc.b 1
00009949 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000994E 01                         byte_94C2:	dc.b 1
0000994F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009954 01                         byte_94C8:	dc.b 1
00009955 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000995A 01                         byte_94CE:	dc.b 1
0000995B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009960 01                         byte_94D4:	dc.b 1
00009961 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009966 02                         byte_94DA:	dc.b 2
00009967 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000996C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009971 02                         byte_94E5:	dc.b 2
00009972 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009977 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000997C                            		even
0000997C                            		even
0000997C                            
0000997C                            ; ===========================================================================
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            Obj1F:					; XREF: Obj_Index
0000997C 7000                       		moveq	#0,d0
0000997E 1028 0024                  		move.b	$24(a0),d0
00009982 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009986 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000998A                            ; ===========================================================================
0000998A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000998C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000998E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009990 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009992 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009994                            ; ===========================================================================
00009994                            
00009994                            Obj1F_Main:				; XREF: Obj1F_Index
00009994 117C 0010 0016             		move.b	#$10,$16(a0)
0000999A 117C 0008 0017             		move.b	#8,$17(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099A8 317C 0400 0002             		move.w	#$400,2(a0)
000099AE 117C 0004 0001             		move.b	#4,1(a0)
000099B4 117C 0003 0018             		move.b	#3,$18(a0)
000099BA 117C 0006 0020             		move.b	#6,$20(a0)
000099C0 117C 0015 0019             		move.b	#$15,$19(a0)
000099C6 6100 0000                  		bsr.w	ObjectFall
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	locret_955A
000099D4 D368 000C                  		add.w	d1,$C(a0)
000099D8 1143 0026                  		move.b	d3,$26(a0)
000099DC 317C 0000 0012             		move.w	#0,$12(a0)
000099E2 5428 0024                  		addq.b	#2,$24(a0)
000099E6                            
000099E6                            locret_955A:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj1F_Action:				; XREF: Obj1F_Index
000099E8 7000                       		moveq	#0,d0
000099EA 1028 0025                  		move.b	$25(a0),d0
000099EE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099F2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099F6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099FC 6100 0000                  		bsr.w	AnimateSprite
00009A00 6000 0000                  		bra.w	MarkObjGone
00009A04                            ; ===========================================================================
00009A04 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A06 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A0C 6A00                       		bpl.s	locret_95B6
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00                       		bpl.s	Obj1F_Move
00009A14 0868 0001 0032             		bchg	#1,$32(a0)
00009A1A 6600                       		bne.s	Obj1F_MakeFire
00009A1C                            
00009A1C                            Obj1F_Move:
00009A1C 5428 0025                  		addq.b	#2,$25(a0)
00009A20 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A26 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A2C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A30 5600                       		addq.b	#3,d0
00009A32 1140 001C                  		move.b	d0,$1C(a0)
00009A36 0868 0000 0022             		bchg	#0,$22(a0)
00009A3C 6600                       		bne.s	locret_95B6
00009A3E 4468 0010                  		neg.w	$10(a0)		; change direction
00009A42                            
00009A42                            locret_95B6:
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A44 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A4A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A50 6100 0000                  		bsr.w	SingleObjLoad
00009A54 6600                       		bne.s	Obj1F_MakeFire2
00009A56 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A5A 137C 0006 0024             		move.b	#6,$24(a1)
00009A60 3368 0008 0008             		move.w	8(a0),8(a1)
00009A66 0469 0010 0008             		subi.w	#$10,8(a1)
00009A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A72 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A78                            
00009A78                            Obj1F_MakeFire2:
00009A78 6100 0000                  		bsr.w	SingleObjLoad
00009A7C 6600                       		bne.s	locret_9618
00009A7E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A82 137C 0006 0024             		move.b	#6,$24(a1)
00009A88 3368 0008 0008             		move.w	8(a0),8(a1)
00009A8E 0669 0010 0008             		addi.w	#$10,8(a1)
00009A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A9A 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA0                            
00009AA0                            locret_9618:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AA2 5368 0030                  		subq.w	#1,$30(a0)
00009AA6 6B00                       		bmi.s	loc_966E
00009AA8 6100 0000                  		bsr.w	SpeedToPos
00009AAC 0868 0000 0032             		bchg	#0,$32(a0)
00009AB2 6600                       		bne.s	loc_9654
00009AB4 3628 0008                  		move.w	8(a0),d3
00009AB8 0643 0010                  		addi.w	#$10,d3
00009ABC 0828 0000 0022             		btst	#0,$22(a0)
00009AC2 6700                       		beq.s	loc_9640
00009AC4 0443 0020                  		subi.w	#$20,d3
00009AC8                            
00009AC8                            loc_9640:
00009AC8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ACE 0C41 FFF8                  		cmpi.w	#-8,d1
00009AD2 6D00                       		blt.s	loc_966E
00009AD4 0C41 000C                  		cmpi.w	#$C,d1
00009AD8 6C00                       		bge.s	loc_966E
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009ADC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE2 D368 000C                  		add.w	d1,$C(a0)
00009AE6 1143 0026                  		move.b	d3,$26(a0)
00009AEA 6100 0000                  		bsr.w	Obj1F_SetAni
00009AEE 5600                       		addq.b	#3,d0
00009AF0 1140 001C                  		move.b	d0,$1C(a0)
00009AF4 4E75                       		rts	
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AF6 5528 0025                  		subq.b	#2,$25(a0)
00009AFA 317C 003B 0030             		move.w	#59,$30(a0)
00009B00 317C 0000 0010             		move.w	#0,$10(a0)
00009B06 6100 0000                  		bsr.w	Obj1F_SetAni
00009B0A 1140 001C                  		move.b	d0,$1C(a0)
00009B0E 4E75                       		rts	
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            Obj1F_SetAni:				; XREF: loc_966E
00009B10 7000                       		moveq	#0,d0
00009B12 1628 0026                  		move.b	$26(a0),d3
00009B16 6B00                       		bmi.s	loc_96A4
00009B18 0C03 0006                  		cmpi.b	#6,d3
00009B1C 6500                       		bcs.s	locret_96A2
00009B1E 7001                       		moveq	#1,d0
00009B20 0828 0000 0022             		btst	#0,$22(a0)
00009B26 6600                       		bne.s	locret_96A2
00009B28 7002                       		moveq	#2,d0
00009B2A                            
00009B2A                            locret_96A2:
00009B2A 4E75                       		rts	
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B2C 0C03 00FA                  		cmpi.b	#-6,d3
00009B30 6200                       		bhi.s	locret_96B6
00009B32 7002                       		moveq	#2,d0
00009B34 0828 0000 0022             		btst	#0,$22(a0)
00009B3A 6600                       		bne.s	locret_96B6
00009B3C 7001                       		moveq	#1,d0
00009B3E                            
00009B3E                            locret_96B6:
00009B3E 4E75                       		rts	
00009B40                            ; End of function Obj1F_SetAni
00009B40                            
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B40 6100 0000                  		bsr.w	DeleteObject
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            ; Sub-object - missile that the	Crabmeat throws
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            
00009B46                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B46 5428 0024                  		addq.b	#2,$24(a0)
00009B4A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B52 317C 0400 0002             		move.w	#$400,2(a0)
00009B58 117C 0004 0001             		move.b	#4,1(a0)
00009B5E 117C 0003 0018             		move.b	#3,$18(a0)
00009B64 117C 0087 0020             		move.b	#$87,$20(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B76 117C 0007 001C             		move.b	#7,$1C(a0)
00009B7C                            
00009B7C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B82 6100 0000                  		bsr.w	AnimateSprite
00009B86 6100 0000                  		bsr.w	ObjectFall
00009B8A 6100 0000                  		bsr.w	DisplaySprite
00009B8E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B92 0640 00E0                  		addi.w	#$E0,d0
00009B96 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B9A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1F_Delete2:
00009B9E 6000 0000                  		bra.w	DeleteObject
00009BA2                            ; ===========================================================================
00009BA2                            Ani_obj1F:
00009BA2                            	include "_anim\obj1F.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Animation script - Crabmeat enemy
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BA8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BAE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BB2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BB6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BBA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BBE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BC4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BCA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BD4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BD8                            		even
00009BD8                            		even
00009BD8                            
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            Map_obj1F:
00009BD8                            	include "_maps\obj1F.asm"
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009BDC 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009BE0 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009BE4 0000                       		dc.w byte_97D7-Map_obj1F
00009BE6 04                         byte_975E:	dc.b 4
00009BE7 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009BEC F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009BF1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009BF6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009BFB 04                         byte_9773:	dc.b 4
00009BFC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009C01 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009C06 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009C0B 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009C10 04                         byte_9788:	dc.b 4
00009C11 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009C16 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009C1B FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009C20 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009C25 04                         byte_979D:	dc.b 4
00009C26 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009C2B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009C30 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009C35 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009C3A 06                         byte_97B2:	dc.b 6
00009C3B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009C40 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009C45 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009C4A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009C4F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009C54 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009C59 01                         byte_97D1:	dc.b 1
00009C5A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
00009C5F 01                         byte_97D7:	dc.b 1
00009C60 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
00009C66 00                         		even
00009C66 00                         		even
00009C66                            
00009C66                            ; ===========================================================================
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C66                            ; ---------------------------------------------------------------------------
00009C66                            
00009C66                            Obj22:					; XREF: Obj_Index
00009C66 7000                       		moveq	#0,d0
00009C68 1028 0024                  		move.b	$24(a0),d0
00009C6C 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C70 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C74                            ; ===========================================================================
00009C74 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C76 0000                       		dc.w Obj22_Action-Obj22_Index
00009C78 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C7A                            ; ===========================================================================
00009C7A                            
00009C7A                            Obj22_Main:				; XREF: Obj22_Index
00009C7A 5428 0024                  		addq.b	#2,$24(a0)
00009C7E 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C86 317C 0444 0002             		move.w	#$444,2(a0)
00009C8C 117C 0004 0001             		move.b	#4,1(a0)
00009C92 117C 0003 0018             		move.b	#3,$18(a0)
00009C98 117C 0008 0020             		move.b	#8,$20(a0)
00009C9E 117C 0018 0019             		move.b	#$18,$19(a0)
00009CA4                            
00009CA4                            Obj22_Action:				; XREF: Obj22_Index
00009CA4 7000                       		moveq	#0,d0
00009CA6 1028 0025                  		move.b	$25(a0),d0
00009CAA 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009CAE 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009CB2 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009CB8 6100 0000                  		bsr.w	AnimateSprite
00009CBC 6000 0000                  		bra.w	MarkObjGone
00009CC0                            ; ===========================================================================
00009CC0 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009CC2 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CC4                            ; ===========================================================================
00009CC4                            
00009CC4                            Obj22_Move:				; XREF: Obj22_Index2
00009CC4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CC8 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CCA 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CD0 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CD2 5428 0025                  		addq.b	#2,$25(a0)
00009CD6 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CDC 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CE2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CE8 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CEE 6600                       		bne.s	locret_986C	; if not, branch
00009CF0 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CF4                            
00009CF4                            locret_986C:
00009CF4 4E75                       		rts	
00009CF6                            ; ===========================================================================
00009CF6                            
00009CF6                            Obj22_Fire:				; XREF: Obj22_Move
00009CF6 6100 0000                  		bsr.w	SingleObjLoad
00009CFA 6600                       		bne.s	locret_98D0
00009CFC 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009D00 3368 0008 0008             		move.w	8(a0),8(a1)
00009D06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D0C 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009D12 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009D18 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D1E 303C 0018                  		move.w	#$18,d0
00009D22 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D28 6600                       		bne.s	loc_98AA	; if not, branch
00009D2A 4440                       		neg.w	d0
00009D2C 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D30                            
00009D30                            loc_98AA:
00009D30 D169 0008                  		add.w	d0,8(a1)
00009D34 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D3A 337C 000E 0032             		move.w	#$E,$32(a1)
00009D40 2348 003C                  		move.l	a0,$3C(a1)
00009D44 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D4A 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D50 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D56                            
00009D56                            locret_98D0:
00009D56 4E75                       		rts	
00009D58                            ; ===========================================================================
00009D58                            
00009D58                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D58 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D5C 6B00                       		bmi.s	Obj22_ChgDir
00009D5E 6100 0000                  		bsr.w	SpeedToPos
00009D62 4A28 0034                  		tst.b	$34(a0)
00009D66 6600                       		bne.s	locret_992A
00009D68 3038 D008                  		move.w	($FFFFD008).w,d0
00009D6C 9068 0008                  		sub.w	8(a0),d0
00009D70 6A00                       		bpl.s	Obj22_SetNrSonic
00009D72 4440                       		neg.w	d0
00009D74                            
00009D74                            Obj22_SetNrSonic:
00009D74 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D78 6400                       		bcc.s	locret_992A	; if not, branch
00009D7A 4A28 0001                  		tst.b	1(a0)
00009D7E 6A00                       		bpl.s	locret_992A
00009D80 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D86 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D8C 6000                       		bra.s	Obj22_Stop
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D8E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D94 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D9A 317C 003B 0032             		move.w	#59,$32(a0)
00009DA0                            
00009DA0                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009DA0 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009DA4 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009DAA 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009DB0                            
00009DB0                            locret_992A:
00009DB0 4E75                       		rts	
00009DB2                            ; ===========================================================================
00009DB2                            
00009DB2                            Obj22_Delete:				; XREF: Obj22_Index
00009DB2 6100 0000                  		bsr.w	DeleteObject
00009DB6 4E75                       		rts	
00009DB8                            ; ===========================================================================
00009DB8                            ; ---------------------------------------------------------------------------
00009DB8                            ; Object 23 - missile that Buzz	Bomber throws
00009DB8                            ; ---------------------------------------------------------------------------
00009DB8                            
00009DB8                            Obj23:					; XREF: Obj_Index
00009DB8 7000                       		moveq	#0,d0
00009DBA 1028 0024                  		move.b	$24(a0),d0
00009DBE 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009DC2 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DC6                            ; ===========================================================================
00009DC6 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DC8 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DCA 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DCC 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DCE 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DD0                            ; ===========================================================================
00009DD0                            
00009DD0                            Obj23_Main:				; XREF: Obj23_Index
00009DD0 5368 0032                  		subq.w	#1,$32(a0)
00009DD4 6A00                       		bpl.s	Obj23_ChkCancel
00009DD6 5428 0024                  		addq.b	#2,$24(a0)
00009DDA 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DE2 317C 2444 0002             		move.w	#$2444,2(a0)
00009DE8 117C 0004 0001             		move.b	#4,1(a0)
00009DEE 117C 0003 0018             		move.b	#3,$18(a0)
00009DF4 117C 0008 0019             		move.b	#8,$19(a0)
00009DFA 0228 0003 0022             		andi.b	#3,$22(a0)
00009E00 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009E04 6700                       		beq.s	Obj23_Animate	; if not, branch
00009E06 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009E0C 117C 0087 0020             		move.b	#$87,$20(a0)
00009E12 117C 0001 001C             		move.b	#1,$1C(a0)
00009E18 6000                       		bra.s	Obj23_Animate2
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Obj23_Animate:				; XREF: Obj23_Index
00009E1A 6100                       		bsr.s	Obj23_ChkCancel
00009E1C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E22 6100 0000                  		bsr.w	AnimateSprite
00009E26 6000 0000                  		bra.w	DisplaySprite
00009E2A                            ; ---------------------------------------------------------------------------
00009E2A                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E2A                            ; destroyed, and if it has, then cancel	the missile
00009E2A                            ; ---------------------------------------------------------------------------
00009E2A                            
00009E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E2A                            
00009E2A                            
00009E2A                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E2A 2268 003C                  		movea.l	$3C(a0),a1
00009E2E 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E32 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E34 4E75                       		rts	
00009E36                            ; End of function Obj23_ChkCancel
00009E36                            
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E36 0828 0007 0022             		btst	#7,$22(a0)
00009E3C 6600                       		bne.s	Obj23_Explode
00009E3E 117C 0087 0020             		move.b	#$87,$20(a0)
00009E44 117C 0001 001C             		move.b	#1,$1C(a0)
00009E4A 6100 0000                  		bsr.w	SpeedToPos
00009E4E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E54 6100 0000                  		bsr.w	AnimateSprite
00009E58 6100 0000                  		bsr.w	DisplaySprite
00009E5C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E60 0640 00E0                  		addi.w	#$E0,d0
00009E64 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E68 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E6A 4E75                       		rts	
00009E6C                            ; ===========================================================================
00009E6C                            
00009E6C                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E6C 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E70 117C 0000 0024             		move.b	#0,$24(a0)
00009E76 6000 F2BA                  		bra.w	Obj24
00009E7A                            ; ===========================================================================
00009E7A                            
00009E7A                            Obj23_Delete:				; XREF: Obj23_Index
00009E7A 6100 0000                  		bsr.w	DeleteObject
00009E7E 4E75                       		rts	
00009E80                            ; ===========================================================================
00009E80                            
00009E80                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E80 4A28 0001                  		tst.b	1(a0)
00009E84 6AF4                       		bpl.s	Obj23_Delete
00009E86 6100 0000                  		bsr.w	SpeedToPos
00009E8A                            
00009E8A                            Obj23_Animate2:				; XREF: Obj23_Main
00009E8A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E90 6100 0000                  		bsr.w	AnimateSprite
00009E94 6100 0000                  		bsr.w	DisplaySprite
00009E98 4E75                       		rts	
00009E9A                            ; ===========================================================================
00009E9A                            Ani_obj22:
00009E9A                            	include "_anim\obj22.asm"
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            ; Animation script - Buzz Bomber enemy
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A 0000                       		dc.w byte_9A1E-Ani_obj22
00009E9C 0000                       		dc.w byte_9A22-Ani_obj22
00009E9E 0000                       		dc.w byte_9A26-Ani_obj22
00009EA0 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009EA4 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009EA8 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009EAC                            		even
00009EAC                            		even
00009EAC                            
00009EAC                            Ani_obj23:
00009EAC                            	include "_anim\obj23.asm"
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC                            ; Animation script - missile that Buzz Bomber throws
00009EAC                            ; ---------------------------------------------------------------------------
00009EAC 0000                       		dc.w byte_9A2E-Ani_obj23
00009EAE 0000                       		dc.w byte_9A32-Ani_obj23
00009EB0 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009EB4 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009EB8                            		even
00009EB8                            		even
00009EB8                            
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            ; Sprite mappings - Buzz Bomber	enemy
00009EB8                            ; ---------------------------------------------------------------------------
00009EB8                            Map_obj22:
00009EB8                            	include "_maps\obj22.asm"
00009EB8                            Map_e97a:
00009EB8 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009EBA 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009EBC 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009EBE 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009EC0 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009EC2 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EC4 06                         Map_e97a_C: 	dc.b $6
00009EC5 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009ECA F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ECF 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ED4 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009ED9 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EDE F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EE3 06                         Map_e97a_2B: 	dc.b $6
00009EE4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EE9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EEE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EF3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EF8 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009EFD F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F02 07                         Map_e97a_4A: 	dc.b $7
00009F03 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009F08 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F0D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F12 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F17 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F1C F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F21 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F26 07                         Map_e97a_6E: 	dc.b $7
00009F27 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F2C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F31 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F36 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F3B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F40 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F45 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F4A 06                         Map_e97a_92: 	dc.b $6
00009F4B F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F50 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F55 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F5A 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F5F F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F64 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F69 04                         Map_e97a_B1: 	dc.b $4
00009F6A F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F6F 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F74 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F79 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F7E                            	even
00009F7E                            	even
00009F7E                            
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E                            ; Sprite mappings - missile that Buzz Bomber throws
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E                            Map_obj23:
00009F7E                            	include "_maps\obj23.asm"
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E                            ; Sprite mappings - missile that Buzz Bomber throws
00009F7E                            ; ---------------------------------------------------------------------------
00009F7E 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F82 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F86 01                         byte_9B0E:	dc.b 1
00009F87 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F8C 01                         byte_9B14:	dc.b 1
00009F8D F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F92 01                         byte_9B1A:	dc.b 1
00009F93 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F98 01                         byte_9B20:	dc.b 1
00009F99 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F9E                            		even
00009F9E                            		even
00009F9E                            
00009F9E                            ; ===========================================================================
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            ; Object 25 - rings
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            
00009F9E                            Obj25:					; XREF: Obj_Index
00009F9E 7000                       		moveq	#0,d0
00009FA0 1028 0024                  		move.b	$24(a0),d0
00009FA4 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009FA8 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009FAC                            ; ===========================================================================
00009FAC 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009FAE 0000                       		dc.w Obj25_Animate-Obj25_Index
00009FB0 0000                       		dc.w Obj25_Collect-Obj25_Index
00009FB2 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009FB4 0000                       		dc.w Obj25_Delete-Obj25_Index
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6                            ; Distances between rings (format: horizontal, vertical)
00009FB6                            ; ---------------------------------------------------------------------------
00009FB6 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009FB8 1800                       		dc.b $18, 0		; horizontal normal
00009FBA 2000                       		dc.b $20, 0		; horizontal wide
00009FBC 0010                       		dc.b 0,	$10		; vertical tight
00009FBE 0018                       		dc.b 0,	$18		; vertical normal
00009FC0 0020                       		dc.b 0,	$20		; vertical wide
00009FC2 1010                       		dc.b $10, $10		; diagonal
00009FC4 1818                       		dc.b $18, $18
00009FC6 2020                       		dc.b $20, $20
00009FC8 F010                       		dc.b $F0, $10
00009FCA E818                       		dc.b $E8, $18
00009FCC E020                       		dc.b $E0, $20
00009FCE 1008                       		dc.b $10, 8
00009FD0 1810                       		dc.b $18, $10
00009FD2 F008                       		dc.b $F0, 8
00009FD4 E810                       		dc.b $E8, $10
00009FD6                            ; ===========================================================================
00009FD6                            
00009FD6                            Obj25_Main:				; XREF: Obj25_Index
00009FD6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FDA 7000                       		moveq	#0,d0
00009FDC 1028 0023                  		move.b	$23(a0),d0
00009FE0 45F2 0002                  		lea	2(a2,d0.w),a2
00009FE4 1812                       		move.b	(a2),d4
00009FE6 1228 0028                  		move.b	$28(a0),d1
00009FEA 1001                       		move.b	d1,d0
00009FEC 0241 0007                  		andi.w	#7,d1
00009FF0 0C41 0007                  		cmpi.w	#7,d1
00009FF4 6600                       		bne.s	loc_9B80
00009FF6 7206                       		moveq	#6,d1
00009FF8                            
00009FF8                            loc_9B80:
00009FF8 4841                       		swap	d1
00009FFA 323C 0000                  		move.w	#0,d1
00009FFE E808                       		lsr.b	#4,d0
0000A000 D040                       		add.w	d0,d0
0000A002 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A006 4885                       		ext.w	d5
0000A008 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A00C 4886                       		ext.w	d6
0000A00E 2248                       		movea.l	a0,a1
0000A010 3428 0008                  		move.w	8(a0),d2
0000A014 3628 000C                  		move.w	$C(a0),d3
0000A018 E20C                       		lsr.b	#1,d4
0000A01A 6500                       		bcs.s	loc_9C02
0000A01C 0892 0007                  		bclr	#7,(a2)
0000A020 6000                       		bra.s	loc_9BBA
0000A022                            ; ===========================================================================
0000A022                            
0000A022                            Obj25_MakeRings:
0000A022 4841                       		swap	d1
0000A024 E20C                       		lsr.b	#1,d4
0000A026 6500                       		bcs.s	loc_9C02
0000A028 0892 0007                  		bclr	#7,(a2)
0000A02C 6100 0000                  		bsr.w	SingleObjLoad
0000A030 6600                       		bne.s	loc_9C0E
0000A032                            
0000A032                            loc_9BBA:				; XREF: Obj25_Main
0000A032 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A036 5429 0024                  		addq.b	#2,$24(a1)
0000A03A 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A03E 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A044 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A048 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A050 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A056 137C 0004 0001             		move.b	#4,1(a1)
0000A05C 137C 0002 0018             		move.b	#2,$18(a1)
0000A062 137C 0047 0020             		move.b	#$47,$20(a1)
0000A068 137C 0008 0019             		move.b	#8,$19(a1)
0000A06E 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A074 1341 0034                  		move.b	d1,$34(a1)
0000A078                            
0000A078                            loc_9C02:
0000A078 5241                       		addq.w	#1,d1
0000A07A D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A07C D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A07E 4841                       		swap	d1
0000A080 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A084                            
0000A084                            loc_9C0E:
0000A084 0812 0000                  		btst	#0,(a2)
0000A088 6600 0000                  		bne.w	DeleteObject
0000A08C                            
0000A08C                            Obj25_Animate:				; XREF: Obj25_Index
0000A08C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A092 6100 0000                  		bsr.w	DisplaySprite
0000A096 3028 0032                  		move.w	$32(a0),d0
0000A09A 0240 FF80                  		andi.w	#$FF80,d0
0000A09E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A0A2 0441 0080                  		subi.w	#$80,d1
0000A0A6 0241 FF80                  		andi.w	#$FF80,d1
0000A0AA 9041                       		sub.w	d1,d0
0000A0AC 0C40 0280                  		cmpi.w	#$280,d0
0000A0B0 6200                       		bhi.s	Obj25_Delete
0000A0B2 4E75                       		rts	
0000A0B4                            ; ===========================================================================
0000A0B4                            
0000A0B4                            Obj25_Collect:				; XREF: Obj25_Index
0000A0B4 5428 0024                  		addq.b	#2,$24(a0)
0000A0B8 117C 0000 0020             		move.b	#0,$20(a0)
0000A0BE 117C 0001 0018             		move.b	#1,$18(a0)
0000A0C4 6100 0000                  		bsr.w	CollectRing
0000A0C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0CC 7000                       		moveq	#0,d0
0000A0CE 1028 0023                  		move.b	$23(a0),d0
0000A0D2 1228 0034                  		move.b	$34(a0),d1
0000A0D6 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0DA                            
0000A0DA                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0DA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0E0 6100 0000                  		bsr.w	AnimateSprite
0000A0E4 6000 0000                  		bra.w	DisplaySprite
0000A0E8                            ; ===========================================================================
0000A0E8                            
0000A0E8                            Obj25_Delete:				; XREF: Obj25_Index
0000A0E8 6000 0000                  		bra.w	DeleteObject
0000A0EC                            
0000A0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0EC                            
0000A0EC                            
0000A0EC                            CollectRing:				; XREF: Obj25_Collect
0000A0EC 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0F0 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0F6 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0FA 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A100 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A102 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A108 6700                       		beq.s	loc_9CA4
0000A10A 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A110 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A112 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A118 6600                       		bne.s	Obj25_PlaySnd
0000A11A                            
0000A11A                            loc_9CA4:
0000A11A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A11E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A122 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A126                            
0000A126                            Obj25_PlaySnd:
0000A126 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A12C                            ; End of function CollectRing
0000A12C                            
0000A12C                            ; ===========================================================================
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            
0000A12C                            Obj37:					; XREF: Obj_Index
0000A12C 7000                       		moveq	#0,d0
0000A12E 1028 0024                  		move.b	$24(a0),d0
0000A132 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A136 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A13A                            ; ===========================================================================
0000A13A 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A13C 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A13E 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A140 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A142 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A144                            ; ===========================================================================
0000A144                            
0000A144                            Obj37_CountRings:			; XREF: Obj37_Index
0000A144 2248                       		movea.l	a0,a1
0000A146 7A00                       		moveq	#0,d5
0000A148 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A14C 7020                       		moveq	#32,d0
0000A14E BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A150 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A152 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A154                            
0000A154                            loc_9CDE:
0000A154 5345                       		subq.w	#1,d5
0000A156 383C 0288                  		move.w	#$288,d4
0000A15A 6000                       		bra.s	Obj37_MakeRings
0000A15C                            ; ===========================================================================
0000A15C                            
0000A15C                            Obj37_Loop:
0000A15C 6100 0000                  		bsr.w	SingleObjLoad
0000A160 6600 0000                  		bne.w	Obj37_ResetCounter
0000A164                            
0000A164                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A164 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A168 5429 0024                  		addq.b	#2,$24(a1)
0000A16C 137C 0008 0016             		move.b	#8,$16(a1)
0000A172 137C 0008 0017             		move.b	#8,$17(a1)
0000A178 3368 0008 0008             		move.w	8(a0),8(a1)
0000A17E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A184 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A18C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A192 137C 0004 0001             		move.b	#4,1(a1)
0000A198 137C 0003 0018             		move.b	#3,$18(a1)
0000A19E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A1A4 137C 0008 0019             		move.b	#8,$19(a1)
0000A1AA 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A1B0 4A44                       		tst.w	d4
0000A1B2 6B00                       		bmi.s	loc_9D62
0000A1B4 3004                       		move.w	d4,d0
0000A1B6 6100 8A6A                  		bsr.w	CalcSine
0000A1BA 3404                       		move.w	d4,d2
0000A1BC E04A                       		lsr.w	#8,d2
0000A1BE E560                       		asl.w	d2,d0
0000A1C0 E561                       		asl.w	d2,d1
0000A1C2 3400                       		move.w	d0,d2
0000A1C4 3601                       		move.w	d1,d3
0000A1C6 0604 0010                  		addi.b	#$10,d4
0000A1CA 6400                       		bcc.s	loc_9D62
0000A1CC 0444 0080                  		subi.w	#$80,d4
0000A1D0 6400                       		bcc.s	loc_9D62
0000A1D2 383C 0288                  		move.w	#$288,d4
0000A1D6                            
0000A1D6                            loc_9D62:
0000A1D6 3342 0010                  		move.w	d2,$10(a1)
0000A1DA 3343 0012                  		move.w	d3,$12(a1)
0000A1DE 4442                       		neg.w	d2
0000A1E0 4444                       		neg.w	d4
0000A1E2 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1E6                            
0000A1E6                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1E6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1EC 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1F2 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1F8 303C 00C6                  		move.w	#$C6,d0
0000A1FC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A202                            
0000A202                            Obj37_Bounce:				; XREF: Obj37_Index
0000A202 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A208 6100 0000                  		bsr.w	SpeedToPos
0000A20C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A212 6B00                       		bmi.s	Obj37_ChkDel
0000A214 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A218 D007                       		add.b	d7,d0
0000A21A 0200 0003                  		andi.b	#3,d0
0000A21E 6600                       		bne.s	Obj37_ChkDel
0000A220 4EB9 0000 0000             		jsr	ObjHitFloor
0000A226 4A41                       		tst.w	d1
0000A228 6A00                       		bpl.s	Obj37_ChkDel
0000A22A D368 000C                  		add.w	d1,$C(a0)
0000A22E 3028 0012                  		move.w	$12(a0),d0
0000A232 E440                       		asr.w	#2,d0
0000A234 9168 0012                  		sub.w	d0,$12(a0)
0000A238 4468 0012                  		neg.w	$12(a0)
0000A23C                            
0000A23C                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A23C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A240 6700                       		beq.s	Obj37_Delete
0000A242 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A246 0640 00E0                  		addi.w	#$E0,d0
0000A24A B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A24E 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A250 6000 0000                  		bra.w	DisplaySprite
0000A254                            ; ===========================================================================
0000A254                            
0000A254                            Obj37_Collect:				; XREF: Obj37_Index
0000A254 5428 0024                  		addq.b	#2,$24(a0)
0000A258 117C 0000 0020             		move.b	#0,$20(a0)
0000A25E 117C 0001 0018             		move.b	#1,$18(a0)
0000A264 6100 FE86                  		bsr.w	CollectRing
0000A268                            
0000A268                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A268 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A26E 6100 0000                  		bsr.w	AnimateSprite
0000A272 6000 0000                  		bra.w	DisplaySprite
0000A276                            ; ===========================================================================
0000A276                            
0000A276                            Obj37_Delete:				; XREF: Obj37_Index
0000A276 6000 0000                  		bra.w	DeleteObject
0000A27A                            ; ===========================================================================
0000A27A                            ; ---------------------------------------------------------------------------
0000A27A                            ; Object 4B - giant ring for entry to special stage
0000A27A                            ; ---------------------------------------------------------------------------
0000A27A                            
0000A27A                            Obj4B:					; XREF: Obj_Index
0000A27A 7000                       		moveq	#0,d0
0000A27C 1028 0024                  		move.b	$24(a0),d0
0000A280 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A284 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A288                            ; ===========================================================================
0000A288 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A28A 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A28C 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A28E 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A290                            ; ===========================================================================
0000A290                            
0000A290                            Obj4B_Main:				; XREF: Obj4B_Index
0000A290 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A298 317C 2400 0002             		move.w	#$2400,2(a0)
0000A29E 0028 0004 0001             		ori.b	#4,1(a0)
0000A2A4 117C 0040 0019             		move.b	#$40,$19(a0)
0000A2AA 4A28 0001                  		tst.b	1(a0)
0000A2AE 6A00                       		bpl.s	Obj4B_Animate
0000A2B0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A2B6 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A2BA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A2C0 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A2C2 4E75                       		rts	
0000A2C4                            ; ===========================================================================
0000A2C4                            
0000A2C4                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2C4 5428 0024                  		addq.b	#2,$24(a0)
0000A2C8 117C 0002 0018             		move.b	#2,$18(a0)
0000A2CE 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2D4 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2DA                            
0000A2DA                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2DA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2E0 3028 0008                  		move.w	8(a0),d0
0000A2E4 0240 FF80                  		andi.w	#$FF80,d0
0000A2E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2EC 0441 0080                  		subi.w	#$80,d1
0000A2F0 0241 FF80                  		andi.w	#$FF80,d1
0000A2F4 9041                       		sub.w	d1,d0
0000A2F6 0C40 0280                  		cmpi.w	#$280,d0
0000A2FA 6200 0000                  		bhi.w	DeleteObject
0000A2FE 6000 0000                  		bra.w	DisplaySprite
0000A302                            ; ===========================================================================
0000A302                            
0000A302                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A302 5528 0024                  		subq.b	#2,$24(a0)
0000A306 117C 0000 0020             		move.b	#0,$20(a0)
0000A30C 6100 0000                  		bsr.w	SingleObjLoad
0000A310 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A314 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A318 3368 0008 0008             		move.w	8(a0),8(a1)
0000A31E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A324 2348 003C                  		move.l	a0,$3C(a1)
0000A328 3038 D008                  		move.w	($FFFFD008).w,d0
0000A32C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A330 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A332 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A338                            
0000A338                            Obj4B_PlaySnd:
0000A338 303C 00C3                  		move.w	#$C3,d0
0000A33C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A342 6096                       		bra.s	Obj4B_Animate
0000A344                            ; ===========================================================================
0000A344                            
0000A344                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A344 6000 0000                  		bra.w	DeleteObject
0000A348                            ; ===========================================================================
0000A348                            ; ---------------------------------------------------------------------------
0000A348                            ; Object 7C - flash effect when	you collect the	giant ring
0000A348                            ; ---------------------------------------------------------------------------
0000A348                            
0000A348                            Obj7C:					; XREF: Obj_Index
0000A348 7000                       		moveq	#0,d0
0000A34A 1028 0024                  		move.b	$24(a0),d0
0000A34E 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A352 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A356                            ; ===========================================================================
0000A356 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A358 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A35A 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A35C                            ; ===========================================================================
0000A35C                            
0000A35C                            Obj7C_Main:				; XREF: Obj7C_Index
0000A35C 5428 0024                  		addq.b	#2,$24(a0)
0000A360 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A368 317C 2462 0002             		move.w	#$2462,2(a0)
0000A36E 0028 0004 0001             		ori.b	#4,1(a0)
0000A374 117C 0000 0018             		move.b	#0,$18(a0)
0000A37A 117C 0020 0019             		move.b	#$20,$19(a0)
0000A380 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A386                            
0000A386                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A386 6100                       		bsr.s	Obj7C_Collect
0000A388 3028 0008                  		move.w	8(a0),d0
0000A38C 0240 FF80                  		andi.w	#$FF80,d0
0000A390 3238 F700                  		move.w	($FFFFF700).w,d1
0000A394 0441 0080                  		subi.w	#$80,d1
0000A398 0241 FF80                  		andi.w	#$FF80,d1
0000A39C 9041                       		sub.w	d1,d0
0000A39E 0C40 0280                  		cmpi.w	#$280,d0
0000A3A2 6200 0000                  		bhi.w	DeleteObject
0000A3A6 6000 0000                  		bra.w	DisplaySprite
0000A3AA                            
0000A3AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3AA                            
0000A3AA                            
0000A3AA                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A3AA 5328 001E                  		subq.b	#1,$1E(a0)
0000A3AE 6A00                       		bpl.s	locret_9F76
0000A3B0 117C 0001 001E             		move.b	#1,$1E(a0)
0000A3B6 5228 001A                  		addq.b	#1,$1A(a0)
0000A3BA 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A3C0 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A3C2 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3C8 6600                       		bne.s	locret_9F76	; if not, branch
0000A3CA 2268 003C                  		movea.l	$3C(a0),a1
0000A3CE 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3D4 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3DA 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3E0 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3E4 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3E8                            
0000A3E8                            locret_9F76:
0000A3E8 4E75                       		rts	
0000A3EA                            ; ===========================================================================
0000A3EA                            
0000A3EA                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3EA 5428 0024                  		addq.b	#2,$24(a0)
0000A3EE 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3F4 588F                       		addq.l	#4,sp
0000A3F6 4E75                       		rts	
0000A3F8                            ; End of function Obj7C_Collect
0000A3F8                            
0000A3F8                            ; ===========================================================================
0000A3F8                            
0000A3F8                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3F8 6000 0000                  		bra.w	DeleteObject
0000A3FC                            ; ===========================================================================
0000A3FC                            Ani_obj25:
0000A3FC                            	include "_anim\obj25.asm"
0000A3FC                            ; ---------------------------------------------------------------------------
0000A3FC                            ; Animation script - ring
0000A3FC                            ; ---------------------------------------------------------------------------
0000A3FC 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3FE 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A404                            		even
0000A404                            		even
0000A404                            
0000A404                            ; ---------------------------------------------------------------------------
0000A404                            ; Sprite mappings - rings
0000A404                            ; ---------------------------------------------------------------------------
0000A404                            Map_obj25:
0000A404                            	include "_maps\obj25.asm"
0000A404                            ; ---------------------------------------------------------------------------
0000A404                            ; Sprite mappings - rings
0000A404                            ; ---------------------------------------------------------------------------
0000A404 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A408 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A40C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A410 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A414 01                         byte_9FA2:	dc.b 1
0000A415 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A41A 01                         byte_9FA8:	dc.b 1
0000A41B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A420 01                         byte_9FAE:	dc.b 1
0000A421 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A426 01                         byte_9FB4:	dc.b 1
0000A427 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A42C 01                         byte_9FBA:	dc.b 1
0000A42D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A432 01                         byte_9FC0:	dc.b 1
0000A433 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A438 01                         byte_9FC6:	dc.b 1
0000A439 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A43E 01                         byte_9FCC:	dc.b 1
0000A43F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A444                            		even
0000A444                            		even
0000A444                            
0000A444                            ; ---------------------------------------------------------------------------
0000A444                            ; Sprite mappings - giant ring
0000A444                            ; ---------------------------------------------------------------------------
0000A444                            Map_obj4B:
0000A444                            	include "_maps\obj4B.asm"
0000A444                            ; ---------------------------------------------------------------------------
0000A444                            ; Sprite mappings - giant ring
0000A444                            ; ---------------------------------------------------------------------------
0000A444 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A448 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A44C 0A                         byte_9FDA:	dc.b $A
0000A44D E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A452 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A457 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A45C E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A461 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A466 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A46B 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A470 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A475 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A47A 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A47F 08                         byte_A00D:	dc.b 8
0000A480 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A485 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A48A E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A48F F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A494 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A499 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A49E 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A4A3 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A4A8 04                         byte_A036:	dc.b 4
0000A4A9 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A4AE E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A4B3 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A4B8 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A4BD 08                         byte_A04B:	dc.b 8
0000A4BE E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A4C3 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4C8 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4CD F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4D2 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4D7 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4DC 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4E1 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4E6                            		even
0000A4E6                            		even
0000A4E6                            
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            Map_obj7C:
0000A4E6                            	include "_maps\obj7C.asm"
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4E6                            ; ---------------------------------------------------------------------------
0000A4E6 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4EA 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4EE 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4F2 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4F6 02                         byte_A084:	dc.b 2
0000A4F7 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4FC 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A501 04                         byte_A08F:	dc.b 4
0000A502 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A507 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A50C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A511 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A516 04                         byte_A0A4:	dc.b 4
0000A517 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A51C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A521 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A526 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A52B 04                         byte_A0B9:	dc.b 4
0000A52C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A531 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A536 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A53B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A540 04                         byte_A0CE:	dc.b 4
0000A541 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A546 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A54B 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A550 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A555 04                         byte_A0E3:	dc.b 4
0000A556 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A55B E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A560 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A565 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A56A 02                         byte_A0F8:	dc.b 2
0000A56B E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A570 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A575 04                         byte_A103:	dc.b 4
0000A576 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A57B E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A580 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A585 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A58A                            		even
0000A58A                            		even
0000A58A                            
0000A58A                            ; ===========================================================================
0000A58A                            ; ---------------------------------------------------------------------------
0000A58A                            ; Object 26 - monitors
0000A58A                            ; ---------------------------------------------------------------------------
0000A58A                            
0000A58A                            Obj26:					; XREF: Obj_Index
0000A58A 7000                       		moveq	#0,d0
0000A58C 1028 0024                  		move.b	$24(a0),d0
0000A590 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A594 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A598                            ; ===========================================================================
0000A598 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A59A 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A59C 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A59E 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A5A0 0000                       		dc.w Obj26_Display-Obj26_Index
0000A5A2                            ; ===========================================================================
0000A5A2                            
0000A5A2                            Obj26_Main:				; XREF: Obj26_Index
0000A5A2 5428 0024                  		addq.b	#2,$24(a0)
0000A5A6 117C 000E 0016             		move.b	#$E,$16(a0)
0000A5AC 117C 000E 0017             		move.b	#$E,$17(a0)
0000A5B2 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A5BA 317C 0680 0002             		move.w	#$680,2(a0)
0000A5C0 117C 0004 0001             		move.b	#4,1(a0)
0000A5C6 117C 0003 0018             		move.b	#3,$18(a0)
0000A5CC 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5D6 7000                       		moveq	#0,d0
0000A5D8 1028 0023                  		move.b	$23(a0),d0
0000A5DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5E2 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5E8 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5EA 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5F0 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5F6 4E75                       		rts	
0000A5F8                            ; ===========================================================================
0000A5F8                            
0000A5F8                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5F8 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5FE 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A604                            
0000A604                            Obj26_Solid:				; XREF: Obj26_Index
0000A604 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A608 6700                       		beq.s	loc_A1EC	; if not, branch
0000A60A 5500                       		subq.b	#2,d0
0000A60C 6600                       		bne.s	Obj26_Fall
0000A60E 7200                       		moveq	#0,d1
0000A610 1228 0019                  		move.b	$19(a0),d1
0000A614 0641 000B                  		addi.w	#$B,d1
0000A618 6100 D3F8                  		bsr.w	ExitPlatform
0000A61C 0829 0003 0022             		btst	#3,$22(a1)
0000A622 6600 0000                  		bne.w	loc_A1BC
0000A626 4228 0025                  		clr.b	$25(a0)
0000A62A 6000 0000                  		bra.w	Obj26_Animate
0000A62E                            ; ===========================================================================
0000A62E                            
0000A62E                            loc_A1BC:				; XREF: Obj26_Solid
0000A62E 363C 0010                  		move.w	#$10,d3
0000A632 3428 0008                  		move.w	8(a0),d2
0000A636 6100 D938                  		bsr.w	MvSonicOnPtfm
0000A63A 6000 0000                  		bra.w	Obj26_Animate
0000A63E                            ; ===========================================================================
0000A63E                            
0000A63E                            Obj26_Fall:				; XREF: Obj26_Solid
0000A63E 6100 0000                  		bsr.w	ObjectFall
0000A642 4EB9 0000 0000             		jsr	ObjHitFloor
0000A648 4A41                       		tst.w	d1
0000A64A 6A00 0000                  		bpl.w	Obj26_Animate
0000A64E D368 000C                  		add.w	d1,$C(a0)
0000A652 4268 0012                  		clr.w	$12(a0)
0000A656 4228 0025                  		clr.b	$25(a0)
0000A65A 6000 0000                  		bra.w	Obj26_Animate
0000A65E                            ; ===========================================================================
0000A65E                            
0000A65E                            loc_A1EC:				; XREF: Obj26_Solid
0000A65E 323C 001A                  		move.w	#$1A,d1
0000A662 343C 000F                  		move.w	#$F,d2
0000A666 6100 0000                  		bsr.w	Obj26_SolidSides
0000A66A 6700 0000                  		beq.w	loc_A25C
0000A66E 4A69 0012                  		tst.w	$12(a1)
0000A672 6B00                       		bmi.s	loc_A20A
0000A674 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A67A 6700                       		beq.s	loc_A25C	; if yes, branch
0000A67C                            
0000A67C                            loc_A20A:
0000A67C 4A41                       		tst.w	d1
0000A67E 6A00                       		bpl.s	loc_A220
0000A680 9769 000C                  		sub.w	d3,$C(a1)
0000A684 6100 D27A                  		bsr.w	loc_74AE
0000A688 117C 0002 0025             		move.b	#2,$25(a0)
0000A68E 6000 0000                  		bra.w	Obj26_Animate
0000A692                            ; ===========================================================================
0000A692                            
0000A692                            loc_A220:
0000A692 4A40                       		tst.w	d0
0000A694 6700 0000                  		beq.w	loc_A246
0000A698 6B00                       		bmi.s	loc_A230
0000A69A 4A69 0010                  		tst.w	$10(a1)
0000A69E 6B00                       		bmi.s	loc_A246
0000A6A0 6000                       		bra.s	loc_A236
0000A6A2                            ; ===========================================================================
0000A6A2                            
0000A6A2                            loc_A230:
0000A6A2 4A69 0010                  		tst.w	$10(a1)
0000A6A6 6A00                       		bpl.s	loc_A246
0000A6A8                            
0000A6A8                            loc_A236:
0000A6A8 9169 0008                  		sub.w	d0,8(a1)
0000A6AC 337C 0000 0014             		move.w	#0,$14(a1)
0000A6B2 337C 0000 0010             		move.w	#0,$10(a1)
0000A6B8                            
0000A6B8                            loc_A246:
0000A6B8 0829 0001 0022             		btst	#1,$22(a1)
0000A6BE 6600                       		bne.s	loc_A26A
0000A6C0 08E9 0005 0022             		bset	#5,$22(a1)
0000A6C6 08E8 0005 0022             		bset	#5,$22(a0)
0000A6CC 6000                       		bra.s	Obj26_Animate
0000A6CE                            ; ===========================================================================
0000A6CE                            
0000A6CE                            loc_A25C:
0000A6CE 0828 0005 0022             		btst	#5,$22(a0)
0000A6D4 6700                       		beq.s	Obj26_Animate
0000A6D6 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6DC                            
0000A6DC                            loc_A26A:
0000A6DC 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6E2 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6E8                            
0000A6E8                            Obj26_Animate:				; XREF: Obj26_Index
0000A6E8 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6EE 6100 0000                  		bsr.w	AnimateSprite
0000A6F2                            
0000A6F2                            Obj26_Display:				; XREF: Obj26_Index
0000A6F2 6100 0000                  		bsr.w	DisplaySprite
0000A6F6 3028 0008                  		move.w	8(a0),d0
0000A6FA 0240 FF80                  		andi.w	#$FF80,d0
0000A6FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A702 0441 0080                  		subi.w	#$80,d1
0000A706 0241 FF80                  		andi.w	#$FF80,d1
0000A70A 9041                       		sub.w	d1,d0
0000A70C 0C40 0280                  		cmpi.w	#$280,d0
0000A710 6200 0000                  		bhi.w	DeleteObject
0000A714 4E75                       		rts	
0000A716                            ; ===========================================================================
0000A716                            
0000A716                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A716 5428 0024                  		addq.b	#2,$24(a0)
0000A71A 117C 0000 0020             		move.b	#0,$20(a0)
0000A720 6100 0000                  		bsr.w	SingleObjLoad
0000A724 6600                       		bne.s	Obj26_Explode
0000A726 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A72A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A730 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A736 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A73C 7400                       		moveq	#0,d2	; GMZ
0000A73E 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A740                            
0000A740                            Obj26_Explode:
0000A740 6100 0000                  		bsr.w	SingleObjLoad
0000A744                            		; bne.s	Obj26_SetBroken
0000A744 6600                       		bne.s	Obj26_NextExplosion	; GMZ
0000A746 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A74A 5429 0024                  		addq.b	#2,$24(a1)
0000A74E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A752 3368 0008 0008             		move.w	8(a0),8(a1)
0000A758 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A75E                            
0000A75E                            Obj26_NextExplosion:
0000A75E 5802                       		addq.b	#4,d2
0000A760 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A764                            
0000A764                            Obj26_SetBroken:
0000A764 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A768 7000                       		moveq	#0,d0
0000A76A 1028 0023                  		move.b	$23(a0),d0
0000A76E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A774 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A77A 6000 0000                  		bra.w	DisplaySprite
0000A77E                            ; ===========================================================================
0000A77E                            ; ---------------------------------------------------------------------------
0000A77E                            ; Object 2E - contents of monitors
0000A77E                            ; ---------------------------------------------------------------------------
0000A77E                            
0000A77E                            Obj2E:					; XREF: Obj_Index
0000A77E 7000                       		moveq	#0,d0
0000A780 1028 0024                  		move.b	$24(a0),d0
0000A784 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A788 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A78C 6000 0000                  		bra.w	DisplaySprite
0000A790                            ; ===========================================================================
0000A790 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A792 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A794 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A796                            ; ===========================================================================
0000A796                            
0000A796                            Obj2E_Main:				; XREF: Obj2E_Index
0000A796 5428 0024                  		addq.b	#2,$24(a0)
0000A79A 317C 0680 0002             		move.w	#$680,2(a0)
0000A7A0 117C 0024 0001             		move.b	#$24,1(a0)
0000A7A6 117C 0003 0018             		move.b	#3,$18(a0)
0000A7AC 117C 0008 0019             		move.b	#8,$19(a0)
0000A7B2 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A7B8 7000                       		moveq	#0,d0
0000A7BA 1028 001C                  		move.b	$1C(a0),d0
0000A7BE 5400                       		addq.b	#2,d0
0000A7C0 1140 001A                  		move.b	d0,$1A(a0)
0000A7C4 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7CA D000                       		add.b	d0,d0
0000A7CC D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7D0 5249                       		addq.w	#1,a1
0000A7D2 2149 0004                  		move.l	a1,4(a0)
0000A7D6                            
0000A7D6                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7D6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7DA 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7DE 6100 0000                  		bsr.w	SpeedToPos
0000A7E2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7E8 4E75                       		rts	
0000A7EA                            ; ===========================================================================
0000A7EA                            
0000A7EA                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7EA 5428 0024                  		addq.b	#2,$24(a0)
0000A7EE 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7F4 1028 001C                  		move.b	$1C(a0),d0
0000A7F8 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7FC 6600                       		bne.s	Obj2E_ChkSonic
0000A7FE 4E75                       		rts			; Eggman monitor does nothing
0000A800                            ; ===========================================================================
0000A800                            
0000A800                            Obj2E_ChkSonic:
0000A800 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A804 6600                       		bne.s	Obj2E_ChkShoes
0000A806                            
0000A806                            ExtraLife:
0000A806 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A80A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A80E 303C 0088                  		move.w	#$88,d0
0000A812 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A818                            ; ===========================================================================
0000A818                            
0000A818                            Obj2E_ChkShoes:
0000A818 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A81C 6600                       		bne.s	Obj2E_ChkShield
0000A81E 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A824 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A82A 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A830 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A836 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A83C 303C 00E2                  		move.w	#$E2,d0
0000A840 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A846                            ; ===========================================================================
0000A846                            
0000A846                            Obj2E_ChkShield:
0000A846 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A84A 6600                       		bne.s	Obj2E_ChkInvinc
0000A84C 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A852 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A858 303C 00AF                  		move.w	#$AF,d0
0000A85C 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A862                            ; ===========================================================================
0000A862                            
0000A862                            Obj2E_ChkInvinc:
0000A862 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A866 6600                       		bne.s	Obj2E_ChkRings
0000A868 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A86E 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A874 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A87A 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A880 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A886 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A88C 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A892 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A898 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A89E 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A8A4 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A8A8 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A8AA 303C 0087                  		move.w	#$87,d0
0000A8AE 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A8B4                            ; ===========================================================================
0000A8B4                            
0000A8B4                            Obj2E_NoMusic:
0000A8B4 4E75                       		rts	
0000A8B6                            ; ===========================================================================
0000A8B6                            
0000A8B6                            Obj2E_ChkRings:
0000A8B6 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A8BA 6600                       		bne.s	Obj2E_ChkS
0000A8BC 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A8C2 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8C8 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8CE 6500                       		bcs.s	Obj2E_RingSound
0000A8D0 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8D6 6700 FF2E                  		beq.w	ExtraLife
0000A8DA 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8E0 6500                       		bcs.s	Obj2E_RingSound
0000A8E2 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8E8 6700 FF1C                  		beq.w	ExtraLife
0000A8EC                            
0000A8EC                            Obj2E_RingSound:
0000A8EC 303C 00B5                  		move.w	#$B5,d0
0000A8F0 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8F6                            ; ===========================================================================
0000A8F6                            
0000A8F6                            Obj2E_ChkS:
0000A8F6 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8FA 6600                       		bne.s	Obj2E_ChkEnd
0000A8FC                            		; nop	
0000A8FC 7201                       		moveq	#1,d1
0000A8FE B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A902                            
0000A902                            Obj2E_ChkEnd:
0000A902 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A904                            ; ===========================================================================
0000A904                            
0000A904                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A904 5368 001E                  		subq.w	#1,$1E(a0)
0000A908 6B00 0000                  		bmi.w	DeleteObject
0000A90C 4E75                       		rts	
0000A90E                            ; ---------------------------------------------------------------------------
0000A90E                            ; Subroutine to	make the sides of a monitor solid
0000A90E                            ; ---------------------------------------------------------------------------
0000A90E                            
0000A90E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A90E                            
0000A90E                            
0000A90E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A90E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A912 3029 0008                  		move.w	8(a1),d0
0000A916 9068 0008                  		sub.w	8(a0),d0
0000A91A D041                       		add.w	d1,d0
0000A91C 6B00                       		bmi.s	loc_A4E6
0000A91E 3601                       		move.w	d1,d3
0000A920 D643                       		add.w	d3,d3
0000A922 B043                       		cmp.w	d3,d0
0000A924 6200                       		bhi.s	loc_A4E6
0000A926 1629 0016                  		move.b	$16(a1),d3
0000A92A 4883                       		ext.w	d3
0000A92C D443                       		add.w	d3,d2
0000A92E 3629 000C                  		move.w	$C(a1),d3
0000A932 9668 000C                  		sub.w	$C(a0),d3
0000A936 D642                       		add.w	d2,d3
0000A938 6B00                       		bmi.s	loc_A4E6
0000A93A D442                       		add.w	d2,d2
0000A93C B642                       		cmp.w	d2,d3
0000A93E 6400                       		bcc.s	loc_A4E6
0000A940 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A944 6B00                       		bmi.s	loc_A4E6
0000A946 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A94C 6400                       		bcc.s	loc_A4E6
0000A94E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A952 6600                       		bne.s	loc_A4E6
0000A954 B240                       		cmp.w	d0,d1
0000A956 6400                       		bcc.s	loc_A4DC
0000A958 D241                       		add.w	d1,d1
0000A95A 9041                       		sub.w	d1,d0
0000A95C                            
0000A95C                            loc_A4DC:
0000A95C 0C43 0010                  		cmpi.w	#$10,d3
0000A960 6500                       		bcs.s	loc_A4EA
0000A962                            
0000A962                            loc_A4E2:
0000A962 7201                       		moveq	#1,d1
0000A964 4E75                       		rts	
0000A966                            ; ===========================================================================
0000A966                            
0000A966                            loc_A4E6:
0000A966 7200                       		moveq	#0,d1
0000A968 4E75                       		rts	
0000A96A                            ; ===========================================================================
0000A96A                            
0000A96A                            loc_A4EA:
0000A96A 7200                       		moveq	#0,d1
0000A96C 1228 0019                  		move.b	$19(a0),d1
0000A970 5841                       		addq.w	#4,d1
0000A972 3401                       		move.w	d1,d2
0000A974 D442                       		add.w	d2,d2
0000A976 D269 0008                  		add.w	8(a1),d1
0000A97A 9268 0008                  		sub.w	8(a0),d1
0000A97E 6BE2                       		bmi.s	loc_A4E2
0000A980 B242                       		cmp.w	d2,d1
0000A982 64DE                       		bcc.s	loc_A4E2
0000A984 72FF                       		moveq	#-1,d1
0000A986 4E75                       		rts	
0000A988                            ; End of function Obj26_SolidSides
0000A988                            
0000A988                            ; ===========================================================================
0000A988                            Ani_obj26:
0000A988                            	include "_anim\obj26.asm"
0000A988                            ; ---------------------------------------------------------------------------
0000A988                            ; Animation script - monitors
0000A988                            ; ---------------------------------------------------------------------------
0000A988 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A98E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A994 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A99A 0000                       		dc.w byte_A582-Ani_obj26
0000A99C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A9A2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A9AE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A9BA 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9C6 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9D2 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9DE 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9EA 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9F6 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AA02 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AA0A                            		even
0000AA0A                            		even
0000AA0A                            
0000AA0A                            ; ---------------------------------------------------------------------------
0000AA0A                            ; Sprite mappings - monitors
0000AA0A                            ; ---------------------------------------------------------------------------
0000AA0A                            Map_obj26:
0000AA0A                            	include "_maps\obj26.asm"
0000AA0A                            ; ================================================================================
0000AA0A                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AA0A                            ; ================================================================================
0000AA0A                            
0000AA0A                            DATAY1U343IF3L:
0000AA0A 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AA0E 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AA12 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AA16 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AA1A 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA1E 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA22 05                         DATAY1U343IF3L_0: dc.b $5
0000AA23 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA28 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA2D E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA32 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA37 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA3C 06                         DATAY1U343IF3L_1: dc.b $6
0000AA3D F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA42 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA47 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA4C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA51 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA56 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA5B 05                         DATAY1U343IF3L_2: dc.b $5
0000AA5C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA61 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA66 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA6B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA70 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA75 05                         DATAY1U343IF3L_3: dc.b $5
0000AA76 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA7B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA80 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA85 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA8A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA8F 06                         DATAY1U343IF3L_4: dc.b $6
0000AA90 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA95 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA9A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA9F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAA4 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAA9 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAAE 06                         DATAY1U343IF3L_5: dc.b $6
0000AAAF F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AAB4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AABE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAC3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AACD 06                         DATAY1U343IF3L_6: dc.b $6
0000AACE F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAD3 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD8 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AADD E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE2 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE7 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAEC 06                         DATAY1U343IF3L_7: dc.b $6
0000AAED F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AAF2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAFC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB01 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB06 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB0B 06                         DATAY1U343IF3L_8: dc.b $6
0000AB0C F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AB11 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB16 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB1B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB20 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB25 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB2A 06                         DATAY1U343IF3L_9: dc.b $6
0000AB2B F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB30 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB35 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB3A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB3F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB44 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB49 05                         DATAY1U343IF3L_A: dc.b $5
0000AB4A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB4F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB54 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB59 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB5E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB63 01                         DATAY1U343IF3L_B: dc.b $1
0000AB64 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB6A 00                         	even
0000AB6A 00                         	even
0000AB6A                            
0000AB6A                            ; ===========================================================================
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            ; Object 0E - Sonic on the title screen
0000AB6A                            ; ---------------------------------------------------------------------------
0000AB6A                            
0000AB6A                            Obj0E:					; XREF: Obj_Index
0000AB6A 7000                       		moveq	#0,d0
0000AB6C 1028 0024                  		move.b	$24(a0),d0
0000AB70 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB74 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB78                            ; ===========================================================================
0000AB78 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB7A 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB7C 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB7E 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB80                            ; ===========================================================================
0000AB80                            
0000AB80                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB80 5428 0024                  		addq.b	#2,$24(a0)
0000AB84 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB8A 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB90 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB98 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB9E 117C 0001 0018             		move.b	#1,$18(a0)
0000ABA4 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ABAA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABB0 6100 0000                  		bsr.w	AnimateSprite
0000ABB4                            
0000ABB4                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ABB4 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ABB8 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ABBA 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ABBE 6000 0000                  		bra.w	DisplaySprite
0000ABC2                            ; ===========================================================================
0000ABC2                            
0000ABC2                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ABC2 4E75                       		rts	
0000ABC4                            ; ===========================================================================
0000ABC4                            
0000ABC4                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABC4 5168 000A                  		subq.w	#8,$A(a0)
0000ABC8 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABCE 6600                       		bne.s	Obj0E_Display
0000ABD0 5428 0024                  		addq.b	#2,$24(a0)
0000ABD4                            
0000ABD4                            Obj0E_Display:
0000ABD4 6000 0000                  		bra.w	DisplaySprite
0000ABD8                            ; ===========================================================================
0000ABD8 4E75                       		rts	
0000ABDA                            ; ===========================================================================
0000ABDA                            
0000ABDA                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABDA 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABE0 6100 0000                  		bsr.w	AnimateSprite
0000ABE4 6000 0000                  		bra.w	DisplaySprite
0000ABE8                            ; ===========================================================================
0000ABE8 4E75                       		rts	
0000ABEA                            ; ===========================================================================
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            
0000ABEA                            Obj0F:					; XREF: Obj_Index
0000ABEA 7000                       		moveq	#0,d0
0000ABEC 1028 0024                  		move.b	$24(a0),d0
0000ABF0 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABF4 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABF8 6000 0000                  		bra.w	DisplaySprite
0000ABFC                            ; ===========================================================================
0000ABFC 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABFE 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AC00 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AC02                            ; ===========================================================================
0000AC02                            
0000AC02                            Obj0F_Main:				; XREF: Obj0F_Index
0000AC02 5428 0024                  		addq.b	#2,$24(a0)
0000AC06 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AC0C 317C 0130 000A             		move.w	#$130,$A(a0)
0000AC12 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AC1A 317C 0200 0002             		move.w	#$200,2(a0)
0000AC20 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC26 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC28 5428 0024                  		addq.b	#2,$24(a0)
0000AC2C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC32 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC34 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC3A 317C 0170 0008             		move.w	#$170,8(a0)
0000AC40 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC46                            
0000AC46                            locret_A6F8:				; XREF: Obj0F_Index
0000AC46 4E75                       		rts	
0000AC48                            ; ===========================================================================
0000AC48                            
0000AC48                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC48 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC4E 6000 0000                  		bra.w	AnimateSprite
0000AC52                            ; ===========================================================================
0000AC52                            Ani_obj0E:
0000AC52                            	include "_anim\obj0E.asm"
0000AC52                            ; ---------------------------------------------------------------------------
0000AC52                            ; Animation script - Sonic on the title screen
0000AC52                            ; ---------------------------------------------------------------------------
0000AC52 0000                       		dc.w byte_A706-Ani_obj0E
0000AC54 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC60                            		even
0000AC60                            		even
0000AC60                            
0000AC60                            Ani_obj0F:
0000AC60                            	include "_anim\obj0F.asm"
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC60                            ; ---------------------------------------------------------------------------
0000AC60 0000                       		dc.w byte_A714-Ani_obj0F
0000AC62 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC66                            		even
0000AC66                            		even
0000AC66                            
0000AC66                            ; ---------------------------------------------------------------------------
0000AC66                            ; Subroutine to	animate	a sprite using an animation script
0000AC66                            ; ---------------------------------------------------------------------------
0000AC66                            
0000AC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC66                            
0000AC66                            
0000AC66                            AnimateSprite:
0000AC66 7000                       		moveq	#0,d0
0000AC68 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC6C B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC70 6700                       		beq.s	Anim_Run	; if not, branch
0000AC72 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC76 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC7C 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC82                            
0000AC82                            Anim_Run:
0000AC82 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC86 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC88 D040                       		add.w	d0,d0
0000AC8A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC8E 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC92 7200                       		moveq	#0,d1
0000AC94 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC98 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC9C 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC9E                            
0000AC9E                            Anim_Next:
0000AC9E 1200                       		move.b	d0,d1
0000ACA0 0200 001F                  		andi.b	#$1F,d0
0000ACA4 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000ACA8 1028 0022                  		move.b	$22(a0),d0
0000ACAC E719                       		rol.b	#3,d1
0000ACAE B101                       		eor.b	d0,d1
0000ACB0 0201 0003                  		andi.b	#3,d1
0000ACB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000ACBA 8328 0001                  		or.b	d1,1(a0)
0000ACBE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000ACC2                            
0000ACC2                            Anim_Wait:
0000ACC2 4E75                       		rts	
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            Anim_End_FF:
0000ACC4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACC6 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACC8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACCE 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACD2 60CA                       		bra.s	Anim_Next
0000ACD4                            ; ===========================================================================
0000ACD4                            
0000ACD4                            Anim_End_FE:
0000ACD4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACD6 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACD8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACDC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACE0 9200                       		sub.b	d0,d1
0000ACE2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACE6 60B6                       		bra.s	Anim_Next
0000ACE8                            ; ===========================================================================
0000ACE8                            
0000ACE8                            Anim_End_FD:
0000ACE8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACEA 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACEC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACF2                            
0000ACF2                            Anim_End_FC:
0000ACF2 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACF4 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACF6 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACFA                            
0000ACFA                            Anim_End_FB:
0000ACFA 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACFC 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACFE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD04 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AD08                            
0000AD08                            Anim_End_FA:
0000AD08 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AD0A 6600                       		bne.s	Anim_End	; if not, branch
0000AD0C 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AD10                            
0000AD10                            Anim_End:
0000AD10 4E75                       		rts	
0000AD12                            ; End of function AnimateSprite
0000AD12                            
0000AD12                            ; ===========================================================================
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12                            Map_obj0F:
0000AD12                            	include "_maps\obj0F.asm"
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD12                            ; ---------------------------------------------------------------------------
0000AD12 0000                       		dc.w byte_A7CD-Map_obj0F
0000AD14 0000                       		dc.w byte_A7CC-Map_obj0F
0000AD16 0000                       		dc.w byte_A7EB-Map_obj0F
0000AD18 0000                       		dc.w byte_A882-Map_obj0F
0000AD1A 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AD1B 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD20 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD25 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD2A 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD2F 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD34 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD39 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD3A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD44 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD49 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD4E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD53 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD58 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD5D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD62 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD67 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD6C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD71 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD76 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD80 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD85 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD8A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD8F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD94 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD99 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD9E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADB2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADB7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADBC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADC1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADC6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADCB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADD0 01                         byte_A882:	dc.b 1			; "TM"
0000ADD1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADD6                            		even
0000ADD6                            		even
0000ADD6                            
0000ADD6                            ; ---------------------------------------------------------------------------
0000ADD6                            ; Sprite mappings - Sonic on the title screen
0000ADD6                            ; ---------------------------------------------------------------------------
0000ADD6                            Map_obj0E:
0000ADD6                            	include "_maps\obj0E.asm"
0000ADD6                            ; ================================================================================
0000ADD6                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 15:54:10 GMT-0500 (Central Daylight Time)
0000ADD6                            ; ================================================================================
0000ADD6                            
0000ADD6                            DATANHL9WDDYR1:
0000ADD6 0000 0000                  	dc.w DATANHL9WDDYR1_0-DATANHL9WDDYR1, DATANHL9WDDYR1_1-DATANHL9WDDYR1
0000ADDA 0000 0000                  	dc.w DATANHL9WDDYR1_2-DATANHL9WDDYR1, DATANHL9WDDYR1_3-DATANHL9WDDYR1
0000ADDE 0000 0000                  	dc.w DATANHL9WDDYR1_4-DATANHL9WDDYR1, DATANHL9WDDYR1_5-DATANHL9WDDYR1
0000ADE2 0000 0000                  	dc.w DATANHL9WDDYR1_6-DATANHL9WDDYR1, DATANHL9WDDYR1_7-DATANHL9WDDYR1
0000ADE6 0A                         DATANHL9WDDYR1_0: dc.b $A
0000ADE7 0808 0000 08               	dc.b $8, $8, $0, $0, $8
0000ADEC 100F 0003 08               	dc.b $10, $F, $0, $3, $8
0000ADF1 100F 0013 28               	dc.b $10, $F, $0, $13, $28
0000ADF6 300E 0023 08               	dc.b $30, $E, $0, $23, $8
0000ADFB 300E 002F 28               	dc.b $30, $E, $0, $2F, $28
0000AE00 480D 003B 00               	dc.b $48, $D, $0, $3B, $0
0000AE05 4809 0043 20               	dc.b $48, $9, $0, $43, $20
0000AE0A 4800 0049 38               	dc.b $48, $0, $0, $49, $38
0000AE0F 580C 004A 08               	dc.b $58, $C, $0, $4A, $8
0000AE14 5800 004E 28               	dc.b $58, $0, $0, $4E, $28
0000AE19 0F                         DATANHL9WDDYR1_1: dc.b $F
0000AE1A 480E 01BD 20               	dc.b $48, $E, $1, $BD, $20
0000AE1F 3805 01C9 38               	dc.b $38, $5, $1, $C9, $38
0000AE24 4000 01CD 30               	dc.b $40, $0, $1, $CD, $30
0000AE29 4800 01CE 40               	dc.b $48, $0, $1, $CE, $40
0000AE2E 6000 01CF 20               	dc.b $60, $0, $1, $CF, $20
0000AE33 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000AE38 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000AE3D 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AE42 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AE47 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AE4C 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AE51 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AE56 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AE5B 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AE60 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AE65 11                         DATANHL9WDDYR1_2: dc.b $11
0000AE66 380E 01BD 28               	dc.b $38, $E, $1, $BD, $28
0000AE6B 2805 01C9 40               	dc.b $28, $5, $1, $C9, $40
0000AE70 3000 01CD 38               	dc.b $30, $0, $1, $CD, $38
0000AE75 3800 01CE 48               	dc.b $38, $0, $1, $CE, $48
0000AE7A 5000 01CF 28               	dc.b $50, $0, $1, $CF, $28
0000AE7F 200F 01A9 08               	dc.b $20, $F, $1, $A9, $8
0000AE84 2003 01B9 28               	dc.b $20, $3, $1, $B9, $28
0000AE89 100E 004F 08               	dc.b $10, $E, $0, $4F, $8
0000AE8E 100E 005B 28               	dc.b $10, $E, $0, $5B, $28
0000AE93 1801 0067 48               	dc.b $18, $1, $0, $67, $48
0000AE98 2802 0069 00               	dc.b $28, $2, $0, $69, $0
0000AE9D 280F 006C 08               	dc.b $28, $F, $0, $6C, $8
0000AEA2 280F 007C 28               	dc.b $28, $F, $0, $7C, $28
0000AEA7 3002 008C 48               	dc.b $30, $2, $0, $8C, $48
0000AEAC 480E 008F 10               	dc.b $48, $E, $0, $8F, $10
0000AEB1 4809 009B 30               	dc.b $48, $9, $0, $9B, $30
0000AEB6 5804 00A1 30               	dc.b $58, $4, $0, $A1, $30
0000AEBB 0D                         DATANHL9WDDYR1_3: dc.b $D
0000AEBC 100F 00A3 08               	dc.b $10, $F, $0, $A3, $8
0000AEC1 0808 00B3 28               	dc.b $8, $8, $0, $B3, $28
0000AEC6 100F 00B6 28               	dc.b $10, $F, $0, $B6, $28
0000AECB 1800 00C6 48               	dc.b $18, $0, $0, $C6, $48
0000AED0 2006 00C7 48               	dc.b $20, $6, $0, $C7, $48
0000AED5 3800 00CD 48               	dc.b $38, $0, $0, $CD, $48
0000AEDA 300D 00CE 08               	dc.b $30, $D, $0, $CE, $8
0000AEDF 300E 00D6 28               	dc.b $30, $E, $0, $D6, $28
0000AEE4 400B 00E2 10               	dc.b $40, $B, $0, $E2, $10
0000AEE9 4808 00EE 28               	dc.b $48, $8, $0, $EE, $28
0000AEEE 5001 00F1 08               	dc.b $50, $1, $0, $F1, $8
0000AEF3 5004 00F3 28               	dc.b $50, $4, $0, $F3, $28
0000AEF8 5800 00F5 28               	dc.b $58, $0, $0, $F5, $28
0000AEFD 0B                         DATANHL9WDDYR1_4: dc.b $B
0000AEFE 080F 00F6 10               	dc.b $8, $F, $0, $F6, $10
0000AF03 080B 0106 30               	dc.b $8, $B, $1, $6, $30
0000AF08 1006 0112 48               	dc.b $10, $6, $1, $12, $48
0000AF0D 280E 0118 18               	dc.b $28, $E, $1, $18, $18
0000AF12 280E 0124 38               	dc.b $28, $E, $1, $24, $38
0000AF17 2801 0130 10               	dc.b $28, $1, $1, $30, $10
0000AF1C 400E 0132 10               	dc.b $40, $E, $1, $32, $10
0000AF21 4006 013E 30               	dc.b $40, $6, $1, $3E, $30
0000AF26 4004 0144 40               	dc.b $40, $4, $1, $44, $40
0000AF2B 4800 0146 40               	dc.b $48, $0, $1, $46, $40
0000AF30 5808 0147 18               	dc.b $58, $8, $1, $47, $18
0000AF35 13                         DATANHL9WDDYR1_5: dc.b $13
0000AF36 280E 01E4 38               	dc.b $28, $E, $1, $E4, $38
0000AF3B 1805 01F0 48               	dc.b $18, $5, $1, $F0, $48
0000AF40 4008 01F4 38               	dc.b $40, $8, $1, $F4, $38
0000AF45 4804 01F7 38               	dc.b $48, $4, $1, $F7, $38
0000AF4A 100F 014A 10               	dc.b $10, $F, $1, $4A, $10
0000AF4F 0804 015A 20               	dc.b $8, $4, $1, $5A, $20
0000AF54 000B 015C 30               	dc.b $0, $B, $1, $5C, $30
0000AF59 0800 0168 48               	dc.b $8, $0, $1, $68, $48
0000AF5E 1800 0169 48               	dc.b $18, $0, $1, $69, $48
0000AF63 1805 016A 00               	dc.b $18, $5, $1, $6A, $0
0000AF68 2802 016E 08               	dc.b $28, $2, $1, $6E, $8
0000AF6D 300F 0171 10               	dc.b $30, $F, $1, $71, $10
0000AF72 200D 0181 30               	dc.b $20, $D, $1, $81, $30
0000AF77 2001 0189 50               	dc.b $20, $1, $1, $89, $50
0000AF7C 3008 018B 30               	dc.b $30, $8, $1, $8B, $30
0000AF81 380E 018E 30               	dc.b $38, $E, $1, $8E, $30
0000AF86 500D 019A 08               	dc.b $50, $D, $1, $9A, $8
0000AF8B 500C 01A2 28               	dc.b $50, $C, $1, $A2, $28
0000AF90 5808 01A6 28               	dc.b $58, $8, $1, $A6, $28
0000AF95 0F                         DATANHL9WDDYR1_6: dc.b $F
0000AF96 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AF9B 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AFA0 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AFA5 EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AFAA 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AFAF 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000AFB4 EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000AFB9 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000AFBE 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000AFC3 EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000AFC8 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000AFCD 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000AFD2 EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000AFD7 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000AFDC 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000AFE1 0F                         DATANHL9WDDYR1_7: dc.b $F
0000AFE2 EC0F 020D E2               	dc.b $EC, $F, $2, $D, $E2
0000AFE7 0C0F 021D E2               	dc.b $C, $F, $2, $1D, $E2
0000AFEC 2C0F 022D E2               	dc.b $2C, $F, $2, $2D, $E2
0000AFF1 EC0F 023D 02               	dc.b $EC, $F, $2, $3D, $2
0000AFF6 0C0F 024D 02               	dc.b $C, $F, $2, $4D, $2
0000AFFB 2C0F 025D 02               	dc.b $2C, $F, $2, $5D, $2
0000B000 EC0F 026D 22               	dc.b $EC, $F, $2, $6D, $22
0000B005 0C0F 027D 22               	dc.b $C, $F, $2, $7D, $22
0000B00A 2C0F 028D 22               	dc.b $2C, $F, $2, $8D, $22
0000B00F EC0F 029D 42               	dc.b $EC, $F, $2, $9D, $42
0000B014 0C0F 02AD 42               	dc.b $C, $F, $2, $AD, $42
0000B019 2C0F 02BD 42               	dc.b $2C, $F, $2, $BD, $42
0000B01E EC07 02CD 62               	dc.b $EC, $7, $2, $CD, $62
0000B023 0C07 02D5 62               	dc.b $C, $7, $2, $D5, $62
0000B028 2C07 02DD 62               	dc.b $2C, $7, $2, $DD, $62
0000B02E 00                         	even
0000B02E 00                         	even
0000B02E                            
0000B02E                            ; ===========================================================================
0000B02E                            ; ---------------------------------------------------------------------------
0000B02E                            ; Object 2B - Chopper enemy (GHZ)
0000B02E                            ; ---------------------------------------------------------------------------
0000B02E                            
0000B02E                            Obj2B:					; XREF: Obj_Index
0000B02E 7000                       		moveq	#0,d0
0000B030 1028 0024                  		move.b	$24(a0),d0
0000B034 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B038 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B03C 6000 0000                  		bra.w	MarkObjGone
0000B040                            ; ===========================================================================
0000B040 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B042 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B044                            ; ===========================================================================
0000B044                            
0000B044                            Obj2B_Main:				; XREF: Obj2B_Index
0000B044 5428 0024                  		addq.b	#2,$24(a0)
0000B048 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B050 317C 047B 0002             		move.w	#$47B,2(a0)
0000B056 117C 0004 0001             		move.b	#4,1(a0)
0000B05C 117C 0004 0018             		move.b	#4,$18(a0)
0000B062 117C 0009 0020             		move.b	#9,$20(a0)
0000B068 117C 0010 0019             		move.b	#$10,$19(a0)
0000B06E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B074 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B07A                            
0000B07A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B07A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B080 6100 FBE4                  		bsr.w	AnimateSprite
0000B084 6100 0000                  		bsr.w	SpeedToPos
0000B088 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B08E 3028 0030                  		move.w	$30(a0),d0
0000B092 B068 000C                  		cmp.w	$C(a0),d0
0000B096 6400                       		bcc.s	Obj2B_ChgAni
0000B098 3140 000C                  		move.w	d0,$C(a0)
0000B09C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B0A2                            
0000B0A2                            Obj2B_ChgAni:
0000B0A2 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B0A8 0440 00C0                  		subi.w	#$C0,d0
0000B0AC B068 000C                  		cmp.w	$C(a0),d0
0000B0B0 6400                       		bcc.s	locret_ABB6
0000B0B2 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B0B8 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B0BC 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B0BE 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B0C4                            
0000B0C4                            locret_ABB6:
0000B0C4 4E75                       		rts	
0000B0C6                            ; ===========================================================================
0000B0C6                            Ani_obj2B:
0000B0C6                            	include "_anim\obj2B.asm"
0000B0C6                            ; ---------------------------------------------------------------------------
0000B0C6                            ; Animation script - Chopper enemy
0000B0C6                            ; ---------------------------------------------------------------------------
0000B0C6 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B0C8 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B0CA 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B0CC 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B0D0 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B0D4 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B0D8 00                         		even
0000B0D8 00                         		even
0000B0D8                            
0000B0D8                            ; ---------------------------------------------------------------------------
0000B0D8                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0D8                            ; ---------------------------------------------------------------------------
0000B0D8                            Map_obj2B:
0000B0D8                            	include "_maps\obj2B.asm"
0000B0D8                            ; ---------------------------------------------------------------------------
0000B0D8                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0D8                            ; ---------------------------------------------------------------------------
0000B0D8 0000                       		dc.w byte_ABCE-Map_obj2B
0000B0DA 0000                       		dc.w byte_ABD4-Map_obj2B
0000B0DC 01                         byte_ABCE:	dc.b 1
0000B0DD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B0E2 01                         byte_ABD4:	dc.b 1
0000B0E3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0E8                            		even
0000B0E8                            		even
0000B0E8                            
0000B0E8                            ; ===========================================================================
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            ; Object 2C - Jaws enemy (LZ)
0000B0E8                            ; ---------------------------------------------------------------------------
0000B0E8                            
0000B0E8                            Obj2C:					; XREF: Obj_Index
0000B0E8 7000                       		moveq	#0,d0
0000B0EA 1028 0024                  		move.b	$24(a0),d0
0000B0EE 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0F2 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0F6                            ; ===========================================================================
0000B0F6 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B0F8 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B0FA                            ; ===========================================================================
0000B0FA                            
0000B0FA                            Obj2C_Main:				; XREF: Obj2C_Index
0000B0FA 5428 0024                  		addq.b	#2,$24(a0)
0000B0FE 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B106 317C 2486 0002             		move.w	#$2486,2(a0)
0000B10C 0028 0004 0001             		ori.b	#4,1(a0)
0000B112 117C 000A 0020             		move.b	#$A,$20(a0)
0000B118 117C 0004 0018             		move.b	#4,$18(a0)
0000B11E 117C 0010 0019             		move.b	#$10,$19(a0)
0000B124 7000                       		moveq	#0,d0
0000B126 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B12A ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B12C 5340                       		subq.w	#1,d0
0000B12E 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B132 3140 0032                  		move.w	d0,$32(a0)
0000B136 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B13C 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B142 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B144 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B148                            
0000B148                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B148 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B14C 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B14E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B154 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B158 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B15E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B164                            
0000B164                            Obj2C_Animate:
0000B164 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B16A 6100 FAFA                  		bsr.w	AnimateSprite
0000B16E 6100 0000                  		bsr.w	SpeedToPos
0000B172 6000 0000                  		bra.w	MarkObjGone
0000B176                            ; ===========================================================================
0000B176                            Ani_obj2C:
0000B176                            	include "_anim\obj2C.asm"
0000B176                            ; ---------------------------------------------------------------------------
0000B176                            ; Animation script - Jaws enemy
0000B176                            ; ---------------------------------------------------------------------------
0000B176 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B178 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B17E                            		even
0000B17E                            		even
0000B17E                            
0000B17E                            ; ---------------------------------------------------------------------------
0000B17E                            ; Sprite mappings - Jaws enemy (LZ)
0000B17E                            ; ---------------------------------------------------------------------------
0000B17E                            Map_obj2C:
0000B17E                            	include "_maps\obj2C.asm"
0000B17E                            ; ---------------------------------------------------------------------------
0000B17E                            ; Sprite mappings - Jaws enemy (LZ)
0000B17E                            ; ---------------------------------------------------------------------------
0000B17E 0000                       		dc.w byte_AC78-Map_obj2C
0000B180 0000                       		dc.w byte_AC83-Map_obj2C
0000B182 0000                       		dc.w byte_AC8E-Map_obj2C
0000B184 0000                       		dc.w byte_AC99-Map_obj2C
0000B186 02                         byte_AC78:	dc.b 2
0000B187 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B18C F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B191 02                         byte_AC83:	dc.b 2
0000B192 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B197 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B19C 02                         byte_AC8E:	dc.b 2
0000B19D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B1A2 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B1A7 02                         byte_AC99:	dc.b 2
0000B1A8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1AD F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B1B2                            		even
0000B1B2                            		even
0000B1B2                            
0000B1B2                            ; ===========================================================================
0000B1B2                            ; ---------------------------------------------------------------------------
0000B1B2                            ; Object 2D - Burrobot enemy (LZ)
0000B1B2                            ; ---------------------------------------------------------------------------
0000B1B2                            
0000B1B2                            Obj2D:					; XREF: Obj_Index
0000B1B2 7000                       		moveq	#0,d0
0000B1B4 1028 0024                  		move.b	$24(a0),d0
0000B1B8 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B1BC 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B1C0                            ; ===========================================================================
0000B1C0 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B1C2 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B1C4                            ; ===========================================================================
0000B1C4                            
0000B1C4                            Obj2D_Main:				; XREF: Obj2D_Index
0000B1C4 5428 0024                  		addq.b	#2,$24(a0)
0000B1C8 117C 0013 0016             		move.b	#$13,$16(a0)
0000B1CE 117C 0008 0017             		move.b	#8,$17(a0)
0000B1D4 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B1DC 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B1E2 0028 0004 0001             		ori.b	#4,1(a0)
0000B1E8 117C 0004 0018             		move.b	#4,$18(a0)
0000B1EE 117C 0005 0020             		move.b	#5,$20(a0)
0000B1F4 117C 000C 0019             		move.b	#$C,$19(a0)
0000B1FA 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B1FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000B204                            
0000B204                            Obj2D_Action:				; XREF: Obj2D_Index
0000B204 7000                       		moveq	#0,d0
0000B206 1028 0025                  		move.b	$25(a0),d0
0000B20A 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B20E 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B212 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B218 6100 FA4C                  		bsr.w	AnimateSprite
0000B21C 6000 0000                  		bra.w	MarkObjGone
0000B220                            ; ===========================================================================
0000B220 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B222 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B224 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B226 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B228                            ; ===========================================================================
0000B228                            
0000B228                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B228 5368 0030                  		subq.w	#1,$30(a0)
0000B22C 6A00                       		bpl.s	locret_AD42
0000B22E 5428 0025                  		addq.b	#2,$25(a0)
0000B232 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B238 317C 0080 0010             		move.w	#$80,$10(a0)
0000B23E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B244 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B24A 6700                       		beq.s	locret_AD42
0000B24C 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B250                            
0000B250                            locret_AD42:
0000B250 4E75                       		rts	
0000B252                            ; ===========================================================================
0000B252                            
0000B252                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B252 5368 0030                  		subq.w	#1,$30(a0)
0000B256 6B00                       		bmi.s	loc_AD84
0000B258 6100 0000                  		bsr.w	SpeedToPos
0000B25C 0868 0000 0032             		bchg	#0,$32(a0)
0000B262 6600                       		bne.s	loc_AD78
0000B264 3628 0008                  		move.w	8(a0),d3
0000B268 0643 000C                  		addi.w	#$C,d3
0000B26C 0828 0000 0022             		btst	#0,$22(a0)
0000B272 6600                       		bne.s	loc_AD6A
0000B274 0443 0018                  		subi.w	#$18,d3
0000B278                            
0000B278                            loc_AD6A:
0000B278 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B27E 0C41 000C                  		cmpi.w	#$C,d1
0000B282 6C00                       		bge.s	loc_AD84
0000B284 4E75                       		rts	
0000B286                            ; ===========================================================================
0000B286                            
0000B286                            loc_AD78:				; XREF: Obj2D_Move
0000B286 4EB9 0000 0000             		jsr	ObjHitFloor
0000B28C D368 000C                  		add.w	d1,$C(a0)
0000B290 4E75                       		rts	
0000B292                            ; ===========================================================================
0000B292                            
0000B292                            loc_AD84:				; XREF: Obj2D_Move
0000B292 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B298 6700                       		beq.s	loc_ADA4
0000B29A 5528 0025                  		subq.b	#2,$25(a0)
0000B29E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B2A4 317C 0000 0010             		move.w	#0,$10(a0)
0000B2AA 117C 0000 001C             		move.b	#0,$1C(a0)
0000B2B0 4E75                       		rts	
0000B2B2                            ; ===========================================================================
0000B2B2                            
0000B2B2                            loc_ADA4:
0000B2B2 5428 0025                  		addq.b	#2,$25(a0)
0000B2B6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2BC 117C 0002 001C             		move.b	#2,$1C(a0)
0000B2C2 4E75                       		rts	
0000B2C4                            ; ===========================================================================
0000B2C4                            
0000B2C4                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B2C4 6100 0000                  		bsr.w	SpeedToPos
0000B2C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B2CE 6B00                       		bmi.s	locret_ADF0
0000B2D0 117C 0003 001C             		move.b	#3,$1C(a0)
0000B2D6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2DC 4A41                       		tst.w	d1
0000B2DE 6A00                       		bpl.s	locret_ADF0
0000B2E0 D368 000C                  		add.w	d1,$C(a0)
0000B2E4 317C 0000 0012             		move.w	#0,$12(a0)
0000B2EA 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2F0 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2F6 5528 0025                  		subq.b	#2,$25(a0)
0000B2FA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2FE                            
0000B2FE                            locret_ADF0:
0000B2FE 4E75                       		rts	
0000B300                            ; ===========================================================================
0000B300                            
0000B300                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B300 343C 0060                  		move.w	#$60,d2
0000B304 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B308 6400                       		bcc.s	locret_AE20
0000B30A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B30E 9068 000C                  		sub.w	$C(a0),d0
0000B312 6400                       		bcc.s	locret_AE20
0000B314 0C40 FF80                  		cmpi.w	#-$80,d0
0000B318 6500                       		bcs.s	locret_AE20
0000B31A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B31E 6600                       		bne.s	locret_AE20
0000B320 5528 0025                  		subq.b	#2,$25(a0)
0000B324 3141 0010                  		move.w	d1,$10(a0)
0000B328 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B32E                            
0000B32E                            locret_AE20:
0000B32E 4E75                       		rts	
0000B330                            
0000B330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B330                            
0000B330                            
0000B330                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B330 323C 0080                  		move.w	#$80,d1
0000B334 08E8 0000 0022             		bset	#0,$22(a0)
0000B33A 3038 D008                  		move.w	($FFFFD008).w,d0
0000B33E 9068 0008                  		sub.w	8(a0),d0
0000B342 6400                       		bcc.s	loc_AE40
0000B344 4440                       		neg.w	d0
0000B346 4441                       		neg.w	d1
0000B348 08A8 0000 0022             		bclr	#0,$22(a0)
0000B34E                            
0000B34E                            loc_AE40:
0000B34E B042                       		cmp.w	d2,d0
0000B350 4E75                       		rts	
0000B352                            ; End of function Obj2D_ChkSonic2
0000B352                            
0000B352                            ; ===========================================================================
0000B352                            Ani_obj2D:
0000B352                            	include "_anim\obj2D.asm"
0000B352                            ; ---------------------------------------------------------------------------
0000B352                            ; Animation script - Burrobot enemy
0000B352                            ; ---------------------------------------------------------------------------
0000B352 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B354 0000                       		dc.w byte_AE50-Ani_obj2D
0000B356 0000                       		dc.w byte_AE54-Ani_obj2D
0000B358 0000                       		dc.w byte_AE58-Ani_obj2D
0000B35A 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B35E 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B362 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B366 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B36A 00                         		even
0000B36A 00                         		even
0000B36A                            
0000B36A                            ; ---------------------------------------------------------------------------
0000B36A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B36A                            ; ---------------------------------------------------------------------------
0000B36A                            Map_obj2D:
0000B36A                            	include "_maps\obj2D.asm"
0000B36A                            ; ---------------------------------------------------------------------------
0000B36A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B36A                            ; ---------------------------------------------------------------------------
0000B36A 0000                       		dc.w byte_AE6A-Map_obj2D
0000B36C 0000                       		dc.w byte_AE75-Map_obj2D
0000B36E 0000                       		dc.w byte_AE80-Map_obj2D
0000B370 0000                       		dc.w byte_AE8B-Map_obj2D
0000B372 0000                       		dc.w byte_AE96-Map_obj2D
0000B374 0000                       		dc.w byte_AEA1-Map_obj2D
0000B376 0000                       		dc.w byte_AEAC-Map_obj2D
0000B378 02                         byte_AE6A:	dc.b 2
0000B379 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B37E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B383 02                         byte_AE75:	dc.b 2
0000B384 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B389 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B38E 02                         byte_AE80:	dc.b 2
0000B38F E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B394 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B399 02                         byte_AE8B:	dc.b 2
0000B39A E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B39F 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B3A4 02                         byte_AE96:	dc.b 2
0000B3A5 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B3AA 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B3AF 02                         byte_AEA1:	dc.b 2
0000B3B0 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B3B5 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B3BA 02                         byte_AEAC:	dc.b 2
0000B3BB EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B3C0 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B3C6 00                         		even
0000B3C6 00                         		even
0000B3C6                            
0000B3C6                            ; ===========================================================================
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            ; Object 2F - large moving platforms (MZ)
0000B3C6                            ; ---------------------------------------------------------------------------
0000B3C6                            
0000B3C6                            Obj2F:					; XREF: Obj_Index
0000B3C6 7000                       		moveq	#0,d0
0000B3C8 1028 0024                  		move.b	$24(a0),d0
0000B3CC 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B3D0 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B3D4                            ; ===========================================================================
0000B3D4 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B3D6 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B3D8                            
0000B3D8 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B3DA 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B3DC 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B3DE 0140                       		dc.b 1,	$40
0000B3E0 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3E2 0220                       		dc.b 2,	$20
0000B3E4                            ; ===========================================================================
0000B3E4                            
0000B3E4                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3E4 5428 0024                  		addq.b	#2,$24(a0)
0000B3E8 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3F0 317C C000 0002             		move.w	#$C000,2(a0)
0000B3F6 117C 0004 0001             		move.b	#4,1(a0)
0000B3FC 117C 0005 0018             		move.b	#5,$18(a0)
0000B402 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B408 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B40E 7000                       		moveq	#0,d0
0000B410 1028 0028                  		move.b	$28(a0),d0
0000B414 E448                       		lsr.w	#2,d0
0000B416 0240 001C                  		andi.w	#$1C,d0
0000B41A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B41E 3019                       		move.w	(a1)+,d0
0000B420 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B424 214A 0030                  		move.l	a2,$30(a0)
0000B428 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B42C 1151 0019                  		move.b	(a1),$19(a0)
0000B430 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B436 117C 0040 0016             		move.b	#$40,$16(a0)
0000B43C 08E8 0004 0001             		bset	#4,1(a0)
0000B442                            
0000B442                            Obj2F_Action:				; XREF: Obj2F_Index
0000B442 6100 0000                  		bsr.w	Obj2F_Types
0000B446 4A28 0025                  		tst.b	$25(a0)
0000B44A 6700                       		beq.s	Obj2F_Solid
0000B44C 7200                       		moveq	#0,d1
0000B44E 1228 0019                  		move.b	$19(a0),d1
0000B452 0641 000B                  		addi.w	#$B,d1
0000B456 6100 C5BA                  		bsr.w	ExitPlatform
0000B45A 0829 0003 0022             		btst	#3,$22(a1)
0000B460 6600 0000                  		bne.w	Obj2F_Slope
0000B464 4228 0025                  		clr.b	$25(a0)
0000B468 6000                       		bra.s	Obj2F_Display
0000B46A                            ; ===========================================================================
0000B46A                            
0000B46A                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B46A 7200                       		moveq	#0,d1
0000B46C 1228 0019                  		move.b	$19(a0),d1
0000B470 0641 000B                  		addi.w	#$B,d1
0000B474 2468 0030                  		movea.l	$30(a0),a2
0000B478 3428 0008                  		move.w	8(a0),d2
0000B47C 6100 D4F2                  		bsr.w	SlopeObject2
0000B480 6000                       		bra.s	Obj2F_Display
0000B482                            ; ===========================================================================
0000B482                            
0000B482                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B482 7200                       		moveq	#0,d1
0000B484 1228 0019                  		move.b	$19(a0),d1
0000B488 0641 000B                  		addi.w	#$B,d1
0000B48C 343C 0020                  		move.w	#$20,d2
0000B490 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B496 6600                       		bne.s	loc_AF8E
0000B498 343C 0030                  		move.w	#$30,d2
0000B49C                            
0000B49C                            loc_AF8E:
0000B49C 2468 0030                  		movea.l	$30(a0),a2
0000B4A0 6100 0000                  		bsr.w	SolidObject2F
0000B4A4                            
0000B4A4                            Obj2F_Display:				; XREF: Obj2F_Action
0000B4A4 6100 0000                  		bsr.w	DisplaySprite
0000B4A8 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4AC                            
0000B4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4AC                            
0000B4AC                            
0000B4AC                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4AC 7000                       		moveq	#0,d0
0000B4AE 1028 0028                  		move.b	$28(a0),d0
0000B4B2 0240 0007                  		andi.w	#7,d0
0000B4B6 D040                       		add.w	d0,d0
0000B4B8 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B4BC 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B4C0                            ; End of function Obj2F_Types
0000B4C0                            
0000B4C0                            ; ===========================================================================
0000B4C0 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B4C2 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B4C4 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B4C6 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B4C8 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B4CA 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B4CC 4E75                       		rts			; type 00 platform doesn't move
0000B4CE                            ; ===========================================================================
0000B4CE                            
0000B4CE                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B4CE 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B4D2 323C 0020                  		move.w	#$20,d1
0000B4D6 6000                       		bra.s	Obj2F_Move
0000B4D8                            ; ===========================================================================
0000B4D8                            
0000B4D8                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B4D8 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B4DC 323C 0030                  		move.w	#$30,d1
0000B4E0 6000                       		bra.s	Obj2F_Move
0000B4E2                            ; ===========================================================================
0000B4E2                            
0000B4E2                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4E2 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4E6 323C 0040                  		move.w	#$40,d1
0000B4EA 6000                       		bra.s	Obj2F_Move
0000B4EC                            ; ===========================================================================
0000B4EC                            
0000B4EC                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4EC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4F0 323C 0060                  		move.w	#$60,d1
0000B4F4                            
0000B4F4                            Obj2F_Move:
0000B4F4 0828 0003 0028             		btst	#3,$28(a0)
0000B4FA 6700                       		beq.s	loc_AFF2
0000B4FC 4440                       		neg.w	d0
0000B4FE D041                       		add.w	d1,d0
0000B500                            
0000B500                            loc_AFF2:
0000B500 3228 002C                  		move.w	$2C(a0),d1
0000B504 9240                       		sub.w	d0,d1
0000B506 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B50A 4E75                       		rts	
0000B50C                            ; ===========================================================================
0000B50C                            
0000B50C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B50C 1028 0034                  		move.b	$34(a0),d0
0000B510 4A28 0025                  		tst.b	$25(a0)
0000B514 6600                       		bne.s	loc_B010
0000B516 5500                       		subq.b	#2,d0
0000B518 6400                       		bcc.s	loc_B01C
0000B51A 7000                       		moveq	#0,d0
0000B51C 6000                       		bra.s	loc_B01C
0000B51E                            ; ===========================================================================
0000B51E                            
0000B51E                            loc_B010:
0000B51E 5800                       		addq.b	#4,d0
0000B520 0C00 0040                  		cmpi.b	#$40,d0
0000B524 6500                       		bcs.s	loc_B01C
0000B526 103C 0040                  		move.b	#$40,d0
0000B52A                            
0000B52A                            loc_B01C:
0000B52A 1140 0034                  		move.b	d0,$34(a0)
0000B52E 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B534 E848                       		lsr.w	#4,d0
0000B536 3200                       		move.w	d0,d1
0000B538 D068 002C                  		add.w	$2C(a0),d0
0000B53C 3140 000C                  		move.w	d0,$C(a0)
0000B540 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B546 6600                       		bne.s	loc_B07A
0000B548 4A28 0035                  		tst.b	$35(a0)
0000B54C 6600                       		bne.s	loc_B07A
0000B54E 117C 0001 0035             		move.b	#1,$35(a0)
0000B554 6100 0000                  		bsr.w	SingleObjLoad2
0000B558 6600                       		bne.s	loc_B07A
0000B55A 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B55E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B564 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B56A 5069 002C                  		addq.w	#8,$2C(a1)
0000B56E 5769 002C                  		subq.w	#3,$2C(a1)
0000B572 0469 0040 0008             		subi.w	#$40,8(a1)
0000B578 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B57E 2348 0038                  		move.l	a0,$38(a1)
0000B582 2448                       		movea.l	a0,a2
0000B584 6100                       		bsr.s	sub_B09C
0000B586                            
0000B586                            loc_B07A:
0000B586 7400                       		moveq	#0,d2
0000B588 45E8 0036                  		lea	$36(a0),a2
0000B58C 141A                       		move.b	(a2)+,d2
0000B58E 5302                       		subq.b	#1,d2
0000B590 6500                       		bcs.s	locret_B09A
0000B592                            
0000B592                            loc_B086:
0000B592 7000                       		moveq	#0,d0
0000B594 101A                       		move.b	(a2)+,d0
0000B596 ED48                       		lsl.w	#6,d0
0000B598 0640 D000                  		addi.w	#-$3000,d0
0000B59C 3240                       		movea.w	d0,a1
0000B59E 3341 003C                  		move.w	d1,$3C(a1)
0000B5A2 51CA FFEE                  		dbf	d2,loc_B086
0000B5A6                            
0000B5A6                            locret_B09A:
0000B5A6 4E75                       		rts	
0000B5A8                            
0000B5A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5A8                            
0000B5A8                            
0000B5A8                            sub_B09C:
0000B5A8 45EA 0036                  		lea	$36(a2),a2
0000B5AC 7000                       		moveq	#0,d0
0000B5AE 1012                       		move.b	(a2),d0
0000B5B0 5212                       		addq.b	#1,(a2)
0000B5B2 45F2 0001                  		lea	1(a2,d0.w),a2
0000B5B6 3009                       		move.w	a1,d0
0000B5B8 0440 D000                  		subi.w	#-$3000,d0
0000B5BC EC48                       		lsr.w	#6,d0
0000B5BE 0240 007F                  		andi.w	#$7F,d0
0000B5C2 1480                       		move.b	d0,(a2)
0000B5C4 4E75                       		rts	
0000B5C6                            ; End of function sub_B09C
0000B5C6                            
0000B5C6                            ; ===========================================================================
0000B5C6                            
0000B5C6                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B5C6 4A28 0035                  		tst.b	$35(a0)
0000B5CA 6700                       		beq.s	loc_B0C6
0000B5CC 4A28 0001                  		tst.b	1(a0)
0000B5D0 6A00                       		bpl.s	Obj2F_DelFlames
0000B5D2                            
0000B5D2                            loc_B0C6:
0000B5D2 3028 002A                  		move.w	$2A(a0),d0
0000B5D6 0240 FF80                  		andi.w	#$FF80,d0
0000B5DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5DE 0441 0080                  		subi.w	#$80,d1
0000B5E2 0241 FF80                  		andi.w	#$FF80,d1
0000B5E6 9041                       		sub.w	d1,d0
0000B5E8 0C40 0280                  		cmpi.w	#$280,d0
0000B5EC 6200 0000                  		bhi.w	DeleteObject
0000B5F0 4E75                       		rts	
0000B5F2                            ; ===========================================================================
0000B5F2                            
0000B5F2                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5F2 7400                       		moveq	#0,d2
0000B5F4                            
0000B5F4                            loc_B0E8:
0000B5F4 45E8 0036                  		lea	$36(a0),a2
0000B5F8 1412                       		move.b	(a2),d2
0000B5FA 421A                       		clr.b	(a2)+
0000B5FC 5302                       		subq.b	#1,d2
0000B5FE 6500                       		bcs.s	locret_B116
0000B600                            
0000B600                            loc_B0F4:
0000B600 7000                       		moveq	#0,d0
0000B602 1012                       		move.b	(a2),d0
0000B604 421A                       		clr.b	(a2)+
0000B606 ED48                       		lsl.w	#6,d0
0000B608 0640 D000                  		addi.w	#-$3000,d0
0000B60C 3240                       		movea.w	d0,a1
0000B60E 6100 0000                  		bsr.w	DeleteObject2
0000B612 51CA FFEC                  		dbf	d2,loc_B0F4
0000B616 117C 0000 0035             		move.b	#0,$35(a0)
0000B61C 117C 0000 0034             		move.b	#0,$34(a0)
0000B622                            
0000B622                            locret_B116:
0000B622 4E75                       		rts	
0000B624                            ; ===========================================================================
0000B624                            ; ---------------------------------------------------------------------------
0000B624                            ; Collision data for large moving platforms (MZ)
0000B624                            ; ---------------------------------------------------------------------------
0000B624                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B670                            		even
0000B670                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B69C                            		even
0000B69C                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6E8                            		even
0000B6E8                            ; ===========================================================================
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6E8                            ; (appears when	you walk on sinking platforms)
0000B6E8                            ; ---------------------------------------------------------------------------
0000B6E8                            
0000B6E8                            Obj35:					; XREF: Obj_Index
0000B6E8 7000                       		moveq	#0,d0
0000B6EA 1028 0024                  		move.b	$24(a0),d0
0000B6EE 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6F2 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6F6                            ; ===========================================================================
0000B6F6 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6F8 0000                       		dc.w loc_B238-Obj35_Index
0000B6FA 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6FC                            ; ===========================================================================
0000B6FC                            
0000B6FC                            Obj35_Main:				; XREF: Obj35_Index
0000B6FC 5428 0024                  		addq.b	#2,$24(a0)
0000B700 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B708 317C 0345 0002             		move.w	#$345,2(a0)
0000B70E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B714 117C 0004 0001             		move.b	#4,1(a0)
0000B71A 117C 0001 0018             		move.b	#1,$18(a0)
0000B720 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B726 117C 0008 0019             		move.b	#8,$19(a0)
0000B72C 303C 00C8                  		move.w	#$C8,d0
0000B730 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B736 4A28 0028                  		tst.b	$28(a0)
0000B73A 6700                       		beq.s	loc_B238
0000B73C 5428 0024                  		addq.b	#2,$24(a0)
0000B740 6000 0000                  		bra.w	Obj35_Move
0000B744                            ; ===========================================================================
0000B744                            
0000B744                            loc_B238:				; XREF: Obj35_Index
0000B744 2268 0030                  		movea.l	$30(a0),a1
0000B748 3228 0008                  		move.w	8(a0),d1
0000B74C 9268 002A                  		sub.w	$2A(a0),d1
0000B750 0641 000C                  		addi.w	#$C,d1
0000B754 3001                       		move.w	d1,d0
0000B756 E248                       		lsr.w	#1,d0
0000B758 1031 0000                  		move.b	(a1,d0.w),d0
0000B75C 4440                       		neg.w	d0
0000B75E D068 002C                  		add.w	$2C(a0),d0
0000B762 3400                       		move.w	d0,d2
0000B764 D068 003C                  		add.w	$3C(a0),d0
0000B768 3140 000C                  		move.w	d0,$C(a0)
0000B76C 0C41 0084                  		cmpi.w	#$84,d1
0000B770 6400                       		bcc.s	loc_B2B0
0000B772 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B77A 0C41 0080                  		cmpi.w	#$80,d1
0000B77E 6400                       		bcc.s	loc_B2B0
0000B780 2028 0008                  		move.l	8(a0),d0
0000B784 0680 0008 0000             		addi.l	#$80000,d0
0000B78A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B790 6600                       		bne.s	loc_B2B0
0000B792 6100 0000                  		bsr.w	SingleObjLoad2
0000B796 6600                       		bne.s	loc_B2B0
0000B798 12BC 0035                  		move.b	#$35,0(a1)
0000B79C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7A2 3342 002C                  		move.w	d2,$2C(a1)
0000B7A6 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7AC 137C 0001 0028             		move.b	#1,$28(a1)
0000B7B2 2468 0038                  		movea.l	$38(a0),a2
0000B7B6 6100 FDF0                  		bsr.w	sub_B09C
0000B7BA                            
0000B7BA                            loc_B2B0:
0000B7BA 6000                       		bra.s	Obj35_Animate
0000B7BC                            ; ===========================================================================
0000B7BC                            
0000B7BC                            Obj35_Move:				; XREF: Obj35_Index
0000B7BC 3028 002C                  		move.w	$2C(a0),d0
0000B7C0 D068 003C                  		add.w	$3C(a0),d0
0000B7C4 3140 000C                  		move.w	d0,$C(a0)
0000B7C8                            
0000B7C8                            Obj35_Animate:				; XREF: loc_B238
0000B7C8 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B7CE 6100 F496                  		bsr.w	AnimateSprite
0000B7D2 6000 0000                  		bra.w	DisplaySprite
0000B7D6                            ; ===========================================================================
0000B7D6                            Ani_obj35:
0000B7D6                            	include "_anim\obj35.asm"
0000B7D6                            ; ---------------------------------------------------------------------------
0000B7D6                            ; Animation script - fireball that sits on the	floor (MZ)
0000B7D6                            ; ---------------------------------------------------------------------------
0000B7D6 0000                       		dc.w byte_B2CE-Ani_obj35
0000B7D8 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B7DE                            		even
0000B7DE                            		even
0000B7DE                            
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE                            ; Sprite mappings - large moving platforms (MZ)
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE                            Map_obj2F:
0000B7DE                            	include "_maps\obj2F.asm"
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE                            ; Sprite mappings - large moving platforms (MZ)
0000B7DE                            ; ---------------------------------------------------------------------------
0000B7DE 0000                       		dc.w byte_B2DA-Map_obj2F
0000B7E0 0000                       		dc.w byte_B31C-Map_obj2F
0000B7E2 0000                       		dc.w byte_B34F-Map_obj2F
0000B7E4 0D                         byte_B2DA:	dc.b $D
0000B7E5 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7EA F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7EF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7F4 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7F9 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7FE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B803 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B808 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B80D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B812 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B817 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B81C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B821 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B826 0A                         byte_B31C:	dc.b $A
0000B827 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B82C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B831 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B836 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B83B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B840 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B845 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B84A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B84F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B854 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B859 06                         byte_B34F:	dc.b 6
0000B85A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B85F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B864 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B869 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B86E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B873 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B878                            		even
0000B878                            		even
0000B878                            
0000B878                            ; ---------------------------------------------------------------------------
0000B878                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B878                            ; ---------------------------------------------------------------------------
0000B878                            Map_obj14:
0000B878                            	include "_maps\obj14.asm"
0000B878                            ; ---------------------------------------------------------------------------
0000B878                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B878                            ; ---------------------------------------------------------------------------
0000B878 0000                       		dc.w byte_B37A-Map_obj14
0000B87A 0000                       		dc.w byte_B380-Map_obj14
0000B87C 0000                       		dc.w byte_B386-Map_obj14
0000B87E 0000                       		dc.w byte_B38C-Map_obj14
0000B880 0000                       		dc.w byte_B392-Map_obj14
0000B882 0000                       		dc.w byte_B398-Map_obj14
0000B884 01                         byte_B37A:	dc.b 1
0000B885 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B88A 01                         byte_B380:	dc.b 1
0000B88B E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B890 01                         byte_B386:	dc.b 1
0000B891 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B896 01                         byte_B38C:	dc.b 1
0000B897 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B89C 01                         byte_B392:	dc.b 1
0000B89D F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B8A2 01                         byte_B398:	dc.b 1
0000B8A3 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B8A8                            		even
0000B8A8                            		even
0000B8A8                            
0000B8A8                            ; ===========================================================================
0000B8A8                            ; ---------------------------------------------------------------------------
0000B8A8                            ; Object 30 - large green glassy blocks	(MZ)
0000B8A8                            ; ---------------------------------------------------------------------------
0000B8A8                            
0000B8A8                            Obj30:					; XREF: Obj_Index
0000B8A8 7000                       		moveq	#0,d0
0000B8AA 1028 0024                  		move.b	$24(a0),d0
0000B8AE 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B8B2 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B8B6 3028 0008                  		move.w	8(a0),d0
0000B8BA 0240 FF80                  		andi.w	#$FF80,d0
0000B8BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8C2 0441 0080                  		subi.w	#$80,d1
0000B8C6 0241 FF80                  		andi.w	#$FF80,d1
0000B8CA 9041                       		sub.w	d1,d0
0000B8CC 0C40 0280                  		cmpi.w	#$280,d0
0000B8D0 6200 0000                  		bhi.w	Obj30_Delete
0000B8D4 6000 0000                  		bra.w	DisplaySprite
0000B8D8                            ; ===========================================================================
0000B8D8                            
0000B8D8                            Obj30_Delete:
0000B8D8 6000 0000                  		bra.w	DeleteObject
0000B8DC                            ; ===========================================================================
0000B8DC 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B8DE 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B8E0 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8E2 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8E4 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8E6                            
0000B8E6 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8E9 0400 01                    		dc.b 4,	0, 1
0000B8EC 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8EF 0800 01                    		dc.b 8,	0, 1
0000B8F2                            ; ===========================================================================
0000B8F2                            
0000B8F2                            Obj30_Main:				; XREF: Obj30_Index
0000B8F2 45F9 0000 B8E6             		lea	(Obj30_Vars1).l,a2
0000B8F8 7201                       		moveq	#1,d1
0000B8FA 117C 0048 0016             		move.b	#$48,$16(a0)
0000B900 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B906 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B908 45F9 0000 B8EC             		lea	(Obj30_Vars2).l,a2
0000B90E 7201                       		moveq	#1,d1
0000B910 117C 0038 0016             		move.b	#$38,$16(a0)
0000B916                            
0000B916                            loc_B40C:
0000B916 2248                       		movea.l	a0,a1
0000B918 6000                       		bra.s	Obj30_Load	; load main object
0000B91A                            ; ===========================================================================
0000B91A                            
0000B91A                            Obj30_Loop:
0000B91A 6100 0000                  		bsr.w	SingleObjLoad2
0000B91E 6600                       		bne.s	loc_B480
0000B920                            
0000B920                            Obj30_Load:				; XREF: Obj30_Main
0000B920 135A 0024                  		move.b	(a2)+,$24(a1)
0000B924 12BC 0030                  		move.b	#$30,0(a1)
0000B928 3368 0008 0008             		move.w	8(a0),8(a1)
0000B92E 101A                       		move.b	(a2)+,d0
0000B930 4880                       		ext.w	d0
0000B932 D068 000C                  		add.w	$C(a0),d0
0000B936 3340 000C                  		move.w	d0,$C(a1)
0000B93A 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B942 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B948 137C 0004 0001             		move.b	#4,1(a1)
0000B94E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B954 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B95A 137C 0020 0019             		move.b	#$20,$19(a1)
0000B960 137C 0004 0018             		move.b	#4,$18(a1)
0000B966 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B96A 2348 003C                  		move.l	a0,$3C(a1)
0000B96E 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B972                            
0000B972 137C 0010 0019             		move.b	#$10,$19(a1)
0000B978 137C 0003 0018             		move.b	#3,$18(a1)
0000B97E 5029 0028                  		addq.b	#8,$28(a1)
0000B982 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B988                            
0000B988                            loc_B480:
0000B988 317C 0090 0032             		move.w	#$90,$32(a0)
0000B98E 08E8 0004 0001             		bset	#4,1(a0)
0000B994                            
0000B994                            Obj30_Block012:				; XREF: Obj30_Index
0000B994 6100 0000                  		bsr.w	Obj30_Types
0000B998 323C 002B                  		move.w	#$2B,d1
0000B99C 343C 0048                  		move.w	#$48,d2
0000B9A0 363C 0049                  		move.w	#$49,d3
0000B9A4 3828 0008                  		move.w	8(a0),d4
0000B9A8 6000 0000                  		bra.w	SolidObject
0000B9AC                            ; ===========================================================================
0000B9AC                            
0000B9AC                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9AC 2268 003C                  		movea.l	$3C(a0),a1
0000B9B0 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9B6 6000 0000                  		bra.w	Obj30_Types
0000B9BA                            ; ===========================================================================
0000B9BA                            
0000B9BA                            Obj30_Block34:				; XREF: Obj30_Index
0000B9BA 6100 0000                  		bsr.w	Obj30_Types
0000B9BE 323C 002B                  		move.w	#$2B,d1
0000B9C2 343C 0038                  		move.w	#$38,d2
0000B9C6 363C 0039                  		move.w	#$39,d3
0000B9CA 3828 0008                  		move.w	8(a0),d4
0000B9CE 6000 0000                  		bra.w	SolidObject
0000B9D2                            ; ===========================================================================
0000B9D2                            
0000B9D2                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B9D2 2268 003C                  		movea.l	$3C(a0),a1
0000B9D6 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9DC 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9E2 6000 0002                  		bra.w	*+4
0000B9E6                            
0000B9E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9E6                            
0000B9E6                            
0000B9E6                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9E6 7000                       		moveq	#0,d0
0000B9E8 1028 0028                  		move.b	$28(a0),d0
0000B9EC 0240 0007                  		andi.w	#7,d0
0000B9F0 D040                       		add.w	d0,d0
0000B9F2 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9F6 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9FA                            ; End of function Obj30_Types
0000B9FA                            
0000B9FA                            ; ===========================================================================
0000B9FA 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9FC 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9FE 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BA00 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BA02 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BA04                            ; ===========================================================================
0000BA04                            
0000BA04                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BA04 4E75                       		rts	
0000BA06                            ; ===========================================================================
0000BA06                            
0000BA06                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BA06 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA0A 323C 0040                  		move.w	#$40,d1
0000BA0E 6000                       		bra.s	loc_B514
0000BA10                            ; ===========================================================================
0000BA10                            
0000BA10                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA10 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA14 323C 0040                  		move.w	#$40,d1
0000BA18 4440                       		neg.w	d0
0000BA1A D041                       		add.w	d1,d0
0000BA1C                            
0000BA1C                            loc_B514:				; XREF: Obj30_Type01
0000BA1C 0828 0003 0028             		btst	#3,$28(a0)
0000BA22 6700                       		beq.s	loc_B526
0000BA24 4440                       		neg.w	d0
0000BA26 D041                       		add.w	d1,d0
0000BA28 E208                       		lsr.b	#1,d0
0000BA2A 0640 0020                  		addi.w	#$20,d0
0000BA2E                            
0000BA2E                            loc_B526:
0000BA2E 6000 0000                  		bra.w	loc_B5EE
0000BA32                            ; ===========================================================================
0000BA32                            
0000BA32                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA32 0828 0003 0028             		btst	#3,$28(a0)
0000BA38 6700                       		beq.s	loc_B53E
0000BA3A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA3E 0440 0010                  		subi.w	#$10,d0
0000BA42 6000 0000                  		bra.w	loc_B5EE
0000BA46                            ; ===========================================================================
0000BA46                            
0000BA46                            loc_B53E:
0000BA46 0828 0003 0022             		btst	#3,$22(a0)
0000BA4C 6600                       		bne.s	loc_B54E
0000BA4E 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA54 6000                       		bra.s	loc_B582
0000BA56                            ; ===========================================================================
0000BA56                            
0000BA56                            loc_B54E:
0000BA56 4A28 0034                  		tst.b	$34(a0)
0000BA5A 6600                       		bne.s	loc_B582
0000BA5C 117C 0001 0034             		move.b	#1,$34(a0)
0000BA62 08E8 0000 0035             		bset	#0,$35(a0)
0000BA68 6700                       		beq.s	loc_B582
0000BA6A 08E8 0007 0034             		bset	#7,$34(a0)
0000BA70 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA76 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA7C 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA82 6600                       		bne.s	loc_B582
0000BA84 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA8A                            
0000BA8A                            loc_B582:
0000BA8A 4A28 0034                  		tst.b	$34(a0)
0000BA8E 6A00                       		bpl.s	loc_B5AA
0000BA90 4A28 0038                  		tst.b	$38(a0)
0000BA94 6700                       		beq.s	loc_B594
0000BA96 5328 0038                  		subq.b	#1,$38(a0)
0000BA9A 6600                       		bne.s	loc_B5AA
0000BA9C                            
0000BA9C                            loc_B594:
0000BA9C 4A68 0032                  		tst.w	$32(a0)
0000BAA0 6700                       		beq.s	loc_B5A4
0000BAA2 5368 0032                  		subq.w	#1,$32(a0)
0000BAA6 5368 0036                  		subq.w	#1,$36(a0)
0000BAAA 6600                       		bne.s	loc_B5AA
0000BAAC                            
0000BAAC                            loc_B5A4:
0000BAAC 08A8 0007 0034             		bclr	#7,$34(a0)
0000BAB2                            
0000BAB2                            loc_B5AA:
0000BAB2 3028 0032                  		move.w	$32(a0),d0
0000BAB6 6000                       		bra.s	loc_B5EE
0000BAB8                            ; ===========================================================================
0000BAB8                            
0000BAB8                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BAB8 0828 0003 0028             		btst	#3,$28(a0)
0000BABE 6700                       		beq.s	Obj30_ChkSwitch
0000BAC0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BAC4 0440 0010                  		subi.w	#$10,d0
0000BAC8 6000                       		bra.s	loc_B5EE
0000BACA                            ; ===========================================================================
0000BACA                            
0000BACA                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BACA 4A28 0034                  		tst.b	$34(a0)
0000BACE 6600                       		bne.s	loc_B5E0
0000BAD0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BAD4 7000                       		moveq	#0,d0
0000BAD6 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BADA E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BADC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BAE0 6700                       		beq.s	loc_B5EA	; if not, branch
0000BAE2 117C 0001 0034             		move.b	#1,$34(a0)
0000BAE8                            
0000BAE8                            loc_B5E0:
0000BAE8 4A68 0032                  		tst.w	$32(a0)
0000BAEC 6700                       		beq.s	loc_B5EA
0000BAEE 5568 0032                  		subq.w	#2,$32(a0)
0000BAF2                            
0000BAF2                            loc_B5EA:
0000BAF2 3028 0032                  		move.w	$32(a0),d0
0000BAF6                            
0000BAF6                            loc_B5EE:
0000BAF6 3228 0030                  		move.w	$30(a0),d1
0000BAFA 9240                       		sub.w	d0,d1
0000BAFC 3141 000C                  		move.w	d1,$C(a0)
0000BB00 4E75                       		rts	
0000BB02                            ; ===========================================================================
0000BB02                            ; ---------------------------------------------------------------------------
0000BB02                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB02                            ; ---------------------------------------------------------------------------
0000BB02                            Map_obj30:
0000BB02                            	include "_maps\obj30.asm"
0000BB02                            ; ---------------------------------------------------------------------------
0000BB02                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB02                            ; ---------------------------------------------------------------------------
0000BB02 0000                       		dc.w byte_B600-Map_obj30
0000BB04 0000                       		dc.w byte_B63D-Map_obj30
0000BB06 0000                       		dc.w byte_B648-Map_obj30
0000BB08 0C                         byte_B600:	dc.b $C
0000BB09 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB0E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB13 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB18 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB1D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB22 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB27 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB2C 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB31 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB36 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB3B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB40 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB45 02                         byte_B63D:	dc.b 2
0000BB46 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB4B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB50 0A                         byte_B648:	dc.b $A
0000BB51 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB56 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB5B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB60 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB65 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB6A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB6F 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB74 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB79 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB7E 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB84 00                         		even
0000BB84 00                         		even
0000BB84                            
0000BB84                            ; ===========================================================================
0000BB84                            ; ---------------------------------------------------------------------------
0000BB84                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB84                            ; ---------------------------------------------------------------------------
0000BB84                            
0000BB84                            Obj31:					; XREF: Obj_Index
0000BB84 7000                       		moveq	#0,d0
0000BB86 1028 0024                  		move.b	$24(a0),d0
0000BB8A 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB8E 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB92                            ; ===========================================================================
0000BB92 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB94 0000                       		dc.w loc_B798-Obj31_Index
0000BB96 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB98 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB9A 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB9C                            
0000BB9C 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB9E 0100                       		dc.b 1,	0
0000BBA0                            
0000BBA0 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BBA3 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BBA6 08CC 03                    		dc.b 8,	$CC, 3
0000BBA9 06F0 02                    		dc.b 6,	$F0, 2
0000BBAC                            
0000BBAC 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BBB0 5000 7800                  		dc.w $5000, $7800
0000BBB4 3800 5800                  		dc.w $3800, $5800
0000BBB8 B800                       		dc.w $B800
0000BBBA                            ; ===========================================================================
0000BBBA                            
0000BBBA                            Obj31_Main:				; XREF: Obj31_Index
0000BBBA 7000                       		moveq	#0,d0
0000BBBC 1028 0028                  		move.b	$28(a0),d0
0000BBC0 6A00                       		bpl.s	loc_B6CE
0000BBC2 0240 007F                  		andi.w	#$7F,d0
0000BBC6 D040                       		add.w	d0,d0
0000BBC8 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BBCC 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BBD0 101A                       		move.b	(a2)+,d0
0000BBD2 1140 0028                  		move.b	d0,$28(a0)
0000BBD6                            
0000BBD6                            loc_B6CE:
0000BBD6 0200 000F                  		andi.b	#$F,d0
0000BBDA D040                       		add.w	d0,d0
0000BBDC 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BBE0 4A40                       		tst.w	d0
0000BBE2 6600                       		bne.s	loc_B6E0
0000BBE4 3142 0032                  		move.w	d2,$32(a0)
0000BBE8                            
0000BBE8                            loc_B6E0:
0000BBE8 45F9 0000 BBA0             		lea	(Obj31_Var).l,a2
0000BBEE 2248                       		movea.l	a0,a1
0000BBF0 7203                       		moveq	#3,d1
0000BBF2 6000                       		bra.s	Obj31_MakeStomper
0000BBF4                            ; ===========================================================================
0000BBF4                            
0000BBF4                            Obj31_Loop:
0000BBF4 6100 0000                  		bsr.w	SingleObjLoad2
0000BBF8 6600 0000                  		bne.w	Obj31_SetSize
0000BBFC                            
0000BBFC                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBFC 135A 0024                  		move.b	(a2)+,$24(a1)
0000BC00 12BC 0031                  		move.b	#$31,0(a1)
0000BC04 3368 0008 0008             		move.w	8(a0),8(a1)
0000BC0A 101A                       		move.b	(a2)+,d0
0000BC0C 4880                       		ext.w	d0
0000BC0E D068 000C                  		add.w	$C(a0),d0
0000BC12 3340 000C                  		move.w	d0,$C(a1)
0000BC16 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC1E 337C 0300 0002             		move.w	#$300,2(a1)
0000BC24 137C 0004 0001             		move.b	#4,1(a1)
0000BC2A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC30 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC36 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC3C 3342 0034                  		move.w	d2,$34(a1)
0000BC40 137C 0004 0018             		move.b	#4,$18(a1)
0000BC46 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC4A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC50 6600                       		bne.s	loc_B76A
0000BC52 5341                       		subq.w	#1,d1
0000BC54 1028 0028                  		move.b	$28(a0),d0
0000BC58 0240 00F0                  		andi.w	#$F0,d0
0000BC5C 0C40 0020                  		cmpi.w	#$20,d0
0000BC60 679A                       		beq.s	Obj31_MakeStomper
0000BC62 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC68 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC6E 5241                       		addq.w	#1,d1
0000BC70                            
0000BC70                            loc_B76A:
0000BC70 2348 003C                  		move.l	a0,$3C(a1)
0000BC74 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC78                            
0000BC78 137C 0003 0018             		move.b	#3,$18(a1)
0000BC7E                            
0000BC7E                            Obj31_SetSize:
0000BC7E 7000                       		moveq	#0,d0
0000BC80 1028 0028                  		move.b	$28(a0),d0
0000BC84 E648                       		lsr.w	#3,d0
0000BC86 0200 000E                  		andi.b	#$E,d0
0000BC8A 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC8E 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC92 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC96 6000                       		bra.s	loc_B798
0000BC98                            ; ===========================================================================
0000BC98 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC9A 3009                       		dc.b $30, 9
0000BC9C 100A                       		dc.b $10, $A
0000BC9E                            ; ===========================================================================
0000BC9E                            
0000BC9E                            loc_B798:				; XREF: Obj31_Index
0000BC9E 6100 0000                  		bsr.w	Obj31_Types
0000BCA2 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BCA8 7200                       		moveq	#0,d1
0000BCAA 1228 0019                  		move.b	$19(a0),d1
0000BCAE 0641 000B                  		addi.w	#$B,d1
0000BCB2 343C 000C                  		move.w	#$C,d2
0000BCB6 363C 000D                  		move.w	#$D,d3
0000BCBA 3828 0008                  		move.w	8(a0),d4
0000BCBE 6100 0000                  		bsr.w	SolidObject
0000BCC2 0828 0003 0022             		btst	#3,$22(a0)
0000BCC8 6700                       		beq.s	Obj31_Display
0000BCCA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BCD0 6400                       		bcc.s	Obj31_Display
0000BCD2 2448                       		movea.l	a0,a2
0000BCD4 41F8 D000                  		lea	($FFFFD000).w,a0
0000BCD8 4EB9 0000 0000             		jsr	KillSonic
0000BCDE 204A                       		movea.l	a2,a0
0000BCE0                            
0000BCE0                            Obj31_Display:
0000BCE0 6100 0000                  		bsr.w	DisplaySprite
0000BCE4 6000 0000                  		bra.w	Obj31_ChkDel
0000BCE8                            ; ===========================================================================
0000BCE8                            
0000BCE8                            loc_B7E2:				; XREF: Obj31_Index
0000BCE8 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCEE 08E8 0004 0001             		bset	#4,1(a0)
0000BCF4 2268 003C                  		movea.l	$3C(a0),a1
0000BCF8 1029 0032                  		move.b	$32(a1),d0
0000BCFC EA08                       		lsr.b	#5,d0
0000BCFE 5600                       		addq.b	#3,d0
0000BD00 1140 001A                  		move.b	d0,$1A(a0)
0000BD04                            
0000BD04                            loc_B7FE:				; XREF: Obj31_Index
0000BD04 2268 003C                  		movea.l	$3C(a0),a1
0000BD08 7000                       		moveq	#0,d0
0000BD0A 1029 0032                  		move.b	$32(a1),d0
0000BD0E D068 0030                  		add.w	$30(a0),d0
0000BD12 3140 000C                  		move.w	d0,$C(a0)
0000BD16                            
0000BD16                            Obj31_Display2:				; XREF: Obj31_Index
0000BD16 6100 0000                  		bsr.w	DisplaySprite
0000BD1A                            
0000BD1A                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD1A 3028 0008                  		move.w	8(a0),d0
0000BD1E 0240 FF80                  		andi.w	#$FF80,d0
0000BD22 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD26 0441 0080                  		subi.w	#$80,d1
0000BD2A 0241 FF80                  		andi.w	#$FF80,d1
0000BD2E 9041                       		sub.w	d1,d0
0000BD30 0C40 0280                  		cmpi.w	#$280,d0
0000BD34 6200 0000                  		bhi.w	DeleteObject
0000BD38 4E75                       		rts	
0000BD3A                            ; ===========================================================================
0000BD3A                            
0000BD3A                            Obj31_Types:				; XREF: loc_B798
0000BD3A 1028 0028                  		move.b	$28(a0),d0
0000BD3E 0240 000F                  		andi.w	#$F,d0
0000BD42 D040                       		add.w	d0,d0
0000BD44 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD48 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD4C                            ; ===========================================================================
0000BD4C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD4E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD50 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD52 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD54 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD56 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD58 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD5A                            ; ===========================================================================
0000BD5A                            
0000BD5A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD5A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD5E 7000                       		moveq	#0,d0
0000BD60 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD64 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD68 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD6A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD6E 6A00                       		bpl.s	loc_B872
0000BD70 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD76 6700                       		beq.s	loc_B8A0
0000BD78                            
0000BD78                            loc_B872:
0000BD78 4A68 0032                  		tst.w	$32(a0)
0000BD7C 6700                       		beq.s	loc_B8A0
0000BD7E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD82 0200 000F                  		andi.b	#$F,d0
0000BD86 6600                       		bne.s	loc_B892
0000BD88 4A28 0001                  		tst.b	1(a0)
0000BD8C 6A00                       		bpl.s	loc_B892
0000BD8E 303C 00C7                  		move.w	#$C7,d0
0000BD92 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD98                            
0000BD98                            loc_B892:
0000BD98 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD9E 6400                       		bcc.s	Obj31_Restart
0000BDA0 317C 0000 0032             		move.w	#0,$32(a0)
0000BDA6                            
0000BDA6                            loc_B8A0:
0000BDA6 317C 0000 0012             		move.w	#0,$12(a0)
0000BDAC 6000                       		bra.s	Obj31_Restart
0000BDAE                            ; ===========================================================================
0000BDAE                            
0000BDAE                            loc_B8A8:				; XREF: Obj31_Type00
0000BDAE 3228 0034                  		move.w	$34(a0),d1
0000BDB2 B268 0032                  		cmp.w	$32(a0),d1
0000BDB6 6700                       		beq.s	Obj31_Restart
0000BDB8 3028 0012                  		move.w	$12(a0),d0
0000BDBC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BDC2 D168 0032                  		add.w	d0,$32(a0)
0000BDC6 B268 0032                  		cmp.w	$32(a0),d1
0000BDCA 6200                       		bhi.s	Obj31_Restart
0000BDCC 3141 0032                  		move.w	d1,$32(a0)
0000BDD0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BDD6 4A28 0001                  		tst.b	1(a0)
0000BDDA 6A00                       		bpl.s	Obj31_Restart
0000BDDC 303C 00BD                  		move.w	#$BD,d0
0000BDE0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDE6                            
0000BDE6                            Obj31_Restart:
0000BDE6 7000                       		moveq	#0,d0
0000BDE8 1028 0032                  		move.b	$32(a0),d0
0000BDEC D068 0030                  		add.w	$30(a0),d0
0000BDF0 3140 000C                  		move.w	d0,$C(a0)
0000BDF4 4E75                       		rts	
0000BDF6                            ; ===========================================================================
0000BDF6                            
0000BDF6                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDF6 4A68 0036                  		tst.w	$36(a0)
0000BDFA 6700                       		beq.s	loc_B938
0000BDFC 4A68 0038                  		tst.w	$38(a0)
0000BE00 6700                       		beq.s	loc_B902
0000BE02 5368 0038                  		subq.w	#1,$38(a0)
0000BE06 6000                       		bra.s	loc_B97C
0000BE08                            ; ===========================================================================
0000BE08                            
0000BE08                            loc_B902:
0000BE08 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE0C 0200 000F                  		andi.b	#$F,d0
0000BE10 6600                       		bne.s	loc_B91C
0000BE12 4A28 0001                  		tst.b	1(a0)
0000BE16 6A00                       		bpl.s	loc_B91C
0000BE18 303C 00C7                  		move.w	#$C7,d0
0000BE1C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE22                            
0000BE22                            loc_B91C:
0000BE22 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE28 6400                       		bcc.s	loc_B97C
0000BE2A 317C 0000 0032             		move.w	#0,$32(a0)
0000BE30 317C 0000 0012             		move.w	#0,$12(a0)
0000BE36 317C 0000 0036             		move.w	#0,$36(a0)
0000BE3C 6000                       		bra.s	loc_B97C
0000BE3E                            ; ===========================================================================
0000BE3E                            
0000BE3E                            loc_B938:				; XREF: Obj31_Type01
0000BE3E 3228 0034                  		move.w	$34(a0),d1
0000BE42 B268 0032                  		cmp.w	$32(a0),d1
0000BE46 6700                       		beq.s	loc_B97C
0000BE48 3028 0012                  		move.w	$12(a0),d0
0000BE4C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE52 D168 0032                  		add.w	d0,$32(a0)
0000BE56 B268 0032                  		cmp.w	$32(a0),d1
0000BE5A 6200                       		bhi.s	loc_B97C
0000BE5C 3141 0032                  		move.w	d1,$32(a0)
0000BE60 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE66 317C 0001 0036             		move.w	#1,$36(a0)
0000BE6C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE72 4A28 0001                  		tst.b	1(a0)
0000BE76 6A00                       		bpl.s	loc_B97C
0000BE78 303C 00BD                  		move.w	#$BD,d0
0000BE7C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE82                            
0000BE82                            loc_B97C:
0000BE82 6000 FF62                  		bra.w	Obj31_Restart
0000BE86                            ; ===========================================================================
0000BE86                            
0000BE86                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE86 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE8A 9068 0008                  		sub.w	8(a0),d0
0000BE8E 6400                       		bcc.s	loc_B98C
0000BE90 4440                       		neg.w	d0
0000BE92                            
0000BE92                            loc_B98C:
0000BE92 0C40 0090                  		cmpi.w	#$90,d0
0000BE96 6400                       		bcc.s	loc_B996
0000BE98 5228 0028                  		addq.b	#1,$28(a0)
0000BE9C                            
0000BE9C                            loc_B996:
0000BE9C 6000 FF48                  		bra.w	Obj31_Restart
0000BEA0                            ; ===========================================================================
0000BEA0                            ; ---------------------------------------------------------------------------
0000BEA0                            ; Object 45 - spiked metal block from beta version (MZ)
0000BEA0                            ; ---------------------------------------------------------------------------
0000BEA0                            
0000BEA0                            Obj45:					; XREF: Obj_Index
0000BEA0 7000                       		moveq	#0,d0
0000BEA2 1028 0024                  		move.b	$24(a0),d0
0000BEA6 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BEAA 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEAE                            ; ===========================================================================
0000BEAE 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BEB0 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BEB2 0000                       		dc.w loc_BA8E-Obj45_Index
0000BEB4 0000                       		dc.w Obj45_Display-Obj45_Index
0000BEB6 0000                       		dc.w loc_BA7A-Obj45_Index
0000BEB8                            
0000BEB8 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BEBB 04E4 01                    		dc.b	4, $E4,	  1
0000BEBE 0834 03                    		dc.b	8, $34,	  3
0000BEC1 0628 02                    		dc.b	6, $28,	  2
0000BEC4                            
0000BEC4 3800                       word_B9BE:	dc.w $3800
0000BEC6 A000                       		dc.w -$6000
0000BEC8 5000                       		dc.w $5000
0000BECA                            ; ===========================================================================
0000BECA                            
0000BECA                            Obj45_Main:				; XREF: Obj45_Index
0000BECA 7000                       		moveq	#0,d0
0000BECC 1028 0028                  		move.b	$28(a0),d0
0000BED0 D040                       		add.w	d0,d0
0000BED2 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BED6 45F9 0000 BEB8             		lea	(Obj45_Var).l,a2
0000BEDC 2248                       		movea.l	a0,a1
0000BEDE 7203                       		moveq	#3,d1
0000BEE0 6000                       		bra.s	Obj45_Load
0000BEE2                            ; ===========================================================================
0000BEE2                            
0000BEE2                            Obj45_Loop:
0000BEE2 6100 0000                  		bsr.w	SingleObjLoad2
0000BEE6 6600                       		bne.s	loc_BA52
0000BEE8                            
0000BEE8                            Obj45_Load:				; XREF: Obj45_Main
0000BEE8 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEEC 12BC 0045                  		move.b	#$45,0(a1)
0000BEF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BEF6 101A                       		move.b	(a2)+,d0
0000BEF8 4880                       		ext.w	d0
0000BEFA D068 0008                  		add.w	8(a0),d0
0000BEFE 3340 0008                  		move.w	d0,8(a1)
0000BF02 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BF0A 337C 0300 0002             		move.w	#$300,2(a1)
0000BF10 137C 0004 0001             		move.b	#4,1(a1)
0000BF16 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF1C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF22 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF28 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF2E 3342 0034                  		move.w	d2,$34(a1)
0000BF32 137C 0004 0018             		move.b	#4,$18(a1)
0000BF38 0C12 0001                  		cmpi.b	#1,(a2)
0000BF3C 6600                       		bne.s	loc_BA40
0000BF3E 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF44                            
0000BF44                            loc_BA40:
0000BF44 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF48 2348 003C                  		move.l	a0,$3C(a1)
0000BF4C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF50                            
0000BF50 137C 0003 0018             		move.b	#3,$18(a1)
0000BF56                            
0000BF56                            loc_BA52:
0000BF56 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF5C                            
0000BF5C                            Obj45_Solid:				; XREF: Obj45_Index
0000BF5C 3F28 0008                  		move.w	8(a0),-(sp)
0000BF60 6100 0000                  		bsr.w	Obj45_Move
0000BF64 323C 0017                  		move.w	#$17,d1
0000BF68 343C 0020                  		move.w	#$20,d2
0000BF6C 363C 0020                  		move.w	#$20,d3
0000BF70 381F                       		move.w	(sp)+,d4
0000BF72 6100 0000                  		bsr.w	SolidObject
0000BF76 6100 0000                  		bsr.w	DisplaySprite
0000BF7A 6000 0000                  		bra.w	Obj45_ChkDel
0000BF7E                            ; ===========================================================================
0000BF7E                            
0000BF7E                            loc_BA7A:				; XREF: Obj45_Index
0000BF7E 2268 003C                  		movea.l	$3C(a0),a1
0000BF82 1029 0032                  		move.b	$32(a1),d0
0000BF86 0600 0010                  		addi.b	#$10,d0
0000BF8A EA08                       		lsr.b	#5,d0
0000BF8C 5600                       		addq.b	#3,d0
0000BF8E 1140 001A                  		move.b	d0,$1A(a0)
0000BF92                            
0000BF92                            loc_BA8E:				; XREF: Obj45_Index
0000BF92 2268 003C                  		movea.l	$3C(a0),a1
0000BF96 7000                       		moveq	#0,d0
0000BF98 1029 0032                  		move.b	$32(a1),d0
0000BF9C 4440                       		neg.w	d0
0000BF9E D068 0030                  		add.w	$30(a0),d0
0000BFA2 3140 0008                  		move.w	d0,8(a0)
0000BFA6                            
0000BFA6                            Obj45_Display:				; XREF: Obj45_Index
0000BFA6 6100 0000                  		bsr.w	DisplaySprite
0000BFAA                            
0000BFAA                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BFAA 3028 003A                  		move.w	$3A(a0),d0
0000BFAE 0240 FF80                  		andi.w	#$FF80,d0
0000BFB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFB6 0441 0080                  		subi.w	#$80,d1
0000BFBA 0241 FF80                  		andi.w	#$FF80,d1
0000BFBE 9041                       		sub.w	d1,d0
0000BFC0 0C40 0280                  		cmpi.w	#$280,d0
0000BFC4 6200 0000                  		bhi.w	DeleteObject
0000BFC8 4E75                       		rts	
0000BFCA                            
0000BFCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFCA                            
0000BFCA                            
0000BFCA                            Obj45_Move:				; XREF: Obj45_Solid
0000BFCA 7000                       		moveq	#0,d0
0000BFCC 1028 0028                  		move.b	$28(a0),d0
0000BFD0 D040                       		add.w	d0,d0
0000BFD2 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BFD6 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BFDA                            ; End of function Obj45_Move
0000BFDA                            
0000BFDA                            ; ===========================================================================
0000BFDA 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BFDC 0000                       		dc.w loc_BADA-off_BAD6
0000BFDE                            ; ===========================================================================
0000BFDE                            
0000BFDE                            loc_BADA:				; XREF: off_BAD6
0000BFDE 4A68 0036                  		tst.w	$36(a0)
0000BFE2 6700                       		beq.s	loc_BB08
0000BFE4 4A68 0038                  		tst.w	$38(a0)
0000BFE8 6700                       		beq.s	loc_BAEC
0000BFEA 5368 0038                  		subq.w	#1,$38(a0)
0000BFEE 6000                       		bra.s	loc_BB3C
0000BFF0                            ; ===========================================================================
0000BFF0                            
0000BFF0                            loc_BAEC:
0000BFF0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFF6 6400                       		bcc.s	loc_BB3C
0000BFF8 317C 0000 0032             		move.w	#0,$32(a0)
0000BFFE 317C 0000 0010             		move.w	#0,$10(a0)
0000C004 317C 0000 0036             		move.w	#0,$36(a0)
0000C00A 6000                       		bra.s	loc_BB3C
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            loc_BB08:				; XREF: loc_BADA
0000C00C 3228 0034                  		move.w	$34(a0),d1
0000C010 B268 0032                  		cmp.w	$32(a0),d1
0000C014 6700                       		beq.s	loc_BB3C
0000C016 3028 0010                  		move.w	$10(a0),d0
0000C01A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C020 D168 0032                  		add.w	d0,$32(a0)
0000C024 B268 0032                  		cmp.w	$32(a0),d1
0000C028 6200                       		bhi.s	loc_BB3C
0000C02A 3141 0032                  		move.w	d1,$32(a0)
0000C02E 317C 0000 0010             		move.w	#0,$10(a0)
0000C034 317C 0001 0036             		move.w	#1,$36(a0)
0000C03A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C040                            
0000C040                            loc_BB3C:
0000C040 7000                       		moveq	#0,d0
0000C042 1028 0032                  		move.b	$32(a0),d0
0000C046 4440                       		neg.w	d0
0000C048 D068 0030                  		add.w	$30(a0),d0
0000C04C 3140 0008                  		move.w	d0,8(a0)
0000C050 4E75                       		rts	
0000C052                            ; ===========================================================================
0000C052                            ; ---------------------------------------------------------------------------
0000C052                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C052                            ; ---------------------------------------------------------------------------
0000C052                            Map_obj31:
0000C052                            	include "_maps\obj31.asm"
0000C052                            ; ---------------------------------------------------------------------------
0000C052                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C052                            ; ---------------------------------------------------------------------------
0000C052 0000                       		dc.w byte_BB64-Map_obj31
0000C054 0000                       		dc.w byte_BB7E-Map_obj31
0000C056 0000                       		dc.w byte_BB98-Map_obj31
0000C058 0000                       		dc.w byte_BB9E-Map_obj31
0000C05A 0000                       		dc.w byte_BBA9-Map_obj31
0000C05C 0000                       		dc.w byte_BBBE-Map_obj31
0000C05E 0000                       		dc.w byte_BBDD-Map_obj31
0000C060 0000                       		dc.w byte_BC06-Map_obj31
0000C062 0000                       		dc.w byte_BC06-Map_obj31
0000C064 0000                       		dc.w byte_BC39-Map_obj31
0000C066 0000                       		dc.w byte_BC53-Map_obj31
0000C068 05                         byte_BB64:	dc.b 5
0000C069 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C06E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C073 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C078 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C07D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C082 05                         byte_BB7E:	dc.b 5
0000C083 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C088 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C08D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C092 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C097 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C09C 01                         byte_BB98:	dc.b 1
0000C09D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C0A2 02                         byte_BB9E:	dc.b 2
0000C0A3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0A8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0AD 04                         byte_BBA9:	dc.b 4
0000C0AE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0B3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0B8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0BD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0C2 06                         byte_BBBE:	dc.b 6
0000C0C3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0C8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0CD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0D2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0D7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0DC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0E1 08                         byte_BBDD:	dc.b 8
0000C0E2 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0E7 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0EC C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0F1 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0F6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0FB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C100 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C105 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C10A 0A                         byte_BC06:	dc.b $A
0000C10B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C110 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C115 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C11A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C11F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C124 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C129 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C12E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C133 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C138 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C13D 05                         byte_BC39:	dc.b 5
0000C13E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C143 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C148 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C14D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C152 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C157 01                         byte_BC53:	dc.b 1
0000C158 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C15E 00                         		even
0000C15E 00                         		even
0000C15E                            
0000C15E                            ; ---------------------------------------------------------------------------
0000C15E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C15E                            ; ---------------------------------------------------------------------------
0000C15E                            Map_obj45:
0000C15E                            	include "_maps\obj45.asm"
0000C15E                            ; ---------------------------------------------------------------------------
0000C15E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C15E                            ; ---------------------------------------------------------------------------
0000C15E 0000                       		dc.w byte_BC6C-Map_obj45
0000C160 0000                       		dc.w byte_BC7C-Map_obj45
0000C162 0000                       		dc.w byte_BC8C-Map_obj45
0000C164 0000                       		dc.w byte_BC92-Map_obj45
0000C166 0000                       		dc.w byte_BC9D-Map_obj45
0000C168 0000                       		dc.w byte_BCB2-Map_obj45
0000C16A 0000                       		dc.w byte_BCD1-Map_obj45
0000C16C 0000                       		dc.w byte_BCFA-Map_obj45
0000C16E 0000                       		dc.w byte_BCFA-Map_obj45
0000C170 03                         byte_BC6C:	dc.b 3
0000C171 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C176 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C17B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C180 03                         byte_BC7C:	dc.b 3
0000C181 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C186 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C18B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C190 01                         byte_BC8C:	dc.b 1
0000C191 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C196 02                         byte_BC92:	dc.b 2
0000C197 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C19C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1A1 04                         byte_BC9D:	dc.b 4
0000C1A2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1A7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1AC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1B1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1B6 06                         byte_BCB2:	dc.b 6
0000C1B7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1BC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1C1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1C6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1CB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1D0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1D5 08                         byte_BCD1:	dc.b 8
0000C1D6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1DB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1E0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1E5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1EA F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1EF F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1F4 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1F9 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1FE 08                         byte_BCFA:	dc.b 8
0000C1FF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C204 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C209 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C20E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C213 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C218 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C21D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C222 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C227 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C22C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C232 00                         		even
0000C232 00                         		even
0000C232                            
0000C232                            ; ===========================================================================
0000C232                            ; ---------------------------------------------------------------------------
0000C232                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C232                            ; ---------------------------------------------------------------------------
0000C232                            
0000C232                            Obj32:					; XREF: Obj_Index
0000C232 7000                       		moveq	#0,d0
0000C234 1028 0024                  		move.b	$24(a0),d0
0000C238 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C23C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C240                            ; ===========================================================================
0000C240 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C242 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C244                            ; ===========================================================================
0000C244                            
0000C244                            Obj32_Main:				; XREF: Obj32_Index
0000C244 5428 0024                  		addq.b	#2,$24(a0)
0000C248 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C250 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C256 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C25C 6700                       		beq.s	loc_BD60
0000C25E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C264                            
0000C264                            loc_BD60:
0000C264 117C 0004 0001             		move.b	#4,1(a0)
0000C26A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C270 117C 0004 0018             		move.b	#4,$18(a0)
0000C276 5668 000C                  		addq.w	#3,$C(a0)
0000C27A                            
0000C27A                            Obj32_Pressed:				; XREF: Obj32_Index
0000C27A 4A28 0001                  		tst.b	1(a0)
0000C27E 6A00                       		bpl.s	Obj32_Display
0000C280 323C 001B                  		move.w	#$1B,d1
0000C284 343C 0005                  		move.w	#5,d2
0000C288 363C 0005                  		move.w	#5,d3
0000C28C 3828 0008                  		move.w	8(a0),d4
0000C290 6100 0000                  		bsr.w	SolidObject
0000C294 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C29A 1028 0028                  		move.b	$28(a0),d0
0000C29E 0240 000F                  		andi.w	#$F,d0
0000C2A2 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C2A6 47F3 0000                  		lea	(a3,d0.w),a3
0000C2AA 7600                       		moveq	#0,d3
0000C2AC 0828 0006 0028             		btst	#6,$28(a0)
0000C2B2 6700                       		beq.s	loc_BDB2
0000C2B4 7607                       		moveq	#7,d3
0000C2B6                            
0000C2B6                            loc_BDB2:
0000C2B6 4A28 0028                  		tst.b	$28(a0)
0000C2BA 6A00                       		bpl.s	loc_BDBE
0000C2BC 6100 0000                  		bsr.w	Obj32_MZBlock
0000C2C0 6600                       		bne.s	loc_BDC8
0000C2C2                            
0000C2C2                            loc_BDBE:
0000C2C2 4A28 0025                  		tst.b	$25(a0)
0000C2C6 6600                       		bne.s	loc_BDC8
0000C2C8 0793                       		bclr	d3,(a3)
0000C2CA 6000                       		bra.s	loc_BDDE
0000C2CC                            ; ===========================================================================
0000C2CC                            
0000C2CC                            loc_BDC8:
0000C2CC 4A13                       		tst.b	(a3)
0000C2CE 6600                       		bne.s	loc_BDD6
0000C2D0 303C 00CD                  		move.w	#$CD,d0
0000C2D4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C2DA                            
0000C2DA                            loc_BDD6:
0000C2DA 07D3                       		bset	d3,(a3)
0000C2DC 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2E2                            
0000C2E2                            loc_BDDE:
0000C2E2 0828 0005 0028             		btst	#5,$28(a0)
0000C2E8 6700                       		beq.s	Obj32_Display
0000C2EA 5328 001E                  		subq.b	#1,$1E(a0)
0000C2EE 6A00                       		bpl.s	Obj32_Display
0000C2F0 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2F6 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2FC                            
0000C2FC                            Obj32_Display:
0000C2FC 6100 0000                  		bsr.w	DisplaySprite
0000C300 3028 0008                  		move.w	8(a0),d0
0000C304 0240 FF80                  		andi.w	#$FF80,d0
0000C308 3238 F700                  		move.w	($FFFFF700).w,d1
0000C30C 0441 0080                  		subi.w	#$80,d1
0000C310 0241 FF80                  		andi.w	#$FF80,d1
0000C314 9041                       		sub.w	d1,d0
0000C316 0C40 0280                  		cmpi.w	#$280,d0
0000C31A 6200 0000                  		bhi.w	Obj32_Delete
0000C31E 4E75                       		rts	
0000C320                            ; ===========================================================================
0000C320                            
0000C320                            Obj32_Delete:
0000C320 6100 0000                  		bsr.w	DeleteObject
0000C324 4E75                       		rts	
0000C326                            
0000C326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C326                            
0000C326                            
0000C326                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C326 3F03                       		move.w	d3,-(sp)
0000C328 3428 0008                  		move.w	8(a0),d2
0000C32C 3628 000C                  		move.w	$C(a0),d3
0000C330 0442 0010                  		subi.w	#$10,d2
0000C334 5143                       		subq.w	#8,d3
0000C336 383C 0020                  		move.w	#$20,d4
0000C33A 3A3C 0010                  		move.w	#$10,d5
0000C33E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C342 3C3C 005F                  		move.w	#$5F,d6
0000C346                            
0000C346                            Obj32_MZLoop:
0000C346 4A29 0001                  		tst.b	1(a1)
0000C34A 6A00                       		bpl.s	loc_BE4E
0000C34C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C350 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C352                            
0000C352                            loc_BE4E:
0000C352 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C356 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C35A                            
0000C35A 361F                       		move.w	(sp)+,d3
0000C35C 7000                       		moveq	#0,d0
0000C35E                            
0000C35E                            locret_BE5A:
0000C35E 4E75                       		rts	
0000C360                            ; ===========================================================================
0000C360 1010                       Obj32_MZData:	dc.b $10, $10
0000C362                            ; ===========================================================================
0000C362                            
0000C362                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C362 7001                       		moveq	#1,d0
0000C364 0240 003F                  		andi.w	#$3F,d0
0000C368 D040                       		add.w	d0,d0
0000C36A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C36E 121A                       		move.b	(a2)+,d1
0000C370 4881                       		ext.w	d1
0000C372 3029 0008                  		move.w	8(a1),d0
0000C376 9041                       		sub.w	d1,d0
0000C378 9042                       		sub.w	d2,d0
0000C37A 6400                       		bcc.s	loc_BE80
0000C37C D241                       		add.w	d1,d1
0000C37E D041                       		add.w	d1,d0
0000C380 6500                       		bcs.s	loc_BE84
0000C382 60CE                       		bra.s	loc_BE4E
0000C384                            ; ===========================================================================
0000C384                            
0000C384                            loc_BE80:
0000C384 B044                       		cmp.w	d4,d0
0000C386 62CA                       		bhi.s	loc_BE4E
0000C388                            
0000C388                            loc_BE84:
0000C388 121A                       		move.b	(a2)+,d1
0000C38A 4881                       		ext.w	d1
0000C38C 3029 000C                  		move.w	$C(a1),d0
0000C390 9041                       		sub.w	d1,d0
0000C392 9043                       		sub.w	d3,d0
0000C394 6400                       		bcc.s	loc_BE9A
0000C396 D241                       		add.w	d1,d1
0000C398 D041                       		add.w	d1,d0
0000C39A 6500                       		bcs.s	loc_BE9E
0000C39C 60B4                       		bra.s	loc_BE4E
0000C39E                            ; ===========================================================================
0000C39E                            
0000C39E                            loc_BE9A:
0000C39E B045                       		cmp.w	d5,d0
0000C3A0 62B0                       		bhi.s	loc_BE4E
0000C3A2                            
0000C3A2                            loc_BE9E:
0000C3A2 361F                       		move.w	(sp)+,d3
0000C3A4 7001                       		moveq	#1,d0
0000C3A6 4E75                       		rts	
0000C3A8                            ; End of function Obj32_MZBlock
0000C3A8                            
0000C3A8                            ; ===========================================================================
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            Map_obj32:
0000C3A8                            	include "_maps\obj32.asm"
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3A8                            ; ---------------------------------------------------------------------------
0000C3A8 0000                       		dc.w byte_BEAC-Map_obj32
0000C3AA 0000                       		dc.w byte_BEB7-Map_obj32
0000C3AC 0000                       		dc.w byte_BEC2-Map_obj32
0000C3AE 0000                       		dc.w byte_BEB7-Map_obj32
0000C3B0 02                         byte_BEAC:	dc.b 2
0000C3B1 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C3B6 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C3BB 02                         byte_BEB7:	dc.b 2
0000C3BC F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C3C1 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C3C6 02                         byte_BEC2:	dc.b 2
0000C3C7 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C3CC F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C3D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C3D6                            		even
0000C3D6                            		even
0000C3D6                            
0000C3D6                            ; ===========================================================================
0000C3D6                            ; ---------------------------------------------------------------------------
0000C3D6                            ; Object 33 - pushable blocks (MZ, LZ)
0000C3D6                            ; ---------------------------------------------------------------------------
0000C3D6                            
0000C3D6                            Obj33:					; XREF: Obj_Index
0000C3D6 7000                       		moveq	#0,d0
0000C3D8 1028 0024                  		move.b	$24(a0),d0
0000C3DC 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C3E0 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3E4                            ; ===========================================================================
0000C3E4 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3E6 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3E8 0000                       		dc.w loc_C02C-Obj33_Index
0000C3EA                            
0000C3EA 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3EC 4001                       		dc.b $40, 1
0000C3EE                            ; ===========================================================================
0000C3EE                            
0000C3EE                            Obj33_Main:				; XREF: Obj33_Index
0000C3EE 5428 0024                  		addq.b	#2,$24(a0)
0000C3F2 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3F8 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3FE 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C406 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C40C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C412 6600                       		bne.s	loc_BF16
0000C414 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C41A                            
0000C41A                            loc_BF16:
0000C41A 117C 0004 0001             		move.b	#4,1(a0)
0000C420 117C 0003 0018             		move.b	#3,$18(a0)
0000C426 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C42C 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C432 7000                       		moveq	#0,d0
0000C434 1028 0028                  		move.b	$28(a0),d0
0000C438 D040                       		add.w	d0,d0
0000C43A 0240 000E                  		andi.w	#$E,d0
0000C43E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C442 115A 0019                  		move.b	(a2)+,$19(a0)
0000C446 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C44A 4A28 0028                  		tst.b	$28(a0)
0000C44E 6700                       		beq.s	Obj33_ChkGone
0000C450 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C456                            
0000C456                            Obj33_ChkGone:
0000C456 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C45A 7000                       		moveq	#0,d0
0000C45C 1028 0023                  		move.b	$23(a0),d0
0000C460 6700                       		beq.s	loc_BF6E
0000C462 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C468 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C46E 6600 0000                  		bne.w	DeleteObject
0000C472                            
0000C472                            loc_BF6E:				; XREF: Obj33_Index
0000C472 4A28 0032                  		tst.b	$32(a0)
0000C476 6600 0000                  		bne.w	loc_C046
0000C47A 7200                       		moveq	#0,d1
0000C47C 1228 0019                  		move.b	$19(a0),d1
0000C480 0641 000B                  		addi.w	#$B,d1
0000C484 343C 0010                  		move.w	#$10,d2
0000C488 363C 0011                  		move.w	#$11,d3
0000C48C 3828 0008                  		move.w	8(a0),d4
0000C490 6100 0000                  		bsr.w	loc_C186
0000C494 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C49A 6600                       		bne.s	loc_BFC6	; if not, branch
0000C49C 08A8 0007 0028             		bclr	#7,$28(a0)
0000C4A2 3028 0008                  		move.w	8(a0),d0
0000C4A6 0C40 0A20                  		cmpi.w	#$A20,d0
0000C4AA 6500                       		bcs.s	loc_BFC6
0000C4AC 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C4B0 6400                       		bcc.s	loc_BFC6
0000C4B2 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C4B6 0440 001C                  		subi.w	#$1C,d0
0000C4BA 3140 000C                  		move.w	d0,$C(a0)
0000C4BE 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C4C4 08E8 0007 0028             		bset	#7,$28(a0)
0000C4CA                            
0000C4CA                            loc_BFC6:
0000C4CA 3028 0008                  		move.w	8(a0),d0
0000C4CE 0240 FF80                  		andi.w	#$FF80,d0
0000C4D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4D6 0441 0080                  		subi.w	#$80,d1
0000C4DA 0241 FF80                  		andi.w	#$FF80,d1
0000C4DE 9041                       		sub.w	d1,d0
0000C4E0 0C40 0280                  		cmpi.w	#$280,d0
0000C4E4 6200                       		bhi.s	loc_BFE6
0000C4E6 6000 0000                  		bra.w	DisplaySprite
0000C4EA                            ; ===========================================================================
0000C4EA                            
0000C4EA                            loc_BFE6:
0000C4EA 3028 0034                  		move.w	$34(a0),d0
0000C4EE 0240 FF80                  		andi.w	#$FF80,d0
0000C4F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4F6 0441 0080                  		subi.w	#$80,d1
0000C4FA 0241 FF80                  		andi.w	#$FF80,d1
0000C4FE 9041                       		sub.w	d1,d0
0000C500 0C40 0280                  		cmpi.w	#$280,d0
0000C504 6200                       		bhi.s	loc_C016
0000C506 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C50C 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C512 117C 0004 0024             		move.b	#4,$24(a0)
0000C518 6000                       		bra.s	loc_C02C
0000C51A                            ; ===========================================================================
0000C51A                            
0000C51A                            loc_C016:
0000C51A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C51E 7000                       		moveq	#0,d0
0000C520 1028 0023                  		move.b	$23(a0),d0
0000C524 6700                       		beq.s	loc_C028
0000C526 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C52C                            
0000C52C                            loc_C028:
0000C52C 6000 0000                  		bra.w	DeleteObject
0000C530                            ; ===========================================================================
0000C530                            
0000C530                            loc_C02C:				; XREF: Obj33_Index
0000C530 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C534 6700                       		beq.s	locret_C044
0000C536 117C 0002 0024             		move.b	#2,$24(a0)
0000C53C 4228 0032                  		clr.b	$32(a0)
0000C540 4268 0010                  		clr.w	$10(a0)
0000C544 4268 0012                  		clr.w	$12(a0)
0000C548                            
0000C548                            locret_C044:
0000C548 4E75                       		rts	
0000C54A                            ; ===========================================================================
0000C54A                            
0000C54A                            loc_C046:				; XREF: loc_BF6E
0000C54A 3F28 0008                  		move.w	8(a0),-(sp)
0000C54E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C554 6400                       		bcc.s	loc_C056
0000C556 6100 0000                  		bsr.w	SpeedToPos
0000C55A                            
0000C55A                            loc_C056:
0000C55A 0828 0001 0022             		btst	#1,$22(a0)
0000C560 6700                       		beq.s	loc_C0A0
0000C562 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C568 4EB9 0000 0000             		jsr	ObjHitFloor
0000C56E 4A41                       		tst.w	d1
0000C570 6A00 0000                  		bpl.w	loc_C09E
0000C574 D368 000C                  		add.w	d1,$C(a0)
0000C578 4268 0012                  		clr.w	$12(a0)
0000C57C 08A8 0001 0022             		bclr	#1,$22(a0)
0000C582 3011                       		move.w	(a1),d0
0000C584 0240 03FF                  		andi.w	#$3FF,d0
0000C588 0C40 016A                  		cmpi.w	#$16A,d0
0000C58C 6500                       		bcs.s	loc_C09E
0000C58E 3028 0030                  		move.w	$30(a0),d0
0000C592 E640                       		asr.w	#3,d0
0000C594 3140 0010                  		move.w	d0,$10(a0)
0000C598 117C 0001 0032             		move.b	#1,$32(a0)
0000C59E 4268 000E                  		clr.w	$E(a0)
0000C5A2                            
0000C5A2                            loc_C09E:
0000C5A2 6000                       		bra.s	loc_C0E6
0000C5A4                            ; ===========================================================================
0000C5A4                            
0000C5A4                            loc_C0A0:
0000C5A4 4A68 0010                  		tst.w	$10(a0)
0000C5A8 6700 0000                  		beq.w	loc_C0D6
0000C5AC 6B00                       		bmi.s	loc_C0BC
0000C5AE 7600                       		moveq	#0,d3
0000C5B0 1628 0019                  		move.b	$19(a0),d3
0000C5B4 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C5BA 4A41                       		tst.w	d1		; has block touched a wall?
0000C5BC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5BE 6000                       		bra.s	loc_C0E6
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            loc_C0BC:
0000C5C0 7600                       		moveq	#0,d3
0000C5C2 1628 0019                  		move.b	$19(a0),d3
0000C5C6 4643                       		not.w	d3
0000C5C8 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C5CE 4A41                       		tst.w	d1		; has block touched a wall?
0000C5D0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5D2 6000                       		bra.s	loc_C0E6
0000C5D4                            ; ===========================================================================
0000C5D4                            
0000C5D4                            Obj33_StopPush:
0000C5D4 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C5D8 6000                       		bra.s	loc_C0E6
0000C5DA                            ; ===========================================================================
0000C5DA                            
0000C5DA                            loc_C0D6:
0000C5DA 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5E2 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5E8 6400                       		bcc.s	loc_C104
0000C5EA                            
0000C5EA                            loc_C0E6:
0000C5EA 7200                       		moveq	#0,d1
0000C5EC 1228 0019                  		move.b	$19(a0),d1
0000C5F0 0641 000B                  		addi.w	#$B,d1
0000C5F4 343C 0010                  		move.w	#$10,d2
0000C5F8 363C 0011                  		move.w	#$11,d3
0000C5FC 381F                       		move.w	(sp)+,d4
0000C5FE 6100 0000                  		bsr.w	loc_C186
0000C602 6100                       		bsr.s	Obj33_ChkLava
0000C604 6000 FEC4                  		bra.w	loc_BFC6
0000C608                            ; ===========================================================================
0000C608                            
0000C608                            loc_C104:
0000C608 381F                       		move.w	(sp)+,d4
0000C60A 43F8 D000                  		lea	($FFFFD000).w,a1
0000C60E 08A9 0003 0022             		bclr	#3,$22(a1)
0000C614 08A8 0003 0022             		bclr	#3,$22(a0)
0000C61A 6000 FECE                  		bra.w	loc_BFE6
0000C61E                            ; ===========================================================================
0000C61E                            
0000C61E                            Obj33_ChkLava:
0000C61E 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C624 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C626 343C FFE0                  		move.w	#-$20,d2
0000C62A 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C630 6700                       		beq.s	Obj33_LoadLava
0000C632 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C638 6700                       		beq.s	Obj33_LoadLava
0000C63A 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C640 6700                       		beq.s	Obj33_LoadLava
0000C642 4E75                       		rts	
0000C644                            ; ===========================================================================
0000C644                            
0000C644                            Obj33_ChkLava2:
0000C644 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C64A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C64C 343C 0020                  		move.w	#$20,d2
0000C650 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C656 6700                       		beq.s	Obj33_LoadLava
0000C658 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C65E 6700                       		beq.s	Obj33_LoadLava
0000C660                            
0000C660                            Obj33_NoLava:
0000C660 4E75                       		rts	
0000C662                            ; ===========================================================================
0000C662                            
0000C662                            Obj33_LoadLava:
0000C662 6100 0000                  		bsr.w	SingleObjLoad
0000C666 6600                       		bne.s	locret_C184
0000C668 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C66C 3368 0008 0008             		move.w	8(a0),8(a1)
0000C672 D569 0008                  		add.w	d2,8(a1)
0000C676 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C67C 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C682 2348 003C                  		move.l	a0,$3C(a1)
0000C686                            
0000C686                            locret_C184:
0000C686 4E75                       		rts	
0000C688                            ; ===========================================================================
0000C688                            
0000C688                            loc_C186:				; XREF: loc_BF6E
0000C688 1028 0025                  		move.b	$25(a0),d0
0000C68C 6700 0000                  		beq.w	loc_C218
0000C690 5500                       		subq.b	#2,d0
0000C692 6600                       		bne.s	loc_C1AA
0000C694 6100 B37C                  		bsr.w	ExitPlatform
0000C698 0829 0003 0022             		btst	#3,$22(a1)
0000C69E 6600                       		bne.s	loc_C1A4
0000C6A0 4228 0025                  		clr.b	$25(a0)
0000C6A4 4E75                       		rts	
0000C6A6                            ; ===========================================================================
0000C6A6                            
0000C6A6                            loc_C1A4:
0000C6A6 3404                       		move.w	d4,d2
0000C6A8 6000 B8C6                  		bra.w	MvSonicOnPtfm
0000C6AC                            ; ===========================================================================
0000C6AC                            
0000C6AC                            loc_C1AA:
0000C6AC 5500                       		subq.b	#2,d0
0000C6AE 6600                       		bne.s	loc_C1F2
0000C6B0 6100 0000                  		bsr.w	SpeedToPos
0000C6B4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C6BA 4EB9 0000 0000             		jsr	ObjHitFloor
0000C6C0 4A41                       		tst.w	d1
0000C6C2 6A00 0000                  		bpl.w	locret_C1F0
0000C6C6 D368 000C                  		add.w	d1,$C(a0)
0000C6CA 4268 0012                  		clr.w	$12(a0)
0000C6CE 4228 0025                  		clr.b	$25(a0)
0000C6D2 3011                       		move.w	(a1),d0
0000C6D4 0240 03FF                  		andi.w	#$3FF,d0
0000C6D8 0C40 016A                  		cmpi.w	#$16A,d0
0000C6DC 6500                       		bcs.s	locret_C1F0
0000C6DE 3028 0030                  		move.w	$30(a0),d0
0000C6E2 E640                       		asr.w	#3,d0
0000C6E4 3140 0010                  		move.w	d0,$10(a0)
0000C6E8 117C 0001 0032             		move.b	#1,$32(a0)
0000C6EE 4268 000E                  		clr.w	$E(a0)
0000C6F2                            
0000C6F2                            locret_C1F0:
0000C6F2 4E75                       		rts	
0000C6F4                            ; ===========================================================================
0000C6F4                            
0000C6F4                            loc_C1F2:
0000C6F4 6100 0000                  		bsr.w	SpeedToPos
0000C6F8 3028 0008                  		move.w	8(a0),d0
0000C6FC 0240 000C                  		andi.w	#$C,d0
0000C700 6600 0000                  		bne.w	locret_C2E4
0000C704 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C70A 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C710 4268 0010                  		clr.w	$10(a0)
0000C714 5528 0025                  		subq.b	#2,$25(a0)
0000C718 4E75                       		rts	
0000C71A                            ; ===========================================================================
0000C71A                            
0000C71A                            loc_C218:
0000C71A 6100 0000                  		bsr.w	loc_FAC8
0000C71E 4A44                       		tst.w	d4
0000C720 6700 0000                  		beq.w	locret_C2E4
0000C724 6B00 0000                  		bmi.w	locret_C2E4
0000C728 4A28 0032                  		tst.b	$32(a0)
0000C72C 6700                       		beq.s	loc_C230
0000C72E 6000 0000                  		bra.w	locret_C2E4
0000C732                            ; ===========================================================================
0000C732                            
0000C732                            loc_C230:
0000C732 4A40                       		tst.w	d0
0000C734 6700 0000                  		beq.w	locret_C2E4
0000C738 6B00                       		bmi.s	loc_C268
0000C73A 0829 0000 0022             		btst	#0,$22(a1)
0000C740 6600 0000                  		bne.w	locret_C2E4
0000C744 3F00                       		move.w	d0,-(sp)
0000C746 7600                       		moveq	#0,d3
0000C748 1628 0019                  		move.b	$19(a0),d3
0000C74C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C752 301F                       		move.w	(sp)+,d0
0000C754 4A41                       		tst.w	d1
0000C756 6B00 0000                  		bmi.w	locret_C2E4
0000C75A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C762 7001                       		moveq	#1,d0
0000C764 323C 0040                  		move.w	#$40,d1
0000C768 6000                       		bra.s	loc_C294
0000C76A                            ; ===========================================================================
0000C76A                            
0000C76A                            loc_C268:
0000C76A 0829 0000 0022             		btst	#0,$22(a1)
0000C770 6700                       		beq.s	locret_C2E4
0000C772 3F00                       		move.w	d0,-(sp)
0000C774 7600                       		moveq	#0,d3
0000C776 1628 0019                  		move.b	$19(a0),d3
0000C77A 4643                       		not.w	d3
0000C77C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C782 301F                       		move.w	(sp)+,d0
0000C784 4A41                       		tst.w	d1
0000C786 6B00                       		bmi.s	locret_C2E4
0000C788 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C790 70FF                       		moveq	#-1,d0
0000C792 323C FFC0                  		move.w	#-$40,d1
0000C796                            
0000C796                            loc_C294:
0000C796 43F8 D000                  		lea	($FFFFD000).w,a1
0000C79A D169 0008                  		add.w	d0,8(a1)
0000C79E 3341 0014                  		move.w	d1,$14(a1)
0000C7A2 337C 0000 0010             		move.w	#0,$10(a1)
0000C7A8 3F00                       		move.w	d0,-(sp)
0000C7AA 303C 00A7                  		move.w	#$A7,d0
0000C7AE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C7B4 301F                       		move.w	(sp)+,d0
0000C7B6 4A28 0028                  		tst.b	$28(a0)
0000C7BA 6B00                       		bmi.s	locret_C2E4
0000C7BC 3F00                       		move.w	d0,-(sp)
0000C7BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7C4 301F                       		move.w	(sp)+,d0
0000C7C6 0C41 0004                  		cmpi.w	#4,d1
0000C7CA 6F00                       		ble.s	loc_C2E0
0000C7CC 317C 0400 0010             		move.w	#$400,$10(a0)
0000C7D2 4A40                       		tst.w	d0
0000C7D4 6A00                       		bpl.s	loc_C2D8
0000C7D6 4468 0010                  		neg.w	$10(a0)
0000C7DA                            
0000C7DA                            loc_C2D8:
0000C7DA 117C 0006 0025             		move.b	#6,$25(a0)
0000C7E0 6000                       		bra.s	locret_C2E4
0000C7E2                            ; ===========================================================================
0000C7E2                            
0000C7E2                            loc_C2E0:
0000C7E2 D368 000C                  		add.w	d1,$C(a0)
0000C7E6                            
0000C7E6                            locret_C2E4:
0000C7E6 4E75                       		rts	
0000C7E8                            ; ===========================================================================
0000C7E8                            ; ---------------------------------------------------------------------------
0000C7E8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7E8                            ; ---------------------------------------------------------------------------
0000C7E8                            Map_obj33:
0000C7E8                            	include "_maps\obj33.asm"
0000C7E8                            ; ---------------------------------------------------------------------------
0000C7E8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7E8                            ; ---------------------------------------------------------------------------
0000C7E8 0000                       		dc.w byte_C2EA-Map_obj33
0000C7EA 0000                       		dc.w byte_C2F0-Map_obj33
0000C7EC 01                         byte_C2EA:	dc.b 1
0000C7ED F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7F2 04                         byte_C2F0:	dc.b 4
0000C7F3 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7F8 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7FD F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C802 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C808 00                         		even
0000C808 00                         		even
0000C808                            
0000C808                            ; ===========================================================================
0000C808                            ; ---------------------------------------------------------------------------
0000C808                            ; Object 34 - zone title cards
0000C808                            ; ---------------------------------------------------------------------------
0000C808                            
0000C808                            Obj34:					; XREF: Obj_Index
0000C808 7000                       		moveq	#0,d0
0000C80A 1028 0024                  		move.b	$24(a0),d0
0000C80E 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C812 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C816                            ; ===========================================================================
0000C816 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C818 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C81A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C81C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C81E                            ; ===========================================================================
0000C81E                            
0000C81E                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C81E 2248                       		movea.l	a0,a1
0000C820 7000                       		moveq	#0,d0
0000C822 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C826 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C82C 6600                       		bne.s	Obj34_CheckFZ
0000C82E 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C830                            
0000C830                            Obj34_CheckFZ:
0000C830 3400                       		move.w	d0,d2
0000C832 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C838 6600                       		bne.s	Obj34_LoadConfig
0000C83A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C83C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C83E                            
0000C83E                            Obj34_LoadConfig:
0000C83E 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C844 E948                       		lsl.w	#4,d0
0000C846 D6C0                       		adda.w	d0,a3
0000C848 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C84E 7203                       		moveq	#3,d1
0000C850                            
0000C850                            Obj34_Loop:
0000C850 12BC 0034                  		move.b	#$34,0(a1)
0000C854 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C858 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C85C 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C860 335A 000A                  		move.w	(a2)+,$A(a1)
0000C864 135A 0024                  		move.b	(a2)+,$24(a1)
0000C868 101A                       		move.b	(a2)+,d0
0000C86A 6600                       		bne.s	Obj34_ActNumber
0000C86C 1002                       		move.b	d2,d0
0000C86E                            
0000C86E                            Obj34_ActNumber:
0000C86E 0C00 0007                  		cmpi.b	#7,d0
0000C872 6600                       		bne.s	Obj34_MakeSprite
0000C874 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C878 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C87E 6600                       		bne.s	Obj34_MakeSprite
0000C880 5300                       		subq.b	#1,d0
0000C882                            
0000C882                            Obj34_MakeSprite:
0000C882 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C886 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C88E 337C 8580 0002             		move.w	#$8580,2(a1)
0000C894 137C 0078 0019             		move.b	#$78,$19(a1)
0000C89A 137C 0000 0001             		move.b	#0,1(a1)
0000C8A0 137C 0000 0018             		move.b	#0,$18(a1)
0000C8A6 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8AC 43E9 0040                  		lea	$40(a1),a1	; next object
0000C8B0 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C8B4                            
0000C8B4                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C8B4 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8B6 3028 0030                  		move.w	$30(a0),d0
0000C8BA B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C8BE 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C8C0 6C00                       		bge.s	Obj34_Move
0000C8C2 4441                       		neg.w	d1
0000C8C4                            
0000C8C4                            Obj34_Move:
0000C8C4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8C8                            
0000C8C8                            loc_C3C8:
0000C8C8 3028 0008                  		move.w	8(a0),d0
0000C8CC 6B00                       		bmi.s	locret_C3D8
0000C8CE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8D2 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C8D4 6000 0000                  		bra.w	DisplaySprite
0000C8D8                            ; ===========================================================================
0000C8D8                            
0000C8D8                            locret_C3D8:
0000C8D8 4E75                       		rts	
0000C8DA                            ; ===========================================================================
0000C8DA                            
0000C8DA                            Obj34_Wait:				; XREF: Obj34_Index
0000C8DA 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C8DE 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C8E0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8E4 6000 0000                  		bra.w	DisplaySprite
0000C8E8                            ; ===========================================================================
0000C8E8                            
0000C8E8                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8E8 4A28 0001                  		tst.b	1(a0)
0000C8EC 6A00                       		bpl.s	Obj34_ChangeArt
0000C8EE 7220                       		moveq	#$20,d1
0000C8F0 3028 0032                  		move.w	$32(a0),d0
0000C8F4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8F8 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8FA 6C00                       		bge.s	Obj34_Move2
0000C8FC 4441                       		neg.w	d1
0000C8FE                            
0000C8FE                            Obj34_Move2:
0000C8FE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C902 3028 0008                  		move.w	8(a0),d0
0000C906 6B00                       		bmi.s	locret_C412
0000C908 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C90C 6400                       		bcc.s	locret_C412	; if yes, branch
0000C90E 6000 0000                  		bra.w	DisplaySprite
0000C912                            ; ===========================================================================
0000C912                            
0000C912                            locret_C412:
0000C912 4E75                       		rts	
0000C914                            ; ===========================================================================
0000C914                            
0000C914                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C914 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C91A 6600                       		bne.s	Obj34_Delete
0000C91C 7002                       		moveq	#2,d0
0000C91E 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C924 7000                       		moveq	#0,d0
0000C926 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C92A 0640 0015                  		addi.w	#$15,d0
0000C92E 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C934                            
0000C934                            Obj34_Delete:
0000C934 6000 0000                  		bra.w	DeleteObject
0000C938                            ; ===========================================================================
0000C938 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C93A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C93C 00E4                       		dc.w $E4
0000C93E 0206                       		dc.b 2,	6
0000C940 00EA                       		dc.w $EA
0000C942 0207                       		dc.b 2,	7
0000C944 00E0                       		dc.w $E0
0000C946 020A                       		dc.b 2,	$A
0000C948                            ; ---------------------------------------------------------------------------
0000C948                            ; Title	card configuration data
0000C948                            ; Format:
0000C948                            ; 4 bytes per item (YYYY XXXX)
0000C948                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C948                            ; ---------------------------------------------------------------------------
0000C948 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C958 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C968 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C978 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C988 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C998 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C9A8 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C9B8                            ; ===========================================================================
0000C9B8                            ; ---------------------------------------------------------------------------
0000C9B8                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C9B8                            ; ---------------------------------------------------------------------------
0000C9B8                            
0000C9B8                            Obj39:					; XREF: Obj_Index
0000C9B8 7000                       		moveq	#0,d0
0000C9BA 1028 0024                  		move.b	$24(a0),d0
0000C9BE 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C9C2 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C9C6                            ; ===========================================================================
0000C9C6 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C9C8 0000                       		dc.w loc_C50C-Obj39_Index
0000C9CA 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C9CC                            ; ===========================================================================
0000C9CC                            
0000C9CC                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C9CC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C9D0 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C9D2 4E75                       		rts	
0000C9D4                            ; ===========================================================================
0000C9D4                            
0000C9D4                            Obj39_Main:
0000C9D4 5428 0024                  		addq.b	#2,$24(a0)
0000C9D8 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C9DE 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9E4 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9E6 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9EC                            
0000C9EC                            loc_C4EC:
0000C9EC 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9F2 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9FA 317C 855E 0002             		move.w	#$855E,2(a0)
0000CA00 117C 0000 0001             		move.b	#0,1(a0)
0000CA06 117C 0000 0018             		move.b	#0,$18(a0)
0000CA0C                            
0000CA0C                            loc_C50C:				; XREF: Obj39_Index
0000CA0C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA0E 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA14 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA16 6500                       		bcs.s	Obj39_Move
0000CA18 4441                       		neg.w	d1
0000CA1A                            
0000CA1A                            Obj39_Move:
0000CA1A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA1E 6000 0000                  		bra.w	DisplaySprite
0000CA22                            ; ===========================================================================
0000CA22                            
0000CA22                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA22 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA28 5428 0024                  		addq.b	#2,$24(a0)
0000CA2C 4E75                       		rts	
0000CA2E                            ; ===========================================================================
0000CA2E                            
0000CA2E                            Obj39_Wait:				; XREF: Obj39_Index
0000CA2E 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA32 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA36 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA38 0828 0000 001A             		btst	#0,$1A(a0)
0000CA3E 6600                       		bne.s	Obj39_Display
0000CA40 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA44 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA46 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA4A 6000 0000                  		bra.w	DisplaySprite
0000CA4E                            ; ===========================================================================
0000CA4E                            
0000CA4E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA4E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA52 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA54 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA5A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA5E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA60 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA66 6000                       		bra.s	Obj39_Display
0000CA68                            ; ===========================================================================
0000CA68                            
0000CA68                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA68 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA6E                            
0000CA6E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA6E 6000 0000                  		bra.w	DisplaySprite
0000CA72                            ; ===========================================================================
0000CA72                            ; ---------------------------------------------------------------------------
0000CA72                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA72                            ; ---------------------------------------------------------------------------
0000CA72                            
0000CA72                            Obj3A:					; XREF: Obj_Index
0000CA72 7000                       		moveq	#0,d0
0000CA74 1028 0024                  		move.b	$24(a0),d0
0000CA78 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA7C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA80                            ; ===========================================================================
0000CA80 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA82 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA84 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA86 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA88 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA8A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA8C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA8E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA90 0000                       		dc.w loc_C766-Obj3A_Index
0000CA92                            ; ===========================================================================
0000CA92                            
0000CA92                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA92 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA96 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA98 4E75                       		rts	
0000CA9A                            ; ===========================================================================
0000CA9A                            
0000CA9A                            Obj3A_Main:
0000CA9A 2248                       		movea.l	a0,a1
0000CA9C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CAA2 7206                       		moveq	#6,d1
0000CAA4                            
0000CAA4                            Obj3A_Loop:
0000CAA4 12BC 003A                  		move.b	#$3A,0(a1)
0000CAA8 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAAC 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CAB0 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CAB4 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CAB8 135A 0024                  		move.b	(a2)+,$24(a1)
0000CABC 101A                       		move.b	(a2)+,d0
0000CABE 0C00 0006                  		cmpi.b	#6,d0
0000CAC2 6600                       		bne.s	loc_C5CA
0000CAC4 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CAC8                            
0000CAC8                            loc_C5CA:
0000CAC8 1340 001A                  		move.b	d0,$1A(a1)
0000CACC 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CAD4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CADA 137C 0000 0001             		move.b	#0,1(a1)
0000CAE0 43E9 0040                  		lea	$40(a1),a1
0000CAE4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CAE8                            
0000CAE8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CAE8 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAEA 3028 0030                  		move.w	$30(a0),d0
0000CAEE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAF2 6700                       		beq.s	loc_C61A	; if yes, branch
0000CAF4 6C00                       		bge.s	Obj3A_Move
0000CAF6 4441                       		neg.w	d1
0000CAF8                            
0000CAF8                            Obj3A_Move:
0000CAF8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAFC                            
0000CAFC                            loc_C5FE:				; XREF: loc_C61A
0000CAFC 3028 0008                  		move.w	8(a0),d0
0000CB00 6B00                       		bmi.s	locret_C60E
0000CB02 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB06 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CB08 6000 0000                  		bra.w	DisplaySprite
0000CB0C                            ; ===========================================================================
0000CB0C                            
0000CB0C                            locret_C60E:
0000CB0C 4E75                       		rts	
0000CB0E                            ; ===========================================================================
0000CB0E                            
0000CB0E                            loc_C610:				; XREF: loc_C61A
0000CB0E 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB14 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB18                            ; ===========================================================================
0000CB18                            
0000CB18                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB18 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB1E 67EE                       		beq.s	loc_C610
0000CB20 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB26 66D4                       		bne.s	loc_C5FE
0000CB28 5428 0024                  		addq.b	#2,$24(a0)
0000CB2C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB32                            
0000CB32                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB32 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB36 6600                       		bne.s	Obj3A_Display
0000CB38 5428 0024                  		addq.b	#2,$24(a0)
0000CB3C                            
0000CB3C                            Obj3A_Display:
0000CB3C 6000 0000                  		bra.w	DisplaySprite
0000CB40                            ; ===========================================================================
0000CB40                            
0000CB40                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB40 6100 0000                  		bsr.w	DisplaySprite
0000CB44 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB4A 7000                       		moveq	#0,d0
0000CB4C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB50 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB52 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB56 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB5C                            
0000CB5C                            Obj3A_RingBonus:
0000CB5C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB60 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB62 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB66 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB6C                            
0000CB6C                            Obj3A_ChkBonus:
0000CB6C 4A40                       		tst.w	d0		; is there any bonus?
0000CB6E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB70 303C 00C5                  		move.w	#$C5,d0
0000CB74 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB7A 5428 0024                  		addq.b	#2,$24(a0)
0000CB7E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB84 6600                       		bne.s	Obj3A_SetDelay
0000CB86 5828 0024                  		addq.b	#4,$24(a0)
0000CB8A                            
0000CB8A                            Obj3A_SetDelay:
0000CB8A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB90                            
0000CB90                            locret_C692:
0000CB90 4E75                       		rts	
0000CB92                            ; ===========================================================================
0000CB92                            
0000CB92                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB92 4EB9 0000 0000             		jsr	AddPoints
0000CB98 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB9C 0200 0003                  		andi.b	#3,d0
0000CBA0 66EE                       		bne.s	locret_C692
0000CBA2 303C 00CD                  		move.w	#$CD,d0
0000CBA6 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBAC                            ; ===========================================================================
0000CBAC                            
0000CBAC                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBAC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBB0 0240 0007                  		andi.w	#7,d0
0000CBB4 E748                       		lsl.w	#3,d0
0000CBB6 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CBBA 0241 0003                  		andi.w	#3,d1
0000CBBE D241                       		add.w	d1,d1
0000CBC0 D041                       		add.w	d1,d0
0000CBC2 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CBC6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CBCA 4A40                       		tst.w	d0
0000CBCC 6600                       		bne.s	Obj3A_ChkSS
0000CBCE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CBD4 6000                       		bra.s	Obj3A_Display2
0000CBD6                            ; ===========================================================================
0000CBD6                            
0000CBD6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CBD6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CBDA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CBDE 6700                       		beq.s	loc_C6EA	; if not, branch
0000CBE0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBE6 6000                       		bra.s	Obj3A_Display2
0000CBE8                            ; ===========================================================================
0000CBE8                            
0000CBE8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBE8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBEE                            
0000CBEE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBEE 6000 0000                  		bra.w	DisplaySprite
0000CBF2                            ; ===========================================================================
0000CBF2                            ; ---------------------------------------------------------------------------
0000CBF2                            ; Level	order array
0000CBF2                            ; ---------------------------------------------------------------------------
0000CBF2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC22                            		even
0000CC22                            ; ===========================================================================
0000CC22                            
0000CC22                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC22 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC24 3028 0032                  		move.w	$32(a0),d0
0000CC28 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC2C 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC2E 6C00                       		bge.s	Obj3A_Move2
0000CC30 4441                       		neg.w	d1
0000CC32                            
0000CC32                            Obj3A_Move2:
0000CC32 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC36 3028 0008                  		move.w	8(a0),d0
0000CC3A 6B00                       		bmi.s	locret_C748
0000CC3C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC40 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC42 6000 0000                  		bra.w	DisplaySprite
0000CC46                            ; ===========================================================================
0000CC46                            
0000CC46                            locret_C748:
0000CC46 4E75                       		rts	
0000CC48                            ; ===========================================================================
0000CC48                            
0000CC48                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC48 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC4E 6600 0000                  		bne.w	DeleteObject
0000CC52 5428 0024                  		addq.b	#2,$24(a0)
0000CC56 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC5A 303C 008D                  		move.w	#$8D,d0
0000CC5E 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC64                            ; ===========================================================================
0000CC64                            
0000CC64                            loc_C766:				; XREF: Obj3A_Index
0000CC64 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC68 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC6E 6700 0000                  		beq.w	DeleteObject
0000CC72 4E75                       		rts	
0000CC74                            ; ===========================================================================
0000CC74 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC7A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC7C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC82 0201                       		dc.b 2,	1
0000CC84 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC8A 0206                       		dc.b 2,	6
0000CC8C 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC92 0202                       		dc.b 2,	2
0000CC94 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC9A 0203                       		dc.b 2,	3
0000CC9C 0560 0120 010C             		dc.w $560, $120, $10C
0000CCA2 0204                       		dc.b 2,	4
0000CCA4 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CCAA 0205                       		dc.b 2,	5
0000CCAC                            ; ===========================================================================
0000CCAC                            ; ---------------------------------------------------------------------------
0000CCAC                            ; Object 7E - special stage results screen
0000CCAC                            ; ---------------------------------------------------------------------------
0000CCAC                            
0000CCAC                            Obj7E:					; XREF: Obj_Index
0000CCAC 7000                       		moveq	#0,d0
0000CCAE 1028 0024                  		move.b	$24(a0),d0
0000CCB2 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CCB6 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CCBA                            ; ===========================================================================
0000CCBA 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CCBC 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CCBE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCC0 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CCC2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCC4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCC6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCC8 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CCCA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCCC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCCE 0000                       		dc.w loc_C91A-Obj7E_Index
0000CCD0                            ; ===========================================================================
0000CCD0                            
0000CCD0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CCD0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCD4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CCD6 4E75                       		rts	
0000CCD8                            ; ===========================================================================
0000CCD8                            
0000CCD8                            Obj7E_Main:
0000CCD8 2248                       		movea.l	a0,a1
0000CCDA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CCE0 7203                       		moveq	#3,d1
0000CCE2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCE8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCEA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCEC                            
0000CCEC                            Obj7E_Loop:
0000CCEC 12BC 007E                  		move.b	#$7E,0(a1)
0000CCF0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCF4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCF8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCFC 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD00 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD04 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD0C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD12 137C 0000 0001             		move.b	#0,1(a1)
0000CD18 43E9 0040                  		lea	$40(a1),a1
0000CD1C 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD20                            
0000CD20 7007                       		moveq	#7,d0
0000CD22 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD26 6700                       		beq.s	loc_C842
0000CD28 7000                       		moveq	#0,d0
0000CD2A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD2E 6600                       		bne.s	loc_C842	; if not, branch
0000CD30 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD32 317C 0018 0008             		move.w	#$18,8(a0)
0000CD38 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD3E                            
0000CD3E                            loc_C842:
0000CD3E 1140 001A                  		move.b	d0,$1A(a0)
0000CD42                            
0000CD42                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD42 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD44 3028 0030                  		move.w	$30(a0),d0
0000CD48 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD4C 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD4E 6C00                       		bge.s	Obj7E_Move
0000CD50 4441                       		neg.w	d1
0000CD52                            
0000CD52                            Obj7E_Move:
0000CD52 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD56                            
0000CD56                            loc_C85A:				; XREF: loc_C86C
0000CD56 3028 0008                  		move.w	8(a0),d0
0000CD5A 6B00                       		bmi.s	locret_C86A
0000CD5C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD60 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD62 6000 0000                  		bra.w	DisplaySprite
0000CD66                            ; ===========================================================================
0000CD66                            
0000CD66                            locret_C86A:
0000CD66 4E75                       		rts	
0000CD68                            ; ===========================================================================
0000CD68                            
0000CD68                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD68 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD6E 66E6                       		bne.s	loc_C85A
0000CD70 5428 0024                  		addq.b	#2,$24(a0)
0000CD74 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD7A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD80                            
0000CD80                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD80 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD84 6600                       		bne.s	Obj7E_Display
0000CD86 5428 0024                  		addq.b	#2,$24(a0)
0000CD8A                            
0000CD8A                            Obj7E_Display:
0000CD8A 6000 0000                  		bra.w	DisplaySprite
0000CD8E                            ; ===========================================================================
0000CD8E                            
0000CD8E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD8E 6100 0000                  		bsr.w	DisplaySprite
0000CD92 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD98 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD9C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD9E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDA4 700A                       		moveq	#10,d0		; add 10 to score
0000CDA6 4EB9 0000 0000             		jsr	AddPoints
0000CDAC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDB0 0200 0003                  		andi.b	#3,d0
0000CDB4 6600                       		bne.s	locret_C8EA
0000CDB6 303C 00CD                  		move.w	#$CD,d0
0000CDBA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDC0                            ; ===========================================================================
0000CDC0                            
0000CDC0                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CDC0 303C 00C5                  		move.w	#$C5,d0
0000CDC4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDCA 5428 0024                  		addq.b	#2,$24(a0)
0000CDCE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDD4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CDDA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CDDC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDE2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDE6                            
0000CDE6                            locret_C8EA:
0000CDE6 4E75                       		rts	
0000CDE8                            ; ===========================================================================
0000CDE8                            
0000CDE8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDE8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDEE 6000 0000                  		bra.w	DisplaySprite
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDF2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDF8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDFE 303C 00BF                  		move.w	#$BF,d0
0000CE02 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CE08 5428 0024                  		addq.b	#2,$24(a0)
0000CE0C 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE12 6000 0000                  		bra.w	DisplaySprite
0000CE16                            ; ===========================================================================
0000CE16                            
0000CE16                            loc_C91A:				; XREF: Obj7E_Index
0000CE16 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE1A 0200 000F                  		andi.b	#$F,d0
0000CE1E 6600                       		bne.s	Obj7E_Display2
0000CE20 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE26                            
0000CE26                            Obj7E_Display2:
0000CE26 6000 0000                  		bra.w	DisplaySprite
0000CE2A                            ; ===========================================================================
0000CE2A 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE30 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE32 0320 0120 0118             		dc.w $320, $120, $118
0000CE38 0201                       		dc.b 2,	1
0000CE3A 0360 0120 0128             		dc.w $360, $120, $128
0000CE40 0202                       		dc.b 2,	2
0000CE42 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE48 0203                       		dc.b 2,	3
0000CE4A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE50 0206                       		dc.b 2,	6
0000CE52                            ; ===========================================================================
0000CE52                            ; ---------------------------------------------------------------------------
0000CE52                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE52                            ; ---------------------------------------------------------------------------
0000CE52                            
0000CE52                            Obj7F:					; XREF: Obj_Index
0000CE52 7000                       		moveq	#0,d0
0000CE54 1028 0024                  		move.b	$24(a0),d0
0000CE58 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE5C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE60                            ; ===========================================================================
0000CE60 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE62 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE64                            
0000CE64                            ; ---------------------------------------------------------------------------
0000CE64                            ; X-axis positions for chaos emeralds
0000CE64                            ; ---------------------------------------------------------------------------
0000CE64 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE70                            ; ===========================================================================
0000CE70                            
0000CE70                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE70 2248                       		movea.l	a0,a1
0000CE72 45F9 0000 CE64             		lea	(Obj7F_PosData).l,a2
0000CE78 7400                       		moveq	#0,d2
0000CE7A 7200                       		moveq	#0,d1
0000CE7C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE80 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE82 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE86                            
0000CE86                            Obj7F_Loop:
0000CE86 12BC 007F                  		move.b	#$7F,0(a1)
0000CE8A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE8E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE94 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE98 1633 2000                  		move.b	(a3,d2.w),d3
0000CE9C 1343 001A                  		move.b	d3,$1A(a1)
0000CEA0 1343 001C                  		move.b	d3,$1C(a1)
0000CEA4 5202                       		addq.b	#1,d2
0000CEA6 5429 0024                  		addq.b	#2,$24(a1)
0000CEAA 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CEB2 337C 8541 0002             		move.w	#$8541,2(a1)
0000CEB8 137C 0000 0001             		move.b	#0,1(a1)
0000CEBE 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEC2 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CEC6                            
0000CEC6                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CEC6 1028 001A                  		move.b	$1A(a0),d0
0000CECA 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CED0 0C00 0006                  		cmpi.b	#6,d0
0000CED4 6600                       		bne.s	Obj7F_Display
0000CED6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CEDC                            
0000CEDC                            Obj7F_Display:
0000CEDC 6000 0000                  		bra.w	DisplaySprite
0000CEE0                            ; ===========================================================================
0000CEE0                            ; ---------------------------------------------------------------------------
0000CEE0                            ; Sprite mappings - zone title cards
0000CEE0                            ; ---------------------------------------------------------------------------
0000CEE0 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CEE2 0000                       		dc.w byte_CA2C-Map_obj34
0000CEE4 0000                       		dc.w byte_CA5A-Map_obj34
0000CEE6 0000                       		dc.w byte_CA7A-Map_obj34
0000CEE8 0000                       		dc.w byte_CAA8-Map_obj34
0000CEEA 0000                       		dc.w byte_CADC-Map_obj34
0000CEEC 0000                       		dc.w byte_CB10-Map_obj34
0000CEEE 0000                       		dc.w byte_CB26-Map_obj34
0000CEF0 0000                       		dc.w byte_CB31-Map_obj34
0000CEF2 0000                       		dc.w byte_CB3C-Map_obj34
0000CEF4 0000                       		dc.w byte_CB47-Map_obj34
0000CEF6 0000                       		dc.w byte_CB8A-Map_obj34
0000CEF8 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CEF9 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEFE F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CF03 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CF08 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF0D F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF12 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF17 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF1C F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF21 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF26 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF2B F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF30 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF35 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF36 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF3B F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF40 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF45 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF4A F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF4F F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF54 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF59 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF5E F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF63 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF68 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF6D F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF72 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF77 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF7C F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF81 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF86 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF8B F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF90 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF95 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF9A F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF9F F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CFA4 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CFA5 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CFAA F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFAF F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CFB4 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CFB9 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CFBE 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CFBF F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CFC4 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CFC9 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CFCE F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CFD3 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CFD8 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CFDD F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFE2 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFE7 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFEC F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFF1 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFF6 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFFB F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D000 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D005 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D00A F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D00F F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D014 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D015 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D01A F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D01F F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D024 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D029 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D02E F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D033 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D038 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D03D F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D042 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D047 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D04C F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D051 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D056 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D05B F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D060 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D065 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D06A F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D06F F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D074 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D079 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D07E 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D07F F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D084 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D089 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D08E F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D093 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D098 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D09D F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D0A2 04                         byte_CB10:	dc.b 4			; ZONE
0000D0A3 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D0A8 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0AD F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D0B2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D0B7 00                         		dc.b 0
0000D0B8 02                         byte_CB26:	dc.b 2			; ACT 1
0000D0B9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0BE F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D0C3 02                         byte_CB31:	dc.b 2			; ACT 2
0000D0C4 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0C9 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D0CE 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D0CF 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0D4 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D0D9 0D                         byte_CB47:	dc.b $D			; Oval
0000D0DA E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D0DF E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0E4 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0E9 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0EE 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0F3 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0F8 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0FD FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D102 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D107 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D10C FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D111 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D116 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D11B 00                         		dc.b 0
0000D11C 05                         byte_CB8A:	dc.b 5			; FINAL
0000D11D F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D122 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D127 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D12C F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D131 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D136                            		even
0000D136                            ; ---------------------------------------------------------------------------
0000D136                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D136                            ; ---------------------------------------------------------------------------
0000D136                            Map_obj39:
0000D136                            	include "_maps\obj39.asm"
0000D136                            ; ---------------------------------------------------------------------------
0000D136                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D136                            ; ---------------------------------------------------------------------------
0000D136 0000                       		dc.w byte_CBAC-Map_obj39
0000D138 0000                       		dc.w byte_CBB7-Map_obj39
0000D13A 0000                       		dc.w byte_CBC2-Map_obj39
0000D13C 0000                       		dc.w byte_CBCD-Map_obj39
0000D13E 02                         byte_CBAC:	dc.b 2
0000D13F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D144 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D149 02                         byte_CBB7:	dc.b 2
0000D14A F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D14F F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D154 02                         byte_CBC2:	dc.b 2
0000D155 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D15A F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D15F 02                         byte_CBCD:	dc.b 2
0000D160 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D165 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D16A                            		even
0000D16A                            		even
0000D16A                            
0000D16A                            ; ---------------------------------------------------------------------------
0000D16A                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D16A                            ; ---------------------------------------------------------------------------
0000D16A 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D16C 0000                       		dc.w byte_CC13-Map_obj3A
0000D16E 0000                       		dc.w byte_CC32-Map_obj3A
0000D170 0000                       		dc.w byte_CC51-Map_obj3A
0000D172 0000                       		dc.w byte_CC75-Map_obj3A
0000D174 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D176 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D178 FF59                       		dc.w byte_CB31-Map_obj3A
0000D17A FF64                       		dc.w byte_CB3C-Map_obj3A
0000D17C 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D17D F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D182 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D187 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D18C F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D191 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D196 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D19B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D1A0 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D1A5 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D1AA F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1AF F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D1B4 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D1B9 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D1BE F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D1C3 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D1C8 06                         byte_CC13:	dc.b 6			; PASSED
0000D1C9 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D1CE F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D1D3 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D1D8 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D1DD F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1E2 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1E7 06                         byte_CC32:	dc.b 6			; SCORE
0000D1E8 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1ED F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1F2 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1F7 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1FC F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D201 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D206 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D207 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D20C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D211 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D216 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D21B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D220 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D225 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D22A 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D22B F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D230 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D235 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D23A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D23F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D244 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D249 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D24E                            		even
0000D24E                            ; ---------------------------------------------------------------------------
0000D24E                            ; Sprite mappings - special stage results screen
0000D24E                            ; ---------------------------------------------------------------------------
0000D24E 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D250 0000                       		dc.w byte_CCEE-Map_obj7E
0000D252 0000                       		dc.w byte_CD0D-Map_obj7E
0000D254 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D256 0000                       		dc.w byte_CD31-Map_obj7E
0000D258 0000                       		dc.w byte_CD46-Map_obj7E
0000D25A 0000                       		dc.w byte_CD5B-Map_obj7E
0000D25C 0000                       		dc.w byte_CD6B-Map_obj7E
0000D25E 0000                       		dc.w byte_CDA8-Map_obj7E
0000D260 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D261 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D266 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D26B F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D270 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D275 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D27A F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D27F F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D284 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D289 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D28E F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D293 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D298 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D29D F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D2A2 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D2A3 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2A8 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2AD F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2B2 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2B7 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D2BC FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D2C1 07                         byte_CD0D:	dc.b 7
0000D2C2 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D2C7 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2CC F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2D1 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D2D6 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2DB F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D2E0 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2E5 04                         byte_CD31:	dc.b 4
0000D2E6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2EB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2F0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2F5 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2FA 04                         byte_CD46:	dc.b 4
0000D2FB F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D300 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D305 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D30A F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D30F 03                         byte_CD5B:	dc.b 3
0000D310 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D315 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D31A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D31F 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D320 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D325 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D32A F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D32F F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D334 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D339 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D33E F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D343 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D348 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D34D F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D352 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D357 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D35C 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D35D F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D362 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D367 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D36C F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D371 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D376 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D37B F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D380 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D385 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D38A F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D38F F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D394 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D399 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D39E F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D3A3 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D3A8                            		even
0000D3A8                            ; ---------------------------------------------------------------------------
0000D3A8                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3A8                            ; ---------------------------------------------------------------------------
0000D3A8                            Map_obj7F:
0000D3A8                            	include "_maps\obj7F.asm"
0000D3A8                            ; ---------------------------------------------------------------------------
0000D3A8                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3A8                            ; ---------------------------------------------------------------------------
0000D3A8 0000                       		dc.w byte_CE02-Map_obj7F
0000D3AA 0000                       		dc.w byte_CE08-Map_obj7F
0000D3AC 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3AE 0000                       		dc.w byte_CE14-Map_obj7F
0000D3B0 0000                       		dc.w byte_CE1A-Map_obj7F
0000D3B2 0000                       		dc.w byte_CE20-Map_obj7F
0000D3B4 0000                       		dc.w byte_CE26-Map_obj7F
0000D3B6 01                         byte_CE02:	dc.b 1
0000D3B7 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D3BC 01                         byte_CE08:	dc.b 1
0000D3BD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D3C2 01                         byte_CE0E:	dc.b 1
0000D3C3 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D3C8 01                         byte_CE14:	dc.b 1
0000D3C9 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D3CE 01                         byte_CE1A:	dc.b 1
0000D3CF F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D3D4 01                         byte_CE20:	dc.b 1
0000D3D5 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D3DA 00                         byte_CE26:	dc.b 0			; Blank frame
0000D3DC 00                         		even
0000D3DC 00                         		even
0000D3DC                            
0000D3DC                            ; ===========================================================================
0000D3DC                            ; ---------------------------------------------------------------------------
0000D3DC                            ; Object 36 - spikes
0000D3DC                            ; ---------------------------------------------------------------------------
0000D3DC                            
0000D3DC                            Obj36:					; XREF: Obj_Index
0000D3DC 7000                       		moveq	#0,d0
0000D3DE 1028 0024                  		move.b	$24(a0),d0
0000D3E2 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3E6 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3EA                            ; ===========================================================================
0000D3EA 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3EC 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3EE                            
0000D3EE 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3F0 0110                       		dc.b 1,	$10
0000D3F2 0204                       		dc.b 2,	4
0000D3F4 031C                       		dc.b 3,	$1C
0000D3F6 0440                       		dc.b 4,	$40
0000D3F8 0510                       		dc.b 5,	$10
0000D3FA                            ; ===========================================================================
0000D3FA                            
0000D3FA                            Obj36_Main:				; XREF: Obj36_Index
0000D3FA 5428 0024                  		addq.b	#2,$24(a0)
0000D3FE 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D406 317C 051B 0002             		move.w	#$51B,2(a0)
0000D40C 0028 0004 0001             		ori.b	#4,1(a0)
0000D412 117C 0004 0018             		move.b	#4,$18(a0)
0000D418 1028 0028                  		move.b	$28(a0),d0
0000D41C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D422 0240 00F0                  		andi.w	#$F0,d0
0000D426 43F9 0000 D3EE             		lea	(Obj36_Var).l,a1
0000D42C E648                       		lsr.w	#3,d0
0000D42E D2C0                       		adda.w	d0,a1
0000D430 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D434 1159 0019                  		move.b	(a1)+,$19(a0)
0000D438 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D43E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D444                            
0000D444                            Obj36_Solid:				; XREF: Obj36_Index
0000D444 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D448 343C 0004                  		move.w	#4,d2
0000D44C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D452 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D454 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D45A 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D45C 343C 0014                  		move.w	#$14,d2
0000D460                            
0000D460                            ; Spikes types $1x and $5x face	sideways
0000D460                            
0000D460                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D460 323C 001B                  		move.w	#$1B,d1
0000D464 3602                       		move.w	d2,d3
0000D466 5243                       		addq.w	#1,d3
0000D468 3828 0008                  		move.w	8(a0),d4
0000D46C 6100 0000                  		bsr.w	SolidObject
0000D470 0828 0003 0022             		btst	#3,$22(a0)
0000D476 6600                       		bne.s	Obj36_Display
0000D478 0C44 0001                  		cmpi.w	#1,d4
0000D47C 6700                       		beq.s	Obj36_Hurt
0000D47E 6000                       		bra.s	Obj36_Display
0000D480                            ; ===========================================================================
0000D480                            
0000D480                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D480                            
0000D480                            Obj36_Upright:				; XREF: Obj36_Solid
0000D480 7200                       		moveq	#0,d1
0000D482 1228 0019                  		move.b	$19(a0),d1
0000D486 0641 000B                  		addi.w	#$B,d1
0000D48A 343C 0010                  		move.w	#$10,d2
0000D48E 363C 0011                  		move.w	#$11,d3
0000D492 3828 0008                  		move.w	8(a0),d4
0000D496 6100 0000                  		bsr.w	SolidObject
0000D49A 0828 0003 0022             		btst	#3,$22(a0)
0000D4A0 6600                       		bne.s	Obj36_Hurt
0000D4A2 4A44                       		tst.w	d4
0000D4A4 6A00                       		bpl.s	Obj36_Display
0000D4A6                            
0000D4A6                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D4A6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D4AA 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4AC 2F08                       		move.l	a0,-(sp)
0000D4AE 2448                       		movea.l	a0,a2
0000D4B0 41F8 D000                  		lea	($FFFFD000).w,a0
0000D4B4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D4BA 6400                       		bcc.s	loc_CF20
0000D4BC 2628 000C                  		move.l	$C(a0),d3
0000D4C0 3028 0012                  		move.w	$12(a0),d0
0000D4C4 48C0                       		ext.l	d0
0000D4C6 E180                       		asl.l	#8,d0
0000D4C8 9680                       		sub.l	d0,d3
0000D4CA 2143 000C                  		move.l	d3,$C(a0)
0000D4CE 4EB9 0000 0000             		jsr	HurtSonic
0000D4D4                            
0000D4D4                            loc_CF20:
0000D4D4 205F                       		movea.l	(sp)+,a0
0000D4D6                            
0000D4D6                            Obj36_Display:
0000D4D6 6100 0000                  		bsr.w	DisplaySprite
0000D4DA 3028 0030                  		move.w	$30(a0),d0
0000D4DE 0240 FF80                  		andi.w	#$FF80,d0
0000D4E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4E6 0441 0080                  		subi.w	#$80,d1
0000D4EA 0241 FF80                  		andi.w	#$FF80,d1
0000D4EE 9041                       		sub.w	d1,d0
0000D4F0 0C40 0280                  		cmpi.w	#$280,d0
0000D4F4 6200 0000                  		bhi.w	DeleteObject
0000D4F8 4E75                       		rts	
0000D4FA                            ; ===========================================================================
0000D4FA                            
0000D4FA                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4FA 7000                       		moveq	#0,d0
0000D4FC 1028 0028                  		move.b	$28(a0),d0
0000D500 D040                       		add.w	d0,d0
0000D502 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D506 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D50A                            ; ===========================================================================
0000D50A 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D50C 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D50E 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D510                            ; ===========================================================================
0000D510                            
0000D510                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D510 4E75                       		rts			; don't move the object
0000D512                            ; ===========================================================================
0000D512                            
0000D512                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D512 6100 0000                  		bsr.w	Obj36_Wait
0000D516 7000                       		moveq	#0,d0
0000D518 1028 0034                  		move.b	$34(a0),d0
0000D51C D068 0032                  		add.w	$32(a0),d0
0000D520 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D524 4E75                       		rts	
0000D526                            ; ===========================================================================
0000D526                            
0000D526                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D526 6100 0000                  		bsr.w	Obj36_Wait
0000D52A 7000                       		moveq	#0,d0
0000D52C 1028 0034                  		move.b	$34(a0),d0
0000D530 D068 0030                  		add.w	$30(a0),d0
0000D534 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D538 4E75                       		rts	
0000D53A                            ; ===========================================================================
0000D53A                            
0000D53A                            Obj36_Wait:
0000D53A 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D53E 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D540 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D544 6600                       		bne.s	locret_CFE6
0000D546 4A28 0001                  		tst.b	1(a0)
0000D54A 6A00                       		bpl.s	locret_CFE6
0000D54C 303C 00B6                  		move.w	#$B6,d0
0000D550 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D556 6000                       		bra.s	locret_CFE6
0000D558                            ; ===========================================================================
0000D558                            
0000D558                            loc_CFA4:
0000D558 4A68 0036                  		tst.w	$36(a0)
0000D55C 6700                       		beq.s	loc_CFC6
0000D55E 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D564 6400                       		bcc.s	locret_CFE6
0000D566 317C 0000 0034             		move.w	#0,$34(a0)
0000D56C 317C 0000 0036             		move.w	#0,$36(a0)
0000D572 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D578 6000                       		bra.s	locret_CFE6
0000D57A                            ; ===========================================================================
0000D57A                            
0000D57A                            loc_CFC6:
0000D57A 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D580 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D586 6500                       		bcs.s	locret_CFE6
0000D588 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D58E 317C 0001 0036             		move.w	#1,$36(a0)
0000D594 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D59A                            
0000D59A                            locret_CFE6:
0000D59A 4E75                       		rts	
0000D59C                            ; ===========================================================================
0000D59C                            ; ---------------------------------------------------------------------------
0000D59C                            ; Sprite mappings - spikes
0000D59C                            ; ---------------------------------------------------------------------------
0000D59C                            Map_obj36:
0000D59C                            	include "_maps\obj36.asm"
0000D59C                            ; ---------------------------------------------------------------------------
0000D59C                            ; Sprite mappings - spikes
0000D59C                            ; ---------------------------------------------------------------------------
0000D59C 0000                       		dc.w byte_CFF4-Map_obj36
0000D59E 0000                       		dc.w byte_D004-Map_obj36
0000D5A0 0000                       		dc.w byte_D014-Map_obj36
0000D5A2 0000                       		dc.w byte_D01A-Map_obj36
0000D5A4 0000                       		dc.w byte_D02A-Map_obj36
0000D5A6 0000                       		dc.w byte_D049-Map_obj36
0000D5A8 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D5A9 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5AE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5B3 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D5B8 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D5B9 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D5BE FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5C3 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D5C8 01                         byte_D014:	dc.b 1			; 1 spike
0000D5C9 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5CE 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D5CF F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D5D4 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5D9 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D5DE 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D5DF F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5E4 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5E9 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5EE F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5F3 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5F8 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5FD 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5FE FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D604 00                         		even
0000D604 00                         		even
0000D604                            
0000D604                            ; ===========================================================================
0000D604                            ; ---------------------------------------------------------------------------
0000D604                            ; Object 3B - purple rock (GHZ)
0000D604                            ; ---------------------------------------------------------------------------
0000D604                            
0000D604                            Obj3B:					; XREF: Obj_Index
0000D604 7000                       		moveq	#0,d0
0000D606 1028 0024                  		move.b	$24(a0),d0
0000D60A 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D60E 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D612                            ; ===========================================================================
0000D612 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D614 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D616                            ; ===========================================================================
0000D616                            
0000D616                            Obj3B_Main:				; XREF: Obj3B_Index
0000D616 5428 0024                  		addq.b	#2,$24(a0)
0000D61A 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D622 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D628 117C 0004 0001             		move.b	#4,1(a0)
0000D62E 117C 0013 0019             		move.b	#$13,$19(a0)
0000D634 117C 0004 0018             		move.b	#4,$18(a0)
0000D63A                            
0000D63A                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D63A 323C 001B                  		move.w	#$1B,d1
0000D63E 343C 0010                  		move.w	#$10,d2
0000D642 363C 0010                  		move.w	#$10,d3
0000D646 3828 0008                  		move.w	8(a0),d4
0000D64A 6100 0000                  		bsr.w	SolidObject
0000D64E 6100 0000                  		bsr.w	DisplaySprite
0000D652 3028 0008                  		move.w	8(a0),d0
0000D656 0240 FF80                  		andi.w	#$FF80,d0
0000D65A 3238 F700                  		move.w	($FFFFF700).w,d1
0000D65E 0441 0080                  		subi.w	#$80,d1
0000D662 0241 FF80                  		andi.w	#$FF80,d1
0000D666 9041                       		sub.w	d1,d0
0000D668 0C40 0280                  		cmpi.w	#$280,d0
0000D66C 6200 0000                  		bhi.w	DeleteObject
0000D670 4E75                       		rts	
0000D672                            ; ===========================================================================
0000D672                            ; ---------------------------------------------------------------------------
0000D672                            ; Object 49 - waterfall	sound effect (GHZ)
0000D672                            ; ---------------------------------------------------------------------------
0000D672                            
0000D672                            Obj49:					; XREF: Obj_Index
0000D672 7000                       		moveq	#0,d0
0000D674 1028 0024                  		move.b	$24(a0),d0
0000D678 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D67C 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D680                            ; ===========================================================================
0000D680 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D682 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D684                            ; ===========================================================================
0000D684                            
0000D684                            Obj49_Main:				; XREF: Obj49_Index
0000D684 5428 0024                  		addq.b	#2,$24(a0)
0000D688 117C 0004 0001             		move.b	#4,1(a0)
0000D68E                            
0000D68E                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D68E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D692 0200 003F                  		andi.b	#$3F,d0
0000D696 6600                       		bne.s	Obj49_ChkDel
0000D698 303C 00D0                  		move.w	#$D0,d0
0000D69C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D6A2                            
0000D6A2                            Obj49_ChkDel:
0000D6A2 3028 0008                  		move.w	8(a0),d0
0000D6A6 0240 FF80                  		andi.w	#$FF80,d0
0000D6AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6AE 0441 0080                  		subi.w	#$80,d1
0000D6B2 0241 FF80                  		andi.w	#$FF80,d1
0000D6B6 9041                       		sub.w	d1,d0
0000D6B8 0C40 0280                  		cmpi.w	#$280,d0
0000D6BC 6200 0000                  		bhi.w	DeleteObject
0000D6C0 4E75                       		rts	
0000D6C2                            ; ===========================================================================
0000D6C2                            ; ---------------------------------------------------------------------------
0000D6C2                            ; Sprite mappings - purple rock	(GHZ)
0000D6C2                            ; ---------------------------------------------------------------------------
0000D6C2                            Map_obj3B:
0000D6C2                            	include "_maps\obj3B.asm"
0000D6C2                            ; ---------------------------------------------------------------------------
0000D6C2                            ; Sprite mappings - purple rock	(GHZ)
0000D6C2                            ; ---------------------------------------------------------------------------
0000D6C2 0000                       		dc.w byte_D110-Map_obj3B
0000D6C4 02                         byte_D110:	dc.b 2
0000D6C5 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D6CA F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D6D0 00                         		even
0000D6D0 00                         		even
0000D6D0                            
0000D6D0                            ; ===========================================================================
0000D6D0                            ; ---------------------------------------------------------------------------
0000D6D0                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D6D0                            ; ---------------------------------------------------------------------------
0000D6D0                            
0000D6D0                            Obj3C:					; XREF: Obj_Index
0000D6D0 7000                       		moveq	#0,d0
0000D6D2 1028 0024                  		move.b	$24(a0),d0
0000D6D6 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D6DA 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D6DE 6000 0000                  		bra.w	MarkObjGone
0000D6E2                            ; ===========================================================================
0000D6E2 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6E4 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6E6 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6E8                            ; ===========================================================================
0000D6E8                            
0000D6E8                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6E8 5428 0024                  		addq.b	#2,$24(a0)
0000D6EC 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6F4 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6FA 117C 0004 0001             		move.b	#4,1(a0)
0000D700 117C 0010 0019             		move.b	#$10,$19(a0)
0000D706 117C 0004 0018             		move.b	#4,$18(a0)
0000D70C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D712                            
0000D712                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D712 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D718 323C 001B                  		move.w	#$1B,d1
0000D71C 343C 0020                  		move.w	#$20,d2
0000D720 363C 0020                  		move.w	#$20,d3
0000D724 3828 0008                  		move.w	8(a0),d4
0000D728 6100 0000                  		bsr.w	SolidObject
0000D72C 0828 0005 0022             		btst	#5,$22(a0)
0000D732 6600                       		bne.s	Obj3C_ChkRoll
0000D734                            
0000D734                            locret_D180:
0000D734 4E75                       		rts	
0000D736                            ; ===========================================================================
0000D736                            
0000D736                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D736 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D73C 66F6                       		bne.s	locret_D180	; if not, branch
0000D73E 3028 0030                  		move.w	$30(a0),d0
0000D742 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D744 4440                       		neg.w	d0
0000D746                            
0000D746                            Obj3C_ChkSpeed:
0000D746 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D74A 65E8                       		bcs.s	locret_D180	; if not, branch
0000D74C 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D752 5869 0008                  		addq.w	#4,8(a1)
0000D756 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D75C 3028 0008                  		move.w	8(a0),d0
0000D760 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D764 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D766 5169 0008                  		subq.w	#8,8(a1)
0000D76A 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D770                            
0000D770                            Obj3C_Smash:
0000D770 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D776 08A8 0005 0022             		bclr	#5,$22(a0)
0000D77C 08A9 0005 0022             		bclr	#5,$22(a1)
0000D782 7207                       		moveq	#7,d1		; load 8 fragments
0000D784 343C 0070                  		move.w	#$70,d2
0000D788 6100                       		bsr.s	SmashObject
0000D78A                            
0000D78A                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D78A 6100 0000                  		bsr.w	SpeedToPos
0000D78E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D794 6100 0000                  		bsr.w	DisplaySprite
0000D798 4A28 0001                  		tst.b	1(a0)
0000D79C 6A00 0000                  		bpl.w	DeleteObject
0000D7A0 4E75                       		rts	
0000D7A2                            
0000D7A2                            ; ---------------------------------------------------------------------------
0000D7A2                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D7A2                            ; ---------------------------------------------------------------------------
0000D7A2                            
0000D7A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7A2                            
0000D7A2                            
0000D7A2                            SmashObject:				; XREF: Obj3C_Smash
0000D7A2 7000                       		moveq	#0,d0
0000D7A4 1028 001A                  		move.b	$1A(a0),d0
0000D7A8 D040                       		add.w	d0,d0
0000D7AA 2668 0004                  		movea.l	4(a0),a3
0000D7AE D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D7B2 524B                       		addq.w	#1,a3
0000D7B4 08E8 0005 0001             		bset	#5,1(a0)
0000D7BA 1810                       		move.b	0(a0),d4
0000D7BC 1A28 0001                  		move.b	1(a0),d5
0000D7C0 2248                       		movea.l	a0,a1
0000D7C2 6000                       		bra.s	Smash_LoadFrag
0000D7C4                            ; ===========================================================================
0000D7C4                            
0000D7C4                            Smash_Loop:
0000D7C4 6100 0000                  		bsr.w	SingleObjLoad
0000D7C8 6600                       		bne.s	Smash_PlaySnd
0000D7CA 5A4B                       		addq.w	#5,a3
0000D7CC                            
0000D7CC                            Smash_LoadFrag:				; XREF: SmashObject
0000D7CC 137C 0004 0024             		move.b	#4,$24(a1)
0000D7D2 1284                       		move.b	d4,0(a1)
0000D7D4 234B 0004                  		move.l	a3,4(a1)
0000D7D8 1345 0001                  		move.b	d5,1(a1)
0000D7DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7E8 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7EE 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7F4 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7FA 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7FE 335C 0012                  		move.w	(a4)+,$12(a1)
0000D802 B3C8                       		cmpa.l	a0,a1
0000D804 6400                       		bcc.s	loc_D268
0000D806 2F08                       		move.l	a0,-(sp)
0000D808 2049                       		movea.l	a1,a0
0000D80A 6100 0000                  		bsr.w	SpeedToPos
0000D80E D568 0012                  		add.w	d2,$12(a0)
0000D812 205F                       		movea.l	(sp)+,a0
0000D814 6100 0000                  		bsr.w	DisplaySprite2
0000D818                            
0000D818                            loc_D268:
0000D818 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D81C                            
0000D81C                            Smash_PlaySnd:
0000D81C 303C 00CB                  		move.w	#$CB,d0
0000D820 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D826                            ; End of function SmashObject
0000D826                            
0000D826                            ; ===========================================================================
0000D826                            ; Smashed block	fragment speeds
0000D826                            ;
0000D826 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D82A 0600 FF00                  		dc.w $600, $FF00
0000D82E 0600 0100                  		dc.w $600, $100
0000D832 0400 0500                  		dc.w $400, $500
0000D836 0600 FA00                  		dc.w $600, $FA00
0000D83A 0800 FE00                  		dc.w $800, $FE00
0000D83E 0800 0200                  		dc.w $800, $200
0000D842 0600 0600                  		dc.w $600, $600
0000D846                            
0000D846 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D84A F800 FE00                  		dc.w $F800, $FE00
0000D84E F800 0200                  		dc.w $F800, $200
0000D852 FA00 0600                  		dc.w $FA00, $600
0000D856 FC00 FB00                  		dc.w $FC00, $FB00
0000D85A FA00 FF00                  		dc.w $FA00, $FF00
0000D85E FA00 0100                  		dc.w $FA00, $100
0000D862 FC00 0500                  		dc.w $FC00, $500
0000D866                            ; ---------------------------------------------------------------------------
0000D866                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D866                            ; ---------------------------------------------------------------------------
0000D866                            Map_obj3C:
0000D866                            	include "_maps\obj3C.asm"
0000D866                            ; ---------------------------------------------------------------------------
0000D866                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D866                            ; ---------------------------------------------------------------------------
0000D866 0000                       		dc.w byte_D2BC-Map_obj3C
0000D868 0000                       		dc.w byte_D2E5-Map_obj3C
0000D86A 0000                       		dc.w byte_D30E-Map_obj3C
0000D86C 08                         byte_D2BC:	dc.b 8
0000D86D E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D872 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D877 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D87C 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D881 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D886 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D88B 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D890 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D895 08                         byte_D2E5:	dc.b 8
0000D896 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D89B F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8A0 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8A5 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8AA E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8AF F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8B4 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8B9 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8BE 08                         byte_D30E:	dc.b 8
0000D8BF E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8C4 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8C9 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8CE 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8D3 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D8D8 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D8DD 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8E2 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8E8 00                         		even
0000D8E8 00                         		even
0000D8E8                            
0000D8E8                            ; ---------------------------------------------------------------------------
0000D8E8                            ; Object code loading subroutine
0000D8E8                            ; ---------------------------------------------------------------------------
0000D8E8                            
0000D8E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8E8                            
0000D8E8                            
0000D8E8                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8E8 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8EC 7E7F                       		moveq	#$7F,d7
0000D8EE 7000                       		moveq	#0,d0
0000D8F0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8F6 6400                       		bcc.s	loc_D362
0000D8F8                            
0000D8F8                            loc_D348:
0000D8F8 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8FA 6700                       		beq.s	loc_D358
0000D8FC D040                       		add.w	d0,d0
0000D8FE D040                       		add.w	d0,d0
0000D900 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D904 4E91                       		jsr	(a1)		; run the object's code
0000D906 7000                       		moveq	#0,d0
0000D908                            
0000D908                            loc_D358:
0000D908 41E8 0040                  		lea	$40(a0),a0	; next object
0000D90C 51CF FFEA                  		dbf	d7,loc_D348
0000D910 4E75                       		rts	
0000D912                            ; ===========================================================================
0000D912                            
0000D912                            loc_D362:
0000D912 7E1F                       		moveq	#$1F,d7
0000D914 61E2                       		bsr.s	loc_D348
0000D916 7E5F                       		moveq	#$5F,d7
0000D918                            
0000D918                            loc_D368:
0000D918 7000                       		moveq	#0,d0
0000D91A 1010                       		move.b	(a0),d0
0000D91C 6700                       		beq.s	loc_D378
0000D91E 4A28 0001                  		tst.b	1(a0)
0000D922 6A00                       		bpl.s	loc_D378
0000D924 6100 0000                  		bsr.w	DisplaySprite
0000D928                            
0000D928                            loc_D378:
0000D928 41E8 0040                  		lea	$40(a0),a0
0000D92C                            
0000D92C                            loc_D37C:
0000D92C 51CF FFEA                  		dbf	d7,loc_D368
0000D930 4E75                       		rts	
0000D932                            ; End of function ObjectsLoad
0000D932                            
0000D932                            ; ===========================================================================
0000D932                            ; ---------------------------------------------------------------------------
0000D932                            ; Object pointers
0000D932                            ; ---------------------------------------------------------------------------
0000D932                            Obj_Index:
0000D932                            	include "_inc\Object pointers.asm"
0000D932                            ; ---------------------------------------------------------------------------
0000D932                            ; Object pointers
0000D932                            ; ---------------------------------------------------------------------------
0000D932 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D942 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D952 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D962 0000 0000 0000 AB6A 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D972 0000 777E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D982 0000 7DA4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D992 0000 85F2 0000 865A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D9A2 0000 8CA4 0000 8F92 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D9B2 0000 0000 0000 9C66 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D9C2 0000 9F9E 0000 A58A 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D9D2 0000 989E 0000 8D7A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9E2 0000 B1B2 0000 A77E 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9F2 0000 BB84 0000 C232 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DA02 0000 B6E8 0000 D3DC 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA12 0000 C9B8 0000 CA72 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA22 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA32 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA42 0000 BEA0 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA52 0000 D672 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA62 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA72 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA82 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA92 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DAA2 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DAB2 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DAC2 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DAD2 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DAE2 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DAF2 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DB02 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB12 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB22 0000 0000 0000 CCAC 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB32 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB42 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB52 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB52 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB62                            
0000DB62                            ; ---------------------------------------------------------------------------
0000DB62                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB62                            ; ---------------------------------------------------------------------------
0000DB62                            
0000DB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB62                            
0000DB62                            
0000DB62                            ObjectFall:
0000DB62 2428 0008                  		move.l	8(a0),d2
0000DB66 2628 000C                  		move.l	$C(a0),d3
0000DB6A 3028 0010                  		move.w	$10(a0),d0
0000DB6E 48C0                       		ext.l	d0
0000DB70 E180                       		asl.l	#8,d0
0000DB72 D480                       		add.l	d0,d2
0000DB74 3028 0012                  		move.w	$12(a0),d0
0000DB78 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB7E 48C0                       		ext.l	d0
0000DB80 E180                       		asl.l	#8,d0
0000DB82 D680                       		add.l	d0,d3
0000DB84 2142 0008                  		move.l	d2,8(a0)
0000DB88 2143 000C                  		move.l	d3,$C(a0)
0000DB8C 4E75                       		rts	
0000DB8E                            ; End of function ObjectFall
0000DB8E                            
0000DB8E                            ; ---------------------------------------------------------------------------
0000DB8E                            ; Subroutine translating object	speed to update	object position
0000DB8E                            ; ---------------------------------------------------------------------------
0000DB8E                            
0000DB8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB8E                            
0000DB8E                            
0000DB8E                            SpeedToPos:
0000DB8E 2428 0008                  		move.l	8(a0),d2
0000DB92 2628 000C                  		move.l	$C(a0),d3
0000DB96 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB9A 48C0                       		ext.l	d0
0000DB9C E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB9E D480                       		add.l	d0,d2		; add to x-axis	position
0000DBA0 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DBA4 48C0                       		ext.l	d0
0000DBA6 E180                       		asl.l	#8,d0		; multiply by $100
0000DBA8 D680                       		add.l	d0,d3		; add to y-axis	position
0000DBAA 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBAE 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DBB2 4E75                       		rts	
0000DBB4                            ; End of function SpeedToPos
0000DBB4                            
0000DBB4                            ; ---------------------------------------------------------------------------
0000DBB4                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DBB4                            ; ---------------------------------------------------------------------------
0000DBB4                            
0000DBB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBB4                            
0000DBB4                            
0000DBB4                            DisplaySprite:
0000DBB4 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DBB8 3028 0018                  		move.w	$18(a0),d0
0000DBBC E248                       		lsr.w	#1,d0
0000DBBE 0240 0380                  		andi.w	#$380,d0
0000DBC2 D2C0                       		adda.w	d0,a1
0000DBC4 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DBC8 6400                       		bcc.s	locret_D620
0000DBCA 5451                       		addq.w	#2,(a1)
0000DBCC D2D1                       		adda.w	(a1),a1
0000DBCE 3288                       		move.w	a0,(a1)
0000DBD0                            
0000DBD0                            locret_D620:
0000DBD0 4E75                       		rts	
0000DBD2                            ; End of function DisplaySprite
0000DBD2                            
0000DBD2                            ; ---------------------------------------------------------------------------
0000DBD2                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DBD2                            ; ---------------------------------------------------------------------------
0000DBD2                            
0000DBD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBD2                            
0000DBD2                            
0000DBD2                            DisplaySprite2:
0000DBD2 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DBD6 3029 0018                  		move.w	$18(a1),d0
0000DBDA E248                       		lsr.w	#1,d0
0000DBDC 0240 0380                  		andi.w	#$380,d0
0000DBE0 D4C0                       		adda.w	d0,a2
0000DBE2 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBE6 6400                       		bcc.s	locret_D63E
0000DBE8 5452                       		addq.w	#2,(a2)
0000DBEA D4D2                       		adda.w	(a2),a2
0000DBEC 3489                       		move.w	a1,(a2)
0000DBEE                            
0000DBEE                            locret_D63E:
0000DBEE 4E75                       		rts	
0000DBF0                            ; End of function DisplaySprite2
0000DBF0                            
0000DBF0                            ; ---------------------------------------------------------------------------
0000DBF0                            ; Subroutine to	delete an object
0000DBF0                            ; ---------------------------------------------------------------------------
0000DBF0                            
0000DBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBF0                            
0000DBF0                            
0000DBF0                            DeleteObject:
0000DBF0 2248                       		movea.l	a0,a1
0000DBF2                            
0000DBF2                            DeleteObject2:
0000DBF2 7200                       		moveq	#0,d1
0000DBF4 700F                       		moveq	#$F,d0
0000DBF6                            
0000DBF6                            loc_D646:
0000DBF6 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBF8 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBFC 4E75                       		rts	
0000DBFE                            ; End of function DeleteObject
0000DBFE                            
0000DBFE                            ; ===========================================================================
0000DBFE 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DC02 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DC06 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DC0A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC0E                            ; ---------------------------------------------------------------------------
0000DC0E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC0E                            ; ---------------------------------------------------------------------------
0000DC0E                            
0000DC0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC0E                            
0000DC0E                            
0000DC0E                            BuildSprites:				; XREF: TitleScreen; et al
0000DC0E 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC12 7A00                       		moveq	#0,d5
0000DC14 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC18 7E07                       		moveq	#7,d7
0000DC1A                            
0000DC1A                            loc_D66A:
0000DC1A 4A54                       		tst.w	(a4)
0000DC1C 6700 0000                  		beq.w	loc_D72E
0000DC20 7C02                       		moveq	#2,d6
0000DC22                            
0000DC22                            loc_D672:
0000DC22 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC26 4A10                       		tst.b	(a0)
0000DC28 6700 0000                  		beq.w	loc_D726
0000DC2C 08A8 0007 0001             		bclr	#7,1(a0)
0000DC32 1028 0001                  		move.b	1(a0),d0
0000DC36 1800                       		move.b	d0,d4
0000DC38 0240 000C                  		andi.w	#$C,d0
0000DC3C 6700                       		beq.s	loc_D6DE
0000DC3E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC42 7000                       		moveq	#0,d0
0000DC44 1028 0019                  		move.b	$19(a0),d0
0000DC48 3628 0008                  		move.w	8(a0),d3
0000DC4C 9651                       		sub.w	(a1),d3
0000DC4E 3203                       		move.w	d3,d1
0000DC50 D240                       		add.w	d0,d1
0000DC52 6B00 0000                  		bmi.w	loc_D726
0000DC56 3203                       		move.w	d3,d1
0000DC58 9240                       		sub.w	d0,d1
0000DC5A 0C41 0140                  		cmpi.w	#$140,d1
0000DC5E 6C00                       		bge.s	loc_D726
0000DC60 0643 0080                  		addi.w	#$80,d3
0000DC64 0804 0004                  		btst	#4,d4
0000DC68 6700                       		beq.s	loc_D6E8
0000DC6A 7000                       		moveq	#0,d0
0000DC6C 1028 0016                  		move.b	$16(a0),d0
0000DC70 3428 000C                  		move.w	$C(a0),d2
0000DC74 9469 0004                  		sub.w	4(a1),d2
0000DC78 3202                       		move.w	d2,d1
0000DC7A D240                       		add.w	d0,d1
0000DC7C 6B00                       		bmi.s	loc_D726
0000DC7E 3202                       		move.w	d2,d1
0000DC80 9240                       		sub.w	d0,d1
0000DC82 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC86 6C00                       		bge.s	loc_D726
0000DC88 0642 0080                  		addi.w	#$80,d2
0000DC8C 6000                       		bra.s	loc_D700
0000DC8E                            ; ===========================================================================
0000DC8E                            
0000DC8E                            loc_D6DE:
0000DC8E 3428 000A                  		move.w	$A(a0),d2
0000DC92 3628 0008                  		move.w	8(a0),d3
0000DC96 6000                       		bra.s	loc_D700
0000DC98                            ; ===========================================================================
0000DC98                            
0000DC98                            loc_D6E8:
0000DC98 3428 000C                  		move.w	$C(a0),d2
0000DC9C 9469 0004                  		sub.w	4(a1),d2
0000DCA0 0642 0080                  		addi.w	#$80,d2
0000DCA4 0C42 0060                  		cmpi.w	#$60,d2
0000DCA8 6500                       		bcs.s	loc_D726
0000DCAA 0C42 0180                  		cmpi.w	#$180,d2
0000DCAE 6400                       		bcc.s	loc_D726
0000DCB0                            
0000DCB0                            loc_D700:
0000DCB0 2268 0004                  		movea.l	4(a0),a1
0000DCB4 7200                       		moveq	#0,d1
0000DCB6 0804 0005                  		btst	#5,d4
0000DCBA 6600                       		bne.s	loc_D71C
0000DCBC 1228 001A                  		move.b	$1A(a0),d1
0000DCC0 D201                       		add.b	d1,d1
0000DCC2 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DCC6 1219                       		move.b	(a1)+,d1
0000DCC8 5301                       		subq.b	#1,d1
0000DCCA 6B00                       		bmi.s	loc_D720
0000DCCC                            
0000DCCC                            loc_D71C:
0000DCCC 6100 0000                  		bsr.w	sub_D750
0000DCD0                            
0000DCD0                            loc_D720:
0000DCD0 08E8 0007 0001             		bset	#7,1(a0)
0000DCD6                            
0000DCD6                            loc_D726:
0000DCD6 5446                       		addq.w	#2,d6
0000DCD8 5554                       		subq.w	#2,(a4)
0000DCDA 6600 FF46                  		bne.w	loc_D672
0000DCDE                            
0000DCDE                            loc_D72E:
0000DCDE 49EC 0080                  		lea	$80(a4),a4
0000DCE2 51CF FF36                  		dbf	d7,loc_D66A
0000DCE6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCEA 0C05 0050                  		cmpi.b	#$50,d5
0000DCEE 6700                       		beq.s	loc_D748
0000DCF0 24BC 0000 0000             		move.l	#0,(a2)
0000DCF6 4E75                       		rts	
0000DCF8                            ; ===========================================================================
0000DCF8                            
0000DCF8                            loc_D748:
0000DCF8 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCFE 4E75                       		rts	
0000DD00                            ; End of function BuildSprites
0000DD00                            
0000DD00                            
0000DD00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD00                            
0000DD00                            
0000DD00                            sub_D750:				; XREF: BuildSprites
0000DD00 3668 0002                  		movea.w	2(a0),a3
0000DD04 0804 0000                  		btst	#0,d4
0000DD08 6600                       		bne.s	loc_D796
0000DD0A 0804 0001                  		btst	#1,d4
0000DD0E 6600 0000                  		bne.w	loc_D7E4
0000DD12                            ; End of function sub_D750
0000DD12                            
0000DD12                            
0000DD12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD12                            
0000DD12                            
0000DD12                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD12 0C05 0050                  		cmpi.b	#$50,d5
0000DD16 6700                       		beq.s	locret_D794
0000DD18 1019                       		move.b	(a1)+,d0
0000DD1A 4880                       		ext.w	d0
0000DD1C D042                       		add.w	d2,d0
0000DD1E 34C0                       		move.w	d0,(a2)+
0000DD20 14D9                       		move.b	(a1)+,(a2)+
0000DD22 5205                       		addq.b	#1,d5
0000DD24 14C5                       		move.b	d5,(a2)+
0000DD26 1019                       		move.b	(a1)+,d0
0000DD28 E148                       		lsl.w	#8,d0
0000DD2A 1019                       		move.b	(a1)+,d0
0000DD2C D04B                       		add.w	a3,d0
0000DD2E 34C0                       		move.w	d0,(a2)+
0000DD30 1019                       		move.b	(a1)+,d0
0000DD32 4880                       		ext.w	d0
0000DD34 D043                       		add.w	d3,d0
0000DD36 0240 01FF                  		andi.w	#$1FF,d0
0000DD3A 6600                       		bne.s	loc_D78E
0000DD3C 5240                       		addq.w	#1,d0
0000DD3E                            
0000DD3E                            loc_D78E:
0000DD3E 34C0                       		move.w	d0,(a2)+
0000DD40 51C9 FFD0                  		dbf	d1,sub_D762
0000DD44                            
0000DD44                            locret_D794:
0000DD44 4E75                       		rts	
0000DD46                            ; End of function sub_D762
0000DD46                            
0000DD46                            ; ===========================================================================
0000DD46                            
0000DD46                            loc_D796:
0000DD46 0804 0001                  		btst	#1,d4
0000DD4A 6600 0000                  		bne.w	loc_D82A
0000DD4E                            
0000DD4E                            loc_D79E:
0000DD4E 0C05 0050                  		cmpi.b	#$50,d5
0000DD52 6700                       		beq.s	locret_D7E2
0000DD54 1019                       		move.b	(a1)+,d0
0000DD56 4880                       		ext.w	d0
0000DD58 D042                       		add.w	d2,d0
0000DD5A 34C0                       		move.w	d0,(a2)+
0000DD5C 1819                       		move.b	(a1)+,d4
0000DD5E 14C4                       		move.b	d4,(a2)+
0000DD60 5205                       		addq.b	#1,d5
0000DD62 14C5                       		move.b	d5,(a2)+
0000DD64 1019                       		move.b	(a1)+,d0
0000DD66 E148                       		lsl.w	#8,d0
0000DD68 1019                       		move.b	(a1)+,d0
0000DD6A D04B                       		add.w	a3,d0
0000DD6C 0A40 0800                  		eori.w	#$800,d0
0000DD70 34C0                       		move.w	d0,(a2)+
0000DD72 1019                       		move.b	(a1)+,d0
0000DD74 4880                       		ext.w	d0
0000DD76 4440                       		neg.w	d0
0000DD78 D804                       		add.b	d4,d4
0000DD7A 0244 0018                  		andi.w	#$18,d4
0000DD7E 5044                       		addq.w	#8,d4
0000DD80 9044                       		sub.w	d4,d0
0000DD82 D043                       		add.w	d3,d0
0000DD84 0240 01FF                  		andi.w	#$1FF,d0
0000DD88 6600                       		bne.s	loc_D7DC
0000DD8A 5240                       		addq.w	#1,d0
0000DD8C                            
0000DD8C                            loc_D7DC:
0000DD8C 34C0                       		move.w	d0,(a2)+
0000DD8E 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD92                            
0000DD92                            locret_D7E2:
0000DD92 4E75                       		rts	
0000DD94                            ; ===========================================================================
0000DD94                            
0000DD94                            loc_D7E4:				; XREF: sub_D750
0000DD94 0C05 0050                  		cmpi.b	#$50,d5
0000DD98 6700                       		beq.s	locret_D828
0000DD9A 1019                       		move.b	(a1)+,d0
0000DD9C 1811                       		move.b	(a1),d4
0000DD9E 4880                       		ext.w	d0
0000DDA0 4440                       		neg.w	d0
0000DDA2 E70C                       		lsl.b	#3,d4
0000DDA4 0244 0018                  		andi.w	#$18,d4
0000DDA8 5044                       		addq.w	#8,d4
0000DDAA 9044                       		sub.w	d4,d0
0000DDAC D042                       		add.w	d2,d0
0000DDAE 34C0                       		move.w	d0,(a2)+
0000DDB0 14D9                       		move.b	(a1)+,(a2)+
0000DDB2 5205                       		addq.b	#1,d5
0000DDB4 14C5                       		move.b	d5,(a2)+
0000DDB6 1019                       		move.b	(a1)+,d0
0000DDB8 E148                       		lsl.w	#8,d0
0000DDBA 1019                       		move.b	(a1)+,d0
0000DDBC D04B                       		add.w	a3,d0
0000DDBE 0A40 1000                  		eori.w	#$1000,d0
0000DDC2 34C0                       		move.w	d0,(a2)+
0000DDC4 1019                       		move.b	(a1)+,d0
0000DDC6 4880                       		ext.w	d0
0000DDC8 D043                       		add.w	d3,d0
0000DDCA 0240 01FF                  		andi.w	#$1FF,d0
0000DDCE 6600                       		bne.s	loc_D822
0000DDD0 5240                       		addq.w	#1,d0
0000DDD2                            
0000DDD2                            loc_D822:
0000DDD2 34C0                       		move.w	d0,(a2)+
0000DDD4 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DDD8                            
0000DDD8                            locret_D828:
0000DDD8 4E75                       		rts	
0000DDDA                            ; ===========================================================================
0000DDDA                            
0000DDDA                            loc_D82A:
0000DDDA 0C05 0050                  		cmpi.b	#$50,d5
0000DDDE 6700                       		beq.s	locret_D87C
0000DDE0 1019                       		move.b	(a1)+,d0
0000DDE2 1811                       		move.b	(a1),d4
0000DDE4 4880                       		ext.w	d0
0000DDE6 4440                       		neg.w	d0
0000DDE8 E70C                       		lsl.b	#3,d4
0000DDEA 0244 0018                  		andi.w	#$18,d4
0000DDEE 5044                       		addq.w	#8,d4
0000DDF0 9044                       		sub.w	d4,d0
0000DDF2 D042                       		add.w	d2,d0
0000DDF4 34C0                       		move.w	d0,(a2)+
0000DDF6 1819                       		move.b	(a1)+,d4
0000DDF8 14C4                       		move.b	d4,(a2)+
0000DDFA 5205                       		addq.b	#1,d5
0000DDFC 14C5                       		move.b	d5,(a2)+
0000DDFE 1019                       		move.b	(a1)+,d0
0000DE00 E148                       		lsl.w	#8,d0
0000DE02 1019                       		move.b	(a1)+,d0
0000DE04 D04B                       		add.w	a3,d0
0000DE06 0A40 1800                  		eori.w	#$1800,d0
0000DE0A 34C0                       		move.w	d0,(a2)+
0000DE0C 1019                       		move.b	(a1)+,d0
0000DE0E 4880                       		ext.w	d0
0000DE10 4440                       		neg.w	d0
0000DE12 D804                       		add.b	d4,d4
0000DE14 0244 0018                  		andi.w	#$18,d4
0000DE18 5044                       		addq.w	#8,d4
0000DE1A 9044                       		sub.w	d4,d0
0000DE1C D043                       		add.w	d3,d0
0000DE1E 0240 01FF                  		andi.w	#$1FF,d0
0000DE22 6600                       		bne.s	loc_D876
0000DE24 5240                       		addq.w	#1,d0
0000DE26                            
0000DE26                            loc_D876:
0000DE26 34C0                       		move.w	d0,(a2)+
0000DE28 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE2C                            
0000DE2C                            locret_D87C:
0000DE2C 4E75                       		rts	
0000DE2E                            ; ---------------------------------------------------------------------------
0000DE2E                            ; Subroutine to	check if an object is on the screen
0000DE2E                            ; ---------------------------------------------------------------------------
0000DE2E                            
0000DE2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE2E                            
0000DE2E                            
0000DE2E                            ChkObjOnScreen:
0000DE2E 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE32 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE36 6B00                       		bmi.s	NotOnScreen
0000DE38 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE3C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE3E                            
0000DE3E 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE42 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE46 6B00                       		bmi.s	NotOnScreen
0000DE48 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE4C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE4E                            
0000DE4E 7000                       		moveq	#0,d0		; set flag to 0
0000DE50 4E75                       		rts	
0000DE52                            ; ===========================================================================
0000DE52                            
0000DE52                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE52 7001                       		moveq	#1,d0		; set flag to 1
0000DE54 4E75                       		rts	
0000DE56                            ; End of function ChkObjOnScreen
0000DE56                            
0000DE56                            
0000DE56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE56                            
0000DE56                            
0000DE56                            ChkObjOnScreen2:
0000DE56 7200                       		moveq	#0,d1
0000DE58 1228 0019                  		move.b	$19(a0),d1
0000DE5C 3028 0008                  		move.w	8(a0),d0
0000DE60 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE64 D041                       		add.w	d1,d0
0000DE66 6B00                       		bmi.s	NotOnScreen2
0000DE68 D241                       		add.w	d1,d1
0000DE6A 9041                       		sub.w	d1,d0
0000DE6C 0C40 0140                  		cmpi.w	#320,d0
0000DE70 6C00                       		bge.s	NotOnScreen2
0000DE72                            
0000DE72 3228 000C                  		move.w	$C(a0),d1
0000DE76 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE7A 6B00                       		bmi.s	NotOnScreen2
0000DE7C 0C41 00E0                  		cmpi.w	#224,d1
0000DE80 6C00                       		bge.s	NotOnScreen2
0000DE82                            
0000DE82 7000                       		moveq	#0,d0
0000DE84 4E75                       		rts	
0000DE86                            ; ===========================================================================
0000DE86                            
0000DE86                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE86 7001                       		moveq	#1,d0
0000DE88 4E75                       		rts	
0000DE8A                            ; End of function ChkObjOnScreen2
0000DE8A                            
0000DE8A                            ; ---------------------------------------------------------------------------
0000DE8A                            ; Subroutine to	load a level's objects
0000DE8A                            ; ---------------------------------------------------------------------------
0000DE8A                            
0000DE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE8A                            
0000DE8A                            
0000DE8A                            ObjPosLoad:				; XREF: Level; et al
0000DE8A 7000                       		moveq	#0,d0
0000DE8C 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE90 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE94 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE98                            ; End of function ObjPosLoad
0000DE98                            
0000DE98                            ; ===========================================================================
0000DE98 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE9A 0000                       		dc.w OPL_Next-OPL_Index
0000DE9C                            ; ===========================================================================
0000DE9C                            
0000DE9C                            OPL_Main:				; XREF: OPL_Index
0000DE9C 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DEA0 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DEA4 ED08                       		lsl.b	#6,d0
0000DEA6 E848                       		lsr.w	#4,d0
0000DEA8 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEAE 2248                       		movea.l	a0,a1
0000DEB0 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DEB4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEB8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEBC D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DEC0 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DEC4 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DEC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DECC 34FC 0101                  		move.w	#$101,(a2)+
0000DED0 303C 005E                  		move.w	#$5E,d0
0000DED4                            
0000DED4                            OPL_ClrList:
0000DED4 429A                       		clr.l	(a2)+
0000DED6 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DEDA                            
0000DEDA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEDE 7400                       		moveq	#0,d2
0000DEE0 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEE4 0446 0080                  		subi.w	#$80,d6
0000DEE8 6400                       		bcc.s	loc_D93C
0000DEEA 7C00                       		moveq	#0,d6
0000DEEC                            
0000DEEC                            loc_D93C:
0000DEEC 0246 FF80                  		andi.w	#$FF80,d6
0000DEF0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DEF4                            
0000DEF4                            loc_D944:
0000DEF4 BC50                       		cmp.w	(a0),d6
0000DEF6 6300                       		bls.s	loc_D956
0000DEF8 4A28 0004                  		tst.b	4(a0)
0000DEFC 6A00                       		bpl.s	loc_D952
0000DEFE 1412                       		move.b	(a2),d2
0000DF00 5212                       		addq.b	#1,(a2)
0000DF02                            
0000DF02                            loc_D952:
0000DF02 5C48                       		addq.w	#6,a0
0000DF04 60EE                       		bra.s	loc_D944
0000DF06                            ; ===========================================================================
0000DF06                            
0000DF06                            loc_D956:
0000DF06 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF0A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF0E 0446 0080                  		subi.w	#$80,d6
0000DF12 6500                       		bcs.s	loc_D976
0000DF14                            
0000DF14                            loc_D964:
0000DF14 BC50                       		cmp.w	(a0),d6
0000DF16 6300                       		bls.s	loc_D976
0000DF18 4A28 0004                  		tst.b	4(a0)
0000DF1C 6A00                       		bpl.s	loc_D972
0000DF1E 522A 0001                  		addq.b	#1,1(a2)
0000DF22                            
0000DF22                            loc_D972:
0000DF22 5C48                       		addq.w	#6,a0
0000DF24 60EE                       		bra.s	loc_D964
0000DF26                            ; ===========================================================================
0000DF26                            
0000DF26                            loc_D976:
0000DF26 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF2A 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF30                            
0000DF30                            OPL_Next:				; XREF: OPL_Index
0000DF30 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF34 7400                       		moveq	#0,d2
0000DF36 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF3A 0246 FF80                  		andi.w	#$FF80,d6
0000DF3E BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF42 6700 0000                  		beq.w	locret_DA3A
0000DF46 6C00                       		bge.s	loc_D9F6
0000DF48 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF4C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF50 0446 0080                  		subi.w	#$80,d6
0000DF54 6500                       		bcs.s	loc_D9D2
0000DF56                            
0000DF56                            loc_D9A6:
0000DF56 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF5A 6C00                       		bge.s	loc_D9D2
0000DF5C 5D48                       		subq.w	#6,a0
0000DF5E 4A28 0004                  		tst.b	4(a0)
0000DF62 6A00                       		bpl.s	loc_D9BC
0000DF64 532A 0001                  		subq.b	#1,1(a2)
0000DF68 142A 0001                  		move.b	1(a2),d2
0000DF6C                            
0000DF6C                            loc_D9BC:
0000DF6C 6100 0000                  		bsr.w	loc_DA3C
0000DF70 6600                       		bne.s	loc_D9C6
0000DF72 5D48                       		subq.w	#6,a0
0000DF74 60E0                       		bra.s	loc_D9A6
0000DF76                            ; ===========================================================================
0000DF76                            
0000DF76                            loc_D9C6:
0000DF76 4A28 0004                  		tst.b	4(a0)
0000DF7A 6A00                       		bpl.s	loc_D9D0
0000DF7C 522A 0001                  		addq.b	#1,1(a2)
0000DF80                            
0000DF80                            loc_D9D0:
0000DF80 5C48                       		addq.w	#6,a0
0000DF82                            
0000DF82                            loc_D9D2:
0000DF82 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF86 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF8A 0646 0300                  		addi.w	#$300,d6
0000DF8E                            
0000DF8E                            loc_D9DE:
0000DF8E BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF92 6E00                       		bgt.s	loc_D9F0
0000DF94 4A28 FFFE                  		tst.b	-2(a0)
0000DF98 6A00                       		bpl.s	loc_D9EC
0000DF9A 5312                       		subq.b	#1,(a2)
0000DF9C                            
0000DF9C                            loc_D9EC:
0000DF9C 5D48                       		subq.w	#6,a0
0000DF9E 60EE                       		bra.s	loc_D9DE
0000DFA0                            ; ===========================================================================
0000DFA0                            
0000DFA0                            loc_D9F0:
0000DFA0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFA4 4E75                       		rts	
0000DFA6                            ; ===========================================================================
0000DFA6                            
0000DFA6                            loc_D9F6:
0000DFA6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DFAA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFAE 0646 0280                  		addi.w	#$280,d6
0000DFB2                            
0000DFB2                            loc_DA02:
0000DFB2 BC50                       		cmp.w	(a0),d6
0000DFB4 6300                       		bls.s	loc_DA16
0000DFB6 4A28 0004                  		tst.b	4(a0)
0000DFBA 6A00                       		bpl.s	loc_DA10
0000DFBC 1412                       		move.b	(a2),d2
0000DFBE 5212                       		addq.b	#1,(a2)
0000DFC0                            
0000DFC0                            loc_DA10:
0000DFC0 6100 0000                  		bsr.w	loc_DA3C
0000DFC4 67EC                       		beq.s	loc_DA02
0000DFC6                            
0000DFC6                            loc_DA16:
0000DFC6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFCA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFCE 0446 0300                  		subi.w	#$300,d6
0000DFD2 6500                       		bcs.s	loc_DA36
0000DFD4                            
0000DFD4                            loc_DA24:
0000DFD4 BC50                       		cmp.w	(a0),d6
0000DFD6 6300                       		bls.s	loc_DA36
0000DFD8 4A28 0004                  		tst.b	4(a0)
0000DFDC 6A00                       		bpl.s	loc_DA32
0000DFDE 522A 0001                  		addq.b	#1,1(a2)
0000DFE2                            
0000DFE2                            loc_DA32:
0000DFE2 5C48                       		addq.w	#6,a0
0000DFE4 60EE                       		bra.s	loc_DA24
0000DFE6                            ; ===========================================================================
0000DFE6                            
0000DFE6                            loc_DA36:
0000DFE6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFEA                            
0000DFEA                            locret_DA3A:
0000DFEA 4E75                       		rts	
0000DFEC                            ; ===========================================================================
0000DFEC                            
0000DFEC                            loc_DA3C:
0000DFEC 4A28 0004                  		tst.b	4(a0)
0000DFF0 6A00                       		bpl.s	OPL_MakeItem
0000DFF2 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFF8 6700                       		beq.s	OPL_MakeItem
0000DFFA 5C48                       		addq.w	#6,a0
0000DFFC 7000                       		moveq	#0,d0
0000DFFE 4E75                       		rts	
0000E000                            ; ===========================================================================
0000E000                            
0000E000                            OPL_MakeItem:
0000E000 6100 0000                  		bsr.w	SingleObjLoad
0000E004 6600                       		bne.s	locret_DA8A
0000E006 3358 0008                  		move.w	(a0)+,8(a1)
0000E00A 3018                       		move.w	(a0)+,d0
0000E00C 3200                       		move.w	d0,d1
0000E00E 0240 0FFF                  		andi.w	#$FFF,d0
0000E012 3340 000C                  		move.w	d0,$C(a1)
0000E016 E559                       		rol.w	#2,d1
0000E018 0201 0003                  		andi.b	#3,d1
0000E01C 1341 0001                  		move.b	d1,1(a1)
0000E020 1341 0022                  		move.b	d1,$22(a1)
0000E024 1018                       		move.b	(a0)+,d0
0000E026 6A00                       		bpl.s	loc_DA80
0000E028 0200 007F                  		andi.b	#$7F,d0
0000E02C 1342 0023                  		move.b	d2,$23(a1)
0000E030                            
0000E030                            loc_DA80:
0000E030 1280                       		move.b	d0,0(a1)
0000E032 1358 0028                  		move.b	(a0)+,$28(a1)
0000E036 7000                       		moveq	#0,d0
0000E038                            
0000E038                            locret_DA8A:
0000E038 4E75                       		rts	
0000E03A                            ; ---------------------------------------------------------------------------
0000E03A                            ; Single object	loading	subroutine
0000E03A                            ; ---------------------------------------------------------------------------
0000E03A                            
0000E03A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E03A                            
0000E03A                            
0000E03A                            SingleObjLoad:
0000E03A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E03E 303C 005F                  		move.w	#$5F,d0
0000E042                            
0000E042                            loc_DA94:
0000E042 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E044 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E046 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E04A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E04E                            
0000E04E                            locret_DAA0:
0000E04E 4E75                       		rts	
0000E050                            ; End of function SingleObjLoad
0000E050                            
0000E050                            
0000E050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E050                            
0000E050                            
0000E050                            SingleObjLoad2:
0000E050 2248                       		movea.l	a0,a1
0000E052 303C F000                  		move.w	#-$1000,d0
0000E056 9048                       		sub.w	a0,d0
0000E058 EC48                       		lsr.w	#6,d0
0000E05A 5340                       		subq.w	#1,d0
0000E05C 6500                       		bcs.s	locret_DABC
0000E05E                            
0000E05E                            loc_DAB0:
0000E05E 4A11                       		tst.b	(a1)
0000E060 6700                       		beq.s	locret_DABC
0000E062 43E9 0040                  		lea	$40(a1),a1
0000E066 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E06A                            
0000E06A                            locret_DABC:
0000E06A 4E75                       		rts	
0000E06C                            ; End of function SingleObjLoad2
0000E06C                            
0000E06C                            ; ===========================================================================
0000E06C                            ; ---------------------------------------------------------------------------
0000E06C                            ; Object 41 - springs
0000E06C                            ; ---------------------------------------------------------------------------
0000E06C                            
0000E06C                            Obj41:					; XREF: Obj_Index
0000E06C 7000                       		moveq	#0,d0
0000E06E 1028 0024                  		move.b	$24(a0),d0
0000E072 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E076 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E07A 6100 FB38                  		bsr.w	DisplaySprite
0000E07E 3028 0008                  		move.w	8(a0),d0
0000E082 0240 FF80                  		andi.w	#$FF80,d0
0000E086 3238 F700                  		move.w	($FFFFF700).w,d1
0000E08A 0441 0080                  		subi.w	#$80,d1
0000E08E 0241 FF80                  		andi.w	#$FF80,d1
0000E092 9041                       		sub.w	d1,d0
0000E094 0C40 0280                  		cmpi.w	#$280,d0
0000E098 6200 FB56                  		bhi.w	DeleteObject
0000E09C 4E75                       		rts	
0000E09E                            ; ===========================================================================
0000E09E 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E0A0 0000                       		dc.w Obj41_Up-Obj41_Index
0000E0A2 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E0A4 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E0A6 0000                       		dc.w Obj41_LR-Obj41_Index
0000E0A8 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E0AA 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0AC 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0AE 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E0B0 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E0B2                            
0000E0B2 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E0B4 F600                       		dc.w -$A00		; power	of yellow spring
0000E0B6                            ; ===========================================================================
0000E0B6                            
0000E0B6                            Obj41_Main:				; XREF: Obj41_Index
0000E0B6 5428 0024                  		addq.b	#2,$24(a0)
0000E0BA 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E0C2 317C 0523 0002             		move.w	#$523,2(a0)
0000E0C8 0028 0004 0001             		ori.b	#4,1(a0)
0000E0CE 117C 0010 0019             		move.b	#$10,$19(a0)
0000E0D4 117C 0004 0018             		move.b	#4,$18(a0)
0000E0DA 1028 0028                  		move.b	$28(a0),d0
0000E0DE 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0E2 6700                       		beq.s	loc_DB54	; if not, branch
0000E0E4 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0EA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0F0 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0F6 317C 0533 0002             		move.w	#$533,2(a0)
0000E0FC 117C 0008 0019             		move.b	#8,$19(a0)
0000E102                            
0000E102                            loc_DB54:
0000E102 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E106 6700                       		beq.s	loc_DB66	; if not, branch
0000E108 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E10E 08E8 0001 0022             		bset	#1,$22(a0)
0000E114                            
0000E114                            loc_DB66:
0000E114 0800 0001                  		btst	#1,d0
0000E118 6700                       		beq.s	loc_DB72
0000E11A 08E8 0005 0002             		bset	#5,2(a0)
0000E120                            
0000E120                            loc_DB72:
0000E120 0240 000F                  		andi.w	#$F,d0
0000E124 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E12A 4E75                       		rts	
0000E12C                            ; ===========================================================================
0000E12C                            
0000E12C                            Obj41_Up:				; XREF: Obj41_Index
0000E12C 323C 001B                  		move.w	#$1B,d1
0000E130 343C 0008                  		move.w	#8,d2
0000E134 363C 0010                  		move.w	#$10,d3
0000E138 3828 0008                  		move.w	8(a0),d4
0000E13C 6100 0000                  		bsr.w	SolidObject
0000E140 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E144 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E146 4E75                       		rts	
0000E148                            ; ===========================================================================
0000E148                            
0000E148                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E148 5428 0024                  		addq.b	#2,$24(a0)
0000E14C 5069 000C                  		addq.w	#8,$C(a1)
0000E150 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E156 08E9 0001 0022             		bset	#1,$22(a1)
0000E15C 08A9 0003 0022             		bclr	#3,$22(a1)
0000E162 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E168 137C 0002 0024             		move.b	#2,$24(a1)
0000E16E 08A8 0003 0022             		bclr	#3,$22(a0)
0000E174 4228 0025                  		clr.b	$25(a0)
0000E178 303C 00CC                  		move.w	#$CC,d0
0000E17C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E182                            
0000E182                            Obj41_AniUp:				; XREF: Obj41_Index
0000E182 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E188 6000 CADC                  		bra.w	AnimateSprite
0000E18C                            ; ===========================================================================
0000E18C                            
0000E18C                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E18C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E192 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E196 4E75                       		rts	
0000E198                            ; ===========================================================================
0000E198                            
0000E198                            Obj41_LR:				; XREF: Obj41_Index
0000E198 323C 0013                  		move.w	#$13,d1
0000E19C 343C 000E                  		move.w	#$E,d2
0000E1A0 363C 000F                  		move.w	#$F,d3
0000E1A4 3828 0008                  		move.w	8(a0),d4
0000E1A8 6100 0000                  		bsr.w	SolidObject
0000E1AC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1B2 6600                       		bne.s	loc_DC0C
0000E1B4 117C 0008 0024             		move.b	#8,$24(a0)
0000E1BA                            
0000E1BA                            loc_DC0C:
0000E1BA 0828 0005 0022             		btst	#5,$22(a0)
0000E1C0 6600                       		bne.s	Obj41_BounceLR
0000E1C2 4E75                       		rts	
0000E1C4                            ; ===========================================================================
0000E1C4                            
0000E1C4                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E1C4 5428 0024                  		addq.b	#2,$24(a0)
0000E1C8 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E1CE 5069 0008                  		addq.w	#8,8(a1)
0000E1D2 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E1D8 6600                       		bne.s	loc_DC36	; if yes, branch
0000E1DA 0469 0010 0008             		subi.w	#$10,8(a1)
0000E1E0 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1E4                            
0000E1E4                            loc_DC36:
0000E1E4 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1EA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1F0 0869 0000 0022             		bchg	#0,$22(a1)
0000E1F6 0829 0002 0022             		btst	#2,$22(a1)
0000E1FC 6600                       		bne.s	loc_DC56
0000E1FE 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E204                            
0000E204                            loc_DC56:
0000E204 08A8 0005 0022             		bclr	#5,$22(a0)
0000E20A 08A9 0005 0022             		bclr	#5,$22(a1)
0000E210 303C 00CC                  		move.w	#$CC,d0
0000E214 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E21A                            
0000E21A                            Obj41_AniLR:				; XREF: Obj41_Index
0000E21A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E220 6000 CA44                  		bra.w	AnimateSprite
0000E224                            ; ===========================================================================
0000E224                            
0000E224                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E224 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E22A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E22E 4E75                       		rts	
0000E230                            ; ===========================================================================
0000E230                            
0000E230                            Obj41_Dwn:				; XREF: Obj41_Index
0000E230 323C 001B                  		move.w	#$1B,d1
0000E234 343C 0008                  		move.w	#8,d2
0000E238 363C 0010                  		move.w	#$10,d3
0000E23C 3828 0008                  		move.w	8(a0),d4
0000E240 6100 0000                  		bsr.w	SolidObject
0000E244 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E24A 6600                       		bne.s	loc_DCA4
0000E24C 117C 000E 0024             		move.b	#$E,$24(a0)
0000E252                            
0000E252                            loc_DCA4:
0000E252 4A28 0025                  		tst.b	$25(a0)
0000E256 6600                       		bne.s	locret_DCAE
0000E258 4A44                       		tst.w	d4
0000E25A 6B00                       		bmi.s	Obj41_BounceDwn
0000E25C                            
0000E25C                            locret_DCAE:
0000E25C 4E75                       		rts	
0000E25E                            ; ===========================================================================
0000E25E                            
0000E25E                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E25E 5428 0024                  		addq.b	#2,$24(a0)
0000E262 5169 000C                  		subq.w	#8,$C(a1)
0000E266 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E26C 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E270 08E9 0001 0022             		bset	#1,$22(a1)
0000E276 08A9 0003 0022             		bclr	#3,$22(a1)
0000E27C 137C 0002 0024             		move.b	#2,$24(a1)
0000E282 08A8 0003 0022             		bclr	#3,$22(a0)
0000E288 4228 0025                  		clr.b	$25(a0)
0000E28C 303C 00CC                  		move.w	#$CC,d0
0000E290 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E296                            
0000E296                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E296 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E29C 6000 C9C8                  		bra.w	AnimateSprite
0000E2A0                            ; ===========================================================================
0000E2A0                            
0000E2A0                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E2A0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E2A6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E2AA 4E75                       		rts	
0000E2AC                            ; ===========================================================================
0000E2AC                            Ani_obj41:
0000E2AC                            	include "_anim\obj41.asm"
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC                            ; Animation script - springs
0000E2AC                            ; ---------------------------------------------------------------------------
0000E2AC 0000                       		dc.w byte_DD02-Ani_obj41
0000E2AE 0000                       		dc.w byte_DD0E-Ani_obj41
0000E2B0 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E2BC 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E2C8                            		even
0000E2C8                            		even
0000E2C8                            
0000E2C8                            ; ---------------------------------------------------------------------------
0000E2C8                            ; Sprite mappings - springs
0000E2C8                            ; ---------------------------------------------------------------------------
0000E2C8                            Map_obj41:
0000E2C8                            	include "_maps\obj41.asm"
0000E2C8                            ; ---------------------------------------------------------------------------
0000E2C8                            ; Sprite mappings - springs
0000E2C8                            ; ---------------------------------------------------------------------------
0000E2C8 0000                       		dc.w byte_DD26-Map_obj41
0000E2CA 0000                       		dc.w byte_DD31-Map_obj41
0000E2CC 0000                       		dc.w byte_DD37-Map_obj41
0000E2CE 0000                       		dc.w byte_DD47-Map_obj41
0000E2D0 0000                       		dc.w byte_DD4D-Map_obj41
0000E2D2 0000                       		dc.w byte_DD53-Map_obj41
0000E2D4 02                         byte_DD26:	dc.b 2
0000E2D5 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E2DA 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E2DF 01                         byte_DD31:	dc.b 1
0000E2E0 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2E5 03                         byte_DD37:	dc.b 3
0000E2E6 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2EB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2F0 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2F5 01                         byte_DD47:	dc.b 1
0000E2F6 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2FB 01                         byte_DD4D:	dc.b 1
0000E2FC F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E301 04                         byte_DD53:	dc.b 4
0000E302 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E307 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E30C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E311 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E316                            		even
0000E316                            		even
0000E316                            
0000E316                            ; ===========================================================================
0000E316                            ; ---------------------------------------------------------------------------
0000E316                            ; Object 42 - Newtron enemy (GHZ)
0000E316                            ; ---------------------------------------------------------------------------
0000E316                            
0000E316                            Obj42:					; XREF: Obj_Index
0000E316 7000                       		moveq	#0,d0
0000E318 1028 0024                  		move.b	$24(a0),d0
0000E31C 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E320 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E324                            ; ===========================================================================
0000E324 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E326 0000                       		dc.w Obj42_Action-Obj42_Index
0000E328 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E32A                            ; ===========================================================================
0000E32A                            
0000E32A                            Obj42_Main:				; XREF: Obj42_Index
0000E32A 5428 0024                  		addq.b	#2,$24(a0)
0000E32E 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E336 317C 049B 0002             		move.w	#$49B,2(a0)
0000E33C 117C 0004 0001             		move.b	#4,1(a0)
0000E342 117C 0004 0018             		move.b	#4,$18(a0)
0000E348 117C 0014 0019             		move.b	#$14,$19(a0)
0000E34E 117C 0010 0016             		move.b	#$10,$16(a0)
0000E354 117C 0008 0017             		move.b	#8,$17(a0)
0000E35A                            
0000E35A                            Obj42_Action:				; XREF: Obj42_Index
0000E35A 7000                       		moveq	#0,d0
0000E35C 1028 0025                  		move.b	$25(a0),d0
0000E360 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E364 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E368 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E36E 6100 C8F6                  		bsr.w	AnimateSprite
0000E372 6000 0000                  		bra.w	MarkObjGone
0000E376                            ; ===========================================================================
0000E376 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E378 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E37A 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E37C 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E37E 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E380                            ; ===========================================================================
0000E380                            
0000E380                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E380 08E8 0000 0022             		bset	#0,$22(a0)
0000E386 3038 D008                  		move.w	($FFFFD008).w,d0
0000E38A 9068 0008                  		sub.w	8(a0),d0
0000E38E 6400                       		bcc.s	loc_DDEA
0000E390 4440                       		neg.w	d0
0000E392 08A8 0000 0022             		bclr	#0,$22(a0)
0000E398                            
0000E398                            loc_DDEA:
0000E398 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E39C 6400                       		bcc.s	locret_DE12	; if not, branch
0000E39E 5428 0025                  		addq.b	#2,$25(a0)
0000E3A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3A8 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3AC 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3AE 317C 249B 0002             		move.w	#$249B,2(a0)
0000E3B4 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E3BA 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E3C0                            
0000E3C0                            locret_DE12:
0000E3C0 4E75                       		rts	
0000E3C2                            ; ===========================================================================
0000E3C2                            
0000E3C2                            Obj42_Type00:				; XREF: Obj42_Index2
0000E3C2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E3C8 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E3CA 08E8 0000 0022             		bset	#0,$22(a0)
0000E3D0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3D4 9068 0008                  		sub.w	8(a0),d0
0000E3D8 6400                       		bcc.s	locret_DE32
0000E3DA 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3E0                            
0000E3E0                            locret_DE32:
0000E3E0 4E75                       		rts	
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3E2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3E8 6600                       		bne.s	loc_DE42
0000E3EA 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3F0                            
0000E3F0                            loc_DE42:
0000E3F0 6100 F770                  		bsr.w	ObjectFall
0000E3F4 6100 0000                  		bsr.w	ObjHitFloor
0000E3F8 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3FA 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3FC D368 000C                  		add.w	d1,$C(a0)
0000E400 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E406 5428 0025                  		addq.b	#2,$25(a0)
0000E40A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E410 0828 0005 0002             		btst	#5,2(a0)
0000E416 6700                       		beq.s	Obj42_Move
0000E418 5228 001C                  		addq.b	#1,$1C(a0)
0000E41C                            
0000E41C                            Obj42_Move:
0000E41C 117C 000D 0020             		move.b	#$D,$20(a0)
0000E422 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E428 0828 0000 0022             		btst	#0,$22(a0)
0000E42E 6600                       		bne.s	locret_DE86
0000E430 4468 0010                  		neg.w	$10(a0)
0000E434                            
0000E434                            locret_DE86:
0000E434 4E75                       		rts	
0000E436                            ; ===========================================================================
0000E436                            
0000E436                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E436 6100 F756                  		bsr.w	SpeedToPos
0000E43A 6100 0000                  		bsr.w	ObjHitFloor
0000E43E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E442 6D00                       		blt.s	loc_DEA2
0000E444 0C41 000C                  		cmpi.w	#$C,d1
0000E448 6C00                       		bge.s	loc_DEA2
0000E44A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E44E 4E75                       		rts	
0000E450                            ; ===========================================================================
0000E450                            
0000E450                            loc_DEA2:
0000E450 5428 0025                  		addq.b	#2,$25(a0)
0000E454 4E75                       		rts	
0000E456                            ; ===========================================================================
0000E456                            
0000E456                            Obj42_Speed:				; XREF: Obj42_Index2
0000E456 6100 F736                  		bsr.w	SpeedToPos
0000E45A 4E75                       		rts	
0000E45C                            ; ===========================================================================
0000E45C                            
0000E45C                            Obj42_Type01:				; XREF: Obj42_Index2
0000E45C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E462 6600                       		bne.s	Obj42_FireMissile
0000E464 117C 000C 0020             		move.b	#$C,$20(a0)
0000E46A                            
0000E46A                            Obj42_FireMissile:
0000E46A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E470 6600                       		bne.s	locret_DF14
0000E472 4A28 0032                  		tst.b	$32(a0)
0000E476 6600                       		bne.s	locret_DF14
0000E478 117C 0001 0032             		move.b	#1,$32(a0)
0000E47E 6100 FBBA                  		bsr.w	SingleObjLoad
0000E482 6600                       		bne.s	locret_DF14
0000E484 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E488 3368 0008 0008             		move.w	8(a0),8(a1)
0000E48E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E494 5169 000C                  		subq.w	#8,$C(a1)
0000E498 337C 0200 0010             		move.w	#$200,$10(a1)
0000E49E 303C 0014                  		move.w	#$14,d0
0000E4A2 0828 0000 0022             		btst	#0,$22(a0)
0000E4A8 6600                       		bne.s	loc_DF04
0000E4AA 4440                       		neg.w	d0
0000E4AC 4469 0010                  		neg.w	$10(a1)
0000E4B0                            
0000E4B0                            loc_DF04:
0000E4B0 D169 0008                  		add.w	d0,8(a1)
0000E4B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E4BA 137C 0001 0028             		move.b	#1,$28(a1)
0000E4C0                            
0000E4C0                            locret_DF14:
0000E4C0 4E75                       		rts	
0000E4C2                            ; ===========================================================================
0000E4C2                            
0000E4C2                            Obj42_Delete:				; XREF: Obj42_Index
0000E4C2 6000 F72C                  		bra.w	DeleteObject
0000E4C6                            ; ===========================================================================
0000E4C6                            Ani_obj42:
0000E4C6                            	include "_anim\obj42.asm"
0000E4C6                            ; ---------------------------------------------------------------------------
0000E4C6                            ; Animation script - Newtron enemy
0000E4C6                            ; ---------------------------------------------------------------------------
0000E4C6 0000                       		dc.w byte_DF24-Ani_obj42
0000E4C8 0000                       		dc.w byte_DF28-Ani_obj42
0000E4CA 0000                       		dc.w byte_DF30-Ani_obj42
0000E4CC 0000                       		dc.w byte_DF34-Ani_obj42
0000E4CE 0000                       		dc.w byte_DF38-Ani_obj42
0000E4D0 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E4D4 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E4DC 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E4E0 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4E4 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4EE                            		even
0000E4EE                            		even
0000E4EE                            
0000E4EE                            ; ---------------------------------------------------------------------------
0000E4EE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4EE                            ; ---------------------------------------------------------------------------
0000E4EE                            Map_obj42:
0000E4EE                            	include "_maps\obj42.asm"
0000E4EE                            ; ---------------------------------------------------------------------------
0000E4EE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4EE                            ; ---------------------------------------------------------------------------
0000E4EE 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4F2 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4F6 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4FA 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4FE 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E502 0000                       		dc.w byte_DFF8-Map_obj42
0000E504 03                         byte_DF58:	dc.b 3
0000E505 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E50A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E50F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E514 03                         byte_DF68:	dc.b 3
0000E515 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E51A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E51F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E524 03                         byte_DF78:	dc.b 3
0000E525 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E52A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E52F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E534 04                         byte_DF88:	dc.b 4
0000E535 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E53A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E53F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E544 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E549 03                         byte_DF9D:	dc.b 3
0000E54A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E54F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E554 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E559 02                         byte_DFAD:	dc.b 2
0000E55A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E55F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E564 03                         byte_DFB8:	dc.b 3
0000E565 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E56A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E56F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E574 03                         byte_DFC8:	dc.b 3
0000E575 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E57A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E57F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E584 03                         byte_DFD8:	dc.b 3
0000E585 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E58A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E58F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E594 03                         byte_DFE8:	dc.b 3
0000E595 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E59A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E59F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E5A4 00                         byte_DFF8:	dc.b 0
0000E5A6 00                         		even
0000E5A6 00                         		even
0000E5A6                            
0000E5A6                            ; ===========================================================================
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            ; Object 43 - Roller enemy (SYZ)
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            
0000E5A6                            Obj43:					; XREF: Obj_Index
0000E5A6 7000                       		moveq	#0,d0
0000E5A8 1028 0024                  		move.b	$24(a0),d0
0000E5AC 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E5B0 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E5B4                            ; ===========================================================================
0000E5B4 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E5B6 0000                       		dc.w Obj43_Action-Obj43_Index
0000E5B8                            ; ===========================================================================
0000E5B8                            
0000E5B8                            Obj43_Main:				; XREF: Obj43_Index
0000E5B8 117C 000E 0016             		move.b	#$E,$16(a0)
0000E5BE 117C 0008 0017             		move.b	#8,$17(a0)
0000E5C4 6100 F59C                  		bsr.w	ObjectFall
0000E5C8 6100 0000                  		bsr.w	ObjHitFloor
0000E5CC 4A41                       		tst.w	d1
0000E5CE 6A00                       		bpl.s	locret_E052
0000E5D0 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E5D4 317C 0000 0012             		move.w	#0,$12(a0)
0000E5DA 5428 0024                  		addq.b	#2,$24(a0)
0000E5DE 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5E6 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5EC 117C 0004 0001             		move.b	#4,1(a0)
0000E5F2 117C 0004 0018             		move.b	#4,$18(a0)
0000E5F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5FE                            
0000E5FE                            locret_E052:
0000E5FE 4E75                       		rts	
0000E600                            ; ===========================================================================
0000E600                            
0000E600                            Obj43_Action:				; XREF: Obj43_Index
0000E600 7000                       		moveq	#0,d0
0000E602 1028 0025                  		move.b	$25(a0),d0
0000E606 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E60A 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E60E 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E614 6100 C650                  		bsr.w	AnimateSprite
0000E618 3028 0008                  		move.w	8(a0),d0
0000E61C 0240 FF80                  		andi.w	#$FF80,d0
0000E620 3238 F700                  		move.w	($FFFFF700).w,d1
0000E624 0441 0080                  		subi.w	#$80,d1
0000E628 0241 FF80                  		andi.w	#$FF80,d1
0000E62C 9041                       		sub.w	d1,d0
0000E62E 0C40 0280                  		cmpi.w	#$280,d0
0000E632 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E636 6000 F57C                  		bra.w	DisplaySprite
0000E63A                            ; ===========================================================================
0000E63A                            
0000E63A                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E63A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E63E 7000                       		moveq	#0,d0
0000E640 1028 0023                  		move.b	$23(a0),d0
0000E644 6700                       		beq.s	Obj43_Delete
0000E646 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E64C                            
0000E64C                            Obj43_Delete:
0000E64C 6000 F5A2                  		bra.w	DeleteObject
0000E650                            ; ===========================================================================
0000E650 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E652 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E654 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E656 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E658                            ; ===========================================================================
0000E658                            
0000E658                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E658 3038 D008                  		move.w	($FFFFD008).w,d0
0000E65C 0440 0100                  		subi.w	#$100,d0
0000E660 6500                       		bcs.s	loc_E0D2
0000E662 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E666 6500                       		bcs.s	loc_E0D2
0000E668 5828 0025                  		addq.b	#4,$25(a0)
0000E66C 117C 0002 001C             		move.b	#2,$1C(a0)
0000E672 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E678 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E67E                            
0000E67E                            loc_E0D2:
0000E67E 588F                       		addq.l	#4,sp
0000E680 4E75                       		rts	
0000E682                            ; ===========================================================================
0000E682                            
0000E682                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E682 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E688 6700                       		beq.s	loc_E0F8
0000E68A 5368 0030                  		subq.w	#1,$30(a0)
0000E68E 6A00                       		bpl.s	locret_E0F6
0000E690 117C 0001 001C             		move.b	#1,$1C(a0)
0000E696 317C 0700 0010             		move.w	#$700,$10(a0)
0000E69C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E6A2                            
0000E6A2                            locret_E0F6:
0000E6A2 4E75                       		rts	
0000E6A4                            ; ===========================================================================
0000E6A4                            
0000E6A4                            loc_E0F8:
0000E6A4 5428 0025                  		addq.b	#2,$25(a0)
0000E6A8 4E75                       		rts	
0000E6AA                            ; ===========================================================================
0000E6AA                            
0000E6AA                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E6AA 6100 0000                  		bsr.w	Obj43_Stop
0000E6AE 6100 F4DE                  		bsr.w	SpeedToPos
0000E6B2 6100 0000                  		bsr.w	ObjHitFloor
0000E6B6 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6BA 6D00                       		blt.s	Obj43_Jump
0000E6BC 0C41 000C                  		cmpi.w	#$C,d1
0000E6C0 6C00                       		bge.s	Obj43_Jump
0000E6C2 D368 000C                  		add.w	d1,$C(a0)
0000E6C6 4E75                       		rts	
0000E6C8                            ; ===========================================================================
0000E6C8                            
0000E6C8                            Obj43_Jump:
0000E6C8 5428 0025                  		addq.b	#2,$25(a0)
0000E6CC 08E8 0000 0032             		bset	#0,$32(a0)
0000E6D2 6700                       		beq.s	locret_E12E
0000E6D4 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E6DA                            
0000E6DA                            locret_E12E:
0000E6DA 4E75                       		rts	
0000E6DC                            ; ===========================================================================
0000E6DC                            
0000E6DC                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E6DC 6100 F484                  		bsr.w	ObjectFall
0000E6E0 4A68 0012                  		tst.w	$12(a0)
0000E6E4 6B00                       		bmi.s	locret_E150
0000E6E6 6100 0000                  		bsr.w	ObjHitFloor
0000E6EA 4A41                       		tst.w	d1
0000E6EC 6A00                       		bpl.s	locret_E150
0000E6EE D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6F2 5528 0025                  		subq.b	#2,$25(a0)
0000E6F6 317C 0000 0012             		move.w	#0,$12(a0)
0000E6FC                            
0000E6FC                            locret_E150:
0000E6FC 4E75                       		rts	
0000E6FE                            
0000E6FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6FE                            
0000E6FE                            
0000E6FE                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6FE 4A28 0032                  		tst.b	$32(a0)
0000E702 6B00                       		bmi.s	locret_E188
0000E704 3038 D008                  		move.w	($FFFFD008).w,d0
0000E708 0440 0030                  		subi.w	#$30,d0
0000E70C 9068 0008                  		sub.w	8(a0),d0
0000E710 6400                       		bcc.s	locret_E188
0000E712 117C 0000 001C             		move.b	#0,$1C(a0)
0000E718 117C 000E 0020             		move.b	#$E,$20(a0)
0000E71E 4268 0010                  		clr.w	$10(a0)
0000E722 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E728 117C 0002 0025             		move.b	#2,$25(a0)
0000E72E 08E8 0007 0032             		bset	#7,$32(a0)
0000E734                            
0000E734                            locret_E188:
0000E734 4E75                       		rts	
0000E736                            ; End of function Obj43_Stop
0000E736                            
0000E736                            ; ===========================================================================
0000E736                            Ani_obj43:
0000E736                            	include "_anim\obj43.asm"
0000E736                            ; ---------------------------------------------------------------------------
0000E736                            ; Animation script - Roller enemy
0000E736                            ; ---------------------------------------------------------------------------
0000E736 0000                       		dc.w byte_E190-Ani_obj43
0000E738 0000                       		dc.w byte_E196-Ani_obj43
0000E73A 0000                       		dc.w byte_E19C-Ani_obj43
0000E73C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E742 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E748 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E74E 00                         		even
0000E74E 00                         		even
0000E74E                            
0000E74E                            ; ---------------------------------------------------------------------------
0000E74E                            ; Sprite mappings - Roller enemy (SYZ)
0000E74E                            ; ---------------------------------------------------------------------------
0000E74E                            Map_obj43:
0000E74E                            	include "_maps\obj43.asm"
0000E74E                            ; ---------------------------------------------------------------------------
0000E74E                            ; Sprite mappings - Roller enemy (SYZ)
0000E74E                            ; ---------------------------------------------------------------------------
0000E74E 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E752 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E756 0000                       		dc.w byte_E1CE-Map_obj43
0000E758 02                         byte_E1AC:	dc.b 2
0000E759 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E75E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E763 02                         byte_E1B7:	dc.b 2
0000E764 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E769 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E76E 01                         byte_E1C2:	dc.b 1
0000E76F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E774 01                         byte_E1C8:	dc.b 1
0000E775 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E77A 01                         byte_E1CE:	dc.b 1
0000E77B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E780                            		even
0000E780                            		even
0000E780                            
0000E780                            ; ===========================================================================
0000E780                            ; ---------------------------------------------------------------------------
0000E780                            ; Object 44 - walls (GHZ)
0000E780                            ; ---------------------------------------------------------------------------
0000E780                            
0000E780                            Obj44:					; XREF: Obj_Index
0000E780 7000                       		moveq	#0,d0
0000E782 1028 0024                  		move.b	$24(a0),d0
0000E786 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E78A 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E78E                            ; ===========================================================================
0000E78E 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E790 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E792 0000                       		dc.w Obj44_Display-Obj44_Index
0000E794                            ; ===========================================================================
0000E794                            
0000E794                            Obj44_Main:				; XREF: Obj44_Index
0000E794 5428 0024                  		addq.b	#2,$24(a0)
0000E798 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E7A0 317C 434C 0002             		move.w	#$434C,2(a0)
0000E7A6 0028 0004 0001             		ori.b	#4,1(a0)
0000E7AC 117C 0008 0019             		move.b	#8,$19(a0)
0000E7B2 117C 0006 0018             		move.b	#6,$18(a0)
0000E7B8 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E7BE 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E7C4 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E7C6 5428 0024                  		addq.b	#2,$24(a0)
0000E7CA 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E7CC                            ; ===========================================================================
0000E7CC                            
0000E7CC                            Obj44_Solid:				; XREF: Obj44_Index
0000E7CC 323C 0013                  		move.w	#$13,d1
0000E7D0 343C 0028                  		move.w	#$28,d2
0000E7D4 6100 A6D2                  		bsr.w	Obj44_SolidWall
0000E7D8                            
0000E7D8                            Obj44_Display:				; XREF: Obj44_Index
0000E7D8 6100 F3DA                  		bsr.w	DisplaySprite
0000E7DC 3028 0008                  		move.w	8(a0),d0
0000E7E0 0240 FF80                  		andi.w	#$FF80,d0
0000E7E4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7E8 0441 0080                  		subi.w	#$80,d1
0000E7EC 0241 FF80                  		andi.w	#$FF80,d1
0000E7F0 9041                       		sub.w	d1,d0
0000E7F2 0C40 0280                  		cmpi.w	#$280,d0
0000E7F6 6200 F3F8                  		bhi.w	DeleteObject
0000E7FA 4E75                       		rts	
0000E7FC                            ; ===========================================================================
0000E7FC                            ; ---------------------------------------------------------------------------
0000E7FC                            ; Sprite mappings - walls (GHZ)
0000E7FC                            ; ---------------------------------------------------------------------------
0000E7FC                            Map_obj44:
0000E7FC                            	include "_maps\obj44.asm"
0000E7FC                            ; ---------------------------------------------------------------------------
0000E7FC                            ; Sprite mappings - walls (GHZ)
0000E7FC                            ; ---------------------------------------------------------------------------
0000E7FC 0000                       		dc.w byte_E256-Map_obj44
0000E7FE 0000                       		dc.w byte_E26B-Map_obj44
0000E800 0000                       		dc.w byte_E280-Map_obj44
0000E802 04                         byte_E256:	dc.b 4
0000E803 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E808 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E80D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E812 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E817 04                         byte_E26B:	dc.b 4
0000E818 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E81D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E822 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E827 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E82C 04                         byte_E280:	dc.b 4
0000E82D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E832 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E837 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E83C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E842 00                         		even
0000E842 00                         		even
0000E842                            
0000E842                            ; ===========================================================================
0000E842                            ; ---------------------------------------------------------------------------
0000E842                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E842                            ; ---------------------------------------------------------------------------
0000E842                            
0000E842                            Obj13:					; XREF: Obj_Index
0000E842 7000                       		moveq	#0,d0
0000E844 1028 0024                  		move.b	$24(a0),d0
0000E848 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E84C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E850 6000 0000                  		bra.w	Obj14_ChkDel
0000E854                            ; ===========================================================================
0000E854 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E856 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E858                            ; ---------------------------------------------------------------------------
0000E858                            ;
0000E858                            ; Lava ball production rates
0000E858                            ;
0000E858 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E85E                            ; ===========================================================================
0000E85E                            
0000E85E                            Obj13_Main:				; XREF: Obj13_Index
0000E85E 5428 0024                  		addq.b	#2,$24(a0)
0000E862 1028 0028                  		move.b	$28(a0),d0
0000E866 E848                       		lsr.w	#4,d0
0000E868 0240 000F                  		andi.w	#$F,d0
0000E86C 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E872 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E878 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E87E                            
0000E87E                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E87E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E882 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E884 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E88A 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E88E 6600                       		bne.s	locret_E302
0000E890 6100 F7A8                  		bsr.w	SingleObjLoad
0000E894 6600                       		bne.s	locret_E302
0000E896 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E89A 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8A6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8AC                            
0000E8AC                            locret_E302:
0000E8AC 4E75                       		rts	
0000E8AE                            ; ===========================================================================
0000E8AE                            ; ---------------------------------------------------------------------------
0000E8AE                            ; Object 14 - lava balls (MZ, SLZ)
0000E8AE                            ; ---------------------------------------------------------------------------
0000E8AE                            
0000E8AE                            Obj14:					; XREF: Obj_Index
0000E8AE 7000                       		moveq	#0,d0
0000E8B0 1028 0024                  		move.b	$24(a0),d0
0000E8B4 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E8B8 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E8BC 6000 F2F6                  		bra.w	DisplaySprite
0000E8C0                            ; ===========================================================================
0000E8C0 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E8C2 0000                       		dc.w Obj14_Action-Obj14_Index
0000E8C4 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E8C6                            
0000E8C6 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E8D0 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E8D8                            ; ===========================================================================
0000E8D8                            
0000E8D8                            Obj14_Main:				; XREF: Obj14_Index
0000E8D8 5428 0024                  		addq.b	#2,$24(a0)
0000E8DC 117C 0008 0016             		move.b	#8,$16(a0)
0000E8E2 117C 0008 0017             		move.b	#8,$17(a0)
0000E8E8 217C 0000 B878 0004        		move.l	#Map_obj14,4(a0)
0000E8F0 317C 0345 0002             		move.w	#$345,2(a0)
0000E8F6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8FC 6600                       		bne.s	loc_E35A
0000E8FE 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E904                            
0000E904                            loc_E35A:
0000E904 117C 0004 0001             		move.b	#4,1(a0)
0000E90A 117C 0003 0018             		move.b	#3,$18(a0)
0000E910 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E916 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E91C 4A28 0029                  		tst.b	$29(a0)
0000E920 6700                       		beq.s	Obj14_SetSpeed
0000E922 5428 0018                  		addq.b	#2,$18(a0)
0000E926                            
0000E926                            Obj14_SetSpeed:
0000E926 7000                       		moveq	#0,d0
0000E928 1028 0028                  		move.b	$28(a0),d0
0000E92C D040                       		add.w	d0,d0
0000E92E 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E934 117C 0008 0019             		move.b	#8,$19(a0)
0000E93A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E940 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E942 117C 0010 0019             		move.b	#$10,$19(a0)
0000E948 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E94E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E954 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E95A                            
0000E95A                            Obj14_PlaySnd:
0000E95A 303C 00AE                  		move.w	#$AE,d0
0000E95E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E964                            
0000E964                            Obj14_Action:				; XREF: Obj14_Index
0000E964 7000                       		moveq	#0,d0
0000E966 1028 0028                  		move.b	$28(a0),d0
0000E96A D040                       		add.w	d0,d0
0000E96C 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E970 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E974 6100 F218                  		bsr.w	SpeedToPos
0000E978 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E97E 6100 C2E6                  		bsr.w	AnimateSprite
0000E982                            
0000E982                            Obj14_ChkDel:				; XREF: Obj13
0000E982 3028 0008                  		move.w	8(a0),d0
0000E986 0240 FF80                  		andi.w	#$FF80,d0
0000E98A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E98E 0441 0080                  		subi.w	#$80,d1
0000E992 0241 FF80                  		andi.w	#$FF80,d1
0000E996 9041                       		sub.w	d1,d0
0000E998 0C40 0280                  		cmpi.w	#$280,d0
0000E99C 6200 F252                  		bhi.w	DeleteObject
0000E9A0 4E75                       		rts	
0000E9A2                            ; ===========================================================================
0000E9A2 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9A6 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9AA 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9AE 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E9B2 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E9B4                            ; ===========================================================================
0000E9B4                            ; lavaball types 00-03 fly up and fall back down
0000E9B4                            
0000E9B4                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E9B4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E9BA 3028 0030                  		move.w	$30(a0),d0
0000E9BE B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E9C2 6400                       		bcc.s	loc_E41E	; if not, branch
0000E9C4 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E9C8                            
0000E9C8                            loc_E41E:
0000E9C8 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9CE 4A68 0012                  		tst.w	$12(a0)
0000E9D2 6A00                       		bpl.s	locret_E430
0000E9D4 08E8 0001 0022             		bset	#1,$22(a0)
0000E9DA                            
0000E9DA                            locret_E430:
0000E9DA 4E75                       		rts	
0000E9DC                            ; ===========================================================================
0000E9DC                            ; lavaball type	04 flies up until it hits the ceiling
0000E9DC                            
0000E9DC                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E9DC 08E8 0001 0022             		bset	#1,$22(a0)
0000E9E2 6100 0000                  		bsr.w	ObjHitCeiling
0000E9E6 4A41                       		tst.w	d1
0000E9E8 6A00                       		bpl.s	locret_E452
0000E9EA 117C 0008 0028             		move.b	#8,$28(a0)
0000E9F0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9F6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9FC                            
0000E9FC                            locret_E452:
0000E9FC 4E75                       		rts	
0000E9FE                            ; ===========================================================================
0000E9FE                            ; lavaball type	05 falls down until it hits the	floor
0000E9FE                            
0000E9FE                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9FE 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA04 6100 0000                  		bsr.w	ObjHitFloor
0000EA08 4A41                       		tst.w	d1
0000EA0A 6A00                       		bpl.s	locret_E474
0000EA0C 117C 0008 0028             		move.b	#8,$28(a0)
0000EA12 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA18 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA1E                            
0000EA1E                            locret_E474:
0000EA1E 4E75                       		rts	
0000EA20                            ; ===========================================================================
0000EA20                            ; lavaball types 06-07 move sideways
0000EA20                            
0000EA20                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA20 08E8 0000 0022             		bset	#0,$22(a0)
0000EA26 76F8                       		moveq	#-8,d3
0000EA28 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA2C 4A41                       		tst.w	d1
0000EA2E 6A00                       		bpl.s	locret_E498
0000EA30 117C 0008 0028             		move.b	#8,$28(a0)
0000EA36 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA3C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA42                            
0000EA42                            locret_E498:
0000EA42 4E75                       		rts	
0000EA44                            ; ===========================================================================
0000EA44                            
0000EA44                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA44 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA4A 7608                       		moveq	#8,d3
0000EA4C 6100 0000                  		bsr.w	ObjHitWallRight
0000EA50 4A41                       		tst.w	d1
0000EA52 6A00                       		bpl.s	locret_E4BC
0000EA54 117C 0008 0028             		move.b	#8,$28(a0)
0000EA5A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA60 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA66                            
0000EA66                            locret_E4BC:
0000EA66 4E75                       		rts	
0000EA68                            ; ===========================================================================
0000EA68                            
0000EA68                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA68 4E75                       		rts	
0000EA6A                            ; ===========================================================================
0000EA6A                            
0000EA6A                            Obj14_Delete:				; XREF: Obj14_Index
0000EA6A 6000 F184                  		bra.w	DeleteObject
0000EA6E                            ; ===========================================================================
0000EA6E                            Ani_obj14:
0000EA6E                            	include "_anim\obj14.asm"
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E                            ; Animation script - lava balls
0000EA6E                            ; ---------------------------------------------------------------------------
0000EA6E 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA70 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA72 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA74 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA76 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA7C 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA80 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA86 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA8A                            		even
0000EA8A                            		even
0000EA8A                            
0000EA8A                            ; ===========================================================================
0000EA8A                            ; ---------------------------------------------------------------------------
0000EA8A                            ; Object 6D - flame thrower (SBZ)
0000EA8A                            ; ---------------------------------------------------------------------------
0000EA8A                            
0000EA8A                            Obj6D:					; XREF: Obj_Index
0000EA8A 7000                       		moveq	#0,d0
0000EA8C 1028 0024                  		move.b	$24(a0),d0
0000EA90 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA94 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA98                            ; ===========================================================================
0000EA98 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA9A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA9C                            ; ===========================================================================
0000EA9C                            
0000EA9C                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA9C 5428 0024                  		addq.b	#2,$24(a0)
0000EAA0 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EAA8 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAAE 0028 0004 0001             		ori.b	#4,1(a0)
0000EAB4 117C 0001 0018             		move.b	#1,$18(a0)
0000EABA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAC0 117C 000C 0019             		move.b	#$C,$19(a0)
0000EAC6 1028 0028                  		move.b	$28(a0),d0
0000EACA 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EACE D040                       		add.w	d0,d0		; multiply by 2
0000EAD0 3140 0030                  		move.w	d0,$30(a0)
0000EAD4 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EAD8 1028 0028                  		move.b	$28(a0),d0
0000EADC 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EAE0 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EAE2 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EAE6 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAEC 0828 0001 0022             		btst	#1,$22(a0)
0000EAF2 6700                       		beq.s	Obj6D_Action
0000EAF4 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAFA 117C 0015 0036             		move.b	#$15,$36(a0)
0000EB00                            
0000EB00                            Obj6D_Action:				; XREF: Obj6D_Index
0000EB00 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EB04 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EB06 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB0C 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB12 6700                       		beq.s	loc_E57A
0000EB14 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB1A 303C 00B3                  		move.w	#$B3,d0
0000EB1E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB24                            
0000EB24                            loc_E57A:
0000EB24 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB2A 6100 C13A                  		bsr.w	AnimateSprite
0000EB2E 117C 0000 0020             		move.b	#0,$20(a0)
0000EB34 1028 0036                  		move.b	$36(a0),d0
0000EB38 B028 001A                  		cmp.b	$1A(a0),d0
0000EB3C 6600                       		bne.s	Obj6D_ChkDel
0000EB3E 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB44                            
0000EB44                            Obj6D_ChkDel:
0000EB44 3028 0008                  		move.w	8(a0),d0
0000EB48 0240 FF80                  		andi.w	#$FF80,d0
0000EB4C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB50 0441 0080                  		subi.w	#$80,d1
0000EB54 0241 FF80                  		andi.w	#$FF80,d1
0000EB58 9041                       		sub.w	d1,d0
0000EB5A 0C40 0280                  		cmpi.w	#$280,d0
0000EB5E 6200 F090                  		bhi.w	DeleteObject
0000EB62 6000 F050                  		bra.w	DisplaySprite
0000EB66                            ; ===========================================================================
0000EB66                            Ani_obj6D:
0000EB66                            	include "_anim\obj6D.asm"
0000EB66                            ; ---------------------------------------------------------------------------
0000EB66                            ; Animation script - flamethrower (SBZ)
0000EB66                            ; ---------------------------------------------------------------------------
0000EB66 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB68 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB6A 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB6C 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB6E 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB7C 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB86 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB94 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB9E                            		even
0000EB9E                            		even
0000EB9E                            
0000EB9E                            ; ---------------------------------------------------------------------------
0000EB9E                            ; Sprite mappings - flame thrower (SBZ)
0000EB9E                            ; ---------------------------------------------------------------------------
0000EB9E                            Map_obj6D:
0000EB9E                            	include "_maps\obj6D.asm"
0000EB9E                            ; ---------------------------------------------------------------------------
0000EB9E                            ; Sprite mappings - flame thrower (SBZ)
0000EB9E                            ; ---------------------------------------------------------------------------
0000EB9E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EBA2 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EBA6 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EBAA 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBAE 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EBB2 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EBB6 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EBBA 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EBBE 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EBC2 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EBC6 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EBCA 01                         byte_E620:	dc.b 1
0000EBCB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBD0 02                         byte_E626:	dc.b 2
0000EBD1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBD6 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBDB 02                         byte_E631:	dc.b 2
0000EBDC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBE1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBE6 03                         byte_E63C:	dc.b 3
0000EBE7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBEC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBF1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBF6 03                         byte_E64C:	dc.b 3
0000EBF7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBFC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC01 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC06 04                         byte_E65C:	dc.b 4
0000EC07 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC0C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC11 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC16 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC1B 04                         byte_E671:	dc.b 4
0000EC1C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC21 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC26 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC2B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC30 05                         byte_E686:	dc.b 5
0000EC31 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC36 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC3B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC40 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC45 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC4A 05                         byte_E6A0:	dc.b 5
0000EC4B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC50 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC55 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC5A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC5F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC64 06                         byte_E6BA:	dc.b 6
0000EC65 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC6A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC6F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC74 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC79 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC7E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC83 06                         byte_E6D9:	dc.b 6
0000EC84 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC89 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC8E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC93 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC98 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC9D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECA2 01                         byte_E6F8:	dc.b 1
0000ECA3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECA8 02                         byte_E6FE:	dc.b 2
0000ECA9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECAE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECB3 02                         byte_E709:	dc.b 2
0000ECB4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECB9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECBE 03                         byte_E714:	dc.b 3
0000ECBF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECC4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECC9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECCE 03                         byte_E724:	dc.b 3
0000ECCF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECD4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECD9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECDE 04                         byte_E734:	dc.b 4
0000ECDF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECE4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECE9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECEE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECF3 04                         byte_E749:	dc.b 4
0000ECF4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECF9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECFE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED03 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED08 05                         byte_E75E:	dc.b 5
0000ED09 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED0E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED13 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED18 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED1D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED22 05                         byte_E778:	dc.b 5
0000ED23 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED28 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED2D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED32 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED37 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED3C 06                         byte_E792:	dc.b 6
0000ED3D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED42 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED47 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED4C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED51 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED56 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED5B 06                         byte_E7B1:	dc.b 6
0000ED5C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED61 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED66 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED6B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED70 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED75 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED7A                            		even
0000ED7A                            		even
0000ED7A                            
0000ED7A                            ; ===========================================================================
0000ED7A                            ; ---------------------------------------------------------------------------
0000ED7A                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED7A                            ; ---------------------------------------------------------------------------
0000ED7A                            
0000ED7A                            Obj46:					; XREF: Obj_Index
0000ED7A 7000                       		moveq	#0,d0
0000ED7C 1028 0024                  		move.b	$24(a0),d0
0000ED80 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED84 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED88                            ; ===========================================================================
0000ED88 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED8A 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED8C                            ; ===========================================================================
0000ED8C                            
0000ED8C                            Obj46_Main:				; XREF: Obj46_Index
0000ED8C 5428 0024                  		addq.b	#2,$24(a0)
0000ED90 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED96 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED9C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EDA4 317C 4000 0002             		move.w	#$4000,2(a0)
0000EDAA 117C 0004 0001             		move.b	#4,1(a0)
0000EDB0 117C 0003 0018             		move.b	#3,$18(a0)
0000EDB6 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDBC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDC2 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EDC8                            
0000EDC8                            Obj46_Action:				; XREF: Obj46_Index
0000EDC8 4A28 0001                  		tst.b	1(a0)
0000EDCC 6A00                       		bpl.s	Obj46_ChkDel
0000EDCE 7000                       		moveq	#0,d0
0000EDD0 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EDD4 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EDD8 D040                       		add.w	d0,d0
0000EDDA 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EDDE 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDE2 323C 001B                  		move.w	#$1B,d1
0000EDE6 343C 0010                  		move.w	#$10,d2
0000EDEA 363C 0011                  		move.w	#$11,d3
0000EDEE 3828 0008                  		move.w	8(a0),d4
0000EDF2 6100 0000                  		bsr.w	SolidObject
0000EDF6                            
0000EDF6                            Obj46_ChkDel:
0000EDF6 6100 EDBC                  		bsr.w	DisplaySprite
0000EDFA 3028 0008                  		move.w	8(a0),d0
0000EDFE 0240 FF80                  		andi.w	#$FF80,d0
0000EE02 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE06 0441 0080                  		subi.w	#$80,d1
0000EE0A 0241 FF80                  		andi.w	#$FF80,d1
0000EE0E 9041                       		sub.w	d1,d0
0000EE10 0C40 0280                  		cmpi.w	#$280,d0
0000EE14 6200 EDDA                  		bhi.w	DeleteObject
0000EE18 4E75                       		rts	
0000EE1A                            ; ===========================================================================
0000EE1A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE1C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE1E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE20 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE22 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE24                            ; ===========================================================================
0000EE24                            
0000EE24                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE24 4E75                       		rts	
0000EE26                            ; ===========================================================================
0000EE26                            
0000EE26                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE26 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE2A 9068 0008                  		sub.w	8(a0),d0
0000EE2E 6400                       		bcc.s	loc_E888
0000EE30 4440                       		neg.w	d0
0000EE32                            
0000EE32                            loc_E888:
0000EE32 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE36 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE38 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE3E                            
0000EE3E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE3E 7000                       		moveq	#0,d0
0000EE40 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE44 0828 0003 0028             		btst	#3,$28(a0)
0000EE4A 6700                       		beq.s	loc_E8A8
0000EE4C 4440                       		neg.w	d0
0000EE4E 0640 0010                  		addi.w	#$10,d0
0000EE52                            
0000EE52                            loc_E8A8:
0000EE52 3228 0030                  		move.w	$30(a0),d1
0000EE56 9240                       		sub.w	d0,d1
0000EE58 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE5C 4E75                       		rts	
0000EE5E                            ; ===========================================================================
0000EE5E                            
0000EE5E                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE5E 6100 ED2E                  		bsr.w	SpeedToPos
0000EE62 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE68 6100 0000                  		bsr.w	ObjHitFloor
0000EE6C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE6E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE72 D368 000C                  		add.w	d1,$C(a0)
0000EE76 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE7A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE80 117C 0004 0028             		move.b	#4,$28(a0)
0000EE86 3011                       		move.w	(a1),d0
0000EE88 0240 03FF                  		andi.w	#$3FF,d0
0000EE8C 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE90 6400                       		bcc.s	locret_E8EE
0000EE92 117C 0000 0028             		move.b	#0,$28(a0)
0000EE98                            
0000EE98                            locret_E8EE:
0000EE98 4E75                       		rts	
0000EE9A                            ; ===========================================================================
0000EE9A                            
0000EE9A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE9A 7000                       		moveq	#0,d0
0000EE9C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EEA0 E648                       		lsr.w	#3,d0
0000EEA2 3228 0030                  		move.w	$30(a0),d1
0000EEA6 9240                       		sub.w	d0,d1
0000EEA8 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEAC 4E75                       		rts	
0000EEAE                            ; ===========================================================================
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            Map_obj46:
0000EEAE                            	include "_maps\obj46.asm"
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEAE                            ; ---------------------------------------------------------------------------
0000EEAE 0000                       		dc.w byte_E906-Map_obj46
0000EEB0 01                         byte_E906:	dc.b 1
0000EEB1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EEB6                            		even
0000EEB6                            		even
0000EEB6                            
0000EEB6                            ; ===========================================================================
0000EEB6                            ; ---------------------------------------------------------------------------
0000EEB6                            ; Object 12 - lamp (SYZ)
0000EEB6                            ; ---------------------------------------------------------------------------
0000EEB6                            
0000EEB6                            Obj12:					; XREF: Obj_Index
0000EEB6 7000                       		moveq	#0,d0
0000EEB8 1028 0024                  		move.b	$24(a0),d0
0000EEBC 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EEC0 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EEC4                            ; ===========================================================================
0000EEC4 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EEC6 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EEC8                            ; ===========================================================================
0000EEC8                            
0000EEC8                            Obj12_Main:				; XREF: Obj12_Index
0000EEC8 5428 0024                  		addq.b	#2,$24(a0)
0000EECC 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EED4 317C 0000 0002             		move.w	#0,2(a0)
0000EEDA 117C 0004 0001             		move.b	#4,1(a0)
0000EEE0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEE6 117C 0006 0018             		move.b	#6,$18(a0)
0000EEEC                            
0000EEEC                            Obj12_Animate:				; XREF: Obj12_Index
0000EEEC 5328 001E                  		subq.b	#1,$1E(a0)
0000EEF0 6A00                       		bpl.s	Obj12_ChkDel
0000EEF2 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEF8 5228 001A                  		addq.b	#1,$1A(a0)
0000EEFC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EF02 6500                       		bcs.s	Obj12_ChkDel
0000EF04 117C 0000 001A             		move.b	#0,$1A(a0)
0000EF0A                            
0000EF0A                            Obj12_ChkDel:
0000EF0A 3028 0008                  		move.w	8(a0),d0
0000EF0E 0240 FF80                  		andi.w	#$FF80,d0
0000EF12 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF16 0441 0080                  		subi.w	#$80,d1
0000EF1A 0241 FF80                  		andi.w	#$FF80,d1
0000EF1E 9041                       		sub.w	d1,d0
0000EF20 0C40 0280                  		cmpi.w	#$280,d0
0000EF24 6200 ECCA                  		bhi.w	DeleteObject
0000EF28 6000 EC8A                  		bra.w	DisplaySprite
0000EF2C                            ; ===========================================================================
0000EF2C                            ; ---------------------------------------------------------------------------
0000EF2C                            ; Sprite mappings - lamp (SYZ)
0000EF2C                            ; ---------------------------------------------------------------------------
0000EF2C                            Map_obj12:
0000EF2C                            	include "_maps\obj12.asm"
0000EF2C                            ; ---------------------------------------------------------------------------
0000EF2C                            ; Sprite mappings - lamp (SYZ)
0000EF2C                            ; ---------------------------------------------------------------------------
0000EF2C 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF30 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF34 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF38 02                         byte_E98E:	dc.b 2
0000EF39 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF3E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF43 02                         byte_E999:	dc.b 2
0000EF44 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF49 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF4E 02                         byte_E9A4:	dc.b 2
0000EF4F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF54 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF59 02                         byte_E9AF:	dc.b 2
0000EF5A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF5F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF64 02                         byte_E9BA:	dc.b 2
0000EF65 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF6A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF6F 02                         byte_E9C5:	dc.b 2
0000EF70 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF75 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF7A                            		even
0000EF7A                            		even
0000EF7A                            
0000EF7A                            ; ===========================================================================
0000EF7A                            ; ---------------------------------------------------------------------------
0000EF7A                            ; Object 47 - pinball bumper (SYZ)
0000EF7A                            ; ---------------------------------------------------------------------------
0000EF7A                            
0000EF7A                            Obj47:					; XREF: Obj_Index
0000EF7A 7000                       		moveq	#0,d0
0000EF7C 1028 0024                  		move.b	$24(a0),d0
0000EF80 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF84 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF88                            ; ===========================================================================
0000EF88 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF8A 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF8C                            ; ===========================================================================
0000EF8C                            
0000EF8C                            Obj47_Main:				; XREF: Obj47_Index
0000EF8C 5428 0024                  		addq.b	#2,$24(a0)
0000EF90 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF98 317C 0380 0002             		move.w	#$380,2(a0)
0000EF9E 117C 0004 0001             		move.b	#4,1(a0)
0000EFA4 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFAA 117C 0001 0018             		move.b	#1,$18(a0)
0000EFB0 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EFB6                            
0000EFB6                            Obj47_Hit:				; XREF: Obj47_Index
0000EFB6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EFBA 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EFBE 4228 0021                  		clr.b	$21(a0)
0000EFC2 43F8 D000                  		lea	($FFFFD000).w,a1
0000EFC6 3228 0008                  		move.w	8(a0),d1
0000EFCA 3428 000C                  		move.w	$C(a0),d2
0000EFCE 9269 0008                  		sub.w	8(a1),d1
0000EFD2 9469 000C                  		sub.w	$C(a1),d2
0000EFD6 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EFDC 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EFE2 C3FC F900                  		muls.w	#-$700,d1
0000EFE6 E081                       		asr.l	#8,d1
0000EFE8 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFEC C1FC F900                  		muls.w	#-$700,d0
0000EFF0 E080                       		asr.l	#8,d0
0000EFF2 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFF6 08E9 0001 0022             		bset	#1,$22(a1)
0000EFFC 08A9 0004 0022             		bclr	#4,$22(a1)
0000F002 08A9 0005 0022             		bclr	#5,$22(a1)
0000F008 4229 003C                  		clr.b	$3C(a1)
0000F00C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F012 303C 00B4                  		move.w	#$B4,d0
0000F016 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F01C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F020 7000                       		moveq	#0,d0
0000F022 1028 0023                  		move.b	$23(a0),d0
0000F026 6700                       		beq.s	Obj47_Score
0000F028 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F02E 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F030 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F034                            
0000F034                            Obj47_Score:
0000F034 7001                       		moveq	#1,d0
0000F036 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F03C 6100 EFFC                  		bsr.w	SingleObjLoad
0000F040 6600                       		bne.s	Obj47_Display
0000F042 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F046 3368 0008 0008             		move.w	8(a0),8(a1)
0000F04C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F052 137C 0004 001A             		move.b	#4,$1A(a1)
0000F058                            
0000F058                            Obj47_Display:
0000F058 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F05E 6100 BC06                  		bsr.w	AnimateSprite
0000F062 3028 0008                  		move.w	8(a0),d0
0000F066 0240 FF80                  		andi.w	#$FF80,d0
0000F06A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F06E 0441 0080                  		subi.w	#$80,d1
0000F072 0241 FF80                  		andi.w	#$FF80,d1
0000F076 9041                       		sub.w	d1,d0
0000F078 0C40 0280                  		cmpi.w	#$280,d0
0000F07C 6200                       		bhi.s	Obj47_ChkHit
0000F07E 6000 EB34                  		bra.w	DisplaySprite
0000F082                            ; ===========================================================================
0000F082                            
0000F082                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F082 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F086 7000                       		moveq	#0,d0
0000F088 1028 0023                  		move.b	$23(a0),d0
0000F08C 6700                       		beq.s	Obj47_Delete
0000F08E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F094                            
0000F094                            Obj47_Delete:
0000F094 6000 EB5A                  		bra.w	DeleteObject
0000F098                            ; ===========================================================================
0000F098                            Ani_obj47:
0000F098                            	include "_anim\obj47.asm"
0000F098                            ; ---------------------------------------------------------------------------
0000F098                            ; Animation script - flamethrower (SBZ)
0000F098                            ; ---------------------------------------------------------------------------
0000F098 0000                       		dc.w byte_EAF4-Ani_obj47
0000F09A 0000                       		dc.w byte_EAF8-Ani_obj47
0000F09C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F0A0 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F0A8                            		even
0000F0A8                            		even
0000F0A8                            
0000F0A8                            ; ---------------------------------------------------------------------------
0000F0A8                            ; Sprite mappings - pinball bumper (SYZ)
0000F0A8                            ; ---------------------------------------------------------------------------
0000F0A8                            Map_obj47:
0000F0A8                            	include "_maps\obj47.asm"
0000F0A8                            ; ---------------------------------------------------------------------------
0000F0A8                            ; Sprite mappings - pinball bumper (SYZ)
0000F0A8                            ; ---------------------------------------------------------------------------
0000F0A8 0000                       		dc.w byte_EB06-Map_obj47
0000F0AA 0000                       		dc.w byte_EB11-Map_obj47
0000F0AC 0000                       		dc.w byte_EB1C-Map_obj47
0000F0AE 02                         byte_EB06:	dc.b 2
0000F0AF F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F0B4 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F0B9 02                         byte_EB11:	dc.b 2
0000F0BA F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F0BF F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F0C4 02                         byte_EB1C:	dc.b 2
0000F0C5 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F0CA F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F0D0 00                         		even
0000F0D0 00                         		even
0000F0D0                            
0000F0D0                            ; ===========================================================================
0000F0D0                            ; ---------------------------------------------------------------------------
0000F0D0                            ; Object 0D - signpost at the end of a level
0000F0D0                            ; ---------------------------------------------------------------------------
0000F0D0                            
0000F0D0                            Obj0D:					; XREF: Obj_Index
0000F0D0 7000                       		moveq	#0,d0
0000F0D2 1028 0024                  		move.b	$24(a0),d0
0000F0D6 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F0DA 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F0DE 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0E4 6100 BB80                  		bsr.w	AnimateSprite
0000F0E8 6100 EACA                  		bsr.w	DisplaySprite
0000F0EC 3028 0008                  		move.w	8(a0),d0
0000F0F0 0240 FF80                  		andi.w	#$FF80,d0
0000F0F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0F8 0441 0080                  		subi.w	#$80,d1
0000F0FC 0241 FF80                  		andi.w	#$FF80,d1
0000F100 9041                       		sub.w	d1,d0
0000F102 0C40 0280                  		cmpi.w	#$280,d0
0000F106 6200 EAE8                  		bhi.w	DeleteObject
0000F10A 4E75                       		rts	
0000F10C                            ; ===========================================================================
0000F10C 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F10E 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F110 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F112 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F114 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F116                            ; ===========================================================================
0000F116                            
0000F116                            Obj0D_Main:				; XREF: Obj0D_Index
0000F116 5428 0024                  		addq.b	#2,$24(a0)
0000F11A 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F122 317C 0680 0002             		move.w	#$680,2(a0)
0000F128 117C 0004 0001             		move.b	#4,1(a0)
0000F12E 117C 0018 0019             		move.b	#$18,$19(a0)
0000F134 117C 0004 0018             		move.b	#4,$18(a0)
0000F13A                            
0000F13A                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F13A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F13E 9068 0008                  		sub.w	8(a0),d0
0000F142 6500                       		bcs.s	locret_EBBA
0000F144 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F148 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F14A 303C 00CF                  		move.w	#$CF,d0
0000F14E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F154 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F158 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F15E 5428 0024                  		addq.b	#2,$24(a0)
0000F162                            
0000F162                            locret_EBBA:
0000F162 4E75                       		rts	
0000F164                            ; ===========================================================================
0000F164                            
0000F164                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F164 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F168 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F16A 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F170 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F174 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F17A 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F17C 5428 0024                  		addq.b	#2,$24(a0)
0000F180                            
0000F180                            Obj0D_Sparkle:
0000F180 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F184 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F186 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F18C 7000                       		moveq	#0,d0
0000F18E 1028 0034                  		move.b	$34(a0),d0
0000F192 5428 0034                  		addq.b	#2,$34(a0)
0000F196 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F19C 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F1A0 6100 EE98                  		bsr.w	SingleObjLoad
0000F1A4 6600                       		bne.s	locret_EC42
0000F1A6 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F1AA 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F1B0 101A                       		move.b	(a2)+,d0
0000F1B2 4880                       		ext.w	d0
0000F1B4 D068 0008                  		add.w	8(a0),d0
0000F1B8 3340 0008                  		move.w	d0,8(a1)
0000F1BC 101A                       		move.b	(a2)+,d0
0000F1BE 4880                       		ext.w	d0
0000F1C0 D068 000C                  		add.w	$C(a0),d0
0000F1C4 3340 000C                  		move.w	d0,$C(a1)
0000F1C8 237C 0000 A404 0004        		move.l	#Map_obj25,4(a1)
0000F1D0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F1D6 137C 0004 0001             		move.b	#4,1(a1)
0000F1DC 137C 0002 0018             		move.b	#2,$18(a1)
0000F1E2 137C 0008 0019             		move.b	#8,$19(a1)
0000F1E8                            
0000F1E8                            locret_EC42:
0000F1E8 4E75                       		rts	
0000F1EA                            ; ===========================================================================
0000F1EA E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1EC 0808                       		dc.b	8,   8
0000F1EE F000                       		dc.b -$10,   0
0000F1F0 18F8                       		dc.b  $18,  -8
0000F1F2 00F8                       		dc.b	0,  -8
0000F1F4 1000                       		dc.b  $10,   0
0000F1F6 E808                       		dc.b -$18,   8
0000F1F8 1810                       		dc.b  $18, $10
0000F1FA                            ; ===========================================================================
0000F1FA                            
0000F1FA                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1FA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1FE 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F202 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F208 6600                       		bne.s	loc_EC70
0000F20A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F210 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F216 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F218 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F21E 6000                       		bra.s	loc_EC70
0000F220                            
0000F220                            Obj0D_MoveLeft:
0000F220 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F226                            
0000F226                            loc_EC70:
0000F226 4A38 D000                  		tst.b	($FFFFD000).w
0000F22A 6700                       		beq.s	loc_EC86
0000F22C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F230 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F234 0641 0128                  		addi.w	#$128,d1
0000F238 B041                       		cmp.w	d1,d0
0000F23A 6500                       		bcs.s	locret_ECEE
0000F23C                            
0000F23C                            loc_EC86:
0000F23C 5428 0024                  		addq.b	#2,$24(a0)
0000F240                            
0000F240                            ; ---------------------------------------------------------------------------
0000F240                            ; Subroutine to	set up bonuses at the end of an	act
0000F240                            ; ---------------------------------------------------------------------------
0000F240                            
0000F240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F240                            
0000F240                            
0000F240                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F240 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F244 6600                       		bne.s	locret_ECEE
0000F246 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F24C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F250 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F254 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F25A 7010                       		moveq	#$10,d0
0000F25C 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F262 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F268 7000                       		moveq	#0,d0
0000F26A 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F26E C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F272 7200                       		moveq	#0,d1
0000F274 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F278 D041                       		add.w	d1,d0		; add up your time
0000F27A 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F27E 7214                       		moveq	#$14,d1
0000F280 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F282 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F284 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F286                            
0000F286                            loc_ECD0:
0000F286 D040                       		add.w	d0,d0
0000F288 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F28E 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F292 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F296 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F29A 303C 008E                  		move.w	#$8E,d0
0000F29E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F2A4                            
0000F2A4                            locret_ECEE:
0000F2A4 4E75                       		rts	
0000F2A6                            ; End of function GotThroughAct
0000F2A6                            
0000F2A6                            ; ===========================================================================
0000F2A6 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F2BA 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F2D0                            ; ===========================================================================
0000F2D0                            
0000F2D0                            locret_ED1A:				; XREF: Obj0D_Index
0000F2D0 4E75                       		rts	
0000F2D2                            ; ===========================================================================
0000F2D2                            Ani_obj0D:
0000F2D2                            	include "_anim\obj0D.asm"
0000F2D2                            ; ---------------------------------------------------------------------------
0000F2D2                            ; Animation script - signpost
0000F2D2                            ; ---------------------------------------------------------------------------
0000F2D2 0000                       		dc.w byte_ED24-Ani_obj0D
0000F2D4 0000                       		dc.w byte_ED28-Ani_obj0D
0000F2D6 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F2D8 0000                       		dc.w byte_ED34-Ani_obj0D
0000F2DA 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F2DE 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2E4 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2EA 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2EE 00                         		even
0000F2EE 00                         		even
0000F2EE                            
0000F2EE                            ; ---------------------------------------------------------------------------
0000F2EE                            ; Sprite mappings - signpost
0000F2EE                            ; ---------------------------------------------------------------------------
0000F2EE                            Map_obj0D:
0000F2EE                            	include "_maps\obj0D.asm"
0000F2EE                            ; ---------------------------------------------------------------------------
0000F2EE                            ; Sprite mappings - signpost
0000F2EE                            ; ---------------------------------------------------------------------------
0000F2EE 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2F2 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2F6 0000                       		dc.w byte_ED73-Map_obj0D
0000F2F8 03                         byte_ED42:	dc.b 3
0000F2F9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2FE F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F303 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F308 02                         byte_ED52:	dc.b 2
0000F309 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F30E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F313 02                         byte_ED5D:	dc.b 2
0000F314 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F319 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F31E 02                         byte_ED68:	dc.b 2
0000F31F F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F324 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F329 03                         byte_ED73:	dc.b 3
0000F32A F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F32F F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F334 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F33A 00                         		even
0000F33A 00                         		even
0000F33A                            
0000F33A                            ; ===========================================================================
0000F33A                            ; ---------------------------------------------------------------------------
0000F33A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F33A                            ; ---------------------------------------------------------------------------
0000F33A                            
0000F33A                            Obj4C:					; XREF: Obj_Index
0000F33A 7000                       		moveq	#0,d0
0000F33C 1028 0024                  		move.b	$24(a0),d0
0000F340 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F344 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F348 6000 0000                  		bra.w	Obj4D_ChkDel
0000F34C                            ; ===========================================================================
0000F34C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F34E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F350 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F352 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F354 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F356 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F358                            ; ===========================================================================
0000F358                            
0000F358                            Obj4C_Main:				; XREF: Obj4C_Index
0000F358 5428 0024                  		addq.b	#2,$24(a0)
0000F35C 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F364 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F36A 117C 0004 0001             		move.b	#4,1(a0)
0000F370 117C 0001 0018             		move.b	#1,$18(a0)
0000F376 117C 0038 0019             		move.b	#$38,$19(a0)
0000F37C 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F382                            
0000F382                            loc_EDCC:				; XREF: Obj4C_Index
0000F382 5368 0032                  		subq.w	#1,$32(a0)
0000F386 6A00                       		bpl.s	locret_EDF0
0000F388 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F38E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F392 3228 000C                  		move.w	$C(a0),d1
0000F396 B041                       		cmp.w	d1,d0
0000F398 6400                       		bcc.s	locret_EDF0
0000F39A 0441 0170                  		subi.w	#$170,d1
0000F39E B041                       		cmp.w	d1,d0
0000F3A0 6500                       		bcs.s	locret_EDF0
0000F3A2 5428 0024                  		addq.b	#2,$24(a0)
0000F3A6                            
0000F3A6                            locret_EDF0:
0000F3A6 4E75                       		rts	
0000F3A8                            ; ===========================================================================
0000F3A8                            
0000F3A8                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F3A8 5428 0024                  		addq.b	#2,$24(a0)
0000F3AC 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F3B0 6600                       		bne.s	loc_EE18
0000F3B2 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F3B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F3BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F3C2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F3C8 2348 003C                  		move.l	a0,$3C(a1)
0000F3CC                            
0000F3CC                            loc_EE18:
0000F3CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3D2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3D6 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F3D8 117C 0004 001C             		move.b	#4,$1C(a0)
0000F3DE 6000                       		bra.s	Obj4C_Display
0000F3E0                            ; ===========================================================================
0000F3E0                            
0000F3E0                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F3E0 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3E4 08E9 0001 0022             		bset	#1,$22(a1)
0000F3EA 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3F0 6000                       		bra.s	Obj4C_Display
0000F3F2                            ; ===========================================================================
0000F3F2                            
0000F3F2                            loc_EE3E:				; XREF: Obj4C_Index
0000F3F2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3F6 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3F8 5428 0024                  		addq.b	#2,$24(a0)
0000F3FC 4E75                       		rts	
0000F3FE                            ; ===========================================================================
0000F3FE                            
0000F3FE                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3FE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F404 6100 B860                  		bsr.w	AnimateSprite
0000F408 6100 E7AA                  		bsr.w	DisplaySprite
0000F40C 4E75                       		rts	
0000F40E                            ; ===========================================================================
0000F40E                            
0000F40E                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F40E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F414 117C 0002 0024             		move.b	#2,$24(a0)
0000F41A 4A28 0028                  		tst.b	$28(a0)
0000F41E 6700 E7D0                  		beq.w	DeleteObject
0000F422 4E75                       		rts	
0000F424                            ; ===========================================================================
0000F424                            ; ---------------------------------------------------------------------------
0000F424                            ; Object 4D - lava geyser / lavafall (MZ)
0000F424                            ; ---------------------------------------------------------------------------
0000F424                            
0000F424                            Obj4D:					; XREF: Obj_Index
0000F424 7000                       		moveq	#0,d0
0000F426 1028 0024                  		move.b	$24(a0),d0
0000F42A 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F42E 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F432 6000 E780                  		bra.w	DisplaySprite
0000F436                            ; ===========================================================================
0000F436 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F438 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F43A 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F43C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F43E                            
0000F43E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F442                            ; ===========================================================================
0000F442                            
0000F442                            Obj4D_Main:				; XREF: Obj4D_Index
0000F442 5428 0024                  		addq.b	#2,$24(a0)
0000F446 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F44C 4A28 0028                  		tst.b	$28(a0)
0000F450 6700                       		beq.s	loc_EEA4
0000F452 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F458                            
0000F458                            loc_EEA4:
0000F458 7000                       		moveq	#0,d0
0000F45A 1028 0028                  		move.b	$28(a0),d0
0000F45E D040                       		add.w	d0,d0
0000F460 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F466 2248                       		movea.l	a0,a1
0000F468 7201                       		moveq	#1,d1
0000F46A 6100                       		bsr.s	Obj4D_MakeLava
0000F46C 6000                       		bra.s	loc_EF10
0000F46E                            ; ===========================================================================
0000F46E                            
0000F46E                            Obj4D_Loop:
0000F46E 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F472 6600                       		bne.s	loc_EF0A
0000F474                            
0000F474                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F474 12BC 004D                  		move.b	#$4D,0(a1)
0000F478 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F480 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F486 137C 0004 0001             		move.b	#4,1(a1)
0000F48C 137C 0020 0019             		move.b	#$20,$19(a1)
0000F492 3368 0008 0008             		move.w	8(a0),8(a1)
0000F498 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F49E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4A4 137C 0001 0018             		move.b	#1,$18(a1)
0000F4AA 137C 0005 001C             		move.b	#5,$1C(a1)
0000F4B0 4A28 0028                  		tst.b	$28(a0)
0000F4B4 6700                       		beq.s	loc_EF0A
0000F4B6 137C 0002 001C             		move.b	#2,$1C(a1)
0000F4BC                            
0000F4BC                            loc_EF0A:
0000F4BC 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F4C0 4E75                       		rts	
0000F4C2                            ; ===========================================================================
0000F4C2                            
0000F4C2                            loc_EF10:				; XREF: Obj4D_Main
0000F4C2 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F4C8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4CE 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F4D4 137C 0093 0020             		move.b	#$93,$20(a1)
0000F4DA 137C 0080 0016             		move.b	#$80,$16(a1)
0000F4E0 08E9 0004 0001             		bset	#4,1(a1)
0000F4E6 5829 0024                  		addq.b	#4,$24(a1)
0000F4EA 2348 003C                  		move.l	a0,$3C(a1)
0000F4EE 4A28 0028                  		tst.b	$28(a0)
0000F4F2 6700                       		beq.s	Obj4D_PlaySnd
0000F4F4 7200                       		moveq	#0,d1
0000F4F6 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4FA 5429 0024                  		addq.b	#2,$24(a1)
0000F4FE 08E9 0004 0002             		bset	#4,2(a1)
0000F504 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F50A 137C 0000 0018             		move.b	#0,$18(a1)
0000F510 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F516 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F51C 117C 0000 0028             		move.b	#0,$28(a0)
0000F522                            
0000F522                            Obj4D_PlaySnd:
0000F522 303C 00C8                  		move.w	#$C8,d0
0000F526 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F52C                            
0000F52C                            Obj4D_Action:				; XREF: Obj4D_Index
0000F52C 7000                       		moveq	#0,d0
0000F52E 1028 0028                  		move.b	$28(a0),d0
0000F532 D040                       		add.w	d0,d0
0000F534 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F538 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F53C 6100 E650                  		bsr.w	SpeedToPos
0000F540 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F546 6100 B71E                  		bsr.w	AnimateSprite
0000F54A                            
0000F54A                            Obj4D_ChkDel:				; XREF: Obj4C
0000F54A 3028 0008                  		move.w	8(a0),d0
0000F54E 0240 FF80                  		andi.w	#$FF80,d0
0000F552 3238 F700                  		move.w	($FFFFF700).w,d1
0000F556 0441 0080                  		subi.w	#$80,d1
0000F55A 0241 FF80                  		andi.w	#$FF80,d1
0000F55E 9041                       		sub.w	d1,d0
0000F560 0C40 0280                  		cmpi.w	#$280,d0
0000F564 6200 E68A                  		bhi.w	DeleteObject
0000F568 4E75                       		rts	
0000F56A                            ; ===========================================================================
0000F56A 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F56C 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F56E                            ; ===========================================================================
0000F56E                            
0000F56E                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F56E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F574 3028 0030                  		move.w	$30(a0),d0
0000F578 B068 000C                  		cmp.w	$C(a0),d0
0000F57C 6400                       		bcc.s	locret_EFDA
0000F57E 5828 0024                  		addq.b	#4,$24(a0)
0000F582 2268 003C                  		movea.l	$3C(a0),a1
0000F586 137C 0003 001C             		move.b	#3,$1C(a1)
0000F58C                            
0000F58C                            locret_EFDA:
0000F58C 4E75                       		rts	
0000F58E                            ; ===========================================================================
0000F58E                            
0000F58E                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F58E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F594 3028 0030                  		move.w	$30(a0),d0
0000F598 B068 000C                  		cmp.w	$C(a0),d0
0000F59C 6400                       		bcc.s	locret_EFFA
0000F59E 5828 0024                  		addq.b	#4,$24(a0)
0000F5A2 2268 003C                  		movea.l	$3C(a0),a1
0000F5A6 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5AC                            
0000F5AC                            locret_EFFA:
0000F5AC 4E75                       		rts	
0000F5AE                            ; ===========================================================================
0000F5AE                            
0000F5AE                            loc_EFFC:				; XREF: Obj4D_Index
0000F5AE 2268 003C                  		movea.l	$3C(a0),a1
0000F5B2 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F5B8 6700 0000                  		beq.w	Obj4D_Delete
0000F5BC 3029 000C                  		move.w	$C(a1),d0
0000F5C0 0640 0060                  		addi.w	#$60,d0
0000F5C4 3140 000C                  		move.w	d0,$C(a0)
0000F5C8 9068 0030                  		sub.w	$30(a0),d0
0000F5CC 4440                       		neg.w	d0
0000F5CE 7208                       		moveq	#8,d1
0000F5D0 0C40 0040                  		cmpi.w	#$40,d0
0000F5D4 6C00                       		bge.s	loc_F026
0000F5D6 720B                       		moveq	#$B,d1
0000F5D8                            
0000F5D8                            loc_F026:
0000F5D8 0C40 0080                  		cmpi.w	#$80,d0
0000F5DC 6F00                       		ble.s	loc_F02E
0000F5DE 720E                       		moveq	#$E,d1
0000F5E0                            
0000F5E0                            loc_F02E:
0000F5E0 5328 001E                  		subq.b	#1,$1E(a0)
0000F5E4 6A00                       		bpl.s	loc_F04C
0000F5E6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5EC 5228 001B                  		addq.b	#1,$1B(a0)
0000F5F0 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5F6 6500                       		bcs.s	loc_F04C
0000F5F8 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5FE                            
0000F5FE                            loc_F04C:
0000F5FE 1028 001B                  		move.b	$1B(a0),d0
0000F602 D001                       		add.b	d1,d0
0000F604 1140 001A                  		move.b	d0,$1A(a0)
0000F608 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F60C                            ; ===========================================================================
0000F60C                            
0000F60C                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F60C 6000 E5E2                  		bra.w	DeleteObject
0000F610                            ; ===========================================================================
0000F610                            ; ---------------------------------------------------------------------------
0000F610                            ; Object 4E - advancing	wall of	lava (MZ)
0000F610                            ; ---------------------------------------------------------------------------
0000F610                            
0000F610                            Obj4E:					; XREF: Obj_Index
0000F610 7000                       		moveq	#0,d0
0000F612 1028 0024                  		move.b	$24(a0),d0
0000F616 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F61A 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F61E                            ; ===========================================================================
0000F61E 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F620 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F622 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F624 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F626 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F628                            ; ===========================================================================
0000F628                            
0000F628                            Obj4E_Main:				; XREF: Obj4E_Index
0000F628 5828 0024                  		addq.b	#4,$24(a0)
0000F62C 2248                       		movea.l	a0,a1
0000F62E 7201                       		moveq	#1,d1
0000F630 6000                       		bra.s	Obj4E_Main2
0000F632                            ; ===========================================================================
0000F632                            
0000F632                            Obj4E_Loop:
0000F632 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F636 6600                       		bne.s	loc_F0C8
0000F638                            
0000F638                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F638 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F63C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F644 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F64A 137C 0004 0001             		move.b	#4,1(a1)
0000F650 137C 0050 0019             		move.b	#$50,$19(a1)
0000F656 3368 0008 0008             		move.w	8(a0),8(a1)
0000F65C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F662 137C 0001 0018             		move.b	#1,$18(a1)
0000F668 137C 0000 001C             		move.b	#0,$1C(a1)
0000F66E 137C 0094 0020             		move.b	#$94,$20(a1)
0000F674 2348 003C                  		move.l	a0,$3C(a1)
0000F678                            
0000F678                            loc_F0C8:
0000F678 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F67C                            
0000F67C 5C29 0024                  		addq.b	#6,$24(a1)
0000F680 137C 0004 001A             		move.b	#4,$1A(a1)
0000F686                            
0000F686                            Obj4E_Action:				; XREF: Obj4E_Index
0000F686 3038 D008                  		move.w	($FFFFD008).w,d0
0000F68A 9068 0008                  		sub.w	8(a0),d0
0000F68E 6400                       		bcc.s	Obj4E_ChkSonic
0000F690 4440                       		neg.w	d0
0000F692                            
0000F692                            Obj4E_ChkSonic:
0000F692 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F696 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F698 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F69C 9068 000C                  		sub.w	$C(a0),d0
0000F6A0 6400                       		bcc.s	loc_F0F4
0000F6A2 4440                       		neg.w	d0
0000F6A4                            
0000F6A4                            loc_F0F4:
0000F6A4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F6A8 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6AA 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F6B0 6000                       		bra.s	Obj4E_Solid
0000F6B2                            ; ===========================================================================
0000F6B2                            
0000F6B2                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F6B2 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F6B6 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F6B8 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F6BE 5528 0024                  		subq.b	#2,$24(a0)
0000F6C2                            
0000F6C2                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F6C2 323C 002B                  		move.w	#$2B,d1
0000F6C6 343C 0018                  		move.w	#$18,d2
0000F6CA 3602                       		move.w	d2,d3
0000F6CC 5243                       		addq.w	#1,d3
0000F6CE 3828 0008                  		move.w	8(a0),d4
0000F6D2 1028 0024                  		move.b	$24(a0),d0
0000F6D6 3F00                       		move.w	d0,-(sp)
0000F6D8 6100 0000                  		bsr.w	SolidObject
0000F6DC 301F                       		move.w	(sp)+,d0
0000F6DE 1140 0024                  		move.b	d0,$24(a0)
0000F6E2 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6E8 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6EA 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6EE 4228 0036                  		clr.b	$36(a0)
0000F6F2                            
0000F6F2                            Obj4E_Animate:
0000F6F2 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6F8 6100 B56C                  		bsr.w	AnimateSprite
0000F6FC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F702 6400                       		bcc.s	Obj4E_ChkDel
0000F704 6100 E488                  		bsr.w	SpeedToPos
0000F708                            
0000F708                            Obj4E_ChkDel:
0000F708 6100 E4AA                  		bsr.w	DisplaySprite
0000F70C 4A28 0036                  		tst.b	$36(a0)
0000F710 6600                       		bne.s	locret_F17E
0000F712 3028 0008                  		move.w	8(a0),d0
0000F716 0240 FF80                  		andi.w	#$FF80,d0
0000F71A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F71E 0441 0080                  		subi.w	#$80,d1
0000F722 0241 FF80                  		andi.w	#$FF80,d1
0000F726 9041                       		sub.w	d1,d0
0000F728 0C40 0280                  		cmpi.w	#$280,d0
0000F72C 6200                       		bhi.s	Obj4E_ChkGone
0000F72E                            
0000F72E                            locret_F17E:
0000F72E 4E75                       		rts	
0000F730                            ; ===========================================================================
0000F730                            
0000F730                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F730 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F734 7000                       		moveq	#0,d0
0000F736 1028 0023                  		move.b	$23(a0),d0
0000F73A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F740 117C 0008 0024             		move.b	#8,$24(a0)
0000F746 4E75                       		rts	
0000F748                            ; ===========================================================================
0000F748                            
0000F748                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F748 2268 003C                  		movea.l	$3C(a0),a1
0000F74C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F752 6700                       		beq.s	Obj4E_Delete
0000F754 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F75A 0468 0080 0008             		subi.w	#$80,8(a0)
0000F760 6000 E452                  		bra.w	DisplaySprite
0000F764                            ; ===========================================================================
0000F764                            
0000F764                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F764 6000 E48A                  		bra.w	DeleteObject
0000F768                            ; ===========================================================================
0000F768                            ; ---------------------------------------------------------------------------
0000F768                            ; Object 54 - invisible	lava tag (MZ)
0000F768                            ; ---------------------------------------------------------------------------
0000F768                            
0000F768                            Obj54:					; XREF: Obj_Index
0000F768 7000                       		moveq	#0,d0
0000F76A 1028 0024                  		move.b	$24(a0),d0
0000F76E 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F772 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F776                            ; ===========================================================================
0000F776 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F778 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F77A                            
0000F77A 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F77E                            ; ===========================================================================
0000F77E                            
0000F77E                            Obj54_Main:				; XREF: Obj54_Index
0000F77E 5428 0024                  		addq.b	#2,$24(a0)
0000F782 7000                       		moveq	#0,d0
0000F784 1028 0028                  		move.b	$28(a0),d0
0000F788 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F78E 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F796 117C 0084 0001             		move.b	#$84,1(a0)
0000F79C                            
0000F79C                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F79C 3028 0008                  		move.w	8(a0),d0
0000F7A0 0240 FF80                  		andi.w	#$FF80,d0
0000F7A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7A8 0441 0080                  		subi.w	#$80,d1
0000F7AC 0241 FF80                  		andi.w	#$FF80,d1
0000F7B0 9041                       		sub.w	d1,d0
0000F7B2 6B00 E43C                  		bmi.w	DeleteObject
0000F7B6 0C40 0280                  		cmpi.w	#$280,d0
0000F7BA 6200 E434                  		bhi.w	DeleteObject
0000F7BE 4E75                       		rts	
0000F7C0                            ; ===========================================================================
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            ; Sprite mappings - invisible lava tag (MZ)
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            Map_obj54:
0000F7C0                            	include "_maps\obj54.asm"
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            ; Sprite mappings - invisible lava tag (MZ)
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0 0000                       		dc.w byte_F212-Map_obj54
0000F7C2 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F7C4 00                         		even
0000F7C4 00                         		even
0000F7C4                            
0000F7C4                            Ani_obj4C:
0000F7C4                            	include "_anim\obj4C.asm"
0000F7C4                            ; ---------------------------------------------------------------------------
0000F7C4                            ; Animation script - geyser of lava (MZ)
0000F7C4                            ; ---------------------------------------------------------------------------
0000F7C4 0000                       		dc.w byte_F220-Ani_obj4C
0000F7C6 0000                       		dc.w byte_F22A-Ani_obj4C
0000F7C8 0000                       		dc.w byte_F22E-Ani_obj4C
0000F7CA 0000                       		dc.w byte_F232-Ani_obj4C
0000F7CC 0000                       		dc.w byte_F23A-Ani_obj4C
0000F7CE 0000                       		dc.w byte_F23E-Ani_obj4C
0000F7D0 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F7DA 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F7DE 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7E2 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7EA 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7EE 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7F2                            		even
0000F7F2                            		even
0000F7F2                            
0000F7F2                            Ani_obj4E:
0000F7F2                            	include "_anim\obj4E.asm"
0000F7F2                            ; ---------------------------------------------------------------------------
0000F7F2                            ; Animation script - advancing wall of lava (MZ)
0000F7F2                            ; ---------------------------------------------------------------------------
0000F7F2 0000                       		dc.w byte_F244-Ani_obj4E
0000F7F4 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7FA                            		even
0000F7FA                            		even
0000F7FA                            
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA                            Map_obj4C:
0000F7FA                            	include "_maps\obj4C.asm"
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7FA                            ; ---------------------------------------------------------------------------
0000F7FA 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7FE 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F802 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F806 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F80A 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F80E 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F812 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F816 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F81A 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F81E 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F822 02                         byte_F272:	dc.b 2
0000F823 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F828 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F82D 02                         byte_F27D:	dc.b 2
0000F82E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F833 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F838 04                         byte_F288:	dc.b 4
0000F839 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F83E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F843 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F848 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F84D 04                         byte_F29D:	dc.b 4
0000F84E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F853 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F858 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F85D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F862 06                         byte_F2B2:	dc.b 6
0000F863 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F868 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F86D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F872 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F877 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F87C E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F881 06                         byte_F2D1:	dc.b 6
0000F882 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F887 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F88C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F891 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F896 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F89B E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F8A0 02                         byte_F2F0:	dc.b 2
0000F8A1 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F8A6 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F8AB 02                         byte_F2FB:	dc.b 2
0000F8AC E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F8B1 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F8B6 0A                         byte_F306:	dc.b $A
0000F8B7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F8BC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F8C1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F8C6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F8CB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F8D0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F8D5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F8DA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F8DF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8E4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8E9 0A                         byte_F339:	dc.b $A
0000F8EA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8EF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8F4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8F9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8FE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F903 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F908 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F90D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F912 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F917 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F91C 0A                         byte_F36C:	dc.b $A
0000F91D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F922 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F927 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F92C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F931 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F936 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F93B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F940 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F945 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F94A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F94F 06                         byte_F39F:	dc.b 6
0000F950 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F955 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F95A B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F95F B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F964 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F969 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F96E 06                         byte_F3BE:	dc.b 6
0000F96F 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F974 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F979 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F97E B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F983 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F988 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F98D 06                         byte_F3DD:	dc.b 6
0000F98E 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F993 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F998 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F99D B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F9A2 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F9A7 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9AC 10                         byte_F3FC:	dc.b $10
0000F9AD 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9B2 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9B7 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9BC B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9C1 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9C6 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9CB F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9D0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9D5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9DA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9DF 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9E4 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9E9 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9EE 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9F3 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9F8 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9FD 10                         byte_F44D:	dc.b $10
0000F9FE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA03 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA08 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA0D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA12 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA17 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA1C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA21 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA26 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA2B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA30 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA35 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA3A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA3F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA44 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA49 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA4E 10                         byte_F49E:	dc.b $10
0000FA4F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA54 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA59 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA5E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA63 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA68 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA6D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA72 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA77 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA7C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA81 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA86 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA8B 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA90 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA95 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA9A 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA9F 06                         byte_F4EF:	dc.b 6
0000FAA0 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FAA5 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FAAA E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAAF E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FAB4 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FAB9 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FABE 06                         byte_F50E:	dc.b 6
0000FABF E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FAC4 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FAC9 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FACE E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FAD3 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FAD8 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FADD 00                         byte_F52D:	dc.b 0
0000FADE                            		even
0000FADE                            		even
0000FADE                            
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            Map_obj4E:
0000FADE                            	include "_maps\obj4E.asm"
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE                            ; Sprite mappings - advancing wall of lava (MZ)
0000FADE                            ; ---------------------------------------------------------------------------
0000FADE 0000                       		dc.w byte_F538-Map_obj4E
0000FAE0 0000                       		dc.w byte_F566-Map_obj4E
0000FAE2 0000                       		dc.w byte_F594-Map_obj4E
0000FAE4 0000                       		dc.w byte_F5C2-Map_obj4E
0000FAE6 0000                       		dc.w byte_F5F0-Map_obj4E
0000FAE8 09                         byte_F538:	dc.b 9
0000FAE9 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FAEE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FAF3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAF8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAFD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB02 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB07 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB0C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB11 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB16 09                         byte_F566:	dc.b 9
0000FB17 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB1C 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB21 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB26 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB2B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB30 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB35 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB3A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB3F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB44 09                         byte_F594:	dc.b 9
0000FB45 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB4A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB4F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB54 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB59 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB5E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB63 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB68 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB6D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB72 09                         byte_F5C2:	dc.b 9
0000FB73 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB78 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB7D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB82 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB87 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB8C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB91 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB96 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB9B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBA0 08                         byte_F5F0:	dc.b 8
0000FBA1 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FBA6 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBAB E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBB0 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBB5 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBBA 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBBF E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBC4 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBCA 00                         		even
0000FBCA 00                         		even
0000FBCA                            
0000FBCA                            ; ===========================================================================
0000FBCA                            ; ---------------------------------------------------------------------------
0000FBCA                            ; Object 40 - Moto Bug enemy (GHZ)
0000FBCA                            ; ---------------------------------------------------------------------------
0000FBCA                            
0000FBCA                            Obj40:					; XREF: Obj_Index
0000FBCA 7000                       		moveq	#0,d0
0000FBCC 1028 0024                  		move.b	$24(a0),d0
0000FBD0 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FBD4 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FBD8                            ; ===========================================================================
0000FBD8 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FBDA 0000                       		dc.w Obj40_Action-Obj40_Index
0000FBDC 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FBDE 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FBE0                            ; ===========================================================================
0000FBE0                            
0000FBE0                            Obj40_Main:				; XREF: Obj40_Index
0000FBE0 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBE8 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBEE 117C 0004 0001             		move.b	#4,1(a0)
0000FBF4 117C 0004 0018             		move.b	#4,$18(a0)
0000FBFA 117C 0014 0019             		move.b	#$14,$19(a0)
0000FC00 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FC04 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FC06 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC0C 117C 0008 0017             		move.b	#8,$17(a0)
0000FC12 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC18 6100 DF48                  		bsr.w	ObjectFall
0000FC1C 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC22 4A41                       		tst.w	d1
0000FC24 6A00                       		bpl.s	locret_F68A
0000FC26 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC2A 317C 0000 0012             		move.w	#0,$12(a0)
0000FC30 5428 0024                  		addq.b	#2,$24(a0)
0000FC34 0868 0000 0022             		bchg	#0,$22(a0)
0000FC3A                            
0000FC3A                            locret_F68A:
0000FC3A 4E75                       		rts	
0000FC3C                            ; ===========================================================================
0000FC3C                            
0000FC3C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC3C 5828 0024                  		addq.b	#4,$24(a0)
0000FC40 6000 0000                  		bra.w	Obj40_Animate
0000FC44                            ; ===========================================================================
0000FC44                            
0000FC44                            Obj40_Action:				; XREF: Obj40_Index
0000FC44 7000                       		moveq	#0,d0
0000FC46 1028 0025                  		move.b	$25(a0),d0
0000FC4A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC4E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC52 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC58 6100 B00C                  		bsr.w	AnimateSprite
0000FC5C                            
0000FC5C                            ; ---------------------------------------------------------------------------
0000FC5C                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC5C                            ; ---------------------------------------------------------------------------
0000FC5C                            
0000FC5C                            MarkObjGone:
0000FC5C 3028 0008                  		move.w	8(a0),d0
0000FC60 0240 FF80                  		andi.w	#$FF80,d0
0000FC64 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC68 0441 0080                  		subi.w	#$80,d1
0000FC6C 0241 FF80                  		andi.w	#$FF80,d1
0000FC70 9041                       		sub.w	d1,d0
0000FC72 0C40 0280                  		cmpi.w	#$280,d0
0000FC76 6200 0000                  		bhi.w	Mark_ChkGone
0000FC7A 6000 DF38                  		bra.w	DisplaySprite
0000FC7E                            ; ===========================================================================
0000FC7E                            
0000FC7E                            Mark_ChkGone:
0000FC7E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC82 7000                       		moveq	#0,d0
0000FC84 1028 0023                  		move.b	$23(a0),d0
0000FC88 6700                       		beq.s	Mark_Delete
0000FC8A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC90                            
0000FC90                            Mark_Delete:
0000FC90 6000 DF5E                  		bra.w	DeleteObject
0000FC94                            
0000FC94                            ; ===========================================================================
0000FC94 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC96 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC98                            ; ===========================================================================
0000FC98                            
0000FC98                            Obj40_Move:				; XREF: Obj40_Index2
0000FC98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC9C 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC9E 5428 0025                  		addq.b	#2,$25(a0)
0000FCA2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FCA8 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCAE 0868 0000 0022             		bchg	#0,$22(a0)
0000FCB4 6600                       		bne.s	locret_F70A
0000FCB6 4468 0010                  		neg.w	$10(a0)		; change direction
0000FCBA                            
0000FCBA                            locret_F70A:
0000FCBA 4E75                       		rts	
0000FCBC                            ; ===========================================================================
0000FCBC                            
0000FCBC                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FCBC 6100 DED0                  		bsr.w	SpeedToPos
0000FCC0 4EB9 0000 0000             		jsr	ObjHitFloor
0000FCC6 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCCA 6D00                       		blt.s	Obj40_Pause
0000FCCC 0C41 000C                  		cmpi.w	#$C,d1
0000FCD0 6C00                       		bge.s	Obj40_Pause
0000FCD2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCD6 5328 0033                  		subq.b	#1,$33(a0)
0000FCDA 6A00                       		bpl.s	locret_F756
0000FCDC 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCE2 6100 E356                  		bsr.w	SingleObjLoad
0000FCE6 6600                       		bne.s	locret_F756
0000FCE8 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCEC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCF8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCFE 137C 0002 001C             		move.b	#2,$1C(a1)
0000FD04                            
0000FD04                            locret_F756:
0000FD04 4E75                       		rts	
0000FD06                            ; ===========================================================================
0000FD06                            
0000FD06                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FD06 5528 0025                  		subq.b	#2,$25(a0)
0000FD0A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD10 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD16 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD1C 4E75                       		rts	
0000FD1E                            ; ===========================================================================
0000FD1E                            
0000FD1E                            Obj40_Animate:				; XREF: Obj40_Index
0000FD1E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD24 6100 AF40                  		bsr.w	AnimateSprite
0000FD28 6000 DE8A                  		bra.w	DisplaySprite
0000FD2C                            ; ===========================================================================
0000FD2C                            
0000FD2C                            Obj40_Delete:				; XREF: Obj40_Index
0000FD2C 6000 DEC2                  		bra.w	DeleteObject
0000FD30                            ; ===========================================================================
0000FD30                            Ani_obj40:
0000FD30                            	include "_anim\obj40.asm"
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            ; Animation script - Motobug enemy
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30 0000                       		dc.w byte_F788-Ani_obj40
0000FD32 0000                       		dc.w byte_F78C-Ani_obj40
0000FD34 0000                       		dc.w byte_F792-Ani_obj40
0000FD36 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD3A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD40 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD4E                            		even
0000FD4E                            		even
0000FD4E                            
0000FD4E                            ; ---------------------------------------------------------------------------
0000FD4E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD4E                            ; ---------------------------------------------------------------------------
0000FD4E                            Map_obj40:
0000FD4E                            	include "_maps\obj40.asm"
0000FD4E                            Map_cedc:
0000FD4E 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD50 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD52 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD54 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD56 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD58 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD5A 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD5C 04                         Map_cedc_E: 	dc.b $4
0000FD5D F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD62 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD67 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD6C 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD71 04                         Map_cedc_23: 	dc.b $4
0000FD72 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD77 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD7C F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD81 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD86 05                         Map_cedc_38: 	dc.b $5
0000FD87 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD8C 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD91 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD96 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD9B 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FDA0 01                         Map_cedc_52: 	dc.b $1
0000FDA1 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FDA6 01                         Map_cedc_58: 	dc.b $1
0000FDA7 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDAC 01                         Map_cedc_5E: 	dc.b $1
0000FDAD FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FDB2 00                         Map_cedc_64: 	dc.b $0
0000FDB4 00                         	even
0000FDB4 00                         	even
0000FDB4                            
0000FDB4                            ; ===========================================================================
0000FDB4                            ; ---------------------------------------------------------------------------
0000FDB4                            ; Object 4F - blank
0000FDB4                            ; ---------------------------------------------------------------------------
0000FDB4                            
0000FDB4                            Obj4F:					; XREF: Obj_Index
0000FDB4 4E75                       		rts	
0000FDB6                            
0000FDB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDB6                            
0000FDB6                            
0000FDB6                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FDB6 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FDBA D047                       		add.w	d7,d0
0000FDBC 0240 0003                  		andi.w	#3,d0
0000FDC0 6600                       		bne.s	loc_F836
0000FDC2 7600                       		moveq	#0,d3
0000FDC4 1628 0019                  		move.b	$19(a0),d3
0000FDC8 4A68 0010                  		tst.w	$10(a0)
0000FDCC 6B00                       		bmi.s	loc_F82C
0000FDCE 6100 0000                  		bsr.w	ObjHitWallRight
0000FDD2 4A41                       		tst.w	d1
0000FDD4 6A00                       		bpl.s	loc_F836
0000FDD6                            
0000FDD6                            loc_F828:
0000FDD6 7001                       		moveq	#1,d0
0000FDD8 4E75                       		rts	
0000FDDA                            ; ===========================================================================
0000FDDA                            
0000FDDA                            loc_F82C:
0000FDDA 4643                       		not.w	d3
0000FDDC 6100 0000                  		bsr.w	ObjHitWallLeft
0000FDE0 4A41                       		tst.w	d1
0000FDE2 6BF2                       		bmi.s	loc_F828
0000FDE4                            
0000FDE4                            loc_F836:
0000FDE4 7000                       		moveq	#0,d0
0000FDE6 4E75                       		rts	
0000FDE8                            ; End of function Obj50_ChkWall
0000FDE8                            
0000FDE8                            ; ===========================================================================
0000FDE8                            ; ---------------------------------------------------------------------------
0000FDE8                            ; Object 50 - Yadrin enemy (SYZ)
0000FDE8                            ; ---------------------------------------------------------------------------
0000FDE8                            
0000FDE8                            Obj50:					; XREF: Obj_Index
0000FDE8 7000                       		moveq	#0,d0
0000FDEA 1028 0024                  		move.b	$24(a0),d0
0000FDEE 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDF2 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDF6                            ; ===========================================================================
0000FDF6 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDF8 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDFA                            ; ===========================================================================
0000FDFA                            
0000FDFA                            Obj50_Main:				; XREF: Obj50_Index
0000FDFA 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FE02 317C 247B 0002             		move.w	#$247B,2(a0)
0000FE08 117C 0004 0001             		move.b	#4,1(a0)
0000FE0E 117C 0004 0018             		move.b	#4,$18(a0)
0000FE14 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE1A 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE20 117C 0008 0017             		move.b	#8,$17(a0)
0000FE26 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE2C 6100 DD34                  		bsr.w	ObjectFall
0000FE30 6100 0000                  		bsr.w	ObjHitFloor
0000FE34 4A41                       		tst.w	d1
0000FE36 6A00                       		bpl.s	locret_F89E
0000FE38 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE3C 317C 0000 0012             		move.w	#0,$12(a0)
0000FE42 5428 0024                  		addq.b	#2,$24(a0)
0000FE46 0868 0000 0022             		bchg	#0,$22(a0)
0000FE4C                            
0000FE4C                            locret_F89E:
0000FE4C 4E75                       		rts	
0000FE4E                            ; ===========================================================================
0000FE4E                            
0000FE4E                            Obj50_Action:				; XREF: Obj50_Index
0000FE4E 7000                       		moveq	#0,d0
0000FE50 1028 0025                  		move.b	$25(a0),d0
0000FE54 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE58 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE5C 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE62 6100 AE02                  		bsr.w	AnimateSprite
0000FE66 6000 FDF4                  		bra.w	MarkObjGone
0000FE6A                            ; ===========================================================================
0000FE6A 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE6C 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE6E                            ; ===========================================================================
0000FE6E                            
0000FE6E                            Obj50_Move:				; XREF: Obj50_Index2
0000FE6E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE72 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE74 5428 0025                  		addq.b	#2,$25(a0)
0000FE78 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE7E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE84 0868 0000 0022             		bchg	#0,$22(a0)
0000FE8A 6600                       		bne.s	locret_F8E2
0000FE8C 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE90                            
0000FE90                            locret_F8E2:
0000FE90 4E75                       		rts	
0000FE92                            ; ===========================================================================
0000FE92                            
0000FE92                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE92 6100 DCFA                  		bsr.w	SpeedToPos
0000FE96 6100 0000                  		bsr.w	ObjHitFloor
0000FE9A 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE9E 6D00                       		blt.s	Obj50_Pause
0000FEA0 0C41 000C                  		cmpi.w	#$C,d1
0000FEA4 6C00                       		bge.s	Obj50_Pause
0000FEA6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FEAA 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEAE 6600                       		bne.s	Obj50_Pause
0000FEB0 4E75                       		rts	
0000FEB2                            ; ===========================================================================
0000FEB2                            
0000FEB2                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FEB2 5528 0025                  		subq.b	#2,$25(a0)
0000FEB6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FEBC 317C 0000 0010             		move.w	#0,$10(a0)
0000FEC2 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEC8 4E75                       		rts	
0000FECA                            ; ===========================================================================
0000FECA                            Ani_obj50:
0000FECA                            	include "_anim\obj50.asm"
0000FECA                            ; ---------------------------------------------------------------------------
0000FECA                            ; Animation script - Yadrin enemy
0000FECA                            ; ---------------------------------------------------------------------------
0000FECA 0000                       		dc.w byte_F920-Ani_obj50
0000FECC 0000                       		dc.w byte_F924-Ani_obj50
0000FECE 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FED2 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FEDC                            		even
0000FEDC                            		even
0000FEDC                            
0000FEDC                            ; ---------------------------------------------------------------------------
0000FEDC                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEDC                            ; ---------------------------------------------------------------------------
0000FEDC                            Map_obj50:
0000FEDC                            	include "_maps\obj50.asm"
0000FEDC                            ; ---------------------------------------------------------------------------
0000FEDC                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEDC                            ; ---------------------------------------------------------------------------
0000FEDC 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FEE0 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FEE4 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEE8 05                         byte_F93A:	dc.b 5
0000FEE9 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEEE FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEF3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEF8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEFD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF02 05                         byte_F954:	dc.b 5
0000FF03 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF08 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF0D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF12 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF17 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF1C 05                         byte_F96E:	dc.b 5
0000FF1D F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF22 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF27 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF2C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF31 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF36 05                         byte_F988:	dc.b 5
0000FF37 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF3C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF41 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF46 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF4B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF50 05                         byte_F9A2:	dc.b 5
0000FF51 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF56 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF5B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF60 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF65 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF6A 05                         byte_F9BC:	dc.b 5
0000FF6B F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF70 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF75 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF7A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF7F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF84                            		even
0000FF84                            		even
0000FF84                            
0000FF84                            ; ---------------------------------------------------------------------------
0000FF84                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF84                            ;
0000FF84                            ; variables:
0000FF84                            ; d1 = width
0000FF84                            ; d2 = height /	2 (when	jumping)
0000FF84                            ; d3 = height /	2 (when	walking)
0000FF84                            ; d4 = x-axis position
0000FF84                            ; ---------------------------------------------------------------------------
0000FF84                            
0000FF84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF84                            
0000FF84                            
0000FF84                            SolidObject:
0000FF84 4A28 0025                  		tst.b	$25(a0)
0000FF88 6700 0000                  		beq.w	loc_FAC8
0000FF8C 3401                       		move.w	d1,d2
0000FF8E D442                       		add.w	d2,d2
0000FF90 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF94 0829 0001 0022             		btst	#1,$22(a1)
0000FF9A 6600                       		bne.s	loc_F9FE
0000FF9C 3029 0008                  		move.w	8(a1),d0
0000FFA0 9068 0008                  		sub.w	8(a0),d0
0000FFA4 D041                       		add.w	d1,d0
0000FFA6 6B00                       		bmi.s	loc_F9FE
0000FFA8 B042                       		cmp.w	d2,d0
0000FFAA 6500                       		bcs.s	loc_FA12
0000FFAC                            
0000FFAC                            loc_F9FE:
0000FFAC 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFB2 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFB8 4228 0025                  		clr.b	$25(a0)
0000FFBC 7800                       		moveq	#0,d4
0000FFBE 4E75                       		rts	
0000FFC0                            ; ===========================================================================
0000FFC0                            
0000FFC0                            loc_FA12:
0000FFC0 3404                       		move.w	d4,d2
0000FFC2                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FFC2 7800                       		moveq	#0,d4
0000FFC4 4E75                       		rts	
0000FFC6                            ; ===========================================================================
0000FFC6                            
0000FFC6                            SolidObject71:				; XREF: Obj71_Solid
0000FFC6 4A28 0025                  		tst.b	$25(a0)
0000FFCA 6700 0000                  		beq.w	loc_FAD0
0000FFCE 3401                       		move.w	d1,d2
0000FFD0 D442                       		add.w	d2,d2
0000FFD2 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFD6 0829 0001 0022             		btst	#1,$22(a1)
0000FFDC 6600                       		bne.s	loc_FA44
0000FFDE 3029 0008                  		move.w	8(a1),d0
0000FFE2 9068 0008                  		sub.w	8(a0),d0
0000FFE6 D041                       		add.w	d1,d0
0000FFE8 6B00                       		bmi.s	loc_FA44
0000FFEA B042                       		cmp.w	d2,d0
0000FFEC 6500                       		bcs.s	loc_FA58
0000FFEE                            
0000FFEE                            loc_FA44:
0000FFEE 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFF4 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFFA 4228 0025                  		clr.b	$25(a0)
0000FFFE 7800                       		moveq	#0,d4
00010000 4E75                       		rts	
00010002                            ; ===========================================================================
00010002                            
00010002                            loc_FA58:
00010002 3404                       		move.w	d4,d2
00010004                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010004 7800                       		moveq	#0,d4
00010006 4E75                       		rts	
00010008                            ; ===========================================================================
00010008                            
00010008                            SolidObject2F:				; XREF: Obj2F_Solid
00010008 43F8 D000                  		lea	($FFFFD000).w,a1
0001000C 4A28 0001                  		tst.b	1(a0)
00010010 6A00 0000                  		bpl.w	loc_FB92
00010014 3029 0008                  		move.w	8(a1),d0
00010018 9068 0008                  		sub.w	8(a0),d0
0001001C D041                       		add.w	d1,d0
0001001E 6B00 0000                  		bmi.w	loc_FB92
00010022 3601                       		move.w	d1,d3
00010024 D643                       		add.w	d3,d3
00010026 B043                       		cmp.w	d3,d0
00010028 6200 0000                  		bhi.w	loc_FB92
0001002C 3A00                       		move.w	d0,d5
0001002E 0828 0000 0001             		btst	#0,1(a0)
00010034 6700                       		beq.s	loc_FA94
00010036 4645                       		not.w	d5
00010038 DA43                       		add.w	d3,d5
0001003A                            
0001003A                            loc_FA94:
0001003A E24D                       		lsr.w	#1,d5
0001003C 7600                       		moveq	#0,d3
0001003E 1632 5000                  		move.b	(a2,d5.w),d3
00010042 9612                       		sub.b	(a2),d3
00010044 3A28 000C                  		move.w	$C(a0),d5
00010048 9A43                       		sub.w	d3,d5
0001004A 1629 0016                  		move.b	$16(a1),d3
0001004E 4883                       		ext.w	d3
00010050 D443                       		add.w	d3,d2
00010052 3629 000C                  		move.w	$C(a1),d3
00010056 9645                       		sub.w	d5,d3
00010058 5843                       		addq.w	#4,d3
0001005A D642                       		add.w	d2,d3
0001005C 6B00 0000                  		bmi.w	loc_FB92
00010060 3802                       		move.w	d2,d4
00010062 D844                       		add.w	d4,d4
00010064 B644                       		cmp.w	d4,d3
00010066 6400 0000                  		bcc.w	loc_FB92
0001006A 6000 0000                  		bra.w	loc_FB0E
0001006E                            ; ===========================================================================
0001006E                            
0001006E                            loc_FAC8:
0001006E 4A28 0001                  		tst.b	1(a0)
00010072 6A00 0000                  		bpl.w	loc_FB92
00010076                            
00010076                            loc_FAD0:
00010076 43F8 D000                  		lea	($FFFFD000).w,a1
0001007A 3029 0008                  		move.w	8(a1),d0
0001007E 9068 0008                  		sub.w	8(a0),d0
00010082 D041                       		add.w	d1,d0
00010084 6B00 0000                  		bmi.w	loc_FB92
00010088 3601                       		move.w	d1,d3
0001008A D643                       		add.w	d3,d3
0001008C B043                       		cmp.w	d3,d0
0001008E 6200 0000                  		bhi.w	loc_FB92
00010092 1629 0016                  		move.b	$16(a1),d3
00010096 4883                       		ext.w	d3
00010098 D443                       		add.w	d3,d2
0001009A 3629 000C                  		move.w	$C(a1),d3
0001009E 9668 000C                  		sub.w	$C(a0),d3
000100A2 5843                       		addq.w	#4,d3
000100A4 D642                       		add.w	d2,d3
000100A6 6B00 0000                  		bmi.w	loc_FB92
000100AA 3802                       		move.w	d2,d4
000100AC D844                       		add.w	d4,d4
000100AE B644                       		cmp.w	d4,d3
000100B0 6400 0000                  		bcc.w	loc_FB92
000100B4                            
000100B4                            loc_FB0E:
000100B4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000100B8 6B00 0000                  		bmi.w	loc_FB92
000100BC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000100C2 6400 0000                  		bcc.w	loc_FB92
000100C6 4A78 FE08                  		tst.w	($FFFFFE08).w
000100CA 6600 0000                  		bne.w	loc_FBAC
000100CE 3A00                       		move.w	d0,d5
000100D0 B240                       		cmp.w	d0,d1
000100D2 6400                       		bcc.s	loc_FB36
000100D4 D241                       		add.w	d1,d1
000100D6 9041                       		sub.w	d1,d0
000100D8 3A00                       		move.w	d0,d5
000100DA 4445                       		neg.w	d5
000100DC                            
000100DC                            loc_FB36:
000100DC 3203                       		move.w	d3,d1
000100DE B443                       		cmp.w	d3,d2
000100E0 6400                       		bcc.s	loc_FB44
000100E2 5943                       		subq.w	#4,d3
000100E4 9644                       		sub.w	d4,d3
000100E6 3203                       		move.w	d3,d1
000100E8 4441                       		neg.w	d1
000100EA                            
000100EA                            loc_FB44:
000100EA BA41                       		cmp.w	d1,d5
000100EC 6200 0000                  		bhi.w	loc_FBB0
000100F0 0C41 0004                  		cmpi.w	#4,d1
000100F4 6300                       		bls.s	loc_FB8C
000100F6 4A40                       		tst.w	d0
000100F8 6700                       		beq.s	loc_FB70
000100FA 6B00                       		bmi.s	loc_FB5E
000100FC 4A69 0010                  		tst.w	$10(a1)
00010100 6B00                       		bmi.s	loc_FB70
00010102 6000                       		bra.s	loc_FB64
00010104                            ; ===========================================================================
00010104                            
00010104                            loc_FB5E:
00010104 4A69 0010                  		tst.w	$10(a1)
00010108 6A00                       		bpl.s	loc_FB70
0001010A                            
0001010A                            loc_FB64:
0001010A 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010110 337C 0000 0010             		move.w	#0,$10(a1)
00010116                            
00010116                            loc_FB70:
00010116 9169 0008                  		sub.w	d0,8(a1)
0001011A 0829 0001 0022             		btst	#1,$22(a1)
00010120 6600                       		bne.s	loc_FB8C
00010122 08E9 0005 0022             		bset	#5,$22(a1)
00010128 08E8 0005 0022             		bset	#5,$22(a0)
0001012E 7801                       		moveq	#1,d4
00010130 4E75                       		rts	
00010132                            ; ===========================================================================
00010132                            
00010132                            loc_FB8C:
00010132 6100                       		bsr.s	loc_FBA0
00010134 7801                       		moveq	#1,d4
00010136 4E75                       		rts	
00010138                            ; ===========================================================================
00010138                            
00010138                            loc_FB92:
00010138 0828 0005 0022             		btst	#5,$22(a0)
0001013E 6700                       		beq.s	loc_FBAC
00010140 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010146                            
00010146                            loc_FBA0:
00010146 08A8 0005 0022             		bclr	#5,$22(a0)
0001014C 08A9 0005 0022             		bclr	#5,$22(a1)
00010152                            
00010152                            loc_FBAC:
00010152 7800                       		moveq	#0,d4
00010154 4E75                       		rts	
00010156                            ; ===========================================================================
00010156                            
00010156                            loc_FBB0:
00010156 4A43                       		tst.w	d3
00010158 6B00                       		bmi.s	loc_FBBC
0001015A 0C43 0010                  		cmpi.w	#$10,d3
0001015E 6500                       		bcs.s	loc_FBEE
00010160 60D6                       		bra.s	loc_FB92
00010162                            ; ===========================================================================
00010162                            
00010162                            loc_FBBC:
00010162 4A69 0012                  		tst.w	$12(a1)
00010166 6700                       		beq.s	loc_FBD6
00010168 6A00                       		bpl.s	loc_FBD2
0001016A 4A43                       		tst.w	d3
0001016C 6A00                       		bpl.s	loc_FBD2
0001016E 9769 000C                  		sub.w	d3,$C(a1)
00010172 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010178                            
00010178                            loc_FBD2:
00010178 78FF                       		moveq	#-1,d4
0001017A 4E75                       		rts	
0001017C                            ; ===========================================================================
0001017C                            
0001017C                            loc_FBD6:
0001017C 0829 0001 0022             		btst	#1,$22(a1)
00010182 66F4                       		bne.s	loc_FBD2
00010184 2F08                       		move.l	a0,-(sp)
00010186 2049                       		movea.l	a1,a0
00010188 4EB9 0000 0000             		jsr	KillSonic
0001018E 205F                       		movea.l	(sp)+,a0
00010190 78FF                       		moveq	#-1,d4
00010192 4E75                       		rts	
00010194                            ; ===========================================================================
00010194                            
00010194                            loc_FBEE:
00010194 5943                       		subq.w	#4,d3
00010196 7200                       		moveq	#0,d1
00010198 1228 0019                  		move.b	$19(a0),d1
0001019C 3401                       		move.w	d1,d2
0001019E D442                       		add.w	d2,d2
000101A0 D269 0008                  		add.w	8(a1),d1
000101A4 9268 0008                  		sub.w	8(a0),d1
000101A8 6B00                       		bmi.s	loc_FC28
000101AA B242                       		cmp.w	d2,d1
000101AC 6400                       		bcc.s	loc_FC28
000101AE 4A69 0012                  		tst.w	$12(a1)
000101B2 6B00                       		bmi.s	loc_FC28
000101B4 9769 000C                  		sub.w	d3,$C(a1)
000101B8 5369 000C                  		subq.w	#1,$C(a1)
000101BC 6100                       		bsr.s	sub_FC2C
000101BE 117C 0002 0025             		move.b	#2,$25(a0)
000101C4 08E8 0003 0022             		bset	#3,$22(a0)
000101CA 78FF                       		moveq	#-1,d4
000101CC 4E75                       		rts	
000101CE                            ; ===========================================================================
000101CE                            
000101CE                            loc_FC28:
000101CE 7800                       		moveq	#0,d4
000101D0 4E75                       		rts	
000101D2                            ; End of function SolidObject
000101D2                            
000101D2                            
000101D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101D2                            
000101D2                            
000101D2                            sub_FC2C:				; XREF: SolidObject
000101D2 0829 0003 0022             		btst	#3,$22(a1)
000101D8 6700                       		beq.s	loc_FC4E
000101DA 7000                       		moveq	#0,d0
000101DC 1029 003D                  		move.b	$3D(a1),d0
000101E0 ED48                       		lsl.w	#6,d0
000101E2 0680 00FF D000             		addi.l	#$FFD000,d0
000101E8 2440                       		movea.l	d0,a2
000101EA 08AA 0003 0022             		bclr	#3,$22(a2)
000101F0 422A 0025                  		clr.b	$25(a2)
000101F4                            
000101F4                            loc_FC4E:
000101F4 3008                       		move.w	a0,d0
000101F6 0440 D000                  		subi.w	#-$3000,d0
000101FA EC48                       		lsr.w	#6,d0
000101FC 0240 007F                  		andi.w	#$7F,d0
00010200 1340 003D                  		move.b	d0,$3D(a1)
00010204 137C 0000 0026             		move.b	#0,$26(a1)
0001020A 337C 0000 0012             		move.w	#0,$12(a1)
00010210 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010216 0829 0001 0022             		btst	#1,$22(a1)
0001021C 6700                       		beq.s	loc_FC84
0001021E 2F08                       		move.l	a0,-(sp)
00010220 2049                       		movea.l	a1,a0
00010222 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010228 205F                       		movea.l	(sp)+,a0
0001022A                            
0001022A                            loc_FC84:
0001022A 08E9 0003 0022             		bset	#3,$22(a1)
00010230 08E8 0003 0022             		bset	#3,$22(a0)
00010236 4E75                       		rts	
00010238                            ; End of function sub_FC2C
00010238                            
00010238                            ; ===========================================================================
00010238                            ; ---------------------------------------------------------------------------
00010238                            ; Object 51 - smashable	green block (MZ)
00010238                            ; ---------------------------------------------------------------------------
00010238                            
00010238                            Obj51:					; XREF: Obj_Index
00010238 7000                       		moveq	#0,d0
0001023A 1028 0024                  		move.b	$24(a0),d0
0001023E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010242 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010246 6000 FA14                  		bra.w	MarkObjGone
0001024A                            ; ===========================================================================
0001024A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001024C 0000                       		dc.w Obj51_Solid-Obj51_Index
0001024E 0000                       		dc.w Obj51_Display-Obj51_Index
00010250                            ; ===========================================================================
00010250                            
00010250                            Obj51_Main:				; XREF: Obj51_Index
00010250 5428 0024                  		addq.b	#2,$24(a0)
00010254 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001025C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010262 117C 0004 0001             		move.b	#4,1(a0)
00010268 117C 0010 0019             		move.b	#$10,$19(a0)
0001026E 117C 0004 0018             		move.b	#4,$18(a0)
00010274 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001027A                            
0001027A                            Obj51_Solid:				; XREF: Obj51_Index
0001027A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010280 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010286 323C 001B                  		move.w	#$1B,d1
0001028A 343C 0010                  		move.w	#$10,d2
0001028E 363C 0011                  		move.w	#$11,d3
00010292 3828 0008                  		move.w	8(a0),d4
00010296 6100 FCEC                  		bsr.w	SolidObject
0001029A 0828 0003 0022             		btst	#3,$22(a0)
000102A0 6600                       		bne.s	Obj51_Smash
000102A2                            
000102A2                            locret_FCFC:
000102A2 4E75                       		rts	
000102A4                            ; ===========================================================================
000102A4                            
000102A4                            Obj51_Smash:				; XREF: Obj51_Solid
000102A4 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000102AA 66F6                       		bne.s	locret_FCFC	; if not, branch
000102AC 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000102B2 08E9 0002 0022             		bset	#2,$22(a1)
000102B8 137C 000E 0016             		move.b	#$E,$16(a1)
000102BE 137C 0007 0017             		move.b	#7,$17(a1)
000102C4 137C 0002 001C             		move.b	#2,$1C(a1)
000102CA 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000102D0 08E9 0001 0022             		bset	#1,$22(a1)
000102D6 08A9 0003 0022             		bclr	#3,$22(a1)
000102DC 137C 0002 0024             		move.b	#2,$24(a1)
000102E2 08A8 0003 0022             		bclr	#3,$22(a0)
000102E8 4228 0025                  		clr.b	$25(a0)
000102EC 117C 0001 001A             		move.b	#1,$1A(a0)
000102F2 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102F8 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102FA 343C 0038                  		move.w	#$38,d2
000102FE 6100 D4A2                  		bsr.w	SmashObject
00010302 6100 DD36                  		bsr.w	SingleObjLoad
00010306 6600                       		bne.s	Obj51_Display
00010308 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001030C 3368 0008 0008             		move.w	8(a0),8(a1)
00010312 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010318 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0001031C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010320 0C42 0006                  		cmpi.w	#6,d2
00010324 6500                       		bcs.s	Obj51_Bonus
00010326 7406                       		moveq	#6,d2
00010328                            
00010328                            Obj51_Bonus:
00010328 7000                       		moveq	#0,d0
0001032A 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001032E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010334 6500                       		bcs.s	loc_FD98	; if not, branch
00010336 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001033A 740A                       		moveq	#10,d2
0001033C                            
0001033C                            loc_FD98:
0001033C 4EB9 0000 0000             		jsr	AddPoints
00010342 E24A                       		lsr.w	#1,d2
00010344 1342 001A                  		move.b	d2,$1A(a1)
00010348                            
00010348                            Obj51_Display:				; XREF: Obj51_Index
00010348 6100 D844                  		bsr.w	SpeedToPos
0001034C 0668 0038 0012             		addi.w	#$38,$12(a0)
00010352 6100 D860                  		bsr.w	DisplaySprite
00010356 4A28 0001                  		tst.b	1(a0)
0001035A 6A00 D894                  		bpl.w	DeleteObject
0001035E 4E75                       		rts	
00010360                            ; ===========================================================================
00010360 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010364 FF00 FF00                  		dc.w $FF00, $FF00
00010368 0200 FE00                  		dc.w $200, $FE00
0001036C 0100 FF00                  		dc.w $100, $FF00
00010370                            
00010370 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010378                            ; ---------------------------------------------------------------------------
00010378                            ; Sprite mappings - smashable green block (MZ)
00010378                            ; ---------------------------------------------------------------------------
00010378                            Map_obj51:
00010378                            	include "_maps\obj51.asm"
00010378                            ; ---------------------------------------------------------------------------
00010378                            ; Sprite mappings - smashable green block (MZ)
00010378                            ; ---------------------------------------------------------------------------
00010378 0000                       		dc.w byte_FDD8-Map_obj51
0001037A 0000                       		dc.w byte_FDE3-Map_obj51
0001037C 02                         byte_FDD8:	dc.b 2
0001037D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010382 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010387 04                         byte_FDE3:	dc.b 4
00010388 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001038D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010392 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010397 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001039C                            		even
0001039C                            		even
0001039C                            
0001039C                            ; ===========================================================================
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            
0001039C                            Obj52:					; XREF: Obj_Index
0001039C 7000                       		moveq	#0,d0
0001039E 1028 0024                  		move.b	$24(a0),d0
000103A2 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000103A6 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000103AA                            ; ===========================================================================
000103AA 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103AC 0000                       		dc.w Obj52_Platform-Obj52_Index
000103AE 0000                       		dc.w Obj52_StandOn-Obj52_Index
000103B0                            
000103B0 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000103B2 2001                       		dc.b $20, 1
000103B4 2002                       		dc.b $20, 2
000103B6 4003                       		dc.b $40, 3
000103B8 3004                       		dc.b $30, 4
000103BA                            ; ===========================================================================
000103BA                            
000103BA                            Obj52_Main:				; XREF: Obj52_Index
000103BA 5428 0024                  		addq.b	#2,$24(a0)
000103BE 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000103C6 317C 42B8 0002             		move.w	#$42B8,2(a0)
000103CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103D2 6600                       		bne.s	loc_FE44
000103D4 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000103DC 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103E2 117C 0007 0016             		move.b	#7,$16(a0)
000103E8                            
000103E8                            loc_FE44:
000103E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103EE 6600                       		bne.s	loc_FE60
000103F0 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103F6 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103FC 6700                       		beq.s	loc_FE60	; if yes, branch
000103FE 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010404                            
00010404                            loc_FE60:
00010404 117C 0004 0001             		move.b	#4,1(a0)
0001040A 7000                       		moveq	#0,d0
0001040C 1028 0028                  		move.b	$28(a0),d0
00010410 E648                       		lsr.w	#3,d0
00010412 0240 001E                  		andi.w	#$1E,d0
00010416 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001041A 115A 0019                  		move.b	(a2)+,$19(a0)
0001041E 115A 001A                  		move.b	(a2)+,$1A(a0)
00010422 117C 0004 0018             		move.b	#4,$18(a0)
00010428 3168 0008 0030             		move.w	8(a0),$30(a0)
0001042E 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010434 0228 000F 0028             		andi.b	#$F,$28(a0)
0001043A                            
0001043A                            Obj52_Platform:				; XREF: Obj52_Index
0001043A 6100 0000                  		bsr.w	Obj52_Move
0001043E 7200                       		moveq	#0,d1
00010440 1228 0019                  		move.b	$19(a0),d1
00010444 4EB9 0000 789E             		jsr	(PlatformObject).l
0001044A 6000                       		bra.s	Obj52_ChkDel
0001044C                            ; ===========================================================================
0001044C                            
0001044C                            Obj52_StandOn:				; XREF: Obj52_Index
0001044C 7200                       		moveq	#0,d1
0001044E 1228 0019                  		move.b	$19(a0),d1
00010452 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00010458 3F28 0008                  		move.w	8(a0),-(sp)
0001045C 6100 0000                  		bsr.w	Obj52_Move
00010460 341F                       		move.w	(sp)+,d2
00010462 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
00010468                            
00010468                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010468 3028 0030                  		move.w	$30(a0),d0
0001046C 0240 FF80                  		andi.w	#$FF80,d0
00010470 3238 F700                  		move.w	($FFFFF700).w,d1
00010474 0441 0080                  		subi.w	#$80,d1
00010478 0241 FF80                  		andi.w	#$FF80,d1
0001047C 9041                       		sub.w	d1,d0
0001047E 0C40 0280                  		cmpi.w	#$280,d0
00010482 6200 D76C                  		bhi.w	DeleteObject
00010486 6000 D72C                  		bra.w	DisplaySprite
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001048A 7000                       		moveq	#0,d0
0001048C 1028 0028                  		move.b	$28(a0),d0
00010490 0240 000F                  		andi.w	#$F,d0
00010494 D040                       		add.w	d0,d0
00010496 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001049A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001049E                            ; ===========================================================================
0001049E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000104A2 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000104A6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000104AA 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104AE 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000104B2 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000104B4                            ; ===========================================================================
000104B4                            
000104B4                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000104B4 4E75                       		rts	
000104B6                            ; ===========================================================================
000104B6                            
000104B6                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000104B6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000104BA 323C 0060                  		move.w	#$60,d1
000104BE 0828 0000 0022             		btst	#0,$22(a0)
000104C4 6700                       		beq.s	loc_FF26
000104C6 4440                       		neg.w	d0
000104C8 D041                       		add.w	d1,d0
000104CA                            
000104CA                            loc_FF26:
000104CA 3228 0030                  		move.w	$30(a0),d1
000104CE 9240                       		sub.w	d0,d1
000104D0 3141 0008                  		move.w	d1,8(a0)
000104D4 4E75                       		rts	
000104D6                            ; ===========================================================================
000104D6                            
000104D6                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000104D6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000104DC 6600                       		bne.s	Obj52_02_Wait
000104DE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104E2                            
000104E2                            Obj52_02_Wait:
000104E2 4E75                       		rts	
000104E4                            ; ===========================================================================
000104E4                            
000104E4                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104E4 7600                       		moveq	#0,d3
000104E6 1628 0019                  		move.b	$19(a0),d3
000104EA 6100 0000                  		bsr.w	ObjHitWallRight
000104EE 4A41                       		tst.w	d1		; has the platform hit a wall?
000104F0 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104F2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104F6 3168 0008 0030             		move.w	8(a0),$30(a0)
000104FC 4E75                       		rts	
000104FE                            ; ===========================================================================
000104FE                            
000104FE                            Obj52_03_End:
000104FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010502 4E75                       		rts	
00010504                            ; ===========================================================================
00010504                            
00010504                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010504 7600                       		moveq	#0,d3
00010506 1628 0019                  		move.b	$19(a0),d3
0001050A 6100 0000                  		bsr.w	ObjHitWallRight
0001050E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010510 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010512 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010516 3168 0008 0030             		move.w	8(a0),$30(a0)
0001051C 4E75                       		rts	
0001051E                            ; ===========================================================================
0001051E                            
0001051E                            Obj52_05_End:
0001051E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010522 4E75                       		rts	
00010524                            ; ===========================================================================
00010524                            
00010524                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010524 6100 D668                  		bsr.w	SpeedToPos
00010528 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001052E 6100 0000                  		bsr.w	ObjHitFloor
00010532 4A41                       		tst.w	d1		; has platform hit the floor?
00010534 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010538 D368 000C                  		add.w	d1,$C(a0)
0001053C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010540 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010544                            
00010544                            locret_FFA0:
00010544 4E75                       		rts	
00010546                            ; ===========================================================================
00010546                            
00010546                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010546 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001054A 6700                       		beq.s	Obj52_07_ChkDel
0001054C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010550                            
00010550                            Obj52_07_ChkDel:
00010550 588F                       		addq.l	#4,sp
00010552 3028 0030                  		move.w	$30(a0),d0
00010556 0240 FF80                  		andi.w	#$FF80,d0
0001055A 3238 F700                  		move.w	($FFFFF700).w,d1
0001055E 0441 0080                  		subi.w	#$80,d1
00010562 0241 FF80                  		andi.w	#$FF80,d1
00010566 9041                       		sub.w	d1,d0
00010568 0C40 0280                  		cmpi.w	#$280,d0
0001056C 6200 D682                  		bhi.w	DeleteObject
00010570 4E75                       		rts	
00010572                            ; ===========================================================================
00010572                            
00010572                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010572 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010576 323C 0080                  		move.w	#$80,d1
0001057A 0828 0000 0022             		btst	#0,$22(a0)
00010580 6700                       		beq.s	loc_FFE2
00010582 4440                       		neg.w	d0
00010584 D041                       		add.w	d1,d0
00010586                            
00010586                            loc_FFE2:
00010586 3228 0032                  		move.w	$32(a0),d1
0001058A 9240                       		sub.w	d0,d1
0001058C 3141 000C                  		move.w	d1,$C(a0)
00010590 4E75                       		rts	
00010592                            ; ===========================================================================
00010592                            
00010592                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010592 7600                       		moveq	#0,d3
00010594 1628 0019                  		move.b	$19(a0),d3
00010598 D643                       		add.w	d3,d3
0001059A 7208                       		moveq	#8,d1
0001059C 0828 0000 0022             		btst	#0,$22(a0)
000105A2 6700                       		beq.s	loc_10004
000105A4 4441                       		neg.w	d1
000105A6 4443                       		neg.w	d3
000105A8                            
000105A8                            loc_10004:
000105A8 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105AC 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105AE 3028 0008                  		move.w	8(a0),d0
000105B2 9068 0030                  		sub.w	$30(a0),d0
000105B6 B043                       		cmp.w	d3,d0
000105B8 6700                       		beq.s	Obj52_0A_Wait
000105BA D368 0008                  		add.w	d1,8(a0)	; move platform
000105BE 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000105C4 4E75                       		rts	
000105C6                            ; ===========================================================================
000105C6                            
000105C6                            Obj52_0A_Wait:
000105C6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000105CA 6600                       		bne.s	locret_1002E	; if time remains, branch
000105CC 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000105D2                            
000105D2                            locret_1002E:
000105D2 4E75                       		rts	
000105D4                            ; ===========================================================================
000105D4                            
000105D4                            Obj52_0A_Back:
000105D4 3028 0008                  		move.w	8(a0),d0
000105D8 9068 0030                  		sub.w	$30(a0),d0
000105DC 6700                       		beq.s	Obj52_0A_Reset
000105DE 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105E2 4E75                       		rts	
000105E4                            ; ===========================================================================
000105E4                            
000105E4                            Obj52_0A_Reset:
000105E4 4268 0036                  		clr.w	$36(a0)
000105E8 5328 0028                  		subq.b	#1,$28(a0)
000105EC 4E75                       		rts	
000105EE                            ; ===========================================================================
000105EE                            ; ---------------------------------------------------------------------------
000105EE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105EE                            ; ---------------------------------------------------------------------------
000105EE                            Map_obj52:
000105EE                            	include "_maps\obj52mz.asm"
000105EE                            ; ---------------------------------------------------------------------------
000105EE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105EE                            ; ---------------------------------------------------------------------------
000105EE 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105F2 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105F6 0000                       		dc.w byte_1008F-Map_obj52
000105F8 01                         byte_10054:	dc.b 1
000105F9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105FE 02                         byte_1005A:	dc.b 2
000105FF F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010604 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010609 04                         byte_10065:	dc.b 4
0001060A F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001060F 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010614 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010619 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001061E 04                         byte_1007A:	dc.b 4
0001061F F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010624 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010629 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001062E F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010633 03                         byte_1008F:	dc.b 3
00010634 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010639 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001063E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010644 00                         		even
00010644 00                         		even
00010644                            
00010644                            ; ---------------------------------------------------------------------------
00010644                            ; Sprite mappings - moving block (LZ)
00010644                            ; ---------------------------------------------------------------------------
00010644                            Map_obj52a:
00010644                            	include "_maps\obj52lz.asm"
00010644                            ; ---------------------------------------------------------------------------
00010644                            ; Sprite mappings - moving block (LZ)
00010644                            ; ---------------------------------------------------------------------------
00010644 0000                       		dc.w byte_100A2-Map_obj52a
00010646 01                         byte_100A2:	dc.b 1
00010647 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001064C                            		even
0001064C                            		even
0001064C                            
0001064C                            ; ===========================================================================
0001064C                            ; ---------------------------------------------------------------------------
0001064C                            ; Object 55 - Basaran enemy (MZ)
0001064C                            ; ---------------------------------------------------------------------------
0001064C                            
0001064C                            Obj55:					; XREF: Obj_Index
0001064C 7000                       		moveq	#0,d0
0001064E 1028 0024                  		move.b	$24(a0),d0
00010652 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010656 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001065A                            ; ===========================================================================
0001065A 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001065C 0000                       		dc.w Obj55_Action-Obj55_Index
0001065E                            ; ===========================================================================
0001065E                            
0001065E                            Obj55_Main:				; XREF: Obj55_Index
0001065E 5428 0024                  		addq.b	#2,$24(a0)
00010662 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001066A 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010670 117C 0004 0001             		move.b	#4,1(a0)
00010676 117C 000C 0016             		move.b	#$C,$16(a0)
0001067C 117C 0002 0018             		move.b	#2,$18(a0)
00010682 117C 000B 0020             		move.b	#$B,$20(a0)
00010688 117C 0010 0019             		move.b	#$10,$19(a0)
0001068E                            
0001068E                            Obj55_Action:				; XREF: Obj55_Index
0001068E 7000                       		moveq	#0,d0
00010690 1028 0025                  		move.b	$25(a0),d0
00010694 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010698 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001069C 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000106A2 6100 A5C2                  		bsr.w	AnimateSprite
000106A6 6000 F5B4                  		bra.w	MarkObjGone
000106AA                            ; ===========================================================================
000106AA 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106AC 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106AE 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000106B0 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000106B2                            ; ===========================================================================
000106B2                            
000106B2                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000106B2 343C 0080                  		move.w	#$80,d2
000106B6 6100 0000                  		bsr.w	Obj55_ChkSonic
000106BA 6400                       		bcc.s	Obj55_NoDrop
000106BC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106C0 3140 0036                  		move.w	d0,$36(a0)
000106C4 9068 000C                  		sub.w	$C(a0),d0
000106C8 6500                       		bcs.s	Obj55_NoDrop
000106CA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000106CE 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000106D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000106D4 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000106D6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106DA D007                       		add.b	d7,d0
000106DC 0200 0007                  		andi.b	#7,d0
000106E0 6600                       		bne.s	Obj55_NoDrop
000106E2 117C 0001 001C             		move.b	#1,$1C(a0)
000106E8 5428 0025                  		addq.b	#2,$25(a0)
000106EC                            
000106EC                            Obj55_NoDrop:
000106EC 4E75                       		rts	
000106EE                            ; ===========================================================================
000106EE                            
000106EE                            Obj55_DropFly:				; XREF: Obj55_Index2
000106EE 6100 D49E                  		bsr.w	SpeedToPos
000106F2 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106F8 343C 0080                  		move.w	#$80,d2
000106FC 6100 0000                  		bsr.w	Obj55_ChkSonic
00010700 3028 0036                  		move.w	$36(a0),d0
00010704 9068 000C                  		sub.w	$C(a0),d0
00010708 6500                       		bcs.s	Obj55_ChkDel
0001070A 0C40 0010                  		cmpi.w	#$10,d0
0001070E 6400                       		bcc.s	locret_10180
00010710 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010714 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001071A 117C 0002 001C             		move.b	#2,$1C(a0)
00010720 5428 0025                  		addq.b	#2,$25(a0)
00010724                            
00010724                            locret_10180:
00010724 4E75                       		rts	
00010726                            ; ===========================================================================
00010726                            
00010726                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010726 4A28 0001                  		tst.b	1(a0)
0001072A 6A00 D4C4                  		bpl.w	DeleteObject
0001072E 4E75                       		rts	
00010730                            ; ===========================================================================
00010730                            
00010730                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010730 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010734 0200 000F                  		andi.b	#$F,d0
00010738 6600                       		bne.s	loc_101A0
0001073A 303C 00C0                  		move.w	#$C0,d0
0001073E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010744                            
00010744                            loc_101A0:
00010744 6100 D448                  		bsr.w	SpeedToPos
00010748 3038 D008                  		move.w	($FFFFD008).w,d0
0001074C 9068 0008                  		sub.w	8(a0),d0
00010750 6400                       		bcc.s	loc_101B0
00010752 4440                       		neg.w	d0
00010754                            
00010754                            loc_101B0:
00010754 0C40 0080                  		cmpi.w	#$80,d0
00010758 6500                       		bcs.s	locret_101C6
0001075A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001075E D007                       		add.b	d7,d0
00010760 0200 0007                  		andi.b	#7,d0
00010764 6600                       		bne.s	locret_101C6
00010766 5428 0025                  		addq.b	#2,$25(a0)
0001076A                            
0001076A                            locret_101C6:
0001076A 4E75                       		rts	
0001076C                            ; ===========================================================================
0001076C                            
0001076C                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001076C 6100 D420                  		bsr.w	SpeedToPos
00010770 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010776 6100 0000                  		bsr.w	ObjHitCeiling
0001077A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001077C 6A00                       		bpl.s	locret_101F4	; if not, branch
0001077E 9368 000C                  		sub.w	d1,$C(a0)
00010782 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010788 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001078C 4268 0012                  		clr.w	$12(a0)
00010790 4228 001C                  		clr.b	$1C(a0)
00010794 4228 0025                  		clr.b	$25(a0)
00010798                            
00010798                            locret_101F4:
00010798 4E75                       		rts	
0001079A                            ; ===========================================================================
0001079A                            
0001079A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001079A 323C 0100                  		move.w	#$100,d1
0001079E 08E8 0000 0022             		bset	#0,$22(a0)
000107A4 3038 D008                  		move.w	($FFFFD008).w,d0
000107A8 9068 0008                  		sub.w	8(a0),d0
000107AC 6400                       		bcc.s	loc_10214
000107AE 4440                       		neg.w	d0
000107B0 4441                       		neg.w	d1
000107B2 08A8 0000 0022             		bclr	#0,$22(a0)
000107B8                            
000107B8                            loc_10214:
000107B8 B042                       		cmp.w	d2,d0
000107BA 4E75                       		rts	
000107BC                            ; ===========================================================================
000107BC 6100 D3D0                  		bsr.w	SpeedToPos
000107C0 6100 D3F2                  		bsr.w	DisplaySprite
000107C4 4A28 0001                  		tst.b	1(a0)
000107C8 6A00 D426                  		bpl.w	DeleteObject
000107CC 4E75                       		rts	
000107CE                            ; ===========================================================================
000107CE                            Ani_obj55:
000107CE                            	include "_anim\obj55.asm"
000107CE                            ; ---------------------------------------------------------------------------
000107CE                            ; Animation script - Basaran enemy
000107CE                            ; ---------------------------------------------------------------------------
000107CE 0000                       		dc.w byte_10230-Ani_obj55
000107D0 0000                       		dc.w byte_10234-Ani_obj55
000107D2 0000                       		dc.w byte_10238-Ani_obj55
000107D4 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000107D8 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000107DC 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107E2                            		even
000107E2                            		even
000107E2                            
000107E2                            ; ---------------------------------------------------------------------------
000107E2                            ; Sprite mappings - Basaran enemy (MZ)
000107E2                            ; ---------------------------------------------------------------------------
000107E2                            Map_obj55:
000107E2                            	include "_maps\obj55.asm"
000107E2                            ; ---------------------------------------------------------------------------
000107E2                            ; Sprite mappings - Basaran enemy (MZ)
000107E2                            ; ---------------------------------------------------------------------------
000107E2 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107E6 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107EA 01                         byte_10246:	dc.b 1
000107EB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107F0 03                         byte_1024C:	dc.b 3
000107F1 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107F6 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107FB 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010800 04                         byte_1025C:	dc.b 4
00010801 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010806 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001080B 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010810 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010815 04                         byte_10271:	dc.b 4
00010816 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001081B 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010820 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010825 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001082A                            		even
0001082A                            		even
0001082A                            
0001082A                            ; ===========================================================================
0001082A                            ; ---------------------------------------------------------------------------
0001082A                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001082A                            ; ---------------------------------------------------------------------------
0001082A                            
0001082A                            Obj56:					; XREF: Obj_Index
0001082A 7000                       		moveq	#0,d0
0001082C 1028 0024                  		move.b	$24(a0),d0
00010830 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010834 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010838                            ; ===========================================================================
00010838 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001083A 0000                       		dc.w Obj56_Action-Obj56_Index
0001083C                            
0001083C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001083E 2020                       		dc.b  $20, $20
00010840 1020                       		dc.b  $10, $20
00010842 201A                       		dc.b  $20, $1A
00010844 1027                       		dc.b  $10, $27
00010846 1010                       		dc.b  $10, $10
00010848 0820                       		dc.b	8, $20
0001084A 4010                       		dc.b  $40, $10
0001084C                            ; ===========================================================================
0001084C                            
0001084C                            Obj56_Main:				; XREF: Obj56_Index
0001084C 5428 0024                  		addq.b	#2,$24(a0)
00010850 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010858 317C 4000 0002             		move.w	#$4000,2(a0)
0001085E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010864 6600                       		bne.s	loc_102C8
00010866 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001086C                            
0001086C                            loc_102C8:
0001086C 117C 0004 0001             		move.b	#4,1(a0)
00010872 117C 0003 0018             		move.b	#3,$18(a0)
00010878 7000                       		moveq	#0,d0
0001087A 1028 0028                  		move.b	$28(a0),d0
0001087E E648                       		lsr.w	#3,d0
00010880 0240 000E                  		andi.w	#$E,d0
00010884 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010888 115A 0019                  		move.b	(a2)+,$19(a0)
0001088C 1152 0016                  		move.b	(a2),$16(a0)
00010890 E248                       		lsr.w	#1,d0
00010892 1140 001A                  		move.b	d0,$1A(a0)
00010896 3168 0008 0034             		move.w	8(a0),$34(a0)
0001089C 3168 000C 0030             		move.w	$C(a0),$30(a0)
000108A2 7000                       		moveq	#0,d0
000108A4 1012                       		move.b	(a2),d0
000108A6 D040                       		add.w	d0,d0
000108A8 3140 003A                  		move.w	d0,$3A(a0)
000108AC 7000                       		moveq	#0,d0
000108AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108B4 6700                       		beq.s	loc_10332
000108B6 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000108BA 0240 000F                  		andi.w	#$F,d0
000108BE 5140                       		subq.w	#8,d0
000108C0 6500                       		bcs.s	loc_10332
000108C2 E548                       		lsl.w	#2,d0
000108C4 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000108C8 45F2 0000                  		lea	(a2,d0.w),a2
000108CC 4A52                       		tst.w	(a2)
000108CE 6A00                       		bpl.s	loc_10332
000108D0 0868 0000 0022             		bchg	#0,$22(a0)
000108D6                            
000108D6                            loc_10332:
000108D6 1028 0028                  		move.b	$28(a0),d0
000108DA 6A00                       		bpl.s	Obj56_Action
000108DC 0200 000F                  		andi.b	#$F,d0
000108E0 1140 003C                  		move.b	d0,$3C(a0)
000108E4 117C 0005 0028             		move.b	#5,$28(a0)
000108EA 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108F0 6600                       		bne.s	Obj56_ChkGone
000108F2 117C 000C 0028             		move.b	#$C,$28(a0)
000108F8 317C 0080 003A             		move.w	#$80,$3A(a0)
000108FE                            
000108FE                            Obj56_ChkGone:
000108FE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010902 7000                       		moveq	#0,d0
00010904 1028 0023                  		move.b	$23(a0),d0
00010908 6700                       		beq.s	Obj56_Action
0001090A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010910 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010916 6700                       		beq.s	Obj56_Action
00010918 5228 0028                  		addq.b	#1,$28(a0)
0001091C 4268 003A                  		clr.w	$3A(a0)
00010920                            
00010920                            Obj56_Action:				; XREF: Obj56_Index
00010920 3F28 0008                  		move.w	8(a0),-(sp)
00010924 7000                       		moveq	#0,d0
00010926 1028 0028                  		move.b	$28(a0),d0	; get object type
0001092A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001092E D040                       		add.w	d0,d0
00010930 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010934 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010938 381F                       		move.w	(sp)+,d4
0001093A 4A28 0001                  		tst.b	1(a0)
0001093E 6A00                       		bpl.s	Obj56_ChkDel
00010940 7200                       		moveq	#0,d1
00010942 1228 0019                  		move.b	$19(a0),d1
00010946 0641 000B                  		addi.w	#$B,d1
0001094A 7400                       		moveq	#0,d2
0001094C 1428 0016                  		move.b	$16(a0),d2
00010950 3602                       		move.w	d2,d3
00010952 5243                       		addq.w	#1,d3
00010954 6100 F62E                  		bsr.w	SolidObject
00010958                            
00010958                            Obj56_ChkDel:
00010958 3028 0034                  		move.w	$34(a0),d0
0001095C 0240 FF80                  		andi.w	#$FF80,d0
00010960 3238 F700                  		move.w	($FFFFF700).w,d1
00010964 0441 0080                  		subi.w	#$80,d1
00010968 0241 FF80                  		andi.w	#$FF80,d1
0001096C 9041                       		sub.w	d1,d0
0001096E 0C40 0280                  		cmpi.w	#$280,d0
00010972 6200 D27C                  		bhi.w	DeleteObject
00010976 6000 D23C                  		bra.w	DisplaySprite
0001097A                            ; ===========================================================================
0001097A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001097E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010982 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010986 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001098A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001098E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010992 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010996                            ; ===========================================================================
00010996                            
00010996                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010996 4E75                       		rts	
00010998                            ; ===========================================================================
00010998                            
00010998                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010998 323C 0040                  		move.w	#$40,d1
0001099C 7000                       		moveq	#0,d0
0001099E 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109A2 6000                       		bra.s	Obj56_Move_LR
000109A4                            ; ===========================================================================
000109A4                            
000109A4                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000109A4 323C 0080                  		move.w	#$80,d1
000109A8 7000                       		moveq	#0,d0
000109AA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109AE                            
000109AE                            Obj56_Move_LR:
000109AE 0828 0000 0022             		btst	#0,$22(a0)
000109B4 6700                       		beq.s	loc_10416
000109B6 4440                       		neg.w	d0
000109B8 D041                       		add.w	d1,d0
000109BA                            
000109BA                            loc_10416:
000109BA 3228 0034                  		move.w	$34(a0),d1
000109BE 9240                       		sub.w	d0,d1
000109C0 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109C4 4E75                       		rts	
000109C6                            ; ===========================================================================
000109C6                            
000109C6                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000109C6 323C 0040                  		move.w	#$40,d1
000109CA 7000                       		moveq	#0,d0
000109CC 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109D0 6000                       		bra.s	Obj56_Move_UD
000109D2                            ; ===========================================================================
000109D2                            
000109D2                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000109D2 323C 0080                  		move.w	#$80,d1
000109D6 7000                       		moveq	#0,d0
000109D8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109DC                            
000109DC                            Obj56_Move_UD:
000109DC 0828 0000 0022             		btst	#0,$22(a0)
000109E2 6700                       		beq.s	loc_10444
000109E4 4440                       		neg.w	d0
000109E6 D041                       		add.w	d1,d0
000109E8                            
000109E8                            loc_10444:
000109E8 3228 0030                  		move.w	$30(a0),d1
000109EC 9240                       		sub.w	d0,d1
000109EE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109F2 4E75                       		rts	
000109F4                            ; ===========================================================================
000109F4                            
000109F4                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109F4 4A28 0038                  		tst.b	$38(a0)
000109F8 6600                       		bne.s	loc_104A4
000109FA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A00 6600                       		bne.s	loc_1047A	; if not, branch
00010A02 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010A08 6600                       		bne.s	loc_1047A
00010A0A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00010A12 B068 0008                  		cmp.w	8(a0),d0
00010A16 6400                       		bcc.s	loc_1047A
00010A18 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A1E                            
00010A1E                            loc_1047A:
00010A1E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A22 7000                       		moveq	#0,d0
00010A24 1028 003C                  		move.b	$3C(a0),d0
00010A28 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A2E 6700                       		beq.s	loc_104AE
00010A30 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A36 6600                       		bne.s	loc_1049E	; if not, branch
00010A38 0C00 0003                  		cmpi.b	#3,d0
00010A3C 6600                       		bne.s	loc_1049E
00010A3E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A42                            
00010A42                            loc_1049E:
00010A42 117C 0001 0038             		move.b	#1,$38(a0)
00010A48                            
00010A48                            loc_104A4:
00010A48 4A68 003A                  		tst.w	$3A(a0)
00010A4C 6700                       		beq.s	loc_104C8
00010A4E 5568 003A                  		subq.w	#2,$3A(a0)
00010A52                            
00010A52                            loc_104AE:
00010A52 3028 003A                  		move.w	$3A(a0),d0
00010A56 0828 0000 0022             		btst	#0,$22(a0)
00010A5C 6700                       		beq.s	loc_104BC
00010A5E 4440                       		neg.w	d0
00010A60                            
00010A60                            loc_104BC:
00010A60 3228 0030                  		move.w	$30(a0),d1
00010A64 D240                       		add.w	d0,d1
00010A66 3141 000C                  		move.w	d1,$C(a0)
00010A6A 4E75                       		rts	
00010A6C                            ; ===========================================================================
00010A6C                            
00010A6C                            loc_104C8:
00010A6C 5228 0028                  		addq.b	#1,$28(a0)
00010A70 4228 0038                  		clr.b	$38(a0)
00010A74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A78 7000                       		moveq	#0,d0
00010A7A 1028 0023                  		move.b	$23(a0),d0
00010A7E 67D2                       		beq.s	loc_104AE
00010A80 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A86 60CA                       		bra.s	loc_104AE
00010A88                            ; ===========================================================================
00010A88                            
00010A88                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A88 4A28 0038                  		tst.b	$38(a0)
00010A8C 6600                       		bne.s	loc_10500
00010A8E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A92 7000                       		moveq	#0,d0
00010A94 1028 003C                  		move.b	$3C(a0),d0
00010A98 4A32 0000                  		tst.b	(a2,d0.w)
00010A9C 6A00                       		bpl.s	loc_10512
00010A9E 117C 0001 0038             		move.b	#1,$38(a0)
00010AA4                            
00010AA4                            loc_10500:
00010AA4 7000                       		moveq	#0,d0
00010AA6 1028 0016                  		move.b	$16(a0),d0
00010AAA D040                       		add.w	d0,d0
00010AAC B068 003A                  		cmp.w	$3A(a0),d0
00010AB0 6700                       		beq.s	loc_1052C
00010AB2 5468 003A                  		addq.w	#2,$3A(a0)
00010AB6                            
00010AB6                            loc_10512:
00010AB6 3028 003A                  		move.w	$3A(a0),d0
00010ABA 0828 0000 0022             		btst	#0,$22(a0)
00010AC0 6700                       		beq.s	loc_10520
00010AC2 4440                       		neg.w	d0
00010AC4                            
00010AC4                            loc_10520:
00010AC4 3228 0030                  		move.w	$30(a0),d1
00010AC8 D240                       		add.w	d0,d1
00010ACA 3141 000C                  		move.w	d1,$C(a0)
00010ACE 4E75                       		rts	
00010AD0                            ; ===========================================================================
00010AD0                            
00010AD0                            loc_1052C:
00010AD0 5328 0028                  		subq.b	#1,$28(a0)
00010AD4 4228 0038                  		clr.b	$38(a0)
00010AD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010ADC 7000                       		moveq	#0,d0
00010ADE 1028 0023                  		move.b	$23(a0),d0
00010AE2 67D2                       		beq.s	loc_10512
00010AE4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010AEA 60CA                       		bra.s	loc_10512
00010AEC                            ; ===========================================================================
00010AEC                            
00010AEC                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AEC 4A28 0038                  		tst.b	$38(a0)
00010AF0 6600                       		bne.s	loc_1055E
00010AF2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010AF6 6700                       		beq.s	locret_10578
00010AF8 117C 0001 0038             		move.b	#1,$38(a0)
00010AFE 4268 003A                  		clr.w	$3A(a0)
00010B02                            
00010B02                            loc_1055E:
00010B02 5268 0008                  		addq.w	#1,8(a0)
00010B06 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B0C 5268 003A                  		addq.w	#1,$3A(a0)
00010B10 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B16 6600                       		bne.s	locret_10578
00010B18 4228 0028                  		clr.b	$28(a0)
00010B1C                            
00010B1C                            locret_10578:
00010B1C 4E75                       		rts	
00010B1E                            ; ===========================================================================
00010B1E                            
00010B1E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B1E 4A28 0038                  		tst.b	$38(a0)
00010B22 6600                       		bne.s	loc_10598
00010B24 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B28 7000                       		moveq	#0,d0
00010B2A 1028 003C                  		move.b	$3C(a0),d0
00010B2E 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B34 6700                       		beq.s	loc_105A2
00010B36 117C 0001 0038             		move.b	#1,$38(a0)
00010B3C                            
00010B3C                            loc_10598:
00010B3C 4A68 003A                  		tst.w	$3A(a0)
00010B40 6700                       		beq.s	loc_105C0
00010B42 5568 003A                  		subq.w	#2,$3A(a0)
00010B46                            
00010B46                            loc_105A2:
00010B46 3028 003A                  		move.w	$3A(a0),d0
00010B4A 0828 0000 0022             		btst	#0,$22(a0)
00010B50 6700                       		beq.s	loc_105B4
00010B52 4440                       		neg.w	d0
00010B54 0640 0080                  		addi.w	#$80,d0
00010B58                            
00010B58                            loc_105B4:
00010B58 3228 0034                  		move.w	$34(a0),d1
00010B5C D240                       		add.w	d0,d1
00010B5E 3141 0008                  		move.w	d1,8(a0)
00010B62 4E75                       		rts	
00010B64                            ; ===========================================================================
00010B64                            
00010B64                            loc_105C0:
00010B64 5228 0028                  		addq.b	#1,$28(a0)
00010B68 4228 0038                  		clr.b	$38(a0)
00010B6C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B70 7000                       		moveq	#0,d0
00010B72 1028 0023                  		move.b	$23(a0),d0
00010B76 67CE                       		beq.s	loc_105A2
00010B78 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B7E 60C6                       		bra.s	loc_105A2
00010B80                            ; ===========================================================================
00010B80                            
00010B80                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B80 4A28 0038                  		tst.b	$38(a0)
00010B84 6600                       		bne.s	loc_105F8
00010B86 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B8A 7000                       		moveq	#0,d0
00010B8C 1028 003C                  		move.b	$3C(a0),d0
00010B90 4A32 0000                  		tst.b	(a2,d0.w)
00010B94 6A00                       		bpl.s	loc_10606
00010B96 117C 0001 0038             		move.b	#1,$38(a0)
00010B9C                            
00010B9C                            loc_105F8:
00010B9C 303C 0080                  		move.w	#$80,d0
00010BA0 B068 003A                  		cmp.w	$3A(a0),d0
00010BA4 6700                       		beq.s	loc_10624
00010BA6 5468 003A                  		addq.w	#2,$3A(a0)
00010BAA                            
00010BAA                            loc_10606:
00010BAA 3028 003A                  		move.w	$3A(a0),d0
00010BAE 0828 0000 0022             		btst	#0,$22(a0)
00010BB4 6700                       		beq.s	loc_10618
00010BB6 4440                       		neg.w	d0
00010BB8 0640 0080                  		addi.w	#$80,d0
00010BBC                            
00010BBC                            loc_10618:
00010BBC 3228 0034                  		move.w	$34(a0),d1
00010BC0 D240                       		add.w	d0,d1
00010BC2 3141 0008                  		move.w	d1,8(a0)
00010BC6 4E75                       		rts	
00010BC8                            ; ===========================================================================
00010BC8                            
00010BC8                            loc_10624:
00010BC8 5328 0028                  		subq.b	#1,$28(a0)
00010BCC 4228 0038                  		clr.b	$38(a0)
00010BD0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BD4 7000                       		moveq	#0,d0
00010BD6 1028 0023                  		move.b	$23(a0),d0
00010BDA 67CE                       		beq.s	loc_10606
00010BDC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BE2 60C6                       		bra.s	loc_10606
00010BE4                            ; ===========================================================================
00010BE4                            
00010BE4                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BE4 323C 0010                  		move.w	#$10,d1
00010BE8 7000                       		moveq	#0,d0
00010BEA 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BEE E248                       		lsr.w	#1,d0
00010BF0 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BF4 6000                       		bra.s	Obj56_Move_Sqr
00010BF6                            ; ===========================================================================
00010BF6                            
00010BF6                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BF6 323C 0030                  		move.w	#$30,d1
00010BFA 7000                       		moveq	#0,d0
00010BFC 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010C00 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010C04 6000                       		bra.s	Obj56_Move_Sqr
00010C06                            ; ===========================================================================
00010C06                            
00010C06                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010C06 323C 0050                  		move.w	#$50,d1
00010C0A 7000                       		moveq	#0,d0
00010C0C 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C10 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C14 6000                       		bra.s	Obj56_Move_Sqr
00010C16                            ; ===========================================================================
00010C16                            
00010C16                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C16 323C 0070                  		move.w	#$70,d1
00010C1A 7000                       		moveq	#0,d0
00010C1C 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C20 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C24                            
00010C24                            Obj56_Move_Sqr:
00010C24 4A43                       		tst.w	d3
00010C26 6600                       		bne.s	loc_1068E
00010C28 5228 0022                  		addq.b	#1,$22(a0)
00010C2C 0228 0003 0022             		andi.b	#3,$22(a0)
00010C32                            
00010C32                            loc_1068E:
00010C32 1428 0022                  		move.b	$22(a0),d2
00010C36 0202 0003                  		andi.b	#3,d2
00010C3A 6600                       		bne.s	loc_106AE
00010C3C 9041                       		sub.w	d1,d0
00010C3E D068 0034                  		add.w	$34(a0),d0
00010C42 3140 0008                  		move.w	d0,8(a0)
00010C46 4441                       		neg.w	d1
00010C48 D268 0030                  		add.w	$30(a0),d1
00010C4C 3141 000C                  		move.w	d1,$C(a0)
00010C50 4E75                       		rts	
00010C52                            ; ===========================================================================
00010C52                            
00010C52                            loc_106AE:
00010C52 5302                       		subq.b	#1,d2
00010C54 6600                       		bne.s	loc_106CC
00010C56 5341                       		subq.w	#1,d1
00010C58 9041                       		sub.w	d1,d0
00010C5A 4440                       		neg.w	d0
00010C5C D068 0030                  		add.w	$30(a0),d0
00010C60 3140 000C                  		move.w	d0,$C(a0)
00010C64 5241                       		addq.w	#1,d1
00010C66 D268 0034                  		add.w	$34(a0),d1
00010C6A 3141 0008                  		move.w	d1,8(a0)
00010C6E 4E75                       		rts	
00010C70                            ; ===========================================================================
00010C70                            
00010C70                            loc_106CC:
00010C70 5302                       		subq.b	#1,d2
00010C72 6600                       		bne.s	loc_106EA
00010C74 5341                       		subq.w	#1,d1
00010C76 9041                       		sub.w	d1,d0
00010C78 4440                       		neg.w	d0
00010C7A D068 0034                  		add.w	$34(a0),d0
00010C7E 3140 0008                  		move.w	d0,8(a0)
00010C82 5241                       		addq.w	#1,d1
00010C84 D268 0030                  		add.w	$30(a0),d1
00010C88 3141 000C                  		move.w	d1,$C(a0)
00010C8C 4E75                       		rts	
00010C8E                            ; ===========================================================================
00010C8E                            
00010C8E                            loc_106EA:
00010C8E 9041                       		sub.w	d1,d0
00010C90 D068 0030                  		add.w	$30(a0),d0
00010C94 3140 000C                  		move.w	d0,$C(a0)
00010C98 4441                       		neg.w	d1
00010C9A D268 0034                  		add.w	$34(a0),d1
00010C9E 3141 0008                  		move.w	d1,8(a0)
00010CA2 4E75                       		rts	
00010CA4                            ; ===========================================================================
00010CA4                            ; ---------------------------------------------------------------------------
00010CA4                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CA4                            ; ---------------------------------------------------------------------------
00010CA4                            Map_obj56:
00010CA4                            	include "_maps\obj56.asm"
00010CA4                            ; ---------------------------------------------------------------------------
00010CA4                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CA4                            ; ---------------------------------------------------------------------------
00010CA4 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010CA8 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CAC 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010CB0 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010CB4 01                         byte_10710:	dc.b 1
00010CB5 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010CBA 04                         byte_10716:	dc.b 4
00010CBB E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010CC0 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010CC5 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010CCA 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010CCF 02                         byte_1072B:	dc.b 2
00010CD0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010CD5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010CDA 04                         byte_10736:	dc.b 4
00010CDB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010CE0 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CE5 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CEA 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CEF 03                         byte_1074B:	dc.b 3
00010CF0 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CF5 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CFA 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CFF 01                         byte_1075B:	dc.b 1
00010D00 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010D05 02                         byte_10761:	dc.b 2
00010D06 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010D0B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D10 04                         byte_1076C:	dc.b 4
00010D11 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D16 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D1B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D20 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D26 00                         		even
00010D26 00                         		even
00010D26                            
00010D26                            ; ===========================================================================
00010D26                            ; ---------------------------------------------------------------------------
00010D26                            ; Object 57 - spiked balls (SYZ, LZ)
00010D26                            ; ---------------------------------------------------------------------------
00010D26                            
00010D26                            Obj57:					; XREF: Obj_Index
00010D26 7000                       		moveq	#0,d0
00010D28 1028 0024                  		move.b	$24(a0),d0
00010D2C 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D30 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D34                            ; ===========================================================================
00010D34 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D36 0000                       		dc.w Obj57_Move-Obj57_Index
00010D38 0000                       		dc.w Obj57_Display-Obj57_Index
00010D3A                            ; ===========================================================================
00010D3A                            
00010D3A                            Obj57_Main:				; XREF: Obj57_Index
00010D3A 5428 0024                  		addq.b	#2,$24(a0)
00010D3E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D46 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D4C 117C 0004 0001             		move.b	#4,1(a0)
00010D52 117C 0004 0018             		move.b	#4,$18(a0)
00010D58 117C 0008 0019             		move.b	#8,$19(a0)
00010D5E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D64 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D6A 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D76 6600                       		bne.s	loc_107E8
00010D78 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D7E 317C 0310 0002             		move.w	#$310,2(a0)
00010D84 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D8C                            
00010D8C                            loc_107E8:
00010D8C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D90 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D94 4881                       		ext.w	d1
00010D96 E741                       		asl.w	#3,d1		; multiply by 8
00010D98 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D9C 1028 0022                  		move.b	$22(a0),d0
00010DA0 E418                       		ror.b	#2,d0
00010DA2 0200 00C0                  		andi.b	#-$40,d0
00010DA6 1140 0026                  		move.b	d0,$26(a0)
00010DAA 45E8 0029                  		lea	$29(a0),a2
00010DAE 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DB2 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010DB6 14FC 0000                  		move.b	#0,(a2)+
00010DBA 3601                       		move.w	d1,d3
00010DBC E94B                       		lsl.w	#4,d3
00010DBE 1143 003C                  		move.b	d3,$3C(a0)
00010DC2 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010DC4 6500                       		bcs.s	loc_10894
00010DC6 0828 0003 0028             		btst	#3,$28(a0)
00010DCC 6700                       		beq.s	Obj57_MakeChain
00010DCE 5341                       		subq.w	#1,d1
00010DD0 6500                       		bcs.s	loc_10894
00010DD2                            
00010DD2                            Obj57_MakeChain:
00010DD2 6100 D266                  		bsr.w	SingleObjLoad
00010DD6 6600                       		bne.s	loc_10894
00010DD8 5228 0029                  		addq.b	#1,$29(a0)
00010DDC 3A09                       		move.w	a1,d5
00010DDE 0445 D000                  		subi.w	#-$3000,d5
00010DE2 EC4D                       		lsr.w	#6,d5
00010DE4 0245 007F                  		andi.w	#$7F,d5
00010DE8 14C5                       		move.b	d5,(a2)+
00010DEA 137C 0004 0024             		move.b	#4,$24(a1)
00010DF0 1290                       		move.b	0(a0),0(a1)
00010DF2 2368 0004 0004             		move.l	4(a0),4(a1)
00010DF8 3368 0002 0002             		move.w	2(a0),2(a1)
00010DFE 1368 0001 0001             		move.b	1(a0),1(a1)
00010E04 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010E0A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E10 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E16 0403 0010                  		subi.b	#$10,d3
00010E1A 1343 003C                  		move.b	d3,$3C(a1)
00010E1E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E24 6600                       		bne.s	loc_10890
00010E26 4A03                       		tst.b	d3
00010E28 6600                       		bne.s	loc_10890
00010E2A 137C 0002 001A             		move.b	#2,$1A(a1)
00010E30                            
00010E30                            loc_10890:
00010E30 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E34                            
00010E34                            loc_10894:
00010E34 3A08                       		move.w	a0,d5
00010E36 0445 D000                  		subi.w	#-$3000,d5
00010E3A EC4D                       		lsr.w	#6,d5
00010E3C 0245 007F                  		andi.w	#$7F,d5
00010E40 14C5                       		move.b	d5,(a2)+
00010E42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E48 6600                       		bne.s	Obj57_Move
00010E4A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E50 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E56                            
00010E56                            Obj57_Move:				; XREF: Obj57_Index
00010E56 6100 0000                  		bsr.w	Obj57_MoveSub
00010E5A 6000 0000                  		bra.w	Obj57_ChkDel
00010E5E                            ; ===========================================================================
00010E5E                            
00010E5E                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E5E 3028 003E                  		move.w	$3E(a0),d0
00010E62 D168 0026                  		add.w	d0,$26(a0)
00010E66 1028 0026                  		move.b	$26(a0),d0
00010E6A 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E70 3428 0038                  		move.w	$38(a0),d2
00010E74 3628 003A                  		move.w	$3A(a0),d3
00010E78 45E8 0029                  		lea	$29(a0),a2
00010E7C 7C00                       		moveq	#0,d6
00010E7E 1C1A                       		move.b	(a2)+,d6
00010E80                            
00010E80                            Obj57_MoveLoop:
00010E80 7800                       		moveq	#0,d4
00010E82 181A                       		move.b	(a2)+,d4
00010E84 ED4C                       		lsl.w	#6,d4
00010E86 0684 00FF D000             		addi.l	#$FFD000,d4
00010E8C 2244                       		movea.l	d4,a1
00010E8E 7800                       		moveq	#0,d4
00010E90 1829 003C                  		move.b	$3C(a1),d4
00010E94 2A04                       		move.l	d4,d5
00010E96 C9C0                       		muls.w	d0,d4
00010E98 E084                       		asr.l	#8,d4
00010E9A CBC1                       		muls.w	d1,d5
00010E9C E085                       		asr.l	#8,d5
00010E9E D842                       		add.w	d2,d4
00010EA0 DA43                       		add.w	d3,d5
00010EA2 3344 000C                  		move.w	d4,$C(a1)
00010EA6 3345 0008                  		move.w	d5,8(a1)
00010EAA 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EAE 4E75                       		rts	
00010EB0                            ; ===========================================================================
00010EB0                            
00010EB0                            Obj57_ChkDel:				; XREF: Obj57_Move
00010EB0 3028 003A                  		move.w	$3A(a0),d0
00010EB4 0240 FF80                  		andi.w	#$FF80,d0
00010EB8 3238 F700                  		move.w	($FFFFF700).w,d1
00010EBC 0441 0080                  		subi.w	#$80,d1
00010EC0 0241 FF80                  		andi.w	#$FF80,d1
00010EC4 9041                       		sub.w	d1,d0
00010EC6 0C40 0280                  		cmpi.w	#$280,d0
00010ECA 6200 0000                  		bhi.w	Obj57_Delete
00010ECE 6000 CCE4                  		bra.w	DisplaySprite
00010ED2                            ; ===========================================================================
00010ED2                            
00010ED2                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010ED2 7400                       		moveq	#0,d2
00010ED4 45E8 0029                  		lea	$29(a0),a2
00010ED8 141A                       		move.b	(a2)+,d2
00010EDA                            
00010EDA                            Obj57_DelLoop:
00010EDA 7000                       		moveq	#0,d0
00010EDC 101A                       		move.b	(a2)+,d0
00010EDE ED48                       		lsl.w	#6,d0
00010EE0 0680 00FF D000             		addi.l	#$FFD000,d0
00010EE6 2240                       		movea.l	d0,a1
00010EE8 6100 CD08                  		bsr.w	DeleteObject2
00010EEC 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010EF0                            
00010EF0 4E75                       		rts	
00010EF2                            ; ===========================================================================
00010EF2                            
00010EF2                            Obj57_Display:				; XREF: Obj57_Index
00010EF2 6000 CCC0                  		bra.w	DisplaySprite
00010EF6                            ; ===========================================================================
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6                            Map_obj57:
00010EF6                            	include "_maps\obj57syz.asm"
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EF6                            ; ---------------------------------------------------------------------------
00010EF6 0000                       		dc.w byte_10958-Map_obj57
00010EF8 01                         byte_10958:	dc.b 1
00010EF9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EFE                            		even
00010EFE                            		even
00010EFE                            
00010EFE                            ; ---------------------------------------------------------------------------
00010EFE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EFE                            ; ---------------------------------------------------------------------------
00010EFE                            Map_obj57a:
00010EFE                            	include "_maps\obj57lz.asm"
00010EFE                            ; ---------------------------------------------------------------------------
00010EFE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EFE                            ; ---------------------------------------------------------------------------
00010EFE 0000                       		dc.w byte_10964-Map_obj57a
00010F00 0000                       		dc.w byte_1096A-Map_obj57a
00010F02 0000                       		dc.w byte_10970-Map_obj57a
00010F04 01                         byte_10964:	dc.b 1
00010F05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F0A 01                         byte_1096A:	dc.b 1
00010F0B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F10 01                         byte_10970:	dc.b 1
00010F11 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F16                            		even
00010F16                            		even
00010F16                            
00010F16                            ; ===========================================================================
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            ; Object 58 - giant spiked balls (SYZ)
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            
00010F16                            Obj58:					; XREF: Obj_Index
00010F16 7000                       		moveq	#0,d0
00010F18 1028 0024                  		move.b	$24(a0),d0
00010F1C 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F20 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F24                            ; ===========================================================================
00010F24 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F26 0000                       		dc.w Obj58_Move-Obj58_Index
00010F28                            ; ===========================================================================
00010F28                            
00010F28                            Obj58_Main:				; XREF: Obj58_Index
00010F28 5428 0024                  		addq.b	#2,$24(a0)
00010F2C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F34 317C 0396 0002             		move.w	#$396,2(a0)
00010F3A 117C 0004 0001             		move.b	#4,1(a0)
00010F40 117C 0004 0018             		move.b	#4,$18(a0)
00010F46 117C 0018 0019             		move.b	#$18,$19(a0)
00010F4C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F52 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F58 117C 0086 0020             		move.b	#$86,$20(a0)
00010F5E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F62 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F66 4881                       		ext.w	d1
00010F68 E741                       		asl.w	#3,d1		; multiply by 8
00010F6A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F6E 1028 0022                  		move.b	$22(a0),d0
00010F72 E418                       		ror.b	#2,d0
00010F74 0200 00C0                  		andi.b	#$C0,d0
00010F78 1140 0026                  		move.b	d0,$26(a0)
00010F7C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F82                            
00010F82                            Obj58_Move:				; XREF: Obj58_Index
00010F82 7000                       		moveq	#0,d0
00010F84 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F88 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F8C D040                       		add.w	d0,d0
00010F8E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F92 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F96 3028 003A                  		move.w	$3A(a0),d0
00010F9A 0240 FF80                  		andi.w	#$FF80,d0
00010F9E 3238 F700                  		move.w	($FFFFF700).w,d1
00010FA2 0441 0080                  		subi.w	#$80,d1
00010FA6 0241 FF80                  		andi.w	#$FF80,d1
00010FAA 9041                       		sub.w	d1,d0
00010FAC 0C40 0280                  		cmpi.w	#$280,d0
00010FB0 6200 CC3E                  		bhi.w	DeleteObject
00010FB4 6000 CBFE                  		bra.w	DisplaySprite
00010FB8                            ; ===========================================================================
00010FB8 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010FBA 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010FBC 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010FBE 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010FC0                            ; ===========================================================================
00010FC0                            
00010FC0                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010FC0 4E75                       		rts	
00010FC2                            ; ===========================================================================
00010FC2                            
00010FC2                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010FC2 323C 0060                  		move.w	#$60,d1
00010FC6 7000                       		moveq	#0,d0
00010FC8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FCC 0828 0000 0022             		btst	#0,$22(a0)
00010FD2 6700                       		beq.s	loc_10A38
00010FD4 4440                       		neg.w	d0
00010FD6 D041                       		add.w	d1,d0
00010FD8                            
00010FD8                            loc_10A38:
00010FD8 3228 003A                  		move.w	$3A(a0),d1
00010FDC 9240                       		sub.w	d0,d1
00010FDE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FE2 4E75                       		rts	
00010FE4                            ; ===========================================================================
00010FE4                            
00010FE4                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FE4 323C 0060                  		move.w	#$60,d1
00010FE8 7000                       		moveq	#0,d0
00010FEA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FEE 0828 0000 0022             		btst	#0,$22(a0)
00010FF4 6700                       		beq.s	loc_10A5C
00010FF6 4440                       		neg.w	d0
00010FF8 0640 0080                  		addi.w	#$80,d0
00010FFC                            
00010FFC                            loc_10A5C:
00010FFC 3228 0038                  		move.w	$38(a0),d1
00011000 9240                       		sub.w	d0,d1
00011002 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011006 4E75                       		rts	
00011008                            ; ===========================================================================
00011008                            
00011008                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011008 3028 003E                  		move.w	$3E(a0),d0
0001100C D168 0026                  		add.w	d0,$26(a0)
00011010 1028 0026                  		move.b	$26(a0),d0
00011014 4EB9 0000 2C22             		jsr	(CalcSine).l
0001101A 3428 0038                  		move.w	$38(a0),d2
0001101E 3628 003A                  		move.w	$3A(a0),d3
00011022 7800                       		moveq	#0,d4
00011024 1828 003C                  		move.b	$3C(a0),d4
00011028 2A04                       		move.l	d4,d5
0001102A C9C0                       		muls.w	d0,d4
0001102C E084                       		asr.l	#8,d4
0001102E CBC1                       		muls.w	d1,d5
00011030 E085                       		asr.l	#8,d5
00011032 D842                       		add.w	d2,d4
00011034 DA43                       		add.w	d3,d5
00011036 3144 000C                  		move.w	d4,$C(a0)
0001103A 3145 0008                  		move.w	d5,8(a0)
0001103E 4E75                       		rts	
00011040                            ; ===========================================================================
00011040                            ; ---------------------------------------------------------------------------
00011040                            ; Sprite mappings - SBZ	spiked ball on a chain
00011040                            ; ---------------------------------------------------------------------------
00011040                            Map_obj15b:
00011040                            	include "_maps\obj15sbz.asm"
00011040                            ; ---------------------------------------------------------------------------
00011040                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011040                            ; ---------------------------------------------------------------------------
00011040 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011044 0000                       		dc.w byte_10AC6-Map_obj15b
00011046 05                         byte_10AA6:	dc.b 5
00011047 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001104C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011051 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011056 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001105B 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011060 01                         byte_10AC0:	dc.b 1
00011061 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011066 02                         byte_10AC6:	dc.b 2
00011067 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001106C E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011072 00                         		even
00011072 00                         		even
00011072                            
00011072                            ; ===========================================================================
00011072                            ; ---------------------------------------------------------------------------
00011072                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011072                            ; ---------------------------------------------------------------------------
00011072                            
00011072                            Obj59:					; XREF: Obj_Index
00011072 7000                       		moveq	#0,d0
00011074 1028 0024                  		move.b	$24(a0),d0
00011078 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001107C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011080 3028 0032                  		move.w	$32(a0),d0
00011084 0240 FF80                  		andi.w	#$FF80,d0
00011088 3238 F700                  		move.w	($FFFFF700).w,d1
0001108C 0441 0080                  		subi.w	#$80,d1
00011090 0241 FF80                  		andi.w	#$FF80,d1
00011094 9041                       		sub.w	d1,d0
00011096 0C40 0280                  		cmpi.w	#$280,d0
0001109A 6200 CB54                  		bhi.w	DeleteObject
0001109E 6000 CB14                  		bra.w	DisplaySprite
000110A2                            ; ===========================================================================
000110A2 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000110A4 0000                       		dc.w Obj59_Platform-Obj59_Index
000110A6 0000                       		dc.w Obj59_Action-Obj59_Index
000110A8 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000110AA                            
000110AA 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110AC                            
000110AC 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110AE 2001                       		dc.b $20, 1
000110B0 3401                       		dc.b $34, 1
000110B2 1003                       		dc.b $10, 3
000110B4 2003                       		dc.b $20, 3
000110B6 3403                       		dc.b $34, 3
000110B8 1401                       		dc.b $14, 1
000110BA 2401                       		dc.b $24, 1
000110BC 2C01                       		dc.b $2C, 1
000110BE 1403                       		dc.b $14, 3
000110C0 2403                       		dc.b $24, 3
000110C2 2C03                       		dc.b $2C, 3
000110C4 2005                       		dc.b $20, 5
000110C6 2007                       		dc.b $20, 7
000110C8 3009                       		dc.b $30, 9
000110CA                            ; ===========================================================================
000110CA                            
000110CA                            Obj59_Main:				; XREF: Obj59_Index
000110CA 5428 0024                  		addq.b	#2,$24(a0)
000110CE 7000                       		moveq	#0,d0
000110D0 1028 0028                  		move.b	$28(a0),d0
000110D4 6A00                       		bpl.s	Obj59_Main2
000110D6 5828 0024                  		addq.b	#4,$24(a0)
000110DA 0240 007F                  		andi.w	#$7F,d0
000110DE C0FC 0006                  		mulu.w	#6,d0
000110E2 3140 003C                  		move.w	d0,$3C(a0)
000110E6 3140 003E                  		move.w	d0,$3E(a0)
000110EA 588F                       		addq.l	#4,sp
000110EC 4E75                       		rts	
000110EE                            ; ===========================================================================
000110EE                            
000110EE                            Obj59_Main2:
000110EE E648                       		lsr.w	#3,d0
000110F0 0240 001E                  		andi.w	#$1E,d0
000110F4 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110F8 115A 0019                  		move.b	(a2)+,$19(a0)
000110FC 115A 001A                  		move.b	(a2)+,$1A(a0)
00011100 7000                       		moveq	#0,d0
00011102 1028 0028                  		move.b	$28(a0),d0
00011106 D040                       		add.w	d0,d0
00011108 0240 001E                  		andi.w	#$1E,d0
0001110C 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011110 101A                       		move.b	(a2)+,d0
00011112 E548                       		lsl.w	#2,d0
00011114 3140 003C                  		move.w	d0,$3C(a0)
00011118 115A 0028                  		move.b	(a2)+,$28(a0)
0001111C 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011124 317C 4000 0002             		move.w	#$4000,2(a0)
0001112A 117C 0004 0001             		move.b	#4,1(a0)
00011130 117C 0004 0018             		move.b	#4,$18(a0)
00011136 3168 0008 0032             		move.w	8(a0),$32(a0)
0001113C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011142                            
00011142                            Obj59_Platform:				; XREF: Obj59_Index
00011142 7200                       		moveq	#0,d1
00011144 1228 0019                  		move.b	$19(a0),d1
00011148 4EB9 0000 789E             		jsr	(PlatformObject).l
0001114E 6000 0000                  		bra.w	Obj59_Types
00011152                            ; ===========================================================================
00011152                            
00011152                            Obj59_Action:				; XREF: Obj59_Index
00011152 7200                       		moveq	#0,d1
00011154 1228 0019                  		move.b	$19(a0),d1
00011158 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001115E 3F28 0008                  		move.w	8(a0),-(sp)
00011162 6100 0000                  		bsr.w	Obj59_Types
00011166 341F                       		move.w	(sp)+,d2
00011168 4A10                       		tst.b	0(a0)
0001116A 6700                       		beq.s	locret_10BD4
0001116C 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011172                            ; ===========================================================================
00011172                            
00011172                            locret_10BD4:
00011172 4E75                       		rts	
00011174                            ; ===========================================================================
00011174                            
00011174                            Obj59_Types:
00011174 7000                       		moveq	#0,d0
00011176 1028 0028                  		move.b	$28(a0),d0
0001117A 0240 000F                  		andi.w	#$F,d0
0001117E D040                       		add.w	d0,d0
00011180 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011184 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011188                            ; ===========================================================================
00011188 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001118C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011190 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011194 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011198 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001119C                            ; ===========================================================================
0001119C                            
0001119C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001119C 4E75                       		rts	
0001119E                            ; ===========================================================================
0001119E                            
0001119E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001119E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000111A4 6600                       		bne.s	locret_10C0C
000111A6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000111AA                            
000111AA                            locret_10C0C:
000111AA 4E75                       		rts	
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111AC 6100 0000                  		bsr.w	Obj59_Move
000111B0 3028 0034                  		move.w	$34(a0),d0
000111B4 4440                       		neg.w	d0
000111B6 D068 0030                  		add.w	$30(a0),d0
000111BA 3140 000C                  		move.w	d0,$C(a0)
000111BE 4E75                       		rts	
000111C0                            ; ===========================================================================
000111C0                            
000111C0                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000111C0 6100 0000                  		bsr.w	Obj59_Move
000111C4 3028 0034                  		move.w	$34(a0),d0
000111C8 D068 0030                  		add.w	$30(a0),d0
000111CC 3140 000C                  		move.w	d0,$C(a0)
000111D0 4E75                       		rts	
000111D2                            ; ===========================================================================
000111D2                            
000111D2                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000111D2 6100 0000                  		bsr.w	Obj59_Move
000111D6 3028 0034                  		move.w	$34(a0),d0
000111DA E240                       		asr.w	#1,d0
000111DC 4440                       		neg.w	d0
000111DE D068 0030                  		add.w	$30(a0),d0
000111E2 3140 000C                  		move.w	d0,$C(a0)
000111E6 3028 0034                  		move.w	$34(a0),d0
000111EA D068 0032                  		add.w	$32(a0),d0
000111EE 3140 0008                  		move.w	d0,8(a0)
000111F2 4E75                       		rts	
000111F4                            ; ===========================================================================
000111F4                            
000111F4                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111F4 6100 0000                  		bsr.w	Obj59_Move
000111F8 3028 0034                  		move.w	$34(a0),d0
000111FC E240                       		asr.w	#1,d0
000111FE D068 0030                  		add.w	$30(a0),d0
00011202 3140 000C                  		move.w	d0,$C(a0)
00011206 3028 0034                  		move.w	$34(a0),d0
0001120A 4440                       		neg.w	d0
0001120C D068 0032                  		add.w	$32(a0),d0
00011210 3140 0008                  		move.w	d0,8(a0)
00011214 4E75                       		rts	
00011216                            ; ===========================================================================
00011216                            
00011216                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011216 6100 0000                  		bsr.w	Obj59_Move
0001121A 3028 0034                  		move.w	$34(a0),d0
0001121E 4440                       		neg.w	d0
00011220 D068 0030                  		add.w	$30(a0),d0
00011224 3140 000C                  		move.w	d0,$C(a0)
00011228 4A28 0028                  		tst.b	$28(a0)
0001122C 6700 0000                  		beq.w	loc_10C94
00011230 4E75                       		rts	
00011232                            ; ===========================================================================
00011232                            
00011232                            loc_10C94:
00011232 0828 0003 0022             		btst	#3,$22(a0)
00011238 6700                       		beq.s	Obj59_Delete
0001123A 08E9 0001 0022             		bset	#1,$22(a1)
00011240 08A9 0003 0022             		bclr	#3,$22(a1)
00011246 137C 0002 0024             		move.b	#2,$24(a1)
0001124C                            
0001124C                            Obj59_Delete:
0001124C 6000 C9A2                  		bra.w	DeleteObject
00011250                            
00011250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011250                            
00011250                            
00011250                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011250 3028 0038                  		move.w	$38(a0),d0
00011254 4A28 003A                  		tst.b	$3A(a0)
00011258 6600                       		bne.s	loc_10CC8
0001125A 0C40 0800                  		cmpi.w	#$800,d0
0001125E 6400                       		bcc.s	loc_10CD0
00011260 0640 0010                  		addi.w	#$10,d0
00011264 6000                       		bra.s	loc_10CD0
00011266                            ; ===========================================================================
00011266                            
00011266                            loc_10CC8:
00011266 4A40                       		tst.w	d0
00011268 6700                       		beq.s	loc_10CD0
0001126A 0440 0010                  		subi.w	#$10,d0
0001126E                            
0001126E                            loc_10CD0:
0001126E 3140 0038                  		move.w	d0,$38(a0)
00011272 48C0                       		ext.l	d0
00011274 E180                       		asl.l	#8,d0
00011276 D0A8 0034                  		add.l	$34(a0),d0
0001127A 2140 0034                  		move.l	d0,$34(a0)
0001127E 4840                       		swap	d0
00011280 3428 003C                  		move.w	$3C(a0),d2
00011284 B042                       		cmp.w	d2,d0
00011286 6300                       		bls.s	loc_10CF0
00011288 117C 0001 003A             		move.b	#1,$3A(a0)
0001128E                            
0001128E                            loc_10CF0:
0001128E D442                       		add.w	d2,d2
00011290 B042                       		cmp.w	d2,d0
00011292 6600                       		bne.s	locret_10CFA
00011294 4228 0028                  		clr.b	$28(a0)
00011298                            
00011298                            locret_10CFA:
00011298 4E75                       		rts	
0001129A                            ; End of function Obj59_Move
0001129A                            
0001129A                            ; ===========================================================================
0001129A                            
0001129A                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001129A 5368 003C                  		subq.w	#1,$3C(a0)
0001129E 6600                       		bne.s	Obj59_ChkDel
000112A0 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000112A6 6100 CD92                  		bsr.w	SingleObjLoad
000112AA 6600                       		bne.s	Obj59_ChkDel
000112AC 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000112B0 3368 0008 0008             		move.w	8(a0),8(a1)
000112B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112BC 137C 000E 0028             		move.b	#$E,$28(a1)
000112C2                            
000112C2                            Obj59_ChkDel:
000112C2 588F                       		addq.l	#4,sp
000112C4 3028 0008                  		move.w	8(a0),d0
000112C8 0240 FF80                  		andi.w	#$FF80,d0
000112CC 3238 F700                  		move.w	($FFFFF700).w,d1
000112D0 0441 0080                  		subi.w	#$80,d1
000112D4 0241 FF80                  		andi.w	#$FF80,d1
000112D8 9041                       		sub.w	d1,d0
000112DA 0C40 0280                  		cmpi.w	#$280,d0
000112DE 6200 C910                  		bhi.w	DeleteObject
000112E2 4E75                       		rts	
000112E4                            ; ===========================================================================
000112E4                            ; ---------------------------------------------------------------------------
000112E4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112E4                            ; ---------------------------------------------------------------------------
000112E4                            Map_obj59:
000112E4                            	include "_maps\obj59.asm"
000112E4                            ; ---------------------------------------------------------------------------
000112E4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112E4                            ; ---------------------------------------------------------------------------
000112E4 0000                       		dc.w byte_10D4A-Map_obj59
000112E6 03                         byte_10D4A:	dc.b 3
000112E7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112EC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112F1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112F6                            		even
000112F6                            		even
000112F6                            
000112F6                            ; ===========================================================================
000112F6                            ; ---------------------------------------------------------------------------
000112F6                            ; Object 5A - platforms	moving in circles (SLZ)
000112F6                            ; ---------------------------------------------------------------------------
000112F6                            
000112F6                            Obj5A:					; XREF: Obj_Index
000112F6 7000                       		moveq	#0,d0
000112F8 1028 0024                  		move.b	$24(a0),d0
000112FC 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011300 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011304 3028 0032                  		move.w	$32(a0),d0
00011308 0240 FF80                  		andi.w	#$FF80,d0
0001130C 3238 F700                  		move.w	($FFFFF700).w,d1
00011310 0441 0080                  		subi.w	#$80,d1
00011314 0241 FF80                  		andi.w	#$FF80,d1
00011318 9041                       		sub.w	d1,d0
0001131A 0C40 0280                  		cmpi.w	#$280,d0
0001131E 6200 C8D0                  		bhi.w	DeleteObject
00011322 6000 C890                  		bra.w	DisplaySprite
00011326                            ; ===========================================================================
00011326 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011328 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001132A 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001132C                            ; ===========================================================================
0001132C                            
0001132C                            Obj5A_Main:				; XREF: Obj5A_Index
0001132C 5428 0024                  		addq.b	#2,$24(a0)
00011330 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011338 317C 4000 0002             		move.w	#$4000,2(a0)
0001133E 117C 0004 0001             		move.b	#4,1(a0)
00011344 117C 0004 0018             		move.b	#4,$18(a0)
0001134A 117C 0018 0019             		move.b	#$18,$19(a0)
00011350 3168 0008 0032             		move.w	8(a0),$32(a0)
00011356 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001135C                            
0001135C                            Obj5A_Platform:				; XREF: Obj5A_Index
0001135C 7200                       		moveq	#0,d1
0001135E 1228 0019                  		move.b	$19(a0),d1
00011362 4EB9 0000 789E             		jsr	(PlatformObject).l
00011368 6000 0000                  		bra.w	Obj5A_Types
0001136C                            ; ===========================================================================
0001136C                            
0001136C                            Obj5A_Action:				; XREF: Obj5A_Index
0001136C 7200                       		moveq	#0,d1
0001136E 1228 0019                  		move.b	$19(a0),d1
00011372 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011378 3F28 0008                  		move.w	8(a0),-(sp)
0001137C 6100 0000                  		bsr.w	Obj5A_Types
00011380 341F                       		move.w	(sp)+,d2
00011382 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011388                            ; ===========================================================================
00011388                            
00011388                            Obj5A_Types:
00011388 7000                       		moveq	#0,d0
0001138A 1028 0028                  		move.b	$28(a0),d0
0001138E 0240 000C                  		andi.w	#$C,d0
00011392 E248                       		lsr.w	#1,d0
00011394 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011398 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001139C                            ; ===========================================================================
0001139C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001139E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000113A0                            ; ===========================================================================
000113A0                            
000113A0                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000113A0 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113A4 0401 0050                  		subi.b	#$50,d1
000113A8 4881                       		ext.w	d1
000113AA 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113AE 0402 0050                  		subi.b	#$50,d2
000113B2 4882                       		ext.w	d2
000113B4 0828 0000 0028             		btst	#0,$28(a0)
000113BA 6700                       		beq.s	loc_10E24
000113BC 4441                       		neg.w	d1
000113BE 4442                       		neg.w	d2
000113C0                            
000113C0                            loc_10E24:
000113C0 0828 0001 0028             		btst	#1,$28(a0)
000113C6 6700                       		beq.s	loc_10E30
000113C8 4441                       		neg.w	d1
000113CA C342                       		exg	d1,d2
000113CC                            
000113CC                            loc_10E30:
000113CC D268 0032                  		add.w	$32(a0),d1
000113D0 3141 0008                  		move.w	d1,8(a0)
000113D4 D468 0030                  		add.w	$30(a0),d2
000113D8 3142 000C                  		move.w	d2,$C(a0)
000113DC 4E75                       		rts	
000113DE                            ; ===========================================================================
000113DE                            
000113DE                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000113DE 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113E2 0401 0050                  		subi.b	#$50,d1
000113E6 4881                       		ext.w	d1
000113E8 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113EC 0402 0050                  		subi.b	#$50,d2
000113F0 4882                       		ext.w	d2
000113F2 0828 0000 0028             		btst	#0,$28(a0)
000113F8 6700                       		beq.s	loc_10E62
000113FA 4441                       		neg.w	d1
000113FC 4442                       		neg.w	d2
000113FE                            
000113FE                            loc_10E62:
000113FE 0828 0001 0028             		btst	#1,$28(a0)
00011404 6700                       		beq.s	loc_10E6E
00011406 4441                       		neg.w	d1
00011408 C342                       		exg	d1,d2
0001140A                            
0001140A                            loc_10E6E:
0001140A 4441                       		neg.w	d1
0001140C D268 0032                  		add.w	$32(a0),d1
00011410 3141 0008                  		move.w	d1,8(a0)
00011414 D468 0030                  		add.w	$30(a0),d2
00011418 3142 000C                  		move.w	d2,$C(a0)
0001141C 4E75                       		rts	
0001141E                            ; ===========================================================================
0001141E                            ; ---------------------------------------------------------------------------
0001141E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001141E                            ; ---------------------------------------------------------------------------
0001141E                            Map_obj5A:
0001141E                            	include "_maps\obj5A.asm"
0001141E                            ; ---------------------------------------------------------------------------
0001141E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001141E                            ; ---------------------------------------------------------------------------
0001141E 0000                       		dc.w byte_10E84-Map_obj5A
00011420 02                         byte_10E84:	dc.b 2
00011421 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011426 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001142C 00                         		even
0001142C 00                         		even
0001142C                            
0001142C                            ; ===========================================================================
0001142C                            ; ---------------------------------------------------------------------------
0001142C                            ; Object 5B - blocks that form a staircase (SLZ)
0001142C                            ; ---------------------------------------------------------------------------
0001142C                            
0001142C                            Obj5B:					; XREF: Obj_Index
0001142C 7000                       		moveq	#0,d0
0001142E 1028 0024                  		move.b	$24(a0),d0
00011432 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011436 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001143A 3028 0030                  		move.w	$30(a0),d0
0001143E 0240 FF80                  		andi.w	#$FF80,d0
00011442 3238 F700                  		move.w	($FFFFF700).w,d1
00011446 0441 0080                  		subi.w	#$80,d1
0001144A 0241 FF80                  		andi.w	#$FF80,d1
0001144E 9041                       		sub.w	d1,d0
00011450 0C40 0280                  		cmpi.w	#$280,d0
00011454 6200 C79A                  		bhi.w	DeleteObject
00011458 6000 C75A                  		bra.w	DisplaySprite
0001145C                            ; ===========================================================================
0001145C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001145E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011460 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011462                            ; ===========================================================================
00011462                            
00011462                            Obj5B_Main:				; XREF: Obj5B_Index
00011462 5428 0024                  		addq.b	#2,$24(a0)
00011466 7638                       		moveq	#$38,d3
00011468 7801                       		moveq	#1,d4
0001146A 0828 0000 0022             		btst	#0,$22(a0)
00011470 6700                       		beq.s	loc_10EDA
00011472 763B                       		moveq	#$3B,d3
00011474 78FF                       		moveq	#-1,d4
00011476                            
00011476                            loc_10EDA:
00011476 3428 0008                  		move.w	8(a0),d2
0001147A 2248                       		movea.l	a0,a1
0001147C 7203                       		moveq	#3,d1
0001147E 6000                       		bra.s	Obj5B_MakeBlocks
00011480                            ; ===========================================================================
00011480                            
00011480                            Obj5B_Loop:
00011480 6100 CBCE                  		bsr.w	SingleObjLoad2
00011484 6600 0000                  		bne.w	Obj5B_Move
00011488 137C 0004 0024             		move.b	#4,$24(a1)
0001148E                            
0001148E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001148E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011492 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001149A 337C 4000 0002             		move.w	#$4000,2(a1)
000114A0 137C 0004 0001             		move.b	#4,1(a1)
000114A6 137C 0003 0018             		move.b	#3,$18(a1)
000114AC 137C 0010 0019             		move.b	#$10,$19(a1)
000114B2 1368 0028 0028             		move.b	$28(a0),$28(a1)
000114B8 3342 0008                  		move.w	d2,8(a1)
000114BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114C2 3368 0008 0030             		move.w	8(a0),$30(a1)
000114C8 3369 000C 0032             		move.w	$C(a1),$32(a1)
000114CE 0642 0020                  		addi.w	#$20,d2
000114D2 1343 0037                  		move.b	d3,$37(a1)
000114D6 2348 003C                  		move.l	a0,$3C(a1)
000114DA D604                       		add.b	d4,d3
000114DC 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000114E0                            
000114E0                            Obj5B_Move:				; XREF: Obj5B_Index
000114E0 7000                       		moveq	#0,d0
000114E2 1028 0028                  		move.b	$28(a0),d0
000114E6 0240 0007                  		andi.w	#7,d0
000114EA D040                       		add.w	d0,d0
000114EC 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114F0 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114F4                            
000114F4                            Obj5B_Solid:				; XREF: Obj5B_Index
000114F4 2468 003C                  		movea.l	$3C(a0),a2
000114F8 7000                       		moveq	#0,d0
000114FA 1028 0037                  		move.b	$37(a0),d0
000114FE 1032 0000                  		move.b	(a2,d0.w),d0
00011502 D068 0032                  		add.w	$32(a0),d0
00011506 3140 000C                  		move.w	d0,$C(a0)
0001150A 7200                       		moveq	#0,d1
0001150C 1228 0019                  		move.b	$19(a0),d1
00011510 0641 000B                  		addi.w	#$B,d1
00011514 343C 0010                  		move.w	#$10,d2
00011518 363C 0011                  		move.w	#$11,d3
0001151C 3828 0008                  		move.w	8(a0),d4
00011520 6100 EA62                  		bsr.w	SolidObject
00011524 4A04                       		tst.b	d4
00011526 6A00                       		bpl.s	loc_10F92
00011528 1544 0036                  		move.b	d4,$36(a2)
0001152C                            
0001152C                            loc_10F92:
0001152C 0828 0003 0022             		btst	#3,$22(a0)
00011532 6700                       		beq.s	locret_10FA0
00011534 157C 0001 0036             		move.b	#1,$36(a2)
0001153A                            
0001153A                            locret_10FA0:
0001153A 4E75                       		rts	
0001153C                            ; ===========================================================================
0001153C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001153E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011540 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011542 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011544                            ; ===========================================================================
00011544                            
00011544                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011544 4A68 0034                  		tst.w	$34(a0)
00011548 6600                       		bne.s	loc_10FC0
0001154A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011550 6600                       		bne.s	locret_10FBE
00011552 317C 001E 0034             		move.w	#$1E,$34(a0)
00011558                            
00011558                            locret_10FBE:
00011558 4E75                       		rts	
0001155A                            ; ===========================================================================
0001155A                            
0001155A                            loc_10FC0:
0001155A 5368 0034                  		subq.w	#1,$34(a0)
0001155E 66F8                       		bne.s	locret_10FBE
00011560 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011564 4E75                       		rts	
00011566                            ; ===========================================================================
00011566                            
00011566                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011566 4A68 0034                  		tst.w	$34(a0)
0001156A 6600                       		bne.s	loc_10FE0
0001156C 4A28 0036                  		tst.b	$36(a0)
00011570 6A00                       		bpl.s	locret_10FDE
00011572 317C 003C 0034             		move.w	#$3C,$34(a0)
00011578                            
00011578                            locret_10FDE:
00011578 4E75                       		rts	
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            loc_10FE0:
0001157A 5368 0034                  		subq.w	#1,$34(a0)
0001157E 6600                       		bne.s	loc_10FEC
00011580 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011584 4E75                       		rts	
00011586                            ; ===========================================================================
00011586                            
00011586                            loc_10FEC:
00011586 43E8 0038                  		lea	$38(a0),a1
0001158A 3028 0034                  		move.w	$34(a0),d0
0001158E E408                       		lsr.b	#2,d0
00011590 0200 0001                  		andi.b	#1,d0
00011594 12C0                       		move.b	d0,(a1)+
00011596 0A00 0001                  		eori.b	#1,d0
0001159A 12C0                       		move.b	d0,(a1)+
0001159C 0A00 0001                  		eori.b	#1,d0
000115A0 12C0                       		move.b	d0,(a1)+
000115A2 0A00 0001                  		eori.b	#1,d0
000115A6 12C0                       		move.b	d0,(a1)+
000115A8 4E75                       		rts	
000115AA                            ; ===========================================================================
000115AA                            
000115AA                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000115AA 43E8 0038                  		lea	$38(a0),a1
000115AE 0C11 0080                  		cmpi.b	#$80,(a1)
000115B2 6700                       		beq.s	locret_11038
000115B4 5211                       		addq.b	#1,(a1)
000115B6 7200                       		moveq	#0,d1
000115B8 1219                       		move.b	(a1)+,d1
000115BA 4841                       		swap	d1
000115BC E289                       		lsr.l	#1,d1
000115BE 2401                       		move.l	d1,d2
000115C0 E289                       		lsr.l	#1,d1
000115C2 2601                       		move.l	d1,d3
000115C4 D682                       		add.l	d2,d3
000115C6 4841                       		swap	d1
000115C8 4842                       		swap	d2
000115CA 4843                       		swap	d3
000115CC 12C3                       		move.b	d3,(a1)+
000115CE 12C2                       		move.b	d2,(a1)+
000115D0 12C1                       		move.b	d1,(a1)+
000115D2                            
000115D2                            locret_11038:
000115D2 4E75                       		rts	
000115D4 4E75                       		rts	
000115D6                            ; ===========================================================================
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            Map_obj5B:
000115D6                            	include "_maps\obj5B.asm"
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115D6                            ; ---------------------------------------------------------------------------
000115D6 0000                       		dc.w byte_1103E-Map_obj5B
000115D8 01                         byte_1103E:	dc.b 1
000115D9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000115DE                            		even
000115DE                            		even
000115DE                            
000115DE                            ; ===========================================================================
000115DE                            ; ---------------------------------------------------------------------------
000115DE                            ; Object 5C - metal girders in foreground (SLZ)
000115DE                            ; ---------------------------------------------------------------------------
000115DE                            
000115DE                            Obj5C:					; XREF: Obj_Index
000115DE 7000                       		moveq	#0,d0
000115E0 1028 0024                  		move.b	$24(a0),d0
000115E4 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115E8 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115EC                            ; ===========================================================================
000115EC 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115EE 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115F0                            ; ===========================================================================
000115F0                            
000115F0                            Obj5C_Main:				; XREF: Obj5C_Index
000115F0 5428 0024                  		addq.b	#2,$24(a0)
000115F4 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115FC 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011602 117C 0010 0019             		move.b	#$10,$19(a0)
00011608                            
00011608                            Obj5C_Display:				; XREF: Obj5C_Index
00011608 2238 F700                  		move.l	($FFFFF700).w,d1
0001160C D281                       		add.l	d1,d1
0001160E 4841                       		swap	d1
00011610 4441                       		neg.w	d1
00011612 3141 0008                  		move.w	d1,8(a0)
00011616 2238 F704                  		move.l	($FFFFF704).w,d1
0001161A D281                       		add.l	d1,d1
0001161C 4841                       		swap	d1
0001161E 0241 003F                  		andi.w	#$3F,d1
00011622 4441                       		neg.w	d1
00011624 0641 0100                  		addi.w	#$100,d1
00011628 3141 000A                  		move.w	d1,$A(a0)
0001162C 6000 C586                  		bra.w	DisplaySprite
00011630                            ; ===========================================================================
00011630                            ; ---------------------------------------------------------------------------
00011630                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011630                            ; ---------------------------------------------------------------------------
00011630                            Map_obj5C:
00011630                            	include "_maps\obj5C.asm"
00011630                            ; ---------------------------------------------------------------------------
00011630                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011630                            ; ---------------------------------------------------------------------------
00011630 0000                       		dc.w byte_11098-Map_obj5C
00011632 09                         byte_11098:	dc.b 9
00011633 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011638 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001163D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011642 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011647 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001164C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011651 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011656 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001165B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011660                            		even
00011660                            		even
00011660                            
00011660                            ; ===========================================================================
00011660                            ; ---------------------------------------------------------------------------
00011660                            ; Object 1B - water surface (LZ)
00011660                            ; ---------------------------------------------------------------------------
00011660                            
00011660                            Obj1B:					; XREF: Obj_Index
00011660 7000                       		moveq	#0,d0
00011662 1028 0024                  		move.b	$24(a0),d0
00011666 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001166A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001166E                            ; ===========================================================================
0001166E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011670 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011672                            ; ===========================================================================
00011672                            
00011672                            Obj1B_Main:				; XREF: Obj1B_Index
00011672 5428 0024                  		addq.b	#2,$24(a0)
00011676 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001167E 317C C300 0002             		move.w	#$C300,2(a0)
00011684 117C 0004 0001             		move.b	#4,1(a0)
0001168A 117C 0080 0019             		move.b	#$80,$19(a0)
00011690 3168 0008 0030             		move.w	8(a0),$30(a0)
00011696                            
00011696                            Obj1B_Action:				; XREF: Obj1B_Index
00011696 3238 F700                  		move.w	($FFFFF700).w,d1
0001169A 0241 FFE0                  		andi.w	#$FFE0,d1
0001169E D268 0030                  		add.w	$30(a0),d1
000116A2 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000116A8 6700                       		beq.s	loc_11114
000116AA 0641 0020                  		addi.w	#$20,d1
000116AE                            
000116AE                            loc_11114:
000116AE 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000116B2 3238 F646                  		move.w	($FFFFF646).w,d1
000116B6 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000116BA 4A28 0032                  		tst.b	$32(a0)
000116BE 6600                       		bne.s	Obj1B_Animate
000116C0 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000116C6 6700                       		beq.s	loc_1114A	; if not, branch
000116C8 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000116CC 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000116D2 6000                       		bra.s	Obj1B_Display
000116D4                            ; ===========================================================================
000116D4                            
000116D4                            Obj1B_Animate:				; XREF: loc_11114
000116D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000116D8 6600                       		bne.s	Obj1B_Display	; if yes, branch
000116DA 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000116E0 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116E4                            
000116E4                            loc_1114A:				; XREF: loc_11114
000116E4 5328 001E                  		subq.b	#1,$1E(a0)
000116E8 6A00                       		bpl.s	Obj1B_Display
000116EA 117C 0007 001E             		move.b	#7,$1E(a0)
000116F0 5228 001A                  		addq.b	#1,$1A(a0)
000116F4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116FA 6500                       		bcs.s	Obj1B_Display
000116FC 117C 0000 001A             		move.b	#0,$1A(a0)
00011702                            
00011702                            Obj1B_Display:
00011702 6000 C4B0                  		bra.w	DisplaySprite
00011706                            ; ===========================================================================
00011706                            ; ---------------------------------------------------------------------------
00011706                            ; Sprite mappings - water surface (LZ)
00011706                            ; ---------------------------------------------------------------------------
00011706                            Map_obj1B:
00011706                            	include "_maps\obj1B.asm"
00011706                            ; ---------------------------------------------------------------------------
00011706                            ; Sprite mappings - water surface (LZ)
00011706                            ; ---------------------------------------------------------------------------
00011706 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001170A 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001170E 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011712 03                         byte_11178:	dc.b 3
00011713 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011718 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001171D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011722 03                         byte_11188:	dc.b 3
00011723 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011728 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001172D FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011732 03                         byte_11198:	dc.b 3
00011733 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011738 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001173D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011742 06                         byte_111A8:	dc.b 6
00011743 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011748 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001174D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011752 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011757 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001175C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011761 06                         byte_111C7:	dc.b 6
00011762 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011767 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001176C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011771 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011776 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001177B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011780 06                         byte_111E6:	dc.b 6
00011781 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011786 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001178B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011790 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011795 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001179A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000117A0 00                         		even
000117A0 00                         		even
000117A0                            
000117A0                            ; ===========================================================================
000117A0                            ; ---------------------------------------------------------------------------
000117A0                            ; Object 0B - pole that	breaks (LZ)
000117A0                            ; ---------------------------------------------------------------------------
000117A0                            
000117A0                            Obj0B:					; XREF: Obj_Index
000117A0 7000                       		moveq	#0,d0
000117A2 1028 0024                  		move.b	$24(a0),d0
000117A6 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000117AA 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117AE                            ; ===========================================================================
000117AE 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000117B0 0000                       		dc.w Obj0B_Action-Obj0B_Index
000117B2 0000                       		dc.w Obj0B_Display-Obj0B_Index
000117B4                            ; ===========================================================================
000117B4                            
000117B4                            Obj0B_Main:				; XREF: Obj0B_Index
000117B4 5428 0024                  		addq.b	#2,$24(a0)
000117B8 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000117C0 317C 43DE 0002             		move.w	#$43DE,2(a0)
000117C6 117C 0004 0001             		move.b	#4,1(a0)
000117CC 117C 0008 0019             		move.b	#8,$19(a0)
000117D2 117C 0004 0018             		move.b	#4,$18(a0)
000117D8 117C 00E1 0020             		move.b	#$E1,$20(a0)
000117DE 7000                       		moveq	#0,d0
000117E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000117E4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117E8 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117EC                            
000117EC                            Obj0B_Action:				; XREF: Obj0B_Index
000117EC 4A28 0032                  		tst.b	$32(a0)
000117F0 6700                       		beq.s	Obj0B_Grab
000117F2 4A68 0030                  		tst.w	$30(a0)
000117F6 6700                       		beq.s	Obj0B_MoveUp
000117F8 5368 0030                  		subq.w	#1,$30(a0)
000117FC 6600                       		bne.s	Obj0B_MoveUp
000117FE 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011804 6000                       		bra.s	Obj0B_Release
00011806                            ; ===========================================================================
00011806                            
00011806                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011806 43F8 D000                  		lea	($FFFFD000).w,a1
0001180A 3028 000C                  		move.w	$C(a0),d0
0001180E 0440 0018                  		subi.w	#$18,d0
00011812 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011818 6700                       		beq.s	Obj0B_MoveDown
0001181A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001181E B069 000C                  		cmp.w	$C(a1),d0
00011822 6500                       		bcs.s	Obj0B_MoveDown
00011824 3340 000C                  		move.w	d0,$C(a1)
00011828                            
00011828                            Obj0B_MoveDown:
00011828 0640 0024                  		addi.w	#$24,d0
0001182C 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011832 6700                       		beq.s	Obj0B_LetGo
00011834 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011838 B069 000C                  		cmp.w	$C(a1),d0
0001183C 6400                       		bcc.s	Obj0B_LetGo
0001183E 3340 000C                  		move.w	d0,$C(a1)
00011842                            
00011842                            Obj0B_LetGo:
00011842 1038 F603                  		move.b	($FFFFF603).w,d0
00011846 0240 0070                  		andi.w	#$70,d0
0001184A 6700                       		beq.s	Obj0B_Display
0001184C                            
0001184C                            Obj0B_Release:				; XREF: Obj0B_Action
0001184C 4228 0020                  		clr.b	$20(a0)
00011850 5428 0024                  		addq.b	#2,$24(a0)
00011854 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011858 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001185C 4228 0032                  		clr.b	$32(a0)
00011860 6000                       		bra.s	Obj0B_Display
00011862                            ; ===========================================================================
00011862                            
00011862                            Obj0B_Grab:				; XREF: Obj0B_Action
00011862 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011866 6700                       		beq.s	Obj0B_Display	; if not, branch
00011868 43F8 D000                  		lea	($FFFFD000).w,a1
0001186C 3028 0008                  		move.w	8(a0),d0
00011870 0640 0014                  		addi.w	#$14,d0
00011874 B069 0008                  		cmp.w	8(a1),d0
00011878 6400                       		bcc.s	Obj0B_Display
0001187A 4228 0021                  		clr.b	$21(a0)
0001187E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011884 6400                       		bcc.s	Obj0B_Display
00011886 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001188A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001188E 3028 0008                  		move.w	8(a0),d0
00011892 0640 0014                  		addi.w	#$14,d0
00011896 3340 0008                  		move.w	d0,8(a1)
0001189A 08A9 0000 0022             		bclr	#0,$22(a1)
000118A0 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000118A6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118AC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118B2 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000118B8                            
000118B8                            Obj0B_Display:				; XREF: Obj0B_Index
000118B8 6000 E3A2                  		bra.w	MarkObjGone
000118BC                            ; ===========================================================================
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            ; Sprite mappings - pole that breaks (LZ)
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            Map_obj0B:
000118BC                            	include "_maps\obj0B.asm"
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            ; Sprite mappings - pole that breaks (LZ)
000118BC                            ; ---------------------------------------------------------------------------
000118BC 0000                       		dc.w byte_11326-Map_obj0B
000118BE 0000                       		dc.w byte_11331-Map_obj0B
000118C0 02                         byte_11326:	dc.b 2			; normal pole
000118C1 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000118C6 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000118CB 04                         byte_11331:	dc.b 4			; broken pole
000118CC E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000118D1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000118D6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000118DB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000118E0                            		even
000118E0                            		even
000118E0                            
000118E0                            ; ===========================================================================
000118E0                            ; ---------------------------------------------------------------------------
000118E0                            ; Object 0C - flapping door (LZ)
000118E0                            ; ---------------------------------------------------------------------------
000118E0                            
000118E0                            Obj0C:					; XREF: Obj_Index
000118E0 7000                       		moveq	#0,d0
000118E2 1028 0024                  		move.b	$24(a0),d0
000118E6 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118EA 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118EE                            ; ===========================================================================
000118EE 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118F0 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118F2                            ; ===========================================================================
000118F2                            
000118F2                            Obj0C_Main:				; XREF: Obj0C_Index
000118F2 5428 0024                  		addq.b	#2,$24(a0)
000118F6 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118FE 317C 4328 0002             		move.w	#$4328,2(a0)
00011904 0028 0004 0001             		ori.b	#4,1(a0)
0001190A 117C 0028 0019             		move.b	#$28,$19(a0)
00011910 7000                       		moveq	#0,d0
00011912 1028 0028                  		move.b	$28(a0),d0	; get object type
00011916 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001191A 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001191E                            
0001191E                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001191E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011922 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011924 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001192A 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011930 4A28 0001                  		tst.b	1(a0)
00011934 6A00                       		bpl.s	Obj0C_Solid
00011936 303C 00BB                  		move.w	#$BB,d0
0001193A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00011940                            
00011940                            Obj0C_Solid:
00011940 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011946 6100 931E                  		bsr.w	AnimateSprite
0001194A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001194E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011952 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011954 3038 D008                  		move.w	($FFFFD008).w,d0
00011958 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001195C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001195E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011964 323C 0013                  		move.w	#$13,d1
00011968 343C 0020                  		move.w	#$20,d2
0001196C 3602                       		move.w	d2,d3
0001196E 5243                       		addq.w	#1,d3
00011970 3828 0008                  		move.w	8(a0),d4
00011974 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011978                            
00011978                            Obj0C_Display:
00011978 6000 E2E2                  		bra.w	MarkObjGone
0001197C                            ; ===========================================================================
0001197C                            Ani_obj0C:
0001197C                            	include "_anim\obj0C.asm"
0001197C                            ; ---------------------------------------------------------------------------
0001197C                            ; Animation script - flapping door (LZ)
0001197C                            ; ---------------------------------------------------------------------------
0001197C 0000                       		dc.w byte_113E6-Ani_obj0C
0001197E 0000                       		dc.w byte_113EC-Ani_obj0C
00011980 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011986 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001198C                            		even
0001198C                            		even
0001198C                            
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            ; Sprite mappings - flapping door (LZ)
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            Map_obj0C:
0001198C                            	include "_maps\obj0C.asm"
0001198C                            ; ---------------------------------------------------------------------------
0001198C                            ; Sprite mappings - flapping door (LZ)
0001198C                            ; ---------------------------------------------------------------------------
0001198C 0000                       		dc.w byte_113F8-Map_obj0C
0001198E 0000                       		dc.w byte_11403-Map_obj0C
00011990 0000                       		dc.w byte_1140E-Map_obj0C
00011992 02                         byte_113F8:	dc.b 2
00011993 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011998 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001199D 02                         byte_11403:	dc.b 2
0001199E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000119A3 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000119A8 02                         byte_1140E:	dc.b 2
000119A9 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119AE 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000119B4 00                         		even
000119B4 00                         		even
000119B4                            
000119B4                            ; ===========================================================================
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            ; Object 71 - invisible	solid blocks
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            
000119B4                            Obj71:					; XREF: Obj_Index
000119B4 7000                       		moveq	#0,d0
000119B6 1028 0024                  		move.b	$24(a0),d0
000119BA 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000119BE 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000119C2                            ; ===========================================================================
000119C2 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000119C4 0000                       		dc.w Obj71_Solid-Obj71_Index
000119C6                            ; ===========================================================================
000119C6                            
000119C6                            Obj71_Main:				; XREF: Obj71_Index
000119C6 5428 0024                  		addq.b	#2,$24(a0)
000119CA 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000119D2 317C 8680 0002             		move.w	#$8680,2(a0)
000119D8 0028 0004 0001             		ori.b	#4,1(a0)
000119DE 1028 0028                  		move.b	$28(a0),d0	; get object type
000119E2 1200                       		move.b	d0,d1
000119E4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119E8 0640 0010                  		addi.w	#$10,d0
000119EC E248                       		lsr.w	#1,d0
000119EE 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119F2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119F6 5241                       		addq.w	#1,d1
000119F8 E749                       		lsl.w	#3,d1
000119FA 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119FE                            
000119FE                            Obj71_Solid:				; XREF: Obj71_Index
000119FE 6100 C42E                  		bsr.w	ChkObjOnScreen
00011A02 6600                       		bne.s	Obj71_ChkDel
00011A04 7200                       		moveq	#0,d1
00011A06 1228 0019                  		move.b	$19(a0),d1
00011A0A 0641 000B                  		addi.w	#$B,d1
00011A0E 7400                       		moveq	#0,d2
00011A10 1428 0016                  		move.b	$16(a0),d2
00011A14 3602                       		move.w	d2,d3
00011A16 5243                       		addq.w	#1,d3
00011A18 3828 0008                  		move.w	8(a0),d4
00011A1C 6100 E5A8                  		bsr.w	SolidObject71
00011A20                            
00011A20                            Obj71_ChkDel:
00011A20 3028 0008                  		move.w	8(a0),d0
00011A24 0240 FF80                  		andi.w	#$FF80,d0
00011A28 3238 F700                  		move.w	($FFFFF700).w,d1
00011A2C 0441 0080                  		subi.w	#$80,d1
00011A30 0241 FF80                  		andi.w	#$FF80,d1
00011A34 9041                       		sub.w	d1,d0
00011A36 0C40 0280                  		cmpi.w	#$280,d0
00011A3A 6200                       		bhi.s	Obj71_Delete
00011A3C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A40 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A42 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A46                            ; ===========================================================================
00011A46                            
00011A46                            Obj71_NoDisplay:
00011A46 4E75                       		rts	
00011A48                            ; ===========================================================================
00011A48                            
00011A48                            Obj71_Delete:
00011A48 4EFA C1A6                  		jmp	DeleteObject
00011A4C                            ; ===========================================================================
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C                            ; Sprite mappings - invisible solid blocks
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C                            Map_obj71:
00011A4C                            	include "_maps\obj71.asm"
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C                            ; Sprite mappings - invisible solid blocks
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C 0000                       		dc.w byte_114BC-Map_obj71
00011A4E 0000                       		dc.w byte_114D1-Map_obj71
00011A50 0000                       		dc.w byte_114E6-Map_obj71
00011A52 04                         byte_114BC:	dc.b 4
00011A53 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A58 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A5D 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A62 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A67 04                         byte_114D1:	dc.b 4
00011A68 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A6D E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A72 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A77 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A7C 04                         byte_114E6:	dc.b 4
00011A7D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A82 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A87 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A8C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A92 00                         		even
00011A92 00                         		even
00011A92                            
00011A92                            ; ===========================================================================
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            ; Object 5D - fans (SLZ)
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            
00011A92                            Obj5D:					; XREF: Obj_Index
00011A92 7000                       		moveq	#0,d0
00011A94 1028 0024                  		move.b	$24(a0),d0
00011A98 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A9C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011AA0                            ; ===========================================================================
00011AA0 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011AA2 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011AA4                            ; ===========================================================================
00011AA4                            
00011AA4                            Obj5D_Main:				; XREF: Obj5D_Index
00011AA4 5428 0024                  		addq.b	#2,$24(a0)
00011AA8 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011AB0 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011AB6 0028 0004 0001             		ori.b	#4,1(a0)
00011ABC 117C 0010 0019             		move.b	#$10,$19(a0)
00011AC2 117C 0004 0018             		move.b	#4,$18(a0)
00011AC8                            
00011AC8                            Obj5D_Delay:				; XREF: Obj5D_Index
00011AC8 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011ACE 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011AD0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AD4 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011AD6 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011ADC 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011AE2 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AE4 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011AEA                            
00011AEA                            Obj5D_Blow:
00011AEA 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011AEE 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011AF2 43F8 D000                  		lea	($FFFFD000).w,a1
00011AF6 3029 0008                  		move.w	8(a1),d0
00011AFA 9068 0008                  		sub.w	8(a0),d0
00011AFE 0828 0000 0022             		btst	#0,$22(a0)
00011B04 6600                       		bne.s	Obj5D_ChkSonic
00011B06 4440                       		neg.w	d0
00011B08                            
00011B08                            Obj5D_ChkSonic:
00011B08 0640 0050                  		addi.w	#$50,d0
00011B0C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B10 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B12 3229 000C                  		move.w	$C(a1),d1
00011B16 0641 0060                  		addi.w	#$60,d1
00011B1A 9268 000C                  		sub.w	$C(a0),d1
00011B1E 6500                       		bcs.s	Obj5D_Animate
00011B20 0C41 0070                  		cmpi.w	#$70,d1
00011B24 6400                       		bcc.s	Obj5D_Animate
00011B26 0440 0050                  		subi.w	#$50,d0
00011B2A 6400                       		bcc.s	loc_1159A
00011B2C 4640                       		not.w	d0
00011B2E D040                       		add.w	d0,d0
00011B30                            
00011B30                            loc_1159A:
00011B30 0640 0060                  		addi.w	#$60,d0
00011B34 0828 0000 0022             		btst	#0,$22(a0)
00011B3A 6600                       		bne.s	loc_115A8
00011B3C 4440                       		neg.w	d0
00011B3E                            
00011B3E                            loc_115A8:
00011B3E 4400                       		neg.b	d0
00011B40 E840                       		asr.w	#4,d0
00011B42 0828 0000 0028             		btst	#0,$28(a0)
00011B48 6700                       		beq.s	Obj5D_MoveSonic
00011B4A 4440                       		neg.w	d0
00011B4C                            
00011B4C                            Obj5D_MoveSonic:
00011B4C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B50                            
00011B50                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B50 5328 001E                  		subq.b	#1,$1E(a0)
00011B54 6A00                       		bpl.s	Obj5D_ChkDel
00011B56 117C 0000 001E             		move.b	#0,$1E(a0)
00011B5C 5228 001B                  		addq.b	#1,$1B(a0)
00011B60 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B66 6500                       		bcs.s	loc_115D8
00011B68 117C 0000 001B             		move.b	#0,$1B(a0)
00011B6E                            
00011B6E                            loc_115D8:
00011B6E 7000                       		moveq	#0,d0
00011B70 0828 0000 0028             		btst	#0,$28(a0)
00011B76 6700                       		beq.s	loc_115E4
00011B78 7002                       		moveq	#2,d0
00011B7A                            
00011B7A                            loc_115E4:
00011B7A D028 001B                  		add.b	$1B(a0),d0
00011B7E 1140 001A                  		move.b	d0,$1A(a0)
00011B82                            
00011B82                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B82 6100 C030                  		bsr.w	DisplaySprite
00011B86 3028 0008                  		move.w	8(a0),d0
00011B8A 0240 FF80                  		andi.w	#$FF80,d0
00011B8E 3238 F700                  		move.w	($FFFFF700).w,d1
00011B92 0441 0080                  		subi.w	#$80,d1
00011B96 0241 FF80                  		andi.w	#$FF80,d1
00011B9A 9041                       		sub.w	d1,d0
00011B9C 0C40 0280                  		cmpi.w	#$280,d0
00011BA0 6200 C04E                  		bhi.w	DeleteObject
00011BA4 4E75                       		rts	
00011BA6                            ; ===========================================================================
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            ; Sprite mappings - fans (SLZ)
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            Map_obj5D:
00011BA6                            	include "_maps\obj5D.asm"
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            ; Sprite mappings - fans (SLZ)
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011BAA 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BAE 0000                       		dc.w byte_1161A-Map_obj5D
00011BB0 02                         byte_1161A:	dc.b 2
00011BB1 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011BB6 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011BBB 02                         byte_11625:	dc.b 2
00011BBC F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011BC1 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011BC6 02                         byte_11630:	dc.b 2
00011BC7 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011BCC 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011BD2 00                         		even
00011BD2 00                         		even
00011BD2                            
00011BD2                            ; ===========================================================================
00011BD2                            ; ---------------------------------------------------------------------------
00011BD2                            ; Object 5E - seesaws (SLZ)
00011BD2                            ; ---------------------------------------------------------------------------
00011BD2                            
00011BD2                            Obj5E:					; XREF: Obj_Index
00011BD2 7000                       		moveq	#0,d0
00011BD4 1028 0024                  		move.b	$24(a0),d0
00011BD8 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011BDC 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011BE0 3028 0030                  		move.w	$30(a0),d0
00011BE4 0240 FF80                  		andi.w	#$FF80,d0
00011BE8 3238 F700                  		move.w	($FFFFF700).w,d1
00011BEC 0441 0080                  		subi.w	#$80,d1
00011BF0 0241 FF80                  		andi.w	#$FF80,d1
00011BF4 9041                       		sub.w	d1,d0
00011BF6 6B00 BFF8                  		bmi.w	DeleteObject
00011BFA 0C40 0280                  		cmpi.w	#$280,d0
00011BFE 6200 BFF0                  		bhi.w	DeleteObject
00011C02 6000 BFB0                  		bra.w	DisplaySprite
00011C06                            ; ===========================================================================
00011C06 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011C08 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011C0A 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C0C 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C0E 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C10 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C12                            ; ===========================================================================
00011C12                            
00011C12                            Obj5E_Main:				; XREF: Obj5E_Index
00011C12 5428 0024                  		addq.b	#2,$24(a0)
00011C16 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C1E 317C 0374 0002             		move.w	#$374,2(a0)
00011C24 0028 0004 0001             		ori.b	#4,1(a0)
00011C2A 117C 0004 0018             		move.b	#4,$18(a0)
00011C30 117C 0030 0019             		move.b	#$30,$19(a0)
00011C36 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C3C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C40 6600                       		bne.s	loc_116D2	; if not, branch
00011C42 6100 C40C                  		bsr.w	SingleObjLoad2
00011C46 6600                       		bne.s	loc_116D2
00011C48 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C4C 5C29 0024                  		addq.b	#6,$24(a1)
00011C50 3368 0008 0008             		move.w	8(a0),8(a1)
00011C56 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C5C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C62 2348 003C                  		move.l	a0,$3C(a1)
00011C66                            
00011C66                            loc_116D2:
00011C66 0828 0000 0022             		btst	#0,$22(a0)
00011C6C 6700                       		beq.s	loc_116E0
00011C6E 117C 0002 001A             		move.b	#2,$1A(a0)
00011C74                            
00011C74                            loc_116E0:
00011C74 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C7A                            
00011C7A                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C7A 1228 003A                  		move.b	$3A(a0),d1
00011C7E 6100 0000                  		bsr.w	loc_11766
00011C82 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C88 0828 0000 001A             		btst	#0,$1A(a0)
00011C8E 6700                       		beq.s	loc_11702
00011C90 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C96                            
00011C96                            loc_11702:
00011C96 43F8 D000                  		lea	($FFFFD000).w,a1
00011C9A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011CA0 323C 0030                  		move.w	#$30,d1
00011CA4 4EB9 0000 7972             		jsr	(SlopeObject).l
00011CAA 4E75                       		rts	
00011CAC                            ; ===========================================================================
00011CAC                            
00011CAC                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CAC 6100 0000                  		bsr.w	loc_1174A
00011CB0 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CB6 0828 0000 001A             		btst	#0,$1A(a0)
00011CBC 6700                       		beq.s	loc_11730
00011CBE 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CC4                            
00011CC4                            loc_11730:
00011CC4 323C 0030                  		move.w	#$30,d1
00011CC8 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011CCE 323C 0030                  		move.w	#$30,d1
00011CD2 3428 0008                  		move.w	8(a0),d2
00011CD6 4EB9 0000 8970             		jsr	SlopeObject2
00011CDC 4E75                       		rts	
00011CDE                            ; ===========================================================================
00011CDE                            
00011CDE                            loc_1174A:				; XREF: Obj5E_Slope2
00011CDE 7202                       		moveq	#2,d1
00011CE0 43F8 D000                  		lea	($FFFFD000).w,a1
00011CE4 3028 0008                  		move.w	8(a0),d0
00011CE8 9069 0008                  		sub.w	8(a1),d0
00011CEC 6400                       		bcc.s	loc_1175E
00011CEE 4440                       		neg.w	d0
00011CF0 7200                       		moveq	#0,d1
00011CF2                            
00011CF2                            loc_1175E:
00011CF2 0C40 0008                  		cmpi.w	#8,d0
00011CF6 6400                       		bcc.s	loc_11766
00011CF8 7201                       		moveq	#1,d1
00011CFA                            
00011CFA                            loc_11766:
00011CFA 1028 001A                  		move.b	$1A(a0),d0
00011CFE B001                       		cmp.b	d1,d0
00011D00 6700                       		beq.s	locret_11790
00011D02 6400                       		bcc.s	loc_11772
00011D04 5400                       		addq.b	#2,d0
00011D06                            
00011D06                            loc_11772:
00011D06 5300                       		subq.b	#1,d0
00011D08 1140 001A                  		move.b	d0,$1A(a0)
00011D0C 1141 003A                  		move.b	d1,$3A(a0)
00011D10 08A8 0000 0001             		bclr	#0,1(a0)
00011D16 0828 0001 001A             		btst	#1,$1A(a0)
00011D1C 6700                       		beq.s	locret_11790
00011D1E 08E8 0000 0001             		bset	#0,1(a0)
00011D24                            
00011D24                            locret_11790:
00011D24 4E75                       		rts	
00011D26                            ; ===========================================================================
00011D26                            
00011D26                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D26 5428 0024                  		addq.b	#2,$24(a0)
00011D2A 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D32 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D38 0028 0004 0001             		ori.b	#4,1(a0)
00011D3E 117C 0004 0018             		move.b	#4,$18(a0)
00011D44 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D4A 117C 000C 0019             		move.b	#$C,$19(a0)
00011D50 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D56 0668 0028 0008             		addi.w	#$28,8(a0)
00011D5C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D62 117C 0001 001A             		move.b	#1,$1A(a0)
00011D68 0828 0000 0022             		btst	#0,$22(a0)
00011D6E 6700                       		beq.s	Obj5E_MoveSpike
00011D70 0468 0050 0008             		subi.w	#$50,8(a0)
00011D76 117C 0002 003A             		move.b	#2,$3A(a0)
00011D7C                            
00011D7C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D7C 2268 003C                  		movea.l	$3C(a0),a1
00011D80 7000                       		moveq	#0,d0
00011D82 1028 003A                  		move.b	$3A(a0),d0
00011D86 9029 003A                  		sub.b	$3A(a1),d0
00011D8A 6700                       		beq.s	loc_1183E
00011D8C 6400                       		bcc.s	loc_117FC
00011D8E 4400                       		neg.b	d0
00011D90                            
00011D90                            loc_117FC:
00011D90 323C F7E8                  		move.w	#-$818,d1
00011D94 343C FEEC                  		move.w	#-$114,d2
00011D98 0C00 0001                  		cmpi.b	#1,d0
00011D9C 6700                       		beq.s	loc_11822
00011D9E 323C F510                  		move.w	#-$AF0,d1
00011DA2 343C FF34                  		move.w	#-$CC,d2
00011DA6 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DAC 6D00                       		blt.s	loc_11822
00011DAE 323C F200                  		move.w	#-$E00,d1
00011DB2 343C FF60                  		move.w	#-$A0,d2
00011DB6                            
00011DB6                            loc_11822:
00011DB6 3141 0012                  		move.w	d1,$12(a0)
00011DBA 3142 0010                  		move.w	d2,$10(a0)
00011DBE 3028 0008                  		move.w	8(a0),d0
00011DC2 9068 0030                  		sub.w	$30(a0),d0
00011DC6 6400                       		bcc.s	loc_11838
00011DC8 4468 0010                  		neg.w	$10(a0)
00011DCC                            
00011DCC                            loc_11838:
00011DCC 5428 0024                  		addq.b	#2,$24(a0)
00011DD0 6000                       		bra.s	Obj5E_SpikeFall
00011DD2                            ; ===========================================================================
00011DD2                            
00011DD2                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011DD2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DD8 7000                       		moveq	#0,d0
00011DDA 1029 001A                  		move.b	$1A(a1),d0
00011DDE 343C 0028                  		move.w	#$28,d2
00011DE2 3228 0008                  		move.w	8(a0),d1
00011DE6 9268 0030                  		sub.w	$30(a0),d1
00011DEA 6400                       		bcc.s	loc_1185C
00011DEC 4442                       		neg.w	d2
00011DEE 5440                       		addq.w	#2,d0
00011DF0                            
00011DF0                            loc_1185C:
00011DF0 D040                       		add.w	d0,d0
00011DF2 3228 0034                  		move.w	$34(a0),d1
00011DF6 D272 0000                  		add.w	(a2,d0.w),d1
00011DFA 3141 000C                  		move.w	d1,$C(a0)
00011DFE D468 0030                  		add.w	$30(a0),d2
00011E02 3142 0008                  		move.w	d2,8(a0)
00011E06 4268 000E                  		clr.w	$E(a0)
00011E0A 4268 000A                  		clr.w	$A(a0)
00011E0E 4E75                       		rts	
00011E10                            ; ===========================================================================
00011E10                            
00011E10                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E10 4A68 0012                  		tst.w	$12(a0)
00011E14 6A00                       		bpl.s	loc_1189A
00011E16 6100 BD4A                  		bsr.w	ObjectFall
00011E1A 3028 0034                  		move.w	$34(a0),d0
00011E1E 0440 002F                  		subi.w	#$2F,d0
00011E22 B068 000C                  		cmp.w	$C(a0),d0
00011E26 6E00                       		bgt.s	locret_11898
00011E28 6100 BD38                  		bsr.w	ObjectFall
00011E2C                            
00011E2C                            locret_11898:
00011E2C 4E75                       		rts	
00011E2E                            ; ===========================================================================
00011E2E                            
00011E2E                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E2E 6100 BD32                  		bsr.w	ObjectFall
00011E32 2268 003C                  		movea.l	$3C(a0),a1
00011E36 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E3C 7000                       		moveq	#0,d0
00011E3E 1029 001A                  		move.b	$1A(a1),d0
00011E42 3228 0008                  		move.w	8(a0),d1
00011E46 9268 0030                  		sub.w	$30(a0),d1
00011E4A 6400                       		bcc.s	loc_118BA
00011E4C 5440                       		addq.w	#2,d0
00011E4E                            
00011E4E                            loc_118BA:
00011E4E D040                       		add.w	d0,d0
00011E50 3228 0034                  		move.w	$34(a0),d1
00011E54 D272 0000                  		add.w	(a2,d0.w),d1
00011E58 B268 000C                  		cmp.w	$C(a0),d1
00011E5C 6E00                       		bgt.s	locret_11938
00011E5E 2268 003C                  		movea.l	$3C(a0),a1
00011E62 7202                       		moveq	#2,d1
00011E64 4A68 0010                  		tst.w	$10(a0)
00011E68 6B00                       		bmi.s	Obj5E_Spring
00011E6A 7200                       		moveq	#0,d1
00011E6C                            
00011E6C                            Obj5E_Spring:
00011E6C 1341 003A                  		move.b	d1,$3A(a1)
00011E70 1141 003A                  		move.b	d1,$3A(a0)
00011E74 B229 001A                  		cmp.b	$1A(a1),d1
00011E78 6700                       		beq.s	loc_1192C
00011E7A 08A9 0003 0022             		bclr	#3,$22(a1)
00011E80 6700                       		beq.s	loc_1192C
00011E82 4229 0025                  		clr.b	$25(a1)
00011E86 137C 0002 0024             		move.b	#2,$24(a1)
00011E8C 45F8 D000                  		lea	($FFFFD000).w,a2
00011E90 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E96 446A 0012                  		neg.w	$12(a2)
00011E9A 08EA 0001 0022             		bset	#1,$22(a2)
00011EA0 08AA 0003 0022             		bclr	#3,$22(a2)
00011EA6 422A 003C                  		clr.b	$3C(a2)
00011EAA 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011EB0 157C 0002 0024             		move.b	#2,$24(a2)
00011EB6 303C 00CC                  		move.w	#$CC,d0
00011EBA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011EC0                            
00011EC0                            loc_1192C:
00011EC0 4268 0010                  		clr.w	$10(a0)
00011EC4 4268 0012                  		clr.w	$12(a0)
00011EC8 5528 0024                  		subq.b	#2,$24(a0)
00011ECC                            
00011ECC                            locret_11938:
00011ECC 4E75                       		rts	
00011ECE                            ; ===========================================================================
00011ECE FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011ED8                            
00011ED8                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011F08                            		even
00011F08                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F38                            		even
00011F38                            ; ---------------------------------------------------------------------------
00011F38                            ; Sprite mappings - seesaws (SLZ)
00011F38                            ; ---------------------------------------------------------------------------
00011F38                            Map_obj5E:
00011F38                            	include "_maps\obj5E.asm"
00011F38                            ; ---------------------------------------------------------------------------
00011F38                            ; Sprite mappings - seesaws (SLZ)
00011F38                            ; ---------------------------------------------------------------------------
00011F38 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F3C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F40 07                         byte_119AC:	dc.b 7
00011F41 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F46 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F4B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F50 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F55 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F5A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F5F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F64 04                         byte_119D0:	dc.b 4
00011F65 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F6A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F6F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F74 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F7A 00                         		even
00011F7A 00                         		even
00011F7A                            
00011F7A                            ; ---------------------------------------------------------------------------
00011F7A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F7A                            ; ---------------------------------------------------------------------------
00011F7A                            Map_obj5Ea:
00011F7A                            	include "_maps\obj5Eballs.asm"
00011F7A                            ; ---------------------------------------------------------------------------
00011F7A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F7A                            ; ---------------------------------------------------------------------------
00011F7A 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F7C 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F7E 01                         byte_119EA:	dc.b 1
00011F7F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F84 01                         byte_119F0:	dc.b 1
00011F85 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F8A                            		even
00011F8A                            		even
00011F8A                            
00011F8A                            ; ===========================================================================
00011F8A                            ; ---------------------------------------------------------------------------
00011F8A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F8A                            ; ---------------------------------------------------------------------------
00011F8A                            
00011F8A                            Obj5F:					; XREF: Obj_Index
00011F8A 7000                       		moveq	#0,d0
00011F8C 1028 0024                  		move.b	$24(a0),d0
00011F90 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F94 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F98                            ; ===========================================================================
00011F98 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F9A 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F9C 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F9E 0000                       		dc.w Obj5F_End-Obj5F_Index
00011FA0                            ; ===========================================================================
00011FA0                            
00011FA0                            Obj5F_Main:				; XREF: Obj5F_Index
00011FA0 5428 0024                  		addq.b	#2,$24(a0)
00011FA4 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FAC 317C 0400 0002             		move.w	#$400,2(a0)
00011FB2 0028 0004 0001             		ori.b	#4,1(a0)
00011FB8 117C 0003 0018             		move.b	#3,$18(a0)
00011FBE 117C 000C 0019             		move.b	#$C,$19(a0)
00011FC4 1028 0028                  		move.b	$28(a0),d0
00011FC8 6700                       		beq.s	loc_11A3C
00011FCA 1140 0024                  		move.b	d0,$24(a0)
00011FCE 4E75                       		rts	
00011FD0                            ; ===========================================================================
00011FD0                            
00011FD0                            loc_11A3C:
00011FD0 117C 009A 0020             		move.b	#$9A,$20(a0)
00011FD6 0868 0000 0022             		bchg	#0,$22(a0)
00011FDC                            
00011FDC                            Obj5F_Action:				; XREF: Obj5F_Index
00011FDC 7000                       		moveq	#0,d0
00011FDE 1028 0025                  		move.b	$25(a0),d0
00011FE2 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FE6 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FEA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FF0 6100 8C74                  		bsr.w	AnimateSprite
00011FF4 6000 DC66                  		bra.w	MarkObjGone
00011FF8                            ; ===========================================================================
00011FF8 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FFA 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FFC 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FFE                            ; ===========================================================================
00011FFE                            
00011FFE                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FFE 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012002 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012006 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012008 5428 0025                  		addq.b	#2,$25(a0)
0001200C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012012 317C 0010 0010             		move.w	#$10,$10(a0)
00012018 117C 0001 001C             		move.b	#1,$1C(a0)
0001201E 0868 0000 0022             		bchg	#0,$22(a0)
00012024 6700                       		beq.s	locret_11A96
00012026 4468 0010                  		neg.w	$10(a0)		; change direction
0001202A                            
0001202A                            locret_11A96:
0001202A 4E75                       		rts	
0001202C                            ; ===========================================================================
0001202C                            
0001202C                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001202C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012030 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012034 6B00                       		bmi.s	loc_11AA8
00012036 6100 BB56                  		bsr.w	SpeedToPos
0001203A 4E75                       		rts	
0001203C                            ; ===========================================================================
0001203C                            
0001203C                            loc_11AA8:
0001203C 5528 0025                  		subq.b	#2,$25(a0)
00012040 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012046 4268 0010                  		clr.w	$10(a0)		; stop walking
0001204A 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012050 4E75                       		rts	
00012052                            ; ===========================================================================
00012052                            
00012052                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012052 5368 0030                  		subq.w	#1,$30(a0)
00012056 6A00                       		bpl.s	locret_11AD0
00012058 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001205C 117C 0000 0024             		move.b	#0,$24(a0)
00012062                            
00012062                            locret_11AD0:
00012062 4E75                       		rts	
00012064                            ; ===========================================================================
00012064                            
00012064                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012064 3038 D008                  		move.w	($FFFFD008).w,d0
00012068 9068 0008                  		sub.w	8(a0),d0
0001206C 6400                       		bcc.s	loc_11ADE
0001206E 4440                       		neg.w	d0
00012070                            
00012070                            loc_11ADE:
00012070 0C40 0060                  		cmpi.w	#$60,d0
00012074 6400                       		bcc.s	locret_11B5E
00012076 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001207A 9068 000C                  		sub.w	$C(a0),d0
0001207E 6400                       		bcc.s	Obj5F_MakeFuse
00012080 4440                       		neg.w	d0
00012082                            
00012082                            Obj5F_MakeFuse:
00012082 0C40 0060                  		cmpi.w	#$60,d0
00012086 6400                       		bcc.s	locret_11B5E
00012088 4A78 FE08                  		tst.w	($FFFFFE08).w
0001208C 6600                       		bne.s	locret_11B5E
0001208E 117C 0004 0025             		move.b	#4,$25(a0)
00012094 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001209A 4268 0010                  		clr.w	$10(a0)
0001209E 117C 0002 001C             		move.b	#2,$1C(a0)
000120A4 6100 BFAA                  		bsr.w	SingleObjLoad2
000120A8 6600                       		bne.s	locret_11B5E
000120AA 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120AE 3368 0008 0008             		move.w	8(a0),8(a1)
000120B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120BA 3368 000C 0034             		move.w	$C(a0),$34(a1)
000120C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120C6 137C 0004 0028             		move.b	#4,$28(a1)
000120CC 137C 0003 001C             		move.b	#3,$1C(a1)
000120D2 337C 0010 0012             		move.w	#$10,$12(a1)
000120D8 0828 0001 0022             		btst	#1,$22(a0)
000120DE 6700                       		beq.s	loc_11B54
000120E0 4469 0012                  		neg.w	$12(a1)
000120E4                            
000120E4                            loc_11B54:
000120E4 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120EA 2348 003C                  		move.l	a0,$3C(a1)
000120EE                            
000120EE                            locret_11B5E:
000120EE 4E75                       		rts	
000120F0                            ; ===========================================================================
000120F0                            
000120F0                            Obj5F_Display:				; XREF: Obj5F_Index
000120F0 6100                       		bsr.s	loc_11B70
000120F2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120F8 6100 8B6C                  		bsr.w	AnimateSprite
000120FC 6000 DB5E                  		bra.w	MarkObjGone
00012100                            ; ===========================================================================
00012100                            
00012100                            loc_11B70:
00012100 5368 0030                  		subq.w	#1,$30(a0)
00012104 6B00                       		bmi.s	loc_11B7C
00012106 6100 BA86                  		bsr.w	SpeedToPos
0001210A 4E75                       		rts	
0001210C                            ; ===========================================================================
0001210C                            
0001210C                            loc_11B7C:
0001210C 4268 0030                  		clr.w	$30(a0)
00012110 4228 0024                  		clr.b	$24(a0)
00012114 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001211A 7203                       		moveq	#3,d1
0001211C 2248                       		movea.l	a0,a1
0001211E 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012124 6000                       		bra.s	Obj5F_MakeShrap
00012126                            ; ===========================================================================
00012126                            
00012126                            Obj5F_Loop:
00012126 6100 BF28                  		bsr.w	SingleObjLoad2
0001212A 6600                       		bne.s	loc_11BCE
0001212C                            
0001212C                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001212C 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012130 3368 0008 0008             		move.w	8(a0),8(a1)
00012136 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001213C 137C 0006 0028             		move.b	#6,$28(a1)
00012142 137C 0004 001C             		move.b	#4,$1C(a1)
00012148 335A 0010                  		move.w	(a2)+,$10(a1)
0001214C 335A 0012                  		move.w	(a2)+,$12(a1)
00012150 137C 0098 0020             		move.b	#$98,$20(a1)
00012156 08E9 0007 0001             		bset	#7,1(a1)
0001215C                            
0001215C                            loc_11BCE:
0001215C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012160                            
00012160 117C 0006 0024             		move.b	#6,$24(a0)
00012166                            
00012166                            Obj5F_End:				; XREF: Obj5F_Index
00012166 6100 BA26                  		bsr.w	SpeedToPos
0001216A 0668 0018 0012             		addi.w	#$18,$12(a0)
00012170 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012176 6100 8AEE                  		bsr.w	AnimateSprite
0001217A 4A28 0001                  		tst.b	1(a0)
0001217E 6A00 BA70                  		bpl.w	DeleteObject
00012182 6000 BA30                  		bra.w	DisplaySprite
00012186                            ; ===========================================================================
00012186 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012196                            
00012196                            Ani_obj5F:
00012196                            	include "_anim\obj5F.asm"
00012196                            ; ---------------------------------------------------------------------------
00012196                            ; Animation script - Bomb enemy
00012196                            ; ---------------------------------------------------------------------------
00012196 0000                       		dc.w byte_11C12-Ani_obj5F
00012198 0000                       		dc.w byte_11C16-Ani_obj5F
0001219A 0000                       		dc.w byte_11C1C-Ani_obj5F
0001219C 0000                       		dc.w byte_11C20-Ani_obj5F
0001219E 0000                       		dc.w byte_11C24-Ani_obj5F
000121A0 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000121A4 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000121AA 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121AE 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000121B2 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000121B6                            		even
000121B6                            		even
000121B6                            
000121B6                            ; ---------------------------------------------------------------------------
000121B6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121B6                            ; ---------------------------------------------------------------------------
000121B6                            Map_obj5F:
000121B6                            	include "_maps\obj5F.asm"
000121B6                            ; ---------------------------------------------------------------------------
000121B6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121B6                            ; ---------------------------------------------------------------------------
000121B6 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000121BA 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000121BE 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000121C2 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000121C6 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000121CA 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000121CE 03                         byte_11C40:	dc.b 3
000121CF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121D4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121D9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121DE 03                         byte_11C50:	dc.b 3
000121DF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121E4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121E9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121EE 03                         byte_11C60:	dc.b 3
000121EF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121F4 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121F9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121FE 03                         byte_11C70:	dc.b 3
000121FF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012204 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012209 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001220E 03                         byte_11C80:	dc.b 3
0001220F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012214 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012219 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001221E 03                         byte_11C90:	dc.b 3
0001221F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012224 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012229 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001222E 02                         byte_11CA0:	dc.b 2
0001222F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012234 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012239 02                         byte_11CAB:	dc.b 2
0001223A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001223F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012244 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012245 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001224A 01                         byte_11CBC:	dc.b 1			; fuse
0001224B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012250 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012251 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012256 01                         byte_11CC8:	dc.b 1			; fireball
00012257 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001225C                            		even
0001225C                            		even
0001225C                            
0001225C                            ; ===========================================================================
0001225C                            ; ---------------------------------------------------------------------------
0001225C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001225C                            ; ---------------------------------------------------------------------------
0001225C                            
0001225C                            Obj60:					; XREF: Obj_Index
0001225C 7000                       		moveq	#0,d0
0001225E 1028 0024                  		move.b	$24(a0),d0
00012262 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012266 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001226A                            ; ===========================================================================
0001226A 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001226C 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001226E 0000                       		dc.w Obj60_Display-Obj60_Index
00012270 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012272 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012274                            ; ===========================================================================
00012274                            
00012274                            Obj60_Main:				; XREF: Obj60_Index
00012274 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001227C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012282 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012288 6700                       		beq.s	loc_11D02
0001228A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012290                            
00012290                            loc_11D02:
00012290 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012296 6600                       		bne.s	loc_11D10
00012298 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001229E                            
0001229E                            loc_11D10:
0001229E 0028 0004 0001             		ori.b	#4,1(a0)
000122A4 117C 0004 0018             		move.b	#4,$18(a0)
000122AA 117C 000B 0020             		move.b	#$B,$20(a0)
000122B0 117C 000C 0019             		move.b	#$C,$19(a0)
000122B6 7400                       		moveq	#0,d2
000122B8 45E8 0037                  		lea	$37(a0),a2
000122BC 264A                       		movea.l	a2,a3
000122BE 524A                       		addq.w	#1,a2
000122C0 7203                       		moveq	#3,d1
000122C2                            
000122C2                            Obj60_MakeOrbs:
000122C2 6100 BD8C                  		bsr.w	SingleObjLoad2
000122C6 6600                       		bne.s	loc_11D90
000122C8 5213                       		addq.b	#1,(a3)
000122CA 3A09                       		move.w	a1,d5
000122CC 0445 D000                  		subi.w	#-$3000,d5
000122D0 EC4D                       		lsr.w	#6,d5
000122D2 0245 007F                  		andi.w	#$7F,d5
000122D6 14C5                       		move.b	d5,(a2)+
000122D8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000122DA 137C 0006 0024             		move.b	#6,$24(a1)
000122E0 2368 0004 0004             		move.l	4(a0),4(a1)
000122E6 3368 0002 0002             		move.w	2(a0),2(a1)
000122EC 0029 0004 0001             		ori.b	#4,1(a1)
000122F2 137C 0004 0018             		move.b	#4,$18(a1)
000122F8 137C 0008 0019             		move.b	#8,$19(a1)
000122FE 137C 0003 001A             		move.b	#3,$1A(a1)
00012304 137C 0098 0020             		move.b	#$98,$20(a1)
0001230A 1342 0026                  		move.b	d2,$26(a1)
0001230E 0602 0040                  		addi.b	#$40,d2
00012312 2348 003C                  		move.l	a0,$3C(a1)
00012316 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001231A                            
0001231A                            loc_11D90:
0001231A 7001                       		moveq	#1,d0
0001231C 0828 0000 0022             		btst	#0,$22(a0)
00012322 6700                       		beq.s	Obj60_Move
00012324 4440                       		neg.w	d0
00012326                            
00012326                            Obj60_Move:
00012326 1140 0036                  		move.b	d0,$36(a0)
0001232A 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012330 5428 0024                  		addq.b	#2,$24(a0)
00012334 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001233A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012340 6700                       		beq.s	locret_11DBC	; if not, branch
00012342 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012346                            
00012346                            locret_11DBC:
00012346 4E75                       		rts	
00012348                            ; ===========================================================================
00012348                            
00012348                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012348 3038 D008                  		move.w	($FFFFD008).w,d0
0001234C 9068 0008                  		sub.w	8(a0),d0
00012350 6400                       		bcc.s	loc_11DCA
00012352 4440                       		neg.w	d0
00012354                            
00012354                            loc_11DCA:
00012354 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012358 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001235A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001235E 9068 000C                  		sub.w	$C(a0),d0
00012362 6400                       		bcc.s	loc_11DDC
00012364 4440                       		neg.w	d0
00012366                            
00012366                            loc_11DDC:
00012366 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001236A 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001236C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012370 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012372 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012378                            
00012378                            Obj60_Animate:
00012378 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001237E 6100 88E6                  		bsr.w	AnimateSprite
00012382 6000 0000                  		bra.w	Obj60_ChkDel
00012386                            ; ===========================================================================
00012386                            
00012386                            Obj60_Display:				; XREF: Obj60_Index
00012386 6100 B806                  		bsr.w	SpeedToPos
0001238A                            
0001238A                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001238A 3028 0008                  		move.w	8(a0),d0
0001238E 0240 FF80                  		andi.w	#$FF80,d0
00012392 3238 F700                  		move.w	($FFFFF700).w,d1
00012396 0441 0080                  		subi.w	#$80,d1
0001239A 0241 FF80                  		andi.w	#$FF80,d1
0001239E 9041                       		sub.w	d1,d0
000123A0 0C40 0280                  		cmpi.w	#$280,d0
000123A4 6200 0000                  		bhi.w	Obj60_ChkGone
000123A8 6000 B80A                  		bra.w	DisplaySprite
000123AC                            ; ===========================================================================
000123AC                            
000123AC                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000123B0 7000                       		moveq	#0,d0
000123B2 1028 0023                  		move.b	$23(a0),d0
000123B6 6700                       		beq.s	loc_11E34
000123B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000123BE                            
000123BE                            loc_11E34:
000123BE 45E8 0037                  		lea	$37(a0),a2
000123C2 7400                       		moveq	#0,d2
000123C4 141A                       		move.b	(a2)+,d2
000123C6 5342                       		subq.w	#1,d2
000123C8 6500                       		bcs.s	Obj60_Delete
000123CA                            
000123CA                            loc_11E40:
000123CA 7000                       		moveq	#0,d0
000123CC 101A                       		move.b	(a2)+,d0
000123CE ED48                       		lsl.w	#6,d0
000123D0 0680 00FF D000             		addi.l	#$FFD000,d0
000123D6 2240                       		movea.l	d0,a1
000123D8 6100 B818                  		bsr.w	DeleteObject2
000123DC 51CA FFEC                  		dbf	d2,loc_11E40
000123E0                            
000123E0                            Obj60_Delete:
000123E0 6000 B80E                  		bra.w	DeleteObject
000123E4                            ; ===========================================================================
000123E4                            
000123E4                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123E4 2268 003C                  		movea.l	$3C(a0),a1
000123E8 0C11 0060                  		cmpi.b	#$60,0(a1)
000123EC 6600 B802                  		bne.w	DeleteObject
000123F0 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123F6 6600                       		bne.s	Obj60_Circle
000123F8 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123FE 6600                       		bne.s	Obj60_Circle
00012400 5428 0024                  		addq.b	#2,$24(a0)
00012404 5329 0037                  		subq.b	#1,$37(a1)
00012408 6600                       		bne.s	Obj60_FireOrb
0001240A 5429 0024                  		addq.b	#2,$24(a1)
0001240E                            
0001240E                            Obj60_FireOrb:
0001240E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012414 0829 0000 0022             		btst	#0,$22(a1)
0001241A 6700                       		beq.s	Obj60_Display2
0001241C 4468 0010                  		neg.w	$10(a0)
00012420                            
00012420                            Obj60_Display2:
00012420 6000 B792                  		bra.w	DisplaySprite
00012424                            ; ===========================================================================
00012424                            
00012424                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012424 1028 0026                  		move.b	$26(a0),d0
00012428 4EB9 0000 2C22             		jsr	(CalcSine).l
0001242E E841                       		asr.w	#4,d1
00012430 D269 0008                  		add.w	8(a1),d1
00012434 3141 0008                  		move.w	d1,8(a0)
00012438 E840                       		asr.w	#4,d0
0001243A D069 000C                  		add.w	$C(a1),d0
0001243E 3140 000C                  		move.w	d0,$C(a0)
00012442 1029 0036                  		move.b	$36(a1),d0
00012446 D128 0026                  		add.b	d0,$26(a0)
0001244A 6000 B768                  		bra.w	DisplaySprite
0001244E                            ; ===========================================================================
0001244E                            
0001244E                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001244E 6100 B73E                  		bsr.w	SpeedToPos
00012452 4A28 0001                  		tst.b	1(a0)
00012456 6A00 B798                  		bpl.w	DeleteObject
0001245A 6000 B758                  		bra.w	DisplaySprite
0001245E                            ; ===========================================================================
0001245E                            Ani_obj60:
0001245E                            	include "_anim\obj60.asm"
0001245E                            ; ---------------------------------------------------------------------------
0001245E                            ; Animation script - Orbinaut enemy
0001245E                            ; ---------------------------------------------------------------------------
0001245E 0000                       		dc.w byte_11EDA-Ani_obj60
00012460 0000                       		dc.w byte_11EDE-Ani_obj60
00012462 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012466 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001246C                            		even
0001246C                            		even
0001246C                            
0001246C                            ; ---------------------------------------------------------------------------
0001246C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001246C                            ; ---------------------------------------------------------------------------
0001246C                            Map_obj60:
0001246C                            	include "_maps\obj60.asm"
0001246C                            ; ---------------------------------------------------------------------------
0001246C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001246C                            ; ---------------------------------------------------------------------------
0001246C 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012470 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012474 01                         byte_11EEC:	dc.b 1
00012475 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001247A 01                         byte_11EF2:	dc.b 1
0001247B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012480 01                         byte_11EF8:	dc.b 1
00012481 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012486 01                         byte_11EFE:	dc.b 1
00012487 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001248C                            		even
0001248C                            		even
0001248C                            
0001248C                            ; ===========================================================================
0001248C                            ; ---------------------------------------------------------------------------
0001248C                            ; Object 16 - harpoon (LZ)
0001248C                            ; ---------------------------------------------------------------------------
0001248C                            
0001248C                            Obj16:					; XREF: Obj_Index
0001248C 7000                       		moveq	#0,d0
0001248E 1028 0024                  		move.b	$24(a0),d0
00012492 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012496 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001249A                            ; ===========================================================================
0001249A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001249C 0000                       		dc.w Obj16_Move-Obj16_Index
0001249E 0000                       		dc.w Obj16_Wait-Obj16_Index
000124A0                            ; ===========================================================================
000124A0                            
000124A0                            Obj16_Main:				; XREF: Obj16_Index
000124A0 5428 0024                  		addq.b	#2,$24(a0)
000124A4 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124AC 317C 03CC 0002             		move.w	#$3CC,2(a0)
000124B2 0028 0004 0001             		ori.b	#4,1(a0)
000124B8 117C 0004 0018             		move.b	#4,$18(a0)
000124BE 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000124C4 117C 0014 0019             		move.b	#$14,$19(a0)
000124CA 317C 003C 0030             		move.w	#60,$30(a0)
000124D0                            
000124D0                            Obj16_Move:				; XREF: Obj16_Index
000124D0 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000124D6 6100 878E                  		bsr.w	AnimateSprite
000124DA 7000                       		moveq	#0,d0
000124DC 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000124E0 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124E6 6000 D774                  		bra.w	MarkObjGone
000124EA                            ; ===========================================================================
000124EA 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124F0                            ; ===========================================================================
000124F0                            
000124F0                            Obj16_Wait:				; XREF: Obj16_Index
000124F0 5368 0030                  		subq.w	#1,$30(a0)
000124F4 6A00                       		bpl.s	Obj16_ChkDel
000124F6 317C 003C 0030             		move.w	#60,$30(a0)
000124FC 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012500 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012506                            
00012506                            Obj16_ChkDel:
00012506 6000 D754                  		bra.w	MarkObjGone
0001250A                            ; ===========================================================================
0001250A                            Ani_obj16:
0001250A                            	include "_anim\obj16.asm"
0001250A                            ; ---------------------------------------------------------------------------
0001250A                            ; Animation script - harpoon (LZ)
0001250A                            ; ---------------------------------------------------------------------------
0001250A 0000                       		dc.w byte_11F8A-Ani_obj16
0001250C 0000                       		dc.w byte_11F8E-Ani_obj16
0001250E 0000                       		dc.w byte_11F92-Ani_obj16
00012510 0000                       		dc.w byte_11F96-Ani_obj16
00012512 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012516 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001251A 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001251E 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012522                            		even
00012522                            		even
00012522                            
00012522                            ; ---------------------------------------------------------------------------
00012522                            ; Sprite mappings - harpoon (LZ)
00012522                            ; ---------------------------------------------------------------------------
00012522                            Map_obj16:
00012522                            	include "_maps\obj16.asm"
00012522                            ; ---------------------------------------------------------------------------
00012522                            ; Sprite mappings - harpoon (LZ)
00012522                            ; ---------------------------------------------------------------------------
00012522 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012526 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001252A 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001252E 01                         byte_11FA6:	dc.b 1
0001252F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012534 01                         byte_11FAC:	dc.b 1
00012535 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001253A 02                         byte_11FB2:	dc.b 2
0001253B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012540 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012545 01                         byte_11FBD:	dc.b 1
00012546 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001254B 01                         byte_11FC3:	dc.b 1
0001254C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012551 02                         byte_11FC9:	dc.b 2
00012552 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012557 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001255C                            		even
0001255C                            		even
0001255C                            
0001255C                            ; ===========================================================================
0001255C                            ; ---------------------------------------------------------------------------
0001255C                            ; Object 61 - blocks (LZ)
0001255C                            ; ---------------------------------------------------------------------------
0001255C                            
0001255C                            Obj61:					; XREF: Obj_Index
0001255C 7000                       		moveq	#0,d0
0001255E 1028 0024                  		move.b	$24(a0),d0
00012562 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012566 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001256A                            ; ===========================================================================
0001256A 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001256C 0000                       		dc.w Obj61_Action-Obj61_Index
0001256E                            
0001256E 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012570 200C                       		dc.b $20, $C
00012572 1010                       		dc.b $10, $10
00012574 1010                       		dc.b $10, $10
00012576                            ; ===========================================================================
00012576                            
00012576                            Obj61_Main:				; XREF: Obj61_Index
00012576 5428 0024                  		addq.b	#2,$24(a0)
0001257A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012582 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012588 117C 0004 0001             		move.b	#4,1(a0)
0001258E 117C 0003 0018             		move.b	#3,$18(a0)
00012594 7000                       		moveq	#0,d0
00012596 1028 0028                  		move.b	$28(a0),d0
0001259A E648                       		lsr.w	#3,d0
0001259C 0240 000E                  		andi.w	#$E,d0
000125A0 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000125A4 115A 0019                  		move.b	(a2)+,$19(a0)
000125A8 1152 0016                  		move.b	(a2),$16(a0)
000125AC E248                       		lsr.w	#1,d0
000125AE 1140 001A                  		move.b	d0,$1A(a0)
000125B2 3168 0008 0034             		move.w	8(a0),$34(a0)
000125B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000125BE 1028 0028                  		move.b	$28(a0),d0
000125C2 0200 000F                  		andi.b	#$F,d0
000125C6 6700                       		beq.s	Obj61_Action
000125C8 0C00 0007                  		cmpi.b	#7,d0
000125CC 6700                       		beq.s	Obj61_Action
000125CE 117C 0001 0038             		move.b	#1,$38(a0)
000125D4                            
000125D4                            Obj61_Action:				; XREF: Obj61_Index
000125D4 3F28 0008                  		move.w	8(a0),-(sp)
000125D8 7000                       		moveq	#0,d0
000125DA 1028 0028                  		move.b	$28(a0),d0
000125DE 0240 000F                  		andi.w	#$F,d0
000125E2 D040                       		add.w	d0,d0
000125E4 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125E8 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125EC 381F                       		move.w	(sp)+,d4
000125EE 4A28 0001                  		tst.b	1(a0)
000125F2 6A00                       		bpl.s	Obj61_ChkDel
000125F4 7200                       		moveq	#0,d1
000125F6 1228 0019                  		move.b	$19(a0),d1
000125FA 0641 000B                  		addi.w	#$B,d1
000125FE 7400                       		moveq	#0,d2
00012600 1428 0016                  		move.b	$16(a0),d2
00012604 3602                       		move.w	d2,d3
00012606 5243                       		addq.w	#1,d3
00012608 6100 D97A                  		bsr.w	SolidObject
0001260C 1144 003F                  		move.b	d4,$3F(a0)
00012610 6100 0000                  		bsr.w	loc_12180
00012614                            
00012614                            Obj61_ChkDel:
00012614 3028 0034                  		move.w	$34(a0),d0
00012618 0240 FF80                  		andi.w	#$FF80,d0
0001261C 3238 F700                  		move.w	($FFFFF700).w,d1
00012620 0441 0080                  		subi.w	#$80,d1
00012624 0241 FF80                  		andi.w	#$FF80,d1
00012628 9041                       		sub.w	d1,d0
0001262A 0C40 0280                  		cmpi.w	#$280,d0
0001262E 6200 B5C0                  		bhi.w	DeleteObject
00012632 6000 B580                  		bra.w	DisplaySprite
00012636                            ; ===========================================================================
00012636 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001263A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001263E 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012642 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012646                            ; ===========================================================================
00012646                            
00012646                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012646 4E75                       		rts	
00012648                            ; ===========================================================================
00012648                            
00012648                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012648 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001264C 6600                       		bne.s	loc_120D6	; if yes, branch
0001264E 0828 0003 0022             		btst	#3,$22(a0)
00012654 6700                       		beq.s	locret_120D4
00012656 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001265C                            
0001265C                            locret_120D4:
0001265C 4E75                       		rts	
0001265E                            ; ===========================================================================
0001265E                            
0001265E                            loc_120D6:
0001265E 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012662 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012664 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012668 4228 0038                  		clr.b	$38(a0)
0001266C 4E75                       		rts	
0001266E                            ; ===========================================================================
0001266E                            
0001266E                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001266E 6100 B51E                  		bsr.w	SpeedToPos
00012672 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012676 6100 0000                  		bsr.w	ObjHitFloor
0001267A 4A41                       		tst.w	d1
0001267C 6A00 0000                  		bpl.w	locret_12106
00012680 5241                       		addq.w	#1,d1
00012682 D368 000C                  		add.w	d1,$C(a0)
00012686 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001268A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001268E                            
0001268E                            locret_12106:
0001268E 4E75                       		rts	
00012690                            ; ===========================================================================
00012690                            
00012690                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012690 6100 B4FC                  		bsr.w	SpeedToPos
00012694 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012698 6100 0000                  		bsr.w	ObjHitCeiling
0001269C 4A41                       		tst.w	d1
0001269E 6A00 0000                  		bpl.w	locret_12126
000126A2 9368 000C                  		sub.w	d1,$C(a0)
000126A6 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000126AA 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126AE                            
000126AE                            locret_12126:
000126AE 4E75                       		rts	
000126B0                            ; ===========================================================================
000126B0                            
000126B0                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000126B0 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000126B6 6600                       		bne.s	locret_12138	; if not, branch
000126B8 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000126BC 4228 0038                  		clr.b	$38(a0)
000126C0                            
000126C0                            locret_12138:
000126C0 4E75                       		rts	
000126C2                            ; ===========================================================================
000126C2                            
000126C2                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000126C2 3038 F646                  		move.w	($FFFFF646).w,d0
000126C6 9068 000C                  		sub.w	$C(a0),d0
000126CA 6700                       		beq.s	locret_1217E
000126CC 6400                       		bcc.s	loc_12162
000126CE 0C40 FFFE                  		cmpi.w	#-2,d0
000126D2 6C00                       		bge.s	loc_1214E
000126D4 70FE                       		moveq	#-2,d0
000126D6                            
000126D6                            loc_1214E:
000126D6 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000126DA 6100 0000                  		bsr.w	ObjHitCeiling
000126DE 4A41                       		tst.w	d1
000126E0 6A00 0000                  		bpl.w	locret_12160
000126E4 9368 000C                  		sub.w	d1,$C(a0)
000126E8                            
000126E8                            locret_12160:
000126E8 4E75                       		rts	
000126EA                            ; ===========================================================================
000126EA                            
000126EA                            loc_12162:				; XREF: Obj61_Type07
000126EA 0C40 0002                  		cmpi.w	#2,d0
000126EE 6F00                       		ble.s	loc_1216A
000126F0 7002                       		moveq	#2,d0
000126F2                            
000126F2                            loc_1216A:
000126F2 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126F6 6100 0000                  		bsr.w	ObjHitFloor
000126FA 4A41                       		tst.w	d1
000126FC 6A00 0000                  		bpl.w	locret_1217E
00012700 5241                       		addq.w	#1,d1
00012702 D368 000C                  		add.w	d1,$C(a0)
00012706                            
00012706                            locret_1217E:
00012706 4E75                       		rts	
00012708                            ; ===========================================================================
00012708                            
00012708                            loc_12180:				; XREF: Obj61_Action
00012708 4A28 0038                  		tst.b	$38(a0)
0001270C 6700                       		beq.s	locret_121C0
0001270E 0828 0003 0022             		btst	#3,$22(a0)
00012714 6600                       		bne.s	loc_1219A
00012716 4A28 003E                  		tst.b	$3E(a0)
0001271A 6700                       		beq.s	locret_121C0
0001271C 5928 003E                  		subq.b	#4,$3E(a0)
00012720 6000                       		bra.s	loc_121A6
00012722                            ; ===========================================================================
00012722                            
00012722                            loc_1219A:
00012722 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012728 6700                       		beq.s	locret_121C0
0001272A 5828 003E                  		addq.b	#4,$3E(a0)
0001272E                            
0001272E                            loc_121A6:
0001272E 1028 003E                  		move.b	$3E(a0),d0
00012732 4EB9 0000 2C22             		jsr	(CalcSine).l
00012738 323C 0400                  		move.w	#$400,d1
0001273C C1C1                       		muls.w	d1,d0
0001273E 4840                       		swap	d0
00012740 D068 0030                  		add.w	$30(a0),d0
00012744 3140 000C                  		move.w	d0,$C(a0)
00012748                            
00012748                            locret_121C0:
00012748 4E75                       		rts	
0001274A                            ; ===========================================================================
0001274A                            ; ---------------------------------------------------------------------------
0001274A                            ; Sprite mappings - blocks (LZ)
0001274A                            ; ---------------------------------------------------------------------------
0001274A                            Map_obj61:
0001274A                            	include "_maps\obj61.asm"
0001274A                            ; ---------------------------------------------------------------------------
0001274A                            ; Sprite mappings - blocks (LZ)
0001274A                            ; ---------------------------------------------------------------------------
0001274A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001274E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012752 01                         byte_121CA:	dc.b 1
00012753 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012758 02                         byte_121D0:	dc.b 2
00012759 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001275E F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012763 01                         byte_121DB:	dc.b 1
00012764 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012769 01                         byte_121E1:	dc.b 1
0001276A F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012770 00                         		even
00012770 00                         		even
00012770                            
00012770                            ; ===========================================================================
00012770                            ; ---------------------------------------------------------------------------
00012770                            ; Object 62 - gargoyle head (LZ)
00012770                            ; ---------------------------------------------------------------------------
00012770                            
00012770                            Obj62:					; XREF: Obj_Index
00012770 7000                       		moveq	#0,d0
00012772 1028 0024                  		move.b	$24(a0),d0
00012776 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001277A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001277E 6000 D4DC                  		bra.w	MarkObjGone
00012782                            ; ===========================================================================
00012782 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012784 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012786 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012788 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001278A                            
0001278A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012792                            ; ===========================================================================
00012792                            
00012792                            Obj62_Main:				; XREF: Obj62_Index
00012792 5428 0024                  		addq.b	#2,$24(a0)
00012796 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001279E 317C 42E9 0002             		move.w	#$42E9,2(a0)
000127A4 0028 0004 0001             		ori.b	#4,1(a0)
000127AA 117C 0003 0018             		move.b	#3,$18(a0)
000127B0 117C 0010 0019             		move.b	#$10,$19(a0)
000127B6 1028 0028                  		move.b	$28(a0),d0	; get object type
000127BA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000127BE 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000127C4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127CA 0228 000F 0028             		andi.b	#$F,$28(a0)
000127D0                            
000127D0                            Obj62_MakeFire:				; XREF: Obj62_Index
000127D0 5328 001E                  		subq.b	#1,$1E(a0)
000127D4 6600                       		bne.s	Obj62_NoFire
000127D6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127DC 6100 B650                  		bsr.w	ChkObjOnScreen
000127E0 6600                       		bne.s	Obj62_NoFire
000127E2 6100 B856                  		bsr.w	SingleObjLoad
000127E6 6600                       		bne.s	Obj62_NoFire
000127E8 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127EC 5829 0024                  		addq.b	#4,$24(a1)
000127F0 3368 0008 0008             		move.w	8(a0),8(a1)
000127F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127FC 1368 0001 0001             		move.b	1(a0),1(a1)
00012802 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012808                            
00012808                            Obj62_NoFire:
00012808 4E75                       		rts	
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            Obj62_FireBall:				; XREF: Obj62_Index
0001280A 5428 0024                  		addq.b	#2,$24(a0)
0001280E 117C 0008 0016             		move.b	#8,$16(a0)
00012814 117C 0008 0017             		move.b	#8,$17(a0)
0001281A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012822 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012828 0028 0004 0001             		ori.b	#4,1(a0)
0001282E 117C 0004 0018             		move.b	#4,$18(a0)
00012834 117C 0098 0020             		move.b	#$98,$20(a0)
0001283A 117C 0008 0019             		move.b	#8,$19(a0)
00012840 117C 0002 001A             		move.b	#2,$1A(a0)
00012846 5068 000C                  		addq.w	#8,$C(a0)
0001284A 317C 0200 0010             		move.w	#$200,$10(a0)
00012850 0828 0000 0022             		btst	#0,$22(a0)
00012856 6600                       		bne.s	Obj62_Sound
00012858 4468 0010                  		neg.w	$10(a0)
0001285C                            
0001285C                            Obj62_Sound:
0001285C 303C 00AE                  		move.w	#$AE,d0
00012860 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012866                            
00012866                            Obj62_AniFire:				; XREF: Obj62_Index
00012866 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001286A 0200 0007                  		andi.b	#7,d0
0001286E 6600                       		bne.s	Obj62_StopFire
00012870 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012876                            
00012876                            Obj62_StopFire:
00012876 6100 B316                  		bsr.w	SpeedToPos
0001287A 0828 0000 0022             		btst	#0,$22(a0)
00012880 6600                       		bne.s	Obj62_StopFire2
00012882 76F8                       		moveq	#-8,d3
00012884 6100 0000                  		bsr.w	ObjHitWallLeft
00012888 4A41                       		tst.w	d1
0001288A 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001288E 4E75                       		rts	
00012890                            ; ===========================================================================
00012890                            
00012890                            Obj62_StopFire2:
00012890 7608                       		moveq	#8,d3
00012892 6100 0000                  		bsr.w	ObjHitWallRight
00012896 4A41                       		tst.w	d1
00012898 6B00 B356                  		bmi.w	DeleteObject
0001289C 4E75                       		rts	
0001289E                            ; ===========================================================================
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            ; Sprite mappings - gargoyle head (LZ)
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            Map_obj62:
0001289E                            	include "_maps\obj62.asm"
0001289E                            ; ---------------------------------------------------------------------------
0001289E                            ; Sprite mappings - gargoyle head (LZ)
0001289E                            ; ---------------------------------------------------------------------------
0001289E 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000128A2 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000128A6 03                         byte_12320:	dc.b 3
000128A7 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128AC F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000128B1 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000128B6 01                         byte_12330:	dc.b 1
000128B7 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000128BC 01                         byte_12336:	dc.b 1
000128BD FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000128C2                            		even
000128C2                            		even
000128C2                            
000128C2                            ; ===========================================================================
000128C2                            ; ---------------------------------------------------------------------------
000128C2                            ; Object 63 - platforms	on a conveyor belt (LZ)
000128C2                            ; ---------------------------------------------------------------------------
000128C2                            
000128C2                            Obj63:					; XREF: Obj_Index
000128C2 7000                       		moveq	#0,d0
000128C4 1028 0024                  		move.b	$24(a0),d0
000128C8 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000128CC 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000128D0 3028 0030                  		move.w	$30(a0),d0
000128D4 0240 FF80                  		andi.w	#$FF80,d0
000128D8 3238 F700                  		move.w	($FFFFF700).w,d1
000128DC 0441 0080                  		subi.w	#$80,d1
000128E0 0241 FF80                  		andi.w	#$FF80,d1
000128E4 9041                       		sub.w	d1,d0
000128E6 0C40 0280                  		cmpi.w	#$280,d0
000128EA 6200                       		bhi.s	loc_1236A
000128EC                            
000128EC                            Obj63_Display:				; XREF: loc_1236A
000128EC 6000 B2C6                  		bra.w	DisplaySprite
000128F0                            ; ===========================================================================
000128F0                            
000128F0                            loc_1236A:				; XREF: Obj63
000128F0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128F6 6600                       		bne.s	loc_12378
000128F8 0C40 FF80                  		cmpi.w	#-$80,d0
000128FC 64EE                       		bcc.s	Obj63_Display
000128FE                            
000128FE                            loc_12378:
000128FE 1028 002F                  		move.b	$2F(a0),d0
00012902 6A00 B2EC                  		bpl.w	DeleteObject
00012906 0240 007F                  		andi.w	#$7F,d0
0001290A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001290E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012914 6000 B2DA                  		bra.w	DeleteObject
00012918                            ; ===========================================================================
00012918 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001291A 0000                       		dc.w loc_124B2-Obj63_Index
0001291C 0000                       		dc.w loc_124C2-Obj63_Index
0001291E 0000                       		dc.w loc_124DE-Obj63_Index
00012920                            ; ===========================================================================
00012920                            
00012920                            Obj63_Main:				; XREF: Obj63_Index
00012920 1028 0028                  		move.b	$28(a0),d0
00012924 6B00 0000                  		bmi.w	loc_12460
00012928 5428 0024                  		addq.b	#2,$24(a0)
0001292C 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012934 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001293A 0028 0004 0001             		ori.b	#4,1(a0)
00012940 117C 0010 0019             		move.b	#$10,$19(a0)
00012946 117C 0004 0018             		move.b	#4,$18(a0)
0001294C 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012952 6600                       		bne.s	loc_123E2
00012954 5828 0024                  		addq.b	#4,$24(a0)
00012958 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001295E 117C 0001 0018             		move.b	#1,$18(a0)
00012964 6000 0000                  		bra.w	loc_124DE
00012968                            ; ===========================================================================
00012968                            
00012968                            loc_123E2:
00012968 117C 0004 001A             		move.b	#4,$1A(a0)
0001296E 7000                       		moveq	#0,d0
00012970 1028 0028                  		move.b	$28(a0),d0
00012974 3200                       		move.w	d0,d1
00012976 E648                       		lsr.w	#3,d0
00012978 0240 001E                  		andi.w	#$1E,d0
0001297C 45FA 0000                  		lea	Obj63_Data(pc),a2
00012980 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012984 315A 0038                  		move.w	(a2)+,$38(a0)
00012988 315A 0030                  		move.w	(a2)+,$30(a0)
0001298C 214A 003C                  		move.l	a2,$3C(a0)
00012990 0241 000F                  		andi.w	#$F,d1
00012994 E549                       		lsl.w	#2,d1
00012996 1141 0038                  		move.b	d1,$38(a0)
0001299A 117C 0004 003A             		move.b	#4,$3A(a0)
000129A0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000129A4 6700                       		beq.s	loc_1244C
000129A6 117C 0001 003B             		move.b	#1,$3B(a0)
000129AC 4428 003A                  		neg.b	$3A(a0)
000129B0 7200                       		moveq	#0,d1
000129B2 1228 0038                  		move.b	$38(a0),d1
000129B6 D228 003A                  		add.b	$3A(a0),d1
000129BA B228 0039                  		cmp.b	$39(a0),d1
000129BE 6500                       		bcs.s	loc_12448
000129C0 1001                       		move.b	d1,d0
000129C2 7200                       		moveq	#0,d1
000129C4 4A00                       		tst.b	d0
000129C6 6A00                       		bpl.s	loc_12448
000129C8 1228 0039                  		move.b	$39(a0),d1
000129CC 5901                       		subq.b	#4,d1
000129CE                            
000129CE                            loc_12448:
000129CE 1141 0038                  		move.b	d1,$38(a0)
000129D2                            
000129D2                            loc_1244C:
000129D2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000129D8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000129DE 6100 0000                  		bsr.w	Obj63_ChangeDir
000129E2 6000 0000                  		bra.w	loc_124B2
000129E6                            ; ===========================================================================
000129E6                            
000129E6                            loc_12460:				; XREF: Obj63_Main
000129E6 1140 002F                  		move.b	d0,$2F(a0)
000129EA 0240 007F                  		andi.w	#$7F,d0
000129EE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129F2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129F8 6600 B1F6                  		bne.w	DeleteObject
000129FC D040                       		add.w	d0,d0
000129FE 0240 001E                  		andi.w	#$1E,d0
00012A02 0640 0070                  		addi.w	#$70,d0
00012A06 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A0C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A10 321A                       		move.w	(a2)+,d1
00012A12 2248                       		movea.l	a0,a1
00012A14 6000                       		bra.s	Obj63_MakePtfms
00012A16                            ; ===========================================================================
00012A16                            
00012A16                            Obj63_Loop:
00012A16 6100 B622                  		bsr.w	SingleObjLoad
00012A1A 6600                       		bne.s	loc_124AA
00012A1C                            
00012A1C                            Obj63_MakePtfms:			; XREF: loc_12460
00012A1C 12BC 0063                  		move.b	#$63,0(a1)
00012A20 335A 0008                  		move.w	(a2)+,8(a1)
00012A24 335A 000C                  		move.w	(a2)+,$C(a1)
00012A28 301A                       		move.w	(a2)+,d0
00012A2A 1340 0028                  		move.b	d0,$28(a1)
00012A2E                            
00012A2E                            loc_124AA:
00012A2E 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A32                            
00012A32 588F                       		addq.l	#4,sp
00012A34 4E75                       		rts	
00012A36                            ; ===========================================================================
00012A36                            
00012A36                            loc_124B2:				; XREF: Obj63_Index
00012A36 7200                       		moveq	#0,d1
00012A38 1228 0019                  		move.b	$19(a0),d1
00012A3C 4EB9 0000 789E             		jsr	(PlatformObject).l
00012A42 6000 0000                  		bra.w	sub_12502
00012A46                            ; ===========================================================================
00012A46                            
00012A46                            loc_124C2:				; XREF: Obj63_Index
00012A46 7200                       		moveq	#0,d1
00012A48 1228 0019                  		move.b	$19(a0),d1
00012A4C 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00012A52 3F28 0008                  		move.w	8(a0),-(sp)
00012A56 6100 0000                  		bsr.w	sub_12502
00012A5A 341F                       		move.w	(sp)+,d2
00012A5C 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00012A62                            ; ===========================================================================
00012A62                            
00012A62                            loc_124DE:				; XREF: Obj63_Index
00012A62 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A66 0240 0003                  		andi.w	#3,d0
00012A6A 6600                       		bne.s	loc_124FC
00012A6C 7201                       		moveq	#1,d1
00012A6E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A72 6700                       		beq.s	loc_124F2
00012A74 4401                       		neg.b	d1
00012A76                            
00012A76                            loc_124F2:
00012A76 D328 001A                  		add.b	d1,$1A(a0)
00012A7A 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A80                            
00012A80                            loc_124FC:
00012A80 588F                       		addq.l	#4,sp
00012A82 6000 D1D8                  		bra.w	MarkObjGone
00012A86                            
00012A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A86                            
00012A86                            
00012A86                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A86 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A8A 6700                       		beq.s	loc_12520
00012A8C 4A28 003B                  		tst.b	$3B(a0)
00012A90 6600                       		bne.s	loc_12520
00012A92 117C 0001 003B             		move.b	#1,$3B(a0)
00012A98 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A9E 4428 003A                  		neg.b	$3A(a0)
00012AA2 6000                       		bra.s	loc_12534
00012AA4                            ; ===========================================================================
00012AA4                            
00012AA4                            loc_12520:
00012AA4 3028 0008                  		move.w	8(a0),d0
00012AA8 B068 0034                  		cmp.w	$34(a0),d0
00012AAC 6600                       		bne.s	loc_1256A
00012AAE 3028 000C                  		move.w	$C(a0),d0
00012AB2 B068 0036                  		cmp.w	$36(a0),d0
00012AB6 6600                       		bne.s	loc_1256A
00012AB8                            
00012AB8                            loc_12534:
00012AB8 7200                       		moveq	#0,d1
00012ABA 1228 0038                  		move.b	$38(a0),d1
00012ABE D228 003A                  		add.b	$3A(a0),d1
00012AC2 B228 0039                  		cmp.b	$39(a0),d1
00012AC6 6500                       		bcs.s	loc_12552
00012AC8 1001                       		move.b	d1,d0
00012ACA 7200                       		moveq	#0,d1
00012ACC 4A00                       		tst.b	d0
00012ACE 6A00                       		bpl.s	loc_12552
00012AD0 1228 0039                  		move.b	$39(a0),d1
00012AD4 5901                       		subq.b	#4,d1
00012AD6                            
00012AD6                            loc_12552:
00012AD6 1141 0038                  		move.b	d1,$38(a0)
00012ADA 2268 003C                  		movea.l	$3C(a0),a1
00012ADE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AE4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012AEA 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AEE                            
00012AEE                            loc_1256A:
00012AEE 6100 B09E                  		bsr.w	SpeedToPos
00012AF2 4E75                       		rts	
00012AF4                            ; End of function sub_12502
00012AF4                            
00012AF4                            
00012AF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AF4                            
00012AF4                            
00012AF4                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012AF4 7000                       		moveq	#0,d0
00012AF6 343C FF00                  		move.w	#-$100,d2
00012AFA 3028 0008                  		move.w	8(a0),d0
00012AFE 9068 0034                  		sub.w	$34(a0),d0
00012B02 6400                       		bcc.s	loc_12584
00012B04 4440                       		neg.w	d0
00012B06 4442                       		neg.w	d2
00012B08                            
00012B08                            loc_12584:
00012B08 7200                       		moveq	#0,d1
00012B0A 363C FF00                  		move.w	#-$100,d3
00012B0E 3228 000C                  		move.w	$C(a0),d1
00012B12 9268 0036                  		sub.w	$36(a0),d1
00012B16 6400                       		bcc.s	loc_12598
00012B18 4441                       		neg.w	d1
00012B1A 4443                       		neg.w	d3
00012B1C                            
00012B1C                            loc_12598:
00012B1C B240                       		cmp.w	d0,d1
00012B1E 6500                       		bcs.s	loc_125C2
00012B20 3028 0008                  		move.w	8(a0),d0
00012B24 9068 0034                  		sub.w	$34(a0),d0
00012B28 6700                       		beq.s	loc_125AE
00012B2A 48C0                       		ext.l	d0
00012B2C E180                       		asl.l	#8,d0
00012B2E 81C1                       		divs.w	d1,d0
00012B30 4440                       		neg.w	d0
00012B32                            
00012B32                            loc_125AE:
00012B32 3140 0010                  		move.w	d0,$10(a0)
00012B36 3143 0012                  		move.w	d3,$12(a0)
00012B3A 4840                       		swap	d0
00012B3C 3140 000A                  		move.w	d0,$A(a0)
00012B40 4268 000E                  		clr.w	$E(a0)
00012B44 4E75                       		rts	
00012B46                            ; ===========================================================================
00012B46                            
00012B46                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B46 3228 000C                  		move.w	$C(a0),d1
00012B4A 9268 0036                  		sub.w	$36(a0),d1
00012B4E 6700                       		beq.s	loc_125D4
00012B50 48C1                       		ext.l	d1
00012B52 E181                       		asl.l	#8,d1
00012B54 83C0                       		divs.w	d0,d1
00012B56 4441                       		neg.w	d1
00012B58                            
00012B58                            loc_125D4:
00012B58 3141 0012                  		move.w	d1,$12(a0)
00012B5C 3142 0010                  		move.w	d2,$10(a0)
00012B60 4841                       		swap	d1
00012B62 3141 000E                  		move.w	d1,$E(a0)
00012B66 4268 000A                  		clr.w	$A(a0)
00012B6A 4E75                       		rts	
00012B6C                            ; End of function Obj63_ChangeDir
00012B6C                            
00012B6C                            ; ===========================================================================
00012B6C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B6E 0000                       		dc.w word_12610-Obj63_Data
00012B70 0000                       		dc.w word_12628-Obj63_Data
00012B72 0000                       		dc.w word_1263C-Obj63_Data
00012B74 0000                       		dc.w word_12650-Obj63_Data
00012B76 0000                       		dc.w word_12668-Obj63_Data
00012B78 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B88 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B94 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012BA4 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BAC 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012BC0 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012BD4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BEC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012C00                            
00012C00                            ; ---------------------------------------------------------------------------
00012C00                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C00                            ; ---------------------------------------------------------------------------
00012C00                            Map_obj63:
00012C00                            	include "_maps\obj63.asm"
00012C00                            ; ---------------------------------------------------------------------------
00012C00                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C00                            ; ---------------------------------------------------------------------------
00012C00 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012C04 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012C08 0000                       		dc.w byte_1269E-Map_obj63
00012C0A 01                         byte_12686:	dc.b 1
00012C0B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C10 01                         byte_1268C:	dc.b 1
00012C11 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C16 01                         byte_12692:	dc.b 1
00012C17 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C1C 01                         byte_12698:	dc.b 1
00012C1D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C22 01                         byte_1269E:	dc.b 1
00012C23 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C28                            		even
00012C28                            		even
00012C28                            
00012C28                            ; ===========================================================================
00012C28                            ; ---------------------------------------------------------------------------
00012C28                            ; Object 64 - bubbles (LZ)
00012C28                            ; ---------------------------------------------------------------------------
00012C28                            
00012C28                            Obj64:					; XREF: Obj_Index
00012C28 7000                       		moveq	#0,d0
00012C2A 1028 0024                  		move.b	$24(a0),d0
00012C2E 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C32 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C36                            ; ===========================================================================
00012C36 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C38 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C3A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C3C 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C3E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C40 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C42                            ; ===========================================================================
00012C42                            
00012C42                            Obj64_Main:				; XREF: Obj64_Index
00012C42 5428 0024                  		addq.b	#2,$24(a0)
00012C46 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C4E 317C 8348 0002             		move.w	#$8348,2(a0)
00012C54 117C 0084 0001             		move.b	#$84,1(a0)
00012C5A 117C 0010 0019             		move.b	#$10,$19(a0)
00012C60 117C 0001 0018             		move.b	#1,$18(a0)
00012C66 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C6A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C6C 5028 0024                  		addq.b	#8,$24(a0)
00012C70 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C74 1140 0032                  		move.b	d0,$32(a0)
00012C78 1140 0033                  		move.b	d0,$33(a0)
00012C7C 117C 0006 001C             		move.b	#6,$1C(a0)
00012C82 6000 0000                  		bra.w	Obj64_BblMaker
00012C86                            ; ===========================================================================
00012C86                            
00012C86                            Obj64_Bubble:				; XREF: Obj64_Main
00012C86 1140 001C                  		move.b	d0,$1C(a0)
00012C8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C90 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C96 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C9C 1140 0026                  		move.b	d0,$26(a0)
00012CA0                            
00012CA0                            Obj64_Animate:				; XREF: Obj64_Index
00012CA0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012CA6 4EB9 0000 AC66             		jsr	AnimateSprite
00012CAC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012CB2 6600                       		bne.s	Obj64_ChkWater
00012CB4 117C 0001 002E             		move.b	#1,$2E(a0)
00012CBA                            
00012CBA                            Obj64_ChkWater:				; XREF: Obj64_Index
00012CBA 3038 F646                  		move.w	($FFFFF646).w,d0
00012CBE B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012CC2 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012CC4                            
00012CC4                            Obj64_Burst:				; XREF: Obj64_Wobble
00012CC4 117C 0006 0024             		move.b	#6,$24(a0)
00012CCA 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012CCE 6000 0000                  		bra.w	Obj64_Display2
00012CD2                            ; ===========================================================================
00012CD2                            
00012CD2                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012CD2 1028 0026                  		move.b	$26(a0),d0
00012CD6 5228 0026                  		addq.b	#1,$26(a0)
00012CDA 0240 007F                  		andi.w	#$7F,d0
00012CDE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CE4 1031 0000                  		move.b	(a1,d0.w),d0
00012CE8 4880                       		ext.w	d0
00012CEA D068 0030                  		add.w	$30(a0),d0
00012CEE 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CF2 4A28 002E                  		tst.b	$2E(a0)
00012CF6 6700                       		beq.s	Obj64_Display
00012CF8 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CFC 6700                       		beq.s	Obj64_Display	; if not, branch
00012CFE                            
00012CFE 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012D02 303C 00AD                  		move.w	#$AD,d0
00012D06 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D0C 43F8 D000                  		lea	($FFFFD000).w,a1
00012D10 4269 0010                  		clr.w	$10(a1)
00012D14 4269 0012                  		clr.w	$12(a1)
00012D18 4269 0014                  		clr.w	$14(a1)
00012D1C 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D22 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D28 137C 0000 003C             		move.b	#0,$3C(a1)
00012D2E 08A9 0005 0022             		bclr	#5,$22(a1)
00012D34 08A9 0004 0022             		bclr	#4,$22(a1)
00012D3A 0829 0002 0022             		btst	#2,$22(a1)
00012D40 6700 FF82                  		beq.w	Obj64_Burst
00012D44 08A9 0002 0022             		bclr	#2,$22(a1)
00012D4A 137C 0013 0016             		move.b	#$13,$16(a1)
00012D50 137C 0009 0017             		move.b	#9,$17(a1)
00012D56 5B69 000C                  		subq.w	#5,$C(a1)
00012D5A 6000 FF68                  		bra.w	Obj64_Burst
00012D5E                            ; ===========================================================================
00012D5E                            
00012D5E                            Obj64_Display:				; XREF: Obj64_Wobble
00012D5E 6100 AE2E                  		bsr.w	SpeedToPos
00012D62 4A28 0001                  		tst.b	1(a0)
00012D66 6A00                       		bpl.s	Obj64_Delete
00012D68 4EFA AE4A                  		jmp	DisplaySprite
00012D6C                            ; ===========================================================================
00012D6C                            
00012D6C                            Obj64_Delete:
00012D6C 4EFA AE82                  		jmp	DeleteObject
00012D70                            ; ===========================================================================
00012D70                            
00012D70                            Obj64_Display2:				; XREF: Obj64_Index
00012D70 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D76 4EB9 0000 AC66             		jsr	AnimateSprite
00012D7C 4A28 0001                  		tst.b	1(a0)
00012D80 6A00                       		bpl.s	Obj64_Delete2
00012D82 4EFA AE30                  		jmp	DisplaySprite
00012D86                            ; ===========================================================================
00012D86                            
00012D86                            Obj64_Delete2:
00012D86 4EFA AE68                  		jmp	DeleteObject
00012D8A                            ; ===========================================================================
00012D8A                            
00012D8A                            Obj64_Delete3:				; XREF: Obj64_Index
00012D8A 6000 AE64                  		bra.w	DeleteObject
00012D8E                            ; ===========================================================================
00012D8E                            
00012D8E                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D8E 4A68 0036                  		tst.w	$36(a0)
00012D92 6600                       		bne.s	loc_12874
00012D94 3038 F646                  		move.w	($FFFFF646).w,d0
00012D98 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D9C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012DA0 4A28 0001                  		tst.b	1(a0)
00012DA4 6A00 0000                  		bpl.w	Obj64_ChkDel
00012DA8 5368 0038                  		subq.w	#1,$38(a0)
00012DAC 6A00 0000                  		bpl.w	loc_12914
00012DB0 317C 0001 0036             		move.w	#1,$36(a0)
00012DB6                            
00012DB6                            loc_1283A:
00012DB6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DBC 3200                       		move.w	d0,d1
00012DBE 0240 0007                  		andi.w	#7,d0
00012DC2 0C40 0006                  		cmpi.w	#6,d0
00012DC6 64EE                       		bcc.s	loc_1283A
00012DC8                            
00012DC8 1140 0034                  		move.b	d0,$34(a0)
00012DCC 0241 000C                  		andi.w	#$C,d1
00012DD0 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012DD6 D2C1                       		adda.w	d1,a1
00012DD8 2149 003C                  		move.l	a1,$3C(a0)
00012DDC 5328 0032                  		subq.b	#1,$32(a0)
00012DE0 6A00                       		bpl.s	loc_12872
00012DE2 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DE8 08E8 0007 0036             		bset	#7,$36(a0)
00012DEE                            
00012DEE                            loc_12872:
00012DEE 6000                       		bra.s	loc_1287C
00012DF0                            ; ===========================================================================
00012DF0                            
00012DF0                            loc_12874:				; XREF: Obj64_BblMaker
00012DF0 5368 0038                  		subq.w	#1,$38(a0)
00012DF4 6A00 0000                  		bpl.w	loc_12914
00012DF8                            
00012DF8                            loc_1287C:
00012DF8 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DFE 0240 001F                  		andi.w	#$1F,d0
00012E02 3140 0038                  		move.w	d0,$38(a0)
00012E06 6100 B232                  		bsr.w	SingleObjLoad
00012E0A 6600                       		bne.s	loc_128F8
00012E0C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E10 3368 0008 0008             		move.w	8(a0),8(a1)
00012E16 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E1C 0240 000F                  		andi.w	#$F,d0
00012E20 5140                       		subq.w	#8,d0
00012E22 D169 0008                  		add.w	d0,8(a1)
00012E26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E2C 7000                       		moveq	#0,d0
00012E2E 1028 0034                  		move.b	$34(a0),d0
00012E32 2468 003C                  		movea.l	$3C(a0),a2
00012E36 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E3C 0828 0007 0036             		btst	#7,$36(a0)
00012E42 6700                       		beq.s	loc_128F8
00012E44 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E4A 0240 0003                  		andi.w	#3,d0
00012E4E 6600                       		bne.s	loc_128E4
00012E50 08E8 0006 0036             		bset	#6,$36(a0)
00012E56 6600                       		bne.s	loc_128F8
00012E58 137C 0002 0028             		move.b	#2,$28(a1)
00012E5E                            
00012E5E                            loc_128E4:
00012E5E 4A28 0034                  		tst.b	$34(a0)
00012E62 6600                       		bne.s	loc_128F8
00012E64 08E8 0006 0036             		bset	#6,$36(a0)
00012E6A 6600                       		bne.s	loc_128F8
00012E6C 137C 0002 0028             		move.b	#2,$28(a1)
00012E72                            
00012E72                            loc_128F8:
00012E72 5328 0034                  		subq.b	#1,$34(a0)
00012E76 6A00                       		bpl.s	loc_12914
00012E78 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E7E 0240 007F                  		andi.w	#$7F,d0
00012E82 0640 0080                  		addi.w	#$80,d0
00012E86 D168 0038                  		add.w	d0,$38(a0)
00012E8A 4268 0036                  		clr.w	$36(a0)
00012E8E                            
00012E8E                            loc_12914:
00012E8E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E94 4EB9 0000 AC66             		jsr	AnimateSprite
00012E9A                            
00012E9A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E9A 3028 0008                  		move.w	8(a0),d0
00012E9E 0240 FF80                  		andi.w	#$FF80,d0
00012EA2 3238 F700                  		move.w	($FFFFF700).w,d1
00012EA6 0441 0080                  		subi.w	#$80,d1
00012EAA 0241 FF80                  		andi.w	#$FF80,d1
00012EAE 9041                       		sub.w	d1,d0
00012EB0 0C40 0280                  		cmpi.w	#$280,d0
00012EB4 6200 AD3A                  		bhi.w	DeleteObject
00012EB8 3038 F646                  		move.w	($FFFFF646).w,d0
00012EBC B068 000C                  		cmp.w	$C(a0),d0
00012EC0 6500 ACF2                  		bcs.w	DisplaySprite
00012EC4 4E75                       		rts	
00012EC6                            ; ===========================================================================
00012EC6                            ; bubble production sequence
00012EC6                            
00012EC6                            ; 0 = small bubble, 1 =	large bubble
00012EC6                            
00012EC6 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012ED8                            
00012ED8                            ; ===========================================================================
00012ED8                            
00012ED8                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012ED8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012EDC 6B00                       		bmi.s	loc_12998
00012EDE 43F8 D000                  		lea	($FFFFD000).w,a1
00012EE2 3029 0008                  		move.w	8(a1),d0
00012EE6 3228 0008                  		move.w	8(a0),d1
00012EEA 0441 0010                  		subi.w	#$10,d1
00012EEE B240                       		cmp.w	d0,d1
00012EF0 6400                       		bcc.s	loc_12998
00012EF2 0641 0020                  		addi.w	#$20,d1
00012EF6 B240                       		cmp.w	d0,d1
00012EF8 6500                       		bcs.s	loc_12998
00012EFA 3029 000C                  		move.w	$C(a1),d0
00012EFE 3228 000C                  		move.w	$C(a0),d1
00012F02 B240                       		cmp.w	d0,d1
00012F04 6400                       		bcc.s	loc_12998
00012F06 0641 0010                  		addi.w	#$10,d1
00012F0A B240                       		cmp.w	d0,d1
00012F0C 6500                       		bcs.s	loc_12998
00012F0E 7001                       		moveq	#1,d0
00012F10 4E75                       		rts	
00012F12                            ; ===========================================================================
00012F12                            
00012F12                            loc_12998:
00012F12 7000                       		moveq	#0,d0
00012F14 4E75                       		rts	
00012F16                            ; ===========================================================================
00012F16                            Ani_obj64:
00012F16                            	include "_anim\obj64.asm"
00012F16                            ; ---------------------------------------------------------------------------
00012F16                            ; Animation script - bubbles (LZ)
00012F16                            ; ---------------------------------------------------------------------------
00012F16 0000                       		dc.w byte_129AA-Ani_obj64
00012F18 0000                       		dc.w byte_129B0-Ani_obj64
00012F1A 0000                       		dc.w byte_129B6-Ani_obj64
00012F1C 0000                       		dc.w byte_129BE-Ani_obj64
00012F1E 0000                       		dc.w byte_129BE-Ani_obj64
00012F20 0000                       		dc.w byte_129C0-Ani_obj64
00012F22 0000                       		dc.w byte_129C6-Ani_obj64
00012F24 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F2A 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F30 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F38 04FC                       byte_129BE:	dc.b 4,	$FC
00012F3A 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F40 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F46 00                         		even
00012F46 00                         		even
00012F46                            
00012F46                            ; ---------------------------------------------------------------------------
00012F46                            ; Sprite mappings - bubbles (LZ)
00012F46                            ; ---------------------------------------------------------------------------
00012F46                            Map_obj64:
00012F46                            	include "_maps\obj64.asm"
00012F46                            ; ---------------------------------------------------------------------------
00012F46                            ; Sprite mappings - bubbles (LZ)
00012F46                            ; ---------------------------------------------------------------------------
00012F46 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F4A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F4E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F52 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F56 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F5A 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F5E 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F62 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F66 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F6A 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F6E 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F72 0000                       		dc.w byte_12A9C-Map_obj64
00012F74 01                         byte_129FA:	dc.b 1
00012F75 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F7A 01                         byte_12A00:	dc.b 1
00012F7B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F80 01                         byte_12A06:	dc.b 1
00012F81 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F86 01                         byte_12A0C:	dc.b 1
00012F87 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F8C 01                         byte_12A12:	dc.b 1
00012F8D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F92 01                         byte_12A18:	dc.b 1
00012F93 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F98 01                         byte_12A1E:	dc.b 1
00012F99 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F9E 04                         byte_12A24:	dc.b 4
00012F9F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012FA4 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012FA9 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FAE 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012FB3 04                         byte_12A39:	dc.b 4
00012FB4 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012FB9 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012FBE 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012FC3 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012FC8 01                         byte_12A4E:	dc.b 1
00012FC9 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012FCE 01                         byte_12A54:	dc.b 1
00012FCF F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012FD4 01                         byte_12A5A:	dc.b 1
00012FD5 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012FDA 01                         byte_12A60:	dc.b 1
00012FDB F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012FE0 01                         byte_12A66:	dc.b 1
00012FE1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FE6 01                         byte_12A6C:	dc.b 1
00012FE7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FEC 01                         byte_12A72:	dc.b 1
00012FED F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FF2 01                         byte_12A78:	dc.b 1
00012FF3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FF8 01                         byte_12A7E:	dc.b 1
00012FF9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FFE 01                         byte_12A84:	dc.b 1
00012FFF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013004 01                         byte_12A8A:	dc.b 1
00013005 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001300A 01                         byte_12A90:	dc.b 1
0001300B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013010 01                         byte_12A96:	dc.b 1
00013011 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013016 00                         byte_12A9C:	dc.b 0
00013018 00                         		even
00013018 00                         		even
00013018                            
00013018                            ; ===========================================================================
00013018                            ; ---------------------------------------------------------------------------
00013018                            ; Object 65 - waterfalls (LZ)
00013018                            ; ---------------------------------------------------------------------------
00013018                            
00013018                            Obj65:					; XREF: Obj_Index
00013018 7000                       		moveq	#0,d0
0001301A 1028 0024                  		move.b	$24(a0),d0
0001301E 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013022 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013026                            ; ===========================================================================
00013026 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013028 0000                       		dc.w Obj65_Animate-Obj65_Index
0001302A 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001302C 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001302E 0000                       		dc.w loc_12B36-Obj65_Index
00013030                            ; ===========================================================================
00013030                            
00013030                            Obj65_Main:				; XREF: Obj65_Index
00013030 5828 0024                  		addq.b	#4,$24(a0)
00013034 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001303C 317C 4259 0002             		move.w	#$4259,2(a0)
00013042 0028 0004 0001             		ori.b	#4,1(a0)
00013048 117C 0018 0019             		move.b	#$18,$19(a0)
0001304E 117C 0001 0018             		move.b	#1,$18(a0)
00013054 1028 0028                  		move.b	$28(a0),d0	; get object type
00013058 6A00                       		bpl.s	loc_12AE6
0001305A 08E8 0007 0002             		bset	#7,2(a0)
00013060                            
00013060                            loc_12AE6:
00013060 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013064 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013068 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001306C 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001306E 4228 0018                  		clr.b	$18(a0)
00013072 5528 0024                  		subq.b	#2,$24(a0)
00013076 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001307C 6700                       		beq.s	loc_12B0A	; if not, branch
0001307E 117C 0006 0024             		move.b	#6,$24(a0)
00013084                            
00013084                            loc_12B0A:
00013084 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001308A 6700                       		beq.s	Obj65_Animate	; if not, branch
0001308C 117C 0008 0024             		move.b	#8,$24(a0)
00013092                            
00013092                            Obj65_Animate:				; XREF: Obj65_Index
00013092 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013098 4EB9 0000 AC66             		jsr	AnimateSprite
0001309E                            
0001309E                            Obj65_ChkDel:				; XREF: Obj65_Index
0001309E 6000 CBBC                  		bra.w	MarkObjGone
000130A2                            ; ===========================================================================
000130A2                            
000130A2                            Obj65_FixHeight:			; XREF: Obj65_Index
000130A2 3038 F646                  		move.w	($FFFFF646).w,d0
000130A6 0440 0010                  		subi.w	#$10,d0
000130AA 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130AE 60E2                       		bra.s	Obj65_Animate
000130B0                            ; ===========================================================================
000130B0                            
000130B0                            loc_12B36:				; XREF: Obj65_Index
000130B0 08A8 0007 0002             		bclr	#7,2(a0)
000130B6 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000130BC 6600                       		bne.s	Obj65_Animate2
000130BE 08E8 0007 0002             		bset	#7,2(a0)
000130C4                            
000130C4                            Obj65_Animate2:
000130C4 60CC                       		bra.s	Obj65_Animate
000130C6                            ; ===========================================================================
000130C6                            Ani_obj65:
000130C6                            	include "_anim\obj65.asm"
000130C6                            ; ---------------------------------------------------------------------------
000130C6                            ; Animation script - waterfall (LZ)
000130C6                            ; ---------------------------------------------------------------------------
000130C6 0000                       		dc.w byte_12B4E-Ani_obj65
000130C8 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000130CE 00                         		even
000130CE 00                         		even
000130CE                            
000130CE                            ; ---------------------------------------------------------------------------
000130CE                            ; Sprite mappings - waterfalls (LZ)
000130CE                            ; ---------------------------------------------------------------------------
000130CE                            Map_obj65:
000130CE                            	include "_maps\obj65.asm"
000130CE                            ; ---------------------------------------------------------------------------
000130CE                            ; Sprite mappings - waterfalls (LZ)
000130CE                            ; ---------------------------------------------------------------------------
000130CE 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000130D2 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000130D6 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000130DA 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000130DE 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130E2 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130E6 01                         byte_12B6C:	dc.b 1
000130E7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130EC 02                         byte_12B72:	dc.b 2
000130ED F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130F2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130F7 02                         byte_12B7D:	dc.b 2
000130F8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130FD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013102 01                         byte_12B88:	dc.b 1
00013103 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013108 02                         byte_12B8E:	dc.b 2
00013109 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001310E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013113 01                         byte_12B99:	dc.b 1
00013114 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013119 01                         byte_12B9F:	dc.b 1
0001311A F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001311F 01                         byte_12BA5:	dc.b 1
00013120 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013125 02                         byte_12BAB:	dc.b 2
00013126 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001312B 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013130 02                         byte_12BB6:	dc.b 2
00013131 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013136 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001313B 02                         byte_12BC1:	dc.b 2
0001313C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013141 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013146 02                         byte_12BCC:	dc.b 2
00013147 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001314C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013152 00                         		even
00013152 00                         		even
00013152                            
00013152                            ; ===========================================================================
00013152                            ; ---------------------------------------------------------------------------
00013152                            ; Object 01 - Sonic
00013152                            ; ---------------------------------------------------------------------------
00013152                            
00013152                            Obj01:					; XREF: Obj_Index
00013152 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013156 6700                       		beq.s	Obj01_Normal	; if not, branch
00013158 4EF9 0000 0000             		jmp	DebugMode
0001315E                            ; ===========================================================================
0001315E                            
0001315E                            Obj01_Normal:
0001315E 7000                       		moveq	#0,d0
00013160 1028 0024                  		move.b	$24(a0),d0
00013164 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013168 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001316C                            ; ===========================================================================
0001316C 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001316E 0000                       		dc.w Obj01_Control-Obj01_Index
00013170 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013172 0000                       		dc.w Obj01_Death-Obj01_Index
00013174 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013176                            ; ===========================================================================
00013176                            
00013176                            Obj01_Main:				; XREF: Obj01_Index
00013176 5428 0024                  		addq.b	#2,$24(a0)
0001317A 117C 0013 0016             		move.b	#$13,$16(a0)
00013180 117C 0009 0017             		move.b	#9,$17(a0)
00013186 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001318E 317C 0780 0002             		move.w	#$780,2(a0)
00013194 117C 0002 0018             		move.b	#2,$18(a0)
0001319A 117C 0018 0019             		move.b	#$18,$19(a0)
000131A0 117C 0004 0001             		move.b	#4,1(a0)
000131A6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000131AC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000131B2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000131B8                            
000131B8                            Obj01_Control:				; XREF: Obj01_Index
000131B8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000131BC 6700                       		beq.s	loc_12C58	; if not, branch
000131BE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000131C4 6700                       		beq.s	loc_12C58	; if not, branch
000131C6 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000131CC 4238 F7CC                  		clr.b	($FFFFF7CC).w
000131D0 4E75                       		rts	
000131D2                            ; ===========================================================================
000131D2                            
000131D2                            loc_12C58:
000131D2 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000131D6 6600                       		bne.s	loc_12C64	; if yes, branch
000131D8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000131DE                            
000131DE                            loc_12C64:
000131DE 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131E4 6600                       		bne.s	loc_12C7E	; if yes, branch
000131E6 7000                       		moveq	#0,d0
000131E8 1028 0022                  		move.b	$22(a0),d0
000131EC 0240 0006                  		andi.w	#6,d0
000131F0 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131F4 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131F8                            
000131F8                            loc_12C7E:
000131F8 6100                       		bsr.s	Sonic_Display
000131FA 6100 0000                  		bsr.w	Sonic_RecordPos
000131FE 6100 0000                  		bsr.w	Sonic_Water
00013202 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013208 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001320E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013212 6700                       		beq.s	loc_12CA6
00013214 4A28 001C                  		tst.b	$1C(a0)
00013218 6600                       		bne.s	loc_12CA6
0001321A 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013220                            
00013220                            loc_12CA6:
00013220 6100 0000                  		bsr.w	Sonic_Animate
00013224 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013228 6B00                       		bmi.s	loc_12CB6
0001322A 4EB9 0000 0000             		jsr	TouchResponse
00013230                            
00013230                            loc_12CB6:
00013230 6100 0000                  		bsr.w	Sonic_Loops
00013234 6100 0000                  		bsr.w	LoadSonicDynPLC
00013238 4E75                       		rts	
0001323A                            ; ===========================================================================
0001323A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001323C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001323E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013240 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013242                            ; ---------------------------------------------------------------------------
00013242                            ; Music	to play	after invincibility wears off
00013242                            ; ---------------------------------------------------------------------------
00013242                            ; ===========================================================================
00013242                            
00013242                            Sonic_Display:				; XREF: loc_12C7E
00013242 3028 0030                  		move.w	$30(a0),d0
00013246 6700                       		beq.s	Obj01_Display
00013248 5368 0030                  		subq.w	#1,$30(a0)
0001324C E648                       		lsr.w	#3,d0
0001324E 6400                       		bcc.s	Obj01_ChkInvin
00013250                            
00013250                            Obj01_Display:
00013250 4EBA A962                  		jsr	DisplaySprite
00013254                            
00013254                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013254                             
00013254                            Obj01_ChkInvin:
00013254 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013258 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001325C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013260 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013264 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013268 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001326C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013270 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013274 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001327A 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001327E 7000                       		moveq	#0,d0
00013280 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013284                             
00013284 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001328A 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001328C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013292 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013294                             
00013294                            Obj01_GetBgm2:
00013294 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001329A 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001329C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000132A2 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132A4                             
000132A4                            Obj01_GetBgm3:
000132A4 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000132AA 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000132AC 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000132B2 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132B4                             
000132B4                            Obj01_GetBgm4:
000132B4 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000132BA 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000132BC 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000132C2                             
000132C2                            Obj01_PlayMusic:
000132C2 1031 0000                  		move.b	(a1,d0.w),d0
000132C6 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
000132CC                             
000132CC                            ; NineKode ends here.
000132CC                            
000132CC                            Obj01_RmvInvin:
000132CC 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000132D2                            
000132D2                            Obj01_ChkShoes:
000132D2 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000132D6 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000132D8 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000132DC 6700                       		beq.s	Obj01_ExitChk
000132DE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132E2 6600                       		bne.s	Obj01_ExitChk
000132E4 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132EA 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132F0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132F6 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132FC 303C 00E3                  		move.w	#$E3,d0
00013300 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
00013306                            ; ===========================================================================
00013306                            
00013306                            Obj01_ExitChk:
00013306 4E75                       		rts	
00013308                            
00013308                            ; ---------------------------------------------------------------------------
00013308                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013308                            ; ---------------------------------------------------------------------------
00013308                            
00013308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013308                            
00013308                            
00013308                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013308 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001330C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013310 43F1 0000                  		lea	(a1,d0.w),a1
00013314 32E8 0008                  		move.w	8(a0),(a1)+
00013318 32E8 000C                  		move.w	$C(a0),(a1)+
0001331C 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013320 4E75                       		rts	
00013322                            ; End of function Sonic_RecordPos
00013322                            
00013322                            ; ---------------------------------------------------------------------------
00013322                            ; Subroutine for Sonic when he's underwater
00013322                            ; ---------------------------------------------------------------------------
00013322                            
00013322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013322                            
00013322                            
00013322                            Sonic_Water:				; XREF: loc_12C7E
00013322 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013328 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001332A                            
0001332A                            locret_12D80:
0001332A 4E75                       		rts	
0001332C                            ; ===========================================================================
0001332C                            
0001332C                            Obj01_InWater:
0001332C 3038 F646                  		move.w	($FFFFF646).w,d0
00013330 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013334 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013336 08E8 0006 0022             		bset	#6,$22(a0)
0001333C 66EC                       		bne.s	locret_12D80
0001333E 6100 0000                  		bsr.w	ResumeMusic
00013342 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013348 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001334E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013354 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001335A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013360 E0E8 0010                  		asr	$10(a0)
00013364 E0E8 0012                  		asr	$12(a0)
00013368 E0E8 0012                  		asr	$12(a0)
0001336C 67BC                       		beq.s	locret_12D80
0001336E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013374 303C 00AA                  		move.w	#$AA,d0
00013378 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001337E                            ; ===========================================================================
0001337E                            
0001337E                            Obj01_OutWater:
0001337E 08A8 0006 0022             		bclr	#6,$22(a0)
00013384 67A4                       		beq.s	locret_12D80
00013386 6100 0000                  		bsr.w	ResumeMusic
0001338A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013390 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013396 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001339C E1E8 0012                  		asl	$12(a0)
000133A0 6700 FF88                  		beq.w	locret_12D80
000133A4 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000133AA 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000133B0 6E00                       		bgt.s	loc_12E0E
000133B2 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000133B8                            
000133B8                            loc_12E0E:
000133B8 303C 00AA                  		move.w	#$AA,d0
000133BC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
000133C2                            ; End of function Sonic_Water
000133C2                            
000133C2                            ; ===========================================================================
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            ; Modes	for controlling	Sonic
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            
000133C2                            Obj01_MdNormal:				; XREF: Obj01_Modes
000133C2 6100 0000                  		bsr.w	Sonic_Jump
000133C6 6100 0000                  		bsr.w	Sonic_SlopeResist
000133CA 6100 0000                  		bsr.w	Sonic_Move
000133CE 6100 0000                  		bsr.w	Sonic_Roll
000133D2 6100 0000                  		bsr.w	Sonic_LevelBound
000133D6 4EBA A7B6                  		jsr	SpeedToPos
000133DA 6100 0000                  		bsr.w	Sonic_AnglePos
000133DE 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133E2 4E75                       		rts	
000133E4                            ; ===========================================================================
000133E4                            
000133E4                            Obj01_MdJump:				; XREF: Obj01_Modes
000133E4 6100 0000                  		bsr.w	Sonic_JumpHeight
000133E8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133EC 6100 0000                  		bsr.w	Sonic_LevelBound
000133F0 4EBA A770                  		jsr	ObjectFall
000133F4 0828 0006 0022             		btst	#6,$22(a0)
000133FA 6700                       		beq.s	loc_12E5C
000133FC 0468 0028 0012             		subi.w	#$28,$12(a0)
00013402                            
00013402                            loc_12E5C:
00013402 6100 0000                  		bsr.w	Sonic_JumpAngle
00013406 6100 0000                  		bsr.w	Sonic_Floor
0001340A 4E75                       		rts	
0001340C                            ; ===========================================================================
0001340C                            
0001340C                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001340C 6100 0000                  		bsr.w	Sonic_Jump
00013410 6100 0000                  		bsr.w	Sonic_RollRepel
00013414 6100 0000                  		bsr.w	Sonic_RollSpeed
00013418 6100 0000                  		bsr.w	Sonic_LevelBound
0001341C 4EBA A770                  		jsr	SpeedToPos
00013420 6100 0000                  		bsr.w	Sonic_AnglePos
00013424 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013428 4E75                       		rts	
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001342A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001342E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013432 6100 0000                  		bsr.w	Sonic_LevelBound
00013436 4EBA A72A                  		jsr	ObjectFall
0001343A 0828 0006 0022             		btst	#6,$22(a0)
00013440 6700                       		beq.s	loc_12EA6
00013442 0468 0028 0012             		subi.w	#$28,$12(a0)
00013448                            
00013448                            loc_12EA6:
00013448 6100 0000                  		bsr.w	Sonic_JumpAngle
0001344C 6100 0000                  		bsr.w	Sonic_Floor
00013450 4E75                       		rts	
00013452                            ; ---------------------------------------------------------------------------
00013452                            ; Subroutine to	make Sonic walk/run
00013452                            ; ---------------------------------------------------------------------------
00013452                            
00013452                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013452                            
00013452                            
00013452                            Sonic_Move:				; XREF: Obj01_MdNormal
00013452 3C38 F760                  		move.w	($FFFFF760).w,d6
00013456 3A38 F762                  		move.w	($FFFFF762).w,d5
0001345A 3838 F764                  		move.w	($FFFFF764).w,d4
0001345E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013462 6600 0000                  		bne.w	loc_12FEE
00013466 4A68 003E                  		tst.w	$3E(a0)
0001346A 6600 0000                  		bne.w	Obj01_ResetScr
0001346E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013474 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013476 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001347C 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001347E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013482                            
00013482                            Obj01_NotLeft:
00013482 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013488 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001348A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013490 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013492 6100 0000                  		bsr.w	Sonic_MoveLeft
00013496 6000                       		bra.s	Obj01_NotRight
00013498                            
00013498                            Obj01_MoveRight:
00013498 6100 0000                  		bsr.w	Sonic_MoveRight
0001349C                            
0001349C                            Obj01_NotRight:
0001349C 1028 0026                  		move.b	$26(a0),d0
000134A0 0600 0020                  		addi.b	#$20,d0
000134A4 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000134A8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134AC 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000134B0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134B4 08A8 0005 0022             		bclr	#5,$22(a0)
000134BA 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000134C0 0828 0003 0022             		btst	#3,$22(a0)
000134C6 6700                       		beq.s	Sonic_Balance
000134C8 7000                       		moveq	#0,d0
000134CA 1028 003D                  		move.b	$3D(a0),d0
000134CE ED48                       		lsl.w	#6,d0
000134D0 43F8 D000                  		lea	($FFFFD000).w,a1
000134D4 43F1 0000                  		lea	(a1,d0.w),a1
000134D8 4A29 0022                  		tst.b	$22(a1)
000134DC 6B00                       		bmi.s	Sonic_LookUp
000134DE 7200                       		moveq	#0,d1
000134E0 1229 0019                  		move.b	$19(a1),d1
000134E4 3401                       		move.w	d1,d2
000134E6 D442                       		add.w	d2,d2
000134E8 5942                       		subq.w	#4,d2
000134EA D268 0008                  		add.w	8(a0),d1
000134EE 9269 0008                  		sub.w	8(a1),d1
000134F2 0C41 0004                  		cmpi.w	#4,d1
000134F6 6D00                       		blt.s	loc_12F6A
000134F8 B242                       		cmp.w	d2,d1
000134FA 6C00                       		bge.s	loc_12F5A
000134FC 6000                       		bra.s	Sonic_LookUp
000134FE                            ; ===========================================================================
000134FE                            
000134FE                            Sonic_Balance:
000134FE 4EB9 0000 0000             		jsr	ObjHitFloor
00013504 0C41 000C                  		cmpi.w	#$C,d1
00013508 6D00                       		blt.s	Sonic_LookUp
0001350A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013510 6600                       		bne.s	loc_12F62
00013512                            
00013512                            loc_12F5A:
00013512 08A8 0000 0022             		bclr	#0,$22(a0)
00013518 6000                       		bra.s	loc_12F70
0001351A                            ; ===========================================================================
0001351A                            
0001351A                            loc_12F62:
0001351A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013520 6600                       		bne.s	Sonic_LookUp
00013522                            
00013522                            loc_12F6A:
00013522 08E8 0000 0022             		bset	#0,$22(a0)
00013528                            
00013528                            loc_12F70:
00013528 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001352E 6000                       		bra.s	Obj01_ResetScr
00013530                            ; ===========================================================================
00013530                            
00013530                            Sonic_LookUp:
00013530 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013536 6700                       		beq.s	Sonic_Duck	; if not, branch
00013538 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001353E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013544 6700                       		beq.s	loc_12FC2
00013546 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001354A 6000                       		bra.s	loc_12FC2
0001354C                            ; ===========================================================================
0001354C                            
0001354C                            Sonic_Duck:
0001354C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013552 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013554 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001355A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013560 6700                       		beq.s	loc_12FC2
00013562 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013566 6000                       		bra.s	loc_12FC2
00013568                            ; ===========================================================================
00013568                            
00013568                            Obj01_ResetScr:
00013568 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001356E 6700                       		beq.s	loc_12FC2	; if yes, branch
00013570 6400                       		bcc.s	loc_12FBE
00013572 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013576                            
00013576                            loc_12FBE:
00013576 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001357A                            
0001357A                            loc_12FC2:
0001357A 1038 F602                  		move.b	($FFFFF602).w,d0
0001357E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013582 6600                       		bne.s	loc_12FEE	; if yes, branch
00013584 3028 0014                  		move.w	$14(a0),d0
00013588 6700                       		beq.s	loc_12FEE
0001358A 6B00                       		bmi.s	loc_12FE2
0001358C 9045                       		sub.w	d5,d0
0001358E 6400                       		bcc.s	loc_12FDC
00013590 303C 0000                  		move.w	#0,d0
00013594                            
00013594                            loc_12FDC:
00013594 3140 0014                  		move.w	d0,$14(a0)
00013598 6000                       		bra.s	loc_12FEE
0001359A                            ; ===========================================================================
0001359A                            
0001359A                            loc_12FE2:
0001359A D045                       		add.w	d5,d0
0001359C 6400                       		bcc.s	loc_12FEA
0001359E 303C 0000                  		move.w	#0,d0
000135A2                            
000135A2                            loc_12FEA:
000135A2 3140 0014                  		move.w	d0,$14(a0)
000135A6                            
000135A6                            loc_12FEE:
000135A6 1028 0026                  		move.b	$26(a0),d0
000135AA 4EB9 0000 2C22             		jsr	(CalcSine).l
000135B0 C3E8 0014                  		muls.w	$14(a0),d1
000135B4 E081                       		asr.l	#8,d1
000135B6 3141 0010                  		move.w	d1,$10(a0)
000135BA C1E8 0014                  		muls.w	$14(a0),d0
000135BE E080                       		asr.l	#8,d0
000135C0 3140 0012                  		move.w	d0,$12(a0)
000135C4                            
000135C4                            loc_1300C:
000135C4 1028 0026                  		move.b	$26(a0),d0
000135C8 0600 0040                  		addi.b	#$40,d0
000135CC 6B00                       		bmi.s	locret_1307C
000135CE 123C 0040                  		move.b	#$40,d1
000135D2 4A68 0014                  		tst.w	$14(a0)
000135D6 6700                       		beq.s	locret_1307C
000135D8 6B00                       		bmi.s	loc_13024
000135DA 4441                       		neg.w	d1
000135DC                            
000135DC                            loc_13024:
000135DC 1028 0026                  		move.b	$26(a0),d0
000135E0 D001                       		add.b	d1,d0
000135E2 3F00                       		move.w	d0,-(sp)
000135E4 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135E8 301F                       		move.w	(sp)+,d0
000135EA 4A41                       		tst.w	d1
000135EC 6A00                       		bpl.s	locret_1307C
000135EE E141                       		asl.w	#8,d1
000135F0 0600 0020                  		addi.b	#$20,d0
000135F4 0200 00C0                  		andi.b	#$C0,d0
000135F8 6700                       		beq.s	loc_13078
000135FA 0C00 0040                  		cmpi.b	#$40,d0
000135FE 6700                       		beq.s	loc_13066
00013600 0C00 0080                  		cmpi.b	#$80,d0
00013604 6700                       		beq.s	loc_13060
00013606 D368 0010                  		add.w	d1,$10(a0)
0001360A 08E8 0005 0022             		bset	#5,$22(a0)
00013610 317C 0000 0014             		move.w	#0,$14(a0)
00013616 4E75                       		rts	
00013618                            ; ===========================================================================
00013618                            
00013618                            loc_13060:
00013618 9368 0012                  		sub.w	d1,$12(a0)
0001361C 4E75                       		rts	
0001361E                            ; ===========================================================================
0001361E                            
0001361E                            loc_13066:
0001361E 9368 0010                  		sub.w	d1,$10(a0)
00013622 08E8 0005 0022             		bset	#5,$22(a0)
00013628 317C 0000 0014             		move.w	#0,$14(a0)
0001362E 4E75                       		rts	
00013630                            ; ===========================================================================
00013630                            
00013630                            loc_13078:
00013630 D368 0012                  		add.w	d1,$12(a0)
00013634                            
00013634                            locret_1307C:
00013634 4E75                       		rts	
00013636                            ; End of function Sonic_Move
00013636                            
00013636                            
00013636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013636                            
00013636                            
00013636                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013636 3028 0014                  		move.w	$14(a0),d0
0001363A 6700                       		beq.s	loc_13086
0001363C 6A00                       		bpl.s	loc_130B2
0001363E                            
0001363E                            loc_13086:
0001363E 08E8 0000 0022             		bset	#0,$22(a0)
00013644 6600                       		bne.s	loc_1309A
00013646 08A8 0005 0022             		bclr	#5,$22(a0)
0001364C 117C 0001 001D             		move.b	#1,$1D(a0)
00013652                            
00013652                            loc_1309A:
00013652 9045                       		sub.w	d5,d0
00013654 3206                       		move.w	d6,d1
00013656 4441                       		neg.w	d1
00013658 B041                       		cmp.w	d1,d0
0001365A 6E00                       		bgt.s	loc_130A6
0001365C 3001                       		move.w	d1,d0
0001365E                            
0001365E                            loc_130A6:
0001365E 3140 0014                  		move.w	d0,$14(a0)
00013662 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013668 4E75                       		rts	
0001366A                            ; ===========================================================================
0001366A                            
0001366A                            loc_130B2:				; XREF: Sonic_MoveLeft
0001366A 9044                       		sub.w	d4,d0
0001366C 6400                       		bcc.s	loc_130BA
0001366E 303C FF80                  		move.w	#-$80,d0
00013672                            
00013672                            loc_130BA:
00013672 3140 0014                  		move.w	d0,$14(a0)
00013676 1028 0026                  		move.b	$26(a0),d0
0001367A 0600 0020                  		addi.b	#$20,d0
0001367E 0200 00C0                  		andi.b	#$C0,d0
00013682 6600                       		bne.s	locret_130E8
00013684 0C40 0400                  		cmpi.w	#$400,d0
00013688 6D00                       		blt.s	locret_130E8
0001368A 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013690 08A8 0000 0022             		bclr	#0,$22(a0)
00013696 303C 00A4                  		move.w	#$A4,d0
0001369A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136A0                            
000136A0                            locret_130E8:
000136A0 4E75                       		rts	
000136A2                            ; End of function Sonic_MoveLeft
000136A2                            
000136A2                            
000136A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136A2                            
000136A2                            
000136A2                            Sonic_MoveRight:			; XREF: Sonic_Move
000136A2 3028 0014                  		move.w	$14(a0),d0
000136A6 6B00                       		bmi.s	loc_13118
000136A8 08A8 0000 0022             		bclr	#0,$22(a0)
000136AE 6700                       		beq.s	loc_13104
000136B0 08A8 0005 0022             		bclr	#5,$22(a0)
000136B6 117C 0001 001D             		move.b	#1,$1D(a0)
000136BC                            
000136BC                            loc_13104:
000136BC D045                       		add.w	d5,d0
000136BE B046                       		cmp.w	d6,d0
000136C0 6D00                       		blt.s	loc_1310C
000136C2 3006                       		move.w	d6,d0
000136C4                            
000136C4                            loc_1310C:
000136C4 3140 0014                  		move.w	d0,$14(a0)
000136C8 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136CE 4E75                       		rts	
000136D0                            ; ===========================================================================
000136D0                            
000136D0                            loc_13118:				; XREF: Sonic_MoveRight
000136D0 D044                       		add.w	d4,d0
000136D2 6400                       		bcc.s	loc_13120
000136D4 303C 0080                  		move.w	#$80,d0
000136D8                            
000136D8                            loc_13120:
000136D8 3140 0014                  		move.w	d0,$14(a0)
000136DC 1028 0026                  		move.b	$26(a0),d0
000136E0 0600 0020                  		addi.b	#$20,d0
000136E4 0200 00C0                  		andi.b	#$C0,d0
000136E8 6600                       		bne.s	locret_1314E
000136EA 0C40 FC00                  		cmpi.w	#-$400,d0
000136EE 6E00                       		bgt.s	locret_1314E
000136F0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136F6 08E8 0000 0022             		bset	#0,$22(a0)
000136FC 303C 00A4                  		move.w	#$A4,d0
00013700 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013706                            
00013706                            locret_1314E:
00013706 4E75                       		rts	
00013708                            ; End of function Sonic_MoveRight
00013708                            
00013708                            ; ---------------------------------------------------------------------------
00013708                            ; Subroutine to	change Sonic's speed as he rolls
00013708                            ; ---------------------------------------------------------------------------
00013708                            
00013708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013708                            
00013708                            
00013708                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013708 3C38 F760                  		move.w	($FFFFF760).w,d6
0001370C E346                       		asl.w	#1,d6
0001370E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013712 E245                       		asr.w	#1,d5
00013714 3838 F764                  		move.w	($FFFFF764).w,d4
00013718 E444                       		asr.w	#2,d4
0001371A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001371E 6600 0000                  		bne.w	loc_131CC
00013722 4A68 003E                  		tst.w	$3E(a0)
00013726 6600                       		bne.s	loc_13188
00013728 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001372E 6700                       		beq.s	loc_1317C	; if not, branch
00013730 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013736 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013738 6100 0000                  		bsr.w	Sonic_RollLeft
0001373C                            
0001373C                            loc_1317C:
0001373C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013742 6700                       		beq.s	loc_13188	; if not, branch
00013744 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001374A 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001374C 6100 0000                  		bsr.w	Sonic_RollLeft
00013750 6000                       		bra.s	loc_13188
00013752                            
00013752                            SonicRS_RollRight:
00013752 6100 0000                  		bsr.w	Sonic_RollRight
00013756                            
00013756                            loc_13188:
00013756 3028 0014                  		move.w	$14(a0),d0
0001375A 6700                       		beq.s	loc_131AA
0001375C 6B00                       		bmi.s	loc_1319E
0001375E 9045                       		sub.w	d5,d0
00013760 6400                       		bcc.s	loc_13198
00013762 303C 0000                  		move.w	#0,d0
00013766                            
00013766                            loc_13198:
00013766 3140 0014                  		move.w	d0,$14(a0)
0001376A 6000                       		bra.s	loc_131AA
0001376C                            ; ===========================================================================
0001376C                            
0001376C                            loc_1319E:				; XREF: Sonic_RollSpeed
0001376C D045                       		add.w	d5,d0
0001376E 6400                       		bcc.s	loc_131A6
00013770 303C 0000                  		move.w	#0,d0
00013774                            
00013774                            loc_131A6:
00013774 3140 0014                  		move.w	d0,$14(a0)
00013778                            
00013778                            loc_131AA:
00013778 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001377C 6600                       		bne.s	loc_131CC	; if yes, branch
0001377E 08A8 0002 0022             		bclr	#2,$22(a0)
00013784 117C 0013 0016             		move.b	#$13,$16(a0)
0001378A 117C 0009 0017             		move.b	#9,$17(a0)
00013790 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013796 5B68 000C                  		subq.w	#5,$C(a0)
0001379A                            
0001379A                            loc_131CC:
0001379A 1028 0026                  		move.b	$26(a0),d0
0001379E 4EB9 0000 2C22             		jsr	(CalcSine).l
000137A4 C1E8 0014                  		muls.w	$14(a0),d0
000137A8 E080                       		asr.l	#8,d0
000137AA 3140 0012                  		move.w	d0,$12(a0)
000137AE C3E8 0014                  		muls.w	$14(a0),d1
000137B2 E081                       		asr.l	#8,d1
000137B4 0C41 1000                  		cmpi.w	#$1000,d1
000137B8 6F00                       		ble.s	loc_131F0
000137BA 323C 1000                  		move.w	#$1000,d1
000137BE                            
000137BE                            loc_131F0:
000137BE 0C41 F000                  		cmpi.w	#-$1000,d1
000137C2 6C00                       		bge.s	loc_131FA
000137C4 323C F000                  		move.w	#-$1000,d1
000137C8                            
000137C8                            loc_131FA:
000137C8 3141 0010                  		move.w	d1,$10(a0)
000137CC 6000 FDF6                  		bra.w	loc_1300C
000137D0                            ; End of function Sonic_RollSpeed
000137D0                            
000137D0                            
000137D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137D0                            
000137D0                            
000137D0                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000137D0 3028 0014                  		move.w	$14(a0),d0
000137D4 6700                       		beq.s	loc_1320A
000137D6 6A00                       		bpl.s	loc_13218
000137D8                            
000137D8                            loc_1320A:
000137D8 08E8 0000 0022             		bset	#0,$22(a0)
000137DE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137E4 4E75                       		rts	
000137E6                            ; ===========================================================================
000137E6                            
000137E6                            loc_13218:
000137E6 9044                       		sub.w	d4,d0
000137E8 6400                       		bcc.s	loc_13220
000137EA 303C FF80                  		move.w	#-$80,d0
000137EE                            
000137EE                            loc_13220:
000137EE 3140 0014                  		move.w	d0,$14(a0)
000137F2 4E75                       		rts	
000137F4                            ; End of function Sonic_RollLeft
000137F4                            
000137F4                            
000137F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137F4                            
000137F4                            
000137F4                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137F4 3028 0014                  		move.w	$14(a0),d0
000137F8 6B00                       		bmi.s	loc_1323A
000137FA 08A8 0000 0022             		bclr	#0,$22(a0)
00013800 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013806 4E75                       		rts	
00013808                            ; ===========================================================================
00013808                            
00013808                            loc_1323A:
00013808 D044                       		add.w	d4,d0
0001380A 6400                       		bcc.s	loc_13242
0001380C 303C 0080                  		move.w	#$80,d0
00013810                            
00013810                            loc_13242:
00013810 3140 0014                  		move.w	d0,$14(a0)
00013814 4E75                       		rts	
00013816                            ; End of function Sonic_RollRight
00013816                            
00013816                            ; ---------------------------------------------------------------------------
00013816                            ; Subroutine to	change Sonic's direction while jumping
00013816                            ; ---------------------------------------------------------------------------
00013816                            
00013816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013816                            
00013816                            
00013816                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013816 3C38 F760                  		move.w	($FFFFF760).w,d6
0001381A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001381E E345                       		asl.w	#1,d5
00013820 0828 0004 0022             		btst	#4,$22(a0)
00013826 6600                       		bne.s	Obj01_ResetScr2
00013828 3028 0010                  		move.w	$10(a0),d0
0001382C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013832 6700                       		beq.s	loc_13278	; if not, branch
00013834 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001383A 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
0001383C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013840 6E00                       		bgt.s	loc_13278
00013842 3001                       		move.w	d1,d0
00013844                            
00013844                            loc_13278:
00013844 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001384A 6700                       		beq.s	Obj01_JumpMove	; if not, branch
0001384C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013852 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013854 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013858 6E00                       		bgt.s	Obj01_JumpMove
0001385A 3001                       		move.w	d1,d0
0001385C 6000                       		bra.s	Obj01_JumpMove
0001385E                            
0001385E                            SonicCJD_JumpLeft:
0001385E 08E8 0000 0022             		bset	#0,$22(a0)
00013864 9045                       		sub.w	d5,d0
00013866 3206                       		move.w	d6,d1
00013868 4441                       		neg.w	d1
0001386A B041                       		cmp.w	d1,d0
0001386C                            		; bgt.s	loc_13278
0001386C                            		; move.w	d1,d0
0001386C 4E75                       		rts
0001386E                            
0001386E                            SonicCJD_JumpRight:
0001386E 08A8 0000 0022             		bclr	#0,$22(a0)
00013874 D045                       		add.w	d5,d0
00013876 B046                       		cmp.w	d6,d0
00013878 6D00                       		blt.s	Obj01_JumpMove
0001387A 3006                       		move.w	d6,d0
0001387C                            
0001387C                            Obj01_JumpMove:
0001387C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013880                            
00013880                            Obj01_ResetScr2:
00013880 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013886 6700                       		beq.s	loc_132A4	; if yes, branch
00013888 6400                       		bcc.s	loc_132A0
0001388A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001388E                            
0001388E                            loc_132A0:
0001388E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013892                            
00013892                            loc_132A4:
00013892 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013898 6500                       		bcs.s	locret_132D2	; if yes, branch
0001389A 3028 0010                  		move.w	$10(a0),d0
0001389E 3200                       		move.w	d0,d1
000138A0 EA41                       		asr.w	#5,d1
000138A2 6700                       		beq.s	locret_132D2
000138A4 6B00                       		bmi.s	loc_132C6
000138A6 9041                       		sub.w	d1,d0
000138A8 6400                       		bcc.s	loc_132C0
000138AA 303C 0000                  		move.w	#0,d0
000138AE                            
000138AE                            loc_132C0:
000138AE 3140 0010                  		move.w	d0,$10(a0)
000138B2 4E75                       		rts	
000138B4                            ; ===========================================================================
000138B4                            
000138B4                            loc_132C6:
000138B4 9041                       		sub.w	d1,d0
000138B6 6500                       		bcs.s	loc_132CE
000138B8 303C 0000                  		move.w	#0,d0
000138BC                            
000138BC                            loc_132CE:
000138BC 3140 0010                  		move.w	d0,$10(a0)
000138C0                            
000138C0                            locret_132D2:
000138C0 4E75                       		rts	
000138C2                            ; End of function Sonic_ChgJumpDir
000138C2                            
000138C2                            ; ===========================================================================
000138C2                            ; ---------------------------------------------------------------------------
000138C2                            ; Unused subroutine to squash Sonic
000138C2                            ; ---------------------------------------------------------------------------
000138C2 1028 0026                  		move.b	$26(a0),d0
000138C6 0600 0020                  		addi.b	#$20,d0
000138CA 0200 00C0                  		andi.b	#$C0,d0
000138CE 6600                       		bne.s	locret_13302
000138D0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138D4 4A41                       		tst.w	d1
000138D6 6A00                       		bpl.s	locret_13302
000138D8 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138DE 317C 0000 0010             		move.w	#0,$10(a0)
000138E4 317C 0000 0012             		move.w	#0,$12(a0)
000138EA 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138F0                            
000138F0                            locret_13302:
000138F0 4E75                       		rts	
000138F2                            ; ---------------------------------------------------------------------------
000138F2                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138F2                            ; ---------------------------------------------------------------------------
000138F2                            
000138F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138F2                            
000138F2                            
000138F2                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138F2 2228 0008                  		move.l	8(a0),d1
000138F6 3028 0010                  		move.w	$10(a0),d0
000138FA 48C0                       		ext.l	d0
000138FC E180                       		asl.l	#8,d0
000138FE D280                       		add.l	d0,d1
00013900 4841                       		swap	d1
00013902 3038 F728                  		move.w	($FFFFF728).w,d0
00013906 0640 0010                  		addi.w	#$10,d0
0001390A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001390C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001390E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013912 0640 0128                  		addi.w	#$128,d0
00013916 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001391A 6600                       		bne.s	loc_13332
0001391C 0640 0040                  		addi.w	#$40,d0
00013920                            
00013920                            loc_13332:
00013920 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013922 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013924                            
00013924                            loc_13336:
00013924 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013928 0640 00E0                  		addi.w	#$E0,d0
0001392C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013930 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013932 4E75                       		rts	
00013934                            ; ===========================================================================
00013934                            
00013934                            Boundary_Bottom:
00013934 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
0001393A 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001393E 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013944 6500 0000                  		bcs.w	KillSonic
00013948 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001394C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013952 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013958 4E75                       		rts	
0001395A                            ; ===========================================================================
0001395A                            
0001395A                            Boundary_Sides:
0001395A 3140 0008                  		move.w	d0,8(a0)
0001395E 317C 0000 000A             		move.w	#0,$A(a0)
00013964 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001396A 317C 0000 0014             		move.w	#0,$14(a0)
00013970 60B2                       		bra.s	loc_13336
00013972                            ; End of function Sonic_LevelBound
00013972                            
00013972                            ; ---------------------------------------------------------------------------
00013972                            ; Subroutine allowing Sonic to roll when he's moving
00013972                            ; ---------------------------------------------------------------------------
00013972                            
00013972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013972                            
00013972                            
00013972                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013972 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013976 6600                       		bne.s	Obj01_NoRoll
00013978 3028 0014                  		move.w	$14(a0),d0
0001397C 6A00                       		bpl.s	loc_13392
0001397E 4440                       		neg.w	d0
00013980                            
00013980                            loc_13392:
00013980 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013984 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013986 1038 F602                  		move.b	($FFFFF602).w,d0
0001398A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001398E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013990 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013996 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013998                            
00013998                            Obj01_NoRoll:
00013998 4E75                       		rts	
0001399A                            ; ===========================================================================
0001399A                            
0001399A                            Obj01_ChkRoll:
0001399A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000139A0 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000139A2 4E75                       		rts	
000139A4                            ; ===========================================================================
000139A4                            
000139A4                            Obj01_DoRoll:
000139A4 08E8 0002 0022             		bset	#2,$22(a0)
000139AA 117C 000E 0016             		move.b	#$E,$16(a0)
000139B0 117C 0007 0017             		move.b	#7,$17(a0)
000139B6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139BC 5A68 000C                  		addq.w	#5,$C(a0)
000139C0 303C 00BE                  		move.w	#$BE,d0
000139C4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
000139CA 4A68 0014                  		tst.w	$14(a0)
000139CE 6600                       		bne.s	locret_133E8
000139D0 317C 0200 0014             		move.w	#$200,$14(a0)
000139D6                            
000139D6                            locret_133E8:
000139D6 4E75                       		rts	
000139D8                            ; End of function Sonic_Roll
000139D8                            
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            ; Subroutine allowing Sonic to jump
000139D8                            ; ---------------------------------------------------------------------------
000139D8                            
000139D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139D8                            
000139D8                            
000139D8                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139D8 1038 F603                  		move.b	($FFFFF603).w,d0
000139DC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139E0 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139E4 7000                       		moveq	#0,d0
000139E6 1028 0026                  		move.b	$26(a0),d0
000139EA 0600 0080                  		addi.b	#$80,d0
000139EE 6100 0000                  		bsr.w	sub_14D48
000139F2 0C41 0006                  		cmpi.w	#6,d1
000139F6 6D00 0000                  		blt.w	locret_1348E
000139FA 343C 0680                  		move.w	#$680,d2
000139FE 0828 0006 0022             		btst	#6,$22(a0)
00013A04 6700                       		beq.s	loc_1341C
00013A06 343C 0380                  		move.w	#$380,d2
00013A0A                            
00013A0A                            loc_1341C:
00013A0A 7000                       		moveq	#0,d0
00013A0C 1028 0026                  		move.b	$26(a0),d0
00013A10 0400 0040                  		subi.b	#$40,d0
00013A14 4EB9 0000 2C22             		jsr	(CalcSine).l
00013A1A C3C2                       		muls.w	d2,d1
00013A1C E081                       		asr.l	#8,d1
00013A1E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013A22 C1C2                       		muls.w	d2,d0
00013A24 E080                       		asr.l	#8,d0
00013A26 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A2A 08E8 0001 0022             		bset	#1,$22(a0)
00013A30 08A8 0005 0022             		bclr	#5,$22(a0)
00013A36 588F                       		addq.l	#4,sp
00013A38 117C 0001 003C             		move.b	#1,$3C(a0)
00013A3E 4228 0038                  		clr.b	$38(a0)
00013A42 303C 00A0                  		move.w	#$A0,d0
00013A46 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A4C 117C 0013 0016             		move.b	#$13,$16(a0)
00013A52 117C 0009 0017             		move.b	#9,$17(a0)
00013A58 0828 0002 0022             		btst	#2,$22(a0)
00013A5E 6600                       		bne.s	loc_13490
00013A60 117C 000E 0016             		move.b	#$E,$16(a0)
00013A66 117C 0007 0017             		move.b	#7,$17(a0)
00013A6C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A72 08E8 0002 0022             		bset	#2,$22(a0)
00013A78 5A68 000C                  		addq.w	#5,$C(a0)
00013A7C                            
00013A7C                            locret_1348E:
00013A7C 4E75                       		rts	
00013A7E                            ; ===========================================================================
00013A7E                            
00013A7E                            loc_13490:
00013A7E 08E8 0004 0022             		bset	#4,$22(a0)
00013A84 4E75                       		rts	
00013A86                            ; End of function Sonic_Jump
00013A86                            
00013A86                            
00013A86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A86                            
00013A86                            
00013A86                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A86 4A28 003C                  		tst.b	$3C(a0)
00013A8A 6700                       		beq.s	loc_134C4
00013A8C 323C FC00                  		move.w	#-$400,d1
00013A90 0828 0006 0022             		btst	#6,$22(a0)
00013A96 6700                       		beq.s	loc_134AE
00013A98 323C FE00                  		move.w	#-$200,d1
00013A9C                            
00013A9C                            loc_134AE:
00013A9C B268 0012                  		cmp.w	$12(a0),d1
00013AA0 6F00                       		ble.s	locret_134C2
00013AA2 1038 F602                  		move.b	($FFFFF602).w,d0
00013AA6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013AAA 6600                       		bne.s	locret_134C2	; if yes, branch
00013AAC 3141 0012                  		move.w	d1,$12(a0)
00013AB0                            
00013AB0                            locret_134C2:
00013AB0 4E75                       		rts	
00013AB2                            ; ===========================================================================
00013AB2                            
00013AB2                            loc_134C4:
00013AB2 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013AB8 6C00                       		bge.s	locret_134D2
00013ABA 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013AC0                            
00013AC0                            locret_134D2:
00013AC0 4E75                       		rts	
00013AC2                            ; End of function Sonic_JumpHeight
00013AC2                            
00013AC2                            ; ---------------------------------------------------------------------------
00013AC2                            ; Subroutine to	slow Sonic walking up a	slope
00013AC2                            ; ---------------------------------------------------------------------------
00013AC2                            
00013AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC2                            
00013AC2                            
00013AC2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013AC2 1028 0026                  		move.b	$26(a0),d0
00013AC6 0600 0060                  		addi.b	#$60,d0
00013ACA 0C00 00C0                  		cmpi.b	#$C0,d0
00013ACE 6400                       		bcc.s	locret_13508
00013AD0 1028 0026                  		move.b	$26(a0),d0
00013AD4 4EB9 0000 2C22             		jsr	(CalcSine).l
00013ADA C1FC 0020                  		muls.w	#$20,d0
00013ADE E080                       		asr.l	#8,d0
00013AE0 4A68 0014                  		tst.w	$14(a0)
00013AE4 6700                       		beq.s	locret_13508
00013AE6 6B00                       		bmi.s	loc_13504
00013AE8 4A40                       		tst.w	d0
00013AEA 6700                       		beq.s	locret_13502
00013AEC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013AF0                            
00013AF0                            locret_13502:
00013AF0 4E75                       		rts	
00013AF2                            ; ===========================================================================
00013AF2                            
00013AF2                            loc_13504:
00013AF2 D168 0014                  		add.w	d0,$14(a0)
00013AF6                            
00013AF6                            locret_13508:
00013AF6 4E75                       		rts	
00013AF8                            ; End of function Sonic_SlopeResist
00013AF8                            
00013AF8                            ; ---------------------------------------------------------------------------
00013AF8                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013AF8                            ; ---------------------------------------------------------------------------
00013AF8                            
00013AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AF8                            
00013AF8                            
00013AF8                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013AF8 1028 0026                  		move.b	$26(a0),d0
00013AFC 0600 0060                  		addi.b	#$60,d0
00013B00 0C00 00C0                  		cmpi.b	#-$40,d0
00013B04 6400                       		bcc.s	locret_13544
00013B06 1028 0026                  		move.b	$26(a0),d0
00013B0A 4EB9 0000 2C22             		jsr	(CalcSine).l
00013B10 C1FC 0050                  		muls.w	#$50,d0
00013B14 E080                       		asr.l	#8,d0
00013B16 4A68 0014                  		tst.w	$14(a0)
00013B1A 6B00                       		bmi.s	loc_1353A
00013B1C 4A40                       		tst.w	d0
00013B1E 6A00                       		bpl.s	loc_13534
00013B20 E480                       		asr.l	#2,d0
00013B22                            
00013B22                            loc_13534:
00013B22 D168 0014                  		add.w	d0,$14(a0)
00013B26 4E75                       		rts	
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            loc_1353A:
00013B28 4A40                       		tst.w	d0
00013B2A 6B00                       		bmi.s	loc_13540
00013B2C E480                       		asr.l	#2,d0
00013B2E                            
00013B2E                            loc_13540:
00013B2E D168 0014                  		add.w	d0,$14(a0)
00013B32                            
00013B32                            locret_13544:
00013B32 4E75                       		rts	
00013B34                            ; End of function Sonic_RollRepel
00013B34                            
00013B34                            ; ---------------------------------------------------------------------------
00013B34                            ; Subroutine to	push Sonic down	a slope
00013B34                            ; ---------------------------------------------------------------------------
00013B34                            
00013B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B34                            
00013B34                            
00013B34                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B34 4E71                       		nop	
00013B36 4A28 0038                  		tst.b	$38(a0)
00013B3A 6600                       		bne.s	locret_13580
00013B3C 4A68 003E                  		tst.w	$3E(a0)
00013B40 6600                       		bne.s	loc_13582
00013B42 1028 0026                  		move.b	$26(a0),d0
00013B46 0600 0020                  		addi.b	#$20,d0
00013B4A 0200 00C0                  		andi.b	#$C0,d0
00013B4E 6700                       		beq.s	locret_13580
00013B50 3028 0014                  		move.w	$14(a0),d0
00013B54 6A00                       		bpl.s	loc_1356A
00013B56 4440                       		neg.w	d0
00013B58                            
00013B58                            loc_1356A:
00013B58 0C40 0280                  		cmpi.w	#$280,d0
00013B5C 6400                       		bcc.s	locret_13580
00013B5E 4268 0014                  		clr.w	$14(a0)
00013B62 08E8 0001 0022             		bset	#1,$22(a0)
00013B68 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B6E                            
00013B6E                            locret_13580:
00013B6E 4E75                       		rts	
00013B70                            ; ===========================================================================
00013B70                            
00013B70                            loc_13582:
00013B70 5368 003E                  		subq.w	#1,$3E(a0)
00013B74 4E75                       		rts	
00013B76                            ; End of function Sonic_SlopeRepel
00013B76                            
00013B76                            ; ---------------------------------------------------------------------------
00013B76                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B76                            ; ---------------------------------------------------------------------------
00013B76                            
00013B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B76                            
00013B76                            
00013B76                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B76 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B7A 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B7C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B7E                            
00013B7E 5400                       		addq.b	#2,d0		; increase angle
00013B80 6400                       		bcc.s	loc_13596
00013B82 7000                       		moveq	#0,d0
00013B84                            
00013B84                            loc_13596:
00013B84 6000                       		bra.s	loc_1359E
00013B86                            ; ===========================================================================
00013B86                            
00013B86                            loc_13598:
00013B86 5500                       		subq.b	#2,d0		; decrease angle
00013B88 6400                       		bcc.s	loc_1359E
00013B8A 7000                       		moveq	#0,d0
00013B8C                            
00013B8C                            loc_1359E:
00013B8C 1140 0026                  		move.b	d0,$26(a0)
00013B90                            
00013B90                            locret_135A2:
00013B90 4E75                       		rts	
00013B92                            ; End of function Sonic_JumpAngle
00013B92                            
00013B92                            ; ---------------------------------------------------------------------------
00013B92                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013B92                            ; ---------------------------------------------------------------------------
00013B92                            
00013B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B92                            
00013B92                            
00013B92                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013B92 3228 0010                  		move.w	$10(a0),d1
00013B96 3428 0012                  		move.w	$12(a0),d2
00013B9A 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013BA0 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013BA4 0400 0020                  		subi.b	#$20,d0
00013BA8 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013BAC 0200 00C0                  		andi.b	#$C0,d0
00013BB0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013BB4 0C00 0040                  		cmpi.b	#$40,d0
00013BB8 6700 0000                  		beq.w	loc_13680
00013BBC 0C00 0080                  		cmpi.b	#$80,d0
00013BC0 6700 0000                  		beq.w	loc_136E2
00013BC4 0C00 00C0                  		cmpi.b	#-$40,d0
00013BC8 6700 0000                  		beq.w	loc_1373E
00013BCC 6100 0000                  		bsr.w	Sonic_HitWall
00013BD0 4A41                       		tst.w	d1
00013BD2 6A00                       		bpl.s	loc_135F0
00013BD4 9368 0008                  		sub.w	d1,8(a0)
00013BD8 317C 0000 0010             		move.w	#0,$10(a0)
00013BDE                            
00013BDE                            loc_135F0:
00013BDE 6100 0000                  		bsr.w	sub_14EB4
00013BE2 4A41                       		tst.w	d1
00013BE4 6A00                       		bpl.s	loc_13602
00013BE6 D368 0008                  		add.w	d1,8(a0)
00013BEA 317C 0000 0010             		move.w	#0,$10(a0)
00013BF0                            
00013BF0                            loc_13602:
00013BF0 6100 0000                  		bsr.w	Sonic_HitFloor
00013BF4 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013BF8 4A41                       		tst.w	d1
00013BFA 6A00                       		bpl.s	locret_1367E
00013BFC 1428 0012                  		move.b	$12(a0),d2
00013C00 5002                       		addq.b	#8,d2
00013C02 4402                       		neg.b	d2
00013C04 B202                       		cmp.b	d2,d1
00013C06 6C00                       		bge.s	loc_1361E
00013C08 B002                       		cmp.b	d2,d0
00013C0A 6D00                       		blt.s	locret_1367E
00013C0C                            
00013C0C                            loc_1361E:
00013C0C D368 000C                  		add.w	d1,$C(a0)
00013C10 1143 0026                  		move.b	d3,$26(a0)
00013C14 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C18 117C 0000 001C             		move.b	#0,$1C(a0)
00013C1E 1003                       		move.b	d3,d0
00013C20 0600 0020                  		addi.b	#$20,d0
00013C24 0200 0040                  		andi.b	#$40,d0
00013C28 6600                       		bne.s	loc_1365C
00013C2A 1003                       		move.b	d3,d0
00013C2C 0600 0010                  		addi.b	#$10,d0
00013C30 0200 0020                  		andi.b	#$20,d0
00013C34 6700                       		beq.s	loc_1364E
00013C36 E0E8 0012                  		asr	$12(a0)
00013C3A 6000                       		bra.s	loc_13670
00013C3C                            ; ===========================================================================
00013C3C                            
00013C3C                            loc_1364E:
00013C3C 317C 0000 0012             		move.w	#0,$12(a0)
00013C42 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C48 4E75                       		rts	
00013C4A                            ; ===========================================================================
00013C4A                            
00013C4A                            loc_1365C:
00013C4A 317C 0000 0010             		move.w	#0,$10(a0)
00013C50 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C56 6F00                       		ble.s	loc_13670
00013C58 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C5E                            
00013C5E                            loc_13670:
00013C5E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C64 4A03                       		tst.b	d3
00013C66 6A00                       		bpl.s	locret_1367E
00013C68 4468 0014                  		neg.w	$14(a0)
00013C6C                            
00013C6C                            locret_1367E:
00013C6C 4E75                       		rts	
00013C6E                            ; ===========================================================================
00013C6E                            
00013C6E                            loc_13680:
00013C6E 6100 0000                  		bsr.w	Sonic_HitWall
00013C72 4A41                       		tst.w	d1
00013C74 6A00                       		bpl.s	loc_1369A
00013C76 9368 0008                  		sub.w	d1,8(a0)
00013C7A 317C 0000 0010             		move.w	#0,$10(a0)
00013C80 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C86 4E75                       		rts	
00013C88                            ; ===========================================================================
00013C88                            
00013C88                            loc_1369A:
00013C88 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C8C 4A41                       		tst.w	d1
00013C8E 6A00                       		bpl.s	loc_136B4
00013C90 9368 000C                  		sub.w	d1,$C(a0)
00013C94 4A68 0012                  		tst.w	$12(a0)
00013C98 6A00                       		bpl.s	locret_136B2
00013C9A 317C 0000 0012             		move.w	#0,$12(a0)
00013CA0                            
00013CA0                            locret_136B2:
00013CA0 4E75                       		rts	
00013CA2                            ; ===========================================================================
00013CA2                            
00013CA2                            loc_136B4:
00013CA2 4A68 0012                  		tst.w	$12(a0)
00013CA6 6B00                       		bmi.s	locret_136E0
00013CA8 6100 0000                  		bsr.w	Sonic_HitFloor
00013CAC 4A41                       		tst.w	d1
00013CAE 6A00                       		bpl.s	locret_136E0
00013CB0 D368 000C                  		add.w	d1,$C(a0)
00013CB4 1143 0026                  		move.b	d3,$26(a0)
00013CB8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CBC 117C 0000 001C             		move.b	#0,$1C(a0)
00013CC2 317C 0000 0012             		move.w	#0,$12(a0)
00013CC8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CCE                            
00013CCE                            locret_136E0:
00013CCE 4E75                       		rts	
00013CD0                            ; ===========================================================================
00013CD0                            
00013CD0                            loc_136E2:
00013CD0 6100 0000                  		bsr.w	Sonic_HitWall
00013CD4 4A41                       		tst.w	d1
00013CD6 6A00                       		bpl.s	loc_136F4
00013CD8 9368 0008                  		sub.w	d1,8(a0)
00013CDC 317C 0000 0010             		move.w	#0,$10(a0)
00013CE2                            
00013CE2                            loc_136F4:
00013CE2 6100 0000                  		bsr.w	sub_14EB4
00013CE6 4A41                       		tst.w	d1
00013CE8 6A00                       		bpl.s	loc_13706
00013CEA D368 0008                  		add.w	d1,8(a0)
00013CEE 317C 0000 0010             		move.w	#0,$10(a0)
00013CF4                            
00013CF4                            loc_13706:
00013CF4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CF8 4A41                       		tst.w	d1
00013CFA 6A00                       		bpl.s	locret_1373C
00013CFC 9368 000C                  		sub.w	d1,$C(a0)
00013D00 1003                       		move.b	d3,d0
00013D02 0600 0020                  		addi.b	#$20,d0
00013D06 0200 0040                  		andi.b	#$40,d0
00013D0A 6600                       		bne.s	loc_13726
00013D0C 317C 0000 0012             		move.w	#0,$12(a0)
00013D12 4E75                       		rts	
00013D14                            ; ===========================================================================
00013D14                            
00013D14                            loc_13726:
00013D14 1143 0026                  		move.b	d3,$26(a0)
00013D18 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D1C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D22 4A03                       		tst.b	d3
00013D24 6A00                       		bpl.s	locret_1373C
00013D26 4468 0014                  		neg.w	$14(a0)
00013D2A                            
00013D2A                            locret_1373C:
00013D2A 4E75                       		rts	
00013D2C                            ; ===========================================================================
00013D2C                            
00013D2C                            loc_1373E:
00013D2C 6100 0000                  		bsr.w	sub_14EB4
00013D30 4A41                       		tst.w	d1
00013D32 6A00                       		bpl.s	loc_13758
00013D34 D368 0008                  		add.w	d1,8(a0)
00013D38 317C 0000 0010             		move.w	#0,$10(a0)
00013D3E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D44 4E75                       		rts	
00013D46                            ; ===========================================================================
00013D46                            
00013D46                            loc_13758:
00013D46 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D4A 4A41                       		tst.w	d1
00013D4C 6A00                       		bpl.s	loc_13772
00013D4E 9368 000C                  		sub.w	d1,$C(a0)
00013D52 4A68 0012                  		tst.w	$12(a0)
00013D56 6A00                       		bpl.s	locret_13770
00013D58 317C 0000 0012             		move.w	#0,$12(a0)
00013D5E                            
00013D5E                            locret_13770:
00013D5E 4E75                       		rts	
00013D60                            ; ===========================================================================
00013D60                            
00013D60                            loc_13772:
00013D60 4A68 0012                  		tst.w	$12(a0)
00013D64 6B00                       		bmi.s	locret_1379E
00013D66 6100 0000                  		bsr.w	Sonic_HitFloor
00013D6A 4A41                       		tst.w	d1
00013D6C 6A00                       		bpl.s	locret_1379E
00013D6E D368 000C                  		add.w	d1,$C(a0)
00013D72 1143 0026                  		move.b	d3,$26(a0)
00013D76 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D7A 117C 0000 001C             		move.b	#0,$1C(a0)
00013D80 317C 0000 0012             		move.w	#0,$12(a0)
00013D86 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D8C                            
00013D8C                            locret_1379E:
00013D8C 4E75                       		rts	
00013D8E                            ; End of function Sonic_Floor
00013D8E                            
00013D8E                            ; ---------------------------------------------------------------------------
00013D8E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D8E                            ; ---------------------------------------------------------------------------
00013D8E                            
00013D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D8E                            
00013D8E                            
00013D8E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D8E 0828 0004 0022             		btst	#4,$22(a0)
00013D94 6700                       		beq.s	loc_137AE
00013D96 4E71                       		nop	
00013D98 4E71                       		nop	
00013D9A 4E71                       		nop	
00013D9C                            
00013D9C                            loc_137AE:
00013D9C 08A8 0005 0022             		bclr	#5,$22(a0)
00013DA2 08A8 0001 0022             		bclr	#1,$22(a0)
00013DA8 08A8 0004 0022             		bclr	#4,$22(a0)
00013DAE 0828 0002 0022             		btst	#2,$22(a0)
00013DB4 6700                       		beq.s	loc_137E4
00013DB6 08A8 0002 0022             		bclr	#2,$22(a0)
00013DBC 117C 0013 0016             		move.b	#$13,$16(a0)
00013DC2 117C 0009 0017             		move.b	#9,$17(a0)
00013DC8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DCE 5B68 000C                  		subq.w	#5,$C(a0)
00013DD2                            
00013DD2                            loc_137E4:
00013DD2 117C 0000 003C             		move.b	#0,$3C(a0)
00013DD8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DDE 4E75                       		rts	
00013DE0                            ; End of function Sonic_ResetOnFloor
00013DE0                            
00013DE0                            ; ===========================================================================
00013DE0                            ; ---------------------------------------------------------------------------
00013DE0                            ; Sonic	when he	gets hurt
00013DE0                            ; ---------------------------------------------------------------------------
00013DE0                            
00013DE0                            Obj01_Hurt:				; XREF: Obj01_Index
00013DE0 4EBA 9DAC                  		jsr	SpeedToPos
00013DE4 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DEA 0828 0006 0022             		btst	#6,$22(a0)
00013DF0 6700                       		beq.s	loc_1380C
00013DF2 0468 0020 0012             		subi.w	#$20,$12(a0)
00013DF8                            
00013DF8                            loc_1380C:
00013DF8 6100 0000                  		bsr.w	Sonic_HurtStop
00013DFC 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013E00 6100 F506                  		bsr.w	Sonic_RecordPos
00013E04 6100 0000                  		bsr.w	Sonic_Animate
00013E08 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E0C 4EFA 9DA6                  		jmp	DisplaySprite
00013E10                            
00013E10                            ; ---------------------------------------------------------------------------
00013E10                            ; Subroutine to	stop Sonic falling after he's been hurt
00013E10                            ; ---------------------------------------------------------------------------
00013E10                            
00013E10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E10                            
00013E10                            
00013E10                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013E10 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E14 0640 00E0                  		addi.w	#$E0,d0
00013E18 B068 000C                  		cmp.w	$C(a0),d0
00013E1C 6500 0000                  		bcs.w	KillSonic
00013E20 6100 FD70                  		bsr.w	Sonic_Floor
00013E24 0828 0001 0022             		btst	#1,$22(a0)
00013E2A 6600                       		bne.s	locret_13860
00013E2C 7000                       		moveq	#0,d0
00013E2E 3140 0012                  		move.w	d0,$12(a0)
00013E32 3140 0010                  		move.w	d0,$10(a0)
00013E36 3140 0014                  		move.w	d0,$14(a0)
00013E3A 117C 0000 001C             		move.b	#0,$1C(a0)
00013E40 5528 0024                  		subq.b	#2,$24(a0)
00013E44 317C 0078 0030             		move.w	#$78,$30(a0)
00013E4A                            
00013E4A                            locret_13860:
00013E4A 4E75                       		rts	
00013E4C                            ; End of function Sonic_HurtStop
00013E4C                            
00013E4C                            ; ===========================================================================
00013E4C                            ; ---------------------------------------------------------------------------
00013E4C                            ; Sonic	when he	dies
00013E4C                            ; ---------------------------------------------------------------------------
00013E4C                            
00013E4C                            Obj01_Death:				; XREF: Obj01_Index
00013E4C 6100 0000                  		bsr.w	GameOver
00013E50 4EBA 9D10                  		jsr	ObjectFall
00013E54 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013E58 6100 0000                  		bsr.w	Sonic_Animate
00013E5C 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E60 4EFA 9D52                  		jmp	DisplaySprite
00013E64                            
00013E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E64                            
00013E64                            
00013E64                            GameOver:				; XREF: Obj01_Death
00013E64 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E68 0640 0100                  		addi.w	#$100,d0
00013E6C B068 000C                  		cmp.w	$C(a0),d0
00013E70 6400 0000                  		bcc.w	locret_13900
00013E74 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E7A 5428 0024                  		addq.b	#2,$24(a0)
00013E7E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E82 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E86 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E8A 6600                       		bne.s	loc_138D4
00013E8C 317C 0000 003A             		move.w	#0,$3A(a0)
00013E92 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013E98 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013E9E 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013EA4 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013EA8                            
00013EA8                            loc_138C2:
00013EA8 303C 008F                  		move.w	#$8F,d0
00013EAC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013EB2 7003                       		moveq	#3,d0
00013EB4 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013EBA                            ; ===========================================================================
00013EBA                            
00013EBA                            loc_138D4:
00013EBA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013EC0 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013EC4 6700                       		beq.s	locret_13900	; if not, branch
00013EC6 317C 0000 003A             		move.w	#0,$3A(a0)
00013ECC 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013ED2 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013ED8 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013EDE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013EE4 60C2                       		bra.s	loc_138C2
00013EE6                            ; ===========================================================================
00013EE6                            
00013EE6                            locret_13900:
00013EE6 4E75                       		rts	
00013EE8                            ; End of function GameOver
00013EE8                            
00013EE8                            ; ===========================================================================
00013EE8                            ; ---------------------------------------------------------------------------
00013EE8                            ; Sonic	when the level is restarted
00013EE8                            ; ---------------------------------------------------------------------------
00013EE8                            
00013EE8                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EE8 4A68 003A                  		tst.w	$3A(a0)
00013EEC 6700                       		beq.s	locret_13914
00013EEE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013EF2 6600                       		bne.s	locret_13914
00013EF4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013EFA                            
00013EFA                            locret_13914:
00013EFA 4E75                       		rts	
00013EFC                            
00013EFC                            ; ---------------------------------------------------------------------------
00013EFC                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013EFC                            ; ---------------------------------------------------------------------------
00013EFC                            
00013EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EFC                            
00013EFC                            
00013EFC                            Sonic_Loops:				; XREF: Obj01_Control
00013EFC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013F02 6700                       		beq.s	loc_13926	; if yes, branch
00013F04 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013F08 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013F0C                            
00013F0C                            loc_13926:
00013F0C 3028 000C                  		move.w	$C(a0),d0
00013F10 E248                       		lsr.w	#1,d0
00013F12 0240 0380                  		andi.w	#$380,d0
00013F16 1228 0008                  		move.b	8(a0),d1
00013F1A 0241 007F                  		andi.w	#$7F,d1
00013F1E D041                       		add.w	d1,d0
00013F20 43F8 A400                  		lea	($FFFFA400).w,a1
00013F24 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F28 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F2C 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013F30 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F34 6700 FA64                  		beq.w	Obj01_ChkRoll
00013F38 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F3C 6700                       		beq.s	loc_13976
00013F3E B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F42 6700                       		beq.s	loc_13966
00013F44 08A8 0006 0001             		bclr	#6,1(a0)
00013F4A 4E75                       		rts	
00013F4C                            ; ===========================================================================
00013F4C                            
00013F4C                            loc_13966:
00013F4C 0828 0001 0022             		btst	#1,$22(a0)
00013F52 6700                       		beq.s	loc_13976
00013F54 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F5A 4E75                       		rts	
00013F5C                            ; ===========================================================================
00013F5C                            
00013F5C                            loc_13976:
00013F5C 3428 0008                  		move.w	8(a0),d2
00013F60 0C02 002C                  		cmpi.b	#$2C,d2
00013F64 6400                       		bcc.s	loc_13988
00013F66 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F6C 4E75                       		rts	
00013F6E                            ; ===========================================================================
00013F6E                            
00013F6E                            loc_13988:
00013F6E 0C02 00E0                  		cmpi.b	#-$20,d2
00013F72 6500                       		bcs.s	loc_13996
00013F74 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F7A 4E75                       		rts	
00013F7C                            ; ===========================================================================
00013F7C                            
00013F7C                            loc_13996:
00013F7C 0828 0006 0001             		btst	#6,1(a0)
00013F82 6600                       		bne.s	loc_139B2
00013F84 1228 0026                  		move.b	$26(a0),d1
00013F88 6700                       		beq.s	locret_139C2
00013F8A 0C01 0080                  		cmpi.b	#-$80,d1
00013F8E 6200                       		bhi.s	locret_139C2
00013F90 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F96 4E75                       		rts	
00013F98                            ; ===========================================================================
00013F98                            
00013F98                            loc_139B2:
00013F98 1228 0026                  		move.b	$26(a0),d1
00013F9C 0C01 0080                  		cmpi.b	#-$80,d1
00013FA0 6300                       		bls.s	locret_139C2
00013FA2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FA8                            
00013FA8                            locret_139C2:
00013FA8 4E75                       		rts	
00013FAA                            ; End of function Sonic_Loops
00013FAA                            
00013FAA                            ; ---------------------------------------------------------------------------
00013FAA                            ; Subroutine to	animate	Sonic's sprites
00013FAA                            ; ---------------------------------------------------------------------------
00013FAA                            
00013FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FAA                            
00013FAA                            
00013FAA                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013FAA 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013FB0 7000                       		moveq	#0,d0
00013FB2 1028 001C                  		move.b	$1C(a0),d0
00013FB6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013FBA 6700                       		beq.s	SAnim_Do	; if not, branch
00013FBC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013FC0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013FC6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FCC                            
00013FCC                            SAnim_Do:
00013FCC D040                       		add.w	d0,d0
00013FCE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FD2 1011                       		move.b	(a1),d0
00013FD4 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FD6 1228 0022                  		move.b	$22(a0),d1
00013FDA 0201 0001                  		andi.b	#1,d1
00013FDE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FE4 8328 0001                  		or.b	d1,1(a0)
00013FE8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FEC 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FEE 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013FF2                            
00013FF2                            SAnim_Do2:
00013FF2 7200                       		moveq	#0,d1
00013FF4 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013FF8 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013FFC 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013FFE                            
00013FFE                            SAnim_Next:
00013FFE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014002 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014006                            
00014006                            SAnim_Delay:
00014006 4E75                       		rts	
00014008                            ; ===========================================================================
00014008                            
00014008                            SAnim_End_FF:
00014008 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001400A 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001400C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014012 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014016 60E6                       		bra.s	SAnim_Next
00014018                            ; ===========================================================================
00014018                            
00014018                            SAnim_End_FE:
00014018 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001401A 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001401C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014020 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014024 9200                       		sub.b	d0,d1
00014026 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001402A 60D2                       		bra.s	SAnim_Next
0001402C                            ; ===========================================================================
0001402C                            
0001402C                            SAnim_End_FD:
0001402C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001402E 6600                       		bne.s	SAnim_End	; if not, branch
00014030 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014036                            
00014036                            SAnim_End:
00014036 4E75                       		rts	
00014038                            ; ===========================================================================
00014038                            
00014038                            SAnim_WalkRun:				; XREF: SAnim_Do
00014038 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001403C 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001403E 5200                       		addq.b	#1,d0		; is animation walking/running?
00014040 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014044 7200                       		moveq	#0,d1
00014046 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001404A 1428 0022                  		move.b	$22(a0),d2
0001404E 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014052 6600                       		bne.s	loc_13A70	; if yes, branch
00014054 4600                       		not.b	d0		; reverse angle
00014056                            
00014056                            loc_13A70:
00014056 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001405A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001405C 7203                       		moveq	#3,d1
0001405E                            
0001405E                            loc_13A78:
0001405E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014064 B302                       		eor.b	d1,d2
00014066 8528 0001                  		or.b	d2,1(a0)
0001406A 0828 0005 0022             		btst	#5,$22(a0)
00014070 6600 0000                  		bne.w	SAnim_Push
00014074 E808                       		lsr.b	#4,d0		; divide angle by $10
00014076 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001407A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001407E 6A00                       		bpl.s	loc_13A9C
00014080 4442                       		neg.w	d2
00014082                            
00014082                            loc_13A9C:
00014082 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014088 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001408C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001408E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014094 1200                       		move.b	d0,d1
00014096 E209                       		lsr.b	#1,d1
00014098 D001                       		add.b	d1,d0
0001409A                            
0001409A                            loc_13AB4:
0001409A D000                       		add.b	d0,d0
0001409C 1600                       		move.b	d0,d3
0001409E 4442                       		neg.w	d2
000140A0 0642 0800                  		addi.w	#$800,d2
000140A4 6A00                       		bpl.s	loc_13AC2
000140A6 7400                       		moveq	#0,d2
000140A8                            
000140A8                            loc_13AC2:
000140A8 E04A                       		lsr.w	#8,d2
000140AA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140AE 6100 FF42                  		bsr.w	SAnim_Do2
000140B2 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000140B6 4E75                       		rts	
000140B8                            ; ===========================================================================
000140B8                            
000140B8                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000140B8 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000140BA 6600                       		bne.s	SAnim_Push	; if not, branch
000140BC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140C0 6A00                       		bpl.s	loc_13ADE
000140C2 4442                       		neg.w	d2
000140C4                            
000140C4                            loc_13ADE:
000140C4 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000140CA 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140CE 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140D0 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140D6                            
000140D6                            loc_13AF0:
000140D6 4442                       		neg.w	d2
000140D8 0642 0400                  		addi.w	#$400,d2
000140DC 6A00                       		bpl.s	loc_13AFA
000140DE 7400                       		moveq	#0,d2
000140E0                            
000140E0                            loc_13AFA:
000140E0 E04A                       		lsr.w	#8,d2
000140E2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140E6 1228 0022                  		move.b	$22(a0),d1
000140EA 0201 0001                  		andi.b	#1,d1
000140EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140F4 8328 0001                  		or.b	d1,1(a0)
000140F8 6000 FEF8                  		bra.w	SAnim_Do2
000140FC                            ; ===========================================================================
000140FC                            
000140FC                            SAnim_Push:				; XREF: SAnim_RollJump
000140FC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014100 6B00                       		bmi.s	loc_13B1E
00014102 4442                       		neg.w	d2
00014104                            
00014104                            loc_13B1E:
00014104 0642 0800                  		addi.w	#$800,d2
00014108 6A00                       		bpl.s	loc_13B26
0001410A 7400                       		moveq	#0,d2
0001410C                            
0001410C                            loc_13B26:
0001410C EC4A                       		lsr.w	#6,d2
0001410E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014112 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014118 1228 0022                  		move.b	$22(a0),d1
0001411C 0201 0001                  		andi.b	#1,d1
00014120 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014126 8328 0001                  		or.b	d1,1(a0)
0001412A 6000 FEC6                  		bra.w	SAnim_Do2
0001412E                            ; End of function Sonic_Animate
0001412E                            
0001412E                            ; ===========================================================================
0001412E                            SonicAniData:
0001412E                            	include "_anim\Sonic.asm"
0001412E                            ; ---------------------------------------------------------------------------
0001412E                            ; Animation script - Sonic
0001412E                            ; ---------------------------------------------------------------------------
0001412E 0000                       		dc.w SonAni_Walk-SonicAniData
00014130 0000                       		dc.w SonAni_Run-SonicAniData
00014132 0000                       		dc.w SonAni_Roll-SonicAniData
00014134 0000                       		dc.w SonAni_Roll2-SonicAniData
00014136 0000                       		dc.w SonAni_Push-SonicAniData
00014138 0000                       		dc.w SonAni_Wait-SonicAniData
0001413A 0000                       		dc.w SonAni_Balance-SonicAniData
0001413C 0000                       		dc.w SonAni_LookUp-SonicAniData
0001413E 0000                       		dc.w SonAni_Duck-SonicAniData
00014140 0000                       		dc.w SonAni_Warp1-SonicAniData
00014142 0000                       		dc.w SonAni_Warp2-SonicAniData
00014144 0000                       		dc.w SonAni_Warp3-SonicAniData
00014146 0000                       		dc.w SonAni_Warp4-SonicAniData
00014148 0000                       		dc.w SonAni_Stop-SonicAniData
0001414A 0000                       		dc.w SonAni_Float1-SonicAniData
0001414C 0000                       		dc.w SonAni_Float2-SonicAniData
0001414E 0000                       		dc.w SonAni_Spring-SonicAniData
00014150 0000                       		dc.w SonAni_LZHang-SonicAniData
00014152 0000                       		dc.w SonAni_Leap1-SonicAniData
00014154 0000                       		dc.w SonAni_Leap2-SonicAniData
00014156 0000                       		dc.w SonAni_Surf-SonicAniData
00014158 0000                       		dc.w SonAni_Bubble-SonicAniData
0001415A 0000                       		dc.w SonAni_Death1-SonicAniData
0001415C 0000                       		dc.w SonAni_Drown-SonicAniData
0001415E 0000                       		dc.w SonAni_Death2-SonicAniData
00014160 0000                       		dc.w SonAni_Shrink-SonicAniData
00014162 0000                       		dc.w SonAni_Hurt-SonicAniData
00014164 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014166 0000                       		dc.w SonAni_Blank-SonicAniData
00014168 0000                       		dc.w SonAni_Float3-SonicAniData
0001416A 0000                       		dc.w SonAni_Float4-SonicAniData
0001416C FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00014174 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001417C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014184 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001418C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014194 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000141AA 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
000141AE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000141B2 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000141B6 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000141BA 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000141BE 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000141C2 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000141C6 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141CA 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141CE 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141D6 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141DA 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141DE 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141E4 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141EA 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141EE 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000141F6 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000141FA 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000141FE 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014202 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001420C 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00014210 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014214 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014218 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014220 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014224                            		even
00014224                            		even
00014224                            
00014224                            ; ---------------------------------------------------------------------------
00014224                            ; Sonic	pattern	loading	subroutine
00014224                            ; ---------------------------------------------------------------------------
00014224                            
00014224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014224                            
00014224                            
00014224                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014224 7000                       		moveq	#0,d0
00014226 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001422A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001422E 6700                       		beq.s	locret_13C96
00014230 11C0 F766                  		move.b	d0,($FFFFF766).w
00014234 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001423A D040                       		add.w	d0,d0
0001423C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014240 7200                       		moveq	#0,d1
00014242 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014244 5301                       		subq.b	#1,d1
00014246 6B00                       		bmi.s	locret_13C96
00014248 47F8 C800                  		lea	($FFFFC800).w,a3
0001424C 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014252                            
00014252                            SPLC_ReadEntry:
00014252 7400                       		moveq	#0,d2
00014254 141A                       		move.b	(a2)+,d2
00014256 3002                       		move.w	d2,d0
00014258 E808                       		lsr.b	#4,d0
0001425A E14A                       		lsl.w	#8,d2
0001425C 141A                       		move.b	(a2)+,d2
0001425E EB4A                       		lsl.w	#5,d2
00014260 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014266 D3C2                       		adda.l	d2,a1
00014268                            
00014268                            SPLC_LoadTile:
00014268 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001426C 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014270 47EB 0020                  		lea	$20(a3),a3	; next tile
00014274 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014278                            
00014278 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001427C                            
0001427C                            locret_13C96:
0001427C 4E75                       		rts	
0001427E                            ; End of function LoadSonicDynPLC
0001427E                            
0001427E                            ; ===========================================================================
0001427E                            ; ---------------------------------------------------------------------------
0001427E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001427E                            ; ---------------------------------------------------------------------------
0001427E                            
0001427E                            Obj0A:					; XREF: Obj_Index
0001427E 7000                       		moveq	#0,d0
00014280 1028 0024                  		move.b	$24(a0),d0
00014284 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014288 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001428C                            ; ===========================================================================
0001428C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014290 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014294 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014298 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001429C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001429E                            ; ===========================================================================
0001429E                            
0001429E                            Obj0A_Main:				; XREF: Obj0A_Index
0001429E 5428 0024                  		addq.b	#2,$24(a0)
000142A2 217C 0001 2F46 0004        		move.l	#Map_obj64,4(a0)
000142AA 317C 8348 0002             		move.w	#$8348,2(a0)
000142B0 117C 0084 0001             		move.b	#$84,1(a0)
000142B6 117C 0010 0019             		move.b	#$10,$19(a0)
000142BC 117C 0001 0018             		move.b	#1,$18(a0)
000142C2 1028 0028                  		move.b	$28(a0),d0
000142C6 6A00                       		bpl.s	loc_13D00
000142C8 5028 0024                  		addq.b	#8,$24(a0)
000142CC 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142D4 317C 0440 0002             		move.w	#$440,2(a0)
000142DA 0240 007F                  		andi.w	#$7F,d0
000142DE 1140 0033                  		move.b	d0,$33(a0)
000142E2 6000 0000                  		bra.w	Obj0A_Countdown
000142E6                            ; ===========================================================================
000142E6                            
000142E6                            loc_13D00:
000142E6 1140 001C                  		move.b	d0,$1C(a0)
000142EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000142F0 317C FF78 0012             		move.w	#-$88,$12(a0)
000142F6                            
000142F6                            Obj0A_Animate:				; XREF: Obj0A_Index
000142F6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000142FC 4EB9 0000 AC66             		jsr	AnimateSprite
00014302                            
00014302                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014302 3038 F646                  		move.w	($FFFFF646).w,d0
00014306 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001430A 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001430C 117C 0006 0024             		move.b	#6,$24(a0)
00014312 5E28 001C                  		addq.b	#7,$1C(a0)
00014316 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001431C 6700                       		beq.s	Obj0A_Display
0001431E 6000                       		bra.s	Obj0A_Display
00014320                            ; ===========================================================================
00014320                            
00014320                            Obj0A_Wobble:
00014320 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014324 6700                       		beq.s	loc_13D44
00014326 5868 0030                  		addq.w	#4,$30(a0)
0001432A                            
0001432A                            loc_13D44:
0001432A 1028 0026                  		move.b	$26(a0),d0
0001432E 5228 0026                  		addq.b	#1,$26(a0)
00014332 0240 007F                  		andi.w	#$7F,d0
00014336 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001433C 1031 0000                  		move.b	(a1,d0.w),d0
00014340 4880                       		ext.w	d0
00014342 D068 0030                  		add.w	$30(a0),d0
00014346 3140 0008                  		move.w	d0,8(a0)
0001434A 6100                       		bsr.s	Obj0A_ShowNumber
0001434C 4EBA 9840                  		jsr	SpeedToPos
00014350 4A28 0001                  		tst.b	1(a0)
00014354 6A00                       		bpl.s	Obj0A_Delete
00014356 4EFA 985C                  		jmp	DisplaySprite
0001435A                            ; ===========================================================================
0001435A                            
0001435A                            Obj0A_Delete:
0001435A 4EFA 9894                  		jmp	DeleteObject
0001435E                            ; ===========================================================================
0001435E                            
0001435E                            Obj0A_Display:				; XREF: Obj0A_Index
0001435E 6100                       		bsr.s	Obj0A_ShowNumber
00014360 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014366 4EB9 0000 AC66             		jsr	AnimateSprite
0001436C 4EFA 9846                  		jmp	DisplaySprite
00014370                            ; ===========================================================================
00014370                            
00014370                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014370 4EFA 987E                  		jmp	DeleteObject
00014374                            ; ===========================================================================
00014374                            
00014374                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014374 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001437A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001437C 5368 0038                  		subq.w	#1,$38(a0)
00014380 6600                       		bne.s	Obj0A_Display2
00014382 117C 000E 0024             		move.b	#$E,$24(a0)
00014388 5E28 001C                  		addq.b	#7,$1C(a0)
0001438C 60D0                       		bra.s	Obj0A_Display
0001438E                            ; ===========================================================================
0001438E                            
0001438E                            Obj0A_Display2:
0001438E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014394 4EB9 0000 AC66             		jsr	AnimateSprite
0001439A 4A28 0001                  		tst.b	1(a0)
0001439E 6A00                       		bpl.s	Obj0A_Delete3
000143A0 4EFA 9812                  		jmp	DisplaySprite
000143A4                            ; ===========================================================================
000143A4                            
000143A4                            Obj0A_Delete3:
000143A4 4EFA 984A                  		jmp	DeleteObject
000143A8                            ; ===========================================================================
000143A8                            
000143A8                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000143A8 4A68 0038                  		tst.w	$38(a0)
000143AC 6700                       		beq.s	locret_13E1A
000143AE 5368 0038                  		subq.w	#1,$38(a0)
000143B2 6600                       		bne.s	locret_13E1A
000143B4 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000143BA 6400                       		bcc.s	locret_13E1A
000143BC 317C 000F 0038             		move.w	#$F,$38(a0)
000143C2 4268 0012                  		clr.w	$12(a0)
000143C6 117C 0080 0001             		move.b	#$80,1(a0)
000143CC 3028 0008                  		move.w	8(a0),d0
000143D0 9078 F700                  		sub.w	($FFFFF700).w,d0
000143D4 0640 0080                  		addi.w	#$80,d0
000143D8 3140 0008                  		move.w	d0,8(a0)
000143DC 3028 000C                  		move.w	$C(a0),d0
000143E0 9078 F704                  		sub.w	($FFFFF704).w,d0
000143E4 0640 0080                  		addi.w	#$80,d0
000143E8 3140 000A                  		move.w	d0,$A(a0)
000143EC 117C 000C 0024             		move.b	#$C,$24(a0)
000143F2                            
000143F2                            locret_13E1A:
000143F2 4E75                       		rts	
000143F4                            ; ===========================================================================
000143F4                            Obj0A_WobbleData:
000143F4 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014405 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014416 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014427 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014437 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014444 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014451 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001445E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001446B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014474                            ; ===========================================================================
00014474                            
00014474                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014474 4A68 002C                  		tst.w	$2C(a0)
00014478 6600 0000                  		bne.w	loc_13F86
0001447C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014482 6400 0000                  		bcc.w	locret_1408C
00014486 0838 0006 D022             		btst	#6,($FFFFD022).w
0001448C 6700 0000                  		beq.w	locret_1408C
00014490 5368 0038                  		subq.w	#1,$38(a0)
00014494 6A00 0000                  		bpl.w	loc_13FAC
00014498 317C 003B 0038             		move.w	#59,$38(a0)
0001449E 317C 0001 0036             		move.w	#1,$36(a0)
000144A4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000144AA 0240 0001                  		andi.w	#1,d0
000144AE 1140 0034                  		move.b	d0,$34(a0)
000144B2 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000144B6 0C40 0019                  		cmpi.w	#$19,d0
000144BA 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000144BC 0C40 0014                  		cmpi.w	#$14,d0
000144C0 6700                       		beq.s	Obj0A_WarnSound
000144C2 0C40 000F                  		cmpi.w	#$F,d0
000144C6 6700                       		beq.s	Obj0A_WarnSound
000144C8 0C40 000C                  		cmpi.w	#$C,d0
000144CC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144CE 6600                       		bne.s	loc_13F02
000144D0 303C 0092                  		move.w	#$92,d0
000144D4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144DA                            
000144DA                            loc_13F02:
000144DA 5328 0032                  		subq.b	#1,$32(a0)
000144DE 6A00                       		bpl.s	Obj0A_ReduceAir
000144E0 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144E6 08E8 0007 0036             		bset	#7,$36(a0)
000144EC 6000                       		bra.s	Obj0A_ReduceAir
000144EE                            ; ===========================================================================
000144EE                            
000144EE                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144EE 303C 00C2                  		move.w	#$C2,d0
000144F2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000144F8                            
000144F8                            Obj0A_ReduceAir:
000144F8 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000144FC 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014500 6100 0000                  		bsr.w	ResumeMusic
00014504 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001450A 303C 00B2                  		move.w	#$B2,d0
0001450E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
00014514 117C 000A 0034             		move.b	#$A,$34(a0)
0001451A 317C 0001 0036             		move.w	#1,$36(a0)
00014520 317C 0078 002C             		move.w	#$78,$2C(a0)
00014526 2F08                       		move.l	a0,-(sp)
00014528 41F8 D000                  		lea	($FFFFD000).w,a0
0001452C 6100 F860                  		bsr.w	Sonic_ResetOnFloor
00014530 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014536 08E8 0001 0022             		bset	#1,$22(a0)
0001453C 08E8 0007 0002             		bset	#7,2(a0)
00014542 317C 0000 0012             		move.w	#0,$12(a0)
00014548 317C 0000 0010             		move.w	#0,$10(a0)
0001454E 317C 0000 0014             		move.w	#0,$14(a0)
00014554 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001455A 205F                       		movea.l	(sp)+,a0
0001455C 4E75                       		rts	
0001455E                            ; ===========================================================================
0001455E                            
0001455E                            loc_13F86:
0001455E 5368 002C                  		subq.w	#1,$2C(a0)
00014562 6600                       		bne.s	loc_13F94
00014564 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001456A 4E75                       		rts	
0001456C                            ; ===========================================================================
0001456C                            
0001456C                            loc_13F94:
0001456C 2F08                       		move.l	a0,-(sp)
0001456E 41F8 D000                  		lea	($FFFFD000).w,a0
00014572 4EBA 961A                  		jsr	SpeedToPos
00014576 0668 0010 0012             		addi.w	#$10,$12(a0)
0001457C 205F                       		movea.l	(sp)+,a0
0001457E 6000                       		bra.s	loc_13FAC
00014580                            ; ===========================================================================
00014580                            
00014580                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014580 6000                       		bra.s	Obj0A_MakeItem
00014582                            ; ===========================================================================
00014582                            
00014582                            loc_13FAC:
00014582 4A68 0036                  		tst.w	$36(a0)
00014586 6700 0000                  		beq.w	locret_1408C
0001458A 5368 003A                  		subq.w	#1,$3A(a0)
0001458E 6A00 0000                  		bpl.w	locret_1408C
00014592                            
00014592                            Obj0A_MakeItem:
00014592 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014598 0240 000F                  		andi.w	#$F,d0
0001459C 3140 003A                  		move.w	d0,$3A(a0)
000145A0 4EBA 9A98                  		jsr	SingleObjLoad
000145A4 6600 0000                  		bne.w	locret_1408C
000145A8 12BC 000A                  		move.b	#$A,0(a1)	; load object
000145AC 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000145B2 7006                       		moveq	#6,d0
000145B4 0838 0000 D022             		btst	#0,($FFFFD022).w
000145BA 6700                       		beq.s	loc_13FF2
000145BC 4440                       		neg.w	d0
000145BE 137C 0040 0026             		move.b	#$40,$26(a1)
000145C4                            
000145C4                            loc_13FF2:
000145C4 D169 0008                  		add.w	d0,8(a1)
000145C8 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145CE 137C 0006 0028             		move.b	#6,$28(a1)
000145D4 4A68 002C                  		tst.w	$2C(a0)
000145D8 6700 0000                  		beq.w	loc_1403E
000145DC 0268 0007 003A             		andi.w	#7,$3A(a0)
000145E2 0668 0000 003A             		addi.w	#0,$3A(a0)
000145E8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145EC 0440 000C                  		subi.w	#$C,d0
000145F0 3340 000C                  		move.w	d0,$C(a1)
000145F4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145FA 1340 0026                  		move.b	d0,$26(a1)
000145FE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014602 0200 0003                  		andi.b	#3,d0
00014606 6600                       		bne.s	loc_14082
00014608 137C 000E 0028             		move.b	#$E,$28(a1)
0001460E 6000                       		bra.s	loc_14082
00014610                            ; ===========================================================================
00014610                            
00014610                            loc_1403E:
00014610 0828 0007 0036             		btst	#7,$36(a0)
00014616 6700                       		beq.s	loc_14082
00014618 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001461C E24A                       		lsr.w	#1,d2
0001461E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014624 0240 0003                  		andi.w	#3,d0
00014628 6600                       		bne.s	loc_1406A
0001462A 08E8 0006 0036             		bset	#6,$36(a0)
00014630 6600                       		bne.s	loc_14082
00014632 1342 0028                  		move.b	d2,$28(a1)
00014636 337C 001C 0038             		move.w	#$1C,$38(a1)
0001463C                            
0001463C                            loc_1406A:
0001463C 4A28 0034                  		tst.b	$34(a0)
00014640 6600                       		bne.s	loc_14082
00014642 08E8 0006 0036             		bset	#6,$36(a0)
00014648 6600                       		bne.s	loc_14082
0001464A 1342 0028                  		move.b	d2,$28(a1)
0001464E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014654                            
00014654                            loc_14082:
00014654 5328 0034                  		subq.b	#1,$34(a0)
00014658 6A00                       		bpl.s	locret_1408C
0001465A 4268 0036                  		clr.w	$36(a0)
0001465E                            
0001465E                            locret_1408C:
0001465E 4E75                       		rts	
00014660                            
00014660                            ; ---------------------------------------------------------------------------
00014660                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014660                            ; ---------------------------------------------------------------------------
00014660                            
00014660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014660                            
00014660                            
00014660                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014660 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014666                             
00014666                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014666                             
00014666 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001466A                             
0001466A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014670 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014672 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014678 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001467A                             
0001467A                            Air_GetBgm2:
0001467A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014680 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014682 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014688 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001468A                             
0001468A                            Air_GetBgm3:
0001468A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014690 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014692 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014698 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001469A                             
0001469A                            Air_GetBgm4:
0001469A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000146A0 6600                       		bne.s	Air_PlayMusic	; if not, branch
000146A2 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000146A8                             
000146A8                            Air_PlayMusic:
000146A8 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000146AC                             
000146AC                            loc_140A6:
000146AC 4EB9 0000 15B6             		jsr	(PlaySound).l
000146B2                             
000146B2                            ; NineKode ends here
000146B2                            
000146B2                            loc_140AC:
000146B2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000146B8 4238 D372                  		clr.b	($FFFFD372).w
000146BC 4E75                       		rts	
000146BE                            ; End of function ResumeMusic
000146BE                            
000146BE                            ; ===========================================================================
000146BE                            Ani_obj0A:
000146BE                            	include "_anim\obj0A.asm"
000146BE                            ; ---------------------------------------------------------------------------
000146BE                            ; Animation script - countdown numbers and bubbles (LZ)
000146BE                            ; ---------------------------------------------------------------------------
000146BE 0000                       		dc.w byte_140D6-Ani_obj0A
000146C0 0000                       		dc.w byte_140E0-Ani_obj0A
000146C2 0000                       		dc.w byte_140EA-Ani_obj0A
000146C4 0000                       		dc.w byte_140F4-Ani_obj0A
000146C6 0000                       		dc.w byte_140FE-Ani_obj0A
000146C8 0000                       		dc.w byte_14108-Ani_obj0A
000146CA 0000                       		dc.w byte_14112-Ani_obj0A
000146CC 0000                       		dc.w byte_14118-Ani_obj0A
000146CE 0000                       		dc.w byte_14120-Ani_obj0A
000146D0 0000                       		dc.w byte_14128-Ani_obj0A
000146D2 0000                       		dc.w byte_14130-Ani_obj0A
000146D4 0000                       		dc.w byte_14138-Ani_obj0A
000146D6 0000                       		dc.w byte_14140-Ani_obj0A
000146D8 0000                       		dc.w byte_14148-Ani_obj0A
000146DA 0000                       		dc.w byte_1414A-Ani_obj0A
000146DC 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146E6 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000146F0 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000146FA 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014704 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001470E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014718 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001471E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014726 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001472E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014736 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001473E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014746 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001474E 0EFC                       byte_14148:	dc.b $E, $FC
00014750 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014756                            		even
00014756                            		even
00014756                            
00014756                            ; ---------------------------------------------------------------------------
00014756                            ; Sprite mappings - drowning countdown numbers (LZ)
00014756                            ; ---------------------------------------------------------------------------
00014756                            Map_obj0A:
00014756                            	include "_maps\obj0A.asm"
00014756                            ; ---------------------------------------------------------------------------
00014756                            ; Sprite mappings - drowning countdown numbers (LZ)
00014756                            ; ---------------------------------------------------------------------------
00014756 0000                       		dc.w byte_14152-Map_obj0A
00014758 01                         byte_14152:	dc.b 1
00014759 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001475E                            		even
0001475E                            		even
0001475E                            
0001475E                            ; ===========================================================================
0001475E                            ; ---------------------------------------------------------------------------
0001475E                            ; Object 38 - shield and invincibility stars
0001475E                            ; ---------------------------------------------------------------------------
0001475E                            
0001475E                            Obj38:					; XREF: Obj_Index
0001475E 7000                       		moveq	#0,d0
00014760 1028 0024                  		move.b	$24(a0),d0
00014764 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014768 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001476C                            ; ===========================================================================
0001476C 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
0001476E 0000                       		dc.w Obj38_Shield-Obj38_Index
00014770 0000                       		dc.w Obj38_Stars-Obj38_Index
00014772                            ; ===========================================================================
00014772                            
00014772                            Obj38_Main:				; XREF: Obj38_Index
00014772 5428 0024                  		addq.b	#2,$24(a0)
00014776 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001477E 117C 0004 0001             		move.b	#4,1(a0)
00014784 117C 0001 0018             		move.b	#1,$18(a0)
0001478A 117C 0010 0019             		move.b	#$10,$19(a0)
00014790 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014794 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014796 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001479C 4E75                       		rts	
0001479E                            ; ===========================================================================
0001479E                            
0001479E                            Obj38_DoStars:
0001479E 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000147A2 317C 055C 0002             		move.w	#$55C,2(a0)
000147A8 4E75                       		rts	
000147AA                            ; ===========================================================================
000147AA                            
000147AA                            Obj38_Shield:				; XREF: Obj38_Index
000147AA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147AE 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000147B0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000147B4 6700                       		beq.s	Obj38_Delete	; if not, branch
000147B6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000147BC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000147C2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147C8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147CE 4EB9 0000 AC66             		jsr	AnimateSprite
000147D4 4EFA 93DE                  		jmp	DisplaySprite
000147D8                            ; ===========================================================================
000147D8                            
000147D8                            Obj38_RmvShield:
000147D8 4E75                       		rts	
000147DA                            ; ===========================================================================
000147DA                            
000147DA                            Obj38_Delete:
000147DA 4EFA 9414                  		jmp	DeleteObject
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            Obj38_Stars:				; XREF: Obj38_Index
000147DE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147E2 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147E4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147E8 1228 001C                  		move.b	$1C(a0),d1
000147EC 5301                       		subq.b	#1,d1
000147EE 6000                       		bra.s	Obj38_StarTrail
000147F0                            ; ===========================================================================
000147F0 E909                       		lsl.b	#4,d1
000147F2 5801                       		addq.b	#4,d1
000147F4 9001                       		sub.b	d1,d0
000147F6 1228 0030                  		move.b	$30(a0),d1
000147FA 9001                       		sub.b	d1,d0
000147FC 5801                       		addq.b	#4,d1
000147FE 0201 000F                  		andi.b	#$F,d1
00014802 1141 0030                  		move.b	d1,$30(a0)
00014806 6000                       		bra.s	Obj38_StarTrail2a
00014808                            ; ===========================================================================
00014808                            
00014808                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014808 E709                       		lsl.b	#3,d1
0001480A 1401                       		move.b	d1,d2
0001480C D201                       		add.b	d1,d1
0001480E D202                       		add.b	d2,d1
00014810 5801                       		addq.b	#4,d1
00014812 9001                       		sub.b	d1,d0
00014814 1228 0030                  		move.b	$30(a0),d1
00014818 9001                       		sub.b	d1,d0
0001481A 5801                       		addq.b	#4,d1
0001481C 0C01 0018                  		cmpi.b	#$18,d1
00014820 6500                       		bcs.s	Obj38_StarTrail2
00014822 7200                       		moveq	#0,d1
00014824                            
00014824                            Obj38_StarTrail2:
00014824 1141 0030                  		move.b	d1,$30(a0)
00014828                            
00014828                            Obj38_StarTrail2a:
00014828 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001482C 43F1 0000                  		lea	(a1,d0.w),a1
00014830 3159 0008                  		move.w	(a1)+,8(a0)
00014834 3159 000C                  		move.w	(a1)+,$C(a0)
00014838 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001483E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014844 4EB9 0000 AC66             		jsr	AnimateSprite
0001484A 4EFA 9368                  		jmp	DisplaySprite
0001484E                            ; ===========================================================================
0001484E                            
0001484E                            Obj38_Delete2:				; XREF: Obj38_Stars
0001484E 4EFA 93A0                  		jmp	DeleteObject
00014852                            ; ===========================================================================
00014852                            ; ---------------------------------------------------------------------------
00014852                            ; Object 4A - special stage entry from beta
00014852                            ; ---------------------------------------------------------------------------
00014852                            
00014852                            Obj4A:					; XREF: Obj_Index
00014852 7000                       		moveq	#0,d0
00014854 1028 0024                  		move.b	$24(a0),d0
00014858 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001485C 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014860                            ; ===========================================================================
00014860 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014862 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014864 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014866                            ; ===========================================================================
00014866                            
00014866                            Obj4A_Main:				; XREF: Obj4A_Index
00014866 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001486A 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001486C 4E75                       		rts	
0001486E                            ; ===========================================================================
0001486E                            
0001486E                            Obj4A_Main2:
0001486E 5428 0024                  		addq.b	#2,$24(a0)
00014872 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001487A 117C 0004 0001             		move.b	#4,1(a0)
00014880 117C 0001 0018             		move.b	#1,$18(a0)
00014886 117C 0038 0019             		move.b	#$38,$19(a0)
0001488C 317C 0541 0002             		move.w	#$541,2(a0)
00014892 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014898                            
00014898                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014898 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001489E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148A4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148AA 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000148B0 4EB9 0000 AC66             		jsr	AnimateSprite
000148B6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000148BC 6600                       		bne.s	Obj4A_Display
000148BE 4A38 D000                  		tst.b	($FFFFD000).w
000148C2 6700                       		beq.s	Obj4A_Display
000148C4 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148CA 303C 00A8                  		move.w	#$A8,d0
000148CE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148D4                            
000148D4                            Obj4A_Display:
000148D4 4EFA 92DE                  		jmp	DisplaySprite
000148D8                            ; ===========================================================================
000148D8                            
000148D8                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148D8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148DC 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148DE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148E4 4EFA 930A                  		jmp	DeleteObject
000148E8                            ; ===========================================================================
000148E8                            
000148E8                            Obj4A_Wait:
000148E8 4E75                       		rts	
000148EA                            ; ===========================================================================
000148EA                            ; ---------------------------------------------------------------------------
000148EA                            ; Object 08 - water splash (LZ)
000148EA                            ; ---------------------------------------------------------------------------
000148EA                            
000148EA                            Obj08:					; XREF: Obj_Index
000148EA 7000                       		moveq	#0,d0
000148EC 1028 0024                  		move.b	$24(a0),d0
000148F0 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000148F4 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000148F8                            ; ===========================================================================
000148F8 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000148FA 0000                       		dc.w Obj08_Display-Obj08_Index
000148FC 0000                       		dc.w Obj08_Delete-Obj08_Index
000148FE                            ; ===========================================================================
000148FE                            
000148FE                            Obj08_Main:				; XREF: Obj08_Index
000148FE 5428 0024                  		addq.b	#2,$24(a0)
00014902 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001490A 0028 0004 0001             		ori.b	#4,1(a0)
00014910 117C 0001 0018             		move.b	#1,$18(a0)
00014916 117C 0010 0019             		move.b	#$10,$19(a0)
0001491C 317C 4259 0002             		move.w	#$4259,2(a0)
00014922 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014928                            
00014928                            Obj08_Display:				; XREF: Obj08_Index
00014928 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001492E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014934 4EB9 0000 AC66             		jsr	AnimateSprite
0001493A 4EFA 9278                  		jmp	DisplaySprite
0001493E                            ; ===========================================================================
0001493E                            
0001493E                            Obj08_Delete:				; XREF: Obj08_Index
0001493E 4EFA 92B0                  		jmp	DeleteObject	; delete when animation	is complete
00014942                            ; ===========================================================================
00014942                            Ani_obj38:
00014942                            	include "_anim\obj38.asm"
00014942                            ; ---------------------------------------------------------------------------
00014942                            ; Animation script - shield and invincibility stars
00014942                            ; ---------------------------------------------------------------------------
00014942 0000                       		dc.w byte_14356-Ani_obj38
00014944 0000                       		dc.w byte_1435E-Ani_obj38
00014946 0000                       		dc.w byte_14364-Ani_obj38
00014948 0000                       		dc.w byte_1437E-Ani_obj38
0001494A 0000                       		dc.w byte_14398-Ani_obj38
0001494C 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014954 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001495A 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001496B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014974 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014985 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001498E 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001499F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000149A8                            		even
000149A8                            		even
000149A8                            
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            ; Sprite mappings - shield and invincibility stars
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            Map_obj38:
000149A8                            	include "_maps\obj38.asm"
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            ; Sprite mappings - shield and invincibility stars
000149A8                            ; ---------------------------------------------------------------------------
000149A8 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000149AC 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000149B0 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000149B4 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000149B8 04                         byte_143C2:	dc.b 4
000149B9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149BE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149C3 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000149C8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149CD 04                         byte_143D7:	dc.b 4
000149CE E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149D3 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149D8 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149DD 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149E2 04                         byte_143EC:	dc.b 4
000149E3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149E8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149ED 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149F2 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149F7 04                         byte_14401:	dc.b 4
000149F8 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149FD E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A02 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A07 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A0C 04                         byte_14416:	dc.b 4
00014A0D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A12 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A17 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014A1C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A21 04                         byte_1442B:	dc.b 4
00014A22 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A27 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A2C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A31 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A36 04                         byte_14440:	dc.b 4
00014A37 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A3C E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A41 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A46 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A4C 00                         		even
00014A4C 00                         		even
00014A4C                            
00014A4C                            Ani_obj4A:
00014A4C                            	include "_anim\obj4A.asm"
00014A4C                            ; ---------------------------------------------------------------------------
00014A4C                            ; Animation script - special stage entry effect from beta
00014A4C                            ; ---------------------------------------------------------------------------
00014A4C 0000                       		dc.w byte_14458-Ani_obj4A
00014A4E 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A62                            		even
00014A62                            		even
00014A62                            
00014A62                            ; ---------------------------------------------------------------------------
00014A62                            ; Sprite mappings - special stage entry	from beta
00014A62                            ; ---------------------------------------------------------------------------
00014A62                            Map_obj4A:
00014A62                            	include "_maps\obj4A.asm"
00014A62                            ; ---------------------------------------------------------------------------
00014A62                            ; Sprite mappings - special stage entry	from beta
00014A62                            ; ---------------------------------------------------------------------------
00014A62 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A66 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A6A 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A6E 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A72 03                         byte_1447C:	dc.b 3
00014A73 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A78 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A7D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A82 03                         byte_1448C:	dc.b 3
00014A83 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A88 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A8D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014A92 05                         byte_1449C:	dc.b 5
00014A93 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014A98 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014A9D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014AA2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014AA7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014AAC 09                         byte_144B6:	dc.b 9
00014AAD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014AB2 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014AB7 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014ABC 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014AC1 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014AC6 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014ACB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AD0 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014AD5 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014ADA 12                         byte_144E4:	dc.b $12
00014ADB 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014AE0 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014AE5 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AEA 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014AEF 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014AF4 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014AF9 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014AFE F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014B03 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014B08 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014B0D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014B12 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014B17 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014B1C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014B21 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B26 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B2B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B30 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B35 11                         byte_1453F:	dc.b $11
00014B36 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B3B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B40 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B45 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B4A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B4F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B54 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B59 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B5E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B63 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B68 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B6D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B72 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B77 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B7C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B81 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B86 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B8B 09                         byte_14595:	dc.b 9
00014B8C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014B91 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014B96 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014B9B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014BA0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014BA5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014BAA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014BAF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014BB4 04                         		dc.b 4
00014BB5 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014BBA                            		even
00014BBA                            		even
00014BBA                            
00014BBA                            Ani_obj08:
00014BBA                            	include "_anim\obj08.asm"
00014BBA                            ; ---------------------------------------------------------------------------
00014BBA                            ; Animation script - water splash (LZ)
00014BBA                            ; ---------------------------------------------------------------------------
00014BBA 0000                       		dc.w byte_145C6-Ani_obj08
00014BBC 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014BC2                            		even
00014BC2                            		even
00014BC2                            
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2                            ; Sprite mappings - water splash (LZ)
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2                            Map_obj08:
00014BC2                            	include "_maps\obj08.asm"
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2                            ; Sprite mappings - water splash (LZ)
00014BC2                            ; ---------------------------------------------------------------------------
00014BC2 0000                       		dc.w byte_145D2-Map_obj08
00014BC4 0000                       		dc.w byte_145DD-Map_obj08
00014BC6 0000                       		dc.w byte_145E8-Map_obj08
00014BC8 02                         byte_145D2:	dc.b 2
00014BC9 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BCE FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BD3 02                         byte_145DD:	dc.b 2
00014BD4 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BD9 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BDE 01                         byte_145E8:	dc.b 1
00014BDF E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BE4                            		even
00014BE4                            		even
00014BE4                            
00014BE4                            ; ---------------------------------------------------------------------------
00014BE4                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BE4                            ; ---------------------------------------------------------------------------
00014BE4                            
00014BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BE4                            
00014BE4                            
00014BE4                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BE4 0828 0003 0022             		btst	#3,$22(a0)
00014BEA 6700                       		beq.s	loc_14602
00014BEC 7000                       		moveq	#0,d0
00014BEE 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BF2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BF6 4E75                       		rts	
00014BF8                            ; ===========================================================================
00014BF8                            
00014BF8                            loc_14602:
00014BF8 7003                       		moveq	#3,d0
00014BFA 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BFE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C02 1028 0026                  		move.b	$26(a0),d0
00014C06 0600 0020                  		addi.b	#$20,d0
00014C0A 6A00                       		bpl.s	loc_14624
00014C0C 1028 0026                  		move.b	$26(a0),d0
00014C10 6A00                       		bpl.s	loc_1461E
00014C12 5300                       		subq.b	#1,d0
00014C14                            
00014C14                            loc_1461E:
00014C14 0600 0020                  		addi.b	#$20,d0
00014C18 6000                       		bra.s	loc_14630
00014C1A                            ; ===========================================================================
00014C1A                            
00014C1A                            loc_14624:
00014C1A 1028 0026                  		move.b	$26(a0),d0
00014C1E 6A00                       		bpl.s	loc_1462C
00014C20 5200                       		addq.b	#1,d0
00014C22                            
00014C22                            loc_1462C:
00014C22 0600 001F                  		addi.b	#$1F,d0
00014C26                            
00014C26                            loc_14630:
00014C26 0200 00C0                  		andi.b	#$C0,d0
00014C2A 0C00 0040                  		cmpi.b	#$40,d0
00014C2E 6700 0000                  		beq.w	Sonic_WalkVertL
00014C32 0C00 0080                  		cmpi.b	#$80,d0
00014C36 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C3A 0C00 00C0                  		cmpi.b	#$C0,d0
00014C3E 6700 0000                  		beq.w	Sonic_WalkVertR
00014C42 3428 000C                  		move.w	$C(a0),d2
00014C46 3628 0008                  		move.w	8(a0),d3
00014C4A 7000                       		moveq	#0,d0
00014C4C 1028 0016                  		move.b	$16(a0),d0
00014C50 4880                       		ext.w	d0
00014C52 D440                       		add.w	d0,d2
00014C54 1028 0017                  		move.b	$17(a0),d0
00014C58 4880                       		ext.w	d0
00014C5A D640                       		add.w	d0,d3
00014C5C 49F8 F768                  		lea	($FFFFF768).w,a4
00014C60 367C 0010                  		movea.w	#$10,a3
00014C64 3C3C 0000                  		move.w	#0,d6
00014C68 7A0D                       		moveq	#$D,d5
00014C6A 6100 0000                  		bsr.w	FindFloor
00014C6E 3F01                       		move.w	d1,-(sp)
00014C70 3428 000C                  		move.w	$C(a0),d2
00014C74 3628 0008                  		move.w	8(a0),d3
00014C78 7000                       		moveq	#0,d0
00014C7A 1028 0016                  		move.b	$16(a0),d0
00014C7E 4880                       		ext.w	d0
00014C80 D440                       		add.w	d0,d2
00014C82 1028 0017                  		move.b	$17(a0),d0
00014C86 4880                       		ext.w	d0
00014C88 4440                       		neg.w	d0
00014C8A D640                       		add.w	d0,d3
00014C8C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C90 367C 0010                  		movea.w	#$10,a3
00014C94 3C3C 0000                  		move.w	#0,d6
00014C98 7A0D                       		moveq	#$D,d5
00014C9A 6100 0000                  		bsr.w	FindFloor
00014C9E 301F                       		move.w	(sp)+,d0
00014CA0 6100 0000                  		bsr.w	Sonic_Angle
00014CA4 4A41                       		tst.w	d1
00014CA6 6700                       		beq.s	locret_146BE
00014CA8 6A00                       		bpl.s	loc_146C0
00014CAA 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CAE 6D00                       		blt.s	locret_146E6
00014CB0 D368 000C                  		add.w	d1,$C(a0)
00014CB4                            
00014CB4                            locret_146BE:
00014CB4 4E75                       		rts	
00014CB6                            ; ===========================================================================
00014CB6                            
00014CB6                            loc_146C0:
00014CB6 0C41 000E                  		cmpi.w	#$E,d1
00014CBA 6E00                       		bgt.s	loc_146CC
00014CBC                            
00014CBC                            loc_146C6:
00014CBC D368 000C                  		add.w	d1,$C(a0)
00014CC0 4E75                       		rts	
00014CC2                            ; ===========================================================================
00014CC2                            
00014CC2                            loc_146CC:
00014CC2 4A28 0038                  		tst.b	$38(a0)
00014CC6 66F4                       		bne.s	loc_146C6
00014CC8 08E8 0001 0022             		bset	#1,$22(a0)
00014CCE 08A8 0005 0022             		bclr	#5,$22(a0)
00014CD4 117C 0001 001D             		move.b	#1,$1D(a0)
00014CDA 4E75                       		rts	
00014CDC                            ; ===========================================================================
00014CDC                            
00014CDC                            locret_146E6:
00014CDC 4E75                       		rts	
00014CDE                            ; End of function Sonic_AnglePos
00014CDE                            
00014CDE                            ; ===========================================================================
00014CDE 2428 0008                  		move.l	8(a0),d2
00014CE2 3028 0010                  		move.w	$10(a0),d0
00014CE6 48C0                       		ext.l	d0
00014CE8 E180                       		asl.l	#8,d0
00014CEA 9480                       		sub.l	d0,d2
00014CEC 2142 0008                  		move.l	d2,8(a0)
00014CF0 303C 0038                  		move.w	#$38,d0
00014CF4 48C0                       		ext.l	d0
00014CF6 E180                       		asl.l	#8,d0
00014CF8 9680                       		sub.l	d0,d3
00014CFA 2143 000C                  		move.l	d3,$C(a0)
00014CFE 4E75                       		rts	
00014D00                            ; ===========================================================================
00014D00                            
00014D00                            locret_1470A:
00014D00 4E75                       		rts	
00014D02                            ; ===========================================================================
00014D02 2628 000C                  		move.l	$C(a0),d3
00014D06 3028 0012                  		move.w	$12(a0),d0
00014D0A 0440 0038                  		subi.w	#$38,d0
00014D0E 3140 0012                  		move.w	d0,$12(a0)
00014D12 48C0                       		ext.l	d0
00014D14 E180                       		asl.l	#8,d0
00014D16 9680                       		sub.l	d0,d3
00014D18 2143 000C                  		move.l	d3,$C(a0)
00014D1C 4E75                       		rts	
00014D1E 4E75                       		rts	
00014D20                            ; ===========================================================================
00014D20 2428 0008                  		move.l	8(a0),d2
00014D24 2628 000C                  		move.l	$C(a0),d3
00014D28 3028 0010                  		move.w	$10(a0),d0
00014D2C 48C0                       		ext.l	d0
00014D2E E180                       		asl.l	#8,d0
00014D30 9480                       		sub.l	d0,d2
00014D32 3028 0012                  		move.w	$12(a0),d0
00014D36 48C0                       		ext.l	d0
00014D38 E180                       		asl.l	#8,d0
00014D3A 9680                       		sub.l	d0,d3
00014D3C 2142 0008                  		move.l	d2,8(a0)
00014D40 2143 000C                  		move.l	d3,$C(a0)
00014D44 4E75                       		rts	
00014D46                            
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            
00014D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D46                            
00014D46                            
00014D46                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D46 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D4A B240                       		cmp.w	d0,d1
00014D4C 6F00                       		ble.s	loc_1475E
00014D4E 1438 F768                  		move.b	($FFFFF768).w,d2
00014D52 3200                       		move.w	d0,d1
00014D54                            
00014D54                            loc_1475E:
00014D54 0802 0000                  		btst	#0,d2
00014D58 6600                       		bne.s	loc_1476A
00014D5A 1142 0026                  		move.b	d2,$26(a0)
00014D5E 4E75                       		rts	
00014D60                            ; ===========================================================================
00014D60                            
00014D60                            loc_1476A:
00014D60 1428 0026                  		move.b	$26(a0),d2
00014D64 0602 0020                  		addi.b	#$20,d2
00014D68 0202 00C0                  		andi.b	#$C0,d2
00014D6C 1142 0026                  		move.b	d2,$26(a0)
00014D70 4E75                       		rts	
00014D72                            ; End of function Sonic_Angle
00014D72                            
00014D72                            ; ---------------------------------------------------------------------------
00014D72                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D72                            ; ---------------------------------------------------------------------------
00014D72                            
00014D72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D72                            
00014D72                            
00014D72                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D72 3428 000C                  		move.w	$C(a0),d2
00014D76 3628 0008                  		move.w	8(a0),d3
00014D7A 7000                       		moveq	#0,d0
00014D7C 1028 0017                  		move.b	$17(a0),d0
00014D80 4880                       		ext.w	d0
00014D82 4440                       		neg.w	d0
00014D84 D440                       		add.w	d0,d2
00014D86 1028 0016                  		move.b	$16(a0),d0
00014D8A 4880                       		ext.w	d0
00014D8C D640                       		add.w	d0,d3
00014D8E 49F8 F768                  		lea	($FFFFF768).w,a4
00014D92 367C 0010                  		movea.w	#$10,a3
00014D96 3C3C 0000                  		move.w	#0,d6
00014D9A 7A0D                       		moveq	#$D,d5
00014D9C 6100 0000                  		bsr.w	FindWall
00014DA0 3F01                       		move.w	d1,-(sp)
00014DA2 3428 000C                  		move.w	$C(a0),d2
00014DA6 3628 0008                  		move.w	8(a0),d3
00014DAA 7000                       		moveq	#0,d0
00014DAC 1028 0017                  		move.b	$17(a0),d0
00014DB0 4880                       		ext.w	d0
00014DB2 D440                       		add.w	d0,d2
00014DB4 1028 0016                  		move.b	$16(a0),d0
00014DB8 4880                       		ext.w	d0
00014DBA D640                       		add.w	d0,d3
00014DBC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DC0 367C 0010                  		movea.w	#$10,a3
00014DC4 3C3C 0000                  		move.w	#0,d6
00014DC8 7A0D                       		moveq	#$D,d5
00014DCA 6100 0000                  		bsr.w	FindWall
00014DCE 301F                       		move.w	(sp)+,d0
00014DD0 6100 FF74                  		bsr.w	Sonic_Angle
00014DD4 4A41                       		tst.w	d1
00014DD6 6700                       		beq.s	locret_147F0
00014DD8 6A00                       		bpl.s	loc_147F2
00014DDA 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DDE 6D00 FF20                  		blt.w	locret_1470A
00014DE2 D368 0008                  		add.w	d1,8(a0)
00014DE6                            
00014DE6                            locret_147F0:
00014DE6 4E75                       		rts	
00014DE8                            ; ===========================================================================
00014DE8                            
00014DE8                            loc_147F2:
00014DE8 0C41 000E                  		cmpi.w	#$E,d1
00014DEC 6E00                       		bgt.s	loc_147FE
00014DEE                            
00014DEE                            loc_147F8:
00014DEE D368 0008                  		add.w	d1,8(a0)
00014DF2 4E75                       		rts	
00014DF4                            ; ===========================================================================
00014DF4                            
00014DF4                            loc_147FE:
00014DF4 4A28 0038                  		tst.b	$38(a0)
00014DF8 66F4                       		bne.s	loc_147F8
00014DFA 08E8 0001 0022             		bset	#1,$22(a0)
00014E00 08A8 0005 0022             		bclr	#5,$22(a0)
00014E06 117C 0001 001D             		move.b	#1,$1D(a0)
00014E0C 4E75                       		rts	
00014E0E                            ; End of function Sonic_WalkVertR
00014E0E                            
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E                            ; Subroutine allowing Sonic to walk upside-down
00014E0E                            ; ---------------------------------------------------------------------------
00014E0E                            
00014E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E0E                            
00014E0E                            
00014E0E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014E0E 3428 000C                  		move.w	$C(a0),d2
00014E12 3628 0008                  		move.w	8(a0),d3
00014E16 7000                       		moveq	#0,d0
00014E18 1028 0016                  		move.b	$16(a0),d0
00014E1C 4880                       		ext.w	d0
00014E1E 9440                       		sub.w	d0,d2
00014E20 0A42 000F                  		eori.w	#$F,d2
00014E24 1028 0017                  		move.b	$17(a0),d0
00014E28 4880                       		ext.w	d0
00014E2A D640                       		add.w	d0,d3
00014E2C 49F8 F768                  		lea	($FFFFF768).w,a4
00014E30 367C FFF0                  		movea.w	#-$10,a3
00014E34 3C3C 1000                  		move.w	#$1000,d6
00014E38 7A0D                       		moveq	#$D,d5
00014E3A 6100 0000                  		bsr.w	FindFloor
00014E3E 3F01                       		move.w	d1,-(sp)
00014E40 3428 000C                  		move.w	$C(a0),d2
00014E44 3628 0008                  		move.w	8(a0),d3
00014E48 7000                       		moveq	#0,d0
00014E4A 1028 0016                  		move.b	$16(a0),d0
00014E4E 4880                       		ext.w	d0
00014E50 9440                       		sub.w	d0,d2
00014E52 0A42 000F                  		eori.w	#$F,d2
00014E56 1028 0017                  		move.b	$17(a0),d0
00014E5A 4880                       		ext.w	d0
00014E5C 9640                       		sub.w	d0,d3
00014E5E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E62 367C FFF0                  		movea.w	#-$10,a3
00014E66 3C3C 1000                  		move.w	#$1000,d6
00014E6A 7A0D                       		moveq	#$D,d5
00014E6C 6100 0000                  		bsr.w	FindFloor
00014E70 301F                       		move.w	(sp)+,d0
00014E72 6100 FED2                  		bsr.w	Sonic_Angle
00014E76 4A41                       		tst.w	d1
00014E78 6700                       		beq.s	locret_14892
00014E7A 6A00                       		bpl.s	loc_14894
00014E7C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E80 6D00 FE5A                  		blt.w	locret_146E6
00014E84 9368 000C                  		sub.w	d1,$C(a0)
00014E88                            
00014E88                            locret_14892:
00014E88 4E75                       		rts	
00014E8A                            ; ===========================================================================
00014E8A                            
00014E8A                            loc_14894:
00014E8A 0C41 000E                  		cmpi.w	#$E,d1
00014E8E 6E00                       		bgt.s	loc_148A0
00014E90                            
00014E90                            loc_1489A:
00014E90 9368 000C                  		sub.w	d1,$C(a0)
00014E94 4E75                       		rts	
00014E96                            ; ===========================================================================
00014E96                            
00014E96                            loc_148A0:
00014E96 4A28 0038                  		tst.b	$38(a0)
00014E9A 66F4                       		bne.s	loc_1489A
00014E9C 08E8 0001 0022             		bset	#1,$22(a0)
00014EA2 08A8 0005 0022             		bclr	#5,$22(a0)
00014EA8 117C 0001 001D             		move.b	#1,$1D(a0)
00014EAE 4E75                       		rts	
00014EB0                            ; End of function Sonic_WalkCeiling
00014EB0                            
00014EB0                            ; ---------------------------------------------------------------------------
00014EB0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014EB0                            ; ---------------------------------------------------------------------------
00014EB0                            
00014EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EB0                            
00014EB0                            
00014EB0                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014EB0 3428 000C                  		move.w	$C(a0),d2
00014EB4 3628 0008                  		move.w	8(a0),d3
00014EB8 7000                       		moveq	#0,d0
00014EBA 1028 0017                  		move.b	$17(a0),d0
00014EBE 4880                       		ext.w	d0
00014EC0 9440                       		sub.w	d0,d2
00014EC2 1028 0016                  		move.b	$16(a0),d0
00014EC6 4880                       		ext.w	d0
00014EC8 9640                       		sub.w	d0,d3
00014ECA 0A43 000F                  		eori.w	#$F,d3
00014ECE 49F8 F768                  		lea	($FFFFF768).w,a4
00014ED2 367C FFF0                  		movea.w	#-$10,a3
00014ED6 3C3C 0800                  		move.w	#$800,d6
00014EDA 7A0D                       		moveq	#$D,d5
00014EDC 6100 0000                  		bsr.w	FindWall
00014EE0 3F01                       		move.w	d1,-(sp)
00014EE2 3428 000C                  		move.w	$C(a0),d2
00014EE6 3628 0008                  		move.w	8(a0),d3
00014EEA 7000                       		moveq	#0,d0
00014EEC 1028 0017                  		move.b	$17(a0),d0
00014EF0 4880                       		ext.w	d0
00014EF2 D440                       		add.w	d0,d2
00014EF4 1028 0016                  		move.b	$16(a0),d0
00014EF8 4880                       		ext.w	d0
00014EFA 9640                       		sub.w	d0,d3
00014EFC 0A43 000F                  		eori.w	#$F,d3
00014F00 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F04 367C FFF0                  		movea.w	#-$10,a3
00014F08 3C3C 0800                  		move.w	#$800,d6
00014F0C 7A0D                       		moveq	#$D,d5
00014F0E 6100 0000                  		bsr.w	FindWall
00014F12 301F                       		move.w	(sp)+,d0
00014F14 6100 FE30                  		bsr.w	Sonic_Angle
00014F18 4A41                       		tst.w	d1
00014F1A 6700                       		beq.s	locret_14934
00014F1C 6A00                       		bpl.s	loc_14936
00014F1E 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F22 6D00 FDDC                  		blt.w	locret_1470A
00014F26 9368 0008                  		sub.w	d1,8(a0)
00014F2A                            
00014F2A                            locret_14934:
00014F2A 4E75                       		rts	
00014F2C                            ; ===========================================================================
00014F2C                            
00014F2C                            loc_14936:
00014F2C 0C41 000E                  		cmpi.w	#$E,d1
00014F30 6E00                       		bgt.s	loc_14942
00014F32                            
00014F32                            loc_1493C:
00014F32 9368 0008                  		sub.w	d1,8(a0)
00014F36 4E75                       		rts	
00014F38                            ; ===========================================================================
00014F38                            
00014F38                            loc_14942:
00014F38 4A28 0038                  		tst.b	$38(a0)
00014F3C 66F4                       		bne.s	loc_1493C
00014F3E 08E8 0001 0022             		bset	#1,$22(a0)
00014F44 08A8 0005 0022             		bclr	#5,$22(a0)
00014F4A 117C 0001 001D             		move.b	#1,$1D(a0)
00014F50 4E75                       		rts	
00014F52                            ; End of function Sonic_WalkVertL
00014F52                            
00014F52                            ; ---------------------------------------------------------------------------
00014F52                            ; Subroutine to	find which tile	the object is standing on
00014F52                            ; ---------------------------------------------------------------------------
00014F52                            
00014F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F52                            
00014F52                            
00014F52                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F52 3002                       		move.w	d2,d0
00014F54 E248                       		lsr.w	#1,d0
00014F56 0240 0380                  		andi.w	#$380,d0
00014F5A 3203                       		move.w	d3,d1
00014F5C E049                       		lsr.w	#8,d1
00014F5E 0241 007F                  		andi.w	#$7F,d1
00014F62 D041                       		add.w	d1,d0
00014F64 72FF                       		moveq	#-1,d1
00014F66 43F8 A400                  		lea	($FFFFA400).w,a1
00014F6A 1231 0000                  		move.b	(a1,d0.w),d1
00014F6E 6700                       		beq.s	loc_14996
00014F70 6B00                       		bmi.s	loc_1499A
00014F72 5301                       		subq.b	#1,d1
00014F74 4881                       		ext.w	d1
00014F76 EE59                       		ror.w	#7,d1
00014F78 3002                       		move.w	d2,d0
00014F7A D040                       		add.w	d0,d0
00014F7C 0240 01E0                  		andi.w	#$1E0,d0
00014F80 D240                       		add.w	d0,d1
00014F82 3003                       		move.w	d3,d0
00014F84 E648                       		lsr.w	#3,d0
00014F86 0240 001E                  		andi.w	#$1E,d0
00014F8A D240                       		add.w	d0,d1
00014F8C                            
00014F8C                            loc_14996:
00014F8C 2241                       		movea.l	d1,a1
00014F8E 4E75                       		rts	
00014F90                            ; ===========================================================================
00014F90                            
00014F90                            loc_1499A:
00014F90 0241 007F                  		andi.w	#$7F,d1
00014F94 0828 0006 0001             		btst	#6,1(a0)
00014F9A 6700                       		beq.s	loc_149B2
00014F9C 5241                       		addq.w	#1,d1
00014F9E 0C41 0029                  		cmpi.w	#$29,d1
00014FA2 6600                       		bne.s	loc_149B2
00014FA4 323C 0051                  		move.w	#$51,d1
00014FA8                            
00014FA8                            loc_149B2:
00014FA8 5301                       		subq.b	#1,d1
00014FAA EE59                       		ror.w	#7,d1
00014FAC 3002                       		move.w	d2,d0
00014FAE D040                       		add.w	d0,d0
00014FB0 0240 01E0                  		andi.w	#$1E0,d0
00014FB4 D240                       		add.w	d0,d1
00014FB6 3003                       		move.w	d3,d0
00014FB8 E648                       		lsr.w	#3,d0
00014FBA 0240 001E                  		andi.w	#$1E,d0
00014FBE D240                       		add.w	d0,d1
00014FC0 2241                       		movea.l	d1,a1
00014FC2 4E75                       		rts	
00014FC4                            ; End of function Floor_ChkTile
00014FC4                            
00014FC4                            
00014FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FC4                            
00014FC4                            
00014FC4                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014FC4 618C                       		bsr.s	Floor_ChkTile
00014FC6 3011                       		move.w	(a1),d0
00014FC8 3800                       		move.w	d0,d4
00014FCA 0240 07FF                  		andi.w	#$7FF,d0
00014FCE 6700                       		beq.s	loc_149DE
00014FD0 0B04                       		btst	d5,d4
00014FD2 6600                       		bne.s	loc_149EC
00014FD4                            
00014FD4                            loc_149DE:
00014FD4 D44B                       		add.w	a3,d2
00014FD6 6100 0000                  		bsr.w	FindFloor2
00014FDA 944B                       		sub.w	a3,d2
00014FDC 0641 0010                  		addi.w	#$10,d1
00014FE0 4E75                       		rts	
00014FE2                            ; ===========================================================================
00014FE2                            
00014FE2                            loc_149EC:
00014FE2 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FE6 1032 0000                  		move.b	(a2,d0.w),d0
00014FEA 0240 00FF                  		andi.w	#$FF,d0
00014FEE 67E4                       		beq.s	loc_149DE
00014FF0 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FF6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FFA E948                       		lsl.w	#4,d0
00014FFC 3203                       		move.w	d3,d1
00014FFE 0804 000B                  		btst	#$B,d4
00015002 6700                       		beq.s	loc_14A12
00015004 4641                       		not.w	d1
00015006 4414                       		neg.b	(a4)
00015008                            
00015008                            loc_14A12:
00015008 0804 000C                  		btst	#$C,d4
0001500C 6700                       		beq.s	loc_14A22
0001500E 0614 0040                  		addi.b	#$40,(a4)
00015012 4414                       		neg.b	(a4)
00015014 0414 0040                  		subi.b	#$40,(a4)
00015018                            
00015018                            loc_14A22:
00015018 0241 000F                  		andi.w	#$F,d1
0001501C D240                       		add.w	d0,d1
0001501E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015024 1032 1000                  		move.b	(a2,d1.w),d0
00015028 4880                       		ext.w	d0
0001502A BD44                       		eor.w	d6,d4
0001502C 0804 000C                  		btst	#$C,d4
00015030 6700                       		beq.s	loc_14A3E
00015032 4440                       		neg.w	d0
00015034                            
00015034                            loc_14A3E:
00015034 4A40                       		tst.w	d0
00015036 679C                       		beq.s	loc_149DE
00015038 6B00                       		bmi.s	loc_14A5A
0001503A 0C00 0010                  		cmpi.b	#$10,d0
0001503E 6700                       		beq.s	loc_14A66
00015040 3202                       		move.w	d2,d1
00015042 0241 000F                  		andi.w	#$F,d1
00015046 D041                       		add.w	d1,d0
00015048 323C 000F                  		move.w	#$F,d1
0001504C 9240                       		sub.w	d0,d1
0001504E 4E75                       		rts	
00015050                            ; ===========================================================================
00015050                            
00015050                            loc_14A5A:
00015050 3202                       		move.w	d2,d1
00015052 0241 000F                  		andi.w	#$F,d1
00015056 D041                       		add.w	d1,d0
00015058 6A00 FF7A                  		bpl.w	loc_149DE
0001505C                            
0001505C                            loc_14A66:
0001505C 944B                       		sub.w	a3,d2
0001505E 6100 0000                  		bsr.w	FindFloor2
00015062 D44B                       		add.w	a3,d2
00015064 0441 0010                  		subi.w	#$10,d1
00015068 4E75                       		rts	
0001506A                            ; End of function FindFloor
0001506A                            
0001506A                            
0001506A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001506A                            
0001506A                            
0001506A                            FindFloor2:				; XREF: FindFloor
0001506A 6100 FEE6                  		bsr.w	Floor_ChkTile
0001506E 3011                       		move.w	(a1),d0
00015070 3800                       		move.w	d0,d4
00015072 0240 07FF                  		andi.w	#$7FF,d0
00015076 6700                       		beq.s	loc_14A86
00015078 0B04                       		btst	d5,d4
0001507A 6600                       		bne.s	loc_14A94
0001507C                            
0001507C                            loc_14A86:
0001507C 323C 000F                  		move.w	#$F,d1
00015080 3002                       		move.w	d2,d0
00015082 0240 000F                  		andi.w	#$F,d0
00015086 9240                       		sub.w	d0,d1
00015088 4E75                       		rts	
0001508A                            ; ===========================================================================
0001508A                            
0001508A                            loc_14A94:
0001508A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001508E 1032 0000                  		move.b	(a2,d0.w),d0
00015092 0240 00FF                  		andi.w	#$FF,d0
00015096 67E4                       		beq.s	loc_14A86
00015098 45F9 0000 0000             		lea	(AngleMap).l,a2
0001509E 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150A2 E948                       		lsl.w	#4,d0
000150A4 3203                       		move.w	d3,d1
000150A6 0804 000B                  		btst	#$B,d4
000150AA 6700                       		beq.s	loc_14ABA
000150AC 4641                       		not.w	d1
000150AE 4414                       		neg.b	(a4)
000150B0                            
000150B0                            loc_14ABA:
000150B0 0804 000C                  		btst	#$C,d4
000150B4 6700                       		beq.s	loc_14ACA
000150B6 0614 0040                  		addi.b	#$40,(a4)
000150BA 4414                       		neg.b	(a4)
000150BC 0414 0040                  		subi.b	#$40,(a4)
000150C0                            
000150C0                            loc_14ACA:
000150C0 0241 000F                  		andi.w	#$F,d1
000150C4 D240                       		add.w	d0,d1
000150C6 45F9 0000 0000             		lea	(CollArray1).l,a2
000150CC 1032 1000                  		move.b	(a2,d1.w),d0
000150D0 4880                       		ext.w	d0
000150D2 BD44                       		eor.w	d6,d4
000150D4 0804 000C                  		btst	#$C,d4
000150D8 6700                       		beq.s	loc_14AE6
000150DA 4440                       		neg.w	d0
000150DC                            
000150DC                            loc_14AE6:
000150DC 4A40                       		tst.w	d0
000150DE 679C                       		beq.s	loc_14A86
000150E0 6B00                       		bmi.s	loc_14AFC
000150E2 3202                       		move.w	d2,d1
000150E4 0241 000F                  		andi.w	#$F,d1
000150E8 D041                       		add.w	d1,d0
000150EA 323C 000F                  		move.w	#$F,d1
000150EE 9240                       		sub.w	d0,d1
000150F0 4E75                       		rts	
000150F2                            ; ===========================================================================
000150F2                            
000150F2                            loc_14AFC:
000150F2 3202                       		move.w	d2,d1
000150F4 0241 000F                  		andi.w	#$F,d1
000150F8 D041                       		add.w	d1,d0
000150FA 6A00 FF80                  		bpl.w	loc_14A86
000150FE 4641                       		not.w	d1
00015100 4E75                       		rts	
00015102                            ; End of function FindFloor2
00015102                            
00015102                            
00015102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015102                            
00015102                            
00015102                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015102 6100 FE4E                  		bsr.w	Floor_ChkTile
00015106 3011                       		move.w	(a1),d0
00015108 3800                       		move.w	d0,d4
0001510A 0240 07FF                  		andi.w	#$7FF,d0
0001510E 6700                       		beq.s	loc_14B1E
00015110 0B04                       		btst	d5,d4
00015112 6600                       		bne.s	loc_14B2C
00015114                            
00015114                            loc_14B1E:
00015114 D64B                       		add.w	a3,d3
00015116 6100 0000                  		bsr.w	FindWall2
0001511A 964B                       		sub.w	a3,d3
0001511C 0641 0010                  		addi.w	#$10,d1
00015120 4E75                       		rts	
00015122                            ; ===========================================================================
00015122                            
00015122                            loc_14B2C:
00015122 2478 F796                  		movea.l	($FFFFF796).w,a2
00015126 1032 0000                  		move.b	(a2,d0.w),d0
0001512A 0240 00FF                  		andi.w	#$FF,d0
0001512E 67E4                       		beq.s	loc_14B1E
00015130 45F9 0000 0000             		lea	(AngleMap).l,a2
00015136 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001513A E948                       		lsl.w	#4,d0
0001513C 3202                       		move.w	d2,d1
0001513E 0804 000C                  		btst	#$C,d4
00015142 6700                       		beq.s	loc_14B5A
00015144 4641                       		not.w	d1
00015146 0614 0040                  		addi.b	#$40,(a4)
0001514A 4414                       		neg.b	(a4)
0001514C 0414 0040                  		subi.b	#$40,(a4)
00015150                            
00015150                            loc_14B5A:
00015150 0804 000B                  		btst	#$B,d4
00015154 6700                       		beq.s	loc_14B62
00015156 4414                       		neg.b	(a4)
00015158                            
00015158                            loc_14B62:
00015158 0241 000F                  		andi.w	#$F,d1
0001515C D240                       		add.w	d0,d1
0001515E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015164 1032 1000                  		move.b	(a2,d1.w),d0
00015168 4880                       		ext.w	d0
0001516A BD44                       		eor.w	d6,d4
0001516C 0804 000B                  		btst	#$B,d4
00015170 6700                       		beq.s	loc_14B7E
00015172 4440                       		neg.w	d0
00015174                            
00015174                            loc_14B7E:
00015174 4A40                       		tst.w	d0
00015176 679C                       		beq.s	loc_14B1E
00015178 6B00                       		bmi.s	loc_14B9A
0001517A 0C00 0010                  		cmpi.b	#$10,d0
0001517E 6700                       		beq.s	loc_14BA6
00015180 3203                       		move.w	d3,d1
00015182 0241 000F                  		andi.w	#$F,d1
00015186 D041                       		add.w	d1,d0
00015188 323C 000F                  		move.w	#$F,d1
0001518C 9240                       		sub.w	d0,d1
0001518E 4E75                       		rts	
00015190                            ; ===========================================================================
00015190                            
00015190                            loc_14B9A:
00015190 3203                       		move.w	d3,d1
00015192 0241 000F                  		andi.w	#$F,d1
00015196 D041                       		add.w	d1,d0
00015198 6A00 FF7A                  		bpl.w	loc_14B1E
0001519C                            
0001519C                            loc_14BA6:
0001519C 964B                       		sub.w	a3,d3
0001519E 6100 0000                  		bsr.w	FindWall2
000151A2 D64B                       		add.w	a3,d3
000151A4 0441 0010                  		subi.w	#$10,d1
000151A8 4E75                       		rts	
000151AA                            ; End of function FindWall
000151AA                            
000151AA                            
000151AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151AA                            
000151AA                            
000151AA                            FindWall2:				; XREF: FindWall
000151AA 6100 FDA6                  		bsr.w	Floor_ChkTile
000151AE 3011                       		move.w	(a1),d0
000151B0 3800                       		move.w	d0,d4
000151B2 0240 07FF                  		andi.w	#$7FF,d0
000151B6 6700                       		beq.s	loc_14BC6
000151B8 0B04                       		btst	d5,d4
000151BA 6600                       		bne.s	loc_14BD4
000151BC                            
000151BC                            loc_14BC6:
000151BC 323C 000F                  		move.w	#$F,d1
000151C0 3003                       		move.w	d3,d0
000151C2 0240 000F                  		andi.w	#$F,d0
000151C6 9240                       		sub.w	d0,d1
000151C8 4E75                       		rts	
000151CA                            ; ===========================================================================
000151CA                            
000151CA                            loc_14BD4:
000151CA 2478 F796                  		movea.l	($FFFFF796).w,a2
000151CE 1032 0000                  		move.b	(a2,d0.w),d0
000151D2 0240 00FF                  		andi.w	#$FF,d0
000151D6 67E4                       		beq.s	loc_14BC6
000151D8 45F9 0000 0000             		lea	(AngleMap).l,a2
000151DE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151E2 E948                       		lsl.w	#4,d0
000151E4 3202                       		move.w	d2,d1
000151E6 0804 000C                  		btst	#$C,d4
000151EA 6700                       		beq.s	loc_14C02
000151EC 4641                       		not.w	d1
000151EE 0614 0040                  		addi.b	#$40,(a4)
000151F2 4414                       		neg.b	(a4)
000151F4 0414 0040                  		subi.b	#$40,(a4)
000151F8                            
000151F8                            loc_14C02:
000151F8 0804 000B                  		btst	#$B,d4
000151FC 6700                       		beq.s	loc_14C0A
000151FE 4414                       		neg.b	(a4)
00015200                            
00015200                            loc_14C0A:
00015200 0241 000F                  		andi.w	#$F,d1
00015204 D240                       		add.w	d0,d1
00015206 45F9 0000 0000             		lea	(CollArray2).l,a2
0001520C 1032 1000                  		move.b	(a2,d1.w),d0
00015210 4880                       		ext.w	d0
00015212 BD44                       		eor.w	d6,d4
00015214 0804 000B                  		btst	#$B,d4
00015218 6700                       		beq.s	loc_14C26
0001521A 4440                       		neg.w	d0
0001521C                            
0001521C                            loc_14C26:
0001521C 4A40                       		tst.w	d0
0001521E 679C                       		beq.s	loc_14BC6
00015220 6B00                       		bmi.s	loc_14C3C
00015222 3203                       		move.w	d3,d1
00015224 0241 000F                  		andi.w	#$F,d1
00015228 D041                       		add.w	d1,d0
0001522A 323C 000F                  		move.w	#$F,d1
0001522E 9240                       		sub.w	d0,d1
00015230 4E75                       		rts	
00015232                            ; ===========================================================================
00015232                            
00015232                            loc_14C3C:
00015232 3203                       		move.w	d3,d1
00015234 0241 000F                  		andi.w	#$F,d1
00015238 D041                       		add.w	d1,d0
0001523A 6A00 FF80                  		bpl.w	loc_14BC6
0001523E 4641                       		not.w	d1
00015240 4E75                       		rts	
00015242                            ; End of function FindWall2
00015242                            
00015242                            ; ---------------------------------------------------------------------------
00015242                            ; Unused floor/wall subroutine - logs something	to do with collision
00015242                            ; ---------------------------------------------------------------------------
00015242                            
00015242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015242                            
00015242                            
00015242                            FloorLog_Unk:				; XREF: Level
00015242 4E75                       		rts	
00015244                            
00015244 43F9 0000 0000             		lea	(CollArray1).l,a1
0001524A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015250 363C 00FF                  		move.w	#$FF,d3
00015254                            
00015254                            loc_14C5E:
00015254 7A10                       		moveq	#$10,d5
00015256 343C 000F                  		move.w	#$F,d2
0001525A                            
0001525A                            loc_14C64:
0001525A 7800                       		moveq	#0,d4
0001525C 323C 000F                  		move.w	#$F,d1
00015260                            
00015260                            loc_14C6A:
00015260 3019                       		move.w	(a1)+,d0
00015262 EAA8                       		lsr.l	d5,d0
00015264 D944                       		addx.w	d4,d4
00015266 51C9 FFF8                  		dbf	d1,loc_14C6A
0001526A                            
0001526A 34C4                       		move.w	d4,(a2)+
0001526C 92FC 0020                  		suba.w	#$20,a1
00015270 5345                       		subq.w	#1,d5
00015272 51CA FFE6                  		dbf	d2,loc_14C64
00015276                            
00015276 D2FC 0020                  		adda.w	#$20,a1
0001527A 51CB FFD8                  		dbf	d3,loc_14C5E
0001527E                            
0001527E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015284 45F9 0000 0000             		lea	(CollArray2).l,a2
0001528A 6100                       		bsr.s	FloorLog_Unk2
0001528C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015292 45F9 0000 0000             		lea	(CollArray1).l,a2
00015298                            
00015298                            ; End of function FloorLog_Unk
00015298                            
00015298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015298                            
00015298                            
00015298                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015298 363C 0FFF                  		move.w	#$FFF,d3
0001529C                            
0001529C                            loc_14CA6:
0001529C 7400                       		moveq	#0,d2
0001529E 323C 000F                  		move.w	#$F,d1
000152A2 3019                       		move.w	(a1)+,d0
000152A4 6700                       		beq.s	loc_14CD4
000152A6 6B00                       		bmi.s	loc_14CBE
000152A8                            
000152A8                            loc_14CB2:
000152A8 E248                       		lsr.w	#1,d0
000152AA 6400                       		bcc.s	loc_14CB8
000152AC 5202                       		addq.b	#1,d2
000152AE                            
000152AE                            loc_14CB8:
000152AE 51C9 FFF8                  		dbf	d1,loc_14CB2
000152B2                            
000152B2 6000                       		bra.s	loc_14CD6
000152B4                            ; ===========================================================================
000152B4                            
000152B4                            loc_14CBE:
000152B4 0C40 FFFF                  		cmpi.w	#-1,d0
000152B8 6700                       		beq.s	loc_14CD0
000152BA                            
000152BA                            loc_14CC4:
000152BA E348                       		lsl.w	#1,d0
000152BC 6400                       		bcc.s	loc_14CCA
000152BE 5302                       		subq.b	#1,d2
000152C0                            
000152C0                            loc_14CCA:
000152C0 51C9 FFF8                  		dbf	d1,loc_14CC4
000152C4                            
000152C4 6000                       		bra.s	loc_14CD6
000152C6                            ; ===========================================================================
000152C6                            
000152C6                            loc_14CD0:
000152C6 303C 0010                  		move.w	#$10,d0
000152CA                            
000152CA                            loc_14CD4:
000152CA 3400                       		move.w	d0,d2
000152CC                            
000152CC                            loc_14CD6:
000152CC 14C2                       		move.b	d2,(a2)+
000152CE 51CB FFCC                  		dbf	d3,loc_14CA6
000152D2                            
000152D2 4E75                       		rts	
000152D4                            
000152D4                            ; End of function FloorLog_Unk2
000152D4                            
000152D4                            
000152D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152D4                            
000152D4                            
000152D4                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152D4 2628 0008                  		move.l	8(a0),d3
000152D8 2428 000C                  		move.l	$C(a0),d2
000152DC 3228 0010                  		move.w	$10(a0),d1
000152E0 48C1                       		ext.l	d1
000152E2 E181                       		asl.l	#8,d1
000152E4 D681                       		add.l	d1,d3
000152E6 3228 0012                  		move.w	$12(a0),d1
000152EA 48C1                       		ext.l	d1
000152EC E181                       		asl.l	#8,d1
000152EE D481                       		add.l	d1,d2
000152F0 4842                       		swap	d2
000152F2 4843                       		swap	d3
000152F4 11C0 F768                  		move.b	d0,($FFFFF768).w
000152F8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000152FC 1200                       		move.b	d0,d1
000152FE 0600 0020                  		addi.b	#$20,d0
00015302 6A00                       		bpl.s	loc_14D1A
00015304 1001                       		move.b	d1,d0
00015306 6A00                       		bpl.s	loc_14D14
00015308 5300                       		subq.b	#1,d0
0001530A                            
0001530A                            loc_14D14:
0001530A 0600 0020                  		addi.b	#$20,d0
0001530E 6000                       		bra.s	loc_14D24
00015310                            ; ===========================================================================
00015310                            
00015310                            loc_14D1A:
00015310 1001                       		move.b	d1,d0
00015312 6A00                       		bpl.s	loc_14D20
00015314 5200                       		addq.b	#1,d0
00015316                            
00015316                            loc_14D20:
00015316 0600 001F                  		addi.b	#$1F,d0
0001531A                            
0001531A                            loc_14D24:
0001531A 0200 00C0                  		andi.b	#$C0,d0
0001531E 6700 0000                  		beq.w	loc_14DF0
00015322 0C00 0080                  		cmpi.b	#$80,d0
00015326 6700 0000                  		beq.w	loc_14F7C
0001532A 0201 0038                  		andi.b	#$38,d1
0001532E 6600                       		bne.s	loc_14D3C
00015330 5042                       		addq.w	#8,d2
00015332                            
00015332                            loc_14D3C:
00015332 0C00 0040                  		cmpi.b	#$40,d0
00015336 6700 0000                  		beq.w	loc_1504A
0001533A 6000 0000                  		bra.w	loc_14EBC
0001533E                            
0001533E                            ; End of function Sonic_WalkSpeed
0001533E                            
0001533E                            
0001533E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001533E                            
0001533E                            
0001533E                            sub_14D48:				; XREF: Sonic_Jump
0001533E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015342 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015346 0600 0020                  		addi.b	#$20,d0
0001534A 0200 00C0                  		andi.b	#$C0,d0
0001534E 0C00 0040                  		cmpi.b	#$40,d0
00015352 6700 0000                  		beq.w	loc_14FD6
00015356 0C00 0080                  		cmpi.b	#$80,d0
0001535A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001535E 0C00 00C0                  		cmpi.b	#$C0,d0
00015362 6700 0000                  		beq.w	sub_14E50
00015366                            
00015366                            ; End of function sub_14D48
00015366                            
00015366                            ; ---------------------------------------------------------------------------
00015366                            ; Subroutine to	make Sonic land	on the floor after jumping
00015366                            ; ---------------------------------------------------------------------------
00015366                            
00015366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015366                            
00015366                            
00015366                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015366 3428 000C                  		move.w	$C(a0),d2
0001536A 3628 0008                  		move.w	8(a0),d3
0001536E 7000                       		moveq	#0,d0
00015370 1028 0016                  		move.b	$16(a0),d0
00015374 4880                       		ext.w	d0
00015376 D440                       		add.w	d0,d2
00015378 1028 0017                  		move.b	$17(a0),d0
0001537C 4880                       		ext.w	d0
0001537E D640                       		add.w	d0,d3
00015380 49F8 F768                  		lea	($FFFFF768).w,a4
00015384 367C 0010                  		movea.w	#$10,a3
00015388 3C3C 0000                  		move.w	#0,d6
0001538C 7A0D                       		moveq	#$D,d5
0001538E 6100 FC34                  		bsr.w	FindFloor
00015392 3F01                       		move.w	d1,-(sp)
00015394 3428 000C                  		move.w	$C(a0),d2
00015398 3628 0008                  		move.w	8(a0),d3
0001539C 7000                       		moveq	#0,d0
0001539E 1028 0016                  		move.b	$16(a0),d0
000153A2 4880                       		ext.w	d0
000153A4 D440                       		add.w	d0,d2
000153A6 1028 0017                  		move.b	$17(a0),d0
000153AA 4880                       		ext.w	d0
000153AC 9640                       		sub.w	d0,d3
000153AE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153B2 367C 0010                  		movea.w	#$10,a3
000153B6 3C3C 0000                  		move.w	#0,d6
000153BA 7A0D                       		moveq	#$D,d5
000153BC 6100 FC06                  		bsr.w	FindFloor
000153C0 301F                       		move.w	(sp)+,d0
000153C2 143C 0000                  		move.b	#0,d2
000153C6                            
000153C6                            loc_14DD0:
000153C6 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153CA B240                       		cmp.w	d0,d1
000153CC 6F00                       		ble.s	loc_14DDE
000153CE 1638 F768                  		move.b	($FFFFF768).w,d3
000153D2 C141                       		exg	d0,d1
000153D4                            
000153D4                            loc_14DDE:
000153D4 0803 0000                  		btst	#0,d3
000153D8 6700                       		beq.s	locret_14DE6
000153DA 1602                       		move.b	d2,d3
000153DC                            
000153DC                            locret_14DE6:
000153DC 4E75                       		rts	
000153DE                            
000153DE                            ; End of function Sonic_HitFloor
000153DE                            
000153DE                            ; ===========================================================================
000153DE 3428 000C                  		move.w	$C(a0),d2
000153E2 3628 0008                  		move.w	8(a0),d3
000153E6                            
000153E6                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153E6 0642 000A                  		addi.w	#$A,d2
000153EA 49F8 F768                  		lea	($FFFFF768).w,a4
000153EE 367C 0010                  		movea.w	#$10,a3
000153F2 3C3C 0000                  		move.w	#0,d6
000153F6 7A0E                       		moveq	#$E,d5
000153F8 6100 FBCA                  		bsr.w	FindFloor
000153FC 143C 0000                  		move.b	#0,d2
00015400                            
00015400                            loc_14E0A:				; XREF: sub_14EB4
00015400 1638 F768                  		move.b	($FFFFF768).w,d3
00015404 0803 0000                  		btst	#0,d3
00015408 6700                       		beq.s	locret_14E16
0001540A 1602                       		move.b	d2,d3
0001540C                            
0001540C                            locret_14E16:
0001540C 4E75                       		rts	
0001540E                            
0001540E                            ; ---------------------------------------------------------------------------
0001540E                            ; Subroutine allowing objects to interact with the floor
0001540E                            ; ---------------------------------------------------------------------------
0001540E                            
0001540E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001540E                            
0001540E                            
0001540E                            ObjHitFloor:
0001540E 3628 0008                  		move.w	8(a0),d3
00015412                            
00015412                            ; End of function ObjHitFloor
00015412                            
00015412                            
00015412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015412                            
00015412                            
00015412                            ObjHitFloor2:
00015412 3428 000C                  		move.w	$C(a0),d2
00015416 7000                       		moveq	#0,d0
00015418 1028 0016                  		move.b	$16(a0),d0
0001541C 4880                       		ext.w	d0
0001541E D440                       		add.w	d0,d2
00015420 49F8 F768                  		lea	($FFFFF768).w,a4
00015424 18BC 0000                  		move.b	#0,(a4)
00015428 367C 0010                  		movea.w	#$10,a3
0001542C 3C3C 0000                  		move.w	#0,d6
00015430 7A0D                       		moveq	#$D,d5
00015432 6100 FB90                  		bsr.w	FindFloor
00015436 1638 F768                  		move.b	($FFFFF768).w,d3
0001543A 0803 0000                  		btst	#0,d3
0001543E 6700                       		beq.s	locret_14E4E
00015440 163C 0000                  		move.b	#0,d3
00015444                            
00015444                            locret_14E4E:
00015444 4E75                       		rts	
00015446                            ; End of function ObjHitFloor2
00015446                            
00015446                            
00015446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015446                            
00015446                            
00015446                            sub_14E50:				; XREF: sub_14D48
00015446 3428 000C                  		move.w	$C(a0),d2
0001544A 3628 0008                  		move.w	8(a0),d3
0001544E 7000                       		moveq	#0,d0
00015450 1028 0017                  		move.b	$17(a0),d0
00015454 4880                       		ext.w	d0
00015456 9440                       		sub.w	d0,d2
00015458 1028 0016                  		move.b	$16(a0),d0
0001545C 4880                       		ext.w	d0
0001545E D640                       		add.w	d0,d3
00015460 49F8 F768                  		lea	($FFFFF768).w,a4
00015464 367C 0010                  		movea.w	#$10,a3
00015468 3C3C 0000                  		move.w	#0,d6
0001546C 7A0E                       		moveq	#$E,d5
0001546E 6100 FC92                  		bsr.w	FindWall
00015472 3F01                       		move.w	d1,-(sp)
00015474 3428 000C                  		move.w	$C(a0),d2
00015478 3628 0008                  		move.w	8(a0),d3
0001547C 7000                       		moveq	#0,d0
0001547E 1028 0017                  		move.b	$17(a0),d0
00015482 4880                       		ext.w	d0
00015484 D440                       		add.w	d0,d2
00015486 1028 0016                  		move.b	$16(a0),d0
0001548A 4880                       		ext.w	d0
0001548C D640                       		add.w	d0,d3
0001548E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015492 367C 0010                  		movea.w	#$10,a3
00015496 3C3C 0000                  		move.w	#0,d6
0001549A 7A0E                       		moveq	#$E,d5
0001549C 6100 FC64                  		bsr.w	FindWall
000154A0 301F                       		move.w	(sp)+,d0
000154A2 143C 00C0                  		move.b	#-$40,d2
000154A6 6000 FF1E                  		bra.w	loc_14DD0
000154AA                            
000154AA                            ; End of function sub_14E50
000154AA                            
000154AA                            
000154AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154AA                            
000154AA                            
000154AA                            sub_14EB4:				; XREF: Sonic_Floor
000154AA 3428 000C                  		move.w	$C(a0),d2
000154AE 3628 0008                  		move.w	8(a0),d3
000154B2                            
000154B2                            loc_14EBC:
000154B2 0643 000A                  		addi.w	#$A,d3
000154B6 49F8 F768                  		lea	($FFFFF768).w,a4
000154BA 367C 0010                  		movea.w	#$10,a3
000154BE 3C3C 0000                  		move.w	#0,d6
000154C2 7A0E                       		moveq	#$E,d5
000154C4 6100 FC3C                  		bsr.w	FindWall
000154C8 143C 00C0                  		move.b	#-$40,d2
000154CC 6000 FF32                  		bra.w	loc_14E0A
000154D0                            
000154D0                            ; End of function sub_14EB4
000154D0                            
000154D0                            ; ---------------------------------------------------------------------------
000154D0                            ; Subroutine to	detect when an object hits a wall to its right
000154D0                            ; ---------------------------------------------------------------------------
000154D0                            
000154D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D0                            
000154D0                            
000154D0                            ObjHitWallRight:
000154D0 D668 0008                  		add.w	8(a0),d3
000154D4 3428 000C                  		move.w	$C(a0),d2
000154D8 49F8 F768                  		lea	($FFFFF768).w,a4
000154DC 18BC 0000                  		move.b	#0,(a4)
000154E0 367C 0010                  		movea.w	#$10,a3
000154E4 3C3C 0000                  		move.w	#0,d6
000154E8 7A0E                       		moveq	#$E,d5
000154EA 6100 FC16                  		bsr.w	FindWall
000154EE 1638 F768                  		move.b	($FFFFF768).w,d3
000154F2 0803 0000                  		btst	#0,d3
000154F6 6700                       		beq.s	locret_14F06
000154F8 163C 00C0                  		move.b	#-$40,d3
000154FC                            
000154FC                            locret_14F06:
000154FC 4E75                       		rts	
000154FE                            
000154FE                            ; End of function ObjHitWallRight
000154FE                            
000154FE                            ; ---------------------------------------------------------------------------
000154FE                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000154FE                            ; touches them
000154FE                            ; ---------------------------------------------------------------------------
000154FE                            
000154FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154FE                            
000154FE                            
000154FE                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000154FE 3428 000C                  		move.w	$C(a0),d2
00015502 3628 0008                  		move.w	8(a0),d3
00015506 7000                       		moveq	#0,d0
00015508 1028 0016                  		move.b	$16(a0),d0
0001550C 4880                       		ext.w	d0
0001550E 9440                       		sub.w	d0,d2
00015510 0A42 000F                  		eori.w	#$F,d2
00015514 1028 0017                  		move.b	$17(a0),d0
00015518 4880                       		ext.w	d0
0001551A D640                       		add.w	d0,d3
0001551C 49F8 F768                  		lea	($FFFFF768).w,a4
00015520 367C FFF0                  		movea.w	#-$10,a3
00015524 3C3C 1000                  		move.w	#$1000,d6
00015528 7A0E                       		moveq	#$E,d5
0001552A 6100 FA98                  		bsr.w	FindFloor
0001552E 3F01                       		move.w	d1,-(sp)
00015530 3428 000C                  		move.w	$C(a0),d2
00015534 3628 0008                  		move.w	8(a0),d3
00015538 7000                       		moveq	#0,d0
0001553A 1028 0016                  		move.b	$16(a0),d0
0001553E 4880                       		ext.w	d0
00015540 9440                       		sub.w	d0,d2
00015542 0A42 000F                  		eori.w	#$F,d2
00015546 1028 0017                  		move.b	$17(a0),d0
0001554A 4880                       		ext.w	d0
0001554C 9640                       		sub.w	d0,d3
0001554E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015552 367C FFF0                  		movea.w	#-$10,a3
00015556 3C3C 1000                  		move.w	#$1000,d6
0001555A 7A0E                       		moveq	#$E,d5
0001555C 6100 FA66                  		bsr.w	FindFloor
00015560 301F                       		move.w	(sp)+,d0
00015562 143C 0080                  		move.b	#-$80,d2
00015566 6000 FE5E                  		bra.w	loc_14DD0
0001556A                            ; End of function Sonic_DontRunOnWalls
0001556A                            
0001556A                            ; ===========================================================================
0001556A 3428 000C                  		move.w	$C(a0),d2
0001556E 3628 0008                  		move.w	8(a0),d3
00015572                            
00015572                            loc_14F7C:
00015572 0442 000A                  		subi.w	#$A,d2
00015576 0A42 000F                  		eori.w	#$F,d2
0001557A 49F8 F768                  		lea	($FFFFF768).w,a4
0001557E 367C FFF0                  		movea.w	#-$10,a3
00015582 3C3C 1000                  		move.w	#$1000,d6
00015586 7A0E                       		moveq	#$E,d5
00015588 6100 FA3A                  		bsr.w	FindFloor
0001558C 143C 0080                  		move.b	#-$80,d2
00015590 6000 FE6E                  		bra.w	loc_14E0A
00015594                            
00015594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015594                            
00015594                            
00015594                            ObjHitCeiling:
00015594 3428 000C                  		move.w	$C(a0),d2
00015598 3628 0008                  		move.w	8(a0),d3
0001559C 7000                       		moveq	#0,d0
0001559E 1028 0016                  		move.b	$16(a0),d0
000155A2 4880                       		ext.w	d0
000155A4 9440                       		sub.w	d0,d2
000155A6 0A42 000F                  		eori.w	#$F,d2
000155AA 49F8 F768                  		lea	($FFFFF768).w,a4
000155AE 367C FFF0                  		movea.w	#-$10,a3
000155B2 3C3C 1000                  		move.w	#$1000,d6
000155B6 7A0E                       		moveq	#$E,d5
000155B8 6100 FA0A                  		bsr.w	FindFloor
000155BC 1638 F768                  		move.b	($FFFFF768).w,d3
000155C0 0803 0000                  		btst	#0,d3
000155C4 6700                       		beq.s	locret_14FD4
000155C6 163C 0080                  		move.b	#-$80,d3
000155CA                            
000155CA                            locret_14FD4:
000155CA 4E75                       		rts	
000155CC                            ; End of function ObjHitCeiling
000155CC                            
000155CC                            ; ===========================================================================
000155CC                            
000155CC                            loc_14FD6:				; XREF: sub_14D48
000155CC 3428 000C                  		move.w	$C(a0),d2
000155D0 3628 0008                  		move.w	8(a0),d3
000155D4 7000                       		moveq	#0,d0
000155D6 1028 0017                  		move.b	$17(a0),d0
000155DA 4880                       		ext.w	d0
000155DC 9440                       		sub.w	d0,d2
000155DE 1028 0016                  		move.b	$16(a0),d0
000155E2 4880                       		ext.w	d0
000155E4 9640                       		sub.w	d0,d3
000155E6 0A43 000F                  		eori.w	#$F,d3
000155EA 49F8 F768                  		lea	($FFFFF768).w,a4
000155EE 367C FFF0                  		movea.w	#-$10,a3
000155F2 3C3C 0800                  		move.w	#$800,d6
000155F6 7A0E                       		moveq	#$E,d5
000155F8 6100 FB08                  		bsr.w	FindWall
000155FC 3F01                       		move.w	d1,-(sp)
000155FE 3428 000C                  		move.w	$C(a0),d2
00015602 3628 0008                  		move.w	8(a0),d3
00015606 7000                       		moveq	#0,d0
00015608 1028 0017                  		move.b	$17(a0),d0
0001560C 4880                       		ext.w	d0
0001560E D440                       		add.w	d0,d2
00015610 1028 0016                  		move.b	$16(a0),d0
00015614 4880                       		ext.w	d0
00015616 9640                       		sub.w	d0,d3
00015618 0A43 000F                  		eori.w	#$F,d3
0001561C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015620 367C FFF0                  		movea.w	#-$10,a3
00015624 3C3C 0800                  		move.w	#$800,d6
00015628 7A0E                       		moveq	#$E,d5
0001562A 6100 FAD6                  		bsr.w	FindWall
0001562E 301F                       		move.w	(sp)+,d0
00015630 143C 0040                  		move.b	#$40,d2
00015634 6000 FD90                  		bra.w	loc_14DD0
00015638                            
00015638                            ; ---------------------------------------------------------------------------
00015638                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015638                            ; ---------------------------------------------------------------------------
00015638                            
00015638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015638                            
00015638                            
00015638                            Sonic_HitWall:				; XREF: Sonic_Floor
00015638 3428 000C                  		move.w	$C(a0),d2
0001563C 3628 0008                  		move.w	8(a0),d3
00015640                            
00015640                            loc_1504A:
00015640 0443 000A                  		subi.w	#$A,d3
00015644 0A43 000F                  		eori.w	#$F,d3
00015648 49F8 F768                  		lea	($FFFFF768).w,a4
0001564C 367C FFF0                  		movea.w	#-$10,a3
00015650 3C3C 0800                  		move.w	#$800,d6
00015654 7A0E                       		moveq	#$E,d5
00015656 6100 FAAA                  		bsr.w	FindWall
0001565A 143C 0040                  		move.b	#$40,d2
0001565E 6000 FDA0                  		bra.w	loc_14E0A
00015662                            ; End of function Sonic_HitWall
00015662                            
00015662                            ; ---------------------------------------------------------------------------
00015662                            ; Subroutine to	detect when an object hits a wall to its left
00015662                            ; ---------------------------------------------------------------------------
00015662                            
00015662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015662                            
00015662                            
00015662                            ObjHitWallLeft:
00015662 D668 0008                  		add.w	8(a0),d3
00015666 3428 000C                  		move.w	$C(a0),d2
0001566A 49F8 F768                  		lea	($FFFFF768).w,a4
0001566E 18BC 0000                  		move.b	#0,(a4)
00015672 367C FFF0                  		movea.w	#-$10,a3
00015676 3C3C 0800                  		move.w	#$800,d6
0001567A 7A0E                       		moveq	#$E,d5
0001567C 6100 FA84                  		bsr.w	FindWall
00015680 1638 F768                  		move.b	($FFFFF768).w,d3
00015684 0803 0000                  		btst	#0,d3
00015688 6700                       		beq.s	locret_15098
0001568A 163C 0040                  		move.b	#$40,d3
0001568E                            
0001568E                            locret_15098:
0001568E 4E75                       		rts	
00015690                            ; End of function ObjHitWallLeft
00015690                            
00015690                            ; ===========================================================================
00015690                            ; ---------------------------------------------------------------------------
00015690                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015690                            ; ---------------------------------------------------------------------------
00015690                            
00015690                            Obj66:					; XREF: Obj_Index
00015690 7000                       		moveq	#0,d0
00015692 1028 0024                  		move.b	$24(a0),d0
00015696 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001569A 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001569E                            ; ===========================================================================
0001569E 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000156A0 0000                       		dc.w Obj66_Action-Obj66_Index
000156A2 0000                       		dc.w Obj66_Display-Obj66_Index
000156A4 0000                       		dc.w Obj66_Release-Obj66_Index
000156A6                            ; ===========================================================================
000156A6                            
000156A6                            Obj66_Main:				; XREF: Obj66_Index
000156A6 5428 0024                  		addq.b	#2,$24(a0)
000156AA 323C 0001                  		move.w	#1,d1
000156AE 2248                       		movea.l	a0,a1
000156B0 6000                       		bra.s	Obj66_MakeItem
000156B2                            ; ===========================================================================
000156B2                            
000156B2                            Obj66_Loop:
000156B2 6100 8986                  		bsr.w	SingleObjLoad
000156B6 6600                       		bne.s	loc_150FE
000156B8 12BC 0066                  		move.b	#$66,0(a1)
000156BC 5829 0024                  		addq.b	#4,$24(a1)
000156C0 3368 0008 0008             		move.w	8(a0),8(a1)
000156C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156CC 137C 0003 0018             		move.b	#3,$18(a1)
000156D2 137C 0010 001A             		move.b	#$10,$1A(a1)
000156D8                            
000156D8                            Obj66_MakeItem:				; XREF: Obj66_Main
000156D8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156E0 337C 4348 0002             		move.w	#$4348,2(a1)
000156E6 0029 0004 0001             		ori.b	#4,1(a1)
000156EC 137C 0038 0019             		move.b	#$38,$19(a1)
000156F2                            
000156F2                            loc_150FE:
000156F2 51C9 FFBE                  		dbf	d1,Obj66_Loop
000156F6                            
000156F6 117C 0030 0019             		move.b	#$30,$19(a0)
000156FC 117C 0004 0018             		move.b	#4,$18(a0)
00015702 317C 003C 0030             		move.w	#$3C,$30(a0)
00015708 117C 0001 0034             		move.b	#1,$34(a0)
0001570E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015714                            
00015714                            Obj66_Action:				; XREF: Obj66_Index
00015714 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015718 4A28 0001                  		tst.b	1(a0)
0001571C 6A00 0000                  		bpl.w	Obj66_Display
00015720 323C 0030                  		move.w	#$30,d1
00015724 3401                       		move.w	d1,d2
00015726 3602                       		move.w	d2,d3
00015728 5243                       		addq.w	#1,d3
0001572A 3828 0008                  		move.w	8(a0),d4
0001572E 6100 A854                  		bsr.w	SolidObject
00015732 0828 0005 0022             		btst	#5,$22(a0)
00015738 6700 0000                  		beq.w	Obj66_Display
0001573C 43F8 D000                  		lea	($FFFFD000).w,a1
00015740 720E                       		moveq	#$E,d1
00015742 3029 0008                  		move.w	8(a1),d0
00015746 B068 0008                  		cmp.w	8(a0),d0
0001574A 6500                       		bcs.s	Obj66_GrabSonic
0001574C 7207                       		moveq	#7,d1
0001574E                            
0001574E                            Obj66_GrabSonic:
0001574E B228 001A                  		cmp.b	$1A(a0),d1
00015752 6600                       		bne.s	Obj66_Display
00015754 1141 0032                  		move.b	d1,$32(a0)
00015758 5828 0024                  		addq.b	#4,$24(a0)
0001575C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015762 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015768 337C 0800 0014             		move.w	#$800,$14(a1)
0001576E 337C 0000 0010             		move.w	#0,$10(a1)
00015774 337C 0000 0012             		move.w	#0,$12(a1)
0001577A 08A8 0005 0022             		bclr	#5,$22(a0)
00015780 08A9 0005 0022             		bclr	#5,$22(a1)
00015786 08E9 0001 0022             		bset	#1,$22(a1)
0001578C 3429 0008                  		move.w	8(a1),d2
00015790 3629 000C                  		move.w	$C(a1),d3
00015794 6100 0000                  		bsr.w	Obj66_ChgPos
00015798 D569 0008                  		add.w	d2,8(a1)
0001579C D769 000C                  		add.w	d3,$C(a1)
000157A0 E0E9 0008                  		asr	8(a1)
000157A4 E0E9 000C                  		asr	$C(a1)
000157A8                            
000157A8                            Obj66_Display:				; XREF: Obj66_Index
000157A8 6000 A4B2                  		bra.w	MarkObjGone
000157AC                            ; ===========================================================================
000157AC                            
000157AC                            Obj66_Release:				; XREF: Obj66_Index
000157AC 1028 001A                  		move.b	$1A(a0),d0
000157B0 0C00 0004                  		cmpi.b	#4,d0
000157B4 6700                       		beq.s	loc_151C8
000157B6 0C00 0007                  		cmpi.b	#7,d0
000157BA 6600                       		bne.s	loc_151F8
000157BC                            
000157BC                            loc_151C8:
000157BC B028 0032                  		cmp.b	$32(a0),d0
000157C0 6700                       		beq.s	loc_151F8
000157C2 43F8 D000                  		lea	($FFFFD000).w,a1
000157C6 337C 0000 0010             		move.w	#0,$10(a1)
000157CC 337C 0800 0012             		move.w	#$800,$12(a1)
000157D2 0C00 0004                  		cmpi.b	#4,d0
000157D6 6700                       		beq.s	loc_151F0
000157D8 337C 0800 0010             		move.w	#$800,$10(a1)
000157DE 337C 0800 0012             		move.w	#$800,$12(a1)
000157E4                            
000157E4                            loc_151F0:
000157E4 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157E8 5928 0024                  		subq.b	#4,$24(a0)
000157EC                            
000157EC                            loc_151F8:
000157EC 6100                       		bsr.s	Obj66_ChkSwitch
000157EE 6100                       		bsr.s	Obj66_ChgPos
000157F0 6000 A46A                  		bra.w	MarkObjGone
000157F4                            
000157F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157F4                            
000157F4                            
000157F4                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000157F4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000157F8 7000                       		moveq	#0,d0
000157FA 1028 0038                  		move.b	$38(a0),d0
000157FE 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015804 6700                       		beq.s	loc_15224	; if not, branch
00015806 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001580A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001580C 4428 0034                  		neg.b	$34(a0)
00015810 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015816 6000                       		bra.s	Obj66_Animate
00015818                            ; ===========================================================================
00015818                            
00015818                            loc_15224:
00015818 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001581C                            
0001581C                            Obj66_Animate:
0001581C 5328 001E                  		subq.b	#1,$1E(a0)
00015820 6A00                       		bpl.s	locret_15246
00015822 117C 0007 001E             		move.b	#7,$1E(a0)
00015828 1228 0034                  		move.b	$34(a0),d1
0001582C 1028 001A                  		move.b	$1A(a0),d0
00015830 D001                       		add.b	d1,d0
00015832 0200 000F                  		andi.b	#$F,d0
00015836 1140 001A                  		move.b	d0,$1A(a0)
0001583A                            
0001583A                            locret_15246:
0001583A 4E75                       		rts	
0001583C                            ; End of function Obj66_ChkSwitch
0001583C                            
0001583C                            
0001583C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001583C                            
0001583C                            
0001583C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001583C 43F8 D000                  		lea	($FFFFD000).w,a1
00015840 7000                       		moveq	#0,d0
00015842 1028 001A                  		move.b	$1A(a0),d0
00015846 D040                       		add.w	d0,d0
00015848 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001584C 101A                       		move.b	(a2)+,d0
0001584E 4880                       		ext.w	d0
00015850 D068 0008                  		add.w	8(a0),d0
00015854 3340 0008                  		move.w	d0,8(a1)
00015858 101A                       		move.b	(a2)+,d0
0001585A 4880                       		ext.w	d0
0001585C D068 000C                  		add.w	$C(a0),d0
00015860 3340 000C                  		move.w	d0,$C(a1)
00015864 4E75                       		rts	
00015866                            ; End of function Obj66_ChgPos
00015866                            
00015866                            ; ===========================================================================
00015866 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001586A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001586E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015872 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015876 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001587A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001587E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015882 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015886                            ; ---------------------------------------------------------------------------
00015886                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015886                            ; ---------------------------------------------------------------------------
00015886                            Map_obj66:
00015886                            	include "_maps\obj66.asm"
00015886                            ; ---------------------------------------------------------------------------
00015886                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015886                            ; ---------------------------------------------------------------------------
00015886 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001588A 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
0001588E 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015892 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015896 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001589A 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
0001589E 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000158A2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000158A6 0000                       		dc.w byte_154A4-Map_obj66
000158A8 06                         byte_152B4:	dc.b 6
000158A9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000158AE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000158B3 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000158B8 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000158BD 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000158C2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000158C7 06                         byte_152D3:	dc.b 6
000158C8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158CD 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158D2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158D7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158DC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158E1 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158E6 06                         byte_152F2:	dc.b 6
000158E7 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158EC 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000158F1 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000158F6 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000158FB 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015900 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015905 06                         byte_15311:	dc.b 6
00015906 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001590B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015910 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015915 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001591A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001591F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015924 06                         byte_15330:	dc.b 6
00015925 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001592A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001592F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015934 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015939 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001593E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015943 06                         byte_1534F:	dc.b 6
00015944 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015949 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001594E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015953 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015958 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001595D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015962 06                         byte_1536E:	dc.b 6
00015963 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015968 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001596D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015972 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015977 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001597C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015981 06                         byte_1538D:	dc.b 6
00015982 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015987 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001598C F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015991 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015996 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001599B 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000159A0 06                         byte_153AC:	dc.b 6
000159A1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000159A6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000159AB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000159B0 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000159B5 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000159BA 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000159BF 06                         byte_153CB:	dc.b 6
000159C0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000159C5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159CA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159CF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159D4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159D9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159DE 06                         byte_153EA:	dc.b 6
000159DF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159E4 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159E9 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159EE D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000159F3 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000159F8 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000159FD 06                         byte_15409:	dc.b 6
000159FE D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015A03 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015A08 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015A0D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015A12 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015A17 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015A1C 06                         byte_15428:	dc.b 6
00015A1D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A22 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A27 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A2C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A31 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A36 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A3B 06                         byte_15447:	dc.b 6
00015A3C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A41 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A46 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A4B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A50 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A55 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A5A 06                         byte_15466:	dc.b 6
00015A5B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A60 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A65 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A6A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A6F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A74 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A79 06                         byte_15485:	dc.b 6
00015A7A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A7F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A84 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A89 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A8E F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015A93 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015A98 0C                         byte_154A4:	dc.b $C
00015A99 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015A9E D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015AA3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015AA8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015AAD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015AB2 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015AB7 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015ABC 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015AC1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015AC6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015ACB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AD0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015AD6 00                         		even
00015AD6 00                         		even
00015AD6                            
00015AD6                            ; ===========================================================================
00015AD6                            ; ---------------------------------------------------------------------------
00015AD6                            ; Object 67 - disc that	you run	around (SBZ)
00015AD6                            ; ---------------------------------------------------------------------------
00015AD6                            
00015AD6                            Obj67:					; XREF: Obj_Index
00015AD6 7000                       		moveq	#0,d0
00015AD8 1028 0024                  		move.b	$24(a0),d0
00015ADC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015AE0 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015AE4                            ; ===========================================================================
00015AE4 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015AE6 0000                       		dc.w Obj67_Action-Obj67_Index
00015AE8                            ; ===========================================================================
00015AE8                            
00015AE8                            Obj67_Main:				; XREF: Obj67_Index
00015AE8 5428 0024                  		addq.b	#2,$24(a0)
00015AEC 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015AF4 317C C344 0002             		move.w	#$C344,2(a0)
00015AFA 117C 0004 0001             		move.b	#4,1(a0)
00015B00 117C 0004 0018             		move.b	#4,$18(a0)
00015B06 117C 0008 0019             		move.b	#8,$19(a0)
00015B0C 3168 0008 0032             		move.w	8(a0),$32(a0)
00015B12 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015B18 117C 0018 0034             		move.b	#$18,$34(a0)
00015B1E 117C 0048 0038             		move.b	#$48,$38(a0)
00015B24 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B28 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B2C 6700                       		beq.s	loc_15546
00015B2E 117C 0010 0034             		move.b	#$10,$34(a0)
00015B34 117C 0038 0038             		move.b	#$38,$38(a0)
00015B3A                            
00015B3A                            loc_15546:
00015B3A 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B3E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B42 4881                       		ext.w	d1
00015B44 E741                       		asl.w	#3,d1
00015B46 3141 0036                  		move.w	d1,$36(a0)
00015B4A 1028 0022                  		move.b	$22(a0),d0
00015B4E E418                       		ror.b	#2,d0
00015B50 0200 00C0                  		andi.b	#-$40,d0
00015B54 1140 0026                  		move.b	d0,$26(a0)
00015B58                            
00015B58                            Obj67_Action:				; XREF: Obj67_Index
00015B58 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B5C 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B60 6000 0000                  		bra.w	Obj67_ChkDel
00015B64                            ; ===========================================================================
00015B64                            
00015B64                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B64 7400                       		moveq	#0,d2
00015B66 1428 0038                  		move.b	$38(a0),d2
00015B6A 3602                       		move.w	d2,d3
00015B6C D643                       		add.w	d3,d3
00015B6E 43F8 D000                  		lea	($FFFFD000).w,a1
00015B72 3029 0008                  		move.w	8(a1),d0
00015B76 9068 0032                  		sub.w	$32(a0),d0
00015B7A D042                       		add.w	d2,d0
00015B7C B043                       		cmp.w	d3,d0
00015B7E 6400                       		bcc.s	loc_155A8
00015B80 3229 000C                  		move.w	$C(a1),d1
00015B84 9268 0030                  		sub.w	$30(a0),d1
00015B88 D242                       		add.w	d2,d1
00015B8A B243                       		cmp.w	d3,d1
00015B8C 6400                       		bcc.s	loc_155A8
00015B8E 0829 0001 0022             		btst	#1,$22(a1)
00015B94 6700                       		beq.s	loc_155B8
00015B96 4228 003A                  		clr.b	$3A(a0)
00015B9A 4E75                       		rts	
00015B9C                            ; ===========================================================================
00015B9C                            
00015B9C                            loc_155A8:
00015B9C 4A28 003A                  		tst.b	$3A(a0)
00015BA0 6700                       		beq.s	locret_155B6
00015BA2 4229 0038                  		clr.b	$38(a1)
00015BA6 4228 003A                  		clr.b	$3A(a0)
00015BAA                            
00015BAA                            locret_155B6:
00015BAA 4E75                       		rts	
00015BAC                            ; ===========================================================================
00015BAC                            
00015BAC                            loc_155B8:
00015BAC 4A28 003A                  		tst.b	$3A(a0)
00015BB0 6600                       		bne.s	loc_155E2
00015BB2 117C 0001 003A             		move.b	#1,$3A(a0)
00015BB8 0829 0002 0022             		btst	#2,$22(a1)
00015BBE 6600                       		bne.s	loc_155D0
00015BC0 4229 001C                  		clr.b	$1C(a1)
00015BC4                            
00015BC4                            loc_155D0:
00015BC4 08A9 0005 0022             		bclr	#5,$22(a1)
00015BCA 137C 0001 001D             		move.b	#1,$1D(a1)
00015BD0 137C 0001 0038             		move.b	#1,$38(a1)
00015BD6                            
00015BD6                            loc_155E2:
00015BD6 3029 0014                  		move.w	$14(a1),d0
00015BDA 4A68 0036                  		tst.w	$36(a0)
00015BDE 6A00                       		bpl.s	loc_15608
00015BE0 0C40 FC00                  		cmpi.w	#-$400,d0
00015BE4 6F00                       		ble.s	loc_155FA
00015BE6 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BEC 4E75                       		rts	
00015BEE                            ; ===========================================================================
00015BEE                            
00015BEE                            loc_155FA:
00015BEE 0C40 F100                  		cmpi.w	#-$F00,d0
00015BF2 6C00                       		bge.s	locret_15606
00015BF4 337C F100 0014             		move.w	#-$F00,$14(a1)
00015BFA                            
00015BFA                            locret_15606:
00015BFA 4E75                       		rts	
00015BFC                            ; ===========================================================================
00015BFC                            
00015BFC                            loc_15608:
00015BFC 0C40 0400                  		cmpi.w	#$400,d0
00015C00 6C00                       		bge.s	loc_15616
00015C02 337C 0400 0014             		move.w	#$400,$14(a1)
00015C08 4E75                       		rts	
00015C0A                            ; ===========================================================================
00015C0A                            
00015C0A                            loc_15616:
00015C0A 0C40 0F00                  		cmpi.w	#$F00,d0
00015C0E 6F00                       		ble.s	locret_15622
00015C10 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015C16                            
00015C16                            locret_15622:
00015C16 4E75                       		rts	
00015C18                            ; ===========================================================================
00015C18                            
00015C18                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015C18 3028 0036                  		move.w	$36(a0),d0
00015C1C D168 0026                  		add.w	d0,$26(a0)
00015C20 1028 0026                  		move.b	$26(a0),d0
00015C24 4EB9 0000 2C22             		jsr	(CalcSine).l
00015C2A 3428 0030                  		move.w	$30(a0),d2
00015C2E 3628 0032                  		move.w	$32(a0),d3
00015C32 7800                       		moveq	#0,d4
00015C34 1828 0034                  		move.b	$34(a0),d4
00015C38 E14C                       		lsl.w	#8,d4
00015C3A 2A04                       		move.l	d4,d5
00015C3C C9C0                       		muls.w	d0,d4
00015C3E 4844                       		swap	d4
00015C40 CBC1                       		muls.w	d1,d5
00015C42 4845                       		swap	d5
00015C44 D842                       		add.w	d2,d4
00015C46 DA43                       		add.w	d3,d5
00015C48 3144 000C                  		move.w	d4,$C(a0)
00015C4C 3145 0008                  		move.w	d5,8(a0)
00015C50 4E75                       		rts	
00015C52                            ; ===========================================================================
00015C52                            
00015C52                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C52 3028 0032                  		move.w	$32(a0),d0
00015C56 0240 FF80                  		andi.w	#-$80,d0
00015C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00015C5E 0441 0080                  		subi.w	#$80,d1
00015C62 0241 FF80                  		andi.w	#-$80,d1
00015C66 9041                       		sub.w	d1,d0
00015C68 0C40 0280                  		cmpi.w	#$280,d0
00015C6C 6200                       		bhi.s	Obj67_Delete
00015C6E 4EF9 0000 DBB4             		jmp	DisplaySprite
00015C74                            ; ===========================================================================
00015C74                            
00015C74                            Obj67_Delete:
00015C74 4EF9 0000 DBF0             		jmp	DeleteObject
00015C7A                            ; ===========================================================================
00015C7A                            ; ---------------------------------------------------------------------------
00015C7A                            ; Sprite mappings - disc that you run around (SBZ)
00015C7A                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C7A                            ; part of the level tiles.)
00015C7A                            ; ---------------------------------------------------------------------------
00015C7A                            Map_obj67:
00015C7A                            	include "_maps\obj67.asm"
00015C7A                            ; ---------------------------------------------------------------------------
00015C7A                            ; Sprite mappings - disc that you run around (SBZ)
00015C7A                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C7A                            ; part of the level tiles.)
00015C7A                            ; ---------------------------------------------------------------------------
00015C7A 0000                       		dc.w byte_15688-Map_obj67
00015C7C 01                         byte_15688:	dc.b 1
00015C7D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C82                            		even
00015C82                            		even
00015C82                            
00015C82                            ; ===========================================================================
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            ; Object 68 - conveyor belts (SBZ)
00015C82                            ; ---------------------------------------------------------------------------
00015C82                            
00015C82                            Obj68:					; XREF: Obj_Index
00015C82 7000                       		moveq	#0,d0
00015C84 1028 0024                  		move.b	$24(a0),d0
00015C88 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C8C 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015C90                            ; ===========================================================================
00015C90 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015C92 0000                       		dc.w Obj68_Action-Obj68_Index
00015C94                            ; ===========================================================================
00015C94                            
00015C94                            Obj68_Main:				; XREF: Obj68_Index
00015C94 5428 0024                  		addq.b	#2,$24(a0)
00015C98 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015C9E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CA2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CA6 6700                       		beq.s	loc_156BA	; if zero, branch
00015CA8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015CAE                            
00015CAE                            loc_156BA:
00015CAE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CB2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CB6 4881                       		ext.w	d1
00015CB8 E841                       		asr.w	#4,d1
00015CBA 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015CBE                            
00015CBE                            Obj68_Action:				; XREF: Obj68_Index
00015CBE 6100                       		bsr.s	Obj68_MoveSonic
00015CC0 3028 0008                  		move.w	8(a0),d0
00015CC4 0240 FF80                  		andi.w	#$FF80,d0
00015CC8 3238 F700                  		move.w	($FFFFF700).w,d1
00015CCC 0441 0080                  		subi.w	#$80,d1
00015CD0 0241 FF80                  		andi.w	#$FF80,d1
00015CD4 9041                       		sub.w	d1,d0
00015CD6 0C40 0280                  		cmpi.w	#$280,d0
00015CDA 6200                       		bhi.s	Obj68_Delete
00015CDC 4E75                       		rts	
00015CDE                            ; ===========================================================================
00015CDE                            
00015CDE                            Obj68_Delete:
00015CDE 4EF9 0000 DBF0             		jmp	DeleteObject
00015CE4                            ; ===========================================================================
00015CE4                            
00015CE4                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CE4 7400                       		moveq	#0,d2
00015CE6 1428 0038                  		move.b	$38(a0),d2
00015CEA 3602                       		move.w	d2,d3
00015CEC D643                       		add.w	d3,d3
00015CEE 43F8 D000                  		lea	($FFFFD000).w,a1
00015CF2 3029 0008                  		move.w	8(a1),d0
00015CF6 9068 0008                  		sub.w	8(a0),d0
00015CFA D042                       		add.w	d2,d0
00015CFC B043                       		cmp.w	d3,d0
00015CFE 6400                       		bcc.s	locret_1572E
00015D00 3229 000C                  		move.w	$C(a1),d1
00015D04 9268 000C                  		sub.w	$C(a0),d1
00015D08 0641 0030                  		addi.w	#$30,d1
00015D0C 0C41 0030                  		cmpi.w	#$30,d1
00015D10 6400                       		bcc.s	locret_1572E
00015D12 0829 0001 0022             		btst	#1,$22(a1)
00015D18 6600                       		bne.s	locret_1572E
00015D1A 3028 0036                  		move.w	$36(a0),d0
00015D1E D169 0008                  		add.w	d0,8(a1)
00015D22                            
00015D22                            locret_1572E:
00015D22 4E75                       		rts	
00015D24                            
00015D24                            ; ===========================================================================
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D24                            ; ---------------------------------------------------------------------------
00015D24                            
00015D24                            Obj69:					; XREF: Obj_Index
00015D24 7000                       		moveq	#0,d0
00015D26 1028 0024                  		move.b	$24(a0),d0
00015D2A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D2E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D32                            ; ===========================================================================
00015D32 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D34 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D36 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D38                            ; ===========================================================================
00015D38                            
00015D38                            Obj69_Main:				; XREF: Obj69_Index
00015D38 5428 0024                  		addq.b	#2,$24(a0)
00015D3C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D44 317C 4492 0002             		move.w	#$4492,2(a0)
00015D4A 0028 0004 0001             		ori.b	#4,1(a0)
00015D50 117C 0080 0019             		move.b	#$80,$19(a0)
00015D56 7000                       		moveq	#0,d0
00015D58 1028 0028                  		move.b	$28(a0),d0
00015D5C 0240 000F                  		andi.w	#$F,d0
00015D60 C0FC 003C                  		mulu.w	#$3C,d0
00015D64 3140 0032                  		move.w	d0,$32(a0)
00015D68 4A28 0028                  		tst.b	$28(a0)
00015D6C 6A00                       		bpl.s	Obj69_Trapdoor
00015D6E 5428 0024                  		addq.b	#2,$24(a0)
00015D72 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D7A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D80 117C 0010 0019             		move.b	#$10,$19(a0)
00015D86 117C 0002 001C             		move.b	#2,$1C(a0)
00015D8C 7000                       		moveq	#0,d0
00015D8E 1028 0028                  		move.b	$28(a0),d0	; get object type
00015D92 3200                       		move.w	d0,d1
00015D94 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015D98 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015D9C 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015DA0 3140 0032                  		move.w	d0,$32(a0)
00015DA4 0241 0070                  		andi.w	#$70,d1
00015DA8 0641 0010                  		addi.w	#$10,d1
00015DAC E549                       		lsl.w	#2,d1
00015DAE 5341                       		subq.w	#1,d1
00015DB0 3141 0036                  		move.w	d1,$36(a0)
00015DB4 6000                       		bra.s	Obj69_Spinner
00015DB6                            ; ===========================================================================
00015DB6                            
00015DB6                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015DB6 5368 0030                  		subq.w	#1,$30(a0)
00015DBA 6A00                       		bpl.s	Obj69_Animate
00015DBC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DC2 0868 0000 001C             		bchg	#0,$1C(a0)
00015DC8 4A28 0001                  		tst.b	1(a0)
00015DCC 6A00                       		bpl.s	Obj69_Animate
00015DCE 303C 00BB                  		move.w	#$BB,d0
00015DD2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DD8                            
00015DD8                            Obj69_Animate:
00015DD8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DDE 4EB9 0000 AC66             		jsr	AnimateSprite
00015DE4 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DE8 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DEA 323C 004B                  		move.w	#$4B,d1
00015DEE 343C 000C                  		move.w	#$C,d2
00015DF2 3602                       		move.w	d2,d3
00015DF4 5243                       		addq.w	#1,d3
00015DF6 3828 0008                  		move.w	8(a0),d4
00015DFA 6100 A188                  		bsr.w	SolidObject
00015DFE 6000 9E5C                  		bra.w	MarkObjGone
00015E02                            ; ===========================================================================
00015E02                            
00015E02                            Obj69_NotSolid:
00015E02 0828 0003 0022             		btst	#3,$22(a0)
00015E08 6700                       		beq.s	Obj69_Display
00015E0A 43F8 D000                  		lea	($FFFFD000).w,a1
00015E0E 08A9 0003 0022             		bclr	#3,$22(a1)
00015E14 08A8 0003 0022             		bclr	#3,$22(a0)
00015E1A 4228 0025                  		clr.b	$25(a0)
00015E1E                            
00015E1E                            Obj69_Display:
00015E1E 6000 9E3C                  		bra.w	MarkObjGone
00015E22                            ; ===========================================================================
00015E22                            
00015E22                            Obj69_Spinner:				; XREF: Obj69_Index
00015E22 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E26 C068 0036                  		and.w	$36(a0),d0
00015E2A 6600                       		bne.s	Obj69_Delay
00015E2C 117C 0001 0034             		move.b	#1,$34(a0)
00015E32                            
00015E32                            Obj69_Delay:
00015E32 4A28 0034                  		tst.b	$34(a0)
00015E36 6700                       		beq.s	Obj69_Animate2
00015E38 5368 0030                  		subq.w	#1,$30(a0)
00015E3C 6A00                       		bpl.s	Obj69_Animate2
00015E3E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E44 4228 0034                  		clr.b	$34(a0)
00015E48 0868 0000 001C             		bchg	#0,$1C(a0)
00015E4E                            
00015E4E                            Obj69_Animate2:
00015E4E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E54 4EB9 0000 AC66             		jsr	AnimateSprite
00015E5A 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E5E 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E60 323C 001B                  		move.w	#$1B,d1
00015E64 343C 0007                  		move.w	#7,d2
00015E68 3602                       		move.w	d2,d3
00015E6A 5243                       		addq.w	#1,d3
00015E6C 3828 0008                  		move.w	8(a0),d4
00015E70 6100 A112                  		bsr.w	SolidObject
00015E74 6000 9DE6                  		bra.w	MarkObjGone
00015E78                            ; ===========================================================================
00015E78                            
00015E78                            Obj69_NotSolid2:
00015E78 0828 0003 0022             		btst	#3,$22(a0)
00015E7E 6700                       		beq.s	Obj69_Display2
00015E80 43F8 D000                  		lea	($FFFFD000).w,a1
00015E84 08A9 0003 0022             		bclr	#3,$22(a1)
00015E8A 08A8 0003 0022             		bclr	#3,$22(a0)
00015E90 4228 0025                  		clr.b	$25(a0)
00015E94                            
00015E94                            Obj69_Display2:
00015E94 6000 9DC6                  		bra.w	MarkObjGone
00015E98                            ; ===========================================================================
00015E98                            Ani_obj69:
00015E98                            	include "_anim\obj69.asm"
00015E98                            ; ---------------------------------------------------------------------------
00015E98                            ; Animation script - trapdoor (SBZ)
00015E98                            ; ---------------------------------------------------------------------------
00015E98 0000                       		dc.w byte_158AC-Ani_obj69
00015E9A 0000                       		dc.w byte_158B2-Ani_obj69
00015E9C 0000                       		dc.w byte_158B8-Ani_obj69
00015E9E 0000                       		dc.w byte_158CC-Ani_obj69
00015EA0 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015EA6 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015EAC 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EB9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EC0 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015ECD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015ED4                            		even
00015ED4                            		even
00015ED4                            
00015ED4                            ; ---------------------------------------------------------------------------
00015ED4                            ; Sprite mappings - trapdoor (SBZ)
00015ED4                            ; ---------------------------------------------------------------------------
00015ED4                            Map_obj69:
00015ED4                            	include "_maps\obj69.asm"
00015ED4                            ; ---------------------------------------------------------------------------
00015ED4                            ; Sprite mappings - trapdoor (SBZ)
00015ED4                            ; ---------------------------------------------------------------------------
00015ED4 0000                       		dc.w byte_158E6-Map_obj69
00015ED6 0000                       		dc.w byte_158FB-Map_obj69
00015ED8 0000                       		dc.w byte_15924-Map_obj69
00015EDA 04                         byte_158E6:	dc.b 4
00015EDB F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015EE0 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EE5 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EEA F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015EEF 08                         byte_158FB:	dc.b 8
00015EF0 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015EF5 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015EFA 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015EFF 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015F04 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015F09 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015F0E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015F13 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015F18 04                         byte_15924:	dc.b 4
00015F19 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015F1E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F23 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F28 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F2E 00                         		even
00015F2E 00                         		even
00015F2E                            
00015F2E                            ; ---------------------------------------------------------------------------
00015F2E                            ; Sprite mappings - spinning platforms (SBZ)
00015F2E                            ; ---------------------------------------------------------------------------
00015F2E                            Map_obj69a:
00015F2E                            	include "_maps\obj69a.asm"
00015F2E                            ; ---------------------------------------------------------------------------
00015F2E                            ; Sprite mappings - spinning platforms (SBZ)
00015F2E                            ; ---------------------------------------------------------------------------
00015F2E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F32 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F36 0000                       		dc.w byte_15970-Map_obj69a
00015F38 02                         byte_15944:	dc.b 2
00015F39 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F3E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F43 02                         byte_1594F:	dc.b 2
00015F44 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F49 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F4E 02                         byte_1595A:	dc.b 2
00015F4F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F54 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F59 02                         byte_15965:	dc.b 2
00015F5A F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F5F 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F64 02                         byte_15970:	dc.b 2
00015F65 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F6A 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F70 00                         		even
00015F70 00                         		even
00015F70                            
00015F70                            ; ===========================================================================
00015F70                            ; ---------------------------------------------------------------------------
00015F70                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F70                            ; ---------------------------------------------------------------------------
00015F70                            
00015F70                            Obj6A:					; XREF: Obj_Index
00015F70 7000                       		moveq	#0,d0
00015F72 1028 0024                  		move.b	$24(a0),d0
00015F76 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F7A 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F7E                            ; ===========================================================================
00015F7E 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F80 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F82                            ; ===========================================================================
00015F82                            
00015F82                            Obj6A_Main:				; XREF: Obj6A_Index
00015F82 5428 0024                  		addq.b	#2,$24(a0)
00015F86 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F8E 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015F94 117C 0004 0001             		move.b	#4,1(a0)
00015F9A 117C 0004 0018             		move.b	#4,$18(a0)
00015FA0 117C 0020 0019             		move.b	#$20,$19(a0)
00015FA6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FAC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015FB2 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015FB8 6400                       		bcc.s	Obj6A_Action
00015FBA 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FC0                            
00015FC0                            Obj6A_Action:				; XREF: Obj6A_Index
00015FC0 7000                       		moveq	#0,d0
00015FC2 1028 0028                  		move.b	$28(a0),d0
00015FC6 0240 0007                  		andi.w	#7,d0
00015FCA D040                       		add.w	d0,d0
00015FCC 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FD0 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FD4 3028 003A                  		move.w	$3A(a0),d0
00015FD8 0240 FF80                  		andi.w	#$FF80,d0
00015FDC 3238 F700                  		move.w	($FFFFF700).w,d1
00015FE0 0441 0080                  		subi.w	#$80,d1
00015FE4 0241 FF80                  		andi.w	#$FF80,d1
00015FE8 9041                       		sub.w	d1,d0
00015FEA 0C40 0280                  		cmpi.w	#$280,d0
00015FEE 6200                       		bhi.s	Obj6A_Delete
00015FF0 4EF9 0000 DBB4             		jmp	DisplaySprite
00015FF6                            ; ===========================================================================
00015FF6                            
00015FF6                            Obj6A_Delete:
00015FF6 4EF9 0000 DBF0             		jmp	DeleteObject
00015FFC                            ; ===========================================================================
00015FFC 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016000 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016004 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016006                            ; ===========================================================================
00016006                            
00016006                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016006 4E75                       		rts	
00016008                            ; ===========================================================================
00016008                            
00016008                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016008 323C 0060                  		move.w	#$60,d1
0001600C 7000                       		moveq	#0,d0
0001600E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016012 0828 0000 0022             		btst	#0,$22(a0)
00016018 6700                       		beq.s	Obj6A_Animate01
0001601A 4440                       		neg.w	d0
0001601C D041                       		add.w	d1,d0
0001601E                            
0001601E                            Obj6A_Animate01:
0001601E 3228 003A                  		move.w	$3A(a0),d1
00016022 9240                       		sub.w	d0,d1
00016024 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016028 5328 001E                  		subq.b	#1,$1E(a0)
0001602C 6A00                       		bpl.s	loc_15A46
0001602E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016034 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001603A                            
0001603A                            loc_15A46:
0001603A 4A28 0001                  		tst.b	1(a0)
0001603E 6A00                       		bpl.s	locret_15A60
00016040 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016044 0240 000F                  		andi.w	#$F,d0
00016048 6600                       		bne.s	locret_15A60
0001604A 303C 00B0                  		move.w	#$B0,d0
0001604E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016054                            
00016054                            locret_15A60:
00016054 4E75                       		rts	
00016056                            ; ===========================================================================
00016056                            
00016056                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016056 323C 0030                  		move.w	#$30,d1
0001605A 7000                       		moveq	#0,d0
0001605C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016060 0828 0000 0022             		btst	#0,$22(a0)
00016066 6700                       		beq.s	Obj6A_Animate02
00016068 4440                       		neg.w	d0
0001606A 0640 0080                  		addi.w	#$80,d0
0001606E                            
0001606E                            Obj6A_Animate02:
0001606E 3228 0038                  		move.w	$38(a0),d1
00016072 9240                       		sub.w	d0,d1
00016074 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016078 5328 001E                  		subq.b	#1,$1E(a0)
0001607C 6A00                       		bpl.s	loc_15A96
0001607E 117C 0002 001E             		move.b	#2,$1E(a0)
00016084 0868 0000 001A             		bchg	#0,$1A(a0)
0001608A                            
0001608A                            loc_15A96:
0001608A 4A28 0001                  		tst.b	1(a0)
0001608E 6A00                       		bpl.s	locret_15AB0
00016090 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016094 0C00 0018                  		cmpi.b	#$18,d0
00016098 6600                       		bne.s	locret_15AB0
0001609A 303C 00B0                  		move.w	#$B0,d0
0001609E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160A4                            
000160A4                            locret_15AB0:
000160A4 4E75                       		rts	
000160A6                            ; ===========================================================================
000160A6                            
000160A6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000160A6 4A28 003D                  		tst.b	$3D(a0)
000160AA 6600                       		bne.s	Obj6A_Animate03
000160AC 3038 D008                  		move.w	($FFFFD008).w,d0
000160B0 0440 00C0                  		subi.w	#$C0,d0
000160B4 6500                       		bcs.s	loc_15B02
000160B6 9068 0008                  		sub.w	8(a0),d0
000160BA 6500                       		bcs.s	loc_15B02
000160BC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160C0 0440 0080                  		subi.w	#$80,d0
000160C4 B068 000C                  		cmp.w	$C(a0),d0
000160C8 6400                       		bcc.s	locret_15B04
000160CA 0640 0100                  		addi.w	#$100,d0
000160CE B068 000C                  		cmp.w	$C(a0),d0
000160D2 6500                       		bcs.s	locret_15B04
000160D4 117C 0001 003D             		move.b	#1,$3D(a0)
000160DA 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160E0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160E6 117C 0002 001A             		move.b	#2,$1A(a0)
000160EC 303C 00B0                  		move.w	#$B0,d0
000160F0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160F6                            
000160F6                            loc_15B02:
000160F6 588F                       		addq.l	#4,sp
000160F8                            
000160F8                            locret_15B04:
000160F8 4E75                       		rts	
000160FA                            ; ===========================================================================
000160FA                            
000160FA                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000160FA 4EB9 0000 DB8E             		jsr	SpeedToPos
00016100 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016106 5328 001E                  		subq.b	#1,$1E(a0)
0001610A 6A00                       		bpl.s	locret_15B24
0001610C 117C 0002 001E             		move.b	#2,$1E(a0)
00016112 0868 0000 001A             		bchg	#0,$1A(a0)
00016118                            
00016118                            locret_15B24:
00016118 4E75                       		rts	
0001611A                            ; ===========================================================================
0001611A                            
0001611A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001611A 4A28 003D                  		tst.b	$3D(a0)
0001611E 6600                       		bne.s	Obj6A_Animate04
00016120 3038 D008                  		move.w	($FFFFD008).w,d0
00016124 0640 00E0                  		addi.w	#$E0,d0
00016128 9068 0008                  		sub.w	8(a0),d0
0001612C 6400                       		bcc.s	loc_15B74
0001612E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016132 0440 0080                  		subi.w	#$80,d0
00016136 B068 000C                  		cmp.w	$C(a0),d0
0001613A 6400                       		bcc.s	locret_15B76
0001613C 0640 0100                  		addi.w	#$100,d0
00016140 B068 000C                  		cmp.w	$C(a0),d0
00016144 6500                       		bcs.s	locret_15B76
00016146 117C 0001 003D             		move.b	#1,$3D(a0)
0001614C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016152 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016158 117C 0002 001A             		move.b	#2,$1A(a0)
0001615E 303C 00B0                  		move.w	#$B0,d0
00016162 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016168                            
00016168                            loc_15B74:
00016168 588F                       		addq.l	#4,sp
0001616A                            
0001616A                            locret_15B76:
0001616A 4E75                       		rts	
0001616C                            ; ===========================================================================
0001616C                            
0001616C                            Obj6A_Animate04:
0001616C 4EB9 0000 DB8E             		jsr	SpeedToPos
00016172 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016178 5328 001E                  		subq.b	#1,$1E(a0)
0001617C 6A00                       		bpl.s	locret_15B96
0001617E 117C 0002 001E             		move.b	#2,$1E(a0)
00016184 0868 0000 001A             		bchg	#0,$1A(a0)
0001618A                            
0001618A                            locret_15B96:
0001618A 4E75                       		rts	
0001618C                            ; ===========================================================================
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            Map_obj6A:
0001618C                            	include "_maps\obj6A.asm"
0001618C                            ; ---------------------------------------------------------------------------
0001618C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001618C                            ; ---------------------------------------------------------------------------
0001618C 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016190 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016194 07                         byte_15BA0:	dc.b 7
00016195 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001619A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001619F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161A4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161A9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161AE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161B3 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161B8 07                         byte_15BC4:	dc.b 7
000161B9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161BE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161C3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161C8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161CD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161D2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161D7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161DC 04                         byte_15BE8:	dc.b 4
000161DD E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161E2 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161E7 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161EC 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161F1 04                         byte_15BFD:	dc.b 4
000161F2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161F7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161FC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016201 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016206                            		even
00016206                            		even
00016206                            
00016206                            ; ===========================================================================
00016206                            ; ---------------------------------------------------------------------------
00016206                            ; Object 6B - stomper (SBZ)
00016206                            ; ---------------------------------------------------------------------------
00016206                            
00016206                            Obj6B:					; XREF: Obj_Index
00016206 7000                       		moveq	#0,d0
00016208 1028 0024                  		move.b	$24(a0),d0
0001620C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016210 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016214                            ; ===========================================================================
00016214 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016216 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016218                            
00016218 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001621C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016220 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016224 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016228 8040 0005                  		dc.b  $80, $40,	  0,   5
0001622C                            ; ===========================================================================
0001622C                            
0001622C                            Obj6B_Main:				; XREF: Obj6B_Index
0001622C 5428 0024                  		addq.b	#2,$24(a0)
00016230 7000                       		moveq	#0,d0
00016232 1028 0028                  		move.b	$28(a0),d0
00016236 E448                       		lsr.w	#2,d0
00016238 0240 001C                  		andi.w	#$1C,d0
0001623C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016240 115B 0019                  		move.b	(a3)+,$19(a0)
00016244 115B 0016                  		move.b	(a3)+,$16(a0)
00016248 E448                       		lsr.w	#2,d0
0001624A 1140 001A                  		move.b	d0,$1A(a0)
0001624E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016256 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001625C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016262 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016264 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001626A 6700                       		beq.s	Obj6B_SBZ3
0001626C                            
0001626C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001626C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016270 7000                       		moveq	#0,d0
00016272 1028 0023                  		move.b	$23(a0),d0
00016276 6700                       		beq.s	Obj6B_Delete
00016278 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001627E                            
0001627E                            Obj6B_Delete:
0001627E 4EF9 0000 DBF0             		jmp	DeleteObject
00016284                            ; ===========================================================================
00016284                            
00016284                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016284 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001628A 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016290 6600                       		bne.s	Obj6B_SBZ12
00016292 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016296 7000                       		moveq	#0,d0
00016298 1028 0023                  		move.b	$23(a0),d0
0001629C 6700                       		beq.s	Obj6B_SBZ12
0001629E 0832 0000 0002             		btst	#0,2(a2,d0.w)
000162A4 6700                       		beq.s	Obj6B_SBZ12
000162A6 4238 F7CB                  		clr.b	($FFFFF7CB).w
000162AA 60C0                       		bra.s	Obj6B_ChkGone
000162AC                            ; ===========================================================================
000162AC                            
000162AC                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000162AC 0028 0004 0001             		ori.b	#4,1(a0)
000162B2 117C 0004 0018             		move.b	#4,$18(a0)
000162B8 3168 0008 0034             		move.w	8(a0),$34(a0)
000162BE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000162C4 7000                       		moveq	#0,d0
000162C6 101B                       		move.b	(a3)+,d0
000162C8 3140 003C                  		move.w	d0,$3C(a0)
000162CC 7000                       		moveq	#0,d0
000162CE 1028 0028                  		move.b	$28(a0),d0
000162D2 6A00                       		bpl.s	Obj6B_Action
000162D4 0200 000F                  		andi.b	#$F,d0
000162D8 1140 003E                  		move.b	d0,$3E(a0)
000162DC 1153 0028                  		move.b	(a3),$28(a0)
000162E0 0C13 0005                  		cmpi.b	#5,(a3)
000162E4 6600                       		bne.s	Obj6B_ChkGone2
000162E6 08E8 0004 0001             		bset	#4,1(a0)
000162EC                            
000162EC                            Obj6B_ChkGone2:
000162EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162F0 7000                       		moveq	#0,d0
000162F2 1028 0023                  		move.b	$23(a0),d0
000162F6 6700                       		beq.s	Obj6B_Action
000162F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000162FE                            
000162FE                            Obj6B_Action:				; XREF: Obj6B_Index
000162FE 3F28 0008                  		move.w	8(a0),-(sp)
00016302 7000                       		moveq	#0,d0
00016304 1028 0028                  		move.b	$28(a0),d0
00016308 0240 000F                  		andi.w	#$F,d0
0001630C D040                       		add.w	d0,d0
0001630E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016312 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016316 381F                       		move.w	(sp)+,d4
00016318 4A28 0001                  		tst.b	1(a0)
0001631C 6A00                       		bpl.s	Obj6B_ChkDel
0001631E 7200                       		moveq	#0,d1
00016320 1228 0019                  		move.b	$19(a0),d1
00016324 0641 000B                  		addi.w	#$B,d1
00016328 7400                       		moveq	#0,d2
0001632A 1428 0016                  		move.b	$16(a0),d2
0001632E 3602                       		move.w	d2,d3
00016330 5243                       		addq.w	#1,d3
00016332 6100 9C50                  		bsr.w	SolidObject
00016336                            
00016336                            Obj6B_ChkDel:
00016336 3028 0034                  		move.w	$34(a0),d0
0001633A 0240 FF80                  		andi.w	#$FF80,d0
0001633E 3238 F700                  		move.w	($FFFFF700).w,d1
00016342 0441 0080                  		subi.w	#$80,d1
00016346 0241 FF80                  		andi.w	#$FF80,d1
0001634A 9041                       		sub.w	d1,d0
0001634C 0C40 0280                  		cmpi.w	#$280,d0
00016350 6200                       		bhi.s	loc_15D64
00016352 4EF9 0000 DBB4             		jmp	DisplaySprite
00016358                            ; ===========================================================================
00016358                            
00016358                            loc_15D64:
00016358 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001635E 6600                       		bne.s	Obj6B_Delete2
00016360 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016364 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016368 7000                       		moveq	#0,d0
0001636A 1028 0023                  		move.b	$23(a0),d0
0001636E 6700                       		beq.s	Obj6B_Delete2
00016370 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016376                            
00016376                            Obj6B_Delete2:
00016376 4EF9 0000 DBF0             		jmp	DeleteObject
0001637C                            ; ===========================================================================
0001637C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016380 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016384 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016388                            ; ===========================================================================
00016388                            
00016388                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016388 4E75                       		rts	
0001638A                            ; ===========================================================================
0001638A                            
0001638A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001638A 4A28 0038                  		tst.b	$38(a0)
0001638E 6600                       		bne.s	loc_15DB4
00016390 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016394 7000                       		moveq	#0,d0
00016396 1028 003E                  		move.b	$3E(a0),d0
0001639A 0832 0000 0000             		btst	#0,(a2,d0.w)
000163A0 6700                       		beq.s	loc_15DC2
000163A2 117C 0001 0038             		move.b	#1,$38(a0)
000163A8                            
000163A8                            loc_15DB4:
000163A8 3028 003C                  		move.w	$3C(a0),d0
000163AC B068 003A                  		cmp.w	$3A(a0),d0
000163B0 6700                       		beq.s	loc_15DE0
000163B2 5468 003A                  		addq.w	#2,$3A(a0)
000163B6                            
000163B6                            loc_15DC2:
000163B6 3028 003A                  		move.w	$3A(a0),d0
000163BA 0828 0000 0022             		btst	#0,$22(a0)
000163C0 6700                       		beq.s	loc_15DD4
000163C2 4440                       		neg.w	d0
000163C4 0640 0080                  		addi.w	#$80,d0
000163C8                            
000163C8                            loc_15DD4:
000163C8 3228 0034                  		move.w	$34(a0),d1
000163CC 9240                       		sub.w	d0,d1
000163CE 3141 0008                  		move.w	d1,8(a0)
000163D2 4E75                       		rts	
000163D4                            ; ===========================================================================
000163D4                            
000163D4                            loc_15DE0:
000163D4 5228 0028                  		addq.b	#1,$28(a0)
000163D8 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163DE 4228 0038                  		clr.b	$38(a0)
000163E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163E6 7000                       		moveq	#0,d0
000163E8 1028 0023                  		move.b	$23(a0),d0
000163EC 67C8                       		beq.s	loc_15DC2
000163EE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163F4 60C0                       		bra.s	loc_15DC2
000163F6                            ; ===========================================================================
000163F6                            
000163F6                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000163F6 4A28 0038                  		tst.b	$38(a0)
000163FA 6600                       		bne.s	loc_15E14
000163FC 5368 0036                  		subq.w	#1,$36(a0)
00016400 6600                       		bne.s	loc_15E1E
00016402 117C 0001 0038             		move.b	#1,$38(a0)
00016408                            
00016408                            loc_15E14:
00016408 4A68 003A                  		tst.w	$3A(a0)
0001640C 6700                       		beq.s	loc_15E3C
0001640E 5568 003A                  		subq.w	#2,$3A(a0)
00016412                            
00016412                            loc_15E1E:
00016412 3028 003A                  		move.w	$3A(a0),d0
00016416 0828 0000 0022             		btst	#0,$22(a0)
0001641C 6700                       		beq.s	loc_15E30
0001641E 4440                       		neg.w	d0
00016420 0640 0080                  		addi.w	#$80,d0
00016424                            
00016424                            loc_15E30:
00016424 3228 0034                  		move.w	$34(a0),d1
00016428 9240                       		sub.w	d0,d1
0001642A 3141 0008                  		move.w	d1,8(a0)
0001642E 4E75                       		rts	
00016430                            ; ===========================================================================
00016430                            
00016430                            loc_15E3C:
00016430 5328 0028                  		subq.b	#1,$28(a0)
00016434 4228 0038                  		clr.b	$38(a0)
00016438 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001643C 7000                       		moveq	#0,d0
0001643E 1028 0023                  		move.b	$23(a0),d0
00016442 67CE                       		beq.s	loc_15E1E
00016444 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001644A 60C6                       		bra.s	loc_15E1E
0001644C                            ; ===========================================================================
0001644C                            
0001644C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001644C 4A28 0038                  		tst.b	$38(a0)
00016450 6600                       		bne.s	loc_15E7C
00016452 4A68 003A                  		tst.w	$3A(a0)
00016456 6700                       		beq.s	loc_15E6A
00016458 5368 003A                  		subq.w	#1,$3A(a0)
0001645C 6000                       		bra.s	loc_15E8E
0001645E                            ; ===========================================================================
0001645E                            
0001645E                            loc_15E6A:
0001645E 5368 0036                  		subq.w	#1,$36(a0)
00016462 6A00                       		bpl.s	loc_15E8E
00016464 317C 003C 0036             		move.w	#$3C,$36(a0)
0001646A 117C 0001 0038             		move.b	#1,$38(a0)
00016470                            
00016470                            loc_15E7C:
00016470 5068 003A                  		addq.w	#8,$3A(a0)
00016474 3028 003A                  		move.w	$3A(a0),d0
00016478 B068 003C                  		cmp.w	$3C(a0),d0
0001647C 6600                       		bne.s	loc_15E8E
0001647E 4228 0038                  		clr.b	$38(a0)
00016482                            
00016482                            loc_15E8E:
00016482 3028 003A                  		move.w	$3A(a0),d0
00016486 0828 0000 0022             		btst	#0,$22(a0)
0001648C 6700                       		beq.s	loc_15EA0
0001648E 4440                       		neg.w	d0
00016490 0640 0038                  		addi.w	#$38,d0
00016494                            
00016494                            loc_15EA0:
00016494 3228 0030                  		move.w	$30(a0),d1
00016498 D240                       		add.w	d0,d1
0001649A 3141 000C                  		move.w	d1,$C(a0)
0001649E 4E75                       		rts	
000164A0                            ; ===========================================================================
000164A0                            
000164A0                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000164A0 4A28 0038                  		tst.b	$38(a0)
000164A4 6600                       		bne.s	loc_15ED0
000164A6 4A68 003A                  		tst.w	$3A(a0)
000164AA 6700                       		beq.s	loc_15EBE
000164AC 5168 003A                  		subq.w	#8,$3A(a0)
000164B0 6000                       		bra.s	loc_15EF0
000164B2                            ; ===========================================================================
000164B2                            
000164B2                            loc_15EBE:
000164B2 5368 0036                  		subq.w	#1,$36(a0)
000164B6 6A00                       		bpl.s	loc_15EF0
000164B8 317C 003C 0036             		move.w	#$3C,$36(a0)
000164BE 117C 0001 0038             		move.b	#1,$38(a0)
000164C4                            
000164C4                            loc_15ED0:
000164C4 3028 003A                  		move.w	$3A(a0),d0
000164C8 B068 003C                  		cmp.w	$3C(a0),d0
000164CC 6700                       		beq.s	loc_15EE0
000164CE 5068 003A                  		addq.w	#8,$3A(a0)
000164D2 6000                       		bra.s	loc_15EF0
000164D4                            ; ===========================================================================
000164D4                            
000164D4                            loc_15EE0:
000164D4 5368 0036                  		subq.w	#1,$36(a0)
000164D8 6A00                       		bpl.s	loc_15EF0
000164DA 317C 003C 0036             		move.w	#$3C,$36(a0)
000164E0 4228 0038                  		clr.b	$38(a0)
000164E4                            
000164E4                            loc_15EF0:
000164E4 3028 003A                  		move.w	$3A(a0),d0
000164E8 0828 0000 0022             		btst	#0,$22(a0)
000164EE 6700                       		beq.s	loc_15F02
000164F0 4440                       		neg.w	d0
000164F2 0640 0038                  		addi.w	#$38,d0
000164F6                            
000164F6                            loc_15F02:
000164F6 3228 0030                  		move.w	$30(a0),d1
000164FA D240                       		add.w	d0,d1
000164FC 3141 000C                  		move.w	d1,$C(a0)
00016500 4E75                       		rts	
00016502                            ; ===========================================================================
00016502                            
00016502                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016502 4A28 0038                  		tst.b	$38(a0)
00016506 6600                       		bne.s	loc_15F3E
00016508 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001650C 7000                       		moveq	#0,d0
0001650E 1028 003E                  		move.b	$3E(a0),d0
00016512 0832 0000 0000             		btst	#0,(a2,d0.w)
00016518 6700                       		beq.s	locret_15F5C
0001651A 117C 0001 0038             		move.b	#1,$38(a0)
00016520 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016524 7000                       		moveq	#0,d0
00016526 1028 0023                  		move.b	$23(a0),d0
0001652A 6700                       		beq.s	loc_15F3E
0001652C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016532                            
00016532                            loc_15F3E:
00016532 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001653A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016542 3168 0008 0034             		move.w	8(a0),$34(a0)
00016548 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001654E 6700                       		beq.s	loc_15F5E
00016550                            
00016550                            locret_15F5C:
00016550 4E75                       		rts	
00016552                            ; ===========================================================================
00016552                            
00016552                            loc_15F5E:
00016552 4228 0028                  		clr.b	$28(a0)
00016556 4228 0038                  		clr.b	$38(a0)
0001655A 4E75                       		rts	
0001655C                            ; ===========================================================================
0001655C                            ; ---------------------------------------------------------------------------
0001655C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001655C                            ; ---------------------------------------------------------------------------
0001655C                            Map_obj6B:
0001655C                            	include "_maps\obj6B.asm"
0001655C                            ; ---------------------------------------------------------------------------
0001655C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001655C                            ; ---------------------------------------------------------------------------
0001655C 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016560 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016564 0000                       		dc.w byte_15FB0-Map_obj6B
00016566 04                         byte_15F72:	dc.b 4
00016567 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001656C F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016571 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016576 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001657B 08                         byte_15F87:	dc.b 8
0001657C E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016581 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016586 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001658B E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016590 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016595 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001659A 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001659F 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000165A4 0E                         byte_15FB0:	dc.b $E
000165A5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000165AA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000165AF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000165B4 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000165B9 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000165BE C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000165C3 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000165C8 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165CD E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165D2 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165D7 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165DC 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165E1 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165E6 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165EC 00                         		even
000165EC 00                         		even
000165EC                            
000165EC                            ; ===========================================================================
000165EC                            ; ---------------------------------------------------------------------------
000165EC                            ; Object 6C - vanishing	platforms (SBZ)
000165EC                            ; ---------------------------------------------------------------------------
000165EC                            
000165EC                            Obj6C:					; XREF: Obj_Index
000165EC 7000                       		moveq	#0,d0
000165EE 1028 0024                  		move.b	$24(a0),d0
000165F2 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000165F6 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000165FA                            ; ===========================================================================
000165FA 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000165FC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165FE 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016600 0000                       		dc.w loc_16068-Obj6C_Index
00016602                            ; ===========================================================================
00016602                            
00016602                            Obj6C_Main:				; XREF: Obj6C_Index
00016602 5C28 0024                  		addq.b	#6,$24(a0)
00016606 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001660E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016614 0028 0004 0001             		ori.b	#4,1(a0)
0001661A 117C 0010 0019             		move.b	#$10,$19(a0)
00016620 117C 0004 0018             		move.b	#4,$18(a0)
00016626 7000                       		moveq	#0,d0
00016628 1028 0028                  		move.b	$28(a0),d0	; get object type
0001662C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016630 5240                       		addq.w	#1,d0		; add 1
00016632 EF48                       		lsl.w	#7,d0		; multiply by $80
00016634 3200                       		move.w	d0,d1
00016636 5340                       		subq.w	#1,d0
00016638 3140 0030                  		move.w	d0,$30(a0)
0001663C 3140 0032                  		move.w	d0,$32(a0)
00016640 7000                       		moveq	#0,d0
00016642 1028 0028                  		move.b	$28(a0),d0	; get object type
00016646 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001664A 0641 0080                  		addi.w	#$80,d1
0001664E C0C1                       		mulu.w	d1,d0
00016650 E088                       		lsr.l	#8,d0
00016652 3140 0036                  		move.w	d0,$36(a0)
00016656 5341                       		subq.w	#1,d1
00016658 3141 0038                  		move.w	d1,$38(a0)
0001665C                            
0001665C                            loc_16068:				; XREF: Obj6C_Index
0001665C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016660 9068 0036                  		sub.w	$36(a0),d0
00016664 C068 0038                  		and.w	$38(a0),d0
00016668 6600                       		bne.s	Obj6C_Animate
0001666A 5928 0024                  		subq.b	#4,$24(a0)
0001666E 6000                       		bra.s	Obj6C_Vanish
00016670                            ; ===========================================================================
00016670                            
00016670                            Obj6C_Animate:
00016670 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016676 4EB9 0000 AC66             		jsr	AnimateSprite
0001667C 6000 95DE                  		bra.w	MarkObjGone
00016680                            ; ===========================================================================
00016680                            
00016680                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016680 5368 0030                  		subq.w	#1,$30(a0)
00016684 6A00                       		bpl.s	loc_160AA
00016686 317C 007F 0030             		move.w	#127,$30(a0)
0001668C 4A28 001C                  		tst.b	$1C(a0)
00016690 6700                       		beq.s	loc_160A4
00016692 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016698                            
00016698                            loc_160A4:
00016698 0868 0000 001C             		bchg	#0,$1C(a0)
0001669E                            
0001669E                            loc_160AA:
0001669E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000166A4 4EB9 0000 AC66             		jsr	AnimateSprite
000166AA 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000166B0 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000166B2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000166B8 6600                       		bne.s	loc_160D6
000166BA 7200                       		moveq	#0,d1
000166BC 1228 0019                  		move.b	$19(a0),d1
000166C0 4EB9 0000 789E             		jsr	(PlatformObject).l
000166C6 6000 9594                  		bra.w	MarkObjGone
000166CA                            ; ===========================================================================
000166CA                            
000166CA                            loc_160D6:
000166CA 7200                       		moveq	#0,d1
000166CC 1228 0019                  		move.b	$19(a0),d1
000166D0 4EB9 0000 7A12             		jsr	(ExitPlatform).l
000166D6 3428 0008                  		move.w	8(a0),d2
000166DA 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
000166E0 6000 957A                  		bra.w	MarkObjGone
000166E4                            ; ===========================================================================
000166E4                            
000166E4                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166E4 0828 0003 0022             		btst	#3,$22(a0)
000166EA 6700                       		beq.s	Obj6C_Display
000166EC 43F8 D000                  		lea	($FFFFD000).w,a1
000166F0 08A9 0003 0022             		bclr	#3,$22(a1)
000166F6 08A8 0003 0022             		bclr	#3,$22(a0)
000166FC 117C 0002 0024             		move.b	#2,$24(a0)
00016702 4228 0025                  		clr.b	$25(a0)
00016706                            
00016706                            Obj6C_Display:
00016706 6000 9554                  		bra.w	MarkObjGone
0001670A                            ; ===========================================================================
0001670A                            Ani_obj6C:
0001670A                            	include "_anim\obj6C.asm"
0001670A                            ; ---------------------------------------------------------------------------
0001670A                            ; Animation script - vanishing platforms (SBZ)
0001670A                            ; ---------------------------------------------------------------------------
0001670A 0000                       		dc.w byte_1611A-Ani_obj6C
0001670C 0000                       		dc.w byte_16122-Ani_obj6C
0001670E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016716 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001671E                            		even
0001671E                            		even
0001671E                            
0001671E                            ; ---------------------------------------------------------------------------
0001671E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001671E                            ; ---------------------------------------------------------------------------
0001671E                            Map_obj6C:
0001671E                            	include "_maps\obj6C.asm"
0001671E                            ; ---------------------------------------------------------------------------
0001671E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001671E                            ; ---------------------------------------------------------------------------
0001671E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016722 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016726 01                         byte_16132:	dc.b 1
00016727 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001672C 01                         byte_16138:	dc.b 1
0001672D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016732 01                         byte_1613E:	dc.b 1
00016733 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016738 00                         byte_16144:	dc.b 0
0001673A 00                         		even
0001673A 00                         		even
0001673A                            
0001673A                            ; ===========================================================================
0001673A                            ; ---------------------------------------------------------------------------
0001673A                            ; Object 6E - electrocution orbs (SBZ)
0001673A                            ; ---------------------------------------------------------------------------
0001673A                            
0001673A                            Obj6E:					; XREF: Obj_Index
0001673A 7000                       		moveq	#0,d0
0001673C 1028 0024                  		move.b	$24(a0),d0
00016740 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016744 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016748                            ; ===========================================================================
00016748 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001674A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001674C                            ; ===========================================================================
0001674C                            
0001674C                            Obj6E_Main:				; XREF: Obj6E_Index
0001674C 5428 0024                  		addq.b	#2,$24(a0)
00016750 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016758 317C 047E 0002             		move.w	#$47E,2(a0)
0001675E 0028 0004 0001             		ori.b	#4,1(a0)
00016764 117C 0028 0019             		move.b	#$28,$19(a0)
0001676A 7000                       		moveq	#0,d0
0001676C 1028 0028                  		move.b	$28(a0),d0	; read object type
00016770 E948                       		lsl.w	#4,d0		; multiply by $10
00016772 5340                       		subq.w	#1,d0
00016774 3140 0034                  		move.w	d0,$34(a0)
00016778                            
00016778                            Obj6E_Shock:				; XREF: Obj6E_Index
00016778 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001677C C068 0034                  		and.w	$34(a0),d0
00016780 6600                       		bne.s	Obj6E_Animate
00016782 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016788 4A28 0001                  		tst.b	1(a0)
0001678C 6A00                       		bpl.s	Obj6E_Animate
0001678E 303C 00B1                  		move.w	#$B1,d0
00016792 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
00016798                            
00016798                            Obj6E_Animate:
00016798 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
0001679E 4EB9 0000 AC66             		jsr	AnimateSprite
000167A4 117C 0000 0020             		move.b	#0,$20(a0)
000167AA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000167B0 6600                       		bne.s	Obj6E_Display	; if not, branch
000167B2 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000167B8                            
000167B8                            Obj6E_Display:
000167B8 6000 94A2                  		bra.w	MarkObjGone
000167BC                            ; ===========================================================================
000167BC                            Ani_obj6E:
000167BC                            	include "_anim\obj6E.asm"
000167BC                            ; ---------------------------------------------------------------------------
000167BC                            ; Animation script - electrocution orbs (SBZ)
000167BC                            ; ---------------------------------------------------------------------------
000167BC 0000                       		dc.w byte_161CC-Ani_obj6E
000167BE 0000                       		dc.w byte_161D0-Ani_obj6E
000167C0 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000167C4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167D4                            		even
000167D4                            		even
000167D4                            
000167D4                            ; ---------------------------------------------------------------------------
000167D4                            ; Sprite mappings - electrocution orbs (SBZ)
000167D4                            ; ---------------------------------------------------------------------------
000167D4                            Map_obj6E:
000167D4                            	include "_maps\obj6E.asm"
000167D4                            ; ---------------------------------------------------------------------------
000167D4                            ; Sprite mappings - electrocution orbs (SBZ)
000167D4                            ; ---------------------------------------------------------------------------
000167D4 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000167D8 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000167DC 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000167E0 02                         byte_161EC:	dc.b 2
000167E1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167E6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167EB 03                         byte_161F7:	dc.b 3
000167EC F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000167F1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000167F6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000167FB 05                         byte_16207:	dc.b 5
000167FC F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016801 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016806 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001680B F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016810 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016815 04                         byte_16221:	dc.b 4
00016816 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001681B 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016820 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016825 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001682A 06                         byte_16236:	dc.b 6
0001682B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016830 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016835 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001683A F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
0001683F F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00016844 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016849 04                         byte_16255:	dc.b 4
0001684A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001684F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016854 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016859 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
0001685E                            		even
0001685E                            		even
0001685E                            
0001685E                            ; ===========================================================================
0001685E                            ; ---------------------------------------------------------------------------
0001685E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001685E                            ; ---------------------------------------------------------------------------
0001685E                            
0001685E                            Obj6F:					; XREF: Obj_Index
0001685E 7000                       		moveq	#0,d0
00016860 1028 0024                  		move.b	$24(a0),d0
00016864 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016868 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001686C 3028 0030                  		move.w	$30(a0),d0
00016870 0240 FF80                  		andi.w	#$FF80,d0
00016874 3238 F700                  		move.w	($FFFFF700).w,d1
00016878 0441 0080                  		subi.w	#$80,d1
0001687C 0241 FF80                  		andi.w	#$FF80,d1
00016880 9041                       		sub.w	d1,d0
00016882 0C40 0280                  		cmpi.w	#$280,d0
00016886 6200                       		bhi.s	loc_1629A
00016888                            
00016888                            Obj6F_Display:
00016888 4EF9 0000 DBB4             		jmp	DisplaySprite
0001688E                            ; ===========================================================================
0001688E                            
0001688E                            loc_1629A:
0001688E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016894 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016896 0C40 FF80                  		cmpi.w	#-$80,d0
0001689A 64EC                       		bcc.s	Obj6F_Display
0001689C                            
0001689C                            Obj6F_Act1or2:
0001689C 1028 002F                  		move.b	$2F(a0),d0
000168A0 6A00                       		bpl.s	Obj6F_Delete
000168A2 0240 007F                  		andi.w	#$7F,d0
000168A6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000168AA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000168B0                            
000168B0                            Obj6F_Delete:
000168B0 4EF9 0000 DBF0             		jmp	DeleteObject
000168B6                            ; ===========================================================================
000168B6 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000168B8 0000                       		dc.w loc_163D8-Obj6F_Index
000168BA                            ; ===========================================================================
000168BA                            
000168BA                            Obj6F_Main:				; XREF: Obj6F_Index
000168BA 1028 0028                  		move.b	$28(a0),d0
000168BE 6B00 0000                  		bmi.w	loc_16380
000168C2 5428 0024                  		addq.b	#2,$24(a0)
000168C6 217C 0001 5F2E 0004        		move.l	#Map_obj69a,4(a0)
000168CE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168D4 117C 0010 0019             		move.b	#$10,$19(a0)
000168DA 0028 0004 0001             		ori.b	#4,1(a0)
000168E0 117C 0004 0018             		move.b	#4,$18(a0)
000168E6 7000                       		moveq	#0,d0
000168E8 1028 0028                  		move.b	$28(a0),d0
000168EC 3200                       		move.w	d0,d1
000168EE E648                       		lsr.w	#3,d0
000168F0 0240 001E                  		andi.w	#$1E,d0
000168F4 45FA 0000                  		lea	off_164A6(pc),a2
000168F8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000168FC 315A 0038                  		move.w	(a2)+,$38(a0)
00016900 315A 0030                  		move.w	(a2)+,$30(a0)
00016904 214A 003C                  		move.l	a2,$3C(a0)
00016908 0241 000F                  		andi.w	#$F,d1
0001690C E549                       		lsl.w	#2,d1
0001690E 1141 0038                  		move.b	d1,$38(a0)
00016912 117C 0004 003A             		move.b	#4,$3A(a0)
00016918 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001691C 6700                       		beq.s	loc_16356
0001691E 117C 0001 003B             		move.b	#1,$3B(a0)
00016924 4428 003A                  		neg.b	$3A(a0)
00016928 7200                       		moveq	#0,d1
0001692A 1228 0038                  		move.b	$38(a0),d1
0001692E D228 003A                  		add.b	$3A(a0),d1
00016932 B228 0039                  		cmp.b	$39(a0),d1
00016936 6500                       		bcs.s	loc_16352
00016938 1001                       		move.b	d1,d0
0001693A 7200                       		moveq	#0,d1
0001693C 4A00                       		tst.b	d0
0001693E 6A00                       		bpl.s	loc_16352
00016940 1228 0039                  		move.b	$39(a0),d1
00016944 5901                       		subq.b	#4,d1
00016946                            
00016946                            loc_16352:
00016946 1141 0038                  		move.b	d1,$38(a0)
0001694A                            
0001694A                            loc_16356:
0001694A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016950 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016956 4A41                       		tst.w	d1
00016958 6600                       		bne.s	loc_1636C
0001695A 117C 0001 001C             		move.b	#1,$1C(a0)
00016960                            
00016960                            loc_1636C:
00016960 0C41 0008                  		cmpi.w	#8,d1
00016964 6600                       		bne.s	loc_16378
00016966 117C 0000 001C             		move.b	#0,$1C(a0)
0001696C                            
0001696C                            loc_16378:
0001696C 6100 C186                  		bsr.w	Obj63_ChangeDir
00016970 6000 0000                  		bra.w	loc_163D8
00016974                            ; ===========================================================================
00016974                            
00016974                            loc_16380:				; XREF: Obj6F_Main
00016974 1140 002F                  		move.b	d0,$2F(a0)
00016978 0240 007F                  		andi.w	#$7F,d0
0001697C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016980 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016986 6700                       		beq.s	loc_1639A
00016988 4EF9 0000 DBF0             		jmp	DeleteObject
0001698E                            ; ===========================================================================
0001698E                            
0001698E                            loc_1639A:
0001698E D040                       		add.w	d0,d0
00016990 0240 001E                  		andi.w	#$1E,d0
00016994 0640 0080                  		addi.w	#$80,d0
00016998 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
0001699E D4F2 0000                  		adda.w	(a2,d0.w),a2
000169A2 321A                       		move.w	(a2)+,d1
000169A4 2248                       		movea.l	a0,a1
000169A6 6000                       		bra.s	Obj6F_LoadPform
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            Obj6F_Loop:
000169A8 4EB9 0000 E03A             		jsr	SingleObjLoad
000169AE 6600                       		bne.s	loc_163D0
000169B0                            
000169B0                            Obj6F_LoadPform:			; XREF: loc_1639A
000169B0 12BC 006F                  		move.b	#$6F,0(a1)
000169B4 335A 0008                  		move.w	(a2)+,8(a1)
000169B8 335A 000C                  		move.w	(a2)+,$C(a1)
000169BC 301A                       		move.w	(a2)+,d0
000169BE 1340 0028                  		move.b	d0,$28(a1)
000169C2                            
000169C2                            loc_163D0:
000169C2 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169C6                            
000169C6 588F                       		addq.l	#4,sp
000169C8 4E75                       		rts	
000169CA                            ; ===========================================================================
000169CA                            
000169CA                            loc_163D8:				; XREF: Obj6F_Index
000169CA 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169D0 4EB9 0000 AC66             		jsr	AnimateSprite
000169D6 4A28 001A                  		tst.b	$1A(a0)
000169DA 6600                       		bne.s	loc_16404
000169DC 3F28 0008                  		move.w	8(a0),-(sp)
000169E0 6100 0000                  		bsr.w	loc_16424
000169E4 323C 001B                  		move.w	#$1B,d1
000169E8 343C 0007                  		move.w	#7,d2
000169EC 3602                       		move.w	d2,d3
000169EE 5243                       		addq.w	#1,d3
000169F0 381F                       		move.w	(sp)+,d4
000169F2 6000 9590                  		bra.w	SolidObject
000169F6                            ; ===========================================================================
000169F6                            
000169F6                            loc_16404:
000169F6 0828 0003 0022             		btst	#3,$22(a0)
000169FC 6700                       		beq.s	loc_16420
000169FE 43F8 D000                  		lea	($FFFFD000).w,a1
00016A02 08A9 0003 0022             		bclr	#3,$22(a1)
00016A08 08A8 0003 0022             		bclr	#3,$22(a0)
00016A0E 4228 0025                  		clr.b	$25(a0)
00016A12                            
00016A12                            loc_16420:
00016A12 6000 0002                  		bra.w	*+4
00016A16                            
00016A16                            loc_16424:
00016A16 3028 0008                  		move.w	8(a0),d0
00016A1A B068 0034                  		cmp.w	$34(a0),d0
00016A1E 6600                       		bne.s	loc_16484
00016A20 3028 000C                  		move.w	$C(a0),d0
00016A24 B068 0036                  		cmp.w	$36(a0),d0
00016A28 6600                       		bne.s	loc_16484
00016A2A 7200                       		moveq	#0,d1
00016A2C 1228 0038                  		move.b	$38(a0),d1
00016A30 D228 003A                  		add.b	$3A(a0),d1
00016A34 B228 0039                  		cmp.b	$39(a0),d1
00016A38 6500                       		bcs.s	loc_16456
00016A3A 1001                       		move.b	d1,d0
00016A3C 7200                       		moveq	#0,d1
00016A3E 4A00                       		tst.b	d0
00016A40 6A00                       		bpl.s	loc_16456
00016A42 1228 0039                  		move.b	$39(a0),d1
00016A46 5901                       		subq.b	#4,d1
00016A48                            
00016A48                            loc_16456:
00016A48 1141 0038                  		move.b	d1,$38(a0)
00016A4C 2268 003C                  		movea.l	$3C(a0),a1
00016A50 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A56 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A5C 4A41                       		tst.w	d1
00016A5E 6600                       		bne.s	loc_16474
00016A60 117C 0001 001C             		move.b	#1,$1C(a0)
00016A66                            
00016A66                            loc_16474:
00016A66 0C41 0008                  		cmpi.w	#8,d1
00016A6A 6600                       		bne.s	loc_16480
00016A6C 117C 0000 001C             		move.b	#0,$1C(a0)
00016A72                            
00016A72                            loc_16480:
00016A72 6100 C080                  		bsr.w	Obj63_ChangeDir
00016A76                            
00016A76                            loc_16484:
00016A76 4EF9 0000 DB8E             		jmp	SpeedToPos
00016A7C                            ; ===========================================================================
00016A7C                            Ani_obj6F:
00016A7C                            	include "_anim\obj6F.asm"
00016A7C                            ; ---------------------------------------------------------------------------
00016A7C                            ; Animation script - platform on conveyor belt (SBZ)
00016A7C                            ; ---------------------------------------------------------------------------
00016A7C 0000                       		dc.w byte_1648E-Ani_obj6F
00016A7E 0000                       		dc.w byte_164A2-Ani_obj6F
00016A80 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016A8D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016A94 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016A98 00                         		even
00016A98 00                         		even
00016A98                            
00016A98 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016A9E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016AA4 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016AB8 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016ACC 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016AE0 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016AF4 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016B08 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B1C                            ; ===========================================================================
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            ; Object 70 - large girder block (SBZ)
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            
00016B1C                            Obj70:					; XREF: Obj_Index
00016B1C 7000                       		moveq	#0,d0
00016B1E 1028 0024                  		move.b	$24(a0),d0
00016B22 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B26 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B2A                            ; ===========================================================================
00016B2A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B2C 0000                       		dc.w Obj70_Action-Obj70_Index
00016B2E                            ; ===========================================================================
00016B2E                            
00016B2E                            Obj70_Main:				; XREF: Obj70_Index
00016B2E 5428 0024                  		addq.b	#2,$24(a0)
00016B32 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B3A 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B40 0028 0004 0001             		ori.b	#4,1(a0)
00016B46 117C 0004 0018             		move.b	#4,$18(a0)
00016B4C 117C 0060 0019             		move.b	#$60,$19(a0)
00016B52 117C 0018 0016             		move.b	#$18,$16(a0)
00016B58 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B5E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B64 6100 0000                  		bsr.w	Obj70_Move2
00016B68                            
00016B68                            Obj70_Action:				; XREF: Obj70_Index
00016B68 3F28 0008                  		move.w	8(a0),-(sp)
00016B6C 4A68 003A                  		tst.w	$3A(a0)
00016B70 6700                       		beq.s	Obj70_Move
00016B72 5368 003A                  		subq.w	#1,$3A(a0)
00016B76 6600                       		bne.s	Obj70_Solid
00016B78                            
00016B78                            Obj70_Move:
00016B78 4EB9 0000 DB8E             		jsr	SpeedToPos
00016B7E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B82 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B84 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016B88                            
00016B88                            Obj70_Solid:
00016B88 381F                       		move.w	(sp)+,d4
00016B8A 4A28 0001                  		tst.b	1(a0)
00016B8E 6A00                       		bpl.s	Obj70_ChkDel
00016B90 7200                       		moveq	#0,d1
00016B92 1228 0019                  		move.b	$19(a0),d1
00016B96 0641 000B                  		addi.w	#$B,d1
00016B9A 7400                       		moveq	#0,d2
00016B9C 1428 0016                  		move.b	$16(a0),d2
00016BA0 3602                       		move.w	d2,d3
00016BA2 5243                       		addq.w	#1,d3
00016BA4 6100 93DE                  		bsr.w	SolidObject
00016BA8                            
00016BA8                            Obj70_ChkDel:
00016BA8 3028 0032                  		move.w	$32(a0),d0
00016BAC 0240 FF80                  		andi.w	#$FF80,d0
00016BB0 3238 F700                  		move.w	($FFFFF700).w,d1
00016BB4 0441 0080                  		subi.w	#$80,d1
00016BB8 0241 FF80                  		andi.w	#$FF80,d1
00016BBC 9041                       		sub.w	d1,d0
00016BBE 0C40 0280                  		cmpi.w	#$280,d0
00016BC2 6200                       		bhi.s	Obj70_Delete
00016BC4 4EF9 0000 DBB4             		jmp	DisplaySprite
00016BCA                            ; ===========================================================================
00016BCA                            
00016BCA                            Obj70_Delete:
00016BCA 4EF9 0000 DBF0             		jmp	DeleteObject
00016BD0                            ; ===========================================================================
00016BD0                            
00016BD0                            Obj70_Move2:				; XREF: Obj70_Main
00016BD0 1028 0038                  		move.b	$38(a0),d0
00016BD4 0240 0018                  		andi.w	#$18,d0
00016BD8 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BDE 43F1 0000                  		lea	(a1,d0.w),a1
00016BE2 3159 0010                  		move.w	(a1)+,$10(a0)
00016BE6 3159 0012                  		move.w	(a1)+,$12(a0)
00016BEA 3159 0034                  		move.w	(a1)+,$34(a0)
00016BEE 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016BF2 317C 0007 003A             		move.w	#7,$3A(a0)
00016BF8 4E75                       		rts	
00016BFA                            ; ===========================================================================
00016BFA 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016C02 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016C0A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016C12 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C1A                            ; ---------------------------------------------------------------------------
00016C1A                            ; Sprite mappings - large girder block (SBZ)
00016C1A                            ; ---------------------------------------------------------------------------
00016C1A                            Map_obj70:
00016C1A                            	include "_maps\obj70.asm"
00016C1A                            ; ---------------------------------------------------------------------------
00016C1A                            ; Sprite mappings - large girder block (SBZ)
00016C1A                            ; ---------------------------------------------------------------------------
00016C1A 0000                       		dc.w byte_1662A-Map_obj70
00016C1C 0C                         byte_1662A:	dc.b $C
00016C1D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C22 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C27 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C2C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C31 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C36 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C3B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C40 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C45 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C4A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C4F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C54 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C5A 00                         		even
00016C5A 00                         		even
00016C5A                            
00016C5A                            ; ===========================================================================
00016C5A                            ; ---------------------------------------------------------------------------
00016C5A                            ; Object 72 - teleporter (SBZ)
00016C5A                            ; ---------------------------------------------------------------------------
00016C5A                            
00016C5A                            Obj72:					; XREF: Obj_Index
00016C5A 7000                       		moveq	#0,d0
00016C5C 1028 0024                  		move.b	$24(a0),d0
00016C60 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C64 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C68 3028 0008                  		move.w	8(a0),d0
00016C6C 0240 FF80                  		andi.w	#$FF80,d0
00016C70 3238 F700                  		move.w	($FFFFF700).w,d1
00016C74 0441 0080                  		subi.w	#$80,d1
00016C78 0241 FF80                  		andi.w	#$FF80,d1
00016C7C 9041                       		sub.w	d1,d0
00016C7E 0C40 0280                  		cmpi.w	#$280,d0
00016C82 6200                       		bhi.s	Obj72_Delete
00016C84 4E75                       		rts	
00016C86                            ; ===========================================================================
00016C86                            
00016C86                            Obj72_Delete:
00016C86 4EF9 0000 DBF0             		jmp	DeleteObject
00016C8C                            ; ===========================================================================
00016C8C 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016C8E 0000                       		dc.w loc_166C8-Obj72_Index
00016C90 0000                       		dc.w loc_1675E-Obj72_Index
00016C92 0000                       		dc.w loc_16798-Obj72_Index
00016C94                            ; ===========================================================================
00016C94                            
00016C94                            Obj72_Main:				; XREF: Obj72_Index
00016C94 5428 0024                  		addq.b	#2,$24(a0)
00016C98 1028 0028                  		move.b	$28(a0),d0
00016C9C D040                       		add.w	d0,d0
00016C9E 0240 001E                  		andi.w	#$1E,d0
00016CA2 45FA 0000                  		lea	Obj72_Data(pc),a2
00016CA6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CAA 315A 003A                  		move.w	(a2)+,$3A(a0)
00016CAE 214A 003C                  		move.l	a2,$3C(a0)
00016CB2 315A 0036                  		move.w	(a2)+,$36(a0)
00016CB6 315A 0038                  		move.w	(a2)+,$38(a0)
00016CBA                            
00016CBA                            loc_166C8:				; XREF: Obj72_Index
00016CBA 43F8 D000                  		lea	($FFFFD000).w,a1
00016CBE 3029 0008                  		move.w	8(a1),d0
00016CC2 9068 0008                  		sub.w	8(a0),d0
00016CC6 0828 0000 0022             		btst	#0,$22(a0)
00016CCC 6700                       		beq.s	loc_166E0
00016CCE 0640 000F                  		addi.w	#$F,d0
00016CD2                            
00016CD2                            loc_166E0:
00016CD2 0C40 0010                  		cmpi.w	#$10,d0
00016CD6 6400                       		bcc.s	locret_1675C
00016CD8 3229 000C                  		move.w	$C(a1),d1
00016CDC 9268 000C                  		sub.w	$C(a0),d1
00016CE0 0641 0020                  		addi.w	#$20,d1
00016CE4 0C41 0040                  		cmpi.w	#$40,d1
00016CE8 6400                       		bcc.s	locret_1675C
00016CEA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016CEE 6600                       		bne.s	locret_1675C
00016CF0 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016CF6 6600                       		bne.s	loc_1670E
00016CF8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016CFE 6500                       		bcs.s	locret_1675C
00016D00                            
00016D00                            loc_1670E:
00016D00 5428 0024                  		addq.b	#2,$24(a0)
00016D04 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016D0A 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016D10 337C 0800 0014             		move.w	#$800,$14(a1)
00016D16 337C 0000 0010             		move.w	#0,$10(a1)
00016D1C 337C 0000 0012             		move.w	#0,$12(a1)
00016D22 08A8 0005 0022             		bclr	#5,$22(a0)
00016D28 08A9 0005 0022             		bclr	#5,$22(a1)
00016D2E 08E9 0001 0022             		bset	#1,$22(a1)
00016D34 3368 0008 0008             		move.w	8(a0),8(a1)
00016D3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D40 4228 0032                  		clr.b	$32(a0)
00016D44 303C 00BE                  		move.w	#$BE,d0
00016D48 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D4E                            
00016D4E                            locret_1675C:
00016D4E 4E75                       		rts	
00016D50                            ; ===========================================================================
00016D50                            
00016D50                            loc_1675E:				; XREF: Obj72_Index
00016D50 43F8 D000                  		lea	($FFFFD000).w,a1
00016D54 1028 0032                  		move.b	$32(a0),d0
00016D58 5428 0032                  		addq.b	#2,$32(a0)
00016D5C 4EB9 0000 2C22             		jsr	(CalcSine).l
00016D62 EA40                       		asr.w	#5,d0
00016D64 3428 000C                  		move.w	$C(a0),d2
00016D68 9440                       		sub.w	d0,d2
00016D6A 3342 000C                  		move.w	d2,$C(a1)
00016D6E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D74 6600                       		bne.s	locret_16796
00016D76 6100 0000                  		bsr.w	sub_1681C
00016D7A 5428 0024                  		addq.b	#2,$24(a0)
00016D7E 303C 00BC                  		move.w	#$BC,d0
00016D82 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016D88                            
00016D88                            locret_16796:
00016D88 4E75                       		rts	
00016D8A                            ; ===========================================================================
00016D8A                            
00016D8A                            loc_16798:				; XREF: Obj72_Index
00016D8A 588F                       		addq.l	#4,sp
00016D8C 43F8 D000                  		lea	($FFFFD000).w,a1
00016D90 5328 002E                  		subq.b	#1,$2E(a0)
00016D94 6A00                       		bpl.s	loc_167DA
00016D96 3368 0036 0008             		move.w	$36(a0),8(a1)
00016D9C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016DA2 7200                       		moveq	#0,d1
00016DA4 1228 003A                  		move.b	$3A(a0),d1
00016DA8 5801                       		addq.b	#4,d1
00016DAA B228 003B                  		cmp.b	$3B(a0),d1
00016DAE 6500                       		bcs.s	loc_167C2
00016DB0 7200                       		moveq	#0,d1
00016DB2 6000                       		bra.s	loc_16800
00016DB4                            ; ===========================================================================
00016DB4                            
00016DB4                            loc_167C2:
00016DB4 1141 003A                  		move.b	d1,$3A(a0)
00016DB8 2468 003C                  		movea.l	$3C(a0),a2
00016DBC 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DC2 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DC8 6000 0000                  		bra.w	sub_1681C
00016DCC                            ; ===========================================================================
00016DCC                            
00016DCC                            loc_167DA:
00016DCC 2429 0008                  		move.l	8(a1),d2
00016DD0 2629 000C                  		move.l	$C(a1),d3
00016DD4 3029 0010                  		move.w	$10(a1),d0
00016DD8 48C0                       		ext.l	d0
00016DDA E180                       		asl.l	#8,d0
00016DDC D480                       		add.l	d0,d2
00016DDE 3029 0012                  		move.w	$12(a1),d0
00016DE2 48C0                       		ext.l	d0
00016DE4 E180                       		asl.l	#8,d0
00016DE6 D680                       		add.l	d0,d3
00016DE8 2342 0008                  		move.l	d2,8(a1)
00016DEC 2343 000C                  		move.l	d3,$C(a1)
00016DF0 4E75                       		rts	
00016DF2                            ; ===========================================================================
00016DF2                            
00016DF2                            loc_16800:
00016DF2 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016DF8 4228 0024                  		clr.b	$24(a0)
00016DFC 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016E00 337C 0000 0010             		move.w	#0,$10(a1)
00016E06 337C 0200 0012             		move.w	#$200,$12(a1)
00016E0C 4E75                       		rts	
00016E0E                            
00016E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E0E                            
00016E0E                            
00016E0E                            sub_1681C:
00016E0E 7000                       		moveq	#0,d0
00016E10 343C 1000                  		move.w	#$1000,d2
00016E14 3028 0036                  		move.w	$36(a0),d0
00016E18 9069 0008                  		sub.w	8(a1),d0
00016E1C 6C00                       		bge.s	loc_16830
00016E1E 4440                       		neg.w	d0
00016E20 4442                       		neg.w	d2
00016E22                            
00016E22                            loc_16830:
00016E22 7200                       		moveq	#0,d1
00016E24 363C 1000                  		move.w	#$1000,d3
00016E28 3228 0038                  		move.w	$38(a0),d1
00016E2C 9269 000C                  		sub.w	$C(a1),d1
00016E30 6C00                       		bge.s	loc_16844
00016E32 4441                       		neg.w	d1
00016E34 4443                       		neg.w	d3
00016E36                            
00016E36                            loc_16844:
00016E36 B240                       		cmp.w	d0,d1
00016E38 6500                       		bcs.s	loc_1687A
00016E3A 7200                       		moveq	#0,d1
00016E3C 3228 0038                  		move.w	$38(a0),d1
00016E40 9269 000C                  		sub.w	$C(a1),d1
00016E44 4841                       		swap	d1
00016E46 83C3                       		divs.w	d3,d1
00016E48 7000                       		moveq	#0,d0
00016E4A 3028 0036                  		move.w	$36(a0),d0
00016E4E 9069 0008                  		sub.w	8(a1),d0
00016E52 6700                       		beq.s	loc_16866
00016E54 4840                       		swap	d0
00016E56 81C1                       		divs.w	d1,d0
00016E58                            
00016E58                            loc_16866:
00016E58 3340 0010                  		move.w	d0,$10(a1)
00016E5C 3343 0012                  		move.w	d3,$12(a1)
00016E60 4A41                       		tst.w	d1
00016E62 6A00                       		bpl.s	loc_16874
00016E64 4441                       		neg.w	d1
00016E66                            
00016E66                            loc_16874:
00016E66 3141 002E                  		move.w	d1,$2E(a0)
00016E6A 4E75                       		rts	
00016E6C                            ; ===========================================================================
00016E6C                            
00016E6C                            loc_1687A:
00016E6C 7000                       		moveq	#0,d0
00016E6E 3028 0036                  		move.w	$36(a0),d0
00016E72 9069 0008                  		sub.w	8(a1),d0
00016E76 4840                       		swap	d0
00016E78 81C2                       		divs.w	d2,d0
00016E7A 7200                       		moveq	#0,d1
00016E7C 3228 0038                  		move.w	$38(a0),d1
00016E80 9269 000C                  		sub.w	$C(a1),d1
00016E84 6700                       		beq.s	loc_16898
00016E86 4841                       		swap	d1
00016E88 83C0                       		divs.w	d0,d1
00016E8A                            
00016E8A                            loc_16898:
00016E8A 3341 0012                  		move.w	d1,$12(a1)
00016E8E 3342 0010                  		move.w	d2,$10(a1)
00016E92 4A40                       		tst.w	d0
00016E94 6A00                       		bpl.s	loc_168A6
00016E96 4440                       		neg.w	d0
00016E98                            
00016E98                            loc_168A6:
00016E98 3140 002E                  		move.w	d0,$2E(a0)
00016E9C 4E75                       		rts	
00016E9E                            ; End of function sub_1681C
00016E9E                            
00016E9E                            ; ===========================================================================
00016E9E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016EA4 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016EAA 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016EAE 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016EB4 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016EBA 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016EC0 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016EC6 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016ECC 0884 0298 0894             		dc.w $884, $298, $894
00016ED2 0270 0894 0190             		dc.w $270, $894, $190
00016ED8 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EDE 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016EE4 1184 0498 1158             		dc.w $1184, $498, $1158
00016EEA 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016EF0 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016EF6 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016EFC 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016F02 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016F08 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016F0E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016F14 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F1A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F20 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F26                            ; ===========================================================================
00016F26                            ; ---------------------------------------------------------------------------
00016F26                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F26                            ; ---------------------------------------------------------------------------
00016F26                            
00016F26                            Obj78:					; XREF: Obj_Index
00016F26 7000                       		moveq	#0,d0
00016F28 1028 0024                  		move.b	$24(a0),d0
00016F2C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F30 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F34                            ; ===========================================================================
00016F34 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F36 0000                       		dc.w Obj78_Action-Obj78_Index
00016F38 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F3A 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F3C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F3E 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F40 0000                       		dc.w loc_16CC0-Obj78_Index
00016F42                            ; ===========================================================================
00016F42                            
00016F42                            locret_16950:
00016F42 4E75                       		rts	
00016F44                            ; ===========================================================================
00016F44                            
00016F44                            Obj78_Main:				; XREF: Obj78_Index
00016F44 117C 0007 0016             		move.b	#7,$16(a0)
00016F4A 117C 0008 0017             		move.b	#8,$17(a0)
00016F50 4EB9 0000 DB62             		jsr	ObjectFall
00016F56 4EBA E4B6                  		jsr	ObjHitFloor
00016F5A 4A41                       		tst.w	d1
00016F5C 6AE4                       		bpl.s	locret_16950
00016F5E D368 000C                  		add.w	d1,$C(a0)
00016F62 4268 0012                  		clr.w	$12(a0)
00016F66 5428 0024                  		addq.b	#2,$24(a0)
00016F6A 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F72 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F78 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F7E 6700                       		beq.s	loc_16996
00016F80 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016F86                            
00016F86                            loc_16996:
00016F86 0228 0003 0001             		andi.b	#3,1(a0)
00016F8C 0028 0004 0001             		ori.b	#4,1(a0)
00016F92 1168 0001 0022             		move.b	1(a0),$22(a0)
00016F98 117C 0004 0018             		move.b	#4,$18(a0)
00016F9E 117C 0008 0019             		move.b	#8,$19(a0)
00016FA4 117C 000B 0020             		move.b	#$B,$20(a0)
00016FAA 3428 0008                  		move.w	8(a0),d2
00016FAE 7A0C                       		moveq	#$C,d5
00016FB0 0828 0000 0022             		btst	#0,$22(a0)
00016FB6 6700                       		beq.s	loc_169CA
00016FB8 4445                       		neg.w	d5
00016FBA                            
00016FBA                            loc_169CA:
00016FBA 1C3C 0004                  		move.b	#4,d6
00016FBE 7600                       		moveq	#0,d3
00016FC0 7804                       		moveq	#4,d4
00016FC2 2448                       		movea.l	a0,a2
00016FC4 7202                       		moveq	#2,d1
00016FC6                            
00016FC6                            Obj78_LoadBody:
00016FC6 4EB9 0000 E050             		jsr	SingleObjLoad2
00016FCC 6600                       		bne.s	Obj78_QuitLoad
00016FCE 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FD2 1346 0024                  		move.b	d6,$24(a1)
00016FD6 5406                       		addq.b	#2,d6
00016FD8 2368 0004 0004             		move.l	4(a0),4(a1)
00016FDE 3368 0002 0002             		move.w	2(a0),2(a1)
00016FE4 137C 0005 0018             		move.b	#5,$18(a1)
00016FEA 137C 0008 0019             		move.b	#8,$19(a1)
00016FF0 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016FF6 D445                       		add.w	d5,d2
00016FF8 3342 0008                  		move.w	d2,8(a1)
00016FFC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017002 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017008 1368 0022 0001             		move.b	$22(a0),1(a1)
0001700E 137C 0008 001A             		move.b	#8,$1A(a1)
00017014 234A 003C                  		move.l	a2,$3C(a1)
00017018 1344 003C                  		move.b	d4,$3C(a1)
0001701C 5804                       		addq.b	#4,d4
0001701E 2449                       		movea.l	a1,a2
00017020                            
00017020                            Obj78_QuitLoad:
00017020 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017024                            
00017024 117C 0007 002A             		move.b	#7,$2A(a0)
0001702A 4228 003C                  		clr.b	$3C(a0)
0001702E                            
0001702E                            Obj78_Action:				; XREF: Obj78_Index
0001702E 4A28 0022                  		tst.b	$22(a0)
00017032 6B00 0000                  		bmi.w	loc_16C96
00017036 7000                       		moveq	#0,d0
00017038 1028 0025                  		move.b	$25(a0),d0
0001703C 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017040 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017044 1228 002B                  		move.b	$2B(a0),d1
00017048 6A00                       		bpl.s	Obj78_Display
0001704A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017050 1028 0026                  		move.b	$26(a0),d0
00017054 0240 007F                  		andi.w	#$7F,d0
00017058 5828 0026                  		addq.b	#4,$26(a0)
0001705C 1031 0000                  		move.b	(a1,d0.w),d0
00017060 6A00                       		bpl.s	Obj78_AniHead
00017062 08A8 0007 002B             		bclr	#7,$2B(a0)
00017068 6000                       		bra.s	Obj78_Display
0001706A                            ; ===========================================================================
0001706A                            
0001706A                            Obj78_AniHead:
0001706A 0201 0010                  		andi.b	#$10,d1
0001706E D001                       		add.b	d1,d0
00017070 1140 001A                  		move.b	d0,$1A(a0)
00017074                            
00017074                            Obj78_Display:
00017074 3028 0008                  		move.w	8(a0),d0
00017078 0240 FF80                  		andi.w	#$FF80,d0
0001707C 3238 F700                  		move.w	($FFFFF700).w,d1
00017080 0441 0080                  		subi.w	#$80,d1
00017084 0241 FF80                  		andi.w	#$FF80,d1
00017088 9041                       		sub.w	d1,d0
0001708A 0C40 0280                  		cmpi.w	#$280,d0
0001708E 6200 0000                  		bhi.w	Obj78_ChkGone
00017092 4EF9 0000 DBB4             		jmp	DisplaySprite
00017098                            ; ===========================================================================
00017098                            
00017098                            Obj78_ChkGone:
00017098 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001709C 7000                       		moveq	#0,d0
0001709E 1028 0023                  		move.b	$23(a0),d0
000170A2 6700                       		beq.s	loc_16ABC
000170A4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000170AA                            
000170AA                            loc_16ABC:
000170AA 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000170B0 4E75                       		rts	
000170B2                            ; ===========================================================================
000170B2                            
000170B2                            Obj78_Delete:				; XREF: Obj78_Index
000170B2 4EF9 0000 DBF0             		jmp	DeleteObject
000170B8                            ; ===========================================================================
000170B8 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000170BA 0000                       		dc.w loc_16B02-Obj78_Index2
000170BC                            ; ===========================================================================
000170BC                            
000170BC                            Obj78_Move:				; XREF: Obj78_Index2
000170BC 5328 002A                  		subq.b	#1,$2A(a0)
000170C0 6B00                       		bmi.s	Obj78_Move2
000170C2 4E75                       		rts	
000170C4                            ; ===========================================================================
000170C4                            
000170C4                            Obj78_Move2:
000170C4 5428 0025                  		addq.b	#2,$25(a0)
000170C8 117C 0010 002A             		move.b	#$10,$2A(a0)
000170CE 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170D4 317C 0040 0014             		move.w	#$40,$14(a0)
000170DA 0868 0004 002B             		bchg	#4,$2B(a0)
000170E0 6600                       		bne.s	loc_16AFC
000170E2 4268 0010                  		clr.w	$10(a0)
000170E6 4468 0014                  		neg.w	$14(a0)
000170EA                            
000170EA                            loc_16AFC:
000170EA 08E8 0007 002B             		bset	#7,$2B(a0)
000170F0                            
000170F0                            loc_16B02:				; XREF: Obj78_Index2
000170F0 5328 002A                  		subq.b	#1,$2A(a0)
000170F4 6B00                       		bmi.s	loc_16B5E
000170F6 2F28 0008                  		move.l	8(a0),-(sp)
000170FA 2428 0008                  		move.l	8(a0),d2
000170FE 3028 0010                  		move.w	$10(a0),d0
00017102 0828 0000 0022             		btst	#0,$22(a0)
00017108 6700                       		beq.s	loc_16B1E
0001710A 4440                       		neg.w	d0
0001710C                            
0001710C                            loc_16B1E:
0001710C 48C0                       		ext.l	d0
0001710E E180                       		asl.l	#8,d0
00017110 D480                       		add.l	d0,d2
00017112 2142 0008                  		move.l	d2,8(a0)
00017116 4EBA E2F6                  		jsr	ObjHitFloor
0001711A 241F                       		move.l	(sp)+,d2
0001711C 0C41 FFF8                  		cmpi.w	#-8,d1
00017120 6D00                       		blt.s	loc_16B70
00017122 0C41 000C                  		cmpi.w	#$C,d1
00017126 6C00                       		bge.s	loc_16B70
00017128 D368 000C                  		add.w	d1,$C(a0)
0001712C 4842                       		swap	d2
0001712E B468 0008                  		cmp.w	8(a0),d2
00017132 6700                       		beq.s	locret_16B5C
00017134 7000                       		moveq	#0,d0
00017136 1028 003C                  		move.b	$3C(a0),d0
0001713A 5228 003C                  		addq.b	#1,$3C(a0)
0001713E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017144 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017148                            
00017148                            locret_16B5C:
00017148 4E75                       		rts	
0001714A                            ; ===========================================================================
0001714A                            
0001714A                            loc_16B5E:
0001714A 5528 0025                  		subq.b	#2,$25(a0)
0001714E 117C 0007 002A             		move.b	#7,$2A(a0)
00017154 317C 0000 0010             		move.w	#0,$10(a0)
0001715A 4E75                       		rts	
0001715C                            ; ===========================================================================
0001715C                            
0001715C                            loc_16B70:
0001715C 2142 0008                  		move.l	d2,8(a0)
00017160 0868 0000 0022             		bchg	#0,$22(a0)
00017166 1168 0022 0001             		move.b	$22(a0),1(a0)
0001716C 7000                       		moveq	#0,d0
0001716E 1028 003C                  		move.b	$3C(a0),d0
00017172 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017178 5228 003C                  		addq.b	#1,$3C(a0)
0001717C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017182 4E75                       		rts	
00017184                            ; ===========================================================================
00017184                            
00017184                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017184 2268 003C                  		movea.l	$3C(a0),a1
00017188 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001718E 6A00                       		bpl.s	Obj78_BodySeg1
00017190 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017196 1028 0026                  		move.b	$26(a0),d0
0001719A 0240 007F                  		andi.w	#$7F,d0
0001719E 5828 0026                  		addq.b	#4,$26(a0)
000171A2 4A31 0004                  		tst.b	4(a1,d0.w)
000171A6 6A00                       		bpl.s	Obj78_AniBody
000171A8 5828 0026                  		addq.b	#4,$26(a0)
000171AC                            
000171AC                            Obj78_AniBody:
000171AC 1031 0000                  		move.b	(a1,d0.w),d0
000171B0 5000                       		addq.b	#8,d0
000171B2 1140 001A                  		move.b	d0,$1A(a0)
000171B6                            
000171B6                            Obj78_BodySeg1:				; XREF: Obj78_Index
000171B6 2268 003C                  		movea.l	$3C(a0),a1
000171BA 4A28 0022                  		tst.b	$22(a0)
000171BE 6B00 0000                  		bmi.w	loc_16C90
000171C2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171C8 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171CE 6700 0000                  		beq.w	loc_16C64
000171D2 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171D8 3029 0010                  		move.w	$10(a1),d0
000171DC D069 0014                  		add.w	$14(a1),d0
000171E0 3140 0010                  		move.w	d0,$10(a0)
000171E4 2428 0008                  		move.l	8(a0),d2
000171E8 2602                       		move.l	d2,d3
000171EA 3028 0010                  		move.w	$10(a0),d0
000171EE 0828 0000 0022             		btst	#0,$22(a0)
000171F4 6700                       		beq.s	loc_16C0C
000171F6 4440                       		neg.w	d0
000171F8                            
000171F8                            loc_16C0C:
000171F8 48C0                       		ext.l	d0
000171FA E180                       		asl.l	#8,d0
000171FC D480                       		add.l	d0,d2
000171FE 2142 0008                  		move.l	d2,8(a0)
00017202 4843                       		swap	d3
00017204 B668 0008                  		cmp.w	8(a0),d3
00017208 6700                       		beq.s	loc_16C64
0001720A 7000                       		moveq	#0,d0
0001720C 1028 003C                  		move.b	$3C(a0),d0
00017210 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017214 0C01 0080                  		cmpi.b	#-$80,d1
00017218 6600                       		bne.s	loc_16C50
0001721A 4843                       		swap	d3
0001721C 2143 0008                  		move.l	d3,8(a0)
00017220 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017224 0868 0000 0022             		bchg	#0,$22(a0)
0001722A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017230 5228 003C                  		addq.b	#1,$3C(a0)
00017234 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001723A 6000                       		bra.s	loc_16C64
0001723C                            ; ===========================================================================
0001723C                            
0001723C                            loc_16C50:
0001723C 4881                       		ext.w	d1
0001723E D368 000C                  		add.w	d1,$C(a0)
00017242 5228 003C                  		addq.b	#1,$3C(a0)
00017246 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001724C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017250                            
00017250                            loc_16C64:
00017250 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017256 6700                       		beq.s	loc_16C90
00017258 0C11 0027                  		cmpi.b	#$27,0(a1)
0001725C 6700                       		beq.s	loc_16C7C
0001725E 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017264 6600                       		bne.s	loc_16C82
00017266                            
00017266                            loc_16C7C:
00017266 117C 000A 0024             		move.b	#$A,$24(a0)
0001726C                            
0001726C                            loc_16C82:
0001726C 4EF9 0000 DBB4             		jmp	DisplaySprite
00017272                            
00017272                            ; ===========================================================================
00017272 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001727A                            ; ===========================================================================
0001727A                            
0001727A                            loc_16C90:
0001727A 08E9 0007 0022             		bset	#7,$22(a1)
00017280                            
00017280                            loc_16C96:
00017280 7000                       		moveq	#0,d0
00017282 1028 0024                  		move.b	$24(a0),d0
00017286 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001728A 0828 0000 0022             		btst	#0,$22(a0)
00017290 6700                       		beq.s	loc_16CAA
00017292 4440                       		neg.w	d0
00017294                            
00017294                            loc_16CAA:
00017294 3140 0010                  		move.w	d0,$10(a0)
00017298 317C FC00 0012             		move.w	#-$400,$12(a0)
0001729E 117C 000C 0024             		move.b	#$C,$24(a0)
000172A4 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000172AA                            
000172AA                            loc_16CC0:				; XREF: Obj78_Index
000172AA 4EB9 0000 DB62             		jsr	ObjectFall
000172B0 4A68 0012                  		tst.w	$12(a0)
000172B4 6B00                       		bmi.s	loc_16CE0
000172B6 4EBA E156                  		jsr	ObjHitFloor
000172BA 4A41                       		tst.w	d1
000172BC 6A00                       		bpl.s	loc_16CE0
000172BE D368 000C                  		add.w	d1,$C(a0)
000172C2 317C FC00 0012             		move.w	#-$400,$12(a0)
000172C8                            
000172C8                            loc_16CE0:
000172C8 4A28 0001                  		tst.b	1(a0)
000172CC 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172D0 4EF9 0000 DBB4             		jmp	DisplaySprite
000172D6                            ; ===========================================================================
000172D6                            Ani_obj78:
000172D6                            	include "_anim\obj78.asm"
000172D6                            ; ---------------------------------------------------------------------------
000172D6                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172D6                            ; ---------------------------------------------------------------------------
000172D6 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000172E6 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000172F6 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017306 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017316 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017326 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017336 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017346 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017356                            	even
00017356                            	even
00017356                            
00017356                            ; ---------------------------------------------------------------------------
00017356                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017356                            ; ---------------------------------------------------------------------------
00017356                            Map_obj78:
00017356                            	include "_maps\obj78.asm"
00017356                            ; ---------------------------------------------------------------------------
00017356                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017356                            ; ---------------------------------------------------------------------------
00017356 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001735A 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001735E 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017362 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017366 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001736A 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001736E 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017372 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017376 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001737A 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001737E 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017382 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017386 01                         byte_16D9E:	dc.b 1
00017387 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001738C 01                         byte_16DA4:	dc.b 1
0001738D F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017392 01                         byte_16DAA:	dc.b 1
00017393 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017398 01                         byte_16DB0:	dc.b 1
00017399 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001739E 01                         byte_16DB6:	dc.b 1
0001739F EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000173A4 01                         byte_16DBC:	dc.b 1
000173A5 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000173AA 01                         byte_16DC2:	dc.b 1
000173AB EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000173B0 01                         byte_16DC8:	dc.b 1
000173B1 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000173B6 01                         byte_16DCE:	dc.b 1
000173B7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000173BC 01                         byte_16DD4:	dc.b 1
000173BD F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173C2 01                         byte_16DDA:	dc.b 1
000173C3 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173C8 01                         byte_16DE0:	dc.b 1
000173C9 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173CE 01                         byte_16DE6:	dc.b 1
000173CF F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173D4 01                         byte_16DEC:	dc.b 1
000173D5 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173DA 01                         byte_16DF2:	dc.b 1
000173DB F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000173E0 01                         byte_16DF8:	dc.b 1
000173E1 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000173E6 01                         byte_16DFE:	dc.b 1
000173E7 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000173EC 01                         byte_16E04:	dc.b 1
000173ED F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000173F2 01                         byte_16E0A:	dc.b 1
000173F3 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000173F8 01                         byte_16E10:	dc.b 1
000173F9 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000173FE 01                         byte_16E16:	dc.b 1
000173FF EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017404 01                         byte_16E1C:	dc.b 1
00017405 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001740A 01                         byte_16E22:	dc.b 1
0001740B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017410 01                         byte_16E28:	dc.b 1
00017411 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017416                            		even
00017416                            		even
00017416                            
00017416                            ; ===========================================================================
00017416                            ; ---------------------------------------------------------------------------
00017416                            ; Object 79 - lamppost
00017416                            ; ---------------------------------------------------------------------------
00017416                            
00017416                            Obj79:					; XREF: Obj_Index
00017416 7000                       		moveq	#0,d0
00017418 1028 0024                  		move.b	$24(a0),d0
0001741C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017420 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017424 4EFA 8836                  		jmp	MarkObjGone
00017428                            ; ===========================================================================
00017428 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001742A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001742C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001742E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017430                            ; ===========================================================================
00017430                            
00017430                            Obj79_Main:				; XREF: Obj79_Index
00017430 5428 0024                  		addq.b	#2,$24(a0)
00017434 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001743C 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017442 117C 0004 0001             		move.b	#4,1(a0)
00017448 117C 0008 0019             		move.b	#8,$19(a0)
0001744E 117C 0005 0018             		move.b	#5,$18(a0)
00017454 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017458 7000                       		moveq	#0,d0
0001745A 1028 0023                  		move.b	$23(a0),d0
0001745E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017464 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001746A 6600                       		bne.s	Obj79_RedLamp
0001746C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017470 0201 007F                  		andi.b	#$7F,d1
00017474 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017478 0202 007F                  		andi.b	#$7F,d2
0001747C B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001747E 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017480                            
00017480                            Obj79_RedLamp:
00017480 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017486 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001748C 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017492 4E75                       		rts	
00017494                            ; ===========================================================================
00017494                            
00017494                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017494 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017498 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001749C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000174A0 6B00 0000                  		bmi.w	locret_16F90
000174A4 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174A8 0201 007F                  		andi.b	#$7F,d1
000174AC 1428 0028                  		move.b	$28(a0),d2
000174B0 0202 007F                  		andi.b	#$7F,d2
000174B4 B202                       		cmp.b	d2,d1
000174B6 6500                       		bcs.s	Obj79_HitLamp
000174B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174BC 7000                       		moveq	#0,d0
000174BE 1028 0023                  		move.b	$23(a0),d0
000174C2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174C8 117C 0004 0024             		move.b	#4,$24(a0)
000174CE 117C 0003 001A             		move.b	#3,$1A(a0)
000174D4 6000 0000                  		bra.w	locret_16F90
000174D8                            ; ===========================================================================
000174D8                            
000174D8                            Obj79_HitLamp:
000174D8 3038 D008                  		move.w	($FFFFD008).w,d0
000174DC 9068 0008                  		sub.w	8(a0),d0
000174E0 5040                       		addq.w	#8,d0
000174E2 0C40 0010                  		cmpi.w	#$10,d0
000174E6 6400 0000                  		bcc.w	locret_16F90
000174EA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174EE 9068 000C                  		sub.w	$C(a0),d0
000174F2 0640 0040                  		addi.w	#$40,d0
000174F6 0C40 0068                  		cmpi.w	#$68,d0
000174FA 6400                       		bcc.s	locret_16F90
000174FC 303C 00A1                  		move.w	#$A1,d0
00017500 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017506 5428 0024                  		addq.b	#2,$24(a0)
0001750A 4EB9 0000 E03A             		jsr	SingleObjLoad
00017510 6600                       		bne.s	loc_16F76
00017512 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017516 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001751C 3368 0008 0030             		move.w	8(a0),$30(a1)
00017522 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017528 0469 0018 0032             		subi.w	#$18,$32(a1)
0001752E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017536 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001753C 137C 0004 0001             		move.b	#4,1(a1)
00017542 137C 0008 0019             		move.b	#8,$19(a1)
00017548 137C 0004 0018             		move.b	#4,$18(a1)
0001754E 137C 0002 001A             		move.b	#2,$1A(a1)
00017554 337C 0020 0036             		move.w	#$20,$36(a1)
0001755A                            
0001755A                            loc_16F76:
0001755A 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017560 6100 0000                  		bsr.w	Obj79_StoreInfo
00017564 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017568 7000                       		moveq	#0,d0
0001756A 1028 0023                  		move.b	$23(a0),d0
0001756E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017574                            
00017574                            locret_16F90:
00017574 4E75                       		rts	
00017576                            ; ===========================================================================
00017576                            
00017576                            Obj79_AfterHit:				; XREF: Obj79_Index
00017576 4E75                       		rts	
00017578                            ; ===========================================================================
00017578                            
00017578                            Obj79_Twirl:				; XREF: Obj79_Index
00017578 5368 0036                  		subq.w	#1,$36(a0)
0001757C 6A00                       		bpl.s	loc_16FA0
0001757E 117C 0004 0024             		move.b	#4,$24(a0)
00017584                            
00017584                            loc_16FA0:
00017584 1028 0026                  		move.b	$26(a0),d0
00017588 0428 0010 0026             		subi.b	#$10,$26(a0)
0001758E 0400 0040                  		subi.b	#$40,d0
00017592 4EB9 0000 2C22             		jsr	(CalcSine).l
00017598 C3FC 0C00                  		muls.w	#$C00,d1
0001759C 4841                       		swap	d1
0001759E D268 0030                  		add.w	$30(a0),d1
000175A2 3141 0008                  		move.w	d1,8(a0)
000175A6 C1FC 0C00                  		muls.w	#$C00,d0
000175AA 4840                       		swap	d0
000175AC D068 0032                  		add.w	$32(a0),d0
000175B0 3140 000C                  		move.w	d0,$C(a0)
000175B4 4E75                       		rts	
000175B6                            ; ===========================================================================
000175B6                            ; ---------------------------------------------------------------------------
000175B6                            ; Subroutine to	store information when you hit a lamppost
000175B6                            ; ---------------------------------------------------------------------------
000175B6                            
000175B6                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000175B6 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000175BC 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175C2 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175C8 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175CE 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175D4 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175DA 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000175E0 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000175E6 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000175EC 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000175F2 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000175F8 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000175FE 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017604 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001760A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017610 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017616 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001761C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017622 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017628 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001762E 4E75                       		rts	
00017630                            
00017630                            ; ---------------------------------------------------------------------------
00017630                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017630                            ; ---------------------------------------------------------------------------
00017630                            
00017630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017630                            
00017630                            
00017630                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017630 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017636 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001763C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017642 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017648 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001764E 4278 FE20                  		clr.w	($FFFFFE20).w
00017652 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017656 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001765C 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017662 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017666 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001766C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017672 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017678 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001767E 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017684 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
0001768A 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017690 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017696 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001769C 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000176A2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000176A8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000176AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000176B4 6600                       		bne.s	loc_170E4
000176B6 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000176BC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176C2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176C8                            
000176C8                            loc_170E4:
000176C8 4A38 FE30                  		tst.b	($FFFFFE30).w
000176CC 6A00                       		bpl.s	locret_170F6
000176CE 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176D2 0440 00A0                  		subi.w	#$A0,d0
000176D6 31C0 F728                  		move.w	d0,($FFFFF728).w
000176DA                            
000176DA                            locret_170F6:
000176DA 4E75                       		rts	
000176DC                            ; End of function Obj79_LoadInfo
000176DC                            
000176DC                            ; ===========================================================================
000176DC                            ; ---------------------------------------------------------------------------
000176DC                            ; Sprite mappings - lamppost
000176DC                            ; ---------------------------------------------------------------------------
000176DC                            Map_obj79:
000176DC                            	include "_maps\obj79.asm"
000176DC                            ; ---------------------------------------------------------------------------
000176DC                            ; Sprite mappings - lamppost
000176DC                            ; ---------------------------------------------------------------------------
000176DC 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000176E0 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000176E4 06                         byte_17100:	dc.b 6
000176E5 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176EA E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176EF F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176F4 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176F9 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000176FE D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017703 04                         byte_1711F:	dc.b 4
00017704 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017709 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001770E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017713 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017718 02                         byte_17134:	dc.b 2
00017719 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001771E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017723 06                         byte_1713F:	dc.b 6
00017724 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017729 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001772E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017733 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017738 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001773D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017742                            		even
00017742                            		even
00017742                            
00017742                            ; ===========================================================================
00017742                            ; ---------------------------------------------------------------------------
00017742                            ; Object 7D - hidden points at the end of a level
00017742                            ; ---------------------------------------------------------------------------
00017742                            
00017742                            Obj7D:					; XREF: Obj_Index
00017742 7000                       		moveq	#0,d0
00017744 1028 0024                  		move.b	$24(a0),d0
00017748 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001774C 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017750                            ; ===========================================================================
00017750 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017752 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017754                            ; ===========================================================================
00017754                            
00017754                            Obj7D_Main:				; XREF: Obj7D_Index
00017754 7410                       		moveq	#$10,d2
00017756 3602                       		move.w	d2,d3
00017758 D643                       		add.w	d3,d3
0001775A 43F8 D000                  		lea	($FFFFD000).w,a1
0001775E 3029 0008                  		move.w	8(a1),d0
00017762 9068 0008                  		sub.w	8(a0),d0
00017766 D042                       		add.w	d2,d0
00017768 B043                       		cmp.w	d3,d0
0001776A 6400                       		bcc.s	Obj7D_ChkDel
0001776C 3229 000C                  		move.w	$C(a1),d1
00017770 9268 000C                  		sub.w	$C(a0),d1
00017774 D242                       		add.w	d2,d1
00017776 B243                       		cmp.w	d3,d1
00017778 6400                       		bcc.s	Obj7D_ChkDel
0001777A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001777E 6600                       		bne.s	Obj7D_ChkDel
00017780 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017784 6600                       		bne.s	Obj7D_ChkDel
00017786 5428 0024                  		addq.b	#2,$24(a0)
0001778A 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017792 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017798 0028 0004 0001             		ori.b	#4,1(a0)
0001779E 117C 0000 0018             		move.b	#0,$18(a0)
000177A4 117C 0010 0019             		move.b	#$10,$19(a0)
000177AA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000177B0 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000177B6 303C 00C9                  		move.w	#$C9,d0
000177BA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000177C0 7000                       		moveq	#0,d0
000177C2 1028 0028                  		move.b	$28(a0),d0
000177C6 D040                       		add.w	d0,d0
000177C8 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177CC 4EB9 0000 0000             		jsr	AddPoints
000177D2                            
000177D2                            Obj7D_ChkDel:
000177D2 3028 0008                  		move.w	8(a0),d0
000177D6 0240 FF80                  		andi.w	#$FF80,d0
000177DA 3238 F700                  		move.w	($FFFFF700).w,d1
000177DE 0441 0080                  		subi.w	#$80,d1
000177E2 0241 FF80                  		andi.w	#$FF80,d1
000177E6 9041                       		sub.w	d1,d0
000177E8 0C40 0280                  		cmpi.w	#$280,d0
000177EC 6200                       		bhi.s	Obj7D_Delete
000177EE 4E75                       		rts	
000177F0                            ; ===========================================================================
000177F0                            
000177F0                            Obj7D_Delete:
000177F0 4EF9 0000 DBF0             		jmp	DeleteObject
000177F6                            ; ===========================================================================
000177F6 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000177F8 03E8                       		dc.w 1000
000177FA 0064                       		dc.w 100
000177FC 0001                       		dc.w 1
000177FE                            ; ===========================================================================
000177FE                            
000177FE                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000177FE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017802 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017804 3028 0008                  		move.w	8(a0),d0
00017808 0240 FF80                  		andi.w	#-$80,d0
0001780C 3238 F700                  		move.w	($FFFFF700).w,d1
00017810 0441 0080                  		subi.w	#$80,d1
00017814 0241 FF80                  		andi.w	#-$80,d1
00017818 9041                       		sub.w	d1,d0
0001781A 0C40 0280                  		cmpi.w	#$280,d0
0001781E 6200                       		bhi.s	Obj7D_Delete2
00017820 4EF9 0000 DBB4             		jmp	DisplaySprite
00017826                            ; ===========================================================================
00017826                            
00017826                            Obj7D_Delete2:
00017826 4EF9 0000 DBF0             		jmp	DeleteObject
0001782C                            ; ===========================================================================
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            ; Sprite mappings - hidden points at the end of	a level
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            Map_obj7D:
0001782C                            	include "_maps\obj7D.asm"
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            ; Sprite mappings - hidden points at the end of	a level
0001782C                            ; ---------------------------------------------------------------------------
0001782C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017830 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017834 00                         byte_17250:	dc.b 0
00017835 01                         byte_17251:	dc.b 1
00017836 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001783B 01                         byte_17257:	dc.b 1
0001783C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017841 01                         byte_1725D:	dc.b 1
00017842 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017848 00                         		even
00017848 00                         		even
00017848                            
00017848                            ; ===========================================================================
00017848                            ; ---------------------------------------------------------------------------
00017848                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017848                            ; ---------------------------------------------------------------------------
00017848                            
00017848                            Obj8A:					; XREF: Obj_Index
00017848 7000                       		moveq	#0,d0
0001784A 1028 0024                  		move.b	$24(a0),d0
0001784E 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017852 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017856                            ; ===========================================================================
00017856 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017858 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001785A                            ; ===========================================================================
0001785A                            
0001785A                            Obj8A_Main:				; XREF: Obj8A_Index
0001785A 5428 0024                  		addq.b	#2,$24(a0)
0001785E 317C 0120 0008             		move.w	#$120,8(a0)
00017864 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001786A 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017872 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017878 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001787C 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017880 117C 0000 0001             		move.b	#0,1(a0)
00017886 117C 0000 0018             		move.b	#0,$18(a0)
0001788C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017892 6600                       		bne.s	Obj8A_Display	; if not, branch
00017894 317C 00A6 0002             		move.w	#$A6,2(a0)
0001789A 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000178A0 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000178A4 6700                       		beq.s	Obj8A_Display	; if not, branch
000178A6 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000178AC 6600                       		bne.s	Obj8A_Display	; if not, branch
000178AE 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000178B4 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000178BA 4EF9 0000 DBF0             		jmp	DeleteObject
000178C0                            ; ===========================================================================
000178C0                            
000178C0                            Obj8A_Display:				; XREF: Obj8A_Index
000178C0 4EF9 0000 DBB4             		jmp	DisplaySprite
000178C6                            ; ===========================================================================
000178C6                            ; ---------------------------------------------------------------------------
000178C6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178C6                            ; ---------------------------------------------------------------------------
000178C6                            Map_obj8A:
000178C6                            	include "_maps\obj8A.asm"
000178C6                            ; --------------------------------------------------------------------------------
000178C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178C6                            ; --------------------------------------------------------------------------------
000178C6                            
000178C6                            SME_MD8yg:	
000178C6 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178CA 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178CE 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178D2 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178D6 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178DA 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178DC 0E                         SME_MD8yg_16:	dc.b $E	
000178DD F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000178E2 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000178E7 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000178EC F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000178F1 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000178F6 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000178FB F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
00017900 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
00017905 F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
0001790A F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
0001790F F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
00017914 F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017919 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
0001791E F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017923 10                         SME_MD8yg_5D:	dc.b $10	
00017924 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017929 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
0001792E D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017933 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017938 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
0001793D D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017942 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017947 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
0001794C 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017951 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017956 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
0001795B 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017960 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
00017965 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
0001796A 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
0001796F 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
00017974 0A                         SME_MD8yg_AE:	dc.b $A	
00017975 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
0001797A D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
0001797F D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
00017984 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
00017989 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
0001798E D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017993 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017998 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
0001799D 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000179A2 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000179A7 18                         SME_MD8yg_E1:	dc.b $18	
000179A8 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000179AD D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
000179B2 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
000179B7 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000179BC D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000179C1 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179C6 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179CB D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179D0 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179D5 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179DA D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179DF D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000179E4 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
000179E9 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000179EE D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000179F3 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000179F8 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
000179FD 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017A02 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017A07 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017A0C 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017A11 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017A16 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A1B 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A20 14                         SME_MD8yg_15A:	dc.b $14	
00017A21 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A26 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A2B D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A30 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A35 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A3A D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A3F 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A44 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A49 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A4E 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A53 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A58 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A5D 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A62 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A67 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A6C 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A71 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A76 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A7B 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A80 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A85 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017A86 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017A8B D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017A90 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017A95 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017A9A D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017A9F D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017AA4 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AA9 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017AAE D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017AB3 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017AB8 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017ABD D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017AC2 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017AC7 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017ACC 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AD1 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017AD6 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017ADB 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017AE0 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017AE5 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017AEA 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017AEF 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017AF4 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017AF9 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017AFE 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017B03 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017B08 17                         SME_MD8yg_242:	dc.b $17	
00017B09 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017B0E D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017B13 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017B18 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B1D D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B22 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B27 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B2C D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B31 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B36 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B3B D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B40 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B45 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B4A 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B4F 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B54 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B59 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B5E 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B63 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B68 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B6D 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B72 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B77 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B7C 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B7D D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B82 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017B87 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017B8C D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017B91 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017B96 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017B9B D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017BA0 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017BA5 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017BAA D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017BAF D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017BB4 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017BB9 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017BBE 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BC3 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BC8 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BCD 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BD2 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BD7 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BDC 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017BE1 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017BE6 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017BEB 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017BF0 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017BF5 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017BFA 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017BFF 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017C04 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017C09 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017C0E 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017C13 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017C18 0F                         SME_MD8yg_352:	dc.b $F	
00017C19 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C1E F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C23 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C28 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C2D F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C32 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C37 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C3C F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C41 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C46 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C4B F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C50 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C55 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C5A F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C5F F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C64 08                         SME_MD8yg_39E:	dc.b 8	
00017C65 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C6A 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C6F 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C74 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C79 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C7E 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C83 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017C88 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017C8D 17                         SME_MD8yg_3C7:	dc.b $17	
00017C8E E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017C93 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017C98 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017C9D E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017CA2 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017CA7 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017CAC D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017CB1 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017CB6 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017CBB D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017CC0 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CC5 D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CCA D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CCF E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CD4 E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CD9 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CDE E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017CE3 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017CE8 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017CED F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017CF2 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017CF7 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017CFC F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017D02 00                         		even
00017D02 00                         		even
00017D02                            
00017D02                            ; ===========================================================================
00017D02                            ; ---------------------------------------------------------------------------
00017D02                            ; Object 3D - Eggman (GHZ)
00017D02                            ; ---------------------------------------------------------------------------
00017D02                            
00017D02                            Obj3D:					; XREF: Obj_Index
00017D02 7000                       		moveq	#0,d0
00017D04 1028 0024                  		move.b	$24(a0),d0
00017D08 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017D0C 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017D10                            ; ===========================================================================
00017D10 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017D12 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017D14 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017D16 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017D18                            
00017D18 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D1A 0401                       		dc.b 4,	1
00017D1C 0607                       		dc.b 6,	7
00017D1E                            ; ===========================================================================
00017D1E                            
00017D1E                            Obj3D_Main:				; XREF: Obj3D_Index
00017D1E 45F9 0001 7D18             		lea	(Obj3D_ObjData).l,a2
00017D24 2248                       		movea.l	a0,a1
00017D26 7202                       		moveq	#2,d1
00017D28 6000                       		bra.s	Obj3D_LoadBoss
00017D2A                            ; ===========================================================================
00017D2A                            
00017D2A                            Obj3D_Loop:
00017D2A 4EB9 0000 E050             		jsr	SingleObjLoad2
00017D30 6600                       		bne.s	loc_17772
00017D32                            
00017D32                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D32 135A 0024                  		move.b	(a2)+,$24(a1)
00017D36 12BC 003D                  		move.b	#$3D,0(a1)
00017D3A 3368 0008 0008             		move.w	8(a0),8(a1)
00017D40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D46 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D4E 337C 0400 0002             		move.w	#$400,2(a1)
00017D54 137C 0004 0001             		move.b	#4,1(a1)
00017D5A 137C 0020 0019             		move.b	#$20,$19(a1)
00017D60 137C 0003 0018             		move.b	#3,$18(a1)
00017D66 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D6A 2348 0034                  		move.l	a0,$34(a1)
00017D6E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D72                            
00017D72                            loc_17772:
00017D72 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D78 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D7E 117C 000F 0020             		move.b	#$F,$20(a0)
00017D84 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017D8A                            
00017D8A                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017D8A 7000                       		moveq	#0,d0
00017D8C 1028 0025                  		move.b	$25(a0),d0
00017D90 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017D94 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017D98 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017D9E 4EB9 0000 AC66             		jsr	AnimateSprite
00017DA4 1028 0022                  		move.b	$22(a0),d0
00017DA8 0200 0003                  		andi.b	#3,d0
00017DAC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017DB2 8128 0001                  		or.b	d0,1(a0)
00017DB6 4EF9 0000 DBB4             		jmp	DisplaySprite
00017DBC                            ; ===========================================================================
00017DBC 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017DBE 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017DC0 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DC2 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DC4 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DC6 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DC8 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DCA                            ; ===========================================================================
00017DCA                            
00017DCA                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DCA 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017DD0 6100 0000                  		bsr.w	BossMove
00017DD4 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DDA 6600                       		bne.s	loc_177E6
00017DDC 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017DE2 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017DE6                            
00017DE6                            loc_177E6:
00017DE6 1028 003F                  		move.b	$3F(a0),d0
00017DEA 4EB9 0000 2C22             		jsr	(CalcSine).l
00017DF0 EC40                       		asr.w	#6,d0
00017DF2 D068 0038                  		add.w	$38(a0),d0
00017DF6 3140 000C                  		move.w	d0,$C(a0)
00017DFA 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E00 5428 003F                  		addq.b	#2,$3F(a0)
00017E04 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017E0A 6400                       		bcc.s	locret_1784A
00017E0C 4A28 0022                  		tst.b	$22(a0)
00017E10 6B00                       		bmi.s	loc_1784C
00017E12 4A28 0020                  		tst.b	$20(a0)
00017E16 6600                       		bne.s	locret_1784A
00017E18 4A28 003E                  		tst.b	$3E(a0)
00017E1C 6600                       		bne.s	Obj3D_ShipFlash
00017E1E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E24 303C 00AC                  		move.w	#$AC,d0
00017E28 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E2E                            
00017E2E                            Obj3D_ShipFlash:
00017E2E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E32 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E34 4A51                       		tst.w	(a1)
00017E36 6600                       		bne.s	loc_1783C
00017E38 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E3C                            
00017E3C                            loc_1783C:
00017E3C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E3E 5328 003E                  		subq.b	#1,$3E(a0)
00017E42 6600                       		bne.s	locret_1784A
00017E44 117C 000F 0020             		move.b	#$F,$20(a0)
00017E4A                            
00017E4A                            locret_1784A:
00017E4A 4E75                       		rts	
00017E4C                            ; ===========================================================================
00017E4C                            
00017E4C                            loc_1784C:				; XREF: loc_177E6
00017E4C 7064                       		moveq	#100,d0
00017E4E 6100 0000                  		bsr.w	AddPoints
00017E52 117C 0008 0025             		move.b	#8,$25(a0)
00017E58 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E5E 4E75                       		rts	
00017E60                            
00017E60                            ; ---------------------------------------------------------------------------
00017E60                            ; Defeated boss	subroutine
00017E60                            ; ---------------------------------------------------------------------------
00017E60                            
00017E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E60                            
00017E60                            
00017E60                            BossDefeated:
00017E60 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E64 0200 0007                  		andi.b	#7,d0
00017E68 6600                       		bne.s	locret_178A2
00017E6A 4EB9 0000 E03A             		jsr	SingleObjLoad
00017E70 6600                       		bne.s	locret_178A2
00017E72 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E76 3368 0008 0008             		move.w	8(a0),8(a1)
00017E7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E82 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017E88 3200                       		move.w	d0,d1
00017E8A 7200                       		moveq	#0,d1
00017E8C 1200                       		move.b	d0,d1
00017E8E E409                       		lsr.b	#2,d1
00017E90 0441 0020                  		subi.w	#$20,d1
00017E94 D369 0008                  		add.w	d1,8(a1)
00017E98 E048                       		lsr.w	#8,d0
00017E9A E608                       		lsr.b	#3,d0
00017E9C D169 000C                  		add.w	d0,$C(a1)
00017EA0                            
00017EA0                            locret_178A2:
00017EA0 4E75                       		rts	
00017EA2                            ; End of function BossDefeated
00017EA2                            
00017EA2                            ; ---------------------------------------------------------------------------
00017EA2                            ; Subroutine to	move a boss
00017EA2                            ; ---------------------------------------------------------------------------
00017EA2                            
00017EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA2                            
00017EA2                            
00017EA2                            BossMove:
00017EA2 2428 0030                  		move.l	$30(a0),d2
00017EA6 2628 0038                  		move.l	$38(a0),d3
00017EAA 3028 0010                  		move.w	$10(a0),d0
00017EAE 48C0                       		ext.l	d0
00017EB0 E180                       		asl.l	#8,d0
00017EB2 D480                       		add.l	d0,d2
00017EB4 3028 0012                  		move.w	$12(a0),d0
00017EB8 48C0                       		ext.l	d0
00017EBA E180                       		asl.l	#8,d0
00017EBC D680                       		add.l	d0,d3
00017EBE 2142 0030                  		move.l	d2,$30(a0)
00017EC2 2143 0038                  		move.l	d3,$38(a0)
00017EC6 4E75                       		rts	
00017EC8                            ; End of function BossMove
00017EC8                            
00017EC8                            ; ===========================================================================
00017EC8                            
00017EC8                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017EC8 317C FF00 0010             		move.w	#-$100,$10(a0)
00017ECE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017ED4 6100 FFCC                  		bsr.w	BossMove
00017ED8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EDE 6600                       		bne.s	loc_17916
00017EE0 317C 0000 0010             		move.w	#0,$10(a0)
00017EE6 317C 0000 0012             		move.w	#0,$12(a0)
00017EEC 5428 0025                  		addq.b	#2,$25(a0)
00017EF0 4EB9 0000 E050             		jsr	SingleObjLoad2
00017EF6 6600                       		bne.s	loc_17910
00017EF8 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017EFC 3368 0030 0008             		move.w	$30(a0),8(a1)
00017F02 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017F08 2348 0034                  		move.l	a0,$34(a1)
00017F0C                            
00017F0C                            loc_17910:
00017F0C 317C 0077 003C             		move.w	#$77,$3C(a0)
00017F12                            
00017F12                            loc_17916:
00017F12 6000 FED2                  		bra.w	loc_177E6
00017F16                            ; ===========================================================================
00017F16                            
00017F16                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017F16 5368 003C                  		subq.w	#1,$3C(a0)
00017F1A 6A00                       		bpl.s	Obj3D_Reverse
00017F1C 5428 0025                  		addq.b	#2,$25(a0)
00017F20 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F26 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F2C 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F32 6600                       		bne.s	Obj3D_Reverse
00017F34 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F3A 317C 0040 0010             		move.w	#$40,$10(a0)
00017F40                            
00017F40                            Obj3D_Reverse:
00017F40 0828 0000 0022             		btst	#0,$22(a0)
00017F46 6600                       		bne.s	loc_17950
00017F48 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F4C                            
00017F4C                            loc_17950:
00017F4C 6000 FE98                  		bra.w	loc_177E6
00017F50                            ; ===========================================================================
00017F50                            
00017F50                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F50 5368 003C                  		subq.w	#1,$3C(a0)
00017F54 6B00                       		bmi.s	loc_17960
00017F56 6100 FF4A                  		bsr.w	BossMove
00017F5A 6000                       		bra.s	loc_17976
00017F5C                            ; ===========================================================================
00017F5C                            
00017F5C                            loc_17960:
00017F5C 0868 0000 0022             		bchg	#0,$22(a0)
00017F62 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F68 5528 0025                  		subq.b	#2,$25(a0)
00017F6C 317C 0000 0010             		move.w	#0,$10(a0)
00017F72                            
00017F72                            loc_17976:
00017F72 6000 FE72                  		bra.w	loc_177E6
00017F76                            ; ===========================================================================
00017F76                            
00017F76                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F76 5368 003C                  		subq.w	#1,$3C(a0)
00017F7A 6B00                       		bmi.s	loc_17984
00017F7C 6000 FEE2                  		bra.w	BossDefeated
00017F80                            ; ===========================================================================
00017F80                            
00017F80                            loc_17984:
00017F80 08E8 0000 0022             		bset	#0,$22(a0)
00017F86 08A8 0007 0022             		bclr	#7,$22(a0)
00017F8C 4268 0010                  		clr.w	$10(a0)
00017F90 5428 0025                  		addq.b	#2,$25(a0)
00017F94 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017F9A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017F9E 6600                       		bne.s	locret_179AA
00017FA0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FA6                            
00017FA6                            locret_179AA:
00017FA6 4E75                       		rts	
00017FA8                            ; ===========================================================================
00017FA8                            
00017FA8                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FA8 5268 003C                  		addq.w	#1,$3C(a0)
00017FAC 6700                       		beq.s	loc_179BC
00017FAE 6A00                       		bpl.s	loc_179C2
00017FB0 0668 0018 0012             		addi.w	#$18,$12(a0)
00017FB6 6000                       		bra.s	loc_179EE
00017FB8                            ; ===========================================================================
00017FB8                            
00017FB8                            loc_179BC:
00017FB8 4268 0012                  		clr.w	$12(a0)
00017FBC 6000                       		bra.s	loc_179EE
00017FBE                            ; ===========================================================================
00017FBE                            
00017FBE                            loc_179C2:
00017FBE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FC4 6500                       		bcs.s	loc_179DA
00017FC6 6700                       		beq.s	loc_179E0
00017FC8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FCE 6500                       		bcs.s	loc_179EE
00017FD0 5428 0025                  		addq.b	#2,$25(a0)
00017FD4 6000                       		bra.s	loc_179EE
00017FD6                            ; ===========================================================================
00017FD6                            
00017FD6                            loc_179DA:
00017FD6 5168 0012                  		subq.w	#8,$12(a0)
00017FDA 6000                       		bra.s	loc_179EE
00017FDC                            ; ===========================================================================
00017FDC                            
00017FDC                            loc_179E0:
00017FDC 4268 0012                  		clr.w	$12(a0)
00017FE0 303C 0081                  		move.w	#$81,d0
00017FE4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00017FEA                            
00017FEA                            loc_179EE:
00017FEA 6100 FEB6                  		bsr.w	BossMove
00017FEE 6000 FDF6                  		bra.w	loc_177E6
00017FF2                            ; ===========================================================================
00017FF2                            
00017FF2                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017FF2 317C 0400 0010             		move.w	#$400,$10(a0)
00017FF8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017FFE 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018004 6700                       		beq.s	loc_17A10
00018006 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001800A 6000                       		bra.s	loc_17A16
0001800C                            ; ===========================================================================
0001800C                            
0001800C                            loc_17A10:
0001800C 4A28 0001                  		tst.b	1(a0)
00018010 6A00                       		bpl.s	Obj3D_ShipDel
00018012                            
00018012                            loc_17A16:
00018012 6100 FE8E                  		bsr.w	BossMove
00018016 6000 FDCE                  		bra.w	loc_177E6
0001801A                            ; ===========================================================================
0001801A                            
0001801A                            Obj3D_ShipDel:
0001801A 4EF9 0000 DBF0             		jmp	DeleteObject
00018020                            ; ===========================================================================
00018020                            
00018020                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018020 7000                       		moveq	#0,d0
00018022 7201                       		moveq	#1,d1
00018024 2268 0034                  		movea.l	$34(a0),a1
00018028 1029 0025                  		move.b	$25(a1),d0
0001802C 5900                       		subq.b	#4,d0
0001802E 6600                       		bne.s	loc_17A3E
00018030 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018036 6600                       		bne.s	loc_17A46
00018038 7204                       		moveq	#4,d1
0001803A                            
0001803A                            loc_17A3E:
0001803A 5D00                       		subq.b	#6,d0
0001803C 6B00                       		bmi.s	loc_17A46
0001803E 720A                       		moveq	#$A,d1
00018040 6000                       		bra.s	loc_17A5A
00018042                            ; ===========================================================================
00018042                            
00018042                            loc_17A46:
00018042 4A29 0020                  		tst.b	$20(a1)
00018046 6600                       		bne.s	loc_17A50
00018048 7205                       		moveq	#5,d1
0001804A 6000                       		bra.s	loc_17A5A
0001804C                            ; ===========================================================================
0001804C                            
0001804C                            loc_17A50:
0001804C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018052 6500                       		bcs.s	loc_17A5A
00018054 7204                       		moveq	#4,d1
00018056                            
00018056                            loc_17A5A:
00018056 1141 001C                  		move.b	d1,$1C(a0)
0001805A 5500                       		subq.b	#2,d0
0001805C 6600                       		bne.s	Obj3D_FaceDisp
0001805E 117C 0006 001C             		move.b	#6,$1C(a0)
00018064 4A28 0001                  		tst.b	1(a0)
00018068 6A00                       		bpl.s	Obj3D_FaceDel
0001806A                            
0001806A                            Obj3D_FaceDisp:
0001806A 6000                       		bra.s	Obj3D_Display
0001806C                            ; ===========================================================================
0001806C                            
0001806C                            Obj3D_FaceDel:
0001806C 4EF9 0000 DBF0             		jmp	DeleteObject
00018072                            ; ===========================================================================
00018072                            
00018072                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018072 117C 0007 001C             		move.b	#7,$1C(a0)
00018078 2268 0034                  		movea.l	$34(a0),a1
0001807C 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018082 6600                       		bne.s	loc_17A96
00018084 117C 000B 001C             		move.b	#$B,$1C(a0)
0001808A 4A28 0001                  		tst.b	1(a0)
0001808E 6A00                       		bpl.s	Obj3D_FlameDel
00018090 6000                       		bra.s	Obj3D_FlameDisp
00018092                            ; ===========================================================================
00018092                            
00018092                            loc_17A96:
00018092 3029 0010                  		move.w	$10(a1),d0
00018096 6700                       		beq.s	Obj3D_FlameDisp
00018098 117C 0008 001C             		move.b	#8,$1C(a0)
0001809E                            
0001809E                            Obj3D_FlameDisp:
0001809E 6000                       		bra.s	Obj3D_Display
000180A0                            ; ===========================================================================
000180A0                            
000180A0                            Obj3D_FlameDel:
000180A0 4EF9 0000 DBF0             		jmp	DeleteObject
000180A6                            ; ===========================================================================
000180A6                            
000180A6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180A6 2268 0034                  		movea.l	$34(a0),a1
000180AA 3169 0008 0008             		move.w	8(a1),8(a0)
000180B0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000180B6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180BC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180C2 4EB9 0000 AC66             		jsr	AnimateSprite
000180C8 1028 0022                  		move.b	$22(a0),d0
000180CC 0200 0003                  		andi.b	#3,d0
000180D0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180D6 8128 0001                  		or.b	d0,1(a0)
000180DA 4EF9 0000 DBB4             		jmp	DisplaySprite
000180E0                            ; ===========================================================================
000180E0                            ; ---------------------------------------------------------------------------
000180E0                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000180E0                            ; ---------------------------------------------------------------------------
000180E0                            
000180E0                            Obj48:					; XREF: Obj_Index
000180E0 7000                       		moveq	#0,d0
000180E2 1028 0024                  		move.b	$24(a0),d0
000180E6 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000180EA 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000180EE                            ; ===========================================================================
000180EE 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000180F0 0000                       		dc.w Obj48_Base-Obj48_Index
000180F2 0000                       		dc.w Obj48_Display2-Obj48_Index
000180F4 0000                       		dc.w loc_17C68-Obj48_Index
000180F6 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000180F8                            ; ===========================================================================
000180F8                            
000180F8                            Obj48_Main:				; XREF: Obj48_Index
000180F8 5428 0024                  		addq.b	#2,$24(a0)
000180FC 317C 4080 0026             		move.w	#$4080,$26(a0)
00018102 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018108 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018110 317C 046C 0002             		move.w	#$46C,2(a0)
00018116 45E8 0028                  		lea	$28(a0),a2
0001811A 14FC 0000                  		move.b	#0,(a2)+
0001811E 7205                       		moveq	#5,d1
00018120 2248                       		movea.l	a0,a1
00018122 6000                       		bra.s	loc_17B60
00018124                            ; ===========================================================================
00018124                            
00018124                            Obj48_MakeLinks:
00018124 4EB9 0000 E050             		jsr	SingleObjLoad2
0001812A 6600                       		bne.s	Obj48_MakeBall
0001812C 3368 0008 0008             		move.w	8(a0),8(a1)
00018132 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018138 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001813C 137C 0006 0024             		move.b	#6,$24(a1)
00018142 237C 0000 8096 0004        		move.l	#Map_obj15,4(a1)
0001814A 337C 0380 0002             		move.w	#$380,2(a1)
00018150 137C 0001 001A             		move.b	#1,$1A(a1)
00018156 5228 0028                  		addq.b	#1,$28(a0)
0001815A                            
0001815A                            loc_17B60:				; XREF: Obj48_Main
0001815A 3A09                       		move.w	a1,d5
0001815C 0445 D000                  		subi.w	#$D000,d5
00018160 EC4D                       		lsr.w	#6,d5
00018162 0245 007F                  		andi.w	#$7F,d5
00018166 14C5                       		move.b	d5,(a2)+
00018168 137C 0004 0001             		move.b	#4,1(a1)
0001816E 137C 0008 0019             		move.b	#8,$19(a1)
00018174 137C 0006 0018             		move.b	#6,$18(a1)
0001817A 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018180 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018184                            
00018184                            Obj48_MakeBall:
00018184 137C 0008 0024             		move.b	#8,$24(a1)
0001818A 237C 0000 85F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018192 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018198 137C 0001 001A             		move.b	#1,$1A(a1)
0001819E 137C 0005 0018             		move.b	#5,$18(a1)
000181A4 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181AA 4E75                       		rts	
000181AC                            ; ===========================================================================
000181AC                            
000181AC 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000181B2                            
000181B2                            ; ===========================================================================
000181B2                            
000181B2                            Obj48_Base:				; XREF: Obj48_Index
000181B2 47F9 0001 81AC             		lea	(Obj48_PosData).l,a3
000181B8 45E8 0028                  		lea	$28(a0),a2
000181BC 7C00                       		moveq	#0,d6
000181BE 1C1A                       		move.b	(a2)+,d6
000181C0                            
000181C0                            loc_17BC6:
000181C0 7800                       		moveq	#0,d4
000181C2 181A                       		move.b	(a2)+,d4
000181C4 ED4C                       		lsl.w	#6,d4
000181C6 0684 00FF D000             		addi.l	#$FFD000,d4
000181CC 2244                       		movea.l	d4,a1
000181CE 101B                       		move.b	(a3)+,d0
000181D0 B029 003C                  		cmp.b	$3C(a1),d0
000181D4 6700                       		beq.s	loc_17BE0
000181D6 5229 003C                  		addq.b	#1,$3C(a1)
000181DA                            
000181DA                            loc_17BE0:
000181DA 51CE FFE4                  		dbf	d6,loc_17BC6
000181DE                            
000181DE B029 003C                  		cmp.b	$3C(a1),d0
000181E2 6600                       		bne.s	loc_17BFA
000181E4 2268 0034                  		movea.l	$34(a0),a1
000181E8 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000181EE 6600                       		bne.s	loc_17BFA
000181F0 5428 0024                  		addq.b	#2,$24(a0)
000181F4                            
000181F4                            loc_17BFA:
000181F4 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000181FA 6700                       		beq.s	Obj48_Display
000181FC 5268 0032                  		addq.w	#1,$32(a0)
00018200                            
00018200                            Obj48_Display:
00018200 6100 0000                  		bsr.w	sub_17C2A
00018204 1028 0026                  		move.b	$26(a0),d0
00018208 4EB9 0000 8008             		jsr	(Obj15_Move2).l
0001820E 4EF9 0000 DBB4             		jmp	DisplaySprite
00018214                            ; ===========================================================================
00018214                            
00018214                            Obj48_Display2:				; XREF: Obj48_Index
00018214 6100 0000                  		bsr.w	sub_17C2A
00018218 4EB9 0000 7FC8             		jsr	(Obj48_Move).l
0001821E 4EF9 0000 DBB4             		jmp	DisplaySprite
00018224                            
00018224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018224                            
00018224                            
00018224                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018224 2268 0034                  		movea.l	$34(a0),a1
00018228 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001822E 6400                       		bcc.s	loc_17C3C
00018230 0868 0000 001A             		bchg	#0,$1A(a0)
00018236                            
00018236                            loc_17C3C:
00018236 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001823C 3029 000C                  		move.w	$C(a1),d0
00018240 D068 0032                  		add.w	$32(a0),d0
00018244 3140 0038                  		move.w	d0,$38(a0)
00018248 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001824E 4A29 0022                  		tst.b	$22(a1)
00018252 6A00                       		bpl.s	locret_17C66
00018254 10BC 003F                  		move.b	#$3F,0(a0)
00018258 117C 0000 0024             		move.b	#0,$24(a0)
0001825E                            
0001825E                            locret_17C66:
0001825E 4E75                       		rts	
00018260                            ; End of function sub_17C2A
00018260                            
00018260                            ; ===========================================================================
00018260                            
00018260                            loc_17C68:				; XREF: Obj48_Index
00018260 2268 0034                  		movea.l	$34(a0),a1
00018264 4A29 0022                  		tst.b	$22(a1)
00018268 6A00                       		bpl.s	Obj48_Display3
0001826A 10BC 003F                  		move.b	#$3F,0(a0)
0001826E 117C 0000 0024             		move.b	#0,$24(a0)
00018274                            
00018274                            Obj48_Display3:
00018274 4EF9 0000 DBB4             		jmp	DisplaySprite
0001827A                            ; ===========================================================================
0001827A                            
0001827A                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001827A 7000                       		moveq	#0,d0
0001827C 4A28 001A                  		tst.b	$1A(a0)
00018280 6600                       		bne.s	Obj48_Vanish
00018282 5200                       		addq.b	#1,d0
00018284                            
00018284                            Obj48_Vanish:
00018284 1140 001A                  		move.b	d0,$1A(a0)
00018288 2268 0034                  		movea.l	$34(a0),a1
0001828C 4A29 0022                  		tst.b	$22(a1)
00018290 6A00                       		bpl.s	Obj48_Display4
00018292 117C 0000 0020             		move.b	#0,$20(a0)
00018298 6100 FBC6                  		bsr.w	BossDefeated
0001829C 5328 003C                  		subq.b	#1,$3C(a0)
000182A0 6A00                       		bpl.s	Obj48_Display4
000182A2 10BC 003F                  		move.b	#$3F,(a0)
000182A6 117C 0000 0024             		move.b	#0,$24(a0)
000182AC                            
000182AC                            Obj48_Display4:
000182AC 4EF9 0000 DBB4             		jmp	DisplaySprite
000182B2                            ; ===========================================================================
000182B2                            Ani_Eggman:
000182B2                            	include "_anim\Eggman.asm"
000182B2                            ; ---------------------------------------------------------------------------
000182B2                            ; Animation script - Eggman (bosses)
000182B2                            ; ---------------------------------------------------------------------------
000182B2 0000                       		dc.w byte_17CD4-Ani_Eggman
000182B4 0000                       		dc.w byte_17CD8-Ani_Eggman
000182B6 0000                       		dc.w byte_17CDC-Ani_Eggman
000182B8 0000                       		dc.w byte_17CE0-Ani_Eggman
000182BA 0000                       		dc.w byte_17CE4-Ani_Eggman
000182BC 0000                       		dc.w byte_17CE8-Ani_Eggman
000182BE 0000                       		dc.w byte_17CEC-Ani_Eggman
000182C0 0000                       		dc.w byte_17CF0-Ani_Eggman
000182C2 0000                       		dc.w byte_17CF4-Ani_Eggman
000182C4 0000                       		dc.w byte_17CF8-Ani_Eggman
000182C6 0000                       		dc.w byte_17CFC-Ani_Eggman
000182C8 0000                       		dc.w byte_17D00-Ani_Eggman
000182CA 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182CE 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182D2 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182D6 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182DA 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182DE 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000182E2 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000182E6 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000182EA 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000182EE 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000182F2 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000182F6 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018302                            		even
00018302                            		even
00018302                            
00018302                            ; ---------------------------------------------------------------------------
00018302                            ; Sprite mappings - Eggman (boss levels)
00018302                            ; ---------------------------------------------------------------------------
00018302                            Map_Eggman:
00018302                            	include "_maps\Eggman.asm"
00018302                            Map_dc7e:
00018302 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018304 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018306 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018308 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001830A 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001830C 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001830E 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018310 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018312 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018314 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018316 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018318 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001831A 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001831C 06                         Map_dc7e_1A: 	dc.b $6
0001831D EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018322 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018327 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001832C FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018331 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018336 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001833B 02                         Map_dc7e_39: 	dc.b $2
0001833C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018341 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018346 02                         Map_dc7e_44: 	dc.b $2
00018347 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001834C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018351 03                         Map_dc7e_4F: 	dc.b $3
00018352 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018357 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001835C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018361 03                         Map_dc7e_5F: 	dc.b $3
00018362 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018367 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001836C EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018371 03                         Map_dc7e_6F: 	dc.b $3
00018372 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018377 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001837C EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018381 03                         Map_dc7e_7F: 	dc.b $3
00018382 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018387 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001838C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018391 04                         Map_dc7e_8F: 	dc.b $4
00018392 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018397 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001839C EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183A1 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183A6 01                         Map_dc7e_A4: 	dc.b $1
000183A7 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183AC 01                         Map_dc7e_AA: 	dc.b $1
000183AD 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000183B2 00                         Map_dc7e_B0: 	dc.b $0
000183B3 02                         Map_dc7e_B1: 	dc.b $2
000183B4 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000183B9 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000183BE 02                         Map_dc7e_BC: 	dc.b $2
000183BF F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183C4 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183CA 00                         	even
000183CA 00                         	even
000183CA                            
000183CA                            ; ---------------------------------------------------------------------------
000183CA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183CA                            ; ---------------------------------------------------------------------------
000183CA                            Map_BossItems:
000183CA                            	include "_maps\Boss items.asm"
000183CA                            ; ---------------------------------------------------------------------------
000183CA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183CA                            ; ---------------------------------------------------------------------------
000183CA 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183CE 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183D2 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183D6 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183DA 01                         byte_17DE4:	dc.b 1
000183DB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183E0 02                         byte_17DEA:	dc.b 2
000183E1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000183E6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183EB 00                         		dc.b 0
000183EC 01                         byte_17DF6:	dc.b 1
000183ED FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000183F2 01                         byte_17DFC:	dc.b 1
000183F3 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000183F8 01                         byte_17E02:	dc.b 1
000183F9 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000183FE 04                         byte_17E08:	dc.b 4
000183FF F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018404 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018409 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001840E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018413 00                         		dc.b 0
00018414 02                         byte_17E1E:	dc.b 2
00018415 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001841A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001841F 00                         		dc.b 0
00018420 02                         byte_17E2A:	dc.b 2
00018421 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018426 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001842C 00                         		even
0001842C 00                         		even
0001842C                            
0001842C                            ; ===========================================================================
0001842C                            ; ---------------------------------------------------------------------------
0001842C                            ; Object 77 - Eggman (LZ)
0001842C                            ; ---------------------------------------------------------------------------
0001842C                            
0001842C                            Obj77:					; XREF: Obj_Index
0001842C 7000                       		moveq	#0,d0
0001842E 1028 0024                  		move.b	$24(a0),d0
00018432 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018436 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001843A                            ; ===========================================================================
0001843A 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001843C 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001843E 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018440 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018442                            
00018442 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018444 0401                       		dc.b 4,	1
00018446 0607                       		dc.b 6,	7
00018448                            ; ===========================================================================
00018448                            
00018448                            Obj77_Main:				; XREF: Obj77_Index
00018448 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001844E 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018454 3168 0008 0030             		move.w	8(a0),$30(a0)
0001845A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018460 117C 000F 0020             		move.b	#$F,$20(a0)
00018466 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001846C 117C 0004 0018             		move.b	#4,$18(a0)
00018472 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018476 2248                       		movea.l	a0,a1
00018478 7202                       		moveq	#2,d1
0001847A 6000                       		bra.s	Obj77_LoadBoss
0001847C                            ; ===========================================================================
0001847C                            
0001847C                            Obj77_Loop:
0001847C 4EB9 0000 E050             		jsr	SingleObjLoad2
00018482 6600                       		bne.s	Obj77_ShipMain
00018484 12BC 0077                  		move.b	#$77,0(a1)
00018488 3368 0008 0008             		move.w	8(a0),8(a1)
0001848E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018494                            
00018494                            Obj77_LoadBoss:				; XREF: Obj77_Main
00018494 08A8 0000 0022             		bclr	#0,$22(a0)
0001849A 4229 0025                  		clr.b	$25(a1)
0001849E 135A 0024                  		move.b	(a2)+,$24(a1)
000184A2 135A 001C                  		move.b	(a2)+,$1C(a1)
000184A6 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184AC 237C 0001 8302 0004        		move.l	#Map_Eggman,4(a1)
000184B4 337C 0400 0002             		move.w	#$400,2(a1)
000184BA 137C 0004 0001             		move.b	#4,1(a1)
000184C0 137C 0020 0019             		move.b	#$20,$19(a1)
000184C6 2348 0034                  		move.l	a0,$34(a1)
000184CA 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184CE                            
000184CE                            Obj77_ShipMain:
000184CE 43F8 D000                  		lea	($FFFFD000).w,a1
000184D2 7000                       		moveq	#0,d0
000184D4 1028 0025                  		move.b	$25(a0),d0
000184D8 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184DC 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000184E0 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
000184E6 4EB9 0000 AC66             		jsr	AnimateSprite
000184EC 7003                       		moveq	#3,d0
000184EE C028 0022                  		and.b	$22(a0),d0
000184F2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000184F8 8128 0001                  		or.b	d0,1(a0)
000184FC 4EF9 0000 DBB4             		jmp	DisplaySprite
00018502                            ; ===========================================================================
00018502 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018506 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001850A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001850E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018512                            ; ===========================================================================
00018512                            
00018512                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018512 3029 0008                  		move.w	8(a1),d0
00018516 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001851A 6500                       		bcs.s	loc_17F38
0001851C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018522 317C 0060 0010             		move.w	#$60,$10(a0)
00018528 5428 0025                  		addq.b	#2,$25(a0)
0001852C                            
0001852C                            loc_17F38:
0001852C 6100 F974                  		bsr.w	BossMove
00018530 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018536 3168 0030 0008             		move.w	$30(a0),8(a0)
0001853C                            
0001853C                            loc_17F48:
0001853C 4A28 003D                  		tst.b	$3D(a0)
00018540 6600                       		bne.s	loc_17F8E
00018542 4A28 0022                  		tst.b	$22(a0)
00018546 6B00                       		bmi.s	loc_17F92
00018548 4A28 0020                  		tst.b	$20(a0)
0001854C 6600                       		bne.s	locret_17F8C
0001854E 4A28 003E                  		tst.b	$3E(a0)
00018552 6600                       		bne.s	loc_17F70
00018554 117C 0020 003E             		move.b	#$20,$3E(a0)
0001855A 303C 00AC                  		move.w	#$AC,d0
0001855E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
00018564                            
00018564                            loc_17F70:
00018564 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018568 7000                       		moveq	#0,d0
0001856A 4A51                       		tst.w	(a1)
0001856C 6600                       		bne.s	loc_17F7E
0001856E 303C 0EEE                  		move.w	#$EEE,d0
00018572                            
00018572                            loc_17F7E:
00018572 3280                       		move.w	d0,(a1)
00018574 5328 003E                  		subq.b	#1,$3E(a0)
00018578 6600                       		bne.s	locret_17F8C
0001857A 117C 000F 0020             		move.b	#$F,$20(a0)
00018580                            
00018580                            locret_17F8C:
00018580 4E75                       		rts	
00018582                            ; ===========================================================================
00018582                            
00018582                            loc_17F8E:				; XREF: loc_17F48
00018582 6000 F8DC                  		bra.w	BossDefeated
00018586                            ; ===========================================================================
00018586                            
00018586                            loc_17F92:				; XREF: loc_17F48
00018586 7064                       		moveq	#100,d0
00018588 6100 0000                  		bsr.w	AddPoints
0001858C 117C 00FF 003D             		move.b	#-1,$3D(a0)
00018592 4E75                       		rts	
00018594                            ; ===========================================================================
00018594                            
00018594                            loc_17FA0:				; XREF: Obj77_ShipIndex
00018594 70FE                       		moveq	#-2,d0
00018596 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001859C 6500                       		bcs.s	loc_17FB6
0001859E 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185A4 4268 0010                  		clr.w	$10(a0)
000185A8 5240                       		addq.w	#1,d0
000185AA                            
000185AA                            loc_17FB6:
000185AA 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185B0 6E00                       		bgt.s	loc_17FCA
000185B2 317C 0500 0038             		move.w	#$500,$38(a0)
000185B8 4268 0012                  		clr.w	$12(a0)
000185BC 5240                       		addq.w	#1,d0
000185BE                            
000185BE                            loc_17FCA:
000185BE 6600                       		bne.s	loc_17FDC
000185C0 317C 0140 0010             		move.w	#$140,$10(a0)
000185C6 317C FE00 0012             		move.w	#-$200,$12(a0)
000185CC 5428 0025                  		addq.b	#2,$25(a0)
000185D0                            
000185D0                            loc_17FDC:
000185D0 6000 FF5A                  		bra.w	loc_17F38
000185D4                            ; ===========================================================================
000185D4                            
000185D4                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185D4 70FE                       		moveq	#-2,d0
000185D6 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185DC 6500                       		bcs.s	loc_17FF6
000185DE 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000185E4 4268 0010                  		clr.w	$10(a0)
000185E8 5240                       		addq.w	#1,d0
000185EA                            
000185EA                            loc_17FF6:
000185EA 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000185F0 6E00                       		bgt.s	loc_1800A
000185F2 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000185F8 4268 0012                  		clr.w	$12(a0)
000185FC 5240                       		addq.w	#1,d0
000185FE                            
000185FE                            loc_1800A:
000185FE 6600                       		bne.s	loc_1801A
00018600 317C FE80 0012             		move.w	#-$180,$12(a0)
00018606 5428 0025                  		addq.b	#2,$25(a0)
0001860A 4228 003F                  		clr.b	$3F(a0)
0001860E                            
0001860E                            loc_1801A:
0001860E 6000 FF1C                  		bra.w	loc_17F38
00018612                            ; ===========================================================================
00018612                            
00018612                            loc_1801E:				; XREF: Obj77_ShipIndex
00018612 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018618 6E00                       		bgt.s	loc_1804E
0001861A 317C 0100 0038             		move.w	#$100,$38(a0)
00018620 317C 0140 0010             		move.w	#$140,$10(a0)
00018626 317C FF80 0012             		move.w	#-$80,$12(a0)
0001862C 4A28 003D                  		tst.b	$3D(a0)
00018630 6700                       		beq.s	loc_18046
00018632 E1E8 0010                  		asl	$10(a0)
00018636 E1E8 0012                  		asl	$12(a0)
0001863A                            
0001863A                            loc_18046:
0001863A 5428 0025                  		addq.b	#2,$25(a0)
0001863E 6000 FEEC                  		bra.w	loc_17F38
00018642                            ; ===========================================================================
00018642                            
00018642                            loc_1804E:
00018642 08E8 0000 0022             		bset	#0,$22(a0)
00018648 5428 003F                  		addq.b	#2,$3F(a0)
0001864C 1028 003F                  		move.b	$3F(a0),d0
00018650 4EB9 0000 2C22             		jsr	(CalcSine).l
00018656 4A41                       		tst.w	d1
00018658 6A00                       		bpl.s	loc_1806C
0001865A 08A8 0000 0022             		bclr	#0,$22(a0)
00018660                            
00018660                            loc_1806C:
00018660 E840                       		asr.w	#4,d0
00018662 4840                       		swap	d0
00018664 4240                       		clr.w	d0
00018666 D0A8 0030                  		add.l	$30(a0),d0
0001866A 4840                       		swap	d0
0001866C 3140 0008                  		move.w	d0,8(a0)
00018670 3028 0012                  		move.w	$12(a0),d0
00018674 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018678 9268 000C                  		sub.w	$C(a0),d1
0001867C 6500                       		bcs.s	loc_180A2
0001867E 0441 0048                  		subi.w	#$48,d1
00018682 6500                       		bcs.s	loc_180A2
00018684 E240                       		asr.w	#1,d0
00018686 0441 0028                  		subi.w	#$28,d1
0001868A 6500                       		bcs.s	loc_180A2
0001868C E240                       		asr.w	#1,d0
0001868E 0441 0028                  		subi.w	#$28,d1
00018692 6500                       		bcs.s	loc_180A2
00018694 7000                       		moveq	#0,d0
00018696                            
00018696                            loc_180A2:
00018696 48C0                       		ext.l	d0
00018698 E180                       		asl.l	#8,d0
0001869A 4A28 003D                  		tst.b	$3D(a0)
0001869E 6700                       		beq.s	loc_180AE
000186A0 D080                       		add.l	d0,d0
000186A2                            
000186A2                            loc_180AE:
000186A2 D1A8 0038                  		add.l	d0,$38(a0)
000186A6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186AC 6000 FE8E                  		bra.w	loc_17F48
000186B0                            ; ===========================================================================
000186B0                            
000186B0                            loc_180BC:				; XREF: Obj77_ShipIndex
000186B0 70FE                       		moveq	#-2,d0
000186B2 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000186B8 6500                       		bcs.s	loc_180D2
000186BA 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000186C0 4268 0010                  		clr.w	$10(a0)
000186C4 5240                       		addq.w	#1,d0
000186C6                            
000186C6                            loc_180D2:
000186C6 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186CC 6E00                       		bgt.s	loc_180E6
000186CE 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186D4 4268 0012                  		clr.w	$12(a0)
000186D8 5240                       		addq.w	#1,d0
000186DA                            
000186DA                            loc_180E6:
000186DA 6600                       		bne.s	loc_180F2
000186DC 5428 0025                  		addq.b	#2,$25(a0)
000186E0 08A8 0000 0022             		bclr	#0,$22(a0)
000186E6                            
000186E6                            loc_180F2:
000186E6 6000 FE44                  		bra.w	loc_17F38
000186EA                            ; ===========================================================================
000186EA                            
000186EA                            loc_180F6:				; XREF: Obj77_ShipIndex
000186EA 4A28 003D                  		tst.b	$3D(a0)
000186EE 6600                       		bne.s	loc_18112
000186F0 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
000186F6 6D00                       		blt.s	loc_18126
000186F8 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
000186FE 6E00                       		bgt.s	loc_18126
00018700 117C 0032 003C             		move.b	#$32,$3C(a0)
00018706                            
00018706                            loc_18112:
00018706 303C 0082                  		move.w	#$82,d0
0001870A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
00018710 08E8 0000 0022             		bset	#0,$22(a0)
00018716 5428 0025                  		addq.b	#2,$25(a0)
0001871A                            
0001871A                            loc_18126:
0001871A 6000 FE10                  		bra.w	loc_17F38
0001871E                            ; ===========================================================================
0001871E                            
0001871E                            loc_1812A:				; XREF: Obj77_ShipIndex
0001871E 4A28 003D                  		tst.b	$3D(a0)
00018722 6600                       		bne.s	loc_18136
00018724 5328 003C                  		subq.b	#1,$3C(a0)
00018728 6600                       		bne.s	loc_1814E
0001872A                            
0001872A                            loc_18136:
0001872A 4228 003C                  		clr.b	$3C(a0)
0001872E 317C 0400 0010             		move.w	#$400,$10(a0)
00018734 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001873A 4228 003D                  		clr.b	$3D(a0)
0001873E 5428 0025                  		addq.b	#2,$25(a0)
00018742                            
00018742                            loc_1814E:
00018742 6000 FDE8                  		bra.w	loc_17F38
00018746                            ; ===========================================================================
00018746                            
00018746                            loc_18152:				; XREF: Obj77_ShipIndex
00018746 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001874C 6400                       		bcc.s	loc_18160
0001874E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018752 6000                       		bra.s	loc_18166
00018754                            ; ===========================================================================
00018754                            
00018754                            loc_18160:
00018754 4A28 0001                  		tst.b	1(a0)
00018758 6A00                       		bpl.s	Obj77_ShipDel
0001875A                            
0001875A                            loc_18166:
0001875A 6000 FDD0                  		bra.w	loc_17F38
0001875E                            ; ===========================================================================
0001875E                            
0001875E                            Obj77_ShipDel:
0001875E 4EF9 0000 DBF0             		jmp	DeleteObject
00018764                            ; ===========================================================================
00018764                            
00018764                            Obj77_FaceMain:				; XREF: Obj77_Index
00018764 2268 0034                  		movea.l	$34(a0),a1
00018768 1011                       		move.b	(a1),d0
0001876A B010                       		cmp.b	(a0),d0
0001876C 6600                       		bne.s	Obj77_FaceDel
0001876E 7000                       		moveq	#0,d0
00018770 1029 0025                  		move.b	$25(a1),d0
00018774 7201                       		moveq	#1,d1
00018776 4A28 003D                  		tst.b	$3D(a0)
0001877A 6700                       		beq.s	loc_1818C
0001877C 720A                       		moveq	#$A,d1
0001877E 6000                       		bra.s	loc_181A0
00018780                            ; ===========================================================================
00018780                            
00018780                            loc_1818C:
00018780 4A29 0020                  		tst.b	$20(a1)
00018784 6600                       		bne.s	loc_18196
00018786 7205                       		moveq	#5,d1
00018788 6000                       		bra.s	loc_181A0
0001878A                            ; ===========================================================================
0001878A                            
0001878A                            loc_18196:
0001878A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018790 6500                       		bcs.s	loc_181A0
00018792 7204                       		moveq	#4,d1
00018794                            
00018794                            loc_181A0:
00018794 1141 001C                  		move.b	d1,$1C(a0)
00018798 0C00 000E                  		cmpi.b	#$E,d0
0001879C 6600                       		bne.s	loc_181B6
0001879E 117C 0006 001C             		move.b	#6,$1C(a0)
000187A4 4A28 0001                  		tst.b	1(a0)
000187A8 6A00                       		bpl.s	Obj77_FaceDel
000187AA                            
000187AA                            loc_181B6:
000187AA 6000                       		bra.s	Obj77_Display
000187AC                            ; ===========================================================================
000187AC                            
000187AC                            Obj77_FaceDel:
000187AC 4EF9 0000 DBF0             		jmp	DeleteObject
000187B2                            ; ===========================================================================
000187B2                            
000187B2                            Obj77_FlameMain:			; XREF: Obj77_Index
000187B2 117C 0007 001C             		move.b	#7,$1C(a0)
000187B8 2268 0034                  		movea.l	$34(a0),a1
000187BC 1011                       		move.b	(a1),d0
000187BE B010                       		cmp.b	(a0),d0
000187C0 6600                       		bne.s	Obj77_FlameDel
000187C2 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187C8 6600                       		bne.s	loc_181F0
000187CA 117C 000B 001C             		move.b	#$B,$1C(a0)
000187D0 4A28 0001                  		tst.b	1(a0)
000187D4 6A00                       		bpl.s	Obj77_FlameDel
000187D6 6000                       		bra.s	loc_181F0
000187D8                            ; ===========================================================================
000187D8 4A69 0010                  		tst.w	$10(a1)
000187DC 6700                       		beq.s	loc_181F0
000187DE 117C 0008 001C             		move.b	#8,$1C(a0)
000187E4                            
000187E4                            loc_181F0:
000187E4 6000                       		bra.s	Obj77_Display
000187E6                            ; ===========================================================================
000187E6                            
000187E6                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000187E6 4EF9 0000 DBF0             		jmp	DeleteObject
000187EC                            ; ===========================================================================
000187EC                            
000187EC                            Obj77_Display:
000187EC 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
000187F2 4EB9 0000 AC66             		jsr	AnimateSprite
000187F8 2268 0034                  		movea.l	$34(a0),a1
000187FC 3169 0008 0008             		move.w	8(a1),8(a0)
00018802 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018808 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001880E 7003                       		moveq	#3,d0
00018810 C028 0022                  		and.b	$22(a0),d0
00018814 0228 00FC 0001             		andi.b	#-4,1(a0)
0001881A 8128 0001                  		or.b	d0,1(a0)
0001881E 4EF9 0000 DBB4             		jmp	DisplaySprite
00018824                            ; ===========================================================================
00018824                            ; ---------------------------------------------------------------------------
00018824                            ; Object 73 - Eggman (MZ)
00018824                            ; ---------------------------------------------------------------------------
00018824                            
00018824                            Obj73:					; XREF: Obj_Index
00018824 7000                       		moveq	#0,d0
00018826 1028 0024                  		move.b	$24(a0),d0
0001882A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001882E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018832                            ; ===========================================================================
00018832 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018834 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018836 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018838 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001883A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001883C                            
0001883C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001883F 0401 04                    		dc.b 4,	1, 4
00018842 0607 04                    		dc.b 6,	7, 4
00018845 0800 03                    		dc.b 8,	0, 3
00018848                            ; ===========================================================================
00018848                            
00018848                            Obj73_Main:				; XREF: Obj73_Index
00018848 3168 0008 0030             		move.w	8(a0),$30(a0)
0001884E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018854 117C 000F 0020             		move.b	#$F,$20(a0)
0001885A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018860 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018864 2248                       		movea.l	a0,a1
00018866 7203                       		moveq	#3,d1
00018868 6000                       		bra.s	Obj73_LoadBoss
0001886A                            ; ===========================================================================
0001886A                            
0001886A                            Obj73_Loop:
0001886A 4EB9 0000 E050             		jsr	SingleObjLoad2
00018870 6600                       		bne.s	Obj73_ShipMain
00018872 12BC 0073                  		move.b	#$73,0(a1)
00018876 3368 0008 0008             		move.w	8(a0),8(a1)
0001887C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018882                            
00018882                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018882 08A8 0000 0022             		bclr	#0,$22(a0)
00018888 4229 0025                  		clr.b	$25(a1)
0001888C 135A 0024                  		move.b	(a2)+,$24(a1)
00018890 135A 001C                  		move.b	(a2)+,$1C(a1)
00018894 135A 0018                  		move.b	(a2)+,$18(a1)
00018898 237C 0001 8302 0004        		move.l	#Map_Eggman,4(a1)
000188A0 337C 0400 0002             		move.w	#$400,2(a1)
000188A6 137C 0004 0001             		move.b	#4,1(a1)
000188AC 137C 0020 0019             		move.b	#$20,$19(a1)
000188B2 2348 0034                  		move.l	a0,$34(a1)
000188B6 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000188BA                            
000188BA                            Obj73_ShipMain:
000188BA 7000                       		moveq	#0,d0
000188BC 1028 0025                  		move.b	$25(a0),d0
000188C0 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188C4 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188C8 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
000188CE 4EB9 0000 AC66             		jsr	AnimateSprite
000188D4 7003                       		moveq	#3,d0
000188D6 C028 0022                  		and.b	$22(a0),d0
000188DA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188E0 8128 0001                  		or.b	d0,1(a0)
000188E4 4EF9 0000 DBB4             		jmp	DisplaySprite
000188EA                            ; ===========================================================================
000188EA 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000188EC 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000188EE 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000188F0 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000188F2 0000                       		dc.w loc_18582-Obj73_ShipIndex
000188F4                            ; ===========================================================================
000188F4                            
000188F4                            loc_18302:				; XREF: Obj73_ShipIndex
000188F4 1028 003F                  		move.b	$3F(a0),d0
000188F8 5428 003F                  		addq.b	#2,$3F(a0)
000188FC 4EB9 0000 2C22             		jsr	(CalcSine).l
00018902 E440                       		asr.w	#2,d0
00018904 3140 0012                  		move.w	d0,$12(a0)
00018908 317C FF00 0010             		move.w	#-$100,$10(a0)
0001890E 6100 F592                  		bsr.w	BossMove
00018912 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018918 6600                       		bne.s	loc_18334
0001891A 5428 0025                  		addq.b	#2,$25(a0)
0001891E 4228 0028                  		clr.b	$28(a0)
00018922 42A8 0010                  		clr.l	$10(a0)
00018926                            
00018926                            loc_18334:
00018926 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001892C 1140 0034                  		move.b	d0,$34(a0)
00018930                            
00018930                            loc_1833E:
00018930 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018936 3168 0030 0008             		move.w	$30(a0),8(a0)
0001893C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018942 6400                       		bcc.s	locret_18390
00018944 4A28 0022                  		tst.b	$22(a0)
00018948 6B00                       		bmi.s	loc_18392
0001894A 4A28 0020                  		tst.b	$20(a0)
0001894E 6600                       		bne.s	locret_18390
00018950 4A28 003E                  		tst.b	$3E(a0)
00018954 6600                       		bne.s	loc_18374
00018956 117C 0028 003E             		move.b	#$28,$3E(a0)
0001895C 303C 00AC                  		move.w	#$AC,d0
00018960 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018966                            
00018966                            loc_18374:
00018966 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001896A 7000                       		moveq	#0,d0
0001896C 4A51                       		tst.w	(a1)
0001896E 6600                       		bne.s	loc_18382
00018970 303C 0EEE                  		move.w	#$EEE,d0
00018974                            
00018974                            loc_18382:
00018974 3280                       		move.w	d0,(a1)
00018976 5328 003E                  		subq.b	#1,$3E(a0)
0001897A 6600                       		bne.s	locret_18390
0001897C 117C 000F 0020             		move.b	#$F,$20(a0)
00018982                            
00018982                            locret_18390:
00018982 4E75                       		rts	
00018984                            ; ===========================================================================
00018984                            
00018984                            loc_18392:				; XREF: loc_1833E
00018984 7064                       		moveq	#100,d0
00018986 6100 0000                  		bsr.w	AddPoints
0001898A 117C 0004 0025             		move.b	#4,$25(a0)
00018990 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018996 4268 0010                  		clr.w	$10(a0)
0001899A 4E75                       		rts	
0001899C                            ; ===========================================================================
0001899C                            
0001899C                            loc_183AA:				; XREF: Obj73_ShipIndex
0001899C 7000                       		moveq	#0,d0
0001899E 1028 0028                  		move.b	$28(a0),d0
000189A2 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189A6 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189AA 0228 0006 0028             		andi.b	#6,$28(a0)
000189B0 6000 FF7E                  		bra.w	loc_1833E
000189B4                            ; ===========================================================================
000189B4 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000189B6 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189B8 0000                       		dc.w loc_183CA-off_183C2
000189BA 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189BC                            ; ===========================================================================
000189BC                            
000189BC                            loc_183CA:				; XREF: off_183C2
000189BC 4A68 0010                  		tst.w	$10(a0)
000189C0 6600                       		bne.s	loc_183FE
000189C2 7040                       		moveq	#$40,d0
000189C4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189CA 6700                       		beq.s	loc_183E6
000189CC 6500                       		bcs.s	loc_183DE
000189CE 4440                       		neg.w	d0
000189D0                            
000189D0                            loc_183DE:
000189D0 3140 0012                  		move.w	d0,$12(a0)
000189D4 6000 F4CC                  		bra.w	BossMove
000189D8                            ; ===========================================================================
000189D8                            
000189D8                            loc_183E6:
000189D8 317C 0200 0010             		move.w	#$200,$10(a0)
000189DE 317C 0100 0012             		move.w	#$100,$12(a0)
000189E4 0828 0000 0022             		btst	#0,$22(a0)
000189EA 6600                       		bne.s	loc_183FE
000189EC 4468 0010                  		neg.w	$10(a0)
000189F0                            
000189F0                            loc_183FE:
000189F0 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000189F6 6400                       		bcc.s	Obj73_MakeLava
000189F8 6100 F4A8                  		bsr.w	BossMove
000189FC 5968 0012                  		subq.w	#4,$12(a0)
00018A00                            
00018A00                            Obj73_MakeLava:
00018A00 5328 0034                  		subq.b	#1,$34(a0)
00018A04 6400                       		bcc.s	loc_1845C
00018A06 4EB9 0000 E03A             		jsr	SingleObjLoad
00018A0C 6600                       		bne.s	loc_1844A
00018A0E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A12 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A18 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A1E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A24 80FC 0050                  		divu.w	#$50,d0
00018A28 4840                       		swap	d0
00018A2A 0640 1878                  		addi.w	#$1878,d0
00018A2E 3340 0008                  		move.w	d0,8(a1)
00018A32 EE09                       		lsr.b	#7,d1
00018A34 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A3A                            
00018A3A                            loc_1844A:
00018A3A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A40 0200 001F                  		andi.b	#$1F,d0
00018A44 0600 0040                  		addi.b	#$40,d0
00018A48 1140 0034                  		move.b	d0,$34(a0)
00018A4C                            
00018A4C                            loc_1845C:
00018A4C 0828 0000 0022             		btst	#0,$22(a0)
00018A52 6700                       		beq.s	loc_18474
00018A54 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A5A 6D00                       		blt.s	locret_1849C
00018A5C 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A62 6000                       		bra.s	loc_18482
00018A64                            ; ===========================================================================
00018A64                            
00018A64                            loc_18474:
00018A64 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A6A 6E00                       		bgt.s	locret_1849C
00018A6C 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A72                            
00018A72                            loc_18482:
00018A72 4268 0010                  		clr.w	$10(a0)
00018A76 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A7C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A82 6400                       		bcc.s	loc_18498
00018A84 4468 0012                  		neg.w	$12(a0)
00018A88                            
00018A88                            loc_18498:
00018A88 5428 0028                  		addq.b	#2,$28(a0)
00018A8C                            
00018A8C                            locret_1849C:
00018A8C 4E75                       		rts	
00018A8E                            ; ===========================================================================
00018A8E                            
00018A8E                            Obj73_MakeLava2:			; XREF: off_183C2
00018A8E 6100 F412                  		bsr.w	BossMove
00018A92 3028 0038                  		move.w	$38(a0),d0
00018A96 0440 022C                  		subi.w	#$22C,d0
00018A9A 6E00                       		bgt.s	locret_184F4
00018A9C 303C 022C                  		move.w	#$22C,d0
00018AA0 4A68 0012                  		tst.w	$12(a0)
00018AA4 6700                       		beq.s	loc_184EA
00018AA6 4268 0012                  		clr.w	$12(a0)
00018AAA 317C 0050 003C             		move.w	#$50,$3C(a0)
00018AB0 0868 0000 0022             		bchg	#0,$22(a0)
00018AB6 4EB9 0000 E03A             		jsr	SingleObjLoad
00018ABC 6600                       		bne.s	loc_184EA
00018ABE 3368 0030 0008             		move.w	$30(a0),8(a1)
00018AC4 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018ACA 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AD0 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018AD4 137C 0001 0028             		move.b	#1,$28(a1)
00018ADA                            
00018ADA                            loc_184EA:
00018ADA 5368 003C                  		subq.w	#1,$3C(a0)
00018ADE 6600                       		bne.s	locret_184F4
00018AE0 5428 0028                  		addq.b	#2,$28(a0)
00018AE4                            
00018AE4                            locret_184F4:
00018AE4 4E75                       		rts	
00018AE6                            ; ===========================================================================
00018AE6                            
00018AE6                            loc_184F6:				; XREF: Obj73_ShipIndex
00018AE6 5368 003C                  		subq.w	#1,$3C(a0)
00018AEA 6B00                       		bmi.s	loc_18500
00018AEC 6000 F372                  		bra.w	BossDefeated
00018AF0                            ; ===========================================================================
00018AF0                            
00018AF0                            loc_18500:
00018AF0 08E8 0000 0022             		bset	#0,$22(a0)
00018AF6 08A8 0007 0022             		bclr	#7,$22(a0)
00018AFC 4268 0010                  		clr.w	$10(a0)
00018B00 5428 0025                  		addq.b	#2,$25(a0)
00018B04 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B0A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B0E 6600                       		bne.s	locret_1852A
00018B10 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B16 4268 0012                  		clr.w	$12(a0)
00018B1A                            
00018B1A                            locret_1852A:
00018B1A 4E75                       		rts	
00018B1C                            ; ===========================================================================
00018B1C                            
00018B1C                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B1C 5268 003C                  		addq.w	#1,$3C(a0)
00018B20 6700                       		beq.s	loc_18544
00018B22 6A00                       		bpl.s	loc_1854E
00018B24 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B2A 6400                       		bcc.s	loc_18544
00018B2C 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B32 6000                       		bra.s	loc_1857A
00018B34                            ; ===========================================================================
00018B34                            
00018B34                            loc_18544:
00018B34 4268 0012                  		clr.w	$12(a0)
00018B38 4268 003C                  		clr.w	$3C(a0)
00018B3C 6000                       		bra.s	loc_1857A
00018B3E                            ; ===========================================================================
00018B3E                            
00018B3E                            loc_1854E:
00018B3E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B44 6500                       		bcs.s	loc_18566
00018B46 6700                       		beq.s	loc_1856C
00018B48 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B4E 6500                       		bcs.s	loc_1857A
00018B50 5428 0025                  		addq.b	#2,$25(a0)
00018B54 6000                       		bra.s	loc_1857A
00018B56                            ; ===========================================================================
00018B56                            
00018B56                            loc_18566:
00018B56 5168 0012                  		subq.w	#8,$12(a0)
00018B5A 6000                       		bra.s	loc_1857A
00018B5C                            ; ===========================================================================
00018B5C                            
00018B5C                            loc_1856C:
00018B5C 4268 0012                  		clr.w	$12(a0)
00018B60 303C 0083                  		move.w	#$83,d0
00018B64 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B6A                            
00018B6A                            loc_1857A:
00018B6A 6100 F336                  		bsr.w	BossMove
00018B6E 6000 FDC0                  		bra.w	loc_1833E
00018B72                            ; ===========================================================================
00018B72                            
00018B72                            loc_18582:				; XREF: Obj73_ShipIndex
00018B72 317C 0500 0010             		move.w	#$500,$10(a0)
00018B78 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B7E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B84 6400                       		bcc.s	loc_1859C
00018B86 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B8A 6000                       		bra.s	loc_185A2
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            loc_1859C:
00018B8C 4A28 0001                  		tst.b	1(a0)
00018B90 6A00                       		bpl.s	Obj73_ShipDel
00018B92                            
00018B92                            loc_185A2:
00018B92 6100 F30E                  		bsr.w	BossMove
00018B96 6000 FD98                  		bra.w	loc_1833E
00018B9A                            ; ===========================================================================
00018B9A                            
00018B9A                            Obj73_ShipDel:
00018B9A 4EF9 0000 DBF0             		jmp	DeleteObject
00018BA0                            ; ===========================================================================
00018BA0                            
00018BA0                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BA0 7000                       		moveq	#0,d0
00018BA2 7201                       		moveq	#1,d1
00018BA4 2268 0034                  		movea.l	$34(a0),a1
00018BA8 1029 0025                  		move.b	$25(a1),d0
00018BAC 5540                       		subq.w	#2,d0
00018BAE 6600                       		bne.s	loc_185D2
00018BB0 0829 0001 0028             		btst	#1,$28(a1)
00018BB6 6700                       		beq.s	loc_185DA
00018BB8 4A69 0012                  		tst.w	$12(a1)
00018BBC 6600                       		bne.s	loc_185DA
00018BBE 7204                       		moveq	#4,d1
00018BC0 6000                       		bra.s	loc_185EE
00018BC2                            ; ===========================================================================
00018BC2                            
00018BC2                            loc_185D2:
00018BC2 5500                       		subq.b	#2,d0
00018BC4 6B00                       		bmi.s	loc_185DA
00018BC6 720A                       		moveq	#$A,d1
00018BC8 6000                       		bra.s	loc_185EE
00018BCA                            ; ===========================================================================
00018BCA                            
00018BCA                            loc_185DA:
00018BCA 4A29 0020                  		tst.b	$20(a1)
00018BCE 6600                       		bne.s	loc_185E4
00018BD0 7205                       		moveq	#5,d1
00018BD2 6000                       		bra.s	loc_185EE
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            loc_185E4:
00018BD4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BDA 6500                       		bcs.s	loc_185EE
00018BDC 7204                       		moveq	#4,d1
00018BDE                            
00018BDE                            loc_185EE:
00018BDE 1141 001C                  		move.b	d1,$1C(a0)
00018BE2 5900                       		subq.b	#4,d0
00018BE4 6600                       		bne.s	loc_18602
00018BE6 117C 0006 001C             		move.b	#6,$1C(a0)
00018BEC 4A28 0001                  		tst.b	1(a0)
00018BF0 6A00                       		bpl.s	Obj73_FaceDel
00018BF2                            
00018BF2                            loc_18602:
00018BF2 6000                       		bra.s	Obj73_Display
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            Obj73_FaceDel:
00018BF4 4EF9 0000 DBF0             		jmp	DeleteObject
00018BFA                            ; ===========================================================================
00018BFA                            
00018BFA                            Obj73_FlameMain:			; XREF: Obj73_Index
00018BFA 117C 0007 001C             		move.b	#7,$1C(a0)
00018C00 2268 0034                  		movea.l	$34(a0),a1
00018C04 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C0A 6D00                       		blt.s	loc_1862A
00018C0C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C12 4A28 0001                  		tst.b	1(a0)
00018C16 6A00                       		bpl.s	Obj73_FlameDel
00018C18 6000                       		bra.s	loc_18636
00018C1A                            ; ===========================================================================
00018C1A                            
00018C1A                            loc_1862A:
00018C1A 4A69 0010                  		tst.w	$10(a1)
00018C1E 6700                       		beq.s	loc_18636
00018C20 117C 0008 001C             		move.b	#8,$1C(a0)
00018C26                            
00018C26                            loc_18636:
00018C26 6000                       		bra.s	Obj73_Display
00018C28                            ; ===========================================================================
00018C28                            
00018C28                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C28 4EF9 0000 DBF0             		jmp	DeleteObject
00018C2E                            ; ===========================================================================
00018C2E                            
00018C2E                            Obj73_Display:
00018C2E 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
00018C34 4EB9 0000 AC66             		jsr	AnimateSprite
00018C3A                            
00018C3A                            loc_1864A:
00018C3A 2268 0034                  		movea.l	$34(a0),a1
00018C3E 3169 0008 0008             		move.w	8(a1),8(a0)
00018C44 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C4A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C50 7003                       		moveq	#3,d0
00018C52 C028 0022                  		and.b	$22(a0),d0
00018C56 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C5C 8128 0001                  		or.b	d0,1(a0)
00018C60 4EF9 0000 DBB4             		jmp	DisplaySprite
00018C66                            ; ===========================================================================
00018C66                            
00018C66                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C66 2268 0034                  		movea.l	$34(a0),a1
00018C6A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C70 6600                       		bne.s	loc_18688
00018C72 4A28 0001                  		tst.b	1(a0)
00018C76 6A00                       		bpl.s	Obj73_TubeDel
00018C78                            
00018C78                            loc_18688:
00018C78 217C 0001 83CA 0004        		move.l	#Map_BossItems,4(a0)
00018C80 317C 246C 0002             		move.w	#$246C,2(a0)
00018C86 117C 0004 001A             		move.b	#4,$1A(a0)
00018C8C 60AC                       		bra.s	loc_1864A
00018C8E                            ; ===========================================================================
00018C8E                            
00018C8E                            Obj73_TubeDel:
00018C8E 4EF9 0000 DBF0             		jmp	DeleteObject
00018C94                            ; ===========================================================================
00018C94                            ; ---------------------------------------------------------------------------
00018C94                            ; Object 74 - lava that	Eggman drops (MZ)
00018C94                            ; ---------------------------------------------------------------------------
00018C94                            
00018C94                            Obj74:					; XREF: Obj_Index
00018C94 7000                       		moveq	#0,d0
00018C96 1028 0024                  		move.b	$24(a0),d0
00018C9A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018C9E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CA2 4EF9 0000 DBB4             		jmp	DisplaySprite
00018CA8                            ; ===========================================================================
00018CA8 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CAA 0000                       		dc.w Obj74_Action-Obj74_Index
00018CAC 0000                       		dc.w loc_18886-Obj74_Index
00018CAE 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CB0                            ; ===========================================================================
00018CB0                            
00018CB0                            Obj74_Main:				; XREF: Obj74_Index
00018CB0 117C 0008 0016             		move.b	#8,$16(a0)
00018CB6 117C 0008 0017             		move.b	#8,$17(a0)
00018CBC 217C 0000 B878 0004        		move.l	#Map_obj14,4(a0)
00018CC4 317C 0345 0002             		move.w	#$345,2(a0)
00018CCA 117C 0004 0001             		move.b	#4,1(a0)
00018CD0 117C 0005 0018             		move.b	#5,$18(a0)
00018CD6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CDC 117C 0008 0019             		move.b	#8,$19(a0)
00018CE2 5428 0024                  		addq.b	#2,$24(a0)
00018CE6 4A28 0028                  		tst.b	$28(a0)
00018CEA 6600                       		bne.s	loc_1870A
00018CEC 117C 008B 0020             		move.b	#$8B,$20(a0)
00018CF2 5428 0024                  		addq.b	#2,$24(a0)
00018CF6 6000 0000                  		bra.w	loc_18886
00018CFA                            ; ===========================================================================
00018CFA                            
00018CFA                            loc_1870A:
00018CFA 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D00 303C 00AE                  		move.w	#$AE,d0
00018D04 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D0A                            
00018D0A                            Obj74_Action:				; XREF: Obj74_Index
00018D0A 7000                       		moveq	#0,d0
00018D0C 1028 0025                  		move.b	$25(a0),d0
00018D10 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D14 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D18 4EB9 0000 DB8E             		jsr	SpeedToPos
00018D1E 43F9 0000 EA6E             		lea	(Ani_obj14).l,a1
00018D24 4EB9 0000 AC66             		jsr	AnimateSprite
00018D2A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D30 6200                       		bhi.s	Obj74_Delete
00018D32 4E75                       		rts	
00018D34                            ; ===========================================================================
00018D34                            
00018D34                            Obj74_Delete:
00018D34 4EF9 0000 DBF0             		jmp	DeleteObject
00018D3A                            ; ===========================================================================
00018D3A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D3C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D3E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D40 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D42                            ; ===========================================================================
00018D42                            
00018D42                            Obj74_Drop:				; XREF: Obj74_Index2
00018D42 08E8 0001 0022             		bset	#1,$22(a0)
00018D48 5328 0029                  		subq.b	#1,$29(a0)
00018D4C 6A00                       		bpl.s	locret_18780
00018D4E 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D54 4228 0028                  		clr.b	$28(a0)
00018D58 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D5E 08A8 0001 0022             		bclr	#1,$22(a0)
00018D64 6100 C6A8                  		bsr.w	ObjHitFloor
00018D68 4A41                       		tst.w	d1
00018D6A 6A00                       		bpl.s	locret_18780
00018D6C 5428 0025                  		addq.b	#2,$25(a0)
00018D70                            
00018D70                            locret_18780:
00018D70 4E75                       		rts	
00018D72                            ; ===========================================================================
00018D72                            
00018D72                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D72 5568 000C                  		subq.w	#2,$C(a0)
00018D76 08E8 0007 0002             		bset	#7,2(a0)
00018D7C 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D82 4268 0012                  		clr.w	$12(a0)
00018D86 3168 0008 0030             		move.w	8(a0),$30(a0)
00018D8C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D92 117C 0003 0029             		move.b	#3,$29(a0)
00018D98 4EB9 0000 E050             		jsr	SingleObjLoad2
00018D9E 6600                       		bne.s	loc_187CA
00018DA0 47D1                       		lea	(a1),a3
00018DA2 45D0                       		lea	(a0),a2
00018DA4 7003                       		moveq	#3,d0
00018DA6                            
00018DA6                            Obj74_Loop:
00018DA6 26DA                       		move.l	(a2)+,(a3)+
00018DA8 26DA                       		move.l	(a2)+,(a3)+
00018DAA 26DA                       		move.l	(a2)+,(a3)+
00018DAC 26DA                       		move.l	(a2)+,(a3)+
00018DAE 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018DB2                            
00018DB2 4469 0010                  		neg.w	$10(a1)
00018DB6 5429 0025                  		addq.b	#2,$25(a1)
00018DBA                            
00018DBA                            loc_187CA:
00018DBA 5428 0025                  		addq.b	#2,$25(a0)
00018DBE 4E75                       		rts	
00018DC0                            
00018DC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DC0                            
00018DC0                            
00018DC0                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018DC0 4EB9 0000 E050             		jsr	SingleObjLoad2
00018DC6 6600                       		bne.s	locret_187EE
00018DC8 3368 0008 0008             		move.w	8(a0),8(a1)
00018DCE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DD4 12BC 0074                  		move.b	#$74,(a1)
00018DD8 337C 0067 0028             		move.w	#$67,$28(a1)
00018DDE                            
00018DDE                            locret_187EE:
00018DDE 4E75                       		rts	
00018DE0                            ; End of function Obj74_Duplicate2
00018DE0                            
00018DE0                            ; ===========================================================================
00018DE0                            
00018DE0                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018DE0 6100 C62C                  		bsr.w	ObjHitFloor
00018DE4 4A41                       		tst.w	d1
00018DE6 6A00                       		bpl.s	loc_18826
00018DE8 3028 0008                  		move.w	8(a0),d0
00018DEC 0C40 1940                  		cmpi.w	#$1940,d0
00018DF0 6E00                       		bgt.s	loc_1882C
00018DF2 3228 0030                  		move.w	$30(a0),d1
00018DF6 B240                       		cmp.w	d0,d1
00018DF8 6700                       		beq.s	loc_1881E
00018DFA 0240 0010                  		andi.w	#$10,d0
00018DFE 0241 0010                  		andi.w	#$10,d1
00018E02 B240                       		cmp.w	d0,d1
00018E04 6700                       		beq.s	loc_1881E
00018E06 61B8                       		bsr.s	Obj74_Duplicate2
00018E08 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E0E                            
00018E0E                            loc_1881E:
00018E0E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E14 4E75                       		rts	
00018E16                            ; ===========================================================================
00018E16                            
00018E16                            loc_18826:
00018E16 5428 0025                  		addq.b	#2,$25(a0)
00018E1A 4E75                       		rts	
00018E1C                            ; ===========================================================================
00018E1C                            
00018E1C                            loc_1882C:
00018E1C 5428 0024                  		addq.b	#2,$24(a0)
00018E20 4E75                       		rts	
00018E22                            ; ===========================================================================
00018E22                            
00018E22                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E22 08A8 0001 0022             		bclr	#1,$22(a0)
00018E28 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E2E 3028 0008                  		move.w	8(a0),d0
00018E32 9068 0032                  		sub.w	$32(a0),d0
00018E36 6A00                       		bpl.s	loc_1884A
00018E38 4440                       		neg.w	d0
00018E3A                            
00018E3A                            loc_1884A:
00018E3A 0C40 0012                  		cmpi.w	#$12,d0
00018E3E 6600                       		bne.s	loc_18856
00018E40 08A8 0007 0002             		bclr	#7,2(a0)
00018E46                            
00018E46                            loc_18856:
00018E46 6100 C5C6                  		bsr.w	ObjHitFloor
00018E4A 4A41                       		tst.w	d1
00018E4C 6A00                       		bpl.s	locret_1887E
00018E4E 5328 0029                  		subq.b	#1,$29(a0)
00018E52 6700                       		beq.s	Obj74_Delete2
00018E54 4268 0012                  		clr.w	$12(a0)
00018E58 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E5E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E64 08E8 0007 0002             		bset	#7,2(a0)
00018E6A 5528 0025                  		subq.b	#2,$25(a0)
00018E6E                            
00018E6E                            locret_1887E:
00018E6E 4E75                       		rts	
00018E70                            ; ===========================================================================
00018E70                            
00018E70                            Obj74_Delete2:
00018E70 4EF9 0000 DBF0             		jmp	DeleteObject
00018E76                            ; ===========================================================================
00018E76                            
00018E76                            loc_18886:				; XREF: Obj74_Index
00018E76 08E8 0007 0002             		bset	#7,2(a0)
00018E7C 5328 0029                  		subq.b	#1,$29(a0)
00018E80 6600                       		bne.s	Obj74_Animate
00018E82 117C 0001 001C             		move.b	#1,$1C(a0)
00018E88 5968 000C                  		subq.w	#4,$C(a0)
00018E8C 4228 0020                  		clr.b	$20(a0)
00018E90                            
00018E90                            Obj74_Animate:
00018E90 43F9 0000 EA6E             		lea	(Ani_obj14).l,a1
00018E96 4EF9 0000 AC66             		jmp	AnimateSprite
00018E9C                            ; ===========================================================================
00018E9C                            
00018E9C                            Obj74_Delete3:				; XREF: Obj74_Index
00018E9C 4EF9 0000 DBF0             		jmp	DeleteObject
00018EA2                            ; ===========================================================================
00018EA2                            
00018EA2                            Obj7A_Delete:
00018EA2 4EF9 0000 DBF0             		jmp	DeleteObject
00018EA8                            ; ===========================================================================
00018EA8                            ; ---------------------------------------------------------------------------
00018EA8                            ; Object 7A - Eggman (SLZ)
00018EA8                            ; ---------------------------------------------------------------------------
00018EA8                            
00018EA8                            Obj7A:					; XREF: Obj_Index
00018EA8 7000                       		moveq	#0,d0
00018EAA 1028 0024                  		move.b	$24(a0),d0
00018EAE 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018EB2 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018EB6                            ; ===========================================================================
00018EB6 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018EB8 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018EBA 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018EBC 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018EBE 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018EC0                            
00018EC0 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EC3 0401 04                    		dc.b 4,	1, 4
00018EC6 0607 04                    		dc.b 6,	7, 4
00018EC9 0800 03                    		dc.b 8,	0, 3
00018ECC                            ; ===========================================================================
00018ECC                            
00018ECC                            Obj7A_Main:				; XREF: Obj7A_Index
00018ECC 317C 2188 0008             		move.w	#$2188,8(a0)
00018ED2 317C 0228 000C             		move.w	#$228,$C(a0)
00018ED8 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EDE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EE4 117C 000F 0020             		move.b	#$F,$20(a0)
00018EEA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018EF0 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018EF4 2248                       		movea.l	a0,a1
00018EF6 7203                       		moveq	#3,d1
00018EF8 6000                       		bra.s	Obj7A_LoadBoss
00018EFA                            ; ===========================================================================
00018EFA                            
00018EFA                            Obj7A_Loop:
00018EFA 4EB9 0000 E050             		jsr	SingleObjLoad2
00018F00 6600                       		bne.s	loc_1895C
00018F02 12BC 007A                  		move.b	#$7A,0(a1)
00018F06 3368 0008 0008             		move.w	8(a0),8(a1)
00018F0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F12                            
00018F12                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F12 08A8 0000 0022             		bclr	#0,$22(a0)
00018F18 4229 0025                  		clr.b	$25(a1)
00018F1C 135A 0024                  		move.b	(a2)+,$24(a1)
00018F20 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F24 135A 0018                  		move.b	(a2)+,$18(a1)
00018F28 237C 0001 8302 0004        		move.l	#Map_Eggman,4(a1)
00018F30 337C 0400 0002             		move.w	#$400,2(a1)
00018F36 137C 0004 0001             		move.b	#4,1(a1)
00018F3C 137C 0020 0019             		move.b	#$20,$19(a1)
00018F42 2348 0034                  		move.l	a0,$34(a1)
00018F46 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F4A                            
00018F4A                            loc_1895C:
00018F4A 43F8 D040                  		lea	($FFFFD040).w,a1
00018F4E 45E8 002A                  		lea	$2A(a0),a2
00018F52 705E                       		moveq	#$5E,d0
00018F54 723E                       		moveq	#$3E,d1
00018F56                            
00018F56                            loc_18968:
00018F56 B011                       		cmp.b	(a1),d0
00018F58 6600                       		bne.s	loc_18974
00018F5A 4A29 0028                  		tst.b	$28(a1)
00018F5E 6700                       		beq.s	loc_18974
00018F60 34C9                       		move.w	a1,(a2)+
00018F62                            
00018F62                            loc_18974:
00018F62 D2FC 0040                  		adda.w	#$40,a1
00018F66 51C9 FFEE                  		dbf	d1,loc_18968
00018F6A                            
00018F6A                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F6A 7000                       		moveq	#0,d0
00018F6C 1028 0025                  		move.b	$25(a0),d0
00018F70 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F74 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F78 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
00018F7E 4EB9 0000 AC66             		jsr	AnimateSprite
00018F84 7003                       		moveq	#3,d0
00018F86 C028 0022                  		and.b	$22(a0),d0
00018F8A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018F90 8128 0001                  		or.b	d0,1(a0)
00018F94 4EF9 0000 DBB4             		jmp	DisplaySprite
00018F9A                            ; ===========================================================================
00018F9A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018F9C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018F9E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FA0 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FA2 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FA4 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FA6 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FAC 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018FB2 6400                       		bcc.s	loc_189CA
00018FB4 5428 0025                  		addq.b	#2,$25(a0)
00018FB8                            
00018FB8                            loc_189CA:
00018FB8 6100 EEE8                  		bsr.w	BossMove
00018FBC 1028 003F                  		move.b	$3F(a0),d0
00018FC0 5428 003F                  		addq.b	#2,$3F(a0)
00018FC4 4EB9 0000 2C22             		jsr	(CalcSine).l
00018FCA EC40                       		asr.w	#6,d0
00018FCC D068 0038                  		add.w	$38(a0),d0
00018FD0 3140 000C                  		move.w	d0,$C(a0)
00018FD4 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FDA 6000                       		bra.s	loc_189FE
00018FDC                            ; ===========================================================================
00018FDC                            
00018FDC                            loc_189EE:
00018FDC 6100 EEC4                  		bsr.w	BossMove
00018FE0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FE6 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FEC                            
00018FEC                            loc_189FE:
00018FEC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018FF2 6400                       		bcc.s	locret_18A44
00018FF4 4A28 0022                  		tst.b	$22(a0)
00018FF8 6B00                       		bmi.s	loc_18A46
00018FFA 4A28 0020                  		tst.b	$20(a0)
00018FFE 6600                       		bne.s	locret_18A44
00019000 4A28 003E                  		tst.b	$3E(a0)
00019004 6600                       		bne.s	loc_18A28
00019006 117C 0020 003E             		move.b	#$20,$3E(a0)
0001900C 303C 00AC                  		move.w	#$AC,d0
00019010 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019016                            
00019016                            loc_18A28:
00019016 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001901A 7000                       		moveq	#0,d0
0001901C 4A51                       		tst.w	(a1)
0001901E 6600                       		bne.s	loc_18A36
00019020 303C 0EEE                  		move.w	#$EEE,d0
00019024                            
00019024                            loc_18A36:
00019024 3280                       		move.w	d0,(a1)
00019026 5328 003E                  		subq.b	#1,$3E(a0)
0001902A 6600                       		bne.s	locret_18A44
0001902C 117C 000F 0020             		move.b	#$F,$20(a0)
00019032                            
00019032                            locret_18A44:
00019032 4E75                       		rts	
00019034                            ; ===========================================================================
00019034                            
00019034                            loc_18A46:
00019034 7064                       		moveq	#100,d0
00019036 6100 0000                  		bsr.w	AddPoints
0001903A 117C 0006 0025             		move.b	#6,$25(a0)
00019040 117C 0078 003C             		move.b	#$78,$3C(a0)
00019046 4268 0010                  		clr.w	$10(a0)
0001904A 4E75                       		rts	
0001904C                            ; ===========================================================================
0001904C                            
0001904C                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001904C 3028 0030                  		move.w	$30(a0),d0
00019050 317C 0200 0010             		move.w	#$200,$10(a0)
00019056 0828 0000 0022             		btst	#0,$22(a0)
0001905C 6600                       		bne.s	loc_18A7C
0001905E 4468 0010                  		neg.w	$10(a0)
00019062 0C40 2008                  		cmpi.w	#$2008,d0
00019066 6E00                       		bgt.s	loc_18A88
00019068 6000                       		bra.s	loc_18A82
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            loc_18A7C:
0001906A 0C40 2138                  		cmpi.w	#$2138,d0
0001906E 6D00                       		blt.s	loc_18A88
00019070                            
00019070                            loc_18A82:
00019070 0868 0000 0022             		bchg	#0,$22(a0)
00019076                            
00019076                            loc_18A88:
00019076 3028 0008                  		move.w	8(a0),d0
0001907A 72FF                       		moveq	#-1,d1
0001907C 7402                       		moveq	#2,d2
0001907E 45E8 002A                  		lea	$2A(a0),a2
00019082 7828                       		moveq	#$28,d4
00019084 4A68 0010                  		tst.w	$10(a0)
00019088 6A00                       		bpl.s	loc_18A9E
0001908A 4444                       		neg.w	d4
0001908C                            
0001908C                            loc_18A9E:
0001908C 321A                       		move.w	(a2)+,d1
0001908E 2641                       		movea.l	d1,a3
00019090 082B 0003 0022             		btst	#3,$22(a3)
00019096 6600                       		bne.s	loc_18AB4
00019098 362B 0008                  		move.w	8(a3),d3
0001909C D644                       		add.w	d4,d3
0001909E 9640                       		sub.w	d0,d3
000190A0 6700                       		beq.s	loc_18AC0
000190A2                            
000190A2                            loc_18AB4:
000190A2 51CA FFE8                  		dbf	d2,loc_18A9E
000190A6                            
000190A6 1142 0028                  		move.b	d2,$28(a0)
000190AA 6000 FF0C                  		bra.w	loc_189CA
000190AE                            ; ===========================================================================
000190AE                            
000190AE                            loc_18AC0:
000190AE 1142 0028                  		move.b	d2,$28(a0)
000190B2 5428 0025                  		addq.b	#2,$25(a0)
000190B6 117C 0028 003C             		move.b	#$28,$3C(a0)
000190BC 6000 FEFA                  		bra.w	loc_189CA
000190C0                            ; ===========================================================================
000190C0                            
000190C0                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000190C0 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190C6 6600                       		bne.s	loc_18B36
000190C8 70FF                       		moveq	#-1,d0
000190CA 1028 0028                  		move.b	$28(a0),d0
000190CE 4880                       		ext.w	d0
000190D0 6B00                       		bmi.s	loc_18B40
000190D2 5540                       		subq.w	#2,d0
000190D4 4440                       		neg.w	d0
000190D6 D040                       		add.w	d0,d0
000190D8 43E8 002A                  		lea	$2A(a0),a1
000190DC 3031 0000                  		move.w	(a1,d0.w),d0
000190E0 2440                       		movea.l	d0,a2
000190E2 43F8 D040                  		lea	($FFFFD040).w,a1
000190E6 723E                       		moveq	#$3E,d1
000190E8                            
000190E8                            loc_18AFA:
000190E8 B0A9 003C                  		cmp.l	$3C(a1),d0
000190EC 6700                       		beq.s	loc_18B40
000190EE D2FC 0040                  		adda.w	#$40,a1
000190F2 51C9 FFF4                  		dbf	d1,loc_18AFA
000190F6                            
000190F6 2F08                       		move.l	a0,-(sp)
000190F8 41D2                       		lea	(a2),a0
000190FA 4EB9 0000 E050             		jsr	SingleObjLoad2
00019100 205F                       		movea.l	(sp)+,a0
00019102 6600                       		bne.s	loc_18B40
00019104 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019108 3368 0008 0008             		move.w	8(a0),8(a1)
0001910E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019114 0669 0020 000C             		addi.w	#$20,$C(a1)
0001911A 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019120 234A 003C                  		move.l	a2,$3C(a1)
00019124                            
00019124                            loc_18B36:
00019124 5328 003C                  		subq.b	#1,$3C(a0)
00019128 6700                       		beq.s	loc_18B40
0001912A 6000 FEC0                  		bra.w	loc_189FE
0001912E                            ; ===========================================================================
0001912E                            
0001912E                            loc_18B40:
0001912E 5528 0025                  		subq.b	#2,$25(a0)
00019132 6000 FE84                  		bra.w	loc_189CA
00019136                            ; ===========================================================================
00019136                            
00019136                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019136 5328 003C                  		subq.b	#1,$3C(a0)
0001913A 6B00                       		bmi.s	loc_18B52
0001913C 6000 ED22                  		bra.w	BossDefeated
00019140                            ; ===========================================================================
00019140                            
00019140                            loc_18B52:
00019140 5428 0025                  		addq.b	#2,$25(a0)
00019144 4268 0012                  		clr.w	$12(a0)
00019148 08E8 0000 0022             		bset	#0,$22(a0)
0001914E 08A8 0007 0022             		bclr	#7,$22(a0)
00019154 4268 0010                  		clr.w	$10(a0)
00019158 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001915E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019162 6600                       		bne.s	loc_18B7C
00019164 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001916A                            
0001916A                            loc_18B7C:
0001916A 6000 FE80                  		bra.w	loc_189FE
0001916E                            ; ===========================================================================
0001916E                            
0001916E                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001916E 5228 003C                  		addq.b	#1,$3C(a0)
00019172 6700                       		beq.s	loc_18B90
00019174 6A00                       		bpl.s	loc_18B96
00019176 0668 0018 0012             		addi.w	#$18,$12(a0)
0001917C 6000                       		bra.s	loc_18BC2
0001917E                            ; ===========================================================================
0001917E                            
0001917E                            loc_18B90:
0001917E 4268 0012                  		clr.w	$12(a0)
00019182 6000                       		bra.s	loc_18BC2
00019184                            ; ===========================================================================
00019184                            
00019184                            loc_18B96:
00019184 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001918A 6500                       		bcs.s	loc_18BAE
0001918C 6700                       		beq.s	loc_18BB4
0001918E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019194 6500                       		bcs.s	loc_18BC2
00019196 5428 0025                  		addq.b	#2,$25(a0)
0001919A 6000                       		bra.s	loc_18BC2
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            loc_18BAE:
0001919C 5168 0012                  		subq.w	#8,$12(a0)
000191A0 6000                       		bra.s	loc_18BC2
000191A2                            ; ===========================================================================
000191A2                            
000191A2                            loc_18BB4:
000191A2 4268 0012                  		clr.w	$12(a0)
000191A6 303C 0084                  		move.w	#$84,d0
000191AA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191B0                            
000191B0                            loc_18BC2:
000191B0 6000 FE2A                  		bra.w	loc_189EE
000191B4                            ; ===========================================================================
000191B4                            
000191B4                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000191B4 317C 0400 0010             		move.w	#$400,$10(a0)
000191BA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000191C0 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191C6 6400                       		bcc.s	loc_18BE0
000191C8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191CC 6000                       		bra.s	loc_18BE8
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            loc_18BE0:
000191CE 4A28 0001                  		tst.b	1(a0)
000191D2 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191D6                            
000191D6                            loc_18BE8:
000191D6 6100 ECCA                  		bsr.w	BossMove
000191DA 6000 FDDC                  		bra.w	loc_189CA
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191DE 7000                       		moveq	#0,d0
000191E0 7201                       		moveq	#1,d1
000191E2 2268 0034                  		movea.l	$34(a0),a1
000191E6 1029 0025                  		move.b	$25(a1),d0
000191EA 0C00 0006                  		cmpi.b	#6,d0
000191EE 6B00                       		bmi.s	loc_18C06
000191F0 720A                       		moveq	#$A,d1
000191F2 6000                       		bra.s	loc_18C1A
000191F4                            ; ===========================================================================
000191F4                            
000191F4                            loc_18C06:
000191F4 4A29 0020                  		tst.b	$20(a1)
000191F8 6600                       		bne.s	loc_18C10
000191FA 7205                       		moveq	#5,d1
000191FC 6000                       		bra.s	loc_18C1A
000191FE                            ; ===========================================================================
000191FE                            
000191FE                            loc_18C10:
000191FE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019204 6500                       		bcs.s	loc_18C1A
00019206 7204                       		moveq	#4,d1
00019208                            
00019208                            loc_18C1A:
00019208 1141 001C                  		move.b	d1,$1C(a0)
0001920C 0C00 000A                  		cmpi.b	#$A,d0
00019210 6600                       		bne.s	loc_18C32
00019212 117C 0006 001C             		move.b	#6,$1C(a0)
00019218 4A28 0001                  		tst.b	1(a0)
0001921C 6A00 FC84                  		bpl.w	Obj7A_Delete
00019220                            
00019220                            loc_18C32:
00019220 6000                       		bra.s	loc_18C6C
00019222                            ; ===========================================================================
00019222                            
00019222                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019222 117C 0008 001C             		move.b	#8,$1C(a0)
00019228 2268 0034                  		movea.l	$34(a0),a1
0001922C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019232 6600                       		bne.s	loc_18C56
00019234 4A28 0001                  		tst.b	1(a0)
00019238 6A00 FC68                  		bpl.w	Obj7A_Delete
0001923C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019242 6000                       		bra.s	loc_18C6C
00019244                            ; ===========================================================================
00019244                            
00019244                            loc_18C56:
00019244 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001924A 6E00                       		bgt.s	loc_18C6C
0001924C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019252 6D00                       		blt.s	loc_18C6C
00019254 117C 0007 001C             		move.b	#7,$1C(a0)
0001925A                            
0001925A                            loc_18C6C:
0001925A 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
00019260 4EB9 0000 AC66             		jsr	AnimateSprite
00019266                            
00019266                            loc_18C78:
00019266 2268 0034                  		movea.l	$34(a0),a1
0001926A 3169 0008 0008             		move.w	8(a1),8(a0)
00019270 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019276 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001927C 7003                       		moveq	#3,d0
0001927E C028 0022                  		and.b	$22(a0),d0
00019282 0228 00FC 0001             		andi.b	#-4,1(a0)
00019288 8128 0001                  		or.b	d0,1(a0)
0001928C 4EF9 0000 DBB4             		jmp	DisplaySprite
00019292                            ; ===========================================================================
00019292                            
00019292                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019292 2268 0034                  		movea.l	$34(a0),a1
00019296 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001929C 6600                       		bne.s	loc_18CB8
0001929E 4A28 0001                  		tst.b	1(a0)
000192A2 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192A6                            
000192A6                            loc_18CB8:
000192A6 217C 0001 83CA 0004        		move.l	#Map_BossItems,4(a0)
000192AE 317C 246C 0002             		move.w	#$246C,2(a0)
000192B4 117C 0003 001A             		move.b	#3,$1A(a0)
000192BA 60AA                       		bra.s	loc_18C78
000192BC                            ; ===========================================================================
000192BC                            ; ---------------------------------------------------------------------------
000192BC                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000192BC                            ; ---------------------------------------------------------------------------
000192BC                            
000192BC                            Obj7B:					; XREF: Obj_Index
000192BC 7000                       		moveq	#0,d0
000192BE 1028 0024                  		move.b	$24(a0),d0
000192C2 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192C6 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192CA 3028 0030                  		move.w	$30(a0),d0
000192CE 0240 FF80                  		andi.w	#$FF80,d0
000192D2 3238 F700                  		move.w	($FFFFF700).w,d1
000192D6 0441 0080                  		subi.w	#$80,d1
000192DA 0241 FF80                  		andi.w	#$FF80,d1
000192DE 9041                       		sub.w	d1,d0
000192E0 6B00 FBC0                  		bmi.w	Obj7A_Delete
000192E4 0C40 0280                  		cmpi.w	#$280,d0
000192E8 6200 FBB8                  		bhi.w	Obj7A_Delete
000192EC 4EF9 0000 DBB4             		jmp	DisplaySprite
000192F2                            ; ===========================================================================
000192F2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000192F4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000192F6 0000                       		dc.w loc_18DC6-Obj7B_Index
000192F8 0000                       		dc.w loc_18EAA-Obj7B_Index
000192FA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000192FC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000192FE                            ; ===========================================================================
000192FE                            
000192FE                            Obj7B_Main:				; XREF: Obj7B_Index
000192FE 217C 0001 1F7A 0004        		move.l	#Map_obj5Ea,4(a0)
00019306 317C 0518 0002             		move.w	#$518,2(a0)
0001930C 117C 0001 001A             		move.b	#1,$1A(a0)
00019312 0028 0004 0001             		ori.b	#4,1(a0)
00019318 117C 0004 0018             		move.b	#4,$18(a0)
0001931E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019324 117C 000C 0019             		move.b	#$C,$19(a0)
0001932A 2268 003C                  		movea.l	$3C(a0),a1
0001932E 3169 0008 0030             		move.w	8(a1),$30(a0)
00019334 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001933A 08E8 0000 0022             		bset	#0,$22(a0)
00019340 3028 0008                  		move.w	8(a0),d0
00019344 B069 0008                  		cmp.w	8(a1),d0
00019348 6E00                       		bgt.s	loc_18D68
0001934A 08A8 0000 0022             		bclr	#0,$22(a0)
00019350 117C 0002 003A             		move.b	#2,$3A(a0)
00019356                            
00019356                            loc_18D68:
00019356 5428 0024                  		addq.b	#2,$24(a0)
0001935A                            
0001935A                            Obj7B_Fall:				; XREF: Obj7B_Index
0001935A 4EB9 0000 DB62             		jsr	ObjectFall
00019360 2268 003C                  		movea.l	$3C(a0),a1
00019364 45F9 0000 0000             		lea	(word_19018).l,a2
0001936A 7000                       		moveq	#0,d0
0001936C 1029 001A                  		move.b	$1A(a1),d0
00019370 3228 0008                  		move.w	8(a0),d1
00019374 9268 0030                  		sub.w	$30(a0),d1
00019378 6400                       		bcc.s	loc_18D8E
0001937A 5440                       		addq.w	#2,d0
0001937C                            
0001937C                            loc_18D8E:
0001937C D040                       		add.w	d0,d0
0001937E 3228 0034                  		move.w	$34(a0),d1
00019382 D272 0000                  		add.w	(a2,d0.w),d1
00019386 B268 000C                  		cmp.w	$C(a0),d1
0001938A 6E00                       		bgt.s	locret_18DC4
0001938C 2268 003C                  		movea.l	$3C(a0),a1
00019390 7202                       		moveq	#2,d1
00019392 0828 0000 0022             		btst	#0,$22(a0)
00019398 6700                       		beq.s	loc_18DAE
0001939A 7200                       		moveq	#0,d1
0001939C                            
0001939C                            loc_18DAE:
0001939C 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193A2 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193A8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193AE 6000 0000                  		bra.w	loc_18FA2
000193B2                            ; ===========================================================================
000193B2                            
000193B2                            locret_18DC4:
000193B2 4E75                       		rts	
000193B4                            ; ===========================================================================
000193B4                            
000193B4                            loc_18DC6:				; XREF: Obj7B_Index
000193B4 2268 003C                  		movea.l	$3C(a0),a1
000193B8 7000                       		moveq	#0,d0
000193BA 1028 003A                  		move.b	$3A(a0),d0
000193BE 9029 003A                  		sub.b	$3A(a1),d0
000193C2 6700                       		beq.s	loc_18E2A
000193C4 6400                       		bcc.s	loc_18DDA
000193C6 4400                       		neg.b	d0
000193C8                            
000193C8                            loc_18DDA:
000193C8 323C F7E8                  		move.w	#-$818,d1
000193CC 343C FEEC                  		move.w	#-$114,d2
000193D0 0C00 0001                  		cmpi.b	#1,d0
000193D4 6700                       		beq.s	loc_18E00
000193D6 323C F6A0                  		move.w	#-$960,d1
000193DA 343C FF0C                  		move.w	#-$F4,d2
000193DE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000193E4 6D00                       		blt.s	loc_18E00
000193E6 323C F5E0                  		move.w	#-$A20,d1
000193EA 343C FF80                  		move.w	#-$80,d2
000193EE                            
000193EE                            loc_18E00:
000193EE 3141 0012                  		move.w	d1,$12(a0)
000193F2 3142 0010                  		move.w	d2,$10(a0)
000193F6 3028 0008                  		move.w	8(a0),d0
000193FA 9068 0030                  		sub.w	$30(a0),d0
000193FE 6400                       		bcc.s	loc_18E16
00019400 4468 0010                  		neg.w	$10(a0)
00019404                            
00019404                            loc_18E16:
00019404 117C 0001 001A             		move.b	#1,$1A(a0)
0001940A 317C 0020 0028             		move.w	#$20,$28(a0)
00019410 5428 0024                  		addq.b	#2,$24(a0)
00019414 6000 0000                  		bra.w	loc_18EAA
00019418                            ; ===========================================================================
00019418                            
00019418                            loc_18E2A:				; XREF: loc_18DC6
00019418 45F9 0000 0000             		lea	(word_19018).l,a2
0001941E 7000                       		moveq	#0,d0
00019420 1029 001A                  		move.b	$1A(a1),d0
00019424 343C 0028                  		move.w	#$28,d2
00019428 3228 0008                  		move.w	8(a0),d1
0001942C 9268 0030                  		sub.w	$30(a0),d1
00019430 6400                       		bcc.s	loc_18E48
00019432 4442                       		neg.w	d2
00019434 5440                       		addq.w	#2,d0
00019436                            
00019436                            loc_18E48:
00019436 D040                       		add.w	d0,d0
00019438 3228 0034                  		move.w	$34(a0),d1
0001943C D272 0000                  		add.w	(a2,d0.w),d1
00019440 3141 000C                  		move.w	d1,$C(a0)
00019444 D468 0030                  		add.w	$30(a0),d2
00019448 3142 0008                  		move.w	d2,8(a0)
0001944C 4268 000E                  		clr.w	$E(a0)
00019450 4268 000A                  		clr.w	$A(a0)
00019454 5368 0028                  		subq.w	#1,$28(a0)
00019458 6600                       		bne.s	loc_18E7A
0001945A 317C 0020 0028             		move.w	#$20,$28(a0)
00019460 117C 0008 0024             		move.b	#8,$24(a0)
00019466 4E75                       		rts	
00019468                            ; ===========================================================================
00019468                            
00019468                            loc_18E7A:
00019468 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001946E 6600                       		bne.s	loc_18E88
00019470 117C 0005 001F             		move.b	#5,$1F(a0)
00019476                            
00019476                            loc_18E88:
00019476 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001947C 6600                       		bne.s	loc_18E96
0001947E 117C 0002 001F             		move.b	#2,$1F(a0)
00019484                            
00019484                            loc_18E96:
00019484 5328 001E                  		subq.b	#1,$1E(a0)
00019488 6E00                       		bgt.s	locret_18EA8
0001948A 0868 0000 001A             		bchg	#0,$1A(a0)
00019490 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019496                            
00019496                            locret_18EA8:
00019496 4E75                       		rts	
00019498                            ; ===========================================================================
00019498                            
00019498                            loc_18EAA:				; XREF: Obj7B_Index
00019498 43F8 D040                  		lea	($FFFFD040).w,a1
0001949C 707A                       		moveq	#$7A,d0
0001949E 7240                       		moveq	#$40,d1
000194A0 743E                       		moveq	#$3E,d2
000194A2                            
000194A2                            loc_18EB4:
000194A2 B011                       		cmp.b	(a1),d0
000194A4 6700                       		beq.s	loc_18EC0
000194A6 D2C1                       		adda.w	d1,a1
000194A8 51CA FFF8                  		dbf	d2,loc_18EB4
000194AC                            
000194AC 6000                       		bra.s	loc_18F38
000194AE                            ; ===========================================================================
000194AE                            
000194AE                            loc_18EC0:
000194AE 3029 0008                  		move.w	8(a1),d0
000194B2 3229 000C                  		move.w	$C(a1),d1
000194B6 3428 0008                  		move.w	8(a0),d2
000194BA 3628 000C                  		move.w	$C(a0),d3
000194BE 45FA 0000                  		lea	byte_19022(pc),a2
000194C2 47FA 0000                  		lea	byte_19026(pc),a3
000194C6 181A                       		move.b	(a2)+,d4
000194C8 4884                       		ext.w	d4
000194CA D044                       		add.w	d4,d0
000194CC 181B                       		move.b	(a3)+,d4
000194CE 4884                       		ext.w	d4
000194D0 D444                       		add.w	d4,d2
000194D2 B440                       		cmp.w	d0,d2
000194D4 6500                       		bcs.s	loc_18F38
000194D6 181A                       		move.b	(a2)+,d4
000194D8 4884                       		ext.w	d4
000194DA D044                       		add.w	d4,d0
000194DC 181B                       		move.b	(a3)+,d4
000194DE 4884                       		ext.w	d4
000194E0 D444                       		add.w	d4,d2
000194E2 B042                       		cmp.w	d2,d0
000194E4 6500                       		bcs.s	loc_18F38
000194E6 181A                       		move.b	(a2)+,d4
000194E8 4884                       		ext.w	d4
000194EA D244                       		add.w	d4,d1
000194EC 181B                       		move.b	(a3)+,d4
000194EE 4884                       		ext.w	d4
000194F0 D644                       		add.w	d4,d3
000194F2 B641                       		cmp.w	d1,d3
000194F4 6500                       		bcs.s	loc_18F38
000194F6 181A                       		move.b	(a2)+,d4
000194F8 4884                       		ext.w	d4
000194FA D244                       		add.w	d4,d1
000194FC 181B                       		move.b	(a3)+,d4
000194FE 4884                       		ext.w	d4
00019500 D644                       		add.w	d4,d3
00019502 B243                       		cmp.w	d3,d1
00019504 6500                       		bcs.s	loc_18F38
00019506 5428 0024                  		addq.b	#2,$24(a0)
0001950A 4268 0028                  		clr.w	$28(a0)
0001950E 4229 0020                  		clr.b	$20(a1)
00019512 5329 0021                  		subq.b	#1,$21(a1)
00019516 6600                       		bne.s	loc_18F38
00019518 08E9 0007 0022             		bset	#7,$22(a1)
0001951E 4268 0010                  		clr.w	$10(a0)
00019522 4268 0012                  		clr.w	$12(a0)
00019526                            
00019526                            loc_18F38:
00019526 4A68 0012                  		tst.w	$12(a0)
0001952A 6A00                       		bpl.s	loc_18F5C
0001952C 4EB9 0000 DB62             		jsr	ObjectFall
00019532 3028 0034                  		move.w	$34(a0),d0
00019536 0440 002F                  		subi.w	#$2F,d0
0001953A B068 000C                  		cmp.w	$C(a0),d0
0001953E 6E00                       		bgt.s	loc_18F58
00019540 4EB9 0000 DB62             		jsr	ObjectFall
00019546                            
00019546                            loc_18F58:
00019546 6000 FF20                  		bra.w	loc_18E7A
0001954A                            ; ===========================================================================
0001954A                            
0001954A                            loc_18F5C:
0001954A 4EB9 0000 DB62             		jsr	ObjectFall
00019550 2268 003C                  		movea.l	$3C(a0),a1
00019554 45F9 0000 0000             		lea	(word_19018).l,a2
0001955A 7000                       		moveq	#0,d0
0001955C 1029 001A                  		move.b	$1A(a1),d0
00019560 3228 0008                  		move.w	8(a0),d1
00019564 9268 0030                  		sub.w	$30(a0),d1
00019568 6400                       		bcc.s	loc_18F7E
0001956A 5440                       		addq.w	#2,d0
0001956C                            
0001956C                            loc_18F7E:
0001956C D040                       		add.w	d0,d0
0001956E 3228 0034                  		move.w	$34(a0),d1
00019572 D272 0000                  		add.w	(a2,d0.w),d1
00019576 B268 000C                  		cmp.w	$C(a0),d1
0001957A 6ECA                       		bgt.s	loc_18F58
0001957C 2268 003C                  		movea.l	$3C(a0),a1
00019580 7202                       		moveq	#2,d1
00019582 4A68 0010                  		tst.w	$10(a0)
00019586 6B00                       		bmi.s	loc_18F9C
00019588 7200                       		moveq	#0,d1
0001958A                            
0001958A                            loc_18F9C:
0001958A 317C 0000 0028             		move.w	#0,$28(a0)
00019590                            
00019590                            loc_18FA2:
00019590 1341 003A                  		move.b	d1,$3A(a1)
00019594 1141 003A                  		move.b	d1,$3A(a0)
00019598 B229 001A                  		cmp.b	$1A(a1),d1
0001959C 6700                       		beq.s	loc_19008
0001959E 08A9 0003 0022             		bclr	#3,$22(a1)
000195A4 6700                       		beq.s	loc_19008
000195A6 4229 0025                  		clr.b	$25(a1)
000195AA 137C 0002 0024             		move.b	#2,$24(a1)
000195B0 45F8 D000                  		lea	($FFFFD000).w,a2
000195B4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000195BA 446A 0012                  		neg.w	$12(a2)
000195BE 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195C4 6600                       		bne.s	loc_18FDC
000195C6 E0EA 0012                  		asr	$12(a2)
000195CA                            
000195CA                            loc_18FDC:
000195CA 08EA 0001 0022             		bset	#1,$22(a2)
000195D0 08AA 0003 0022             		bclr	#3,$22(a2)
000195D6 422A 003C                  		clr.b	$3C(a2)
000195DA 2F08                       		move.l	a0,-(sp)
000195DC 41D2                       		lea	(a2),a0
000195DE 4EBA A3BA                  		jsr	Obj01_ChkRoll
000195E2 205F                       		movea.l	(sp)+,a0
000195E4 157C 0002 0024             		move.b	#2,$24(a2)
000195EA 303C 00CC                  		move.w	#$CC,d0
000195EE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
000195F4                            
000195F4                            loc_19008:
000195F4 4268 0010                  		clr.w	$10(a0)
000195F8 4268 0012                  		clr.w	$12(a0)
000195FC 5428 0024                  		addq.b	#2,$24(a0)
00019600 6000 FE66                  		bra.w	loc_18E7A
00019604                            ; ===========================================================================
00019604 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001960E                            		even
0001960E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019612                            		even
00019612 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019616                            		even
00019616                            ; ===========================================================================
00019616                            
00019616                            Obj7B_Explode:				; XREF: Obj7B_Index
00019616 10BC 003F                  		move.b	#$3F,(a0)
0001961A 4228 0024                  		clr.b	$24(a0)
0001961E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019624 6700                       		beq.s	Obj7B_MakeFrag
00019626 4E75                       		rts	
00019628                            ; ===========================================================================
00019628                            
00019628                            Obj7B_MakeFrag:
00019628 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001962E 7203                       		moveq	#3,d1
00019630 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019634                            
00019634                            Obj7B_Loop:
00019634 4EB9 0000 E03A             		jsr	SingleObjLoad
0001963A 6600                       		bne.s	loc_1909A
0001963C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019640 137C 000A 0024             		move.b	#$A,$24(a1)
00019646 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001964E 137C 0003 0018             		move.b	#3,$18(a1)
00019654 337C 0518 0002             		move.w	#$518,2(a1)
0001965A 3368 0008 0008             		move.w	8(a0),8(a1)
00019660 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019666 335A 0010                  		move.w	(a2)+,$10(a1)
0001966A 335A 0012                  		move.w	(a2)+,$12(a1)
0001966E 137C 0098 0020             		move.b	#$98,$20(a1)
00019674 0029 0004 0001             		ori.b	#4,1(a1)
0001967A 08E9 0007 0001             		bset	#7,1(a1)
00019680 137C 000C 0019             		move.b	#$C,$19(a1)
00019686                            
00019686                            loc_1909A:
00019686 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001968A                            
0001968A 4E75                       		rts	
0001968C                            ; ===========================================================================
0001968C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019690 FF60 FDC0                  		dc.w $FF60, $FDC0
00019694 0100 FCC0                  		dc.w $100, $FCC0
00019698 00A0 FDC0                  		dc.w $A0, $FDC0
0001969C                            ; ===========================================================================
0001969C                            
0001969C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001969C 4EB9 0000 DB8E             		jsr	SpeedToPos
000196A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000196A8 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196AE 0668 0018 0012             		addi.w	#$18,$12(a0)
000196B4 7004                       		moveq	#4,d0
000196B6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000196BA E448                       		lsr.w	#2,d0
000196BC 1140 001A                  		move.b	d0,$1A(a0)
000196C0 4A28 0001                  		tst.b	1(a0)
000196C4 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196C8 4E75                       		rts	
000196CA                            ; ===========================================================================
000196CA                            ; ---------------------------------------------------------------------------
000196CA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196CA                            ; ---------------------------------------------------------------------------
000196CA                            Map_obj7B:
000196CA                            	include "_maps\obj7B.asm"
000196CA                            ; ---------------------------------------------------------------------------
000196CA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196CA                            ; ---------------------------------------------------------------------------
000196CA 0000                       		dc.w byte_190E2-Map_obj7B
000196CC 0000                       		dc.w byte_190E8-Map_obj7B
000196CE 01                         byte_190E2:	dc.b 1
000196CF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196D4 01                         byte_190E8:	dc.b 1
000196D5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196DA                            		even
000196DA                            		even
000196DA                            
000196DA                            ; ===========================================================================
000196DA                            ; ---------------------------------------------------------------------------
000196DA                            ; Object 75 - Eggman (SYZ)
000196DA                            ; ---------------------------------------------------------------------------
000196DA                            
000196DA                            Obj75:					; XREF: Obj_Index
000196DA 7000                       		moveq	#0,d0
000196DC 1028 0024                  		move.b	$24(a0),d0
000196E0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000196E4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000196E8                            ; ===========================================================================
000196E8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000196EA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000196EC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000196EE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000196F0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000196F2                            
000196F2 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000196F5 0401 05                    		dc.b 4,	1, 5
000196F8 0607 05                    		dc.b 6,	7, 5
000196FB 0800 05                    		dc.b 8,	0, 5
000196FE                            ; ===========================================================================
000196FE                            
000196FE                            Obj75_Main:				; XREF: Obj75_Index
000196FE 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019704 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001970A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019710 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019716 117C 000F 0020             		move.b	#$F,$20(a0)
0001971C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019722 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019726 2248                       		movea.l	a0,a1
00019728 7203                       		moveq	#3,d1
0001972A 6000                       		bra.s	Obj75_LoadBoss
0001972C                            ; ===========================================================================
0001972C                            
0001972C                            Obj75_Loop:
0001972C 4EB9 0000 E050             		jsr	SingleObjLoad2
00019732 6600                       		bne.s	Obj75_ShipMain
00019734 12BC 0075                  		move.b	#$75,(a1)
00019738 3368 0008 0008             		move.w	8(a0),8(a1)
0001973E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019744                            
00019744                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019744 08A8 0000 0022             		bclr	#0,$22(a0)
0001974A 4229 0025                  		clr.b	$25(a1)
0001974E 135A 0024                  		move.b	(a2)+,$24(a1)
00019752 135A 001C                  		move.b	(a2)+,$1C(a1)
00019756 135A 0018                  		move.b	(a2)+,$18(a1)
0001975A 237C 0001 8302 0004        		move.l	#Map_Eggman,4(a1)
00019762 337C 0400 0002             		move.w	#$400,2(a1)
00019768 137C 0004 0001             		move.b	#4,1(a1)
0001976E 137C 0020 0019             		move.b	#$20,$19(a1)
00019774 2348 0034                  		move.l	a0,$34(a1)
00019778 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001977C                            
0001977C                            Obj75_ShipMain:				; XREF: Obj75_Index
0001977C 7000                       		moveq	#0,d0
0001977E 1028 0025                  		move.b	$25(a0),d0
00019782 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019786 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001978A 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
00019790 4EB9 0000 AC66             		jsr	AnimateSprite
00019796 7003                       		moveq	#3,d0
00019798 C028 0022                  		and.b	$22(a0),d0
0001979C 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197A2 8128 0001                  		or.b	d0,1(a0)
000197A6 4EF9 0000 DBB4             		jmp	DisplaySprite
000197AC                            ; ===========================================================================
000197AC 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197B0 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000197B4 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000197B8                            ; ===========================================================================
000197B8                            
000197B8                            loc_191CC:				; XREF: Obj75_ShipIndex
000197B8 317C FF00 0010             		move.w	#-$100,$10(a0)
000197BE 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197C4 6400                       		bcc.s	loc_191DE
000197C6 5428 0025                  		addq.b	#2,$25(a0)
000197CA                            
000197CA                            loc_191DE:
000197CA 1028 003F                  		move.b	$3F(a0),d0
000197CE 5428 003F                  		addq.b	#2,$3F(a0)
000197D2 4EB9 0000 2C22             		jsr	(CalcSine).l
000197D8 E440                       		asr.w	#2,d0
000197DA 3140 0012                  		move.w	d0,$12(a0)
000197DE                            
000197DE                            loc_191F2:
000197DE 6100 E6C2                  		bsr.w	BossMove
000197E2 3168 0038 000C             		move.w	$38(a0),$C(a0)
000197E8 3168 0030 0008             		move.w	$30(a0),8(a0)
000197EE                            
000197EE                            loc_19202:
000197EE 3028 0008                  		move.w	8(a0),d0
000197F2 0440 2C00                  		subi.w	#$2C00,d0
000197F6 EA48                       		lsr.w	#5,d0
000197F8 1140 0034                  		move.b	d0,$34(a0)
000197FC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019802 6400                       		bcc.s	locret_19256
00019804 4A28 0022                  		tst.b	$22(a0)
00019808 6B00                       		bmi.s	loc_19258
0001980A 4A28 0020                  		tst.b	$20(a0)
0001980E 6600                       		bne.s	locret_19256
00019810 4A28 003E                  		tst.b	$3E(a0)
00019814 6600                       		bne.s	loc_1923A
00019816 117C 0020 003E             		move.b	#$20,$3E(a0)
0001981C 303C 00AC                  		move.w	#$AC,d0
00019820 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019826                            
00019826                            loc_1923A:
00019826 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001982A 7000                       		moveq	#0,d0
0001982C 4A51                       		tst.w	(a1)
0001982E 6600                       		bne.s	loc_19248
00019830 303C 0EEE                  		move.w	#$EEE,d0
00019834                            
00019834                            loc_19248:
00019834 3280                       		move.w	d0,(a1)
00019836 5328 003E                  		subq.b	#1,$3E(a0)
0001983A 6600                       		bne.s	locret_19256
0001983C 117C 000F 0020             		move.b	#$F,$20(a0)
00019842                            
00019842                            locret_19256:
00019842 4E75                       		rts	
00019844                            ; ===========================================================================
00019844                            
00019844                            loc_19258:				; XREF: loc_19202
00019844 7064                       		moveq	#100,d0
00019846 6100 0000                  		bsr.w	AddPoints
0001984A 117C 0006 0025             		move.b	#6,$25(a0)
00019850 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019856 4268 0010                  		clr.w	$10(a0)
0001985A 4E75                       		rts	
0001985C                            ; ===========================================================================
0001985C                            
0001985C                            loc_19270:				; XREF: Obj75_ShipIndex
0001985C 3028 0030                  		move.w	$30(a0),d0
00019860 317C 0140 0010             		move.w	#$140,$10(a0)
00019866 0828 0000 0022             		btst	#0,$22(a0)
0001986C 6600                       		bne.s	loc_1928E
0001986E 4468 0010                  		neg.w	$10(a0)
00019872 0C40 2C08                  		cmpi.w	#$2C08,d0
00019876 6E00                       		bgt.s	loc_1929E
00019878 6000                       		bra.s	loc_19294
0001987A                            ; ===========================================================================
0001987A                            
0001987A                            loc_1928E:
0001987A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001987E 6D00                       		blt.s	loc_1929E
00019880                            
00019880                            loc_19294:
00019880 0868 0000 0022             		bchg	#0,$22(a0)
00019886 4228 003D                  		clr.b	$3D(a0)
0001988A                            
0001988A                            loc_1929E:
0001988A 0440 2C10                  		subi.w	#$2C10,d0
0001988E 0240 001F                  		andi.w	#$1F,d0
00019892 0440 001F                  		subi.w	#$1F,d0
00019896 6A00                       		bpl.s	loc_192AE
00019898 4440                       		neg.w	d0
0001989A                            
0001989A                            loc_192AE:
0001989A 5340                       		subq.w	#1,d0
0001989C 6E00                       		bgt.s	loc_192E8
0001989E 4A28 003D                  		tst.b	$3D(a0)
000198A2 6600                       		bne.s	loc_192E8
000198A4 3238 D008                  		move.w	($FFFFD008).w,d1
000198A8 0441 2C00                  		subi.w	#$2C00,d1
000198AC EA41                       		asr.w	#5,d1
000198AE B228 0034                  		cmp.b	$34(a0),d1
000198B2 6600                       		bne.s	loc_192E8
000198B4 7000                       		moveq	#0,d0
000198B6 1028 0034                  		move.b	$34(a0),d0
000198BA EB40                       		asl.w	#5,d0
000198BC 0640 2C10                  		addi.w	#$2C10,d0
000198C0 3140 0030                  		move.w	d0,$30(a0)
000198C4 6100 0000                  		bsr.w	Obj75_FindBlocks
000198C8 5428 0025                  		addq.b	#2,$25(a0)
000198CC 4268 0028                  		clr.w	$28(a0)
000198D0 4268 0010                  		clr.w	$10(a0)
000198D4                            
000198D4                            loc_192E8:
000198D4 6000 FEF4                  		bra.w	loc_191DE
000198D8                            ; ===========================================================================
000198D8                            
000198D8                            loc_192EC:				; XREF: Obj75_ShipIndex
000198D8 7000                       		moveq	#0,d0
000198DA 1028 0028                  		move.b	$28(a0),d0
000198DE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000198E2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000198E6                            ; ===========================================================================
000198E6 0000                       off_192FA:	dc.w loc_19302-off_192FA
000198E8 0000                       		dc.w loc_19348-off_192FA
000198EA 0000                       		dc.w loc_1938E-off_192FA
000198EC 0000                       		dc.w loc_193D0-off_192FA
000198EE                            ; ===========================================================================
000198EE                            
000198EE                            loc_19302:				; XREF: off_192FA
000198EE 317C 0180 0012             		move.w	#$180,$12(a0)
000198F4 3028 0038                  		move.w	$38(a0),d0
000198F8 0C40 0556                  		cmpi.w	#$556,d0
000198FC 6500                       		bcs.s	loc_19344
000198FE 317C 0556 0038             		move.w	#$556,$38(a0)
00019904 4268 003C                  		clr.w	$3C(a0)
00019908 70FF                       		moveq	#-1,d0
0001990A 3028 0036                  		move.w	$36(a0),d0
0001990E 6700                       		beq.s	loc_1933C
00019910 2240                       		movea.l	d0,a1
00019912 137C 00FF 0029             		move.b	#-1,$29(a1)
00019918 117C 00FF 0029             		move.b	#-1,$29(a0)
0001991E 2348 0034                  		move.l	a0,$34(a1)
00019922 317C 0032 003C             		move.w	#$32,$3C(a0)
00019928                            
00019928                            loc_1933C:
00019928 4268 0012                  		clr.w	$12(a0)
0001992C 5428 0028                  		addq.b	#2,$28(a0)
00019930                            
00019930                            loc_19344:
00019930 6000 FEAC                  		bra.w	loc_191F2
00019934                            ; ===========================================================================
00019934                            
00019934                            loc_19348:				; XREF: off_192FA
00019934 5368 003C                  		subq.w	#1,$3C(a0)
00019938 6A00                       		bpl.s	loc_19366
0001993A 5428 0028                  		addq.b	#2,$28(a0)
0001993E 317C F800 0012             		move.w	#-$800,$12(a0)
00019944 4A68 0036                  		tst.w	$36(a0)
00019948 6600                       		bne.s	loc_19362
0001994A E0E8 0012                  		asr	$12(a0)
0001994E                            
0001994E                            loc_19362:
0001994E 7000                       		moveq	#0,d0
00019950 6000                       		bra.s	loc_1937C
00019952                            ; ===========================================================================
00019952                            
00019952                            loc_19366:
00019952 7000                       		moveq	#0,d0
00019954 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001995A 6E00                       		bgt.s	loc_1937C
0001995C 7002                       		moveq	#2,d0
0001995E 0828 0001 003D             		btst	#1,$3D(a0)
00019964 6700                       		beq.s	loc_1937C
00019966 4440                       		neg.w	d0
00019968                            
00019968                            loc_1937C:
00019968 D068 0038                  		add.w	$38(a0),d0
0001996C 3140 000C                  		move.w	d0,$C(a0)
00019970 3168 0030 0008             		move.w	$30(a0),8(a0)
00019976 6000 FE76                  		bra.w	loc_19202
0001997A                            ; ===========================================================================
0001997A                            
0001997A                            loc_1938E:				; XREF: off_192FA
0001997A 303C 04DA                  		move.w	#$4DA,d0
0001997E 4A68 0036                  		tst.w	$36(a0)
00019982 6700                       		beq.s	loc_1939C
00019984 0440 0018                  		subi.w	#$18,d0
00019988                            
00019988                            loc_1939C:
00019988 B068 0038                  		cmp.w	$38(a0),d0
0001998C 6D00                       		blt.s	loc_193BE
0001998E 317C 0008 003C             		move.w	#8,$3C(a0)
00019994 4A68 0036                  		tst.w	$36(a0)
00019998 6700                       		beq.s	loc_193B4
0001999A 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199A0                            
000199A0                            loc_193B4:
000199A0 5428 0028                  		addq.b	#2,$28(a0)
000199A4 4268 0012                  		clr.w	$12(a0)
000199A8 6000                       		bra.s	loc_193CC
000199AA                            ; ===========================================================================
000199AA                            
000199AA                            loc_193BE:
000199AA 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199B0 6C00                       		bge.s	loc_193CC
000199B2 0668 000C 0012             		addi.w	#$C,$12(a0)
000199B8                            
000199B8                            loc_193CC:
000199B8 6000 FE24                  		bra.w	loc_191F2
000199BC                            ; ===========================================================================
000199BC                            
000199BC                            loc_193D0:				; XREF: off_192FA
000199BC 5368 003C                  		subq.w	#1,$3C(a0)
000199C0 6E00                       		bgt.s	loc_19406
000199C2 6B00                       		bmi.s	loc_193EE
000199C4 70FF                       		moveq	#-1,d0
000199C6 3028 0036                  		move.w	$36(a0),d0
000199CA 6700                       		beq.s	loc_193E8
000199CC 2240                       		movea.l	d0,a1
000199CE 137C 000A 0029             		move.b	#$A,$29(a1)
000199D4                            
000199D4                            loc_193E8:
000199D4 4268 0036                  		clr.w	$36(a0)
000199D8 6000                       		bra.s	loc_19406
000199DA                            ; ===========================================================================
000199DA                            
000199DA                            loc_193EE:
000199DA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000199E0 6600                       		bne.s	loc_19406
000199E2 4228 0029                  		clr.b	$29(a0)
000199E6 5528 0025                  		subq.b	#2,$25(a0)
000199EA 117C 00FF 003D             		move.b	#-1,$3D(a0)
000199F0 6000                       		bra.s	loc_19446
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            loc_19406:
000199F2 7001                       		moveq	#1,d0
000199F4 4A68 0036                  		tst.w	$36(a0)
000199F8 6700                       		beq.s	loc_19410
000199FA 7002                       		moveq	#2,d0
000199FC                            
000199FC                            loc_19410:
000199FC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A02 6700                       		beq.s	loc_19424
00019A04 6D00                       		blt.s	loc_1941C
00019A06 4440                       		neg.w	d0
00019A08                            
00019A08                            loc_1941C:
00019A08 4A68 0036                  		tst.w	$36(a0)
00019A0C D168 0038                  		add.w	d0,$38(a0)
00019A10                            
00019A10                            loc_19424:
00019A10 7000                       		moveq	#0,d0
00019A12 4A68 0036                  		tst.w	$36(a0)
00019A16 6700                       		beq.s	loc_19438
00019A18 7002                       		moveq	#2,d0
00019A1A 0828 0000 003D             		btst	#0,$3D(a0)
00019A20 6700                       		beq.s	loc_19438
00019A22 4440                       		neg.w	d0
00019A24                            
00019A24                            loc_19438:
00019A24 D068 0038                  		add.w	$38(a0),d0
00019A28 3140 000C                  		move.w	d0,$C(a0)
00019A2C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A32                            
00019A32                            loc_19446:
00019A32 6000 FDBA                  		bra.w	loc_19202
00019A36                            
00019A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A36                            
00019A36                            
00019A36                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A36 4268 0036                  		clr.w	$36(a0)
00019A3A 43F8 D040                  		lea	($FFFFD040).w,a1
00019A3E 703E                       		moveq	#$3E,d0
00019A40 7276                       		moveq	#$76,d1
00019A42 1428 0034                  		move.b	$34(a0),d2
00019A46                            
00019A46                            Obj75_FindLoop:
00019A46 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A48 6600                       		bne.s	loc_1946A	; if not, branch
00019A4A B429 0028                  		cmp.b	$28(a1),d2
00019A4E 6600                       		bne.s	loc_1946A
00019A50 3149 0036                  		move.w	a1,$36(a0)
00019A54 6000                       		bra.s	locret_19472
00019A56                            ; ===========================================================================
00019A56                            
00019A56                            loc_1946A:
00019A56 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A5A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A5E                            
00019A5E                            locret_19472:
00019A5E 4E75                       		rts	
00019A60                            ; End of function Obj75_FindBlocks
00019A60                            
00019A60                            ; ===========================================================================
00019A60                            
00019A60                            loc_19474:				; XREF: Obj75_ShipIndex
00019A60 5368 003C                  		subq.w	#1,$3C(a0)
00019A64 6B00                       		bmi.s	loc_1947E
00019A66 6000 E3F8                  		bra.w	BossDefeated
00019A6A                            ; ===========================================================================
00019A6A                            
00019A6A                            loc_1947E:
00019A6A 5428 0025                  		addq.b	#2,$25(a0)
00019A6E 4268 0012                  		clr.w	$12(a0)
00019A72 08E8 0000 0022             		bset	#0,$22(a0)
00019A78 08A8 0007 0022             		bclr	#7,$22(a0)
00019A7E 4268 0010                  		clr.w	$10(a0)
00019A82 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019A88 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019A8C 6600                       		bne.s	loc_194A8
00019A8E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019A94                            
00019A94                            loc_194A8:
00019A94 6000 FD58                  		bra.w	loc_19202
00019A98                            ; ===========================================================================
00019A98                            
00019A98                            loc_194AC:				; XREF: Obj75_ShipIndex
00019A98 5268 003C                  		addq.w	#1,$3C(a0)
00019A9C 6700                       		beq.s	loc_194BC
00019A9E 6A00                       		bpl.s	loc_194C2
00019AA0 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AA6 6000                       		bra.s	loc_194EE
00019AA8                            ; ===========================================================================
00019AA8                            
00019AA8                            loc_194BC:
00019AA8 4268 0012                  		clr.w	$12(a0)
00019AAC 6000                       		bra.s	loc_194EE
00019AAE                            ; ===========================================================================
00019AAE                            
00019AAE                            loc_194C2:
00019AAE 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019AB4 6500                       		bcs.s	loc_194DA
00019AB6 6700                       		beq.s	loc_194E0
00019AB8 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019ABE 6500                       		bcs.s	loc_194EE
00019AC0 5428 0025                  		addq.b	#2,$25(a0)
00019AC4 6000                       		bra.s	loc_194EE
00019AC6                            ; ===========================================================================
00019AC6                            
00019AC6                            loc_194DA:
00019AC6 5168 0012                  		subq.w	#8,$12(a0)
00019ACA 6000                       		bra.s	loc_194EE
00019ACC                            ; ===========================================================================
00019ACC                            
00019ACC                            loc_194E0:
00019ACC 4268 0012                  		clr.w	$12(a0)
00019AD0 303C 0085                  		move.w	#$85,d0
00019AD4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019ADA                            
00019ADA                            loc_194EE:
00019ADA 6000 FD02                  		bra.w	loc_191F2
00019ADE                            ; ===========================================================================
00019ADE                            
00019ADE                            loc_194F2:				; XREF: Obj75_ShipIndex
00019ADE 317C 0400 0010             		move.w	#$400,$10(a0)
00019AE4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019AEA 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019AF0 6400                       		bcc.s	loc_1950C
00019AF2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AF6 6000                       		bra.s	loc_19512
00019AF8                            ; ===========================================================================
00019AF8                            
00019AF8                            loc_1950C:
00019AF8 4A28 0001                  		tst.b	1(a0)
00019AFC 6A00                       		bpl.s	Obj75_ShipDelete
00019AFE                            
00019AFE                            loc_19512:
00019AFE 6100 E3A2                  		bsr.w	BossMove
00019B02 6000 FCC6                  		bra.w	loc_191DE
00019B06                            ; ===========================================================================
00019B06                            
00019B06                            Obj75_ShipDelete:
00019B06 4EF9 0000 DBF0             		jmp	DeleteObject
00019B0C                            ; ===========================================================================
00019B0C                            
00019B0C                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B0C 7201                       		moveq	#1,d1
00019B0E 2268 0034                  		movea.l	$34(a0),a1
00019B12 7000                       		moveq	#0,d0
00019B14 1029 0025                  		move.b	$25(a1),d0
00019B18 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B1C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B20 1141 001C                  		move.b	d1,$1C(a0)
00019B24 1010                       		move.b	(a0),d0
00019B26 B011                       		cmp.b	(a1),d0
00019B28 6600                       		bne.s	Obj75_FaceDelete
00019B2A 6000                       		bra.s	loc_195BE
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C                            Obj75_FaceDelete:
00019B2C 4EF9 0000 DBF0             		jmp	DeleteObject
00019B32                            ; ===========================================================================
00019B32 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B36 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B3A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B3E                            ; ===========================================================================
00019B3E                            
00019B3E                            loc_19552:				; XREF: off_19546
00019B3E 720A                       		moveq	#$A,d1
00019B40 4E75                       		rts	
00019B42                            ; ===========================================================================
00019B42                            
00019B42                            loc_19556:				; XREF: off_19546
00019B42 7206                       		moveq	#6,d1
00019B44 4E75                       		rts	
00019B46                            ; ===========================================================================
00019B46                            
00019B46                            loc_1955A:				; XREF: off_19546
00019B46 7000                       		moveq	#0,d0
00019B48 1029 0028                  		move.b	$28(a1),d0
00019B4C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B50 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B54                            ; ===========================================================================
00019B54 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B58 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B5C                            ; ===========================================================================
00019B5C                            
00019B5C                            loc_19570:				; XREF: off_19568
00019B5C 6000                       		bra.s	loc_19574
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_19572:				; XREF: off_19568
00019B5E 7206                       		moveq	#6,d1
00019B60                            
00019B60                            loc_19574:				; XREF: off_19546
00019B60 4A29 0020                  		tst.b	$20(a1)
00019B64 6600                       		bne.s	loc_1957E
00019B66 7205                       		moveq	#5,d1
00019B68 4E75                       		rts	
00019B6A                            ; ===========================================================================
00019B6A                            
00019B6A                            loc_1957E:
00019B6A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B70 6500                       		bcs.s	locret_19588
00019B72 7204                       		moveq	#4,d1
00019B74                            
00019B74                            locret_19588:
00019B74 4E75                       		rts	
00019B76                            ; ===========================================================================
00019B76                            
00019B76                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B76 117C 0007 001C             		move.b	#7,$1C(a0)
00019B7C 2268 0034                  		movea.l	$34(a0),a1
00019B80 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019B86 6600                       		bne.s	loc_195AA
00019B88 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B8E 4A28 0001                  		tst.b	1(a0)
00019B92 6A00                       		bpl.s	Obj75_FlameDelete
00019B94 6000                       		bra.s	loc_195B6
00019B96                            ; ===========================================================================
00019B96                            
00019B96                            loc_195AA:
00019B96 4A69 0010                  		tst.w	$10(a1)
00019B9A 6700                       		beq.s	loc_195B6
00019B9C 117C 0008 001C             		move.b	#8,$1C(a0)
00019BA2                            
00019BA2                            loc_195B6:
00019BA2 6000                       		bra.s	loc_195BE
00019BA4                            ; ===========================================================================
00019BA4                            
00019BA4                            Obj75_FlameDelete:
00019BA4 4EF9 0000 DBF0             		jmp	DeleteObject
00019BAA                            ; ===========================================================================
00019BAA                            
00019BAA                            loc_195BE:
00019BAA 43F9 0001 82B2             		lea	(Ani_Eggman).l,a1
00019BB0 4EB9 0000 AC66             		jsr	AnimateSprite
00019BB6 2268 0034                  		movea.l	$34(a0),a1
00019BBA 3169 0008 0008             		move.w	8(a1),8(a0)
00019BC0 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BC6                            
00019BC6                            loc_195DA:
00019BC6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BCC 7003                       		moveq	#3,d0
00019BCE C028 0022                  		and.b	$22(a0),d0
00019BD2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BD8 8128 0001                  		or.b	d0,1(a0)
00019BDC 4EF9 0000 DBB4             		jmp	DisplaySprite
00019BE2                            ; ===========================================================================
00019BE2                            
00019BE2                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019BE2 217C 0001 83CA 0004        		move.l	#Map_BossItems,4(a0)
00019BEA 317C 246C 0002             		move.w	#$246C,2(a0)
00019BF0 117C 0005 001A             		move.b	#5,$1A(a0)
00019BF6 2268 0034                  		movea.l	$34(a0),a1
00019BFA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C00 6600                       		bne.s	loc_1961C
00019C02 4A28 0001                  		tst.b	1(a0)
00019C06 6A00                       		bpl.s	Obj75_SpikeDelete
00019C08                            
00019C08                            loc_1961C:
00019C08 3169 0008 0008             		move.w	8(a1),8(a0)
00019C0E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C14 3028 003C                  		move.w	$3C(a0),d0
00019C18 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C1E 6600                       		bne.s	loc_19652
00019C20 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C26 6700                       		beq.s	loc_1964C
00019C28 4A29 0028                  		tst.b	$28(a1)
00019C2C 6600                       		bne.s	loc_19658
00019C2E 0C40 0094                  		cmpi.w	#$94,d0
00019C32 6C00                       		bge.s	loc_19658
00019C34 5E40                       		addq.w	#7,d0
00019C36 6000                       		bra.s	loc_19658
00019C38                            ; ===========================================================================
00019C38                            
00019C38                            loc_1964C:
00019C38 4A69 003C                  		tst.w	$3C(a1)
00019C3C 6A00                       		bpl.s	loc_19658
00019C3E                            
00019C3E                            loc_19652:
00019C3E 4A40                       		tst.w	d0
00019C40 6F00                       		ble.s	loc_19658
00019C42 5B40                       		subq.w	#5,d0
00019C44                            
00019C44                            loc_19658:
00019C44 3140 003C                  		move.w	d0,$3C(a0)
00019C48 E440                       		asr.w	#2,d0
00019C4A D168 000C                  		add.w	d0,$C(a0)
00019C4E 117C 0008 0019             		move.b	#8,$19(a0)
00019C54 117C 000C 0016             		move.b	#$C,$16(a0)
00019C5A 4228 0020                  		clr.b	$20(a0)
00019C5E 2268 0034                  		movea.l	$34(a0),a1
00019C62 4A29 0020                  		tst.b	$20(a1)
00019C66 6700                       		beq.s	loc_19688
00019C68 4A29 0029                  		tst.b	$29(a1)
00019C6C 6600                       		bne.s	loc_19688
00019C6E 117C 0084 0020             		move.b	#$84,$20(a0)
00019C74                            
00019C74                            loc_19688:
00019C74 6000 FF50                  		bra.w	loc_195DA
00019C78                            ; ===========================================================================
00019C78                            
00019C78                            Obj75_SpikeDelete:
00019C78 4EF9 0000 DBF0             		jmp	DeleteObject
00019C7E                            ; ===========================================================================
00019C7E                            ; ---------------------------------------------------------------------------
00019C7E                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C7E                            ; ---------------------------------------------------------------------------
00019C7E                            
00019C7E                            Obj76:					; XREF: Obj_Index
00019C7E 7000                       		moveq	#0,d0
00019C80 1028 0024                  		move.b	$24(a0),d0
00019C84 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019C88 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019C8C                            ; ===========================================================================
00019C8C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019C8E 0000                       		dc.w Obj76_Action-Obj76_Index
00019C90 0000                       		dc.w loc_19762-Obj76_Index
00019C92                            ; ===========================================================================
00019C92                            
00019C92                            Obj76_Main:				; XREF: Obj76_Index
00019C92 7800                       		moveq	#0,d4
00019C94 3A3C 2C10                  		move.w	#$2C10,d5
00019C98 7C09                       		moveq	#9,d6
00019C9A 43D0                       		lea	(a0),a1
00019C9C 6000                       		bra.s	Obj76_MakeBlock
00019C9E                            ; ===========================================================================
00019C9E                            
00019C9E                            Obj76_Loop:
00019C9E 4EB9 0000 E03A             		jsr	SingleObjLoad
00019CA4 6600                       		bne.s	Obj76_ExitLoop
00019CA6                            
00019CA6                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CA6 12BC 0076                  		move.b	#$76,(a1)
00019CAA 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019CB2 337C 4000 0002             		move.w	#$4000,2(a1)
00019CB8 137C 0004 0001             		move.b	#4,1(a1)
00019CBE 137C 0010 0019             		move.b	#$10,$19(a1)
00019CC4 137C 0010 0016             		move.b	#$10,$16(a1)
00019CCA 137C 0003 0018             		move.b	#3,$18(a1)
00019CD0 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CD4 337C 0582 000C             		move.w	#$582,$C(a1)
00019CDA 3344 0028                  		move.w	d4,$28(a1)
00019CDE 0644 0101                  		addi.w	#$101,d4
00019CE2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019CE6 5429 0024                  		addq.b	#2,$24(a1)
00019CEA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019CEE                            
00019CEE                            Obj76_ExitLoop:
00019CEE 4E75                       		rts	
00019CF0                            ; ===========================================================================
00019CF0                            
00019CF0                            Obj76_Action:				; XREF: Obj76_Index
00019CF0 1028 0029                  		move.b	$29(a0),d0
00019CF4 B028 0028                  		cmp.b	$28(a0),d0
00019CF8 6700                       		beq.s	Obj76_Solid
00019CFA 4A00                       		tst.b	d0
00019CFC 6B00                       		bmi.s	loc_19718
00019CFE                            
00019CFE                            loc_19712:
00019CFE 6100 0000                  		bsr.w	Obj76_Break
00019D02 6000                       		bra.s	Obj76_Display
00019D04                            ; ===========================================================================
00019D04                            
00019D04                            loc_19718:
00019D04 2268 0034                  		movea.l	$34(a0),a1
00019D08 4A29 0021                  		tst.b	$21(a1)
00019D0C 67F0                       		beq.s	loc_19712
00019D0E 3169 0008 0008             		move.w	8(a1),8(a0)
00019D14 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D1A 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D20 B2C8                       		cmpa.w	a0,a1
00019D22 6500                       		bcs.s	Obj76_Display
00019D24 3029 0012                  		move.w	$12(a1),d0
00019D28 48C0                       		ext.l	d0
00019D2A E080                       		asr.l	#8,d0
00019D2C D168 000C                  		add.w	d0,$C(a0)
00019D30 6000                       		bra.s	Obj76_Display
00019D32                            ; ===========================================================================
00019D32                            
00019D32                            Obj76_Solid:				; XREF: Obj76_Action
00019D32 323C 001B                  		move.w	#$1B,d1
00019D36 343C 0010                  		move.w	#$10,d2
00019D3A 363C 0011                  		move.w	#$11,d3
00019D3E 3828 0008                  		move.w	8(a0),d4
00019D42 4EB9 0000 FF84             		jsr	SolidObject
00019D48                            
00019D48                            Obj76_Display:				; XREF: Obj76_Action
00019D48 4EF9 0000 DBB4             		jmp	DisplaySprite
00019D4E                            ; ===========================================================================
00019D4E                            
00019D4E                            loc_19762:				; XREF: Obj76_Index
00019D4E 4A28 0001                  		tst.b	1(a0)
00019D52 6A00                       		bpl.s	Obj76_Delete
00019D54 4EB9 0000 DB62             		jsr	ObjectFall
00019D5A 4EF9 0000 DBB4             		jmp	DisplaySprite
00019D60                            ; ===========================================================================
00019D60                            
00019D60                            Obj76_Delete:
00019D60 4EF9 0000 DBF0             		jmp	DeleteObject
00019D66                            
00019D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D66                            
00019D66                            
00019D66                            Obj76_Break:				; XREF: Obj76_Action
00019D66 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D6A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D6E 7801                       		moveq	#1,d4
00019D70 7203                       		moveq	#3,d1
00019D72 7438                       		moveq	#$38,d2
00019D74 5428 0024                  		addq.b	#2,$24(a0)
00019D78 117C 0008 0019             		move.b	#8,$19(a0)
00019D7E 117C 0008 0016             		move.b	#8,$16(a0)
00019D84 43D0                       		lea	(a0),a1
00019D86 6000                       		bra.s	Obj76_MakeFrag
00019D88                            ; ===========================================================================
00019D88                            
00019D88                            Obj76_LoopFrag:
00019D88 4EB9 0000 E050             		jsr	SingleObjLoad2
00019D8E 6600                       		bne.s	loc_197D4
00019D90                            
00019D90                            Obj76_MakeFrag:
00019D90 45D0                       		lea	(a0),a2
00019D92 47D1                       		lea	(a1),a3
00019D94 7603                       		moveq	#3,d3
00019D96                            
00019D96                            loc_197AA:
00019D96 26DA                       		move.l	(a2)+,(a3)+
00019D98 26DA                       		move.l	(a2)+,(a3)+
00019D9A 26DA                       		move.l	(a2)+,(a3)+
00019D9C 26DA                       		move.l	(a2)+,(a3)+
00019D9E 51CB FFF6                  		dbf	d3,loc_197AA
00019DA2                            
00019DA2 335C 0010                  		move.w	(a4)+,$10(a1)
00019DA6 335C 0012                  		move.w	(a4)+,$12(a1)
00019DAA 361D                       		move.w	(a5)+,d3
00019DAC D769 0008                  		add.w	d3,8(a1)
00019DB0 361D                       		move.w	(a5)+,d3
00019DB2 D769 000C                  		add.w	d3,$C(a1)
00019DB6 1344 001A                  		move.b	d4,$1A(a1)
00019DBA 5244                       		addq.w	#1,d4
00019DBC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019DC0                            
00019DC0                            loc_197D4:
00019DC0 303C 00CB                  		move.w	#$CB,d0
00019DC4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DCA                            ; End of function Obj76_Break
00019DCA                            
00019DCA                            ; ===========================================================================
00019DCA FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DCE 0180 FE00                  		dc.w $180, $FE00
00019DD2 FF00 FF00                  		dc.w $FF00, $FF00
00019DD6 0100 FF00                  		dc.w $100, $FF00
00019DDA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DDE 0010 0000                  		dc.w $10, 0
00019DE2 0000 0010                  		dc.w 0,	$10
00019DE6 0010 0010                  		dc.w $10, $10
00019DEA                            ; ---------------------------------------------------------------------------
00019DEA                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019DEA                            ; ---------------------------------------------------------------------------
00019DEA                            Map_obj76:
00019DEA                            	include "_maps\obj76.asm"
00019DEA                            ; ---------------------------------------------------------------------------
00019DEA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019DEA                            ; ---------------------------------------------------------------------------
00019DEA 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019DEE 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019DF2 0000                       		dc.w byte_19826-Map_obj76
00019DF4 02                         byte_19808:	dc.b 2
00019DF5 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019DFA 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019DFF 00                         		dc.b 0
00019E00 01                         byte_19814:	dc.b 1
00019E01 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E06 01                         byte_1981A:	dc.b 1
00019E07 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E0C 01                         byte_19820:	dc.b 1
00019E0D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E12 01                         byte_19826:	dc.b 1
00019E13 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E18                            		even
00019E18                            		even
00019E18                            
00019E18                            ; ===========================================================================
00019E18                            
00019E18                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E18 4EF9 0000 DBF0             		jmp	DeleteObject
00019E1E                            ; ===========================================================================
00019E1E                            ; ---------------------------------------------------------------------------
00019E1E                            ; Object 82 - Eggman (SBZ2)
00019E1E                            ; ---------------------------------------------------------------------------
00019E1E                            
00019E1E                            Obj82:					; XREF: Obj_Index
00019E1E 7000                       		moveq	#0,d0
00019E20 1028 0024                  		move.b	$24(a0),d0
00019E24 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E28 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E2C                            ; ===========================================================================
00019E2C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E2E 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E30 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E32                            
00019E32 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E35 0400 03                    		dc.b 4,	0, 3
00019E38                            ; ===========================================================================
00019E38                            
00019E38                            Obj82_Main:				; XREF: Obj82_Index
00019E38 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E3C 317C 2160 0008             		move.w	#$2160,8(a0)
00019E42 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E48 117C 000F 0020             		move.b	#$F,$20(a0)
00019E4E 117C 0010 0021             		move.b	#$10,$21(a0)
00019E54 08A8 0000 0022             		bclr	#0,$22(a0)
00019E5A 4228 0025                  		clr.b	$25(a0)
00019E5E 115A 0024                  		move.b	(a2)+,$24(a0)
00019E62 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E66 115A 0018                  		move.b	(a2)+,$18(a0)
00019E6A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E72 317C 0400 0002             		move.w	#$400,2(a0)
00019E78 117C 0004 0001             		move.b	#4,1(a0)
00019E7E 08E8 0007 0001             		bset	#7,1(a0)
00019E84 117C 0020 0019             		move.b	#$20,$19(a0)
00019E8A 4EB9 0000 E050             		jsr	SingleObjLoad2
00019E90 6600                       		bne.s	Obj82_Eggman
00019E92 2348 0034                  		move.l	a0,$34(a1)
00019E96 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019E9A 337C 2130 0008             		move.w	#$2130,8(a1)
00019EA0 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EA6 4228 0025                  		clr.b	$25(a0)
00019EAA 135A 0024                  		move.b	(a2)+,$24(a1)
00019EAE 135A 001C                  		move.b	(a2)+,$1C(a1)
00019EB2 135A 0018                  		move.b	(a2)+,$18(a1)
00019EB6 237C 0000 C3A8 0004        		move.l	#Map_obj32,4(a1)
00019EBE 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019EC4 137C 0004 0001             		move.b	#4,1(a1)
00019ECA 08E9 0007 0001             		bset	#7,1(a1)
00019ED0 137C 0010 0019             		move.b	#$10,$19(a1)
00019ED6 137C 0000 001A             		move.b	#0,$1A(a1)
00019EDC                            
00019EDC                            Obj82_Eggman:				; XREF: Obj82_Index
00019EDC 7000                       		moveq	#0,d0
00019EDE 1028 0025                  		move.b	$25(a0),d0
00019EE2 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019EE6 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019EEA 43FA 0000                  		lea	Ani_obj82(pc),a1
00019EEE 4EB9 0000 AC66             		jsr	AnimateSprite
00019EF4 4EF9 0000 DBB4             		jmp	DisplaySprite
00019EFA                            ; ===========================================================================
00019EFA 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019EFC 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019EFE 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F00 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F02                            ; ===========================================================================
00019F02                            
00019F02                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F02 3028 0008                  		move.w	8(a0),d0
00019F06 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F0A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F0E 6400                       		bcc.s	loc_19934	; if not, branch
00019F10 5428 0025                  		addq.b	#2,$25(a0)
00019F14 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F1A 117C 0001 001C             		move.b	#1,$1C(a0)
00019F20                            
00019F20                            loc_19934:				; XREF: Obj82_EggIndex
00019F20 4EF9 0000 DB8E             		jmp	SpeedToPos
00019F26                            ; ===========================================================================
00019F26                            
00019F26                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F26 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F2A 6600                       		bne.s	loc_19954	; if time remains, branch
00019F2C 5428 0025                  		addq.b	#2,$25(a0)
00019F30 117C 0002 001C             		move.b	#2,$1C(a0)
00019F36 5868 000C                  		addq.w	#4,$C(a0)
00019F3A 317C 000F 003C             		move.w	#15,$3C(a0)
00019F40                            
00019F40                            loc_19954:
00019F40 60DE                       		bra.s	loc_19934
00019F42                            ; ===========================================================================
00019F42                            
00019F42                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F42 5368 003C                  		subq.w	#1,$3C(a0)
00019F46 6E00                       		bgt.s	loc_199D0
00019F48 6600                       		bne.s	loc_1996A
00019F4A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F50 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F56                            
00019F56                            loc_1996A:
00019F56 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F5C 6E00                       		bgt.s	loc_19976
00019F5E 4268 0010                  		clr.w	$10(a0)
00019F62                            
00019F62                            loc_19976:
00019F62 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F68 4A68 0012                  		tst.w	$12(a0)
00019F6C 6B00                       		bmi.s	Obj82_FindBlocks
00019F6E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F74 6500                       		bcs.s	Obj82_FindBlocks
00019F76 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F7C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F82 6500                       		bcs.s	Obj82_FindBlocks
00019F84 317C 059B 000C             		move.w	#$59B,$C(a0)
00019F8A 4268 0012                  		clr.w	$12(a0)
00019F8E                            
00019F8E                            Obj82_FindBlocks:
00019F8E 3028 0010                  		move.w	$10(a0),d0
00019F92 8068 0012                  		or.w	$12(a0),d0
00019F96 6600                       		bne.s	loc_199D0
00019F98 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019F9C 703E                       		moveq	#$3E,d0
00019F9E 7240                       		moveq	#$40,d1
00019FA0                            
00019FA0                            Obj82_FindLoop:	
00019FA0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FA2 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FA6 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FAA                            
00019FAA 6600                       		bne.s	loc_199D0
00019FAC 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019FB2 5428 0025                  		addq.b	#2,$25(a0)
00019FB6 117C 0001 001C             		move.b	#1,$1C(a0)
00019FBC                            
00019FBC                            loc_199D0:
00019FBC 6000 FF62                  		bra.w	loc_19934
00019FC0                            ; ===========================================================================
00019FC0                            
00019FC0                            Obj82_Switch:				; XREF: Obj82_Index
00019FC0 7000                       		moveq	#0,d0
00019FC2 1028 0025                  		move.b	$25(a0),d0
00019FC6 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FCA 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FCE                            ; ===========================================================================
00019FCE 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FD0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FD2                            ; ===========================================================================
00019FD2                            
00019FD2                            loc_199E6:				; XREF: Obj82_SwIndex
00019FD2 2268 0034                  		movea.l	$34(a0),a1
00019FD6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FDC 6600                       		bne.s	Obj82_SwDisplay
00019FDE 117C 0001 001A             		move.b	#1,$1A(a0)
00019FE4 5428 0025                  		addq.b	#2,$25(a0)
00019FE8                            
00019FE8                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019FE8 4EF9 0000 DBB4             		jmp	DisplaySprite
00019FEE                            ; ===========================================================================
00019FEE                            Ani_obj82:
00019FEE                            	include "_anim\obj82.asm"
00019FEE                            ; ---------------------------------------------------------------------------
00019FEE                            ; Animation script - Eggman (SBZ2)
00019FEE                            ; ---------------------------------------------------------------------------
00019FEE 0000                       		dc.w byte_19A10-Ani_obj82
00019FF0 0000                       		dc.w byte_19A14-Ani_obj82
00019FF2 0000                       		dc.w byte_19A18-Ani_obj82
00019FF4 0000                       		dc.w byte_19A20-Ani_obj82
00019FF6 0000                       		dc.w byte_19A24-Ani_obj82
00019FF8 0000                       		dc.w byte_19A2A-Ani_obj82
00019FFA 0000                       		dc.w byte_19A30-Ani_obj82
00019FFC 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A000 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A004 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A00C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A010 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A016 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A01C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A020                            		even
0001A020                            		even
0001A020                            
0001A020                            ; ---------------------------------------------------------------------------
0001A020                            ; Sprite mappings - Eggman (SBZ2)
0001A020                            ; ---------------------------------------------------------------------------
0001A020                            Map_obj82:
0001A020                            	include "_maps\obj82.asm"
0001A020                            ; ================================================================================
0001A020                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A020                            ; ================================================================================
0001A020                            
0001A020                            DATAA16Z12RYSAF:
0001A020 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A024 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A028 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A02C 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A030 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A034 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A036 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A037 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A03C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A041 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A046 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A047 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A04C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A051 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A056 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A05B 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A05C E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A061 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A066 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A06B FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A070 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A071 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A076 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A07B F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A080 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A081 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A086 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A08B 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A090 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A095 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A096 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A09B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0A0 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0A5 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0AA 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0AB E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0B0 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0B5 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A0BA 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A0BF F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0C4 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0C9 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0CE 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0CF 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0D4 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0D9 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0DE F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A0E3 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A0E4 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A0E9 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A0EE 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A0F3 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A0F8 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A0FD 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A0FE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A103 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A108 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A10D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A112 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A117 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A11C 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A121 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A126 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A127 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A12C F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A131 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A136                            	even
0001A136                            	even
0001A136                            
0001A136                            ; ===========================================================================
0001A136                            ; ---------------------------------------------------------------------------
0001A136                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A136                            ; ---------------------------------------------------------------------------
0001A136                            
0001A136                            Obj83:					; XREF: Obj_Index
0001A136 7000                       		moveq	#0,d0
0001A138 1028 0024                  		move.b	$24(a0),d0
0001A13C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A140 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A144                            ; ===========================================================================
0001A144 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A146 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A148 0000                       		dc.w loc_19C36-Obj83_Index
0001A14A 0000                       		dc.w loc_19C62-Obj83_Index
0001A14C 0000                       		dc.w loc_19C72-Obj83_Index
0001A14E 0000                       		dc.w loc_19C80-Obj83_Index
0001A150                            ; ===========================================================================
0001A150                            
0001A150                            Obj83_Main:				; XREF: Obj83_Index
0001A150 317C 2080 0008             		move.w	#$2080,8(a0)
0001A156 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A15C 117C 0080 0019             		move.b	#$80,$19(a0)
0001A162 117C 0010 0016             		move.b	#$10,$16(a0)
0001A168 117C 0004 0001             		move.b	#4,1(a0)
0001A16E 08E8 0007 0001             		bset	#7,1(a0)
0001A174 7800                       		moveq	#0,d4
0001A176 3A3C 2010                  		move.w	#$2010,d5
0001A17A 7C07                       		moveq	#7,d6
0001A17C 45E8 0030                  		lea	$30(a0),a2
0001A180                            
0001A180                            Obj83_MakeBlock:
0001A180 4EB9 0000 E03A             		jsr	SingleObjLoad
0001A186 6600                       		bne.s	Obj83_ExitMake
0001A188 34C9                       		move.w	a1,(a2)+
0001A18A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A18E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A196 337C 4518 0002             		move.w	#$4518,2(a1)
0001A19C 137C 0004 0001             		move.b	#4,1(a1)
0001A1A2 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1A8 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1AE 137C 0003 0018             		move.b	#3,$18(a1)
0001A1B4 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A1B8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A1BE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1C2 137C 0008 0024             		move.b	#8,$24(a1)
0001A1C8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1CC                            
0001A1CC                            Obj83_ExitMake:
0001A1CC 5428 0024                  		addq.b	#2,$24(a0)
0001A1D0 4E75                       		rts	
0001A1D2                            ; ===========================================================================
0001A1D2                            
0001A1D2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1D2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1D8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1DA 4228 001A                  		clr.b	$1A(a0)
0001A1DE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A1E2                            
0001A1E2                            Obj83_Solid:
0001A1E2 7000                       		moveq	#0,d0
0001A1E4 1028 001A                  		move.b	$1A(a0),d0
0001A1E8 4400                       		neg.b	d0
0001A1EA 4880                       		ext.w	d0
0001A1EC 5040                       		addq.w	#8,d0
0001A1EE E940                       		asl.w	#4,d0
0001A1F0 383C 2100                  		move.w	#$2100,d4
0001A1F4 9840                       		sub.w	d0,d4
0001A1F6 1140 0019                  		move.b	d0,$19(a0)
0001A1FA 3144 0008                  		move.w	d4,8(a0)
0001A1FE 720B                       		moveq	#$B,d1
0001A200 D240                       		add.w	d0,d1
0001A202 7410                       		moveq	#$10,d2
0001A204 7611                       		moveq	#$11,d3
0001A206 4EF9 0000 FF84             		jmp	SolidObject
0001A20C                            ; ===========================================================================
0001A20C                            
0001A20C                            loc_19C36:				; XREF: Obj83_Index
0001A20C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A212 6400                       		bcc.s	Obj83_Solid2
0001A214 70FF                       		moveq	#-1,d0
0001A216 1028 001A                  		move.b	$1A(a0),d0
0001A21A 4880                       		ext.w	d0
0001A21C D040                       		add.w	d0,d0
0001A21E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A222 2240                       		movea.l	d0,a1
0001A224 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A22A 5228 001A                  		addq.b	#1,$1A(a0)
0001A22E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A234 6700                       		beq.s	loc_19C62
0001A236                            
0001A236                            Obj83_Solid2:
0001A236 60AA                       		bra.s	Obj83_Solid
0001A238                            ; ===========================================================================
0001A238                            
0001A238                            loc_19C62:				; XREF: Obj83_Index
0001A238 08A8 0003 0022             		bclr	#3,$22(a0)
0001A23E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A244 6000 FBD2                  		bra.w	loc_1982C
0001A248                            ; ===========================================================================
0001A248                            
0001A248                            loc_19C72:				; XREF: Obj83_Index
0001A248 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A24E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A250 4EF9 0000 DBB4             		jmp	DisplaySprite
0001A256                            ; ===========================================================================
0001A256                            
0001A256                            loc_19C80:				; XREF: Obj83_Index
0001A256 4A28 0001                  		tst.b	1(a0)
0001A25A 6A00 FBBC                  		bpl.w	loc_1982C
0001A25E 4EB9 0000 DB62             		jsr	ObjectFall
0001A264 4EF9 0000 DBB4             		jmp	DisplaySprite
0001A26A                            ; ===========================================================================
0001A26A                            
0001A26A                            Obj83_Break:				; XREF: loc_19C72
0001A26A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A26E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A272 7801                       		moveq	#1,d4
0001A274 7203                       		moveq	#3,d1
0001A276 7438                       		moveq	#$38,d2
0001A278 5428 0024                  		addq.b	#2,$24(a0)
0001A27C 117C 0008 0019             		move.b	#8,$19(a0)
0001A282 117C 0008 0016             		move.b	#8,$16(a0)
0001A288 43D0                       		lea	(a0),a1
0001A28A 6000                       		bra.s	Obj83_MakeFrag
0001A28C                            ; ===========================================================================
0001A28C                            
0001A28C                            Obj83_LoopFrag:
0001A28C 4EB9 0000 E050             		jsr	SingleObjLoad2
0001A292 6600                       		bne.s	Obj83_BreakSnd
0001A294                            
0001A294                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A294 45D0                       		lea	(a0),a2
0001A296 47D1                       		lea	(a1),a3
0001A298 7603                       		moveq	#3,d3
0001A29A                            
0001A29A                            loc_19CC4:
0001A29A 26DA                       		move.l	(a2)+,(a3)+
0001A29C 26DA                       		move.l	(a2)+,(a3)+
0001A29E 26DA                       		move.l	(a2)+,(a3)+
0001A2A0 26DA                       		move.l	(a2)+,(a3)+
0001A2A2 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2A6                            
0001A2A6 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2AA 361D                       		move.w	(a5)+,d3
0001A2AC D769 0008                  		add.w	d3,8(a1)
0001A2B0 361D                       		move.w	(a5)+,d3
0001A2B2 D769 000C                  		add.w	d3,$C(a1)
0001A2B6 1344 001A                  		move.b	d4,$1A(a1)
0001A2BA 5244                       		addq.w	#1,d4
0001A2BC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A2C0                            
0001A2C0                            Obj83_BreakSnd:
0001A2C0 303C 00CB                  		move.w	#$CB,d0
0001A2C4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2CA 4EF9 0000 DBB4             		jmp	DisplaySprite
0001A2D0                            ; ===========================================================================
0001A2D0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2D4 0120 00C0                  		dc.w $120, $C0
0001A2D8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2DC 0010 0000                  		dc.w $10, 0
0001A2E0 0000 0010                  		dc.w 0,	$10
0001A2E4 0010 0010                  		dc.w $10, $10
0001A2E8                            ; ---------------------------------------------------------------------------
0001A2E8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2E8                            ; ---------------------------------------------------------------------------
0001A2E8                            Map_obj83:
0001A2E8                            	include "_maps\obj83.asm"
0001A2E8                            ; ---------------------------------------------------------------------------
0001A2E8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A2E8                            ; ---------------------------------------------------------------------------
0001A2E8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A2EC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A2F0 0000                       		dc.w byte_19D46-Map_obj83
0001A2F2 01                         byte_19D1C:	dc.b 1
0001A2F3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A2F8 02                         byte_19D22:	dc.b 2
0001A2F9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A2FE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A303 00                         		dc.b 0
0001A304 02                         byte_19D2E:	dc.b 2
0001A305 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A30A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A30F 00                         		dc.b 0
0001A310 02                         byte_19D3A:	dc.b 2
0001A311 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A316 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A31B 00                         		dc.b 0
0001A31C 02                         byte_19D46:	dc.b 2
0001A31D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A322 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A328 00                         		even
0001A328 00                         		even
0001A328                            
0001A328                            ; ===========================================================================
0001A328                            ; ---------------------------------------------------------------------------
0001A328                            ; Object 85 - Eggman (FZ)
0001A328                            ; ---------------------------------------------------------------------------
0001A328                            
0001A328                            Obj85_Delete:
0001A328 4EF9 0000 DBF0             		jmp	DeleteObject
0001A32E                            ; ===========================================================================
0001A32E                            
0001A32E                            Obj85:					; XREF: Obj_Index
0001A32E 7000                       		moveq	#0,d0
0001A330 1028 0024                  		move.b	$24(a0),d0
0001A334 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A338 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A33C                            ; ===========================================================================
0001A33C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A33E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A340 0000                       		dc.w loc_1A38E-Obj85_Index
0001A342 0000                       		dc.w loc_1A346-Obj85_Index
0001A344 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A346 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A348 0000                       		dc.w loc_1A264-Obj85_Index
0001A34A                            
0001A34A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A350 0001 A020                  		dc.l Map_obj82		; mappings pointer
0001A354 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A35A 0000 0000                  		dc.l Map_obj84
0001A35E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A364 0000 0000                  		dc.l Map_FZBoss
0001A368 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A36E 0001 A020                  		dc.l Map_obj82
0001A372 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A378 0001 8302                  		dc.l Map_Eggman
0001A37C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A382 0001 8302                  		dc.l Map_Eggman
0001A386                            
0001A386 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A38B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A390 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A395 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A39A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A39F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3A4                            ; ===========================================================================
0001A3A4                            
0001A3A4                            Obj85_Main:				; XREF: Obj85_Index
0001A3A4 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3A8 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3AC 2248                       		movea.l	a0,a1
0001A3AE 7205                       		moveq	#5,d1
0001A3B0 6000                       		bra.s	Obj85_LoadBoss
0001A3B2                            ; ===========================================================================
0001A3B2                            
0001A3B2                            Obj85_Loop:
0001A3B2 4EB9 0000 E050             		jsr	SingleObjLoad2
0001A3B8 6600                       		bne.s	loc_19E20
0001A3BA                            
0001A3BA                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A3BA 12BC 0085                  		move.b	#$85,(a1)
0001A3BE 335A 0008                  		move.w	(a2)+,8(a1)
0001A3C2 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3C6 335A 0002                  		move.w	(a2)+,2(a1)
0001A3CA 235A 0004                  		move.l	(a2)+,4(a1)
0001A3CE 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3D2 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3D6 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3DA 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3DE 135B 0016                  		move.b	(a3)+,$16(a1)
0001A3E2 137C 0004 0001             		move.b	#4,1(a1)
0001A3E8 08E8 0007 0001             		bset	#7,1(a0)
0001A3EE 2348 0034                  		move.l	a0,$34(a1)
0001A3F2 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A3F6                            
0001A3F6                            loc_19E20:
0001A3F6 45E8 0036                  		lea	$36(a0),a2
0001A3FA 4EB9 0000 E03A             		jsr	SingleObjLoad
0001A400 6600                       		bne.s	loc_19E5A
0001A402 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A406 3489                       		move.w	a1,(a2)
0001A408 2348 0034                  		move.l	a0,$34(a1)
0001A40C 45E8 0038                  		lea	$38(a0),a2
0001A410 7400                       		moveq	#0,d2
0001A412 7203                       		moveq	#3,d1
0001A414                            
0001A414                            loc_19E3E:
0001A414 4EB9 0000 E050             		jsr	SingleObjLoad2
0001A41A 6600                       		bne.s	loc_19E5A
0001A41C 34C9                       		move.w	a1,(a2)+
0001A41E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A422 2348 0034                  		move.l	a0,$34(a1)
0001A426 1342 0028                  		move.b	d2,$28(a1)
0001A42A 5442                       		addq.w	#2,d2
0001A42C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A430                            
0001A430                            loc_19E5A:
0001A430 317C 0000 0034             		move.w	#0,$34(a0)
0001A436 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A43C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A442                            
0001A442                            Obj85_Eggman:				; XREF: Obj85_Index
0001A442 7000                       		moveq	#0,d0
0001A444 1028 0034                  		move.b	$34(a0),d0
0001A448 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A44C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A450 4EF9 0000 DBB4             		jmp	DisplaySprite
0001A456                            ; ===========================================================================
0001A456 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A45A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A45E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A462 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A466                            ; ===========================================================================
0001A466                            
0001A466                            loc_19E90:				; XREF: off_19E80
0001A466 4AB8 F680                  		tst.l	($FFFFF680).w
0001A46A 6600                       		bne.s	loc_19EA2
0001A46C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A472 6500                       		bcs.s	loc_19EA2
0001A474 5428 0034                  		addq.b	#2,$34(a0)
0001A478                            
0001A478                            loc_19EA2:
0001A478 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A47C 4E75                       		rts	
0001A47E                            ; ===========================================================================
0001A47E                            
0001A47E                            loc_19EA8:				; XREF: off_19E80
0001A47E 4A68 0030                  		tst.w	$30(a0)
0001A482 6A00                       		bpl.s	loc_19F10
0001A484 4268 0030                  		clr.w	$30(a0)
0001A488 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A48E 0240 000C                  		andi.w	#$C,d0
0001A492 3200                       		move.w	d0,d1
0001A494 5441                       		addq.w	#2,d1
0001A496 4A80                       		tst.l	d0
0001A498 6A00                       		bpl.s	loc_19EC6
0001A49A C141                       		exg	d1,d0
0001A49C                            
0001A49C                            loc_19EC6:
0001A49C 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4A0 3031 0000                  		move.w	(a1,d0.w),d0
0001A4A4 3231 1000                  		move.w	(a1,d1.w),d1
0001A4A8 3140 0030                  		move.w	d0,$30(a0)
0001A4AC 74FF                       		moveq	#-1,d2
0001A4AE 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A4B2 2242                       		movea.l	d2,a1
0001A4B4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A4BA 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A4C0 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4C4 2242                       		movea.l	d2,a1
0001A4C6 137C 0001 0029             		move.b	#1,$29(a1)
0001A4CC 337C 0000 0030             		move.w	#0,$30(a1)
0001A4D2 317C 0001 0032             		move.w	#1,$32(a0)
0001A4D8 4228 0035                  		clr.b	$35(a0)
0001A4DC 303C 00B7                  		move.w	#$B7,d0
0001A4E0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A4E6                            
0001A4E6                            loc_19F10:
0001A4E6 4A68 0032                  		tst.w	$32(a0)
0001A4EA 6B00 0000                  		bmi.w	loc_19FA6
0001A4EE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A4F4 3038 D008                  		move.w	($FFFFD008).w,d0
0001A4F8 9068 0008                  		sub.w	8(a0),d0
0001A4FC 6500                       		bcs.s	loc_19F2E
0001A4FE 08E8 0000 0022             		bset	#0,$22(a0)
0001A504                            
0001A504                            loc_19F2E:
0001A504 323C 002B                  		move.w	#$2B,d1
0001A508 343C 0014                  		move.w	#$14,d2
0001A50C 363C 0014                  		move.w	#$14,d3
0001A510 3828 0008                  		move.w	8(a0),d4
0001A514 4EB9 0000 FF84             		jsr	SolidObject
0001A51A 4A44                       		tst.w	d4
0001A51C 6E00                       		bgt.s	loc_19F50
0001A51E                            
0001A51E                            loc_19F48:
0001A51E 4A28 0035                  		tst.b	$35(a0)
0001A522 6600                       		bne.s	loc_19F88
0001A524 6000                       		bra.s	loc_19F96
0001A526                            ; ===========================================================================
0001A526                            
0001A526                            loc_19F50:
0001A526 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A52A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A530 66EC                       		bne.s	loc_19F48
0001A532 303C 0300                  		move.w	#$300,d0
0001A536 0828 0000 0022             		btst	#0,$22(a0)
0001A53C 6600                       		bne.s	loc_19F6A
0001A53E 4440                       		neg.w	d0
0001A540                            
0001A540                            loc_19F6A:
0001A540 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A544 4A28 0035                  		tst.b	$35(a0)
0001A548 6600                       		bne.s	loc_19F88
0001A54A 5328 0021                  		subq.b	#1,$21(a0)
0001A54E 117C 0064 0035             		move.b	#$64,$35(a0)
0001A554 303C 00AC                  		move.w	#$AC,d0
0001A558 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A55E                            
0001A55E                            loc_19F88:
0001A55E 5328 0035                  		subq.b	#1,$35(a0)
0001A562 6700                       		beq.s	loc_19F96
0001A564 117C 0003 001C             		move.b	#3,$1C(a0)
0001A56A 6000                       		bra.s	loc_19F9C
0001A56C                            ; ===========================================================================
0001A56C                            
0001A56C                            loc_19F96:
0001A56C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A572                            
0001A572                            loc_19F9C:
0001A572 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A576 4EF9 0000 AC66             		jmp	AnimateSprite
0001A57C                            ; ===========================================================================
0001A57C                            
0001A57C                            loc_19FA6:
0001A57C 4A28 0021                  		tst.b	$21(a0)
0001A580 6700                       		beq.s	loc_19FBC
0001A582 5428 0034                  		addq.b	#2,$34(a0)
0001A586 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A58C 4268 0032                  		clr.w	$32(a0)
0001A590 4E75                       		rts	
0001A592                            ; ===========================================================================
0001A592                            
0001A592                            loc_19FBC:
0001A592 117C 0006 0034             		move.b	#6,$34(a0)
0001A598 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A59E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5A4 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5AA 4E75                       		rts	
0001A5AC                            ; ===========================================================================
0001A5AC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A5BC                            ; ===========================================================================
0001A5BC                            
0001A5BC                            loc_19FE6:				; XREF: off_19E80
0001A5BC 70FF                       		moveq	#-1,d0
0001A5BE 3028 0036                  		move.w	$36(a0),d0
0001A5C2 2240                       		movea.l	d0,a1
0001A5C4 4A68 0030                  		tst.w	$30(a0)
0001A5C8 6A00                       		bpl.s	loc_1A000
0001A5CA 4268 0030                  		clr.w	$30(a0)
0001A5CE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5D4 6100                       		bsr.s	loc_1A020
0001A5D6                            
0001A5D6                            loc_1A000:
0001A5D6 700F                       		moveq	#$F,d0
0001A5D8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5DC 6600                       		bne.s	loc_1A00A
0001A5DE 6100                       		bsr.s	loc_1A020
0001A5E0                            
0001A5E0                            loc_1A00A:
0001A5E0 4A68 0032                  		tst.w	$32(a0)
0001A5E4 6700                       		beq.s	locret_1A01E
0001A5E6 5528 0034                  		subq.b	#2,$34(a0)
0001A5EA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5F0 4268 0032                  		clr.w	$32(a0)
0001A5F4                            
0001A5F4                            locret_1A01E:
0001A5F4 4E75                       		rts	
0001A5F6                            ; ===========================================================================
0001A5F6                            
0001A5F6                            loc_1A020:
0001A5F6 303C 00B1                  		move.w	#$B1,d0
0001A5FA 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A600                            ; ===========================================================================
0001A600                            
0001A600                            loc_1A02A:				; XREF: off_19E80
0001A600 117C 0030 0017             		move.b	#$30,$17(a0)
0001A606 08E8 0000 0022             		bset	#0,$22(a0)
0001A60C 4EB9 0000 DB8E             		jsr	SpeedToPos
0001A612 117C 0006 001A             		move.b	#6,$1A(a0)
0001A618 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A61E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A624 6500                       		bcs.s	loc_1A070
0001A626 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A62C 5428 0034                  		addq.b	#2,$34(a0)
0001A630 117C 0020 0017             		move.b	#$20,$17(a0)
0001A636 317C 0100 0010             		move.w	#$100,$10(a0)
0001A63C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A642 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A646                            
0001A646                            loc_1A070:
0001A646 6000 0000                  		bra.w	loc_1A166
0001A64A                            ; ===========================================================================
0001A64A                            
0001A64A                            loc_1A074:				; XREF: off_19E80
0001A64A 08E8 0000 0022             		bset	#0,$22(a0)
0001A650 117C 0004 001C             		move.b	#4,$1C(a0)
0001A656 4EB9 0000 DB8E             		jsr	SpeedToPos
0001A65C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A662 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A668 6500                       		bcs.s	loc_1A09A
0001A66A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A670                            
0001A670                            loc_1A09A:
0001A670 317C 0400 0010             		move.w	#$400,$10(a0)
0001A676 3028 0008                  		move.w	8(a0),d0
0001A67A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A67E 6A00                       		bpl.s	loc_1A0B4
0001A680 317C 0500 0010             		move.w	#$500,$10(a0)
0001A686 6000 0000                  		bra.w	loc_1A0F2
0001A68A                            ; ===========================================================================
0001A68A                            
0001A68A                            loc_1A0B4:
0001A68A 0440 0070                  		subi.w	#$70,d0
0001A68E 6500                       		bcs.s	loc_1A0F2
0001A690 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A696 5140                       		subq.w	#8,d0
0001A698 6500                       		bcs.s	loc_1A0F2
0001A69A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6A0 5140                       		subq.w	#8,d0
0001A6A2 6500                       		bcs.s	loc_1A0F2
0001A6A4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6AA 5140                       		subq.w	#8,d0
0001A6AC 6500                       		bcs.s	loc_1A0F2
0001A6AE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6B4 5140                       		subq.w	#8,d0
0001A6B6 6500                       		bcs.s	loc_1A0F2
0001A6B8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6BE 0440 0038                  		subi.w	#$38,d0
0001A6C2 6500                       		bcs.s	loc_1A0F2
0001A6C4 4268 0010                  		clr.w	$10(a0)
0001A6C8                            
0001A6C8                            loc_1A0F2:
0001A6C8 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6CE 6500                       		bcs.s	loc_1A110
0001A6D0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6D6 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6DC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A6E2 5428 0034                  		addq.b	#2,$34(a0)
0001A6E6                            
0001A6E6                            loc_1A110:
0001A6E6 6000                       		bra.s	loc_1A15C
0001A6E8                            ; ===========================================================================
0001A6E8                            
0001A6E8                            loc_1A112:				; XREF: off_19E80
0001A6E8 4EB9 0000 DB8E             		jsr	SpeedToPos
0001A6EE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A6F4 6500                       		bcs.s	loc_1A124
0001A6F6 4268 0010                  		clr.w	$10(a0)
0001A6FA                            
0001A6FA                            loc_1A124:
0001A6FA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A700 4A68 0012                  		tst.w	$12(a0)
0001A704 6B00                       		bmi.s	loc_1A142
0001A706 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A70C 6500                       		bcs.s	loc_1A142
0001A70E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A714 4268 0012                  		clr.w	$12(a0)
0001A718                            
0001A718                            loc_1A142:
0001A718 3028 0010                  		move.w	$10(a0),d0
0001A71C 8068 0012                  		or.w	$12(a0),d0
0001A720 6600                       		bne.s	loc_1A15C
0001A722 5428 0034                  		addq.b	#2,$34(a0)
0001A726 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A72C 117C 0001 0021             		move.b	#1,$21(a0)
0001A732                            
0001A732                            loc_1A15C:
0001A732 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A736 4EB9 0000 AC66             		jsr	AnimateSprite
0001A73C                            
0001A73C                            loc_1A166:
0001A73C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A742 6C00                       		bge.s	loc_1A172
0001A744 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A748                            
0001A748                            loc_1A172:
0001A748 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A74E 6C00                       		bge.s	locret_1A190
0001A750 323C 001B                  		move.w	#$1B,d1
0001A754 343C 0070                  		move.w	#$70,d2
0001A758 363C 0071                  		move.w	#$71,d3
0001A75C 3828 0008                  		move.w	8(a0),d4
0001A760 4EF9 0000 FF84             		jmp	SolidObject
0001A766                            ; ===========================================================================
0001A766                            
0001A766                            locret_1A190:
0001A766 4E75                       		rts	
0001A768                            ; ===========================================================================
0001A768                            
0001A768                            loc_1A192:				; XREF: off_19E80
0001A768 217C 0001 8302 0004        		move.l	#Map_Eggman,4(a0)
0001A770 317C 0400 0002             		move.w	#$400,2(a0)
0001A776 117C 0000 001C             		move.b	#0,$1C(a0)
0001A77C 08E8 0000 0022             		bset	#0,$22(a0)
0001A782 4EB9 0000 DB8E             		jsr	SpeedToPos
0001A788 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A78E 6400                       		bcc.s	loc_1A1D0
0001A790 317C 0180 0010             		move.w	#$180,$10(a0)
0001A796 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A79C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7A2 5428 0034                  		addq.b	#2,$34(a0)
0001A7A6                            
0001A7A6                            loc_1A1D0:
0001A7A6 6000 FF8A                  		bra.w	loc_1A15C
0001A7AA                            ; ===========================================================================
0001A7AA                            
0001A7AA                            loc_1A1D4:				; XREF: off_19E80
0001A7AA 08E8 0000 0022             		bset	#0,$22(a0)
0001A7B0 4EB9 0000 DB8E             		jsr	SpeedToPos
0001A7B6 4A68 0030                  		tst.w	$30(a0)
0001A7BA 6600                       		bne.s	loc_1A1FC
0001A7BC 4A28 0020                  		tst.b	$20(a0)
0001A7C0 6600                       		bne.s	loc_1A216
0001A7C2 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7C8 303C 00AC                  		move.w	#$AC,d0
0001A7CC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7D2                            
0001A7D2                            loc_1A1FC:
0001A7D2 5368 0030                  		subq.w	#1,$30(a0)
0001A7D6 6600                       		bne.s	loc_1A216
0001A7D8 4A28 0022                  		tst.b	$22(a0)
0001A7DC 6A00                       		bpl.s	loc_1A210
0001A7DE 317C 0060 0012             		move.w	#$60,$12(a0)
0001A7E4 6000                       		bra.s	loc_1A216
0001A7E6                            ; ===========================================================================
0001A7E6                            
0001A7E6                            loc_1A210:
0001A7E6 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7EC                            
0001A7EC                            loc_1A216:
0001A7EC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A7F2 6D00                       		blt.s	loc_1A23A
0001A7F4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A7FA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A800 4278 D014                  		clr.w	($FFFFD014).w
0001A804 4A68 0012                  		tst.w	$12(a0)
0001A808 6A00                       		bpl.s	loc_1A248
0001A80A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A810                            
0001A810                            loc_1A23A:
0001A810 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A816 6D00                       		blt.s	loc_1A248
0001A818 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A81E                            
0001A81E                            loc_1A248:
0001A81E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A824 6500                       		bcs.s	loc_1A260
0001A826 4A28 0001                  		tst.b	1(a0)
0001A82A 6B00                       		bmi.s	loc_1A260
0001A82C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A832 6000 FAF4                  		bra.w	Obj85_Delete
0001A836                            ; ===========================================================================
0001A836                            
0001A836                            loc_1A260:
0001A836 6000 FEFA                  		bra.w	loc_1A15C
0001A83A                            ; ===========================================================================
0001A83A                            
0001A83A                            loc_1A264:				; XREF: Obj85_Index
0001A83A 2268 0034                  		movea.l	$34(a0),a1
0001A83E 1011                       		move.b	(a1),d0
0001A840 B010                       		cmp.b	(a0),d0
0001A842 6600 FAE4                  		bne.w	Obj85_Delete
0001A846 117C 0007 001C             		move.b	#7,$1C(a0)
0001A84C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A852 6C00                       		bge.s	loc_1A280
0001A854 6000                       		bra.s	loc_1A2A6
0001A856                            ; ===========================================================================
0001A856                            
0001A856                            loc_1A280:
0001A856 4A69 0010                  		tst.w	$10(a1)
0001A85A 6700                       		beq.s	loc_1A28C
0001A85C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A862                            
0001A862                            loc_1A28C:
0001A862 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A866 4EB9 0000 AC66             		jsr	AnimateSprite
0001A86C                            
0001A86C                            loc_1A296:
0001A86C 2268 0034                  		movea.l	$34(a0),a1
0001A870 3169 0008 0008             		move.w	8(a1),8(a0)
0001A876 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A87C                            
0001A87C                            loc_1A2A6:
0001A87C 2268 0034                  		movea.l	$34(a0),a1
0001A880 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A886 7003                       		moveq	#3,d0
0001A888 C028 0022                  		and.b	$22(a0),d0
0001A88C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A892 8128 0001                  		or.b	d0,1(a0)
0001A896 4EF9 0000 DBB4             		jmp	DisplaySprite
0001A89C                            ; ===========================================================================
0001A89C                            
0001A89C                            loc_1A2C6:				; XREF: Obj85_Index
0001A89C 2268 0034                  		movea.l	$34(a0),a1
0001A8A0 1011                       		move.b	(a1),d0
0001A8A2 B010                       		cmp.b	(a0),d0
0001A8A4 6600 FA82                  		bne.w	Obj85_Delete
0001A8A8 0CA9 0001 8302 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8B0 6700                       		beq.s	loc_1A2E4
0001A8B2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A8B8 60C2                       		bra.s	loc_1A2A6
0001A8BA                            ; ===========================================================================
0001A8BA                            
0001A8BA                            loc_1A2E4:
0001A8BA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8C0 4A29 0021                  		tst.b	$21(a1)
0001A8C4 6F00                       		ble.s	loc_1A312
0001A8C6 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8CC 217C 0001 8302 0004        		move.l	#Map_Eggman,4(a0)
0001A8D4 317C 0400 0002             		move.w	#$400,2(a0)
0001A8DA 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8DE 4EB9 0000 AC66             		jsr	AnimateSprite
0001A8E4 6000 FF86                  		bra.w	loc_1A296
0001A8E8                            ; ===========================================================================
0001A8E8                            
0001A8E8                            loc_1A312:
0001A8E8 4A28 0001                  		tst.b	1(a0)
0001A8EC 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A8F0 6100 D56E                  		bsr.w	BossDefeated
0001A8F4 117C 0002 0018             		move.b	#2,$18(a0)
0001A8FA 117C 0000 001C             		move.b	#0,$1C(a0)
0001A900 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A908 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A90E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A912 4EB9 0000 AC66             		jsr	AnimateSprite
0001A918 6000 FF52                  		bra.w	loc_1A296
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_1A346:				; XREF: Obj85_Index
0001A91C 08E8 0000 0022             		bset	#0,$22(a0)
0001A922 2268 0034                  		movea.l	$34(a0),a1
0001A926 0CA9 0001 8302 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A92E 6700                       		beq.s	loc_1A35E
0001A930 6000 FF4A                  		bra.w	loc_1A2A6
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_1A35E:
0001A934 3169 0008 0008             		move.w	8(a1),8(a0)
0001A93A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A940 4A28 001E                  		tst.b	$1E(a0)
0001A944 6600                       		bne.s	loc_1A376
0001A946 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A94C                            
0001A94C                            loc_1A376:
0001A94C 5328 001E                  		subq.b	#1,$1E(a0)
0001A950 6E00                       		bgt.s	loc_1A38A
0001A952 5228 001A                  		addq.b	#1,$1A(a0)
0001A956 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A95C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A960                            
0001A960                            loc_1A38A:
0001A960 6000 FF0A                  		bra.w	loc_1A296
0001A964                            ; ===========================================================================
0001A964                            
0001A964                            loc_1A38E:				; XREF: Obj85_Index
0001A964 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A96A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A96E 9068 0008                  		sub.w	8(a0),d0
0001A972 6500                       		bcs.s	loc_1A3A6
0001A974 4A28 0001                  		tst.b	1(a0)
0001A978 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A97C                            
0001A97C                            loc_1A3A6:
0001A97C 4EF9 0000 DBB4             		jmp	DisplaySprite
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            loc_1A3AC:				; XREF: Obj85_Index
0001A982 117C 0000 001A             		move.b	#0,$1A(a0)
0001A988 08E8 0000 0022             		bset	#0,$22(a0)
0001A98E 2268 0034                  		movea.l	$34(a0),a1
0001A992 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A998 6600                       		bne.s	loc_1A3D0
0001A99A 0CA9 0001 8302 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9A2 6700 F984                  		beq.w	Obj85_Delete
0001A9A6                            
0001A9A6                            loc_1A3D0:
0001A9A6 6000 FED4                  		bra.w	loc_1A2A6
0001A9AA                            ; ===========================================================================
0001A9AA                            Ani_obj85:
0001A9AA                            	include "_anim\obj85.asm"
0001A9AA                            ; ---------------------------------------------------------------------------
0001A9AA                            ; Animation script - Eggman (FZ)
0001A9AA                            ; ---------------------------------------------------------------------------
0001A9AA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9AC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9B0                            		even
0001A9B0                            		even
0001A9B0                            
0001A9B0                            Map_Eggman2:
0001A9B0                            	include "_maps\Eggman2.asm"
0001A9B0                            ; ---------------------------------------------------------------------------
0001A9B0                            ; Sprite mappings - Eggman (FZ)
0001A9B0                            ; ---------------------------------------------------------------------------
0001A9B0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A9B2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A9B4 06                         byte_1A3DE:	dc.b 6
0001A9B5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A9BA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A9BF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9C4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9C9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9CE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9D3 06                         byte_1A3FD:	dc.b 6
0001A9D4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9D9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9DE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9E3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9E8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9ED 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9F2                            		even
0001A9F2                            		even
0001A9F2                            
0001A9F2                            Map_FZBoss:
0001A9F2                            	include "_maps\FZ boss.asm"
0001A9F2                            ; ---------------------------------------------------------------------------
0001A9F2                            ; Sprite mappings - boss (FZ)
0001A9F2                            ; ---------------------------------------------------------------------------
0001A9F2 0000                       		dc.w byte_1A422-Map_FZBoss
0001A9F4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A9F6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A9F8 02                         byte_1A422:	dc.b 2
0001A9F9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A9FE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA03 03                         byte_1A42D:	dc.b 3
0001AA04 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA09 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA0E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA13 02                         byte_1A43D:	dc.b 2
0001AA14 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA19 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA1E                            		even
0001AA1E                            		even
0001AA1E                            
0001AA1E                            ; ===========================================================================
0001AA1E                            
0001AA1E                            Obj84_Delete:
0001AA1E 4EF9 0000 DBF0             		jmp	DeleteObject
0001AA24                            ; ===========================================================================
0001AA24                            ; ---------------------------------------------------------------------------
0001AA24                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA24                            ; ---------------------------------------------------------------------------
0001AA24                            
0001AA24                            Obj84:					; XREF: Obj_Index
0001AA24 7000                       		moveq	#0,d0
0001AA26 1028 0024                  		move.b	$24(a0),d0
0001AA2A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA2E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA32                            ; ===========================================================================
0001AA32 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA34 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA36 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA38                            
0001AA38 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA3C 2550 0620                  		dc.w $2550, $620
0001AA40 2490 04C0                  		dc.w $2490, $4C0
0001AA44 2510 04C0                  		dc.w $2510, $4C0
0001AA48                            ; ===========================================================================
0001AA48                            
0001AA48                            Obj84_Main:				; XREF: Obj84_Index
0001AA48 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA4C 7000                       		moveq	#0,d0
0001AA4E 1028 0028                  		move.b	$28(a0),d0
0001AA52 D040                       		add.w	d0,d0
0001AA54 D2C0                       		adda.w	d0,a1
0001AA56 117C 0004 0001             		move.b	#4,1(a0)
0001AA5C 08E8 0007 0001             		bset	#7,1(a0)
0001AA62 08E8 0004 0001             		bset	#4,1(a0)
0001AA68 317C 0300 0002             		move.w	#$300,2(a0)
0001AA6E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA76 3159 0008                  		move.w	(a1)+,8(a0)
0001AA7A 3151 000C                  		move.w	(a1),$C(a0)
0001AA7E 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA82 117C 0020 0016             		move.b	#$20,$16(a0)
0001AA88 117C 0060 0017             		move.b	#$60,$17(a0)
0001AA8E 117C 0020 0019             		move.b	#$20,$19(a0)
0001AA94 117C 0060 0016             		move.b	#$60,$16(a0)
0001AA9A 117C 0003 0018             		move.b	#3,$18(a0)
0001AAA0 5428 0024                  		addq.b	#2,$24(a0)
0001AAA4                            
0001AAA4                            loc_1A4CE:				; XREF: Obj84_Index
0001AAA4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAAA 6F00                       		ble.s	loc_1A4DC
0001AAAC 08E8 0001 0001             		bset	#1,1(a0)
0001AAB2                            
0001AAB2                            loc_1A4DC:
0001AAB2 42A8 003C                  		clr.l	$3C(a0)
0001AAB6 4A28 0029                  		tst.b	$29(a0)
0001AABA 6700                       		beq.s	loc_1A4EA
0001AABC 5428 0024                  		addq.b	#2,$24(a0)
0001AAC0                            
0001AAC0                            loc_1A4EA:
0001AAC0 2028 003C                  		move.l	$3C(a0),d0
0001AAC4 2228 0038                  		move.l	$38(a0),d1
0001AAC8 D280                       		add.l	d0,d1
0001AACA 4841                       		swap	d1
0001AACC 3141 000C                  		move.w	d1,$C(a0)
0001AAD0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AAD6 6600                       		bne.s	loc_1A524
0001AAD8 4A68 0030                  		tst.w	$30(a0)
0001AADC 6A00                       		bpl.s	loc_1A524
0001AADE 70F6                       		moveq	#-$A,d0
0001AAE0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAE6 6F00                       		ble.s	loc_1A514
0001AAE8 700E                       		moveq	#$E,d0
0001AAEA                            
0001AAEA                            loc_1A514:
0001AAEA D240                       		add.w	d0,d1
0001AAEC 2268 0034                  		movea.l	$34(a0),a1
0001AAF0 3341 000C                  		move.w	d1,$C(a1)
0001AAF4 3368 0008 0008             		move.w	8(a0),8(a1)
0001AAFA                            
0001AAFA                            loc_1A524:
0001AAFA 323C 002B                  		move.w	#$2B,d1
0001AAFE 343C 0060                  		move.w	#$60,d2
0001AB02 363C 0061                  		move.w	#$61,d3
0001AB06 3828 0008                  		move.w	8(a0),d4
0001AB0A 4EB9 0000 FF84             		jsr	SolidObject
0001AB10 7000                       		moveq	#0,d0
0001AB12 3228 003C                  		move.w	$3C(a0),d1
0001AB16 6A00                       		bpl.s	loc_1A550
0001AB18 4441                       		neg.w	d1
0001AB1A 5141                       		subq.w	#8,d1
0001AB1C 6500                       		bcs.s	loc_1A55C
0001AB1E 5200                       		addq.b	#1,d0
0001AB20 E841                       		asr.w	#4,d1
0001AB22 D041                       		add.w	d1,d0
0001AB24 6000                       		bra.s	loc_1A55C
0001AB26                            ; ===========================================================================
0001AB26                            
0001AB26                            loc_1A550:
0001AB26 0441 0027                  		subi.w	#$27,d1
0001AB2A 6500                       		bcs.s	loc_1A55C
0001AB2C 5200                       		addq.b	#1,d0
0001AB2E E841                       		asr.w	#4,d1
0001AB30 D041                       		add.w	d1,d0
0001AB32                            
0001AB32                            loc_1A55C:
0001AB32 1140 001A                  		move.b	d0,$1A(a0)
0001AB36 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB3A 9068 0008                  		sub.w	8(a0),d0
0001AB3E 6B00                       		bmi.s	loc_1A578
0001AB40 0440 0140                  		subi.w	#$140,d0
0001AB44 6B00                       		bmi.s	loc_1A578
0001AB46 4A28 0001                  		tst.b	1(a0)
0001AB4A 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB4E                            
0001AB4E                            loc_1A578:
0001AB4E 4EF9 0000 DBB4             		jmp	DisplaySprite
0001AB54                            ; ===========================================================================
0001AB54                            
0001AB54                            loc_1A57E:				; XREF: Obj84_Index
0001AB54 7000                       		moveq	#0,d0
0001AB56 1028 0028                  		move.b	$28(a0),d0
0001AB5A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB5E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB62 6000 FF5C                  		bra.w	loc_1A4EA
0001AB66                            ; ===========================================================================
0001AB66 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB68 0000                       		dc.w loc_1A598-off_1A590
0001AB6A 0000                       		dc.w loc_1A604-off_1A590
0001AB6C 0000                       		dc.w loc_1A604-off_1A590
0001AB6E                            ; ===========================================================================
0001AB6E                            
0001AB6E                            loc_1A598:				; XREF: off_1A590
0001AB6E 4A28 0029                  		tst.b	$29(a0)
0001AB72 6600                       		bne.s	loc_1A5D4
0001AB74 2268 0034                  		movea.l	$34(a0),a1
0001AB78 4A29 0021                  		tst.b	$21(a1)
0001AB7C 6600                       		bne.s	loc_1A5B4
0001AB7E 6100 D2E0                  		bsr.w	BossDefeated
0001AB82 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AB8A                            
0001AB8A                            loc_1A5B4:
0001AB8A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AB92 6400                       		bcc.s	locret_1A602
0001AB94 42A8 003C                  		clr.l	$3C(a0)
0001AB98 2268 0034                  		movea.l	$34(a0),a1
0001AB9C 5369 0032                  		subq.w	#1,$32(a1)
0001ABA0 4269 0030                  		clr.w	$30(a1)
0001ABA4 5528 0024                  		subq.b	#2,$24(a0)
0001ABA8 4E75                       		rts	
0001ABAA                            ; ===========================================================================
0001ABAA                            
0001ABAA                            loc_1A5D4:
0001ABAA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABB0 6C00                       		bge.s	loc_1A5E4
0001ABB2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ABBA                            
0001ABBA                            loc_1A5E4:
0001ABBA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABC2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABC8 6E00                       		bgt.s	locret_1A602
0001ABCA 4268 003E                  		clr.w	$3E(a0)
0001ABCE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABD4 4228 0029                  		clr.b	$29(a0)
0001ABD8                            
0001ABD8                            locret_1A602:
0001ABD8 4E75                       		rts	
0001ABDA                            ; ===========================================================================
0001ABDA                            
0001ABDA                            loc_1A604:				; XREF: off_1A590
0001ABDA 08E8 0001 0001             		bset	#1,1(a0)
0001ABE0 4A28 0029                  		tst.b	$29(a0)
0001ABE4 6600                       		bne.s	loc_1A646
0001ABE6 2268 0034                  		movea.l	$34(a0),a1
0001ABEA 4A29 0021                  		tst.b	$21(a1)
0001ABEE 6600                       		bne.s	loc_1A626
0001ABF0 6100 D26E                  		bsr.w	BossDefeated
0001ABF4 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001ABFC                            
0001ABFC                            loc_1A626:
0001ABFC 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC04 6400                       		bcc.s	locret_1A674
0001AC06 42A8 003C                  		clr.l	$3C(a0)
0001AC0A 2268 0034                  		movea.l	$34(a0),a1
0001AC0E 5369 0032                  		subq.w	#1,$32(a1)
0001AC12 4269 0030                  		clr.w	$30(a1)
0001AC16 5528 0024                  		subq.b	#2,$24(a0)
0001AC1A 4E75                       		rts	
0001AC1C                            ; ===========================================================================
0001AC1C                            
0001AC1C                            loc_1A646:
0001AC1C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC22 6D00                       		blt.s	loc_1A656
0001AC24 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC2C                            
0001AC2C                            loc_1A656:
0001AC2C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC34 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC3A 6D00                       		blt.s	locret_1A674
0001AC3C 4268 003E                  		clr.w	$3E(a0)
0001AC40 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC46 4228 0029                  		clr.b	$29(a0)
0001AC4A                            
0001AC4A                            locret_1A674:
0001AC4A 4E75                       		rts	
0001AC4C                            ; ===========================================================================
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C                            Map_obj84:
0001AC4C                            	include "_maps\obj84.asm"
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC4C                            ; ---------------------------------------------------------------------------
0001AC4C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC50 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC54 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC58 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC5C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC60 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC64 06                         byte_1A68E:	dc.b 6
0001AC65 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC6A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC6F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC74 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC79 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC7E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC83 08                         byte_1A6AD:	dc.b 8
0001AC84 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC89 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC8E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC93 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC98 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC9D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACA2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACA7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACAC 0A                         byte_1A6D6:	dc.b $A
0001ACAD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACB2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACB7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACBC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACC1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACC6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACCB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACD0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACD5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACDA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACDF 0C                         byte_1A709:	dc.b $C
0001ACE0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACE5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACEA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACEF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACF4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACF9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACFE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD03 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD08 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD0D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD12 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD17 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD1C 0D                         byte_1A746:	dc.b $D
0001AD1D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD22 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD27 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD2C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD31 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD36 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD3B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD40 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD45 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD4A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD4F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD54 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD59 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD5E 0E                         byte_1A788:	dc.b $E
0001AD5F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD64 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD69 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD6E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD73 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD78 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD7D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD82 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD87 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD8C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD91 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD96 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD9B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADA0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADA5 02                         byte_1A7CF:	dc.b 2
0001ADA6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADAB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADB0                            		even
0001ADB0                            		even
0001ADB0                            
0001ADB0                            ; ===========================================================================
0001ADB0                            ; ---------------------------------------------------------------------------
0001ADB0                            ; Object 86 - energy balls (FZ)
0001ADB0                            ; ---------------------------------------------------------------------------
0001ADB0                            
0001ADB0                            Obj86:					; XREF: Obj_Index
0001ADB0 7000                       		moveq	#0,d0
0001ADB2 1028 0024                  		move.b	$24(a0),d0
0001ADB6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ADBA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ADBE                            ; ===========================================================================
0001ADBE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ADC0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADC2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADC4 0000                       		dc.w loc_1A962-Obj86_Index
0001ADC6 0000                       		dc.w loc_1A982-Obj86_Index
0001ADC8                            ; ===========================================================================
0001ADC8                            
0001ADC8                            Obj86_Main:				; XREF: Obj86_Index
0001ADC8 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADCE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADD4 317C 0300 0002             		move.w	#$300,2(a0)
0001ADDA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ADE2 117C 0000 001C             		move.b	#0,$1C(a0)
0001ADE8 117C 0003 0018             		move.b	#3,$18(a0)
0001ADEE 117C 0008 0017             		move.b	#8,$17(a0)
0001ADF4 117C 0008 0016             		move.b	#8,$16(a0)
0001ADFA 117C 0004 0001             		move.b	#4,1(a0)
0001AE00 08E8 0007 0001             		bset	#7,1(a0)
0001AE06 5428 0024                  		addq.b	#2,$24(a0)
0001AE0A                            
0001AE0A                            Obj86_Generator:			; XREF: Obj86_Index
0001AE0A 2268 0034                  		movea.l	$34(a0),a1
0001AE0E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE14 6600                       		bne.s	loc_1A850
0001AE16 10BC 003F                  		move.b	#$3F,(a0)
0001AE1A 117C 0000 0024             		move.b	#0,$24(a0)
0001AE20 4EF9 0000 DBB4             		jmp	DisplaySprite
0001AE26                            ; ===========================================================================
0001AE26                            
0001AE26                            loc_1A850:
0001AE26 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE2C 4A28 0029                  		tst.b	$29(a0)
0001AE30 6700                       		beq.s	loc_1A86C
0001AE32 5428 0024                  		addq.b	#2,$24(a0)
0001AE36 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE3C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE42                            
0001AE42                            loc_1A86C:
0001AE42 323C 0013                  		move.w	#$13,d1
0001AE46 343C 0008                  		move.w	#8,d2
0001AE4A 363C 0011                  		move.w	#$11,d3
0001AE4E 3828 0008                  		move.w	8(a0),d4
0001AE52 4EB9 0000 FF84             		jsr	SolidObject
0001AE58 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE5C 9068 0008                  		sub.w	8(a0),d0
0001AE60 6B00                       		bmi.s	loc_1A89A
0001AE62 0440 0140                  		subi.w	#$140,d0
0001AE66 6B00                       		bmi.s	loc_1A89A
0001AE68 4A28 0001                  		tst.b	1(a0)
0001AE6C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE70                            
0001AE70                            loc_1A89A:
0001AE70 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE74 4EB9 0000 AC66             		jsr	AnimateSprite
0001AE7A 4EF9 0000 DBB4             		jmp	DisplaySprite
0001AE80                            ; ===========================================================================
0001AE80                            
0001AE80                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE80 4A28 0029                  		tst.b	$29(a0)
0001AE84 6700 0000                  		beq.w	loc_1A954
0001AE88 4228 0029                  		clr.b	$29(a0)
0001AE8C D068 0030                  		add.w	$30(a0),d0
0001AE90 0240 001E                  		andi.w	#$1E,d0
0001AE94 D4C0                       		adda.w	d0,a2
0001AE96 5868 0030                  		addq.w	#4,$30(a0)
0001AE9A 4268 0032                  		clr.w	$32(a0)
0001AE9E 7403                       		moveq	#3,d2
0001AEA0                            
0001AEA0                            Obj86_Loop:
0001AEA0 4EB9 0000 E050             		jsr	SingleObjLoad2
0001AEA6 6600 0000                  		bne.w	loc_1A954
0001AEAA 12BC 0086                  		move.b	#$86,(a1)
0001AEAE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AEB4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AEBA 137C 0008 0024             		move.b	#8,$24(a1)
0001AEC0 337C 2300 0002             		move.w	#$2300,2(a1)
0001AEC6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AECE 137C 000C 0016             		move.b	#$C,$16(a1)
0001AED4 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEDA 137C 0000 0020             		move.b	#0,$20(a1)
0001AEE0 137C 0003 0018             		move.b	#3,$18(a1)
0001AEE6 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AEEC 137C 0004 0001             		move.b	#4,1(a1)
0001AEF2 08E9 0007 0001             		bset	#7,1(a1)
0001AEF8 2348 0034                  		move.l	a0,$34(a1)
0001AEFC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AF02 3228 0032                  		move.w	$32(a0),d1
0001AF06 C3FC FFB1                  		muls.w	#-$4F,d1
0001AF0A 0641 2578                  		addi.w	#$2578,d1
0001AF0E 0240 001F                  		andi.w	#$1F,d0
0001AF12 0440 0010                  		subi.w	#$10,d0
0001AF16 D041                       		add.w	d1,d0
0001AF18 3340 0030                  		move.w	d0,$30(a1)
0001AF1C 5268 0032                  		addq.w	#1,$32(a0)
0001AF20 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF26 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF2A                            
0001AF2A                            loc_1A954:
0001AF2A 4A68 0032                  		tst.w	$32(a0)
0001AF2E 6600                       		bne.s	loc_1A95E
0001AF30 5428 0024                  		addq.b	#2,$24(a0)
0001AF34                            
0001AF34                            loc_1A95E:
0001AF34 6000 FF0C                  		bra.w	loc_1A86C
0001AF38                            ; ===========================================================================
0001AF38                            
0001AF38                            loc_1A962:				; XREF: Obj86_Index
0001AF38 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF3E 4A68 0038                  		tst.w	$38(a0)
0001AF42 6600                       		bne.s	loc_1A97E
0001AF44 117C 0002 0024             		move.b	#2,$24(a0)
0001AF4A 2268 0034                  		movea.l	$34(a0),a1
0001AF4E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF54                            
0001AF54                            loc_1A97E:
0001AF54 6000 FEEC                  		bra.w	loc_1A86C
0001AF58                            ; ===========================================================================
0001AF58                            
0001AF58                            loc_1A982:				; XREF: Obj86_Index
0001AF58 7000                       		moveq	#0,d0
0001AF5A 1028 0025                  		move.b	$25(a0),d0
0001AF5E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF62 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF66 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF6A 4EB9 0000 AC66             		jsr	AnimateSprite
0001AF70 4EF9 0000 DBB4             		jmp	DisplaySprite
0001AF76                            ; ===========================================================================
0001AF76 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF78 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF7A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF7C                            ; ===========================================================================
0001AF7C                            
0001AF7C                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF7C 3028 0030                  		move.w	$30(a0),d0
0001AF80 9068 0008                  		sub.w	8(a0),d0
0001AF84 E940                       		asl.w	#4,d0
0001AF86 3140 0010                  		move.w	d0,$10(a0)
0001AF8A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AF90 5428 0025                  		addq.b	#2,$25(a0)
0001AF94 4E75                       		rts	
0001AF96                            ; ===========================================================================
0001AF96                            
0001AF96                            loc_1A9C0:				; XREF: Obj86_Index2
0001AF96 4A68 0010                  		tst.w	$10(a0)
0001AF9A 6700                       		beq.s	loc_1A9E6
0001AF9C 4EB9 0000 DB8E             		jsr	SpeedToPos
0001AFA2 3028 0008                  		move.w	8(a0),d0
0001AFA6 9068 0030                  		sub.w	$30(a0),d0
0001AFAA 6400                       		bcc.s	loc_1A9E6
0001AFAC 4268 0010                  		clr.w	$10(a0)
0001AFB0 D168 0008                  		add.w	d0,8(a0)
0001AFB4 2268 0034                  		movea.l	$34(a0),a1
0001AFB8 5369 0032                  		subq.w	#1,$32(a1)
0001AFBC                            
0001AFBC                            loc_1A9E6:
0001AFBC 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFC2 5368 0028                  		subq.w	#1,$28(a0)
0001AFC6 6600                       		bne.s	locret_1AA1C
0001AFC8 5428 0025                  		addq.b	#2,$25(a0)
0001AFCC 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFD2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFD8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFDE 7000                       		moveq	#0,d0
0001AFE0 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFE4 9068 0008                  		sub.w	8(a0),d0
0001AFE8 3140 0010                  		move.w	d0,$10(a0)
0001AFEC 317C 0140 0012             		move.w	#$140,$12(a0)
0001AFF2                            
0001AFF2                            locret_1AA1C:
0001AFF2 4E75                       		rts	
0001AFF4                            ; ===========================================================================
0001AFF4                            
0001AFF4                            loc_1AA1E:				; XREF: Obj86_Index2
0001AFF4 4EB9 0000 DB8E             		jsr	SpeedToPos
0001AFFA 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B000 6400                       		bcc.s	loc_1AA34
0001B002 5368 0028                  		subq.w	#1,$28(a0)
0001B006 6700                       		beq.s	loc_1AA34
0001B008 4E75                       		rts	
0001B00A                            ; ===========================================================================
0001B00A                            
0001B00A                            loc_1AA34:
0001B00A 2268 0034                  		movea.l	$34(a0),a1
0001B00E 5369 0038                  		subq.w	#1,$38(a1)
0001B012 6000 FA0A                  		bra.w	Obj84_Delete
0001B016                            ; ===========================================================================
0001B016                            Ani_obj86:
0001B016                            	include "_anim\obj86.asm"
0001B016                            ; ---------------------------------------------------------------------------
0001B016                            ; Animation script - energy ball launcher (FZ)
0001B016                            ; ---------------------------------------------------------------------------
0001B016 0000                       		dc.w byte_1AA46-Ani_obj86
0001B018 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B01A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B01C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B020 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B026 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B02C                            		even
0001B02C                            		even
0001B02C                            
0001B02C                            ; ---------------------------------------------------------------------------
0001B02C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B02C                            ; ---------------------------------------------------------------------------
0001B02C                            Map_obj86:
0001B02C                            	include "_maps\obj86.asm"
0001B02C                            ; ---------------------------------------------------------------------------
0001B02C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B02C                            ; ---------------------------------------------------------------------------
0001B02C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B030 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B034 01                         byte_1AA5E:	dc.b 1
0001B035 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B03A 01                         byte_1AA64:	dc.b 1
0001B03B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B040 01                         byte_1AA6A:	dc.b 1
0001B041 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B046 01                         byte_1AA70:	dc.b 1
0001B047 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B04C                            		even
0001B04C                            		even
0001B04C                            
0001B04C                            Ani_obj86a:
0001B04C                            	include "_anim\obj86a.asm"
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C                            ; Animation script - energy balls (FZ)
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B04E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B050 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B05F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B06E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B072 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B07C                            		even
0001B07C                            		even
0001B07C                            
0001B07C                            ; ---------------------------------------------------------------------------
0001B07C                            ; Sprite mappings - energy balls (FZ)
0001B07C                            ; ---------------------------------------------------------------------------
0001B07C                            Map_obj86a:
0001B07C                            	include "_maps\obj86a.asm"
0001B07C                            ; ---------------------------------------------------------------------------
0001B07C                            ; Sprite mappings - energy balls (FZ)
0001B07C                            ; ---------------------------------------------------------------------------
0001B07C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B080 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B084 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B088 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B08C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B090 0000                       		dc.w byte_1AB20-Map_obj86a
0001B092 02                         byte_1AABC:	dc.b 2
0001B093 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B098 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B09D 02                         byte_1AAC7:	dc.b 2
0001B09E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0A3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0A8 02                         byte_1AAD2:	dc.b 2
0001B0A9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0AE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B0B3 02                         byte_1AADD:	dc.b 2
0001B0B4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B0B9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B0BE 02                         byte_1AAE8:	dc.b 2
0001B0BF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0C4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0C9 02                         byte_1AAF3:	dc.b 2
0001B0CA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0CF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0D4 01                         byte_1AAFE:	dc.b 1
0001B0D5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0DA 01                         byte_1AB04:	dc.b 1
0001B0DB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B0E0 02                         byte_1AB0A:	dc.b 2
0001B0E1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B0E6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B0EB 02                         byte_1AB15:	dc.b 2
0001B0EC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B0F1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B0F6 00                         byte_1AB20:	dc.b 0
0001B0F8 00                         		even
0001B0F8 00                         		even
0001B0F8                            
0001B0F8                            ; ===========================================================================
0001B0F8                            ; ---------------------------------------------------------------------------
0001B0F8                            ; Object 3E - prison capsule
0001B0F8                            ; ---------------------------------------------------------------------------
0001B0F8                            
0001B0F8                            Obj3E:					; XREF: Obj_Index
0001B0F8 7000                       		moveq	#0,d0
0001B0FA 1028 0024                  		move.b	$24(a0),d0
0001B0FE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B102 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B106 3028 0008                  		move.w	8(a0),d0
0001B10A 0240 FF80                  		andi.w	#$FF80,d0
0001B10E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B112 0441 0080                  		subi.w	#$80,d1
0001B116 0241 FF80                  		andi.w	#$FF80,d1
0001B11A 9041                       		sub.w	d1,d0
0001B11C 0C40 0280                  		cmpi.w	#$280,d0
0001B120 6200                       		bhi.s	Obj3E_Delete
0001B122 4EF9 0000 DBB4             		jmp	DisplaySprite
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Obj3E_Delete:
0001B128 4EF9 0000 DBF0             		jmp	DeleteObject
0001B12E                            ; ===========================================================================
0001B12E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B130 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B132 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B134 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B136 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B138 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B13A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B13C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B13E                            
0001B13E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B142 040C 0501                  		dc.b 4,	$C, 5, 1
0001B146 0610 0403                  		dc.b 6,	$10, 4,	3
0001B14A 0810 0305                  		dc.b 8,	$10, 3,	5
0001B14E                            ; ===========================================================================
0001B14E                            
0001B14E                            Obj3E_Main:				; XREF: Obj3E_Index
0001B14E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B156 317C 049D 0002             		move.w	#$49D,2(a0)
0001B15C 117C 0004 0001             		move.b	#4,1(a0)
0001B162 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B168 7000                       		moveq	#0,d0
0001B16A 1028 0028                  		move.b	$28(a0),d0
0001B16E E548                       		lsl.w	#2,d0
0001B170 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B174 1159 0024                  		move.b	(a1)+,$24(a0)
0001B178 1159 0019                  		move.b	(a1)+,$19(a0)
0001B17C 1159 0018                  		move.b	(a1)+,$18(a0)
0001B180 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B184 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B188 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B18A 117C 0006 0020             		move.b	#6,$20(a0)
0001B190 117C 0008 0021             		move.b	#8,$21(a0)
0001B196                            
0001B196                            Obj3E_Not02:
0001B196 4E75                       		rts	
0001B198                            ; ===========================================================================
0001B198                            
0001B198                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B198 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B19E 6700                       		beq.s	Obj3E_ChkOpened
0001B1A0 323C 002B                  		move.w	#$2B,d1
0001B1A4 343C 0018                  		move.w	#$18,d2
0001B1A8 363C 0018                  		move.w	#$18,d3
0001B1AC 3828 0008                  		move.w	8(a0),d4
0001B1B0 4EF9 0000 FF84             		jmp	SolidObject
0001B1B6                            ; ===========================================================================
0001B1B6                            
0001B1B6                            Obj3E_ChkOpened:
0001B1B6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B1BA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B1BC 4228 0025                  		clr.b	$25(a0)
0001B1C0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1C6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1CC                            
0001B1CC                            Obj3E_DoOpen:
0001B1CC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1D2 4E75                       		rts	
0001B1D4                            ; ===========================================================================
0001B1D4                            
0001B1D4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1D4 323C 0017                  		move.w	#$17,d1
0001B1D8 343C 0008                  		move.w	#8,d2
0001B1DC 363C 0008                  		move.w	#8,d3
0001B1E0 3828 0008                  		move.w	8(a0),d4
0001B1E4 4EB9 0000 FF84             		jsr	SolidObject
0001B1EA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B1F0 4EB9 0000 AC66             		jsr	AnimateSprite
0001B1F6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B1FC 4A28 0025                  		tst.b	$25(a0)
0001B200 6700                       		beq.s	locret_1AC60
0001B202 5068 000C                  		addq.w	#8,$C(a0)
0001B206 117C 000A 0024             		move.b	#$A,$24(a0)
0001B20C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B212 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B216 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B21A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B220 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B226 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B228 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B22E 6000                       		bra.s	Obj3E_ContinueCode
0001B230                            
0001B230                            Obj3E_MoveLeft:
0001B230 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B236                            
0001B236                            Obj3E_ContinueCode:
0001B236 4228 0025                  		clr.b	$25(a0)
0001B23A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B240 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B246                            
0001B246                            locret_1AC60:
0001B246 4E75                       		rts	
0001B248                            ; ===========================================================================
0001B248                            
0001B248                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B248 7007                       		moveq	#7,d0
0001B24A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B24E 6600                       		bne.s	loc_1ACA0
0001B250 4EB9 0000 E03A             		jsr	SingleObjLoad
0001B256 6600                       		bne.s	loc_1ACA0
0001B258 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B25C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B262 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B268 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B26E 7200                       		moveq	#0,d1
0001B270 1200                       		move.b	d0,d1
0001B272 E409                       		lsr.b	#2,d1
0001B274 0441 0020                  		subi.w	#$20,d1
0001B278 D369 0008                  		add.w	d1,8(a1)
0001B27C E048                       		lsr.w	#8,d0
0001B27E E608                       		lsr.b	#3,d0
0001B280 D169 000C                  		add.w	d0,$C(a1)
0001B284                            
0001B284                            loc_1ACA0:
0001B284 5368 001E                  		subq.w	#1,$1E(a0)
0001B288 6700                       		beq.s	Obj3E_MakeAnimal
0001B28A 4E75                       		rts	
0001B28C                            ; ===========================================================================
0001B28C                            
0001B28C                            Obj3E_MakeAnimal:
0001B28C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B292 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B298 117C 0006 001A             		move.b	#6,$1A(a0)
0001B29E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2A4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2AA 7C07                       		moveq	#7,d6
0001B2AC 3A3C 009A                  		move.w	#$9A,d5
0001B2B0 78E4                       		moveq	#-$1C,d4
0001B2B2                            
0001B2B2                            Obj3E_Loop:
0001B2B2 4EB9 0000 E03A             		jsr	SingleObjLoad
0001B2B8 6600                       		bne.s	locret_1ACF8
0001B2BA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2BE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2CA D969 0008                  		add.w	d4,8(a1)
0001B2CE 5E44                       		addq.w	#7,d4
0001B2D0 3345 0036                  		move.w	d5,$36(a1)
0001B2D4 5145                       		subq.w	#8,d5
0001B2D6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2DA                            
0001B2DA                            locret_1ACF8:
0001B2DA 4E75                       		rts	
0001B2DC                            ; ===========================================================================
0001B2DC                            
0001B2DC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2DC 7007                       		moveq	#7,d0
0001B2DE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B2E2 6600                       		bne.s	loc_1AD38
0001B2E4 4EB9 0000 E03A             		jsr	SingleObjLoad
0001B2EA 6600                       		bne.s	loc_1AD38
0001B2EC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2F0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2FC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B302 0240 001F                  		andi.w	#$1F,d0
0001B306 5D40                       		subq.w	#6,d0
0001B308 4A41                       		tst.w	d1
0001B30A 6A00                       		bpl.s	loc_1AD2E
0001B30C 4440                       		neg.w	d0
0001B30E                            
0001B30E                            loc_1AD2E:
0001B30E D169 0008                  		add.w	d0,8(a1)
0001B312 337C 000C 0036             		move.w	#$C,$36(a1)
0001B318                            
0001B318                            loc_1AD38:
0001B318 5368 001E                  		subq.w	#1,$1E(a0)
0001B31C 6600                       		bne.s	locret_1AD48
0001B31E 5428 0024                  		addq.b	#2,$24(a0)
0001B322 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B328                            
0001B328                            locret_1AD48:
0001B328 4E75                       		rts	
0001B32A                            ; ===========================================================================
0001B32A                            
0001B32A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B32A 703E                       		moveq	#$3E,d0
0001B32C 7228                       		moveq	#$28,d1
0001B32E 7440                       		moveq	#$40,d2
0001B330 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B334                            
0001B334                            Obj3E_FindObj28:
0001B334 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B336 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B338 D2C2                       		adda.w	d2,a1		; next object RAM
0001B33A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B33E                            
0001B33E 4EB9 0000 F240             		jsr	GotThroughAct
0001B344 4EF9 0000 DBF0             		jmp	DeleteObject
0001B34A                            ; ===========================================================================
0001B34A                            
0001B34A                            Obj3E_Obj28Found:
0001B34A 4E75                       		rts	
0001B34C                            ; ===========================================================================
0001B34C                            Ani_obj3E:
0001B34C                            	include "_anim\obj3E.asm"
0001B34C                            ; ---------------------------------------------------------------------------
0001B34C                            ; Animation script - prison capsule
0001B34C                            ; ---------------------------------------------------------------------------
0001B34C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B34E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B350 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B354                            		even
0001B354                            		even
0001B354                            
0001B354                            ; ---------------------------------------------------------------------------
0001B354                            ; Sprite mappings - prison capsule
0001B354                            ; ---------------------------------------------------------------------------
0001B354                            Map_obj3E:
0001B354                            	include "_maps\obj3E.asm"
0001B354                            ; ---------------------------------------------------------------------------
0001B354                            ; Sprite mappings - prison capsule
0001B354                            ; ---------------------------------------------------------------------------
0001B354 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B358 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B35C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B360 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B362 07                         byte_1AD82:	dc.b 7
0001B363 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B368 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B36D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B372 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B377 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B37C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B381 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B386 01                         byte_1ADA6:	dc.b 1
0001B387 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B38C 06                         byte_1ADAC:	dc.b 6
0001B38D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B392 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B397 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B39C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3A1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3A6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3AB 01                         byte_1ADCB:	dc.b 1
0001B3AC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3B1 02                         byte_1ADD1:	dc.b 2
0001B3B2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B3B7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B3BC 01                         byte_1ADDC:	dc.b 1
0001B3BD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3C2 00                         byte_1ADE2:	dc.b 0
0001B3C4 00                         		even
0001B3C4 00                         		even
0001B3C4                            
0001B3C4                            ; ---------------------------------------------------------------------------
0001B3C4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3C4                            ; ---------------------------------------------------------------------------
0001B3C4                            
0001B3C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3C4                            
0001B3C4                            
0001B3C4                            TouchResponse:				; XREF: Obj01
0001B3C4 4E71                       		nop	
0001B3C6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3CA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3CE 5142                       		subq.w	#8,d2
0001B3D0 7A00                       		moveq	#0,d5
0001B3D2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3D6 5705                       		subq.b	#3,d5
0001B3D8 9645                       		sub.w	d5,d3
0001B3DA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B3E0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B3E2 0643 000C                  		addi.w	#$C,d3
0001B3E6 7A0A                       		moveq	#$A,d5
0001B3E8                            
0001B3E8                            Touch_NoDuck:
0001B3E8 383C 0010                  		move.w	#$10,d4
0001B3EC DA45                       		add.w	d5,d5
0001B3EE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B3F2 3C3C 005F                  		move.w	#$5F,d6
0001B3F6                            
0001B3F6                            Touch_Loop:
0001B3F6 4A29 0001                  		tst.b	1(a1)
0001B3FA 6A00                       		bpl.s	Touch_NextObj
0001B3FC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B400 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B402                            
0001B402                            Touch_NextObj:
0001B402 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B406 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B40A                            
0001B40A 7000                       		moveq	#0,d0
0001B40C 4E75                       		rts	
0001B40E                            ; ===========================================================================
0001B40E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B410 0C14                       		dc.b   $C, $14
0001B412 140C                       		dc.b  $14,  $C
0001B414 0410                       		dc.b	4, $10
0001B416 0C12                       		dc.b   $C, $12
0001B418 1010                       		dc.b  $10, $10
0001B41A 0606                       		dc.b	6,   6
0001B41C 180C                       		dc.b  $18,  $C
0001B41E 0C10                       		dc.b   $C, $10
0001B420 100C                       		dc.b  $10,  $C
0001B422 0808                       		dc.b	8,   8
0001B424 1410                       		dc.b  $14, $10
0001B426 1408                       		dc.b  $14,   8
0001B428 0E0E                       		dc.b   $E,  $E
0001B42A 1818                       		dc.b  $18, $18
0001B42C 2810                       		dc.b  $28, $10
0001B42E 1018                       		dc.b  $10, $18
0001B430 0810                       		dc.b	8, $10
0001B432 2070                       		dc.b  $20, $70
0001B434 4020                       		dc.b  $40, $20
0001B436 8020                       		dc.b  $80, $20
0001B438 2020                       		dc.b  $20, $20
0001B43A 0808                       		dc.b	8,   8
0001B43C 0404                       		dc.b	4,   4
0001B43E 2008                       		dc.b  $20,   8
0001B440 0C0C                       		dc.b   $C,  $C
0001B442 0804                       		dc.b	8,   4
0001B444 1804                       		dc.b  $18,   4
0001B446 2804                       		dc.b  $28,   4
0001B448 0408                       		dc.b	4,   8
0001B44A 0418                       		dc.b	4, $18
0001B44C 0428                       		dc.b	4, $28
0001B44E 0420                       		dc.b	4, $20
0001B450 1818                       		dc.b  $18, $18
0001B452 0C18                       		dc.b   $C, $18
0001B454 4808                       		dc.b  $48,   8
0001B456                            ; ===========================================================================
0001B456                            
0001B456                            Touch_Height:				; XREF: TouchResponse
0001B456 0240 003F                  		andi.w	#$3F,d0
0001B45A D040                       		add.w	d0,d0
0001B45C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B460 7200                       		moveq	#0,d1
0001B462 121A                       		move.b	(a2)+,d1
0001B464 3029 0008                  		move.w	8(a1),d0
0001B468 9041                       		sub.w	d1,d0
0001B46A 9042                       		sub.w	d2,d0
0001B46C 6400                       		bcc.s	loc_1AE98
0001B46E D241                       		add.w	d1,d1
0001B470 D041                       		add.w	d1,d0
0001B472 6500                       		bcs.s	Touch_Width
0001B474 6000 FF8C                  		bra.w	Touch_NextObj
0001B478                            ; ===========================================================================
0001B478                            
0001B478                            loc_1AE98:
0001B478 B044                       		cmp.w	d4,d0
0001B47A 6200 FF86                  		bhi.w	Touch_NextObj
0001B47E                            
0001B47E                            Touch_Width:
0001B47E 7200                       		moveq	#0,d1
0001B480 121A                       		move.b	(a2)+,d1
0001B482 3029 000C                  		move.w	$C(a1),d0
0001B486 9041                       		sub.w	d1,d0
0001B488 9043                       		sub.w	d3,d0
0001B48A 6400                       		bcc.s	loc_1AEB6
0001B48C D241                       		add.w	d1,d1
0001B48E D240                       		add.w	d0,d1
0001B490 6500                       		bcs.s	Touch_ChkValue
0001B492 6000 FF6E                  		bra.w	Touch_NextObj
0001B496                            ; ===========================================================================
0001B496                            
0001B496                            loc_1AEB6:
0001B496 B045                       		cmp.w	d5,d0
0001B498 6200 FF68                  		bhi.w	Touch_NextObj
0001B49C                            
0001B49C                            Touch_ChkValue:
0001B49C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4A0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4A4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4A8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4AC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4B0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B4B2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B4B6                            
0001B4B6                            ; touch	response is $40-$7F
0001B4B6                            
0001B4B6 1029 0020                  		move.b	$20(a1),d0
0001B4BA 0200 003F                  		andi.b	#$3F,d0
0001B4BE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4C2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4C4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4CA 6400 0000                  		bcc.w	locret_1AEF2
0001B4CE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4D2                            
0001B4D2                            locret_1AEF2:
0001B4D2 4E75                       		rts	
0001B4D4                            ; ===========================================================================
0001B4D4                            
0001B4D4                            Touch_Monitor:
0001B4D4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4D8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4DA 3028 000C                  		move.w	$C(a0),d0
0001B4DE 0440 0010                  		subi.w	#$10,d0
0001B4E2 B069 000C                  		cmp.w	$C(a1),d0
0001B4E6 6500                       		bcs.s	locret_1AF2E
0001B4E8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B4EC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B4F2 4A29 0025                  		tst.b	$25(a1)
0001B4F6 6600                       		bne.s	locret_1AF2E
0001B4F8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B4FC 4E75                       		rts	
0001B4FE                            ; ===========================================================================
0001B4FE                            
0001B4FE                            loc_1AF1E:
0001B4FE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B504 6600                       		bne.s	locret_1AF2E
0001B506 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B50A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B50E                            
0001B50E                            locret_1AF2E:
0001B50E 4E75                       		rts	
0001B510                            ; ===========================================================================
0001B510                            
0001B510                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B510 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B514 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B516 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B51C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B520                            
0001B520                            loc_1AF40:
0001B520 4A29 0021                  		tst.b	$21(a1)
0001B524 6700                       		beq.s	Touch_KillEnemy
0001B526 4468 0010                  		neg.w	$10(a0)
0001B52A 4468 0012                  		neg.w	$12(a0)
0001B52E E0E8 0010                  		asr	$10(a0)
0001B532 E0E8 0012                  		asr	$12(a0)
0001B536 137C 0000 0020             		move.b	#0,$20(a1)
0001B53C 5329 0021                  		subq.b	#1,$21(a1)
0001B540 6600                       		bne.s	locret_1AF68
0001B542 08E9 0007 0022             		bset	#7,$22(a1)
0001B548                            
0001B548                            locret_1AF68:
0001B548 4E75                       		rts	
0001B54A                            ; ===========================================================================
0001B54A                            
0001B54A                            Touch_KillEnemy:
0001B54A 08E9 0007 0022             		bset	#7,$22(a1)
0001B550 7000                       		moveq	#0,d0
0001B552 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B556 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B55A 0C40 0006                  		cmpi.w	#6,d0
0001B55E 6500                       		bcs.s	loc_1AF82
0001B560 7006                       		moveq	#6,d0
0001B562                            
0001B562                            loc_1AF82:
0001B562 3340 003E                  		move.w	d0,$3E(a1)
0001B566 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B56A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B570 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B572 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B576 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B57C                            
0001B57C                            loc_1AF9C:
0001B57C 6100 0000                  		bsr.w	AddPoints
0001B580 7400                       		moveq	#0,d2	; GMZ
0001B582 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B584 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B586                            
0001B586                            TouchKE_Explode:
0001B586 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B58A 137C 0000 0024             		move.b	#0,$24(a1)
0001B590 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B594                            
0001B594                            TouchKE_NextExplosion:
0001B594 5802                       		addq.b	#4,d2
0001B596 4EB9 0000 E03A             		jsr	SingleObjLoad
0001B59C 66F6                       		bne.s	TouchKE_NextExplosion
0001B59E 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5A4 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5AA 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5AE                            
0001B5AE 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5B0 4A68 0012                  		tst.w	$12(a0)
0001B5B4 6B00                       		bmi.s	loc_1AFC2
0001B5B6 3028 000C                  		move.w	$C(a0),d0
0001B5BA B069 000C                  		cmp.w	$C(a1),d0
0001B5BE 6400                       		bcc.s	loc_1AFCA
0001B5C0 4468 0012                  		neg.w	$12(a0)
0001B5C4 4E75                       		rts	
0001B5C6                            ; ===========================================================================
0001B5C6                            
0001B5C6                            loc_1AFC2:
0001B5C6 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5CC 4E75                       		rts	
0001B5CE                            ; ===========================================================================
0001B5CE                            
0001B5CE                            loc_1AFCA:
0001B5CE 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5D4 4E75                       		rts	
0001B5D6                            ; ===========================================================================
0001B5D6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5DE 08E9 0007 0022             		bset	#7,$22(a1)
0001B5E4                            
0001B5E4                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B5E4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B5E8 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B5EA                            
0001B5EA                            loc_1AFE6:				; XREF: Touch_Hurt
0001B5EA 70FF                       		moveq	#-1,d0
0001B5EC 4E75                       		rts	
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B5EE 4E71                       		nop	
0001B5F0 4A68 0030                  		tst.w	$30(a0)
0001B5F4 66F4                       		bne.s	loc_1AFE6
0001B5F6 2449                       		movea.l	a1,a2
0001B5F8                            
0001B5F8                            ; End of function TouchResponse
0001B5F8                            ; continue straight to HurtSonic
0001B5F8                            
0001B5F8                            ; ---------------------------------------------------------------------------
0001B5F8                            ; Hurting Sonic	subroutine
0001B5F8                            ; ---------------------------------------------------------------------------
0001B5F8                            
0001B5F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5F8                            
0001B5F8                            
0001B5F8                            HurtSonic:
0001B5F8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B5FC 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B5FE 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B602 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B606 4EB9 0000 E03A             		jsr	SingleObjLoad
0001B60C 6600                       		bne.s	Hurt_Shield
0001B60E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B612 3368 0008 0008             		move.w	8(a0),8(a1)
0001B618 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B61E                            
0001B61E                            Hurt_Shield:
0001B61E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B624 117C 0004 0024             		move.b	#4,$24(a0)
0001B62A 6100 8762                  		bsr.w	Sonic_ResetOnFloor
0001B62E 08E8 0001 0022             		bset	#1,$22(a0)
0001B634 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B63A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B640 0828 0006 0022             		btst	#6,$22(a0)
0001B646 6700                       		beq.s	Hurt_Reverse
0001B648 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B64E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B654                            
0001B654                            Hurt_Reverse:
0001B654 3028 0008                  		move.w	8(a0),d0
0001B658 B06A 0008                  		cmp.w	8(a2),d0
0001B65C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B65E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B662                            
0001B662                            Hurt_ChkSpikes:
0001B662 317C 0000 0014             		move.w	#0,$14(a0)
0001B668 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B66E 317C 0078 0030             		move.w	#$78,$30(a0)
0001B674 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B678 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B67C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B67E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B682 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B684 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B688                            
0001B688                            Hurt_Sound:
0001B688 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B68E 70FF                       		moveq	#-1,d0
0001B690 4E75                       		rts	
0001B692                            ; ===========================================================================
0001B692                            
0001B692                            Hurt_NoRings:
0001B692 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B696 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B69A                            ; End of function HurtSonic
0001B69A                            
0001B69A                            ; ---------------------------------------------------------------------------
0001B69A                            ; Subroutine to	kill Sonic
0001B69A                            ; ---------------------------------------------------------------------------
0001B69A                            
0001B69A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B69A                            
0001B69A                            
0001B69A                            KillSonic:
0001B69A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B69E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6A0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6A6 117C 0006 0024             		move.b	#6,$24(a0)
0001B6AC 6100 86E0                  		bsr.w	Sonic_ResetOnFloor
0001B6B0 08E8 0001 0022             		bset	#1,$22(a0)
0001B6B6 317C F900 0012             		move.w	#-$700,$12(a0)
0001B6BC 317C 0000 0010             		move.w	#0,$10(a0)
0001B6C2 317C 0000 0014             		move.w	#0,$14(a0)
0001B6C8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6CE 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6D4 08E8 0007 0002             		bset	#7,2(a0)
0001B6DA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6DE 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B6E2 6600                       		bne.s	Kill_Sound
0001B6E4 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B6E8                            
0001B6E8                            Kill_Sound:
0001B6E8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6EE                            
0001B6EE                            Kill_NoDeath:
0001B6EE 70FF                       		moveq	#-1,d0
0001B6F0 4E75                       		rts	
0001B6F2                            ; End of function KillSonic
0001B6F2                            
0001B6F2                            
0001B6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6F2                            
0001B6F2                            
0001B6F2                            Touch_Special:				; XREF: Touch_ChkValue
0001B6F2 1229 0020                  		move.b	$20(a1),d1
0001B6F6 0201 003F                  		andi.b	#$3F,d1
0001B6FA 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B6FE 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B700 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B704 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B706 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B70A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B70C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B710 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B712 4E75                       		rts	
0001B714                            ; ===========================================================================
0001B714                            
0001B714                            Touch_CatKiller:			; XREF: Touch_Special
0001B714 6000 FEC8                  		bra.w	loc_1AFDA
0001B718                            ; ===========================================================================
0001B718                            
0001B718                            Touch_Yadrin:				; XREF: Touch_Special
0001B718 9A40                       		sub.w	d0,d5
0001B71A 0C45 0008                  		cmpi.w	#8,d5
0001B71E 6400                       		bcc.s	loc_1B144
0001B720 3029 0008                  		move.w	8(a1),d0
0001B724 5940                       		subq.w	#4,d0
0001B726 0829 0000 0022             		btst	#0,$22(a1)
0001B72C 6700                       		beq.s	loc_1B130
0001B72E 0440 0010                  		subi.w	#$10,d0
0001B732                            
0001B732                            loc_1B130:
0001B732 9042                       		sub.w	d2,d0
0001B734 6400                       		bcc.s	loc_1B13C
0001B736 0640 0018                  		addi.w	#$18,d0
0001B73A 6500                       		bcs.s	loc_1B140
0001B73C 6000                       		bra.s	loc_1B144
0001B73E                            ; ===========================================================================
0001B73E                            
0001B73E                            loc_1B13C:
0001B73E B044                       		cmp.w	d4,d0
0001B740 6200                       		bhi.s	loc_1B144
0001B742                            
0001B742                            loc_1B140:
0001B742 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B746                            ; ===========================================================================
0001B746                            
0001B746                            loc_1B144:
0001B746 6000 FDC8                  		bra.w	Touch_Enemy
0001B74A                            ; ===========================================================================
0001B74A                            
0001B74A                            Touch_D7orE1:				; XREF: Touch_Special
0001B74A 5229 0021                  		addq.b	#1,$21(a1)
0001B74E 4E75                       		rts	
0001B750                            ; End of function Touch_Special
0001B750                            
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            ; Subroutine to	show the special stage layout
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            
0001B750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B750                            
0001B750                            
0001B750                            SS_ShowLayout:				; XREF: SpecialStage
0001B750 6100 0000                  		bsr.w	SS_AniWallsRings
0001B754 6100 0000                  		bsr.w	SS_AniItems
0001B758 3F05                       		move.w	d5,-(sp)
0001B75A 43F8 8000                  		lea	($FFFF8000).w,a1
0001B75E 1038 F780                  		move.b	($FFFFF780).w,d0
0001B762 0200 00FC                  		andi.b	#$FC,d0
0001B766 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B76C 3800                       		move.w	d0,d4
0001B76E 3A01                       		move.w	d1,d5
0001B770 C9FC 0018                  		muls.w	#$18,d4
0001B774 CBFC 0018                  		muls.w	#$18,d5
0001B778 7400                       		moveq	#0,d2
0001B77A 3438 F700                  		move.w	($FFFFF700).w,d2
0001B77E 84FC 0018                  		divu.w	#$18,d2
0001B782 4842                       		swap	d2
0001B784 4442                       		neg.w	d2
0001B786 0642 FF4C                  		addi.w	#-$B4,d2
0001B78A 7600                       		moveq	#0,d3
0001B78C 3638 F704                  		move.w	($FFFFF704).w,d3
0001B790 86FC 0018                  		divu.w	#$18,d3
0001B794 4843                       		swap	d3
0001B796 4443                       		neg.w	d3
0001B798 0643 FF4C                  		addi.w	#-$B4,d3
0001B79C 3E3C 000F                  		move.w	#$F,d7
0001B7A0                            
0001B7A0                            loc_1B19E:
0001B7A0 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7A4 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7A8 4440                       		neg.w	d0
0001B7AA C3C2                       		muls.w	d2,d1
0001B7AC C1C3                       		muls.w	d3,d0
0001B7AE 2C00                       		move.l	d0,d6
0001B7B0 DC81                       		add.l	d1,d6
0001B7B2 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B7B6 C1C2                       		muls.w	d2,d0
0001B7B8 C3C3                       		muls.w	d3,d1
0001B7BA D280                       		add.l	d0,d1
0001B7BC 2406                       		move.l	d6,d2
0001B7BE 3C3C 000F                  		move.w	#$F,d6
0001B7C2                            
0001B7C2                            loc_1B1C0:
0001B7C2 2002                       		move.l	d2,d0
0001B7C4 E080                       		asr.l	#8,d0
0001B7C6 32C0                       		move.w	d0,(a1)+
0001B7C8 2001                       		move.l	d1,d0
0001B7CA E080                       		asr.l	#8,d0
0001B7CC 32C0                       		move.w	d0,(a1)+
0001B7CE D485                       		add.l	d5,d2
0001B7D0 D284                       		add.l	d4,d1
0001B7D2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7D6                            
0001B7D6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7DA 0643 0018                  		addi.w	#$18,d3
0001B7DE 51CF FFC0                  		dbf	d7,loc_1B19E
0001B7E2                            
0001B7E2 3A1F                       		move.w	(sp)+,d5
0001B7E4 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B7EA 7000                       		moveq	#0,d0
0001B7EC 3038 F704                  		move.w	($FFFFF704).w,d0
0001B7F0 80FC 0018                  		divu.w	#$18,d0
0001B7F4 C0FC 0080                  		mulu.w	#$80,d0
0001B7F8 D1C0                       		adda.l	d0,a0
0001B7FA 7000                       		moveq	#0,d0
0001B7FC 3038 F700                  		move.w	($FFFFF700).w,d0
0001B800 80FC 0018                  		divu.w	#$18,d0
0001B804 D0C0                       		adda.w	d0,a0
0001B806 49F8 8000                  		lea	($FFFF8000).w,a4
0001B80A 3E3C 000F                  		move.w	#$F,d7
0001B80E                            
0001B80E                            loc_1B20C:
0001B80E 3C3C 000F                  		move.w	#$F,d6
0001B812                            
0001B812                            loc_1B210:
0001B812 7000                       		moveq	#0,d0
0001B814 1018                       		move.b	(a0)+,d0
0001B816 6700                       		beq.s	loc_1B268
0001B818 0C00 004E                  		cmpi.b	#$4E,d0
0001B81C 6200                       		bhi.s	loc_1B268
0001B81E 3614                       		move.w	(a4),d3
0001B820 0643 0120                  		addi.w	#$120,d3
0001B824 0C43 0070                  		cmpi.w	#$70,d3
0001B828 6500                       		bcs.s	loc_1B268
0001B82A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B82E 6400                       		bcc.s	loc_1B268
0001B830 342C 0002                  		move.w	2(a4),d2
0001B834 0642 00F0                  		addi.w	#$F0,d2
0001B838 0C42 0070                  		cmpi.w	#$70,d2
0001B83C 6500                       		bcs.s	loc_1B268
0001B83E 0C42 0170                  		cmpi.w	#$170,d2
0001B842 6400                       		bcc.s	loc_1B268
0001B844 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B84A E748                       		lsl.w	#3,d0
0001B84C 4BF5 0000                  		lea	(a5,d0.w),a5
0001B850 225D                       		movea.l	(a5)+,a1
0001B852 321D                       		move.w	(a5)+,d1
0001B854 D241                       		add.w	d1,d1
0001B856 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B85A 365D                       		movea.w	(a5)+,a3
0001B85C 7200                       		moveq	#0,d1
0001B85E 1219                       		move.b	(a1)+,d1
0001B860 5301                       		subq.b	#1,d1
0001B862 6B00                       		bmi.s	loc_1B268
0001B864 4EB9 0000 DD12             		jsr	sub_D762
0001B86A                            
0001B86A                            loc_1B268:
0001B86A 584C                       		addq.w	#4,a4
0001B86C 51CE FFA4                  		dbf	d6,loc_1B210
0001B870                            
0001B870 41E8 0070                  		lea	$70(a0),a0
0001B874 51CF FF98                  		dbf	d7,loc_1B20C
0001B878                            
0001B878 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B87C 0C05 0050                  		cmpi.b	#$50,d5
0001B880 6700                       		beq.s	loc_1B288
0001B882 24BC 0000 0000             		move.l	#0,(a2)
0001B888 4E75                       		rts	
0001B88A                            ; ===========================================================================
0001B88A                            
0001B88A                            loc_1B288:
0001B88A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B890 4E75                       		rts	
0001B892                            ; End of function SS_ShowLayout
0001B892                            
0001B892                            ; ---------------------------------------------------------------------------
0001B892                            ; Subroutine to	animate	walls and rings	in the special stage
0001B892                            ; ---------------------------------------------------------------------------
0001B892                            
0001B892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B892                            
0001B892                            
0001B892                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B892 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B898 7000                       		moveq	#0,d0
0001B89A 1038 F780                  		move.b	($FFFFF780).w,d0
0001B89E E408                       		lsr.b	#2,d0
0001B8A0 0240 000F                  		andi.w	#$F,d0
0001B8A4 7223                       		moveq	#$23,d1
0001B8A6                            
0001B8A6                            loc_1B2A4:
0001B8A6 3280                       		move.w	d0,(a1)
0001B8A8 5049                       		addq.w	#8,a1
0001B8AA 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8AE                            
0001B8AE 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B8B4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B8B8 6A00                       		bpl.s	loc_1B2C8
0001B8BA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B8C0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8C4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8CA                            
0001B8CA                            loc_1B2C8:
0001B8CA 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8D0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8D4 6A00                       		bpl.s	loc_1B2E4
0001B8D6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8DC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B8E0 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B8E6                            
0001B8E6                            loc_1B2E4:
0001B8E6 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B8EA 1340 0138                  		move.b	d0,$138(a1)
0001B8EE 1340 0160                  		move.b	d0,$160(a1)
0001B8F2 1340 0148                  		move.b	d0,$148(a1)
0001B8F6 1340 0150                  		move.b	d0,$150(a1)
0001B8FA 1340 01D8                  		move.b	d0,$1D8(a1)
0001B8FE 1340 01E0                  		move.b	d0,$1E0(a1)
0001B902 1340 01E8                  		move.b	d0,$1E8(a1)
0001B906 1340 01F0                  		move.b	d0,$1F0(a1)
0001B90A 1340 01F8                  		move.b	d0,$1F8(a1)
0001B90E 1340 0200                  		move.b	d0,$200(a1)
0001B912 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B916 6A00                       		bpl.s	loc_1B326
0001B918 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B91E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B922 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B928                            
0001B928                            loc_1B326:
0001B928 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B92C 1340 0168                  		move.b	d0,$168(a1)
0001B930 1340 0170                  		move.b	d0,$170(a1)
0001B934 1340 0178                  		move.b	d0,$178(a1)
0001B938 1340 0180                  		move.b	d0,$180(a1)
0001B93C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B940 6A00                       		bpl.s	loc_1B350
0001B942 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B948 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B94C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B952                            
0001B952                            loc_1B350:
0001B952 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B958 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B95E 7000                       		moveq	#0,d0
0001B960 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B964 D040                       		add.w	d0,d0
0001B966 41F0 0000                  		lea	(a0,d0.w),a0
0001B96A 3290                       		move.w	(a0),(a1)
0001B96C 3368 0002 0008             		move.w	2(a0),8(a1)
0001B972 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B978 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B97E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B984 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B98A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B990 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B996 D0FC 0020                  		adda.w	#$20,a0
0001B99A D2FC 0048                  		adda.w	#$48,a1
0001B99E 3290                       		move.w	(a0),(a1)
0001B9A0 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9A6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9AC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9B2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9B8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9BE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9C4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9CA D0FC 0020                  		adda.w	#$20,a0
0001B9CE D2FC 0048                  		adda.w	#$48,a1
0001B9D2 3290                       		move.w	(a0),(a1)
0001B9D4 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9DA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9E0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9E6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9EC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9F2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9F8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9FE D0FC 0020                  		adda.w	#$20,a0
0001BA02 D2FC 0048                  		adda.w	#$48,a1
0001BA06 3290                       		move.w	(a0),(a1)
0001BA08 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA0E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA14 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA1A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA20 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA26 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA2C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA32 D0FC 0020                  		adda.w	#$20,a0
0001BA36 D2FC 0048                  		adda.w	#$48,a1
0001BA3A 4E75                       		rts	
0001BA3C                            ; End of function SS_AniWallsRings
0001BA3C                            
0001BA3C                            ; ===========================================================================
0001BA3C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA4C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA5C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA6C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA7C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA8C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BA9C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAAC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            ; Subroutine to	remove items when you collect them in the special stage
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            
0001BABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BABC                            
0001BABC                            
0001BABC                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BABC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BAC2 303C 001F                  		move.w	#$1F,d0
0001BAC6                            
0001BAC6                            loc_1B4C4:
0001BAC6 4A12                       		tst.b	(a2)
0001BAC8 6700                       		beq.s	locret_1B4CE
0001BACA 504A                       		addq.w	#8,a2
0001BACC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAD0                            
0001BAD0                            locret_1B4CE:
0001BAD0 4E75                       		rts	
0001BAD2                            ; End of function SS_RemoveCollectedItem
0001BAD2                            
0001BAD2                            ; ---------------------------------------------------------------------------
0001BAD2                            ; Subroutine to	animate	special	stage items when you touch them
0001BAD2                            ; ---------------------------------------------------------------------------
0001BAD2                            
0001BAD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAD2                            
0001BAD2                            
0001BAD2                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAD2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BAD8 3E3C 001F                  		move.w	#$1F,d7
0001BADC                            
0001BADC                            loc_1B4DA:
0001BADC 7000                       		moveq	#0,d0
0001BADE 1010                       		move.b	(a0),d0
0001BAE0 6700                       		beq.s	loc_1B4E8
0001BAE2 E548                       		lsl.w	#2,d0
0001BAE4 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BAE8 4E91                       		jsr	(a1)
0001BAEA                            
0001BAEA                            loc_1B4E8:
0001BAEA 5048                       		addq.w	#8,a0
0001BAEC                            
0001BAEC                            loc_1B4EA:
0001BAEC 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BAF0                            
0001BAF0 4E75                       		rts	
0001BAF2                            ; End of function SS_AniItems
0001BAF2                            
0001BAF2                            ; ===========================================================================
0001BAF2 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BAF6 0000 0000                  		dc.l SS_AniBumper
0001BAFA 0000 0000                  		dc.l SS_Ani1Up
0001BAFE 0000 0000                  		dc.l SS_AniReverse
0001BB02 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB06 0000 0000                  		dc.l SS_AniGlassBlock
0001BB0A                            ; ===========================================================================
0001BB0A                            
0001BB0A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB0A 5328 0002                  		subq.b	#1,2(a0)
0001BB0E 6A00                       		bpl.s	locret_1B530
0001BB10 117C 0005 0002             		move.b	#5,2(a0)
0001BB16 7000                       		moveq	#0,d0
0001BB18 1028 0003                  		move.b	3(a0),d0
0001BB1C 5228 0003                  		addq.b	#1,3(a0)
0001BB20 2268 0004                  		movea.l	4(a0),a1
0001BB24 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB28 1280                       		move.b	d0,(a1)
0001BB2A 6600                       		bne.s	locret_1B530
0001BB2C 4290                       		clr.l	(a0)
0001BB2E 42A8 0004                  		clr.l	4(a0)
0001BB32                            
0001BB32                            locret_1B530:
0001BB32 4E75                       		rts	
0001BB34                            ; ===========================================================================
0001BB34 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB3A                            ; ===========================================================================
0001BB3A                            
0001BB3A                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB3A 5328 0002                  		subq.b	#1,2(a0)
0001BB3E 6A00                       		bpl.s	locret_1B566
0001BB40 117C 0007 0002             		move.b	#7,2(a0)
0001BB46 7000                       		moveq	#0,d0
0001BB48 1028 0003                  		move.b	3(a0),d0
0001BB4C 5228 0003                  		addq.b	#1,3(a0)
0001BB50 2268 0004                  		movea.l	4(a0),a1
0001BB54 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB58 6600                       		bne.s	loc_1B564
0001BB5A 4290                       		clr.l	(a0)
0001BB5C 42A8 0004                  		clr.l	4(a0)
0001BB60 12BC 0025                  		move.b	#$25,(a1)
0001BB64 4E75                       		rts	
0001BB66                            ; ===========================================================================
0001BB66                            
0001BB66                            loc_1B564:
0001BB66 1280                       		move.b	d0,(a1)
0001BB68                            
0001BB68                            locret_1B566:
0001BB68 4E75                       		rts	
0001BB6A                            ; ===========================================================================
0001BB6A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB70                            ; ===========================================================================
0001BB70                            
0001BB70                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB70 5328 0002                  		subq.b	#1,2(a0)
0001BB74 6A00                       		bpl.s	locret_1B596
0001BB76 117C 0005 0002             		move.b	#5,2(a0)
0001BB7C 7000                       		moveq	#0,d0
0001BB7E 1028 0003                  		move.b	3(a0),d0
0001BB82 5228 0003                  		addq.b	#1,3(a0)
0001BB86 2268 0004                  		movea.l	4(a0),a1
0001BB8A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BB8E 1280                       		move.b	d0,(a1)
0001BB90 6600                       		bne.s	locret_1B596
0001BB92 4290                       		clr.l	(a0)
0001BB94 42A8 0004                  		clr.l	4(a0)
0001BB98                            
0001BB98                            locret_1B596:
0001BB98 4E75                       		rts	
0001BB9A                            ; ===========================================================================
0001BB9A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBA0                            ; ===========================================================================
0001BBA0                            
0001BBA0                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBA0 5328 0002                  		subq.b	#1,2(a0)
0001BBA4 6A00                       		bpl.s	locret_1B5CC
0001BBA6 117C 0007 0002             		move.b	#7,2(a0)
0001BBAC 7000                       		moveq	#0,d0
0001BBAE 1028 0003                  		move.b	3(a0),d0
0001BBB2 5228 0003                  		addq.b	#1,3(a0)
0001BBB6 2268 0004                  		movea.l	4(a0),a1
0001BBBA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BBBE 6600                       		bne.s	loc_1B5CA
0001BBC0 4290                       		clr.l	(a0)
0001BBC2 42A8 0004                  		clr.l	4(a0)
0001BBC6 12BC 002B                  		move.b	#$2B,(a1)
0001BBCA 4E75                       		rts	
0001BBCC                            ; ===========================================================================
0001BBCC                            
0001BBCC                            loc_1B5CA:
0001BBCC 1280                       		move.b	d0,(a1)
0001BBCE                            
0001BBCE                            locret_1B5CC:
0001BBCE 4E75                       		rts	
0001BBD0                            ; ===========================================================================
0001BBD0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBD6                            ; ===========================================================================
0001BBD6                            
0001BBD6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBD6 5328 0002                  		subq.b	#1,2(a0)
0001BBDA 6A00                       		bpl.s	locret_1B60C
0001BBDC 117C 0005 0002             		move.b	#5,2(a0)
0001BBE2 7000                       		moveq	#0,d0
0001BBE4 1028 0003                  		move.b	3(a0),d0
0001BBE8 5228 0003                  		addq.b	#1,3(a0)
0001BBEC 2268 0004                  		movea.l	4(a0),a1
0001BBF0 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BBF4 1280                       		move.b	d0,(a1)
0001BBF6 6600                       		bne.s	locret_1B60C
0001BBF8 4290                       		clr.l	(a0)
0001BBFA 42A8 0004                  		clr.l	4(a0)
0001BBFE 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC04 303C 00A8                  		move.w	#$A8,d0
0001BC08 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC0E                            
0001BC0E                            locret_1B60C:
0001BC0E 4E75                       		rts	
0001BC10                            ; ===========================================================================
0001BC10 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC16                            ; ===========================================================================
0001BC16                            
0001BC16                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC16 5328 0002                  		subq.b	#1,2(a0)
0001BC1A 6A00                       		bpl.s	locret_1B640
0001BC1C 117C 0001 0002             		move.b	#1,2(a0)
0001BC22 7000                       		moveq	#0,d0
0001BC24 1028 0003                  		move.b	3(a0),d0
0001BC28 5228 0003                  		addq.b	#1,3(a0)
0001BC2C 2268 0004                  		movea.l	4(a0),a1
0001BC30 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC34 1280                       		move.b	d0,(a1)
0001BC36 6600                       		bne.s	locret_1B640
0001BC38 12A8 0004                  		move.b	4(a0),(a1)
0001BC3C 4290                       		clr.l	(a0)
0001BC3E 42A8 0004                  		clr.l	4(a0)
0001BC42                            
0001BC42                            locret_1B640:
0001BC42 4E75                       		rts	
0001BC44                            ; ===========================================================================
0001BC44 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC4E                            ; ---------------------------------------------------------------------------
0001BC4E                            ; Special stage	layout pointers
0001BC4E                            ; ---------------------------------------------------------------------------
0001BC4E                            SS_LayoutIndex:
0001BC4E                            	include "_inc\Special stage layout pointers.asm"
0001BC4E                            ; ---------------------------------------------------------------------------
0001BC4E                            ; Special stage	layout pointers
0001BC4E                            ; ---------------------------------------------------------------------------
0001BC4E 0000 0000                  	dc.l SS_1
0001BC52 0000 0000                  	dc.l SS_2
0001BC56 0000 0000                  	dc.l SS_3
0001BC5A 0000 0000                  	dc.l SS_4
0001BC5E 0000 0000                  	dc.l SS_5
0001BC62 0000 0000                  	dc.l SS_6
0001BC66                            	even
0001BC66                            	even
0001BC66                            
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            ; Special stage	start locations
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC7E                            		even
0001BC7E                            
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            ; Subroutine to	load special stage layout
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            
0001BC7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC7E                            
0001BC7E                            
0001BC7E                            SS_Load:				; XREF: SpecialStage
0001BC7E 7000                       		moveq	#0,d0
0001BC80 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC84 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BC88 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BC8E 6500                       		bcs.s	SS_ChkEmldNum
0001BC90 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BC96                            
0001BC96                            SS_ChkEmldNum:
0001BC96 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BC9C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BC9E 7200                       		moveq	#0,d1
0001BCA0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCA4 5301                       		subq.b	#1,d1
0001BCA6 6500                       		bcs.s	SS_LoadData
0001BCA8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCAC                            
0001BCAC                            SS_ChkEmldLoop:	
0001BCAC B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCB0 6600                       		bne.s	SS_ChkEmldRepeat
0001BCB2 60CA                       		bra.s	SS_Load
0001BCB4                            ; ===========================================================================
0001BCB4                            
0001BCB4                            SS_ChkEmldRepeat:
0001BCB4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BCB8                            
0001BCB8                            SS_LoadData:
0001BCB8 E548                       		lsl.w	#2,d0
0001BCBA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BCBE 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCC2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCC6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCCA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCD0 303C 0000                  		move.w	#0,d0
0001BCD4 4EB9 0000 193E             		jsr	(EniDec).l
0001BCDA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BCE0 303C 0FFF                  		move.w	#$FFF,d0
0001BCE4                            
0001BCE4                            SS_ClrRAM3:
0001BCE4 4299                       		clr.l	(a1)+
0001BCE6 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BCEA                            
0001BCEA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BCF0 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BCF6 723F                       		moveq	#$3F,d1
0001BCF8                            
0001BCF8                            loc_1B6F6:
0001BCF8 743F                       		moveq	#$3F,d2
0001BCFA                            
0001BCFA                            loc_1B6F8:
0001BCFA 12D8                       		move.b	(a0)+,(a1)+
0001BCFC 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD00                            
0001BD00 43E9 0040                  		lea	$40(a1),a1
0001BD04 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD08                            
0001BD08 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD0E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD14 724D                       		moveq	#$4D,d1
0001BD16                            
0001BD16                            loc_1B714:
0001BD16 22D8                       		move.l	(a0)+,(a1)+
0001BD18 32FC 0000                  		move.w	#0,(a1)+
0001BD1C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD22 32D8                       		move.w	(a0)+,(a1)+
0001BD24 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD28                            
0001BD28 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD2E 323C 003F                  		move.w	#$3F,d1
0001BD32                            
0001BD32                            loc_1B730:
0001BD32                            
0001BD32 4299                       		clr.l	(a1)+
0001BD34 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD38                            
0001BD38 4E75                       		rts	
0001BD3A                            ; End of function SS_Load
0001BD3A                            
0001BD3A                            ; ===========================================================================
0001BD3A                            ; ---------------------------------------------------------------------------
0001BD3A                            ; Special stage	mappings and VRAM pointers
0001BD3A                            ; ---------------------------------------------------------------------------
0001BD3A                            SS_MapIndex:
0001BD3A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD3A                            ; ---------------------------------------------------------------------------
0001BD3A                            ; Special stage	mappings and VRAM pointers
0001BD3A                            ; ---------------------------------------------------------------------------
0001BD3A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD3E 0142                       	dc.w $142		; VRAM setting
0001BD40 0000 0000                  	dc.l Map_SSWalls
0001BD44 0142                       	dc.w $142
0001BD46 0000 0000                  	dc.l Map_SSWalls
0001BD4A 0142                       	dc.w $142
0001BD4C 0000 0000                  	dc.l Map_SSWalls
0001BD50 0142                       	dc.w $142
0001BD52 0000 0000                  	dc.l Map_SSWalls
0001BD56 0142                       	dc.w $142
0001BD58 0000 0000                  	dc.l Map_SSWalls
0001BD5C 0142                       	dc.w $142
0001BD5E 0000 0000                  	dc.l Map_SSWalls
0001BD62 0142                       	dc.w $142
0001BD64 0000 0000                  	dc.l Map_SSWalls
0001BD68 0142                       	dc.w $142
0001BD6A 0000 0000                  	dc.l Map_SSWalls
0001BD6E 0142                       	dc.w $142
0001BD70 0000 0000                  	dc.l Map_SSWalls
0001BD74 2142                       	dc.w $2142
0001BD76 0000 0000                  	dc.l Map_SSWalls
0001BD7A 2142                       	dc.w $2142
0001BD7C 0000 0000                  	dc.l Map_SSWalls
0001BD80 2142                       	dc.w $2142
0001BD82 0000 0000                  	dc.l Map_SSWalls
0001BD86 2142                       	dc.w $2142
0001BD88 0000 0000                  	dc.l Map_SSWalls
0001BD8C 2142                       	dc.w $2142
0001BD8E 0000 0000                  	dc.l Map_SSWalls
0001BD92 2142                       	dc.w $2142
0001BD94 0000 0000                  	dc.l Map_SSWalls
0001BD98 2142                       	dc.w $2142
0001BD9A 0000 0000                  	dc.l Map_SSWalls
0001BD9E 2142                       	dc.w $2142
0001BDA0 0000 0000                  	dc.l Map_SSWalls
0001BDA4 2142                       	dc.w $2142
0001BDA6 0000 0000                  	dc.l Map_SSWalls
0001BDAA 4142                       	dc.w $4142
0001BDAC 0000 0000                  	dc.l Map_SSWalls
0001BDB0 4142                       	dc.w $4142
0001BDB2 0000 0000                  	dc.l Map_SSWalls
0001BDB6 4142                       	dc.w $4142
0001BDB8 0000 0000                  	dc.l Map_SSWalls
0001BDBC 4142                       	dc.w $4142
0001BDBE 0000 0000                  	dc.l Map_SSWalls
0001BDC2 4142                       	dc.w $4142
0001BDC4 0000 0000                  	dc.l Map_SSWalls
0001BDC8 4142                       	dc.w $4142
0001BDCA 0000 0000                  	dc.l Map_SSWalls
0001BDCE 4142                       	dc.w $4142
0001BDD0 0000 0000                  	dc.l Map_SSWalls
0001BDD4 4142                       	dc.w $4142
0001BDD6 0000 0000                  	dc.l Map_SSWalls
0001BDDA 4142                       	dc.w $4142
0001BDDC 0000 0000                  	dc.l Map_SSWalls
0001BDE0 6142                       	dc.w $6142
0001BDE2 0000 0000                  	dc.l Map_SSWalls
0001BDE6 6142                       	dc.w $6142
0001BDE8 0000 0000                  	dc.l Map_SSWalls
0001BDEC 6142                       	dc.w $6142
0001BDEE 0000 0000                  	dc.l Map_SSWalls
0001BDF2 6142                       	dc.w $6142
0001BDF4 0000 0000                  	dc.l Map_SSWalls
0001BDF8 6142                       	dc.w $6142
0001BDFA 0000 0000                  	dc.l Map_SSWalls
0001BDFE 6142                       	dc.w $6142
0001BE00 0000 0000                  	dc.l Map_SSWalls
0001BE04 6142                       	dc.w $6142
0001BE06 0000 0000                  	dc.l Map_SSWalls
0001BE0A 6142                       	dc.w $6142
0001BE0C 0000 0000                  	dc.l Map_SSWalls
0001BE10 6142                       	dc.w $6142
0001BE12 0000 F0A8                  	dc.l Map_obj47
0001BE16 023B                       	dc.w $23B
0001BE18 0000 0000                  	dc.l Map_SS_R
0001BE1C 0570                       	dc.w $570
0001BE1E 0000 0000                  	dc.l Map_SS_R
0001BE22 0251                       	dc.w $251
0001BE24 0000 0000                  	dc.l Map_SS_R
0001BE28 0370                       	dc.w $370
0001BE2A 0000 0000                  	dc.l Map_SS_Up
0001BE2E 0263                       	dc.w $263
0001BE30 0000 0000                  	dc.l Map_SS_Down
0001BE34 0263                       	dc.w $263
0001BE36 0000 0000                  	dc.l Map_SS_R
0001BE3A 22F0                       	dc.w $22F0
0001BE3C 0000 0000                  	dc.l Map_SS_Glass
0001BE40 0470                       	dc.w $470
0001BE42 0000 0000                  	dc.l Map_SS_Glass
0001BE46 05F0                       	dc.w $5F0
0001BE48 0000 0000                  	dc.l Map_SS_Glass
0001BE4C 65F0                       	dc.w $65F0
0001BE4E 0000 0000                  	dc.l Map_SS_Glass
0001BE52 25F0                       	dc.w $25F0
0001BE54 0000 0000                  	dc.l Map_SS_Glass
0001BE58 45F0                       	dc.w $45F0
0001BE5A 0000 0000                  	dc.l Map_SS_R
0001BE5E 02F0                       	dc.w $2F0
0001BE60 0100 F0A8                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE64 023B                       	dc.w $23B
0001BE66 0200 F0A8                  	dc.l Map_obj47+$2000000
0001BE6A 023B                       	dc.w $23B
0001BE6C 0000 0000                  	dc.l Map_SS_R
0001BE70 0797                       	dc.w $797
0001BE72 0000 0000                  	dc.l Map_SS_R
0001BE76 07A0                       	dc.w $7A0
0001BE78 0000 0000                  	dc.l Map_SS_R
0001BE7C 07A9                       	dc.w $7A9
0001BE7E 0000 0000                  	dc.l Map_SS_R
0001BE82 0797                       	dc.w $797
0001BE84 0000 0000                  	dc.l Map_SS_R
0001BE88 07A0                       	dc.w $7A0
0001BE8A 0000 0000                  	dc.l Map_SS_R
0001BE8E 07A9                       	dc.w $7A9
0001BE90 0000 A404                  	dc.l Map_obj25
0001BE94 27B2                       	dc.w $27B2
0001BE96 0000 0000                  	dc.l Map_SS_Chaos3
0001BE9A 0770                       	dc.w $770
0001BE9C 0000 0000                  	dc.l Map_SS_Chaos3
0001BEA0 2770                       	dc.w $2770
0001BEA2 0000 0000                  	dc.l Map_SS_Chaos3
0001BEA6 4770                       	dc.w $4770
0001BEA8 0000 0000                  	dc.l Map_SS_Chaos3
0001BEAC 6770                       	dc.w $6770
0001BEAE 0000 0000                  	dc.l Map_SS_Chaos1
0001BEB2 0770                       	dc.w $770
0001BEB4 0000 0000                  	dc.l Map_SS_Chaos2
0001BEB8 0770                       	dc.w $770
0001BEBA 0000 0000                  	dc.l Map_SS_R
0001BEBE 04F0                       	dc.w $4F0
0001BEC0 0400 A404                  	dc.l Map_obj25+$4000000
0001BEC4 27B2                       	dc.w $27B2
0001BEC6 0500 A404                  	dc.l Map_obj25+$5000000
0001BECA 27B2                       	dc.w $27B2
0001BECC 0600 A404                  	dc.l Map_obj25+$6000000
0001BED0 27B2                       	dc.w $27B2
0001BED2 0700 A404                  	dc.l Map_obj25+$7000000
0001BED6 27B2                       	dc.w $27B2
0001BED8 0000 0000                  	dc.l Map_SS_Glass
0001BEDC 23F0                       	dc.w $23F0
0001BEDE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BEE2 23F0                       	dc.w $23F0
0001BEE4 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BEE8 23F0                       	dc.w $23F0
0001BEEA 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BEEE 23F0                       	dc.w $23F0
0001BEF0 0000 0000                  	dc.l Map_SS_R+$2000000
0001BEF4 04F0                       	dc.w $4F0
0001BEF6 0000 0000                  	dc.l Map_SS_Glass
0001BEFA 05F0                       	dc.w $5F0
0001BEFC 0000 0000                  	dc.l Map_SS_Glass
0001BF00 65F0                       	dc.w $65F0
0001BF02 0000 0000                  	dc.l Map_SS_Glass
0001BF06 25F0                       	dc.w $25F0
0001BF08 0000 0000                  	dc.l Map_SS_Glass
0001BF0C 45F0                       	dc.w $45F0
0001BF0C 45F0                       	dc.w $45F0
0001BF0E                            
0001BF0E                            ; ---------------------------------------------------------------------------
0001BF0E                            ; Sprite mappings - special stage "R" block
0001BF0E                            ; ---------------------------------------------------------------------------
0001BF0E                            Map_SS_R:
0001BF0E                            	include "_maps\SSRblock.asm"
0001BF0E                            ; ---------------------------------------------------------------------------
0001BF0E                            ; Sprite mappings - special stage "R" block
0001BF0E                            ; ---------------------------------------------------------------------------
0001BF0E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF12 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF14 01                         byte_1B912:	dc.b 1
0001BF15 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF1A 01                         byte_1B918:	dc.b 1
0001BF1B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF20 00                         byte_1B91E:	dc.b 0
0001BF22 00                         		even
0001BF22 00                         		even
0001BF22                            
0001BF22                            ; ---------------------------------------------------------------------------
0001BF22                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF22                            ; ---------------------------------------------------------------------------
0001BF22                            Map_SS_Glass:
0001BF22                            	include "_maps\SSglassblock.asm"
0001BF22                            ; ---------------------------------------------------------------------------
0001BF22                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF22                            ; ---------------------------------------------------------------------------
0001BF22 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF26 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF2A 01                         byte_1B928:	dc.b 1
0001BF2B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF30 01                         byte_1B92E:	dc.b 1
0001BF31 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF36 01                         byte_1B934:	dc.b 1
0001BF37 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF3C 01                         byte_1B93A:	dc.b 1
0001BF3D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF42                            		even
0001BF42                            		even
0001BF42                            
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42                            ; Sprite mappings - special stage "UP" block
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42                            Map_SS_Up:
0001BF42                            	include "_maps\SSUPblock.asm"
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42                            ; Sprite mappings - special stage "UP" block
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF44 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF46 01                         byte_1B944:	dc.b 1
0001BF47 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF4C 01                         byte_1B94A:	dc.b 1
0001BF4D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF52                            		even
0001BF52                            		even
0001BF52                            
0001BF52                            ; ---------------------------------------------------------------------------
0001BF52                            ; Sprite mappings - special stage "DOWN" block
0001BF52                            ; ---------------------------------------------------------------------------
0001BF52                            Map_SS_Down:
0001BF52                            	include "_maps\SSDOWNblock.asm"
0001BF52                            ; ---------------------------------------------------------------------------
0001BF52                            ; Sprite mappings - special stage "DOWN" block
0001BF52                            ; ---------------------------------------------------------------------------
0001BF52 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF54 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF56 01                         byte_1B954:	dc.b 1
0001BF57 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF5C 01                         byte_1B95A:	dc.b 1
0001BF5D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF62                            		even
0001BF62                            		even
0001BF62                            
0001BF62                            ; ---------------------------------------------------------------------------
0001BF62                            ; Sprite mappings - special stage chaos	emeralds
0001BF62                            ; ---------------------------------------------------------------------------
0001BF62 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF64 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF66 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF68 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF6A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF6C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF6E 01                         byte_1B96C:	dc.b 1
0001BF6F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF74 01                         byte_1B972:	dc.b 1
0001BF75 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF7A 01                         byte_1B978:	dc.b 1
0001BF7B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF80 01                         byte_1B97E:	dc.b 1
0001BF81 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BF86                            		even
0001BF86                            ; ===========================================================================
0001BF86                            ; ---------------------------------------------------------------------------
0001BF86                            ; Object 09 - Sonic (special stage)
0001BF86                            ; ---------------------------------------------------------------------------
0001BF86                            
0001BF86                            Obj09:					; XREF: Obj_Index
0001BF86 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BF8A 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BF8C 6100 0000                  		bsr.w	SS_FixCamera
0001BF90 6000 0000                  		bra.w	DebugMode
0001BF94                            ; ===========================================================================
0001BF94                            
0001BF94                            Obj09_Normal:
0001BF94 7000                       		moveq	#0,d0
0001BF96 1028 0024                  		move.b	$24(a0),d0
0001BF9A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BF9E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFA2                            ; ===========================================================================
0001BFA2 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFA4 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFA6 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFA8 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFAA                            ; ===========================================================================
0001BFAA                            
0001BFAA                            Obj09_Main:				; XREF: Obj09_Index
0001BFAA 5428 0024                  		addq.b	#2,$24(a0)
0001BFAE 117C 000E 0016             		move.b	#$E,$16(a0)
0001BFB4 117C 0007 0017             		move.b	#7,$17(a0)
0001BFBA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFC2 317C 0780 0002             		move.w	#$780,2(a0)
0001BFC8 117C 0004 0001             		move.b	#4,1(a0)
0001BFCE 117C 0000 0018             		move.b	#0,$18(a0)
0001BFD4 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFDA 08E8 0002 0022             		bset	#2,$22(a0)
0001BFE0 08E8 0001 0022             		bset	#1,$22(a0)
0001BFE6                            
0001BFE6                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BFE6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BFEA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFEC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BFF2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BFF4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BFFA                            
0001BFFA                            Obj09_NoDebug:
0001BFFA 117C 0000 0030             		move.b	#0,$30(a0)
0001C000 7000                       		moveq	#0,d0
0001C002 1028 0022                  		move.b	$22(a0),d0
0001C006 0240 0002                  		andi.w	#2,d0
0001C00A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C00E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C012 4EBA 8210                  		jsr	LoadSonicDynPLC
0001C016 4EF9 0000 DBB4             		jmp	DisplaySprite
0001C01C                            ; ===========================================================================
0001C01C 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C01E 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C020                            ; ===========================================================================
0001C020                            
0001C020                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C020 6100 0000                  		bsr.w	Obj09_Jump
0001C024 6100 0000                  		bsr.w	Obj09_Move
0001C028 6100 0000                  		bsr.w	Obj09_Fall
0001C02C 6000                       		bra.s	Obj09_Display
0001C02E                            ; ===========================================================================
0001C02E                            
0001C02E                            Obj09_InAir:				; XREF: Obj09_Modes
0001C02E 6100 0000                  		bsr.w	nullsub_2
0001C032 6100 0000                  		bsr.w	Obj09_Move
0001C036 6100 0000                  		bsr.w	Obj09_Fall
0001C03A                            
0001C03A                            Obj09_Display:				; XREF: Obj09_OnWall
0001C03A 6100 0000                  		bsr.w	Obj09_ChkItems
0001C03E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C042 4EB9 0000 DB8E             		jsr	SpeedToPos
0001C048 6100 0000                  		bsr.w	SS_FixCamera
0001C04C 3038 F780                  		move.w	($FFFFF780).w,d0
0001C050 D078 F782                  		add.w	($FFFFF782).w,d0
0001C054 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C058 4EB9 0001 3FAA             		jsr	Sonic_Animate
0001C05E 4E75                       		rts	
0001C060                            
0001C060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C060                            
0001C060                            
0001C060                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C060 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C066 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C068 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C06C                            
0001C06C                            Obj09_ChkRight:
0001C06C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C072 6700                       		beq.s	loc_1BA78	; if not, branch
0001C074 6100 0000                  		bsr.w	Obj09_MoveRight
0001C078                            
0001C078                            loc_1BA78:
0001C078 1038 F602                  		move.b	($FFFFF602).w,d0
0001C07C 0200 000C                  		andi.b	#$C,d0
0001C080 6600                       		bne.s	loc_1BAA8
0001C082 3028 0014                  		move.w	$14(a0),d0
0001C086 6700                       		beq.s	loc_1BAA8
0001C088 6B00                       		bmi.s	loc_1BA9A
0001C08A 0440 000C                  		subi.w	#$C,d0
0001C08E 6400                       		bcc.s	loc_1BA94
0001C090 303C 0000                  		move.w	#0,d0
0001C094                            
0001C094                            loc_1BA94:
0001C094 3140 0014                  		move.w	d0,$14(a0)
0001C098 6000                       		bra.s	loc_1BAA8
0001C09A                            ; ===========================================================================
0001C09A                            
0001C09A                            loc_1BA9A:
0001C09A 0640 000C                  		addi.w	#$C,d0
0001C09E 6400                       		bcc.s	loc_1BAA4
0001C0A0 303C 0000                  		move.w	#0,d0
0001C0A4                            
0001C0A4                            loc_1BAA4:
0001C0A4 3140 0014                  		move.w	d0,$14(a0)
0001C0A8                            
0001C0A8                            loc_1BAA8:
0001C0A8 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0AC 0600 0020                  		addi.b	#$20,d0
0001C0B0 0200 00C0                  		andi.b	#$C0,d0
0001C0B4 4400                       		neg.b	d0
0001C0B6 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C0BC C3E8 0014                  		muls.w	$14(a0),d1
0001C0C0 D3A8 0008                  		add.l	d1,8(a0)
0001C0C4 C1E8 0014                  		muls.w	$14(a0),d0
0001C0C8 D1A8 000C                  		add.l	d0,$C(a0)
0001C0CC 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0D0 2428 000C                  		move.l	$C(a0),d2
0001C0D4 2628 0008                  		move.l	8(a0),d3
0001C0D8 6100 0000                  		bsr.w	sub_1BCE8
0001C0DC 6700                       		beq.s	loc_1BAF2
0001C0DE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0E2 93A8 0008                  		sub.l	d1,8(a0)
0001C0E6 91A8 000C                  		sub.l	d0,$C(a0)
0001C0EA 317C 0000 0014             		move.w	#0,$14(a0)
0001C0F0 4E75                       		rts	
0001C0F2                            ; ===========================================================================
0001C0F2                            
0001C0F2                            loc_1BAF2:
0001C0F2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0F6 4E75                       		rts	
0001C0F8                            ; End of function Obj09_Move
0001C0F8                            
0001C0F8                            
0001C0F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0F8                            
0001C0F8                            
0001C0F8                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C0F8 08E8 0000 0022             		bset	#0,$22(a0)
0001C0FE 3028 0014                  		move.w	$14(a0),d0
0001C102 6700                       		beq.s	loc_1BB06
0001C104 6A00                       		bpl.s	loc_1BB1A
0001C106                            
0001C106                            loc_1BB06:
0001C106 0440 000C                  		subi.w	#$C,d0
0001C10A 0C40 F800                  		cmpi.w	#-$800,d0
0001C10E 6E00                       		bgt.s	loc_1BB14
0001C110 303C F800                  		move.w	#-$800,d0
0001C114                            
0001C114                            loc_1BB14:
0001C114 3140 0014                  		move.w	d0,$14(a0)
0001C118 4E75                       		rts	
0001C11A                            ; ===========================================================================
0001C11A                            
0001C11A                            loc_1BB1A:
0001C11A 0440 0040                  		subi.w	#$40,d0
0001C11E 6400                       		bcc.s	loc_1BB22
0001C120 4E71                       		nop	
0001C122                            
0001C122                            loc_1BB22:
0001C122 3140 0014                  		move.w	d0,$14(a0)
0001C126 4E75                       		rts	
0001C128                            ; End of function Obj09_MoveLeft
0001C128                            
0001C128                            
0001C128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C128                            
0001C128                            
0001C128                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C128 08A8 0000 0022             		bclr	#0,$22(a0)
0001C12E 3028 0014                  		move.w	$14(a0),d0
0001C132 6B00                       		bmi.s	loc_1BB48
0001C134 0640 000C                  		addi.w	#$C,d0
0001C138 0C40 0800                  		cmpi.w	#$800,d0
0001C13C 6D00                       		blt.s	loc_1BB42
0001C13E 303C 0800                  		move.w	#$800,d0
0001C142                            
0001C142                            loc_1BB42:
0001C142 3140 0014                  		move.w	d0,$14(a0)
0001C146 6000                       		bra.s	locret_1BB54
0001C148                            ; ===========================================================================
0001C148                            
0001C148                            loc_1BB48:
0001C148 0640 0040                  		addi.w	#$40,d0
0001C14C 6400                       		bcc.s	loc_1BB50
0001C14E 4E71                       		nop	
0001C150                            
0001C150                            loc_1BB50:
0001C150 3140 0014                  		move.w	d0,$14(a0)
0001C154                            
0001C154                            locret_1BB54:
0001C154 4E75                       		rts	
0001C156                            ; End of function Obj09_MoveRight
0001C156                            
0001C156                            
0001C156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C156                            
0001C156                            
0001C156                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C156 1038 F603                  		move.b	($FFFFF603).w,d0
0001C15A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C15E 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C160 1038 F780                  		move.b	($FFFFF780).w,d0
0001C164 0200 00FC                  		andi.b	#$FC,d0
0001C168 4400                       		neg.b	d0
0001C16A 0400 0040                  		subi.b	#$40,d0
0001C16E 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C174 C3FC 0680                  		muls.w	#$680,d1
0001C178 E081                       		asr.l	#8,d1
0001C17A 3141 0010                  		move.w	d1,$10(a0)
0001C17E C1FC 0680                  		muls.w	#$680,d0
0001C182 E080                       		asr.l	#8,d0
0001C184 3140 0012                  		move.w	d0,$12(a0)
0001C188 08E8 0001 0022             		bset	#1,$22(a0)
0001C18E 303C 00A0                  		move.w	#$A0,d0
0001C192 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C198                            
0001C198                            Obj09_NoJump:
0001C198 4E75                       		rts	
0001C19A                            ; End of function Obj09_Jump
0001C19A                            
0001C19A                            
0001C19A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C19A                            
0001C19A                            
0001C19A                            nullsub_2:				; XREF: Obj09_InAir
0001C19A 4E75                       		rts	
0001C19C                            ; End of function nullsub_2
0001C19C                            
0001C19C                            ; ===========================================================================
0001C19C                            ; ---------------------------------------------------------------------------
0001C19C                            ; unused subroutine to limit Sonic's upward vertical speed
0001C19C                            ; ---------------------------------------------------------------------------
0001C19C 323C FC00                  		move.w	#-$400,d1
0001C1A0 B268 0012                  		cmp.w	$12(a0),d1
0001C1A4 6F00                       		ble.s	locret_1BBB4
0001C1A6 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1AA 0200 0070                  		andi.b	#$70,d0
0001C1AE 6600                       		bne.s	locret_1BBB4
0001C1B0 3141 0012                  		move.w	d1,$12(a0)
0001C1B4                            
0001C1B4                            locret_1BBB4:
0001C1B4 4E75                       		rts	
0001C1B6                            ; ---------------------------------------------------------------------------
0001C1B6                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C1B6                            ; ---------------------------------------------------------------------------
0001C1B6                            
0001C1B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B6                            
0001C1B6                            
0001C1B6                            SS_FixCamera:				; XREF: Obj09
0001C1B6 3428 000C                  		move.w	$C(a0),d2
0001C1BA 3628 0008                  		move.w	8(a0),d3
0001C1BE 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1C2 0443 00A0                  		subi.w	#$A0,d3
0001C1C6 6500                       		bcs.s	loc_1BBCE
0001C1C8 9043                       		sub.w	d3,d0
0001C1CA 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1CE                            
0001C1CE                            loc_1BBCE:
0001C1CE 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1D2 0442 0070                  		subi.w	#$70,d2
0001C1D6 6500                       		bcs.s	locret_1BBDE
0001C1D8 9042                       		sub.w	d2,d0
0001C1DA 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1DE                            
0001C1DE                            locret_1BBDE:
0001C1DE 4E75                       		rts	
0001C1E0                            ; End of function SS_FixCamera
0001C1E0                            
0001C1E0                            ; ===========================================================================
0001C1E0                            
0001C1E0                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C1E0 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C1E6 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C1EC 6600                       		bne.s	loc_1BBF4
0001C1EE 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C1F4                            
0001C1F4                            loc_1BBF4:
0001C1F4 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C1FA 6D00                       		blt.s	loc_1BC12
0001C1FC 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C202 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C208 5428 0024                  		addq.b	#2,$24(a0)
0001C20C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C212                            
0001C212                            loc_1BC12:
0001C212 3038 F780                  		move.w	($FFFFF780).w,d0
0001C216 D078 F782                  		add.w	($FFFFF782).w,d0
0001C21A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C21E 4EB9 0001 3FAA             		jsr	Sonic_Animate
0001C224 4EB9 0001 4224             		jsr	LoadSonicDynPLC
0001C22A 6100 FF8A                  		bsr.w	SS_FixCamera
0001C22E 4EF9 0000 DBB4             		jmp	DisplaySprite
0001C234                            ; ===========================================================================
0001C234                            
0001C234                            Obj09_Exit2:				; XREF: Obj09_Index
0001C234 5368 0038                  		subq.w	#1,$38(a0)
0001C238 6600                       		bne.s	loc_1BC40
0001C23A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C240                            
0001C240                            loc_1BC40:
0001C240 4EB9 0001 3FAA             		jsr	Sonic_Animate
0001C246 4EB9 0001 4224             		jsr	LoadSonicDynPLC
0001C24C 6100 FF68                  		bsr.w	SS_FixCamera
0001C250 4EF9 0000 DBB4             		jmp	DisplaySprite
0001C256                            
0001C256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C256                            
0001C256                            
0001C256                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C256 2428 000C                  		move.l	$C(a0),d2
0001C25A 2628 0008                  		move.l	8(a0),d3
0001C25E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C262 0200 00FC                  		andi.b	#$FC,d0
0001C266 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C26C 3828 0010                  		move.w	$10(a0),d4
0001C270 48C4                       		ext.l	d4
0001C272 E184                       		asl.l	#8,d4
0001C274 C1FC 002A                  		muls.w	#$2A,d0
0001C278 D084                       		add.l	d4,d0
0001C27A 3828 0012                  		move.w	$12(a0),d4
0001C27E 48C4                       		ext.l	d4
0001C280 E184                       		asl.l	#8,d4
0001C282 C3FC 002A                  		muls.w	#$2A,d1
0001C286 D284                       		add.l	d4,d1
0001C288 D680                       		add.l	d0,d3
0001C28A 6100 0000                  		bsr.w	sub_1BCE8
0001C28E 6700                       		beq.s	loc_1BCB0
0001C290 9680                       		sub.l	d0,d3
0001C292 7000                       		moveq	#0,d0
0001C294 3140 0010                  		move.w	d0,$10(a0)
0001C298 08A8 0001 0022             		bclr	#1,$22(a0)
0001C29E D481                       		add.l	d1,d2
0001C2A0 6100 0000                  		bsr.w	sub_1BCE8
0001C2A4 6700                       		beq.s	loc_1BCC6
0001C2A6 9481                       		sub.l	d1,d2
0001C2A8 7200                       		moveq	#0,d1
0001C2AA 3141 0012                  		move.w	d1,$12(a0)
0001C2AE 4E75                       		rts	
0001C2B0                            ; ===========================================================================
0001C2B0                            
0001C2B0                            loc_1BCB0:
0001C2B0 D481                       		add.l	d1,d2
0001C2B2 6100 0000                  		bsr.w	sub_1BCE8
0001C2B6 6700                       		beq.s	loc_1BCD4
0001C2B8 9481                       		sub.l	d1,d2
0001C2BA 7200                       		moveq	#0,d1
0001C2BC 3141 0012                  		move.w	d1,$12(a0)
0001C2C0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2C6                            
0001C2C6                            loc_1BCC6:
0001C2C6 E080                       		asr.l	#8,d0
0001C2C8 E081                       		asr.l	#8,d1
0001C2CA 3140 0010                  		move.w	d0,$10(a0)
0001C2CE 3141 0012                  		move.w	d1,$12(a0)
0001C2D2 4E75                       		rts	
0001C2D4                            ; ===========================================================================
0001C2D4                            
0001C2D4                            loc_1BCD4:
0001C2D4 E080                       		asr.l	#8,d0
0001C2D6 E081                       		asr.l	#8,d1
0001C2D8 3140 0010                  		move.w	d0,$10(a0)
0001C2DC 3141 0012                  		move.w	d1,$12(a0)
0001C2E0 08E8 0001 0022             		bset	#1,$22(a0)
0001C2E6 4E75                       		rts	
0001C2E8                            ; End of function Obj09_Fall
0001C2E8                            
0001C2E8                            
0001C2E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2E8                            
0001C2E8                            
0001C2E8                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C2E8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C2EE 7800                       		moveq	#0,d4
0001C2F0 4842                       		swap	d2
0001C2F2 3802                       		move.w	d2,d4
0001C2F4 4842                       		swap	d2
0001C2F6 0644 0044                  		addi.w	#$44,d4
0001C2FA 88FC 0018                  		divu.w	#$18,d4
0001C2FE C8FC 0080                  		mulu.w	#$80,d4
0001C302 D3C4                       		adda.l	d4,a1
0001C304 7800                       		moveq	#0,d4
0001C306 4843                       		swap	d3
0001C308 3803                       		move.w	d3,d4
0001C30A 4843                       		swap	d3
0001C30C 0644 0014                  		addi.w	#$14,d4
0001C310 88FC 0018                  		divu.w	#$18,d4
0001C314 D2C4                       		adda.w	d4,a1
0001C316 7A00                       		moveq	#0,d5
0001C318 1819                       		move.b	(a1)+,d4
0001C31A 6100                       		bsr.s	sub_1BD30
0001C31C 1819                       		move.b	(a1)+,d4
0001C31E 6100                       		bsr.s	sub_1BD30
0001C320 D2FC 007E                  		adda.w	#$7E,a1
0001C324 1819                       		move.b	(a1)+,d4
0001C326 6100                       		bsr.s	sub_1BD30
0001C328 1819                       		move.b	(a1)+,d4
0001C32A 6100                       		bsr.s	sub_1BD30
0001C32C 4A05                       		tst.b	d5
0001C32E 4E75                       		rts	
0001C330                            ; End of function sub_1BCE8
0001C330                            
0001C330                            
0001C330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C330                            
0001C330                            
0001C330                            sub_1BD30:				; XREF: sub_1BCE8
0001C330 6700                       		beq.s	locret_1BD44
0001C332 0C04 0028                  		cmpi.b	#$28,d4
0001C336 6700                       		beq.s	locret_1BD44
0001C338 0C04 003A                  		cmpi.b	#$3A,d4
0001C33C 6500                       		bcs.s	loc_1BD46
0001C33E 0C04 004B                  		cmpi.b	#$4B,d4
0001C342 6400                       		bcc.s	loc_1BD46
0001C344                            
0001C344                            locret_1BD44:
0001C344 4E75                       		rts	
0001C346                            ; ===========================================================================
0001C346                            
0001C346                            loc_1BD46:
0001C346 1144 0030                  		move.b	d4,$30(a0)
0001C34A 2149 0032                  		move.l	a1,$32(a0)
0001C34E 7AFF                       		moveq	#-1,d5
0001C350 4E75                       		rts	
0001C352                            ; End of function sub_1BD30
0001C352                            
0001C352                            
0001C352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C352                            
0001C352                            
0001C352                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C352 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C358 7800                       		moveq	#0,d4
0001C35A 3828 000C                  		move.w	$C(a0),d4
0001C35E 0644 0050                  		addi.w	#$50,d4
0001C362 88FC 0018                  		divu.w	#$18,d4
0001C366 C8FC 0080                  		mulu.w	#$80,d4
0001C36A D3C4                       		adda.l	d4,a1
0001C36C 7800                       		moveq	#0,d4
0001C36E 3828 0008                  		move.w	8(a0),d4
0001C372 0644 0020                  		addi.w	#$20,d4
0001C376 88FC 0018                  		divu.w	#$18,d4
0001C37A D2C4                       		adda.w	d4,a1
0001C37C 1811                       		move.b	(a1),d4
0001C37E 6600                       		bne.s	Obj09_ChkCont
0001C380 4A28 003A                  		tst.b	$3A(a0)
0001C384 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C388 7800                       		moveq	#0,d4
0001C38A 4E75                       		rts	
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            Obj09_ChkCont:
0001C38C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C390 6600                       		bne.s	Obj09_Chk1Up
0001C392 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C396 6600                       		bne.s	Obj09_GetCont
0001C398 14BC 0001                  		move.b	#1,(a2)
0001C39C 2549 0004                  		move.l	a1,4(a2)
0001C3A0                            
0001C3A0                            Obj09_GetCont:
0001C3A0 4EB9 0000 A0EC             		jsr	CollectRing
0001C3A6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3AC 6500                       		bcs.s	Obj09_NoCont
0001C3AE 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C3B4 6600                       		bne.s	Obj09_NoCont
0001C3B6 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C3BA 303C 00BF                  		move.w	#$BF,d0
0001C3BE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3C4                            
0001C3C4                            Obj09_NoCont:
0001C3C4 7800                       		moveq	#0,d4
0001C3C6 4E75                       		rts	
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            Obj09_Chk1Up:
0001C3C8 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3CC 6600                       		bne.s	Obj09_ChkEmer
0001C3CE 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3D2 6600                       		bne.s	Obj09_Get1Up
0001C3D4 14BC 0003                  		move.b	#3,(a2)
0001C3D8 2549 0004                  		move.l	a1,4(a2)
0001C3DC                            
0001C3DC                            Obj09_Get1Up:
0001C3DC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C3E0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C3E4 303C 0088                  		move.w	#$88,d0
0001C3E8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C3EE 7800                       		moveq	#0,d4
0001C3F0 4E75                       		rts	
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            Obj09_ChkEmer:
0001C3F2 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C3F6 6500                       		bcs.s	Obj09_ChkGhost
0001C3F8 0C04 0040                  		cmpi.b	#$40,d4
0001C3FC 6200                       		bhi.s	Obj09_ChkGhost
0001C3FE 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C402 6600                       		bne.s	Obj09_GetEmer
0001C404 14BC 0005                  		move.b	#5,(a2)
0001C408 2549 0004                  		move.l	a1,4(a2)
0001C40C                            
0001C40C                            Obj09_GetEmer:
0001C40C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C412 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C414 0404 003B                  		subi.b	#$3B,d4
0001C418 7000                       		moveq	#0,d0
0001C41A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C41E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C422 1584 0000                  		move.b	d4,(a2,d0.w)
0001C426 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C42A                            
0001C42A                            Obj09_NoEmer:
0001C42A 303C 0093                  		move.w	#$93,d0
0001C42E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C434 7800                       		moveq	#0,d4
0001C436 4E75                       		rts	
0001C438                            ; ===========================================================================
0001C438                            
0001C438                            Obj09_ChkGhost:
0001C438 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C43C 6600                       		bne.s	Obj09_ChkGhostTag
0001C43E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C444                            
0001C444                            Obj09_ChkGhostTag:
0001C444 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C448 6600                       		bne.s	Obj09_NoGhost
0001C44A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C450 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C452 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C458                            
0001C458                            Obj09_NoGhost:
0001C458 78FF                       		moveq	#-1,d4
0001C45A 4E75                       		rts	
0001C45C                            ; ===========================================================================
0001C45C                            
0001C45C                            Obj09_MakeGhostSolid:
0001C45C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C462 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C464 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C46A 723F                       		moveq	#$3F,d1
0001C46C                            
0001C46C                            Obj09_GhostLoop2:
0001C46C 743F                       		moveq	#$3F,d2
0001C46E                            
0001C46E                            Obj09_GhostLoop:
0001C46E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C472 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C474 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C478                            
0001C478                            Obj09_NoReplace:
0001C478 5249                       		addq.w	#1,a1
0001C47A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C47E 43E9 0040                  		lea	$40(a1),a1
0001C482 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C486                            
0001C486                            Obj09_GhostNotSolid:
0001C486 4228 003A                  		clr.b	$3A(a0)
0001C48A 7800                       		moveq	#0,d4
0001C48C 4E75                       		rts	
0001C48E                            ; End of function Obj09_ChkItems
0001C48E                            
0001C48E                            
0001C48E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C48E                            
0001C48E                            
0001C48E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C48E 1028 0030                  		move.b	$30(a0),d0
0001C492 6600                       		bne.s	Obj09_ChkBumper
0001C494 5328 0036                  		subq.b	#1,$36(a0)
0001C498 6A00                       		bpl.s	loc_1BEA0
0001C49A 117C 0000 0036             		move.b	#0,$36(a0)
0001C4A0                            
0001C4A0                            loc_1BEA0:
0001C4A0 5328 0037                  		subq.b	#1,$37(a0)
0001C4A4 6A00                       		bpl.s	locret_1BEAC
0001C4A6 117C 0000 0037             		move.b	#0,$37(a0)
0001C4AC                            
0001C4AC                            locret_1BEAC:
0001C4AC 4E75                       		rts	
0001C4AE                            ; ===========================================================================
0001C4AE                            
0001C4AE                            Obj09_ChkBumper:
0001C4AE 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C4B2 6600                       		bne.s	Obj09_GOAL
0001C4B4 2228 0032                  		move.l	$32(a0),d1
0001C4B8 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C4BE 3401                       		move.w	d1,d2
0001C4C0 0241 007F                  		andi.w	#$7F,d1
0001C4C4 C2FC 0018                  		mulu.w	#$18,d1
0001C4C8 0441 0014                  		subi.w	#$14,d1
0001C4CC EE4A                       		lsr.w	#7,d2
0001C4CE 0242 007F                  		andi.w	#$7F,d2
0001C4D2 C4FC 0018                  		mulu.w	#$18,d2
0001C4D6 0442 0044                  		subi.w	#$44,d2
0001C4DA 9268 0008                  		sub.w	8(a0),d1
0001C4DE 9468 000C                  		sub.w	$C(a0),d2
0001C4E2 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C4E8 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C4EE C3FC F900                  		muls.w	#-$700,d1
0001C4F2 E081                       		asr.l	#8,d1
0001C4F4 3141 0010                  		move.w	d1,$10(a0)
0001C4F8 C1FC F900                  		muls.w	#-$700,d0
0001C4FC E080                       		asr.l	#8,d0
0001C4FE 3140 0012                  		move.w	d0,$12(a0)
0001C502 08E8 0001 0022             		bset	#1,$22(a0)
0001C508 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C50C 6600                       		bne.s	Obj09_BumpSnd
0001C50E 14BC 0002                  		move.b	#2,(a2)
0001C512 2028 0032                  		move.l	$32(a0),d0
0001C516 5380                       		subq.l	#1,d0
0001C518 2540 0004                  		move.l	d0,4(a2)
0001C51C                            
0001C51C                            Obj09_BumpSnd:
0001C51C 303C 00B4                  		move.w	#$B4,d0
0001C520 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C526                            ; ===========================================================================
0001C526                            
0001C526                            Obj09_GOAL:
0001C526 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C52A 6600                       		bne.s	Obj09_UPblock
0001C52C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C530 303C 00A8                  		move.w	#$A8,d0		; change item
0001C534 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C53A 4E75                       		rts	
0001C53C                            ; ===========================================================================
0001C53C                            
0001C53C                            Obj09_UPblock:
0001C53C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C540 6600                       		bne.s	Obj09_DOWNblock
0001C542 4A28 0036                  		tst.b	$36(a0)
0001C546 6600 0000                  		bne.w	Obj09_NoGlass
0001C54A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C550 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C556 6700                       		beq.s	Obj09_UPsnd
0001C558 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C55C 2268 0032                  		movea.l	$32(a0),a1
0001C560 5389                       		subq.l	#1,a1
0001C562 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C566                            
0001C566                            Obj09_UPsnd:
0001C566 303C 00A9                  		move.w	#$A9,d0
0001C56A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C570                            ; ===========================================================================
0001C570                            
0001C570                            Obj09_DOWNblock:
0001C570 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C574 6600                       		bne.s	Obj09_Rblock
0001C576 4A28 0036                  		tst.b	$36(a0)
0001C57A 6600 0000                  		bne.w	Obj09_NoGlass
0001C57E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C584 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C58A 6600                       		bne.s	Obj09_DOWNsnd
0001C58C E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C590 2268 0032                  		movea.l	$32(a0),a1
0001C594 5389                       		subq.l	#1,a1
0001C596 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C59A                            
0001C59A                            Obj09_DOWNsnd:
0001C59A 303C 00A9                  		move.w	#$A9,d0
0001C59E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            Obj09_Rblock:
0001C5A4 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5A8 6600                       		bne.s	Obj09_ChkGlass
0001C5AA 4A28 0037                  		tst.b	$37(a0)
0001C5AE 6600 0000                  		bne.w	Obj09_NoGlass
0001C5B2 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C5B8 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C5BC 6600                       		bne.s	Obj09_RevStage
0001C5BE 14BC 0004                  		move.b	#4,(a2)
0001C5C2 2028 0032                  		move.l	$32(a0),d0
0001C5C6 5380                       		subq.l	#1,d0
0001C5C8 2540 0004                  		move.l	d0,4(a2)
0001C5CC                            
0001C5CC                            Obj09_RevStage:
0001C5CC 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5D0 303C 00A9                  		move.w	#$A9,d0
0001C5D4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5DA                            ; ===========================================================================
0001C5DA                            
0001C5DA                            Obj09_ChkGlass:
0001C5DA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5DE 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C5E0 0C00 002E                  		cmpi.b	#$2E,d0
0001C5E4 6700                       		beq.s	Obj09_Glass
0001C5E6 0C00 002F                  		cmpi.b	#$2F,d0
0001C5EA 6700                       		beq.s	Obj09_Glass
0001C5EC 0C00 0030                  		cmpi.b	#$30,d0
0001C5F0 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C5F2                            
0001C5F2                            Obj09_Glass:
0001C5F2 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C5F6 6600                       		bne.s	Obj09_GlassSnd
0001C5F8 14BC 0006                  		move.b	#6,(a2)
0001C5FC 2268 0032                  		movea.l	$32(a0),a1
0001C600 5389                       		subq.l	#1,a1
0001C602 2549 0004                  		move.l	a1,4(a2)
0001C606 1011                       		move.b	(a1),d0
0001C608 5200                       		addq.b	#1,d0		; change glass type when touched
0001C60A 0C00 0030                  		cmpi.b	#$30,d0
0001C60E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C610 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C612                            
0001C612                            Obj09_GlassUpdate:
0001C612 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C616                            
0001C616                            Obj09_GlassSnd:
0001C616 303C 00BA                  		move.w	#$BA,d0
0001C61A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C620                            ; ===========================================================================
0001C620                            
0001C620                            Obj09_NoGlass:
0001C620 4E75                       		rts	
0001C622                            ; End of function Obj09_ChkItems2
0001C622                            
0001C622                            ; ===========================================================================
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            ; Object 10 - blank
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            
0001C622                            Obj10:					; XREF: Obj_Index
0001C622 4E75                       		rts	
0001C624                            ; ---------------------------------------------------------------------------
0001C624                            ; Subroutine to	animate	level graphics
0001C624                            ; ---------------------------------------------------------------------------
0001C624                            
0001C624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C624                            
0001C624                            
0001C624                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C624 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C628 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C62A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C630 6100 0000                  		bsr.w	AniArt_GiantRing
0001C634 7000                       		moveq	#0,d0
0001C636 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C63A D040                       		add.w	d0,d0
0001C63C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C640 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C644                            ; ===========================================================================
0001C644                            
0001C644                            AniArt_Pause:
0001C644 4E75                       		rts	
0001C646                            ; End of function AniArt_Load
0001C646                            
0001C646                            ; ===========================================================================
0001C646 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C64A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C64E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C652 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C654                            ; ===========================================================================
0001C654                            ; ---------------------------------------------------------------------------
0001C654                            ; Animated pattern routine - Green Hill
0001C654                            ; ---------------------------------------------------------------------------
0001C654                            
0001C654                            AniArt_GHZ:				; XREF: AniArt_Index
0001C654 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C658 6A00                       		bpl.s	loc_1C08A
0001C65A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C660 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C666 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C66A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C66E 0240 0001                  		andi.w	#1,d0
0001C672 6700                       		beq.s	loc_1C078
0001C674 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C678                            
0001C678                            loc_1C078:
0001C678 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C682 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C686 6000 0000                  		bra.w	LoadTiles
0001C68A                            ; ===========================================================================
0001C68A                            
0001C68A                            loc_1C08A:
0001C68A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C68E 6A00                       		bpl.s	loc_1C0C0
0001C690 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C696 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C69C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6A0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6A4 0240 0001                  		andi.w	#1,d0
0001C6A8 6700                       		beq.s	loc_1C0AE
0001C6AA 43E9 0200                  		lea	$200(a1),a1
0001C6AE                            
0001C6AE                            loc_1C0AE:
0001C6AE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C6B8 323C 000F                  		move.w	#$F,d1
0001C6BC 6000 0000                  		bra.w	LoadTiles
0001C6C0                            ; ===========================================================================
0001C6C0                            
0001C6C0                            loc_1C0C0:
0001C6C0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6C4 6A00                       		bpl.s	locret_1C10C
0001C6C6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6CC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6D0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6D4 0240 0003                  		andi.w	#3,d0
0001C6D8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6DC 0800 0000                  		btst	#0,d0
0001C6E0 6600                       		bne.s	loc_1C0E8
0001C6E2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C6E8                            
0001C6E8                            loc_1C0E8:
0001C6E8 EF48                       		lsl.w	#7,d0
0001C6EA 3200                       		move.w	d0,d1
0001C6EC D040                       		add.w	d0,d0
0001C6EE D041                       		add.w	d1,d0
0001C6F0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C6FA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C700 43F1 0000                  		lea	(a1,d0.w),a1
0001C704 323C 000B                  		move.w	#$B,d1
0001C708 6100 0000                  		bsr.w	LoadTiles
0001C70C                            
0001C70C                            locret_1C10C:
0001C70C 4E75                       		rts	
0001C70E                            ; ===========================================================================
0001C70E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C712                            ; ===========================================================================
0001C712                            ; ---------------------------------------------------------------------------
0001C712                            ; Animated pattern routine - Marble
0001C712                            ; ---------------------------------------------------------------------------
0001C712                            
0001C712                            AniArt_MZ:				; XREF: AniArt_Index
0001C712 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C716 6A00                       		bpl.s	loc_1C150
0001C718 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C71E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C724 7000                       		moveq	#0,d0
0001C726 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C72A 5200                       		addq.b	#1,d0
0001C72C 0C00 0003                  		cmpi.b	#3,d0
0001C730 6600                       		bne.s	loc_1C134
0001C732 7000                       		moveq	#0,d0
0001C734                            
0001C734                            loc_1C134:
0001C734 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C738 C0FC 0100                  		mulu.w	#$100,d0
0001C73C D2C0                       		adda.w	d0,a1
0001C73E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C748 323C 0007                  		move.w	#7,d1
0001C74C 6100 0000                  		bsr.w	LoadTiles
0001C750                            
0001C750                            loc_1C150:
0001C750 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C754 6A00                       		bpl.s	loc_1C1AE
0001C756 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C75C 7000                       		moveq	#0,d0
0001C75E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C762 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C768 EE58                       		ror.w	#7,d0
0001C76A D8C0                       		adda.w	d0,a4
0001C76C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C776 7600                       		moveq	#0,d3
0001C778 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C77C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C780 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C784 343C 0003                  		move.w	#3,d2
0001C788                            
0001C788                            loc_1C188:
0001C788 3003                       		move.w	d3,d0
0001C78A D040                       		add.w	d0,d0
0001C78C 0240 001E                  		andi.w	#$1E,d0
0001C790 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C796 3033 0000                  		move.w	(a3,d0.w),d0
0001C79A 47F3 0000                  		lea	(a3,d0.w),a3
0001C79E 224C                       		movea.l	a4,a1
0001C7A0 323C 001F                  		move.w	#$1F,d1
0001C7A4 4E93                       		jsr	(a3)
0001C7A6 5843                       		addq.w	#4,d3
0001C7A8 51CA FFDE                  		dbf	d2,loc_1C188
0001C7AC 4E75                       		rts	
0001C7AE                            ; ===========================================================================
0001C7AE                            
0001C7AE                            loc_1C1AE:
0001C7AE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7B2 6A00 0000                  		bpl.w	locret_1C1EA
0001C7B6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7BC 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7C2 7000                       		moveq	#0,d0
0001C7C4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7C8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7CC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7D2 C0FC 00C0                  		mulu.w	#$C0,d0
0001C7D6 D2C0                       		adda.w	d0,a1
0001C7D8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C7E2 323C 0005                  		move.w	#5,d1
0001C7E6 6000 0000                  		bra.w	LoadTiles
0001C7EA                            ; ===========================================================================
0001C7EA                            
0001C7EA                            locret_1C1EA:
0001C7EA 4E75                       		rts	
0001C7EC                            ; ===========================================================================
0001C7EC                            ; ---------------------------------------------------------------------------
0001C7EC                            ; Animated pattern routine - Scrap Brain
0001C7EC                            ; ---------------------------------------------------------------------------
0001C7EC                            
0001C7EC                            AniArt_SBZ:				; XREF: AniArt_Index
0001C7EC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C7F0 6700                       		beq.s	loc_1C1F8
0001C7F2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C7F6 6000                       		bra.s	loc_1C250
0001C7F8                            ; ===========================================================================
0001C7F8                            
0001C7F8                            loc_1C1F8:
0001C7F8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C7FC 6A00                       		bpl.s	loc_1C250
0001C7FE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C804 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C80A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C814 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C818 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C81C 0240 0007                  		andi.w	#7,d0
0001C820 6700                       		beq.s	loc_1C234
0001C822 5340                       		subq.w	#1,d0
0001C824 C0FC 0180                  		mulu.w	#$180,d0
0001C828 43F1 0000                  		lea	(a1,d0.w),a1
0001C82C 323C 000B                  		move.w	#$B,d1
0001C830 6000 0000                  		bra.w	LoadTiles
0001C834                            ; ===========================================================================
0001C834                            
0001C834                            loc_1C234:
0001C834 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C83A                            
0001C83A                            loc_1C23A:
0001C83A 323C 0005                  		move.w	#5,d1
0001C83E 6100 0000                  		bsr.w	LoadTiles
0001C842 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C848 323C 0005                  		move.w	#5,d1
0001C84C 6000 0000                  		bra.w	LoadTiles
0001C850                            ; ===========================================================================
0001C850                            
0001C850                            loc_1C250:
0001C850 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C854 6700                       		beq.s	loc_1C25C
0001C856 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C85A 6000                       		bra.s	locret_1C2A0
0001C85C                            ; ===========================================================================
0001C85C                            
0001C85C                            loc_1C25C:
0001C85C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C860 6A00                       		bpl.s	locret_1C2A0
0001C862 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C868 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C86E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C878 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C87C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C880 0240 0007                  		andi.w	#7,d0
0001C884 6700                       		beq.s	loc_1C298
0001C886 5340                       		subq.w	#1,d0
0001C888 C0FC 0180                  		mulu.w	#$180,d0
0001C88C 43F1 0000                  		lea	(a1,d0.w),a1
0001C890 323C 000B                  		move.w	#$B,d1
0001C894 6000 0000                  		bra.w	LoadTiles
0001C898                            ; ===========================================================================
0001C898                            
0001C898                            loc_1C298:
0001C898 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C89E 609A                       		bra.s	loc_1C23A
0001C8A0                            ; ===========================================================================
0001C8A0                            
0001C8A0                            locret_1C2A0:
0001C8A0 4E75                       		rts	
0001C8A2                            ; ===========================================================================
0001C8A2                            ; ---------------------------------------------------------------------------
0001C8A2                            ; Animated pattern routine - ending sequence
0001C8A2                            ; ---------------------------------------------------------------------------
0001C8A2                            
0001C8A2                            AniArt_Ending:				; XREF: AniArt_Index
0001C8A2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8A6 6A00                       		bpl.s	loc_1C2F4
0001C8A8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8AE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8B4 45F8 9400                  		lea	($FFFF9400).w,a2
0001C8B8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8BC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8C0 0240 0001                  		andi.w	#1,d0
0001C8C4 6700                       		beq.s	loc_1C2CE
0001C8C6 43E9 0200                  		lea	$200(a1),a1
0001C8CA 45EA 0200                  		lea	$200(a2),a2
0001C8CE                            
0001C8CE                            loc_1C2CE:
0001C8CE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8D8 323C 000F                  		move.w	#$F,d1
0001C8DC 6100 0000                  		bsr.w	LoadTiles
0001C8E0 224A                       		movea.l	a2,a1
0001C8E2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C8EC 323C 000F                  		move.w	#$F,d1
0001C8F0 6000 0000                  		bra.w	LoadTiles
0001C8F4                            ; ===========================================================================
0001C8F4                            
0001C8F4                            loc_1C2F4:
0001C8F4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8F8 6A00                       		bpl.s	loc_1C33C
0001C8FA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C900 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C904 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C908 0240 0007                  		andi.w	#7,d0
0001C90C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C910 EF48                       		lsl.w	#7,d0
0001C912 3200                       		move.w	d0,d1
0001C914 D040                       		add.w	d0,d0
0001C916 D041                       		add.w	d1,d0
0001C918 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C922 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C928 43F1 0000                  		lea	(a1,d0.w),a1
0001C92C 323C 000B                  		move.w	#$B,d1
0001C930 6000 0000                  		bra.w	LoadTiles
0001C934                            ; ===========================================================================
0001C934 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C93C                            ; ===========================================================================
0001C93C                            
0001C93C                            loc_1C33C:
0001C93C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C940 6A00                       		bpl.s	loc_1C37A
0001C942 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C948 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C94C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C950 0240 0003                  		andi.w	#3,d0
0001C954 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C958 E148                       		lsl.w	#8,d0
0001C95A D040                       		add.w	d0,d0
0001C95C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C966 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C96A 43F1 0000                  		lea	(a1,d0.w),a1
0001C96E 323C 000F                  		move.w	#$F,d1
0001C972 6000 0000                  		bra.w	LoadTiles
0001C976                            ; ===========================================================================
0001C976 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C97A                            ; ===========================================================================
0001C97A                            
0001C97A                            loc_1C37A:
0001C97A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C97E 6A00                       		bpl.s	locret_1C3B4
0001C980 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C986 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C98A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C98E 0240 0003                  		andi.w	#3,d0
0001C992 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C996 E148                       		lsl.w	#8,d0
0001C998 D040                       		add.w	d0,d0
0001C99A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9A4 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9A8 43F1 0000                  		lea	(a1,d0.w),a1
0001C9AC 323C 000F                  		move.w	#$F,d1
0001C9B0 6000 0000                  		bra.w	LoadTiles
0001C9B4                            ; ===========================================================================
0001C9B4                            
0001C9B4                            locret_1C3B4:
0001C9B4 4E75                       		rts	
0001C9B6                            ; ===========================================================================
0001C9B6                            
0001C9B6                            AniArt_none:				; XREF: AniArt_Index
0001C9B6 4E75                       		rts	
0001C9B8                            
0001C9B8                            ; ---------------------------------------------------------------------------
0001C9B8                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C9B8                            ; ---------------------------------------------------------------------------
0001C9B8                            
0001C9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9B8                            
0001C9B8                            
0001C9B8                            LoadTiles:
0001C9B8 2C99                       		move.l	(a1)+,(a6)
0001C9BA 2C99                       		move.l	(a1)+,(a6)
0001C9BC 2C99                       		move.l	(a1)+,(a6)
0001C9BE 2C99                       		move.l	(a1)+,(a6)
0001C9C0 2C99                       		move.l	(a1)+,(a6)
0001C9C2 2C99                       		move.l	(a1)+,(a6)
0001C9C4 2C99                       		move.l	(a1)+,(a6)
0001C9C6 2C99                       		move.l	(a1)+,(a6)
0001C9C8 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9CC 4E75                       		rts	
0001C9CE                            ; End of function LoadTiles
0001C9CE                            
0001C9CE                            ; ===========================================================================
0001C9CE                            ; ---------------------------------------------------------------------------
0001C9CE                            ; Animated pattern routine - more Marble Zone
0001C9CE                            ; ---------------------------------------------------------------------------
0001C9CE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9D2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9D6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9DA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9DE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C9E2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C9E6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C9EA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C9EE                            ; ===========================================================================
0001C9EE                            
0001C9EE                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C9EE 2C91                       		move.l	(a1),(a6)
0001C9F0 43E9 0010                  		lea	$10(a1),a1
0001C9F4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C9F8 4E75                       		rts	
0001C9FA                            ; ===========================================================================
0001C9FA                            
0001C9FA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C9FA 2029 0002                  		move.l	2(a1),d0
0001C9FE 1029 0001                  		move.b	1(a1),d0
0001CA02 E098                       		ror.l	#8,d0
0001CA04 2C80                       		move.l	d0,(a6)
0001CA06 43E9 0010                  		lea	$10(a1),a1
0001CA0A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA0E 4E75                       		rts	
0001CA10                            ; ===========================================================================
0001CA10                            
0001CA10                            loc_1C410:				; XREF: AniArt_MZextra
0001CA10 2CA9 0002                  		move.l	2(a1),(a6)
0001CA14 43E9 0010                  		lea	$10(a1),a1
0001CA18 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA1C 4E75                       		rts	
0001CA1E                            ; ===========================================================================
0001CA1E                            
0001CA1E                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA1E 2029 0004                  		move.l	4(a1),d0
0001CA22 1029 0003                  		move.b	3(a1),d0
0001CA26 E098                       		ror.l	#8,d0
0001CA28 2C80                       		move.l	d0,(a6)
0001CA2A 43E9 0010                  		lea	$10(a1),a1
0001CA2E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA32 4E75                       		rts	
0001CA34                            ; ===========================================================================
0001CA34                            
0001CA34                            loc_1C434:				; XREF: AniArt_MZextra
0001CA34 2CA9 0004                  		move.l	4(a1),(a6)
0001CA38 43E9 0010                  		lea	$10(a1),a1
0001CA3C 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA40 4E75                       		rts	
0001CA42                            ; ===========================================================================
0001CA42                            
0001CA42                            loc_1C442:				; XREF: AniArt_MZextra
0001CA42 2029 0006                  		move.l	6(a1),d0
0001CA46 1029 0005                  		move.b	5(a1),d0
0001CA4A E098                       		ror.l	#8,d0
0001CA4C 2C80                       		move.l	d0,(a6)
0001CA4E 43E9 0010                  		lea	$10(a1),a1
0001CA52 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA56 4E75                       		rts	
0001CA58                            ; ===========================================================================
0001CA58                            
0001CA58                            loc_1C458:				; XREF: AniArt_MZextra
0001CA58 2CA9 0006                  		move.l	6(a1),(a6)
0001CA5C 43E9 0010                  		lea	$10(a1),a1
0001CA60 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA64 4E75                       		rts	
0001CA66                            ; ===========================================================================
0001CA66                            
0001CA66                            loc_1C466:				; XREF: AniArt_MZextra
0001CA66 2029 0008                  		move.l	8(a1),d0
0001CA6A 1029 0007                  		move.b	7(a1),d0
0001CA6E E098                       		ror.l	#8,d0
0001CA70 2C80                       		move.l	d0,(a6)
0001CA72 43E9 0010                  		lea	$10(a1),a1
0001CA76 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA7A 4E75                       		rts	
0001CA7C                            ; ===========================================================================
0001CA7C                            
0001CA7C                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA7C 2CA9 0008                  		move.l	8(a1),(a6)
0001CA80 43E9 0010                  		lea	$10(a1),a1
0001CA84 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CA88 4E75                       		rts	
0001CA8A                            ; ===========================================================================
0001CA8A                            
0001CA8A                            loc_1C48A:				; XREF: AniArt_MZextra
0001CA8A 2029 000A                  		move.l	$A(a1),d0
0001CA8E 1029 0009                  		move.b	9(a1),d0
0001CA92 E098                       		ror.l	#8,d0
0001CA94 2C80                       		move.l	d0,(a6)
0001CA96 43E9 0010                  		lea	$10(a1),a1
0001CA9A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CA9E 4E75                       		rts	
0001CAA0                            ; ===========================================================================
0001CAA0                            
0001CAA0                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CAA0 2CA9 000A                  		move.l	$A(a1),(a6)
0001CAA4 43E9 0010                  		lea	$10(a1),a1
0001CAA8 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CAAC 4E75                       		rts	
0001CAAE                            ; ===========================================================================
0001CAAE                            
0001CAAE                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CAAE 2029 000C                  		move.l	$C(a1),d0
0001CAB2 1029 000B                  		move.b	$B(a1),d0
0001CAB6 E098                       		ror.l	#8,d0
0001CAB8 2C80                       		move.l	d0,(a6)
0001CABA 43E9 0010                  		lea	$10(a1),a1
0001CABE 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CAC2 4E75                       		rts	
0001CAC4                            ; ===========================================================================
0001CAC4                            
0001CAC4                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CAC4 2CA9 000C                  		move.l	$C(a1),(a6)
0001CAC8 43E9 0010                  		lea	$10(a1),a1
0001CACC 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAD0 4E75                       		rts	
0001CAD2                            ; ===========================================================================
0001CAD2                            
0001CAD2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAD2 2029 000C                  		move.l	$C(a1),d0
0001CAD6 E198                       		rol.l	#8,d0
0001CAD8 1011                       		move.b	0(a1),d0
0001CADA 2C80                       		move.l	d0,(a6)
0001CADC 43E9 0010                  		lea	$10(a1),a1
0001CAE0 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CAE4 4E75                       		rts	
0001CAE6                            ; ===========================================================================
0001CAE6                            
0001CAE6                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CAE6 3CA9 000E                  		move.w	$E(a1),(a6)
0001CAEA 3C91                       		move.w	0(a1),(a6)
0001CAEC 43E9 0010                  		lea	$10(a1),a1
0001CAF0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CAF4 4E75                       		rts	
0001CAF6                            ; ===========================================================================
0001CAF6                            
0001CAF6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CAF6 2011                       		move.l	0(a1),d0
0001CAF8 1029 000F                  		move.b	$F(a1),d0
0001CAFC E098                       		ror.l	#8,d0
0001CAFE 2C80                       		move.l	d0,(a6)
0001CB00 43E9 0010                  		lea	$10(a1),a1
0001CB04 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB08 4E75                       		rts	
0001CB0A                            
0001CB0A                            ; ---------------------------------------------------------------------------
0001CB0A                            ; Animated pattern routine - giant ring
0001CB0A                            ; ---------------------------------------------------------------------------
0001CB0A                            
0001CB0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB0A                            
0001CB0A                            
0001CB0A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB0A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB0E 6600                       		bne.s	loc_1C518
0001CB10 4E75                       		rts	
0001CB12                            ; ===========================================================================
0001CB12                            
0001CB12                            loc_1C518:
0001CB12 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB18 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB1E 7000                       		moveq	#0,d0
0001CB20 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB24 43F1 0000                  		lea	(a1,d0.w),a1
0001CB28 0640 8000                  		addi.w	#$8000,d0
0001CB2C E588                       		lsl.l	#2,d0
0001CB2E E448                       		lsr.w	#2,d0
0001CB30 0040 4000                  		ori.w	#$4000,d0
0001CB34 4840                       		swap	d0
0001CB36 2D40 0004                  		move.l	d0,4(a6)
0001CB3A 323C 000D                  		move.w	#$D,d1
0001CB3E 6000 FE78                  		bra.w	LoadTiles
0001CB42                            ; End of function AniArt_GiantRing
0001CB42                            
0001CB42                            ; ===========================================================================
0001CB42                            ; ---------------------------------------------------------------------------
0001CB42                            ; Object 21 - SCORE, TIME, RINGS
0001CB42                            ; ---------------------------------------------------------------------------
0001CB42                            
0001CB42                            Obj21:					; XREF: Obj_Index
0001CB42 7000                       		moveq	#0,d0
0001CB44 1028 0024                  		move.b	$24(a0),d0
0001CB48 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB4C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB50                            ; ===========================================================================
0001CB50 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB52 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB54                            ; ===========================================================================
0001CB54                            
0001CB54                            Obj21_Main:				; XREF: Obj21_Main
0001CB54 5428 0024                  		addq.b	#2,$24(a0)
0001CB58 317C 0090 0008             		move.w	#$90,8(a0)
0001CB5E 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB64 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB6C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB72 117C 0000 0001             		move.b	#0,1(a0)
0001CB78 117C 0000 0018             		move.b	#0,$18(a0)
0001CB7E                            
0001CB7E                            Obj21_Flash:				; XREF: Obj21_Main
0001CB7E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB82 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB84 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CB88 4EF9 0000 DBB4             		jmp	DisplaySprite
0001CB8E                            ; ===========================================================================
0001CB8E                            
0001CB8E                            Obj21_Flash2:
0001CB8E 7000                       		moveq	#0,d0
0001CB90 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CB96 6600                       		bne.s	Obj21_Display
0001CB98 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CB9A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBA0 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBA2 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBA4                            
0001CBA4                            Obj21_Display:
0001CBA4 1140 001A                  		move.b	d0,$1A(a0)
0001CBA8 4EF9 0000 DBB4             		jmp	DisplaySprite
0001CBAE                            ; ===========================================================================
0001CBAE                            ; ---------------------------------------------------------------------------
0001CBAE                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBAE                            ; ---------------------------------------------------------------------------
0001CBAE                            Map_obj21:
0001CBAE                            	include "_maps\obj21.asm"
0001CBAE                            ; ---------------------------------------------------------------------------
0001CBAE                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBAE                            ; ---------------------------------------------------------------------------
0001CBAE 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CBB2 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CBB6 0A                         byte_1C5BC:	dc.b $A
0001CBB7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBBC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBC1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBC6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBCB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBD0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBD5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBDA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBDF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBE4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CBE9 00                         		dc.b 0
0001CBEA 0A                         byte_1C5F0:	dc.b $A
0001CBEB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBF0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBF5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBFA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBFF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC04 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC09 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC0E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC13 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC18 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC1D 00                         		dc.b 0
0001CC1E 0A                         byte_1C624:	dc.b $A
0001CC1F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC24 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC29 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC2E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC33 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC38 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC3D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC42 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC47 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC4C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC51 00                         		dc.b 0
0001CC52 0A                         byte_1C658:	dc.b $A
0001CC53 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC58 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC5D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC62 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC67 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC6C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC71 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC76 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC7B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC80 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC86 00                         		even
0001CC86 00                         		even
0001CC86                            
0001CC86                            ; ---------------------------------------------------------------------------
0001CC86                            ; Add points subroutine
0001CC86                            ; ---------------------------------------------------------------------------
0001CC86                            
0001CC86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC86                            
0001CC86                            
0001CC86                            AddPoints:
0001CC86 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CC8C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CC90 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CC94 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CC96 223C 000F 423F             		move.l	#999999,d1
0001CC9C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CC9E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCA2 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCA4 2481                       		move.l	d1,(a2)
0001CCA6                            
0001CCA6                            loc_1C6AC:
0001CCA6 2013                       		move.l	(a3),d0
0001CCA8 B092                       		cmp.l	(a2),d0
0001CCAA 6500 0000                  		bcs.w	locret_1C6B6
0001CCAE 2480                       		move.l	d0,(a2)
0001CCB0                            
0001CCB0                            locret_1C6B6:
0001CCB0 4E75                       		rts	
0001CCB2                            ; End of function AddPoints
0001CCB2                            
0001CCB2                            ; ---------------------------------------------------------------------------
0001CCB2                            ; Subroutine to	update the HUD
0001CCB2                            ; ---------------------------------------------------------------------------
0001CCB2                            
0001CCB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCB2                            
0001CCB2                            
0001CCB2                            HudUpdate:
0001CCB2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CCB6 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CCBA 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CCBE 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CCC0 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCC4 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCCA 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCCE 6100 0000                  		bsr.w	Hud_Score
0001CCD2                            
0001CCD2                            Hud_ChkRings:
0001CCD2 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCD6 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCD8 6A00                       		bpl.s	loc_1C6E4
0001CCDA 6100 0000                  		bsr.w	Hud_LoadZero
0001CCDE                            
0001CCDE                            loc_1C6E4:
0001CCDE 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCE2 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CCE8 7200                       		moveq	#0,d1
0001CCEA 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CCEE 6100 0000                  		bsr.w	Hud_Rings
0001CCF2                            
0001CCF2                            Hud_ChkTime:
0001CCF2 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CCF6 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CCF8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CCFC 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CCFE 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD02 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD08 6700                       		beq.s	TimeOver	; if yes, branch
0001CD0A 5221                       		addq.b	#1,-(a1)
0001CD0C 0C11 003C                  		cmpi.b	#60,(a1)
0001CD10 6500                       		bcs.s	Hud_ChkLives
0001CD12 12BC 0000                  		move.b	#0,(a1)
0001CD16 5221                       		addq.b	#1,-(a1)
0001CD18 0C11 003C                  		cmpi.b	#60,(a1)
0001CD1C 6500                       		bcs.s	loc_1C734
0001CD1E 12BC 0000                  		move.b	#0,(a1)
0001CD22 5221                       		addq.b	#1,-(a1)
0001CD24 0C11 0009                  		cmpi.b	#9,(a1)
0001CD28 6500                       		bcs.s	loc_1C734
0001CD2A 12BC 0009                  		move.b	#9,(a1)
0001CD2E                            
0001CD2E                            loc_1C734:
0001CD2E 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD34 7200                       		moveq	#0,d1
0001CD36 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD3A 6100 0000                  		bsr.w	Hud_Mins
0001CD3E 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD44 7200                       		moveq	#0,d1
0001CD46 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD4A 6100 0000                  		bsr.w	Hud_Secs
0001CD4E                            
0001CD4E                            Hud_ChkLives:
0001CD4E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD52 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD54 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD58 6100 0000                  		bsr.w	Hud_Lives
0001CD5C                            
0001CD5C                            Hud_ChkBonus:
0001CD5C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD60 6700                       		beq.s	Hud_End		; if not, branch
0001CD62 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD66 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD70 7200                       		moveq	#0,d1
0001CD72 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD76 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD7A 7200                       		moveq	#0,d1
0001CD7C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD80 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD84                            
0001CD84                            Hud_End:
0001CD84 4E75                       		rts	
0001CD86                            ; ===========================================================================
0001CD86                            
0001CD86                            TimeOver:				; XREF: Hud_ChkTime
0001CD86 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CD8A 41F8 D000                  		lea	($FFFFD000).w,a0
0001CD8E 2448                       		movea.l	a0,a2
0001CD90 6100 E908                  		bsr.w	KillSonic
0001CD94 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CD9A 4E75                       		rts	
0001CD9C                            ; ===========================================================================
0001CD9C                            
0001CD9C                            HudDebug:				; XREF: HudUpdate
0001CD9C 6100 0000                  		bsr.w	HudDb_XY
0001CDA0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDA4 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDA6 6A00                       		bpl.s	HudDb_Rings
0001CDA8 6100 0000                  		bsr.w	Hud_LoadZero
0001CDAC                            
0001CDAC                            HudDb_Rings:
0001CDAC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDB0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CDB6 7200                       		moveq	#0,d1
0001CDB8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CDBC 6100 0000                  		bsr.w	Hud_Rings
0001CDC0                            
0001CDC0                            HudDb_ObjCount:
0001CDC0 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDC6 7200                       		moveq	#0,d1
0001CDC8 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDCC 6100 0000                  		bsr.w	Hud_Secs
0001CDD0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDD4 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDD6 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDDA 6100 0000                  		bsr.w	Hud_Lives
0001CDDE                            
0001CDDE                            HudDb_ChkBonus:
0001CDDE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CDE2 6700                       		beq.s	HudDb_End	; if not, branch
0001CDE4 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CDE8 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CDF2 7200                       		moveq	#0,d1
0001CDF4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CDF8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDFC 7200                       		moveq	#0,d1
0001CDFE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE02 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE06                            
0001CE06                            HudDb_End:
0001CE06 4E75                       		rts	
0001CE08                            ; End of function HudUpdate
0001CE08                            
0001CE08                            ; ---------------------------------------------------------------------------
0001CE08                            ; Subroutine to	load "0" on the	HUD
0001CE08                            ; ---------------------------------------------------------------------------
0001CE08                            
0001CE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE08                            
0001CE08                            
0001CE08                            Hud_LoadZero:				; XREF: HudUpdate
0001CE08 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE12 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE16 343C 0002                  		move.w	#2,d2
0001CE1A 6000                       		bra.s	loc_1C83E
0001CE1C                            ; End of function Hud_LoadZero
0001CE1C                            
0001CE1C                            ; ---------------------------------------------------------------------------
0001CE1C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE1C                            ; ---------------------------------------------------------------------------
0001CE1C                            
0001CE1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE1C                            
0001CE1C                            
0001CE1C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE1C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE22 6100 0000                  		bsr.w	Hud_Lives
0001CE26 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE30 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE34 343C 000E                  		move.w	#$E,d2
0001CE38                            
0001CE38                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE38 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE3C                            
0001CE3C                            loc_1C842:
0001CE3C 323C 000F                  		move.w	#$F,d1
0001CE40 101A                       		move.b	(a2)+,d0
0001CE42 6B00                       		bmi.s	loc_1C85E
0001CE44 4880                       		ext.w	d0
0001CE46 EB48                       		lsl.w	#5,d0
0001CE48 47F1 0000                  		lea	(a1,d0.w),a3
0001CE4C                            
0001CE4C                            loc_1C852:
0001CE4C 2C9B                       		move.l	(a3)+,(a6)
0001CE4E 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE52                            
0001CE52                            loc_1C858:
0001CE52 51CA FFE8                  		dbf	d2,loc_1C842
0001CE56                            
0001CE56 4E75                       		rts	
0001CE58                            ; ===========================================================================
0001CE58                            
0001CE58                            loc_1C85E:
0001CE58 2CBC 0000 0000             		move.l	#0,(a6)
0001CE5E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE62                            
0001CE62 60EE                       		bra.s	loc_1C858
0001CE64                            ; End of function Hud_Base
0001CE64                            
0001CE64                            ; ===========================================================================
0001CE64 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE70 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE74                            ; ---------------------------------------------------------------------------
0001CE74                            ; Subroutine to	load debug mode	numbers	patterns
0001CE74                            ; ---------------------------------------------------------------------------
0001CE74                            
0001CE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE74                            
0001CE74                            
0001CE74                            HudDb_XY:				; XREF: HudDebug
0001CE74 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE7E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE82 4841                       		swap	d1
0001CE84 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CE88 6100                       		bsr.s	HudDb_XY2
0001CE8A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CE8E 4841                       		swap	d1
0001CE90 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CE94                            ; End of function HudDb_XY
0001CE94                            
0001CE94                            
0001CE94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE94                            
0001CE94                            
0001CE94                            HudDb_XY2:
0001CE94 7C07                       		moveq	#7,d6
0001CE96 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CE9C                            
0001CE9C                            HudDb_XYLoop:
0001CE9C E959                       		rol.w	#4,d1
0001CE9E 3401                       		move.w	d1,d2
0001CEA0 0242 000F                  		andi.w	#$F,d2
0001CEA4 0C42 000A                  		cmpi.w	#$A,d2
0001CEA8 6500                       		bcs.s	loc_1C8B2
0001CEAA 5E42                       		addq.w	#7,d2
0001CEAC                            
0001CEAC                            loc_1C8B2:
0001CEAC EB4A                       		lsl.w	#5,d2
0001CEAE 47F1 2000                  		lea	(a1,d2.w),a3
0001CEB2 2C9B                       		move.l	(a3)+,(a6)
0001CEB4 2C9B                       		move.l	(a3)+,(a6)
0001CEB6 2C9B                       		move.l	(a3)+,(a6)
0001CEB8 2C9B                       		move.l	(a3)+,(a6)
0001CEBA 2C9B                       		move.l	(a3)+,(a6)
0001CEBC 2C9B                       		move.l	(a3)+,(a6)
0001CEBE 2C9B                       		move.l	(a3)+,(a6)
0001CEC0 2C9B                       		move.l	(a3)+,(a6)
0001CEC2 4841                       		swap	d1
0001CEC4 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CEC8                            
0001CEC8 4E75                       		rts	
0001CECA                            ; End of function HudDb_XY2
0001CECA                            
0001CECA                            ; ---------------------------------------------------------------------------
0001CECA                            ; Subroutine to	load rings numbers patterns
0001CECA                            ; ---------------------------------------------------------------------------
0001CECA                            
0001CECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CECA                            
0001CECA                            
0001CECA                            Hud_Rings:				; XREF: HudUpdate
0001CECA 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CED0 7C02                       		moveq	#2,d6
0001CED2 6000                       		bra.s	Hud_LoadArt
0001CED4                            ; End of function Hud_Rings
0001CED4                            
0001CED4                            ; ---------------------------------------------------------------------------
0001CED4                            ; Subroutine to	load score numbers patterns
0001CED4                            ; ---------------------------------------------------------------------------
0001CED4                            
0001CED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CED4                            
0001CED4                            
0001CED4                            Hud_Score:				; XREF: HudUpdate
0001CED4 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEDA 7C05                       		moveq	#5,d6
0001CEDC                            
0001CEDC                            Hud_LoadArt:
0001CEDC 7800                       		moveq	#0,d4
0001CEDE 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEE2                            
0001CEE2                            Hud_ScoreLoop:
0001CEE2 7400                       		moveq	#0,d2
0001CEE4 261A                       		move.l	(a2)+,d3
0001CEE6                            
0001CEE6                            loc_1C8EC:
0001CEE6 9283                       		sub.l	d3,d1
0001CEE8 6500                       		bcs.s	loc_1C8F4
0001CEEA 5242                       		addq.w	#1,d2
0001CEEC 60F8                       		bra.s	loc_1C8EC
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            loc_1C8F4:
0001CEEE D283                       		add.l	d3,d1
0001CEF0 4A42                       		tst.w	d2
0001CEF2 6700                       		beq.s	loc_1C8FE
0001CEF4 383C 0001                  		move.w	#1,d4
0001CEF8                            
0001CEF8                            loc_1C8FE:
0001CEF8 4A44                       		tst.w	d4
0001CEFA 6700                       		beq.s	loc_1C92C
0001CEFC ED4A                       		lsl.w	#6,d2
0001CEFE 2D40 0004                  		move.l	d0,4(a6)
0001CF02 47F1 2000                  		lea	(a1,d2.w),a3
0001CF06 2C9B                       		move.l	(a3)+,(a6)
0001CF08 2C9B                       		move.l	(a3)+,(a6)
0001CF0A 2C9B                       		move.l	(a3)+,(a6)
0001CF0C 2C9B                       		move.l	(a3)+,(a6)
0001CF0E 2C9B                       		move.l	(a3)+,(a6)
0001CF10 2C9B                       		move.l	(a3)+,(a6)
0001CF12 2C9B                       		move.l	(a3)+,(a6)
0001CF14 2C9B                       		move.l	(a3)+,(a6)
0001CF16 2C9B                       		move.l	(a3)+,(a6)
0001CF18 2C9B                       		move.l	(a3)+,(a6)
0001CF1A 2C9B                       		move.l	(a3)+,(a6)
0001CF1C 2C9B                       		move.l	(a3)+,(a6)
0001CF1E 2C9B                       		move.l	(a3)+,(a6)
0001CF20 2C9B                       		move.l	(a3)+,(a6)
0001CF22 2C9B                       		move.l	(a3)+,(a6)
0001CF24 2C9B                       		move.l	(a3)+,(a6)
0001CF26                            
0001CF26                            loc_1C92C:
0001CF26 0680 0040 0000             		addi.l	#$400000,d0
0001CF2C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF30                            
0001CF30 4E75                       		rts	
0001CF32                            ; End of function Hud_Score
0001CF32                            
0001CF32                            ; ---------------------------------------------------------------------------
0001CF32                            ; Subroutine to	load countdown numbers on the continue screen
0001CF32                            ; ---------------------------------------------------------------------------
0001CF32                            
0001CF32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF32                            
0001CF32                            
0001CF32                            ContScrCounter:				; XREF: ContinueScreen
0001CF32 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF3C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF42 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF48 7C01                       		moveq	#1,d6
0001CF4A 7800                       		moveq	#0,d4
0001CF4C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF50                            
0001CF50                            ContScr_Loop:
0001CF50 7400                       		moveq	#0,d2
0001CF52 261A                       		move.l	(a2)+,d3
0001CF54                            
0001CF54                            loc_1C95A:
0001CF54 9283                       		sub.l	d3,d1
0001CF56 6500                       		bcs.s	loc_1C962
0001CF58 5242                       		addq.w	#1,d2
0001CF5A 60F8                       		bra.s	loc_1C95A
0001CF5C                            ; ===========================================================================
0001CF5C                            
0001CF5C                            loc_1C962:
0001CF5C D283                       		add.l	d3,d1
0001CF5E ED4A                       		lsl.w	#6,d2
0001CF60 47F1 2000                  		lea	(a1,d2.w),a3
0001CF64 2C9B                       		move.l	(a3)+,(a6)
0001CF66 2C9B                       		move.l	(a3)+,(a6)
0001CF68 2C9B                       		move.l	(a3)+,(a6)
0001CF6A 2C9B                       		move.l	(a3)+,(a6)
0001CF6C 2C9B                       		move.l	(a3)+,(a6)
0001CF6E 2C9B                       		move.l	(a3)+,(a6)
0001CF70 2C9B                       		move.l	(a3)+,(a6)
0001CF72 2C9B                       		move.l	(a3)+,(a6)
0001CF74 2C9B                       		move.l	(a3)+,(a6)
0001CF76 2C9B                       		move.l	(a3)+,(a6)
0001CF78 2C9B                       		move.l	(a3)+,(a6)
0001CF7A 2C9B                       		move.l	(a3)+,(a6)
0001CF7C 2C9B                       		move.l	(a3)+,(a6)
0001CF7E 2C9B                       		move.l	(a3)+,(a6)
0001CF80 2C9B                       		move.l	(a3)+,(a6)
0001CF82 2C9B                       		move.l	(a3)+,(a6)
0001CF84 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CF88                            
0001CF88 4E75                       		rts	
0001CF8A                            ; End of function ContScrCounter
0001CF8A                            
0001CF8A                            ; ===========================================================================
0001CF8A                            ; ---------------------------------------------------------------------------
0001CF8A                            ; HUD counter sizes
0001CF8A                            ; ---------------------------------------------------------------------------
0001CF8A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CF8E 0000 2710                  Hud_10000:	dc.l 10000
0001CF92 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CF96 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CF9A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CF9E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFA2                            
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2                            ; Subroutine to	load time numbers patterns
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2                            
0001CFA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFA2                            
0001CFA2                            
0001CFA2                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFA2 45F9 0001 CF9E             		lea	(Hud_1).l,a2
0001CFA8 7C00                       		moveq	#0,d6
0001CFAA 6000                       		bra.s	loc_1C9BA
0001CFAC                            ; End of function Hud_Mins
0001CFAC                            
0001CFAC                            
0001CFAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFAC                            
0001CFAC                            
0001CFAC                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFAC 45F9 0001 CF9A             		lea	(Hud_10).l,a2
0001CFB2 7C01                       		moveq	#1,d6
0001CFB4                            
0001CFB4                            loc_1C9BA:
0001CFB4 7800                       		moveq	#0,d4
0001CFB6 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFBA                            
0001CFBA                            Hud_TimeLoop:
0001CFBA 7400                       		moveq	#0,d2
0001CFBC 261A                       		move.l	(a2)+,d3
0001CFBE                            
0001CFBE                            loc_1C9C4:
0001CFBE 9283                       		sub.l	d3,d1
0001CFC0 6500                       		bcs.s	loc_1C9CC
0001CFC2 5242                       		addq.w	#1,d2
0001CFC4 60F8                       		bra.s	loc_1C9C4
0001CFC6                            ; ===========================================================================
0001CFC6                            
0001CFC6                            loc_1C9CC:
0001CFC6 D283                       		add.l	d3,d1
0001CFC8 4A42                       		tst.w	d2
0001CFCA 6700                       		beq.s	loc_1C9D6
0001CFCC 383C 0001                  		move.w	#1,d4
0001CFD0                            
0001CFD0                            loc_1C9D6:
0001CFD0 ED4A                       		lsl.w	#6,d2
0001CFD2 2D40 0004                  		move.l	d0,4(a6)
0001CFD6 47F1 2000                  		lea	(a1,d2.w),a3
0001CFDA 2C9B                       		move.l	(a3)+,(a6)
0001CFDC 2C9B                       		move.l	(a3)+,(a6)
0001CFDE 2C9B                       		move.l	(a3)+,(a6)
0001CFE0 2C9B                       		move.l	(a3)+,(a6)
0001CFE2 2C9B                       		move.l	(a3)+,(a6)
0001CFE4 2C9B                       		move.l	(a3)+,(a6)
0001CFE6 2C9B                       		move.l	(a3)+,(a6)
0001CFE8 2C9B                       		move.l	(a3)+,(a6)
0001CFEA 2C9B                       		move.l	(a3)+,(a6)
0001CFEC 2C9B                       		move.l	(a3)+,(a6)
0001CFEE 2C9B                       		move.l	(a3)+,(a6)
0001CFF0 2C9B                       		move.l	(a3)+,(a6)
0001CFF2 2C9B                       		move.l	(a3)+,(a6)
0001CFF4 2C9B                       		move.l	(a3)+,(a6)
0001CFF6 2C9B                       		move.l	(a3)+,(a6)
0001CFF8 2C9B                       		move.l	(a3)+,(a6)
0001CFFA 0680 0040 0000             		addi.l	#$400000,d0
0001D000 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D004                            
0001D004 4E75                       		rts	
0001D006                            ; End of function Hud_Secs
0001D006                            
0001D006                            ; ---------------------------------------------------------------------------
0001D006                            ; Subroutine to	load time/ring bonus numbers patterns
0001D006                            ; ---------------------------------------------------------------------------
0001D006                            
0001D006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D006                            
0001D006                            
0001D006                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D006 45F9 0001 CF92             		lea	(Hud_1000).l,a2
0001D00C 7C03                       		moveq	#3,d6
0001D00E 7800                       		moveq	#0,d4
0001D010 43FA 0000                  		lea	Art_Hud(pc),a1
0001D014                            
0001D014                            Hud_BonusLoop:
0001D014 7400                       		moveq	#0,d2
0001D016 261A                       		move.l	(a2)+,d3
0001D018                            
0001D018                            loc_1CA1E:
0001D018 9283                       		sub.l	d3,d1
0001D01A 6500                       		bcs.s	loc_1CA26
0001D01C 5242                       		addq.w	#1,d2
0001D01E 60F8                       		bra.s	loc_1CA1E
0001D020                            ; ===========================================================================
0001D020                            
0001D020                            loc_1CA26:
0001D020 D283                       		add.l	d3,d1
0001D022 4A42                       		tst.w	d2
0001D024 6700                       		beq.s	loc_1CA30
0001D026 383C 0001                  		move.w	#1,d4
0001D02A                            
0001D02A                            loc_1CA30:
0001D02A 4A44                       		tst.w	d4
0001D02C 6700                       		beq.s	Hud_ClrBonus
0001D02E ED4A                       		lsl.w	#6,d2
0001D030 47F1 2000                  		lea	(a1,d2.w),a3
0001D034 2C9B                       		move.l	(a3)+,(a6)
0001D036 2C9B                       		move.l	(a3)+,(a6)
0001D038 2C9B                       		move.l	(a3)+,(a6)
0001D03A 2C9B                       		move.l	(a3)+,(a6)
0001D03C 2C9B                       		move.l	(a3)+,(a6)
0001D03E 2C9B                       		move.l	(a3)+,(a6)
0001D040 2C9B                       		move.l	(a3)+,(a6)
0001D042 2C9B                       		move.l	(a3)+,(a6)
0001D044 2C9B                       		move.l	(a3)+,(a6)
0001D046 2C9B                       		move.l	(a3)+,(a6)
0001D048 2C9B                       		move.l	(a3)+,(a6)
0001D04A 2C9B                       		move.l	(a3)+,(a6)
0001D04C 2C9B                       		move.l	(a3)+,(a6)
0001D04E 2C9B                       		move.l	(a3)+,(a6)
0001D050 2C9B                       		move.l	(a3)+,(a6)
0001D052 2C9B                       		move.l	(a3)+,(a6)
0001D054                            
0001D054                            loc_1CA5A:
0001D054 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D058                            
0001D058 4E75                       		rts	
0001D05A                            ; ===========================================================================
0001D05A                            
0001D05A                            Hud_ClrBonus:
0001D05A 7A0F                       		moveq	#$F,d5
0001D05C                            
0001D05C                            Hud_ClrBonusLoop:
0001D05C 2CBC 0000 0000             		move.l	#0,(a6)
0001D062 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D066                            
0001D066 60EC                       		bra.s	loc_1CA5A
0001D068                            ; End of function Hud_TimeRingBonus
0001D068                            
0001D068                            ; ---------------------------------------------------------------------------
0001D068                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D068                            ; ---------------------------------------------------------------------------
0001D068                            
0001D068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D068                            
0001D068                            
0001D068                            Hud_Lives:				; XREF: Hud_ChkLives
0001D068 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D06E 7200                       		moveq	#0,d1
0001D070 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D074 45F9 0001 CF9A             		lea	(Hud_10).l,a2
0001D07A 7C01                       		moveq	#1,d6
0001D07C 7800                       		moveq	#0,d4
0001D07E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D082                            
0001D082                            Hud_LivesLoop:
0001D082 2D40 0004                  		move.l	d0,4(a6)
0001D086 7400                       		moveq	#0,d2
0001D088 261A                       		move.l	(a2)+,d3
0001D08A                            
0001D08A                            loc_1CA90:
0001D08A 9283                       		sub.l	d3,d1
0001D08C 6500                       		bcs.s	loc_1CA98
0001D08E 5242                       		addq.w	#1,d2
0001D090 60F8                       		bra.s	loc_1CA90
0001D092                            ; ===========================================================================
0001D092                            
0001D092                            loc_1CA98:
0001D092 D283                       		add.l	d3,d1
0001D094 4A42                       		tst.w	d2
0001D096 6700                       		beq.s	loc_1CAA2
0001D098 383C 0001                  		move.w	#1,d4
0001D09C                            
0001D09C                            loc_1CAA2:
0001D09C 4A44                       		tst.w	d4
0001D09E 6700                       		beq.s	Hud_ClrLives
0001D0A0                            
0001D0A0                            loc_1CAA6:
0001D0A0 EB4A                       		lsl.w	#5,d2
0001D0A2 47F1 2000                  		lea	(a1,d2.w),a3
0001D0A6 2C9B                       		move.l	(a3)+,(a6)
0001D0A8 2C9B                       		move.l	(a3)+,(a6)
0001D0AA 2C9B                       		move.l	(a3)+,(a6)
0001D0AC 2C9B                       		move.l	(a3)+,(a6)
0001D0AE 2C9B                       		move.l	(a3)+,(a6)
0001D0B0 2C9B                       		move.l	(a3)+,(a6)
0001D0B2 2C9B                       		move.l	(a3)+,(a6)
0001D0B4 2C9B                       		move.l	(a3)+,(a6)
0001D0B6                            
0001D0B6                            loc_1CABC:
0001D0B6 0680 0040 0000             		addi.l	#$400000,d0
0001D0BC 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D0C0                            
0001D0C0 4E75                       		rts	
0001D0C2                            ; ===========================================================================
0001D0C2                            
0001D0C2                            Hud_ClrLives:
0001D0C2 4A46                       		tst.w	d6
0001D0C4 67DA                       		beq.s	loc_1CAA6
0001D0C6 7A07                       		moveq	#7,d5
0001D0C8                            
0001D0C8                            Hud_ClrLivesLoop:
0001D0C8 2CBC 0000 0000             		move.l	#0,(a6)
0001D0CE 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0D2 60E2                       		bra.s	loc_1CABC
0001D0D4                            ; End of function Hud_Lives
0001D0D4                            
0001D0D4                            ; ===========================================================================
0001D0D4                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3D4                            		even
0001D3D4                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D514                            		even
0001D514                            ; ===========================================================================
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            ; When debug mode is currently in use
0001D514                            ; ---------------------------------------------------------------------------
0001D514                            
0001D514                            DebugMode:				; XREF: Obj01; Obj09
0001D514 7000                       		moveq	#0,d0
0001D516 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D51A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D51E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D522                            ; ===========================================================================
0001D522 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D524 0000                       		dc.w Debug_Skip-Debug_Index
0001D526                            ; ===========================================================================
0001D526                            
0001D526                            Debug_Main:				; XREF: Debug_Index
0001D526 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D52A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D530 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D536 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D53C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D542 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D548 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D54E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D554 117C 0000 001A             		move.b	#0,$1A(a0)
0001D55A 117C 0000 001C             		move.b	#0,$1C(a0)
0001D560 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D566 6600                       		bne.s	Debug_Zone	; if not, branch
0001D568 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D56E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D574 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D576 6000                       		bra.s	Debug_UseList
0001D578                            ; ===========================================================================
0001D578                            
0001D578                            Debug_Zone:
0001D578 7000                       		moveq	#0,d0
0001D57A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D57E                            
0001D57E                            Debug_UseList:
0001D57E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D584 D040                       		add.w	d0,d0
0001D586 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D58A 3C1A                       		move.w	(a2)+,d6
0001D58C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D590 6200                       		bhi.s	loc_1CF9E
0001D592 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D598                            
0001D598                            loc_1CF9E:
0001D598 6100 0000                  		bsr.w	Debug_ShowItem
0001D59C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5A2 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5A8                            
0001D5A8                            Debug_Skip:				; XREF: Debug_Index
0001D5A8 7006                       		moveq	#6,d0
0001D5AA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5B0 6700                       		beq.s	loc_1CFBE
0001D5B2 7000                       		moveq	#0,d0
0001D5B4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5B8                            
0001D5B8                            loc_1CFBE:
0001D5B8 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5BE D040                       		add.w	d0,d0
0001D5C0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5C4 3C1A                       		move.w	(a2)+,d6
0001D5C6 6100 0000                  		bsr.w	Debug_Control
0001D5CA 4EF9 0000 DBB4             		jmp	DisplaySprite
0001D5D0                            
0001D5D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5D0                            
0001D5D0                            
0001D5D0                            Debug_Control:
0001D5D0 7800                       		moveq	#0,d4
0001D5D2 323C 0001                  		move.w	#1,d1
0001D5D6 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5DA 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5DE 6600                       		bne.s	loc_1D018	; if yes, branch
0001D5E0 1038 F604                  		move.b	($FFFFF604).w,d0
0001D5E4 0240 000F                  		andi.w	#$F,d0
0001D5E8 6600                       		bne.s	loc_1D000
0001D5EA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5F0 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D5F6 6000 0000                  		bra.w	Debug_BackItem
0001D5FA                            ; ===========================================================================
0001D5FA                            
0001D5FA                            loc_1D000:
0001D5FA 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D5FE 6600                       		bne.s	loc_1D01C
0001D600 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D606 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D60A 6600                       		bne.s	loc_1D018
0001D60C 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D612                            
0001D612                            loc_1D018:
0001D612 1838 F604                  		move.b	($FFFFF604).w,d4
0001D616                            
0001D616                            loc_1D01C:
0001D616 7200                       		moveq	#0,d1
0001D618 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D61C 5241                       		addq.w	#1,d1
0001D61E 4841                       		swap	d1
0001D620 E881                       		asr.l	#4,d1
0001D622 2428 000C                  		move.l	$C(a0),d2
0001D626 2628 0008                  		move.l	8(a0),d3
0001D62A 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D62E 6700                       		beq.s	loc_1D03C	; if not, branch
0001D630 9481                       		sub.l	d1,d2
0001D632 6400                       		bcc.s	loc_1D03C
0001D634 7400                       		moveq	#0,d2
0001D636                            
0001D636                            loc_1D03C:
0001D636 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D63A 6700                       		beq.s	loc_1D052	; if not, branch
0001D63C D481                       		add.l	d1,d2
0001D63E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D644 6500                       		bcs.s	loc_1D052
0001D646 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D64C                            
0001D64C                            loc_1D052:
0001D64C 0804 0002                  		btst	#2,d4
0001D650 6700                       		beq.s	loc_1D05E
0001D652 9681                       		sub.l	d1,d3
0001D654 6400                       		bcc.s	loc_1D05E
0001D656 7600                       		moveq	#0,d3
0001D658                            
0001D658                            loc_1D05E:
0001D658 0804 0003                  		btst	#3,d4
0001D65C 6700                       		beq.s	loc_1D066
0001D65E D681                       		add.l	d1,d3
0001D660                            
0001D660                            loc_1D066:
0001D660 2142 000C                  		move.l	d2,$C(a0)
0001D664 2143 0008                  		move.l	d3,8(a0)
0001D668                            
0001D668                            Debug_BackItem:
0001D668 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D66E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D670 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D676 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D678 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D67C 6400                       		bcc.s	Debug_NoLoop
0001D67E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D682 6000                       		bra.s	Debug_NoLoop
0001D684                            ; ===========================================================================
0001D684                            
0001D684                            Debug_NextItem:
0001D684 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D68A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D68C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D690 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D694 6200                       		bhi.s	Debug_NoLoop
0001D696 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D69C                            
0001D69C                            Debug_NoLoop:
0001D69C 6000 0000                  		bra.w	Debug_ShowItem
0001D6A0                            ; ===========================================================================
0001D6A0                            
0001D6A0                            Debug_MakeItem:
0001D6A0 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6A6 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6A8 4EB9 0000 E03A             		jsr	SingleObjLoad
0001D6AE 6600                       		bne.s	Debug_Exit
0001D6B0 3368 0008 0008             		move.w	8(a0),8(a1)
0001D6B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6BC 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D6C0 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6C6 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6CC 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6D2 7000                       		moveq	#0,d0
0001D6D4 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6D8 E748                       		lsl.w	#3,d0
0001D6DA 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D6E0 4E75                       		rts	
0001D6E2                            ; ===========================================================================
0001D6E2                            
0001D6E2                            Debug_Exit:
0001D6E2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D6E8 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D6EA 7000                       		moveq	#0,d0
0001D6EC 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D6F0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D6F8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D6FE 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D702 3140 000A                  		move.w	d0,$A(a0)
0001D706 3140 000E                  		move.w	d0,$E(a0)
0001D70A 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D710 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D716 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D71C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D71E 4278 F780                  		clr.w	($FFFFF780).w
0001D722 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D728 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D730 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D736 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D73C 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D742 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D748                            
0001D748                            Debug_DoNothing:
0001D748 4E75                       		rts	
0001D74A                            ; End of function Debug_Control
0001D74A                            
0001D74A                            
0001D74A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D74A                            
0001D74A                            
0001D74A                            Debug_ShowItem:				; XREF: Debug_Main
0001D74A 7000                       		moveq	#0,d0
0001D74C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D750 E748                       		lsl.w	#3,d0
0001D752 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D758 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D75E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D764 4E75                       		rts	
0001D766                            ; End of function Debug_ShowItem
0001D766                            
0001D766                            ; ===========================================================================
0001D766                            ; ---------------------------------------------------------------------------
0001D766                            ; Debug	list pointers
0001D766                            ; ---------------------------------------------------------------------------
0001D766                            DebugList:
0001D766                            	include "_inc\Debug list pointers.asm"
0001D766                            ; ---------------------------------------------------------------------------
0001D766                            ; Debug	list pointers
0001D766                            ; ---------------------------------------------------------------------------
0001D766 0000                       	dc.w Debug_GHZ-DebugList
0001D768 0000                       	dc.w Debug_LZ-DebugList
0001D76A 0000                       	dc.w Debug_MZ-DebugList
0001D76C 0000                       	dc.w Debug_SLZ-DebugList
0001D76E 0000                       	dc.w Debug_SYZ-DebugList
0001D770 0000                       	dc.w Debug_SBZ-DebugList
0001D772 0000                       	dc.w Debug_Ending-DebugList
0001D772 0000                       	dc.w Debug_Ending-DebugList
0001D774                            
0001D774                            ; ---------------------------------------------------------------------------
0001D774                            ; Debug	list - Green Hill
0001D774                            ; ---------------------------------------------------------------------------
0001D774                            Debug_GHZ:
0001D774                            	include "_inc\Debug list - GHZ.asm"
0001D774                            ; ---------------------------------------------------------------------------
0001D774                            ; Debug	list - Green Hill
0001D774                            ; ---------------------------------------------------------------------------
0001D774 0010                       	dc.w $10			; number of items in list
0001D776 2500 A404                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D77A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D77E 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D782 0000 0680                  	dc.b 0,	0, 6, $80
0001D786 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D78A 0000 0400                  	dc.b 0,	0, 4, 0
0001D78E 2200 9EB8                  	dc.l Map_obj22+$22000000
0001D792 0000 0444                  	dc.b 0,	0, 4, $44
0001D796 2B00 B0D8                  	dc.l Map_obj2B+$2B000000
0001D79A 0000 047B                  	dc.b 0,	0, 4, $7B
0001D79E 3600 D59C                  	dc.l Map_obj36+$36000000
0001D7A2 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7A6 1800 8586                  	dc.l Map_obj18+$18000000
0001D7AA 0000 4000                  	dc.b 0,	0, $40,	0
0001D7AE 3B00 D6C2                  	dc.l Map_obj3B+$3B000000
0001D7B2 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D7B6 4000 FD4E                  	dc.l Map_obj40+$40000000
0001D7BA 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D7BE 4100 E2C8                  	dc.l Map_obj41+$41000000
0001D7C2 0000 0523                  	dc.b 0,	0, 5, $23
0001D7C6 4200 E4EE                  	dc.l Map_obj42+$42000000
0001D7CA 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7CE 4400 E7FC                  	dc.l Map_obj44+$44000000
0001D7D2 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7D6 1900 85F4                  	dc.l Map_obj48+$19000000
0001D7DA 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7DE 7901 76DC                  	dc.l Map_obj79+$79000000
0001D7E2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7E6 4B00 A444                  	dc.l Map_obj4B+$4B000000
0001D7EA 0000 2400                  	dc.b 0,	0, $24,	0
0001D7EE 7D01 782C                  	dc.l Map_obj7D+$7D000000
0001D7F2 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D7F6                            	even
0001D7F6                            	even
0001D7F6                            
0001D7F6                            ; ---------------------------------------------------------------------------
0001D7F6                            ; Debug	list - Labyrinth
0001D7F6                            ; ---------------------------------------------------------------------------
0001D7F6                            Debug_LZ:
0001D7F6                            	include "_inc\Debug list - LZ.asm"
0001D7F6                            ; ---------------------------------------------------------------------------
0001D7F6                            ; Debug	list - Labyrinth
0001D7F6                            ; ---------------------------------------------------------------------------
0001D7F6 0019                       	dc.w $19
0001D7F8 2500 A404                  	dc.l Map_obj25+$25000000
0001D7FC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D800 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D804 0000 0680                  	dc.b 0,	0, 6, $80
0001D808 4100 E2C8                  	dc.l Map_obj41+$41000000
0001D80C 0000 0523                  	dc.b 0,	0, 5, $23
0001D810 2C00 B17E                  	dc.l Map_obj2C+$2C000000
0001D814 0800 2486                  	dc.b 8,	0, $24,	$86
0001D818 2D00 B36A                  	dc.l Map_obj2D+$2D000000
0001D81C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D820 1601 2522                  	dc.l Map_obj16+$16000000
0001D824 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D828 1601 2522                  	dc.l Map_obj16+$16000000
0001D82C 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D830 3300 C7E8                  	dc.l Map_obj33+$33000000
0001D834 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D838 3200 C3A8                  	dc.l Map_obj32+$32000000
0001D83C 0000 0513                  	dc.b 0,	0, 5, $13
0001D840 3600 D59C                  	dc.l Map_obj36+$36000000
0001D844 0000 051B                  	dc.b 0,	0, 5, $1B
0001D848 5201 0644                  	dc.l Map_obj52a+$52000000
0001D84C 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D850 6101 274A                  	dc.l Map_obj61+$61000000
0001D854 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D858 6101 274A                  	dc.l Map_obj61+$61000000
0001D85C 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D860 6101 274A                  	dc.l Map_obj61+$61000000
0001D864 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D868 6201 289E                  	dc.l Map_obj62+$62000000
0001D86C 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D870 6101 274A                  	dc.l Map_obj61+$61000000
0001D874 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D878 6101 274A                  	dc.l Map_obj61+$61000000
0001D87C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D880 6301 2C00                  	dc.l Map_obj63+$63000000
0001D884 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D888 6001 246C                  	dc.l Map_obj60+$60000000
0001D88C 0000 0467                  	dc.b 0,	0, 4, $67
0001D890 6401 2F46                  	dc.l Map_obj64+$64000000
0001D894 8413 8348                  	dc.b $84, $13, $83, $48
0001D898 6501 30CE                  	dc.l Map_obj65+$65000000
0001D89C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8A0 6501 30CE                  	dc.l Map_obj65+$65000000
0001D8A4 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8A8 0B01 18BC                  	dc.l Map_obj0B+$B000000
0001D8AC 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8B0 0C01 198C                  	dc.l Map_obj0C+$C000000
0001D8B4 0200 4328                  	dc.b 2,	0, $43,	$28
0001D8B8 7901 76DC                  	dc.l Map_obj79+$79000000
0001D8BC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8C0                            	even
0001D8C0                            	even
0001D8C0                            
0001D8C0                            ; ---------------------------------------------------------------------------
0001D8C0                            ; Debug	list - Marble
0001D8C0                            ; ---------------------------------------------------------------------------
0001D8C0                            Debug_MZ:
0001D8C0                            	include "_inc\Debug list - MZ.asm"
0001D8C0                            ; ---------------------------------------------------------------------------
0001D8C0                            ; Debug	list - Marble
0001D8C0                            ; ---------------------------------------------------------------------------
0001D8C0 0012                       	dc.w $12
0001D8C2 2500 A404                  	dc.l Map_obj25+$25000000
0001D8C6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8CA 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D8CE 0000 0680                  	dc.b 0,	0, 6, $80
0001D8D2 2200 9EB8                  	dc.l Map_obj22+$22000000
0001D8D6 0000 0444                  	dc.b 0,	0, 4, $44
0001D8DA 3600 D59C                  	dc.l Map_obj36+$36000000
0001D8DE 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8E2 4100 E2C8                  	dc.l Map_obj41+$41000000
0001D8E6 0000 0523                  	dc.b 0,	0, 5, $23
0001D8EA 1300 B878                  	dc.l Map_obj14+$13000000
0001D8EE 0000 0345                  	dc.b 0,	0, 3, $45
0001D8F2 4600 EEAE                  	dc.l Map_obj46+$46000000
0001D8F6 0000 4000                  	dc.b 0,	0, $40,	0
0001D8FA 4C00 F7FA                  	dc.l Map_obj4C+$4C000000
0001D8FE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D902 4E00 FADE                  	dc.l Map_obj4E+$4E000000
0001D906 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D90A 3300 C7E8                  	dc.l Map_obj33+$33000000
0001D90E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D912 5000 FEDC                  	dc.l Map_obj50+$50000000
0001D916 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D91A 5101 0378                  	dc.l Map_obj51+$51000000
0001D91E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D922 5201 05EE                  	dc.l Map_obj52+$52000000
0001D926 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D92A 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D92E 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D932 5400 F7C0                  	dc.l Map_obj54+$54000000
0001D936 0000 8680                  	dc.b 0,	0, $86,	$80
0001D93A 5501 07E2                  	dc.l Map_obj55+$55000000
0001D93E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D942 7801 7356                  	dc.l Map_obj78+$78000000
0001D946 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D94A 7901 76DC                  	dc.l Map_obj79+$79000000
0001D94E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D952                            	even
0001D952                            	even
0001D952                            
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Debug	list - Star Light
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            Debug_SLZ:
0001D952                            	include "_inc\Debug list - SLZ.asm"
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Debug	list - Star Light
0001D952                            ; ---------------------------------------------------------------------------
0001D952 000F                       	dc.w $F
0001D954 2500 A404                  	dc.l Map_obj25+$25000000
0001D958 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D95C 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D960 0000 0680                  	dc.b 0,	0, 6, $80
0001D964 5901 12E4                  	dc.l Map_obj59+$59000000
0001D968 0000 4000                  	dc.b 0,	0, $40,	0
0001D96C 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D970 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D974 1800 85E4                  	dc.l Map_obj18b+$18000000
0001D978 0000 4000                  	dc.b 0,	0, $40,	0
0001D97C 5A01 141E                  	dc.l Map_obj5A+$5A000000
0001D980 0000 4000                  	dc.b 0,	0, $40,	0
0001D984 5B01 15D6                  	dc.l Map_obj5B+$5B000000
0001D988 0000 4000                  	dc.b 0,	0, $40,	0
0001D98C 5D01 1BA6                  	dc.l Map_obj5D+$5D000000
0001D990 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D994 5E01 1F38                  	dc.l Map_obj5E+$5E000000
0001D998 0000 0374                  	dc.b 0,	0, 3, $74
0001D99C 4100 E2C8                  	dc.l Map_obj41+$41000000
0001D9A0 0000 0523                  	dc.b 0,	0, 5, $23
0001D9A4 1300 B878                  	dc.l Map_obj14+$13000000
0001D9A8 0000 0480                  	dc.b 0,	0, 4, $80
0001D9AC 1C00 8C9C                  	dc.l Map_obj1C+$1C000000
0001D9B0 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D9B4 5F01 21B6                  	dc.l Map_obj5F+$5F000000
0001D9B8 0000 0400                  	dc.b 0,	0, 4, 0
0001D9BC 6001 246C                  	dc.l Map_obj60+$60000000
0001D9C0 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9C4 7901 76DC                  	dc.l Map_obj79+$79000000
0001D9C8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9CC                            	even
0001D9CC                            	even
0001D9CC                            
0001D9CC                            ; ---------------------------------------------------------------------------
0001D9CC                            ; Debug	list - Spring Yard
0001D9CC                            ; ---------------------------------------------------------------------------
0001D9CC                            Debug_SYZ:
0001D9CC                            	include "_inc\Debug list - SYZ.asm"
0001D9CC                            ; ---------------------------------------------------------------------------
0001D9CC                            ; Debug	list - Spring Yard
0001D9CC                            ; ---------------------------------------------------------------------------
0001D9CC 000F                       	dc.w $F
0001D9CE 2500 A404                  	dc.l Map_obj25+$25000000
0001D9D2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9D6 2600 AA0A                  	dc.l Map_obj26+$26000000
0001D9DA 0000 0680                  	dc.b 0,	0, 6, $80
0001D9DE 3600 D59C                  	dc.l Map_obj36+$36000000
0001D9E2 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9E6 4100 E2C8                  	dc.l Map_obj41+$41000000
0001D9EA 0000 0523                  	dc.b 0,	0, 5, $23
0001D9EE 4300 E74E                  	dc.l Map_obj43+$43000000
0001D9F2 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D9F6 1200 EF2C                  	dc.l Map_obj12+$12000000
0001D9FA 0000 0000                  	dc.b 0,	0, 0, 0
0001D9FE 4700 F0A8                  	dc.l Map_obj47+$47000000
0001DA02 0000 0380                  	dc.b 0,	0, 3, $80
0001DA06 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001DA0A 0000 0400                  	dc.b 0,	0, 4, 0
0001DA0E 2200 9EB8                  	dc.l Map_obj22+$22000000
0001DA12 0000 0444                  	dc.b 0,	0, 4, $44
0001DA16 5000 FEDC                  	dc.l Map_obj50+$50000000
0001DA1A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA1E 1800 85D2                  	dc.l Map_obj18a+$18000000
0001DA22 0000 4000                  	dc.b 0,	0, $40,	0
0001DA26 5601 0CA4                  	dc.l Map_obj56+$56000000
0001DA2A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA2E 3200 C3A8                  	dc.l Map_obj32+$32000000
0001DA32 0000 0513                  	dc.b 0,	0, 5, $13
0001DA36 7801 7356                  	dc.l Map_obj78+$78000000
0001DA3A 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA3E 7901 76DC                  	dc.l Map_obj79+$79000000
0001DA42 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA46                            	even
0001DA46                            	even
0001DA46                            
0001DA46                            ; ---------------------------------------------------------------------------
0001DA46                            ; Debug	list - Scrap Brain
0001DA46                            ; ---------------------------------------------------------------------------
0001DA46                            Debug_SBZ:
0001DA46                            	include "_inc\Debug list - SBZ.asm"
0001DA46                            ; ---------------------------------------------------------------------------
0001DA46                            ; Debug	list - Scrap Brain
0001DA46                            ; ---------------------------------------------------------------------------
0001DA46 001D                       	dc.w $1D
0001DA48 2500 A404                  	dc.l Map_obj25+$25000000
0001DA4C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA50 2600 AA0A                  	dc.l Map_obj26+$26000000
0001DA54 0000 0680                  	dc.b 0,	0, 6, $80
0001DA58 5F01 21B6                  	dc.l Map_obj5F+$5F000000
0001DA5C 0000 0400                  	dc.b 0,	0, 4, 0
0001DA60 6001 246C                  	dc.l Map_obj60+$60000000
0001DA64 0000 0429                  	dc.b 0,	0, 4, $29
0001DA68 7801 7356                  	dc.l Map_obj78+$78000000
0001DA6C 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA70 1501 1040                  	dc.l Map_obj15b+$15000000
0001DA74 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA78 6701 5C7A                  	dc.l Map_obj67+$67000000
0001DA7C E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA80 5201 05EE                  	dc.l Map_obj52+$52000000
0001DA84 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DA88 3200 C3A8                  	dc.l Map_obj32+$32000000
0001DA8C 0000 0513                  	dc.b 0,	0, 5, $13
0001DA90 6901 5ED4                  	dc.l Map_obj69+$69000000
0001DA94 0300 4492                  	dc.b 3,	0, $44,	$92
0001DA98 6901 5F2E                  	dc.l Map_obj69a+$69000000
0001DA9C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DAA0 6A01 618C                  	dc.l Map_obj6A+$6A000000
0001DAA4 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAA8 5300 8B8C                  	dc.l Map_obj53+$53000000
0001DAAC 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DAB0 5201 05EE                  	dc.l Map_obj52+$52000000
0001DAB4 3903 4460                  	dc.b $39, 3, $44, $60
0001DAB8 6B01 655C                  	dc.l Map_obj6B+$6B000000
0001DABC 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DAC0 2A00 8E32                  	dc.l Map_obj2A+$2A000000
0001DAC4 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DAC8 6B01 655C                  	dc.l Map_obj6B+$6B000000
0001DACC 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAD0 6A01 618C                  	dc.l Map_obj6A+$6A000000
0001DAD4 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DAD8 6B01 655C                  	dc.l Map_obj6B+$6B000000
0001DADC 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DAE0 6A01 618C                  	dc.l Map_obj6A+$6A000000
0001DAE4 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DAE8 6B01 655C                  	dc.l Map_obj6B+$6B000000
0001DAEC 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DAF0 6C01 671E                  	dc.l Map_obj6C+$6C000000
0001DAF4 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DAF8 6D00 EB9E                  	dc.l Map_obj6D+$6D000000
0001DAFC 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB00 6D00 EB9E                  	dc.l Map_obj6D+$6D000000
0001DB04 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB08 6E01 67D4                  	dc.l Map_obj6E+$6E000000
0001DB0C 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB10 7001 6C1A                  	dc.l Map_obj70+$70000000
0001DB14 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB18 7101 1A4C                  	dc.l Map_obj71+$71000000
0001DB1C 1100 8680                  	dc.b $11, 0, $86, $80
0001DB20 1E00 92F0                  	dc.l Map_obj1E+$1E000000
0001DB24 0400 2302                  	dc.b 4,	0, $23,	2
0001DB28 7901 76DC                  	dc.l Map_obj79+$79000000
0001DB2C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB30                            	even
0001DB30                            	even
0001DB30                            
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            ; Debug	list - ending sequence / special stage
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            Debug_Ending:
0001DB30                            	include "_inc\Debug list - Ending and SS.asm"
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30                            ; Debug	list - ending sequence / special stage
0001DB30                            ; ---------------------------------------------------------------------------
0001DB30 000D                       	dc.w $D
0001DB32 2500 A404                  	dc.l Map_obj25+$25000000
0001DB36 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB3A 4700 F0A8                  	dc.l Map_obj47+$47000000
0001DB3E 0000 0380                  	dc.b 0,	0, 3, $80
0001DB42 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB46 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB4A 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB4E 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB52 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB56 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB5A 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB5E 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB62 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB66 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB6A 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB6E 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB72 2800 98F2                  	dc.l Map_obj28+$28000000
0001DB76 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB7A 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB7E 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB82 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB86 1200 0593                  	dc.b $12, 0, 5,	$93
0001DB8A 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB8E 1300 0565                  	dc.b $13, 0, 5,	$65
0001DB92 2800 9922                  	dc.l Map_obj28b+$28000000
0001DB96 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DB9A                            	even
0001DB9A                            	even
0001DB9A                            
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A                            ; Main level load blocks
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A                            MainLoadBlocks:
0001DB9A                            	include "_inc\Main level load blocks.asm"
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A                            ; Main level load blocks
0001DB9A                            ;
0001DB9A                            ; ===FORMAT===
0001DB9A                            ; level	patterns + (1st	PLC num	* 10^6)
0001DB9A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DB9A                            ; 256x256 mappings
0001DB9A                            ; blank, music (unused), pal index (unused), pal index
0001DB9A                            ; ---------------------------------------------------------------------------
0001DB9A 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DB9E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBA2 0000 0000                  	dc.l Blk256_GHZ
0001DBA6 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBAA 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBAE 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DBB2 0000 0000                  	dc.l Blk256_LZ
0001DBB6 0082 0505                  	dc.b 0,	$82, 5,	5
0001DBBA 0000 0000                  	dc.l Nem_MZ+$8000000
0001DBBE 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBC2 0000 0000                  	dc.l Blk256_MZ
0001DBC6 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBCA 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBCE 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBD2 0000 0000                  	dc.l Blk256_SLZ
0001DBD6 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBDA 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBDE 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DBE2 0000 0000                  	dc.l Blk256_SYZ
0001DBE6 0085 0808                  	dc.b 0,	$85, 8,	8
0001DBEA 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DBEE 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DBF2 0000 0000                  	dc.l Blk256_SBZ
0001DBF6 0086 0909                  	dc.b 0,	$86, 9,	9
0001DBFA 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DBFE 0000 0000                  	dc.l Blk16_GHZ
0001DC02 0000 0000                  	dc.l Blk256_GHZ
0001DC06 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC0A                            	even
0001DC0A                            	even
0001DC0A                            
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A                            ; Pattern load cues
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A                            ArtLoadCues:
0001DC0A                            	include "_inc\Pattern load cues.asm"
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A                            ; Pattern load cues - index
0001DC0A                            ; ---------------------------------------------------------------------------
0001DC0A 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC0E 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC12 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC16 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC1A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC1E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC22 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC26 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC2A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC2E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC32 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC36 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC3A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC3E 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC42 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC46 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC4A                            ; ---------------------------------------------------------------------------
0001DC4A                            ; Pattern load cues - standard block 1
0001DC4A                            ; ---------------------------------------------------------------------------
0001DC4A 0004                       PLC_Main:	dc.w 4
0001DC4C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC50 F400                       		dc.w $F400
0001DC52 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC56 D940                       		dc.w $D940
0001DC58 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC5C FA80                       		dc.w $FA80
0001DC5E 0000 0000                  		dc.l Nem_Ring		; rings
0001DC62 F640                       		dc.w $F640
0001DC64 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC68 F2E0                       		dc.w $F2E0
0001DC6A                            ; ---------------------------------------------------------------------------
0001DC6A                            ; Pattern load cues - standard block 2
0001DC6A                            ; ---------------------------------------------------------------------------
0001DC6A 0002                       PLC_Main2:	dc.w 2
0001DC6C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC70 D000                       		dc.w $D000
0001DC72 0000 0000                  		dc.l Nem_Shield		; shield
0001DC76 A820                       		dc.w $A820
0001DC78 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC7C AB80                       		dc.w $AB80
0001DC7E                            ; ---------------------------------------------------------------------------
0001DC7E                            ; Pattern load cues - explosion
0001DC7E                            ; ---------------------------------------------------------------------------
0001DC7E 0000                       PLC_Explode:	dc.w 0
0001DC80 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC84 B400                       		dc.w $B400
0001DC86                            ; ---------------------------------------------------------------------------
0001DC86                            ; Pattern load cues - game/time	over
0001DC86                            ; ---------------------------------------------------------------------------
0001DC86 0000                       PLC_GameOver:	dc.w 0
0001DC88 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DC8C ABC0                       		dc.w $ABC0
0001DC8E                            ; ---------------------------------------------------------------------------
0001DC8E                            ; Pattern load cues - Green Hill
0001DC8E                            ; ---------------------------------------------------------------------------
0001DC8E 000B                       PLC_GHZ:	dc.w $B
0001DC90 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DC94 0000                       		dc.w 0
0001DC96 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DC9A 39A0                       		dc.w $39A0
0001DC9C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCA0 6B00                       		dc.w $6B00
0001DCA2 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCA6 7A00                       		dc.w $7A00
0001DCA8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCAC 8000                       		dc.w $8000
0001DCAE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCB2 8880                       		dc.w $8880
0001DCB4 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DCB8 8F60                       		dc.w $8F60
0001DCBA 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DCBE 9360                       		dc.w $9360
0001DCC0 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCC4 9E00                       		dc.w $9E00
0001DCC6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCCA A360                       		dc.w $A360
0001DCCC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCD0 A460                       		dc.w $A460
0001DCD2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCD6 A660                       		dc.w $A660
0001DCD8 0005                       PLC_GHZ2:	dc.w 5
0001DCDA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCDE 7000                       		dc.w $7000
0001DCE0 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DCE4 71C0                       		dc.w $71C0
0001DCE6 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DCEA 7300                       		dc.w $7300
0001DCEC 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DCF0 7540                       		dc.w $7540
0001DCF2 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DCF6 A1E0                       		dc.w $A1E0
0001DCF8 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DCFC 6980                       		dc.w $6980
0001DCFE                            ; ---------------------------------------------------------------------------
0001DCFE                            ; Pattern load cues - Labyrinth
0001DCFE                            ; ---------------------------------------------------------------------------
0001DCFE 000B                       PLC_LZ:		dc.w $B
0001DD00 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD04 0000                       		dc.w 0
0001DD06 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD0A 3C00                       		dc.w $3C00
0001DD0C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD10 3E00                       		dc.w $3E00
0001DD12 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD16 4B20                       		dc.w $4B20
0001DD18 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD1C 6000                       		dc.w $6000
0001DD1E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD22 6200                       		dc.w $6200
0001DD24 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD28 6500                       		dc.w $6500
0001DD2A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD2E 6900                       		dc.w $6900
0001DD30 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD34 7780                       		dc.w $7780
0001DD36 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD3A 7880                       		dc.w $7880
0001DD3C 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD40 7980                       		dc.w $7980
0001DD42 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD46 94C0                       		dc.w $94C0
0001DD48 000C                       PLC_LZ2:	dc.w $C
0001DD4A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD4E 7BC0                       		dc.w $7BC0
0001DD50 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD54 7CC0                       		dc.w $7CC0
0001DD56 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD5A 7EC0                       		dc.w $7EC0
0001DD5C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD60 5D20                       		dc.w $5D20
0001DD62 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD66 8800                       		dc.w $8800
0001DD68 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD6C 89E0                       		dc.w $89E0
0001DD6E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD72 8CE0                       		dc.w $8CE0
0001DD74 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD78 90C0                       		dc.w $90C0
0001DD7A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD7E A1E0                       		dc.w $A1E0
0001DD80 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD84 A000                       		dc.w $A000
0001DD86 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD8A A360                       		dc.w $A360
0001DD8C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD90 A460                       		dc.w $A460
0001DD92 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD96 A660                       		dc.w $A660
0001DD98                            ; ---------------------------------------------------------------------------
0001DD98                            ; Pattern load cues - Marble
0001DD98                            ; ---------------------------------------------------------------------------
0001DD98 0009                       PLC_MZ:		dc.w 9
0001DD9A 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DD9E 0000                       		dc.w 0
0001DDA0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDA4 6000                       		dc.w $6000
0001DDA6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDAA 68A0                       		dc.w $68A0
0001DDAC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDB0 7000                       		dc.w $7000
0001DDB2 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DDB6 71C0                       		dc.w $71C0
0001DDB8 0000 0000                  		dc.l Nem_Lava		; lava
0001DDBC 7500                       		dc.w $7500
0001DDBE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDC2 8880                       		dc.w $8880
0001DDC4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDC8 8F60                       		dc.w $8F60
0001DDCA 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDCE 9700                       		dc.w $9700
0001DDD0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDD4 9FE0                       		dc.w $9FE0
0001DDD6 0004                       PLC_MZ2:	dc.w 4
0001DDD8 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDDC A260                       		dc.w $A260
0001DDDE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDE2 A360                       		dc.w $A360
0001DDE4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDE8 A460                       		dc.w $A460
0001DDEA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDEE A660                       		dc.w $A660
0001DDF0 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DDF4 5700                       		dc.w $5700
0001DDF6                            ; ---------------------------------------------------------------------------
0001DDF6                            ; Pattern load cues - Star Light
0001DDF6                            ; ---------------------------------------------------------------------------
0001DDF6 0008                       PLC_SLZ:	dc.w 8
0001DDF8 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DDFC 0000                       		dc.w 0
0001DDFE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE02 8000                       		dc.w $8000
0001DE04 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE08 8520                       		dc.w $8520
0001DE0A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE0E 9000                       		dc.w $9000
0001DE10 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE14 9C00                       		dc.w $9C00
0001DE16 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE1A A260                       		dc.w $A260
0001DE1C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE20 A360                       		dc.w $A360
0001DE22 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE26 A460                       		dc.w $A460
0001DE28 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE2C A660                       		dc.w $A660
0001DE2E 0005                       PLC_SLZ2:	dc.w 5
0001DE30 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE34 6E80                       		dc.w $6E80
0001DE36 0000 0000                  		dc.l Nem_Fan		; fan
0001DE3A 7400                       		dc.w $7400
0001DE3C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE40 7980                       		dc.w $7980
0001DE42 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE46 7B80                       		dc.w $7B80
0001DE48 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE4C 9B00                       		dc.w $9B00
0001DE4E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE52 9E00                       		dc.w $9E00
0001DE54                            ; ---------------------------------------------------------------------------
0001DE54                            ; Pattern load cues - Spring Yard
0001DE54                            ; ---------------------------------------------------------------------------
0001DE54 0004                       PLC_SYZ:	dc.w 4
0001DE56 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE5A 0000                       		dc.w 0
0001DE5C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE60 8000                       		dc.w $8000
0001DE62 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE66 8880                       		dc.w $8880
0001DE68 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE6C 8F60                       		dc.w $8F60
0001DE6E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE72 9700                       		dc.w $9700
0001DE74 0007                       PLC_SYZ2:	dc.w 7
0001DE76 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE7A 7000                       		dc.w $7000
0001DE7C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE80 72C0                       		dc.w $72C0
0001DE82 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DE86 7740                       		dc.w $7740
0001DE88 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DE8C 9FE0                       		dc.w $9FE0
0001DE8E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DE92 A1E0                       		dc.w $A1E0
0001DE94 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE98 A360                       		dc.w $A360
0001DE9A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE9E A460                       		dc.w $A460
0001DEA0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEA4 A660                       		dc.w $A660
0001DEA6                            ; ---------------------------------------------------------------------------
0001DEA6                            ; Pattern load cues - Scrap Brain
0001DEA6                            ; ---------------------------------------------------------------------------
0001DEA6 000B                       PLC_SBZ:	dc.w $B
0001DEA8 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DEAC 0000                       		dc.w 0
0001DEAE 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DEB2 5800                       		dc.w $5800
0001DEB4 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DEB8 5D00                       		dc.w $5D00
0001DEBA 0000 0000                  		dc.l Nem_Girder		; girder
0001DEBE 5E00                       		dc.w $5E00
0001DEC0 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DEC4 6040                       		dc.w $6040
0001DEC6 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DECA 6880                       		dc.w $6880
0001DECC 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DED0 6900                       		dc.w $6900
0001DED2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DED6 7220                       		dc.w $7220
0001DED8 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEDC 76A0                       		dc.w $76A0
0001DEDE 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DEE2 7B20                       		dc.w $7B20
0001DEE4 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DEE8 7EA0                       		dc.w $7EA0
0001DEEA 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DEEE 9860                       		dc.w $9860
0001DEF0 000C                       PLC_SBZ2:	dc.w $C
0001DEF2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEF6 5600                       		dc.w $5600
0001DEF8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DEFC 8000                       		dc.w $8000
0001DEFE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF02 8520                       		dc.w $8520
0001DF04 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF08 8C00                       		dc.w $8C00
0001DF0A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF0E 8DE0                       		dc.w $8DE0
0001DF10 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF14 8FC0                       		dc.w $8FC0
0001DF16 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF1A 9240                       		dc.w $9240
0001DF1C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF20 7F20                       		dc.w $7F20
0001DF22 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF26 9BE0                       		dc.w $9BE0
0001DF28 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF2C A1E0                       		dc.w $A1E0
0001DF2E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF32 A360                       		dc.w $A360
0001DF34 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF38 A460                       		dc.w $A460
0001DF3A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF3E A660                       		dc.w $A660
0001DF40                            ; ---------------------------------------------------------------------------
0001DF40                            ; Pattern load cues - title card
0001DF40                            ; ---------------------------------------------------------------------------
0001DF40 0000                       PLC_TitleCard:	dc.w 0
0001DF42 0000 0000                  		dc.l Nem_TitleCard
0001DF46 B000                       		dc.w $B000
0001DF48                            ; ---------------------------------------------------------------------------
0001DF48                            ; Pattern load cues - act 3 boss
0001DF48                            ; ---------------------------------------------------------------------------
0001DF48 0005                       PLC_Boss:	dc.w 5
0001DF4A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF4E 8000                       		dc.w $8000
0001DF50 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF54 8D80                       		dc.w $8D80
0001DF56 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF5A 93A0                       		dc.w $93A0
0001DF5C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF60 A300                       		dc.w $A300
0001DF62 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF66 A300                       		dc.w $A300
0001DF68 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF6C A540                       		dc.w $A540
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E                            ; Pattern load cues - act 1/2 signpost
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E 0002                       PLC_Signpost:	dc.w 2
0001DF70 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF74 D000                       		dc.w $D000
0001DF76 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF7A 96C0                       		dc.w $96C0
0001DF7C 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF80 8C40                       		dc.w $8C40
0001DF82                            ; ---------------------------------------------------------------------------
0001DF82                            ; Pattern load cues - beta special stage warp effect
0001DF82                            ; ---------------------------------------------------------------------------
0001DF82 0000                       PLC_Warp:	dc.w 0
0001DF84 0000 0000                  		dc.l Nem_Warp
0001DF88 A820                       		dc.w $A820
0001DF8A                            ; ---------------------------------------------------------------------------
0001DF8A                            ; Pattern load cues - special stage
0001DF8A                            ; ---------------------------------------------------------------------------
0001DF8A 0010                       PLC_SpeStage:	dc.w $10
0001DF8C 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DF90 0000                       		dc.w 0
0001DF92 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DF96 0A20                       		dc.w $A20
0001DF98 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DF9C 2840                       		dc.w $2840
0001DF9E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFA2 4760                       		dc.w $4760
0001DFA4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFA8 4A20                       		dc.w $4A20
0001DFAA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFAE 4C60                       		dc.w $4C60
0001DFB0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DFB4 5E00                       		dc.w $5E00
0001DFB6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DFBA 6E00                       		dc.w $6E00
0001DFBC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DFC0 7E00                       		dc.w $7E00
0001DFC2 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFC6 8E00                       		dc.w $8E00
0001DFC8 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFCC 9E00                       		dc.w $9E00
0001DFCE 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFD2 AE00                       		dc.w $AE00
0001DFD4 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFD8 BE00                       		dc.w $BE00
0001DFDA 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFDE EE00                       		dc.w $EE00
0001DFE0 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DFE4 F2E0                       		dc.w $F2E0
0001DFE6 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DFEA F400                       		dc.w $F400
0001DFEC 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DFF0 F520                       		dc.w $F520
0001DFF2 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DFF6 F2E0                       		dc.w $F2E0
0001DFF8 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DFFC F400                       		dc.w $F400
0001DFFE 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E002 F520                       		dc.w $F520
0001E004                            ; ---------------------------------------------------------------------------
0001E004                            ; Pattern load cues - GHZ animals
0001E004                            ; ---------------------------------------------------------------------------
0001E004 0001                       PLC_GHZAnimals:	dc.w 1
0001E006 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E00A B000                       		dc.w $B000
0001E00C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E010 B240                       		dc.w $B240
0001E012                            ; ---------------------------------------------------------------------------
0001E012                            ; Pattern load cues - LZ animals
0001E012                            ; ---------------------------------------------------------------------------
0001E012 0001                       PLC_LZAnimals:	dc.w 1
0001E014 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E018 B000                       		dc.w $B000
0001E01A 0000 0000                  		dc.l Nem_Seal		; seal
0001E01E B240                       		dc.w $B240
0001E020                            ; ---------------------------------------------------------------------------
0001E020                            ; Pattern load cues - MZ animals
0001E020                            ; ---------------------------------------------------------------------------
0001E020 0001                       PLC_MZAnimals:	dc.w 1
0001E022 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E026 B000                       		dc.w $B000
0001E028 0000 0000                  		dc.l Nem_Seal		; seal
0001E02C B240                       		dc.w $B240
0001E02E                            ; ---------------------------------------------------------------------------
0001E02E                            ; Pattern load cues - SLZ animals
0001E02E                            ; ---------------------------------------------------------------------------
0001E02E 0001                       PLC_SLZAnimals:	dc.w 1
0001E030 0000 0000                  		dc.l Nem_Pig		; pig
0001E034 B000                       		dc.w $B000
0001E036 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E03A B240                       		dc.w $B240
0001E03C                            ; ---------------------------------------------------------------------------
0001E03C                            ; Pattern load cues - SYZ animals
0001E03C                            ; ---------------------------------------------------------------------------
0001E03C 0001                       PLC_SYZAnimals:	dc.w 1
0001E03E 0000 0000                  		dc.l Nem_Pig		; pig
0001E042 B000                       		dc.w $B000
0001E044 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E048 B240                       		dc.w $B240
0001E04A                            ; ---------------------------------------------------------------------------
0001E04A                            ; Pattern load cues - SBZ animals
0001E04A                            ; ---------------------------------------------------------------------------
0001E04A 0001                       PLC_SBZAnimals:	dc.w 1
0001E04C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E050 B000                       		dc.w $B000
0001E052 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E056 B240                       		dc.w $B240
0001E058                            ; ---------------------------------------------------------------------------
0001E058                            ; Pattern load cues - special stage results screen
0001E058                            ; ---------------------------------------------------------------------------
0001E058 0001                       PLC_SpeStResult:dc.w 1
0001E05A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E05E A820                       		dc.w $A820
0001E060 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E064 AA20                       		dc.w $AA20
0001E066                            ; ---------------------------------------------------------------------------
0001E066                            ; Pattern load cues - ending sequence
0001E066                            ; ---------------------------------------------------------------------------
0001E066 000E                       PLC_Ending:	dc.w $E
0001E068 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E06C 0000                       		dc.w 0
0001E06E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E072 39A0                       		dc.w $39A0
0001E074 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E078 6B00                       		dc.w $6B00
0001E07A 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E07E 7400                       		dc.w $7400
0001E080 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E084 78A0                       		dc.w $78A0
0001E086 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E08A 7C20                       		dc.w $7C20
0001E08C 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E090 A480                       		dc.w $A480
0001E092 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E096 AA60                       		dc.w $AA60
0001E098 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E09C ACA0                       		dc.w $ACA0
0001E09E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0A2 AE60                       		dc.w $AE60
0001E0A4 0000 0000                  		dc.l Nem_Seal		; seal
0001E0A8 B0A0                       		dc.w $B0A0
0001E0AA 0000 0000                  		dc.l Nem_Pig		; pig
0001E0AE B260                       		dc.w $B260
0001E0B0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E0B4 B4A0                       		dc.w $B4A0
0001E0B6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E0BA B660                       		dc.w $B660
0001E0BC 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E0C0 B8A0                       		dc.w $B8A0
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2 0002                       PLC_TryAgain:	dc.w 2
0001E0C4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0C8 78A0                       		dc.w $78A0
0001E0CA 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0CE 7C20                       		dc.w $7C20
0001E0D0 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0D4 B400                       		dc.w $B400
0001E0D6                            ; ---------------------------------------------------------------------------
0001E0D6                            ; Pattern load cues - Eggman on SBZ 2
0001E0D6                            ; ---------------------------------------------------------------------------
0001E0D6 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0D8 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0DC A300                       		dc.w $A300
0001E0DE 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E0E2 8000                       		dc.w $8000
0001E0E4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0E8 9400                       		dc.w $9400
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA                            ; Pattern load cues - final boss
0001E0EA                            ; ---------------------------------------------------------------------------
0001E0EA 0004                       PLC_FZBoss:	dc.w 4
0001E0EC 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E0F0 7400                       		dc.w $7400
0001E0F2 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E0F6 6000                       		dc.w $6000
0001E0F8 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E0FC 8000                       		dc.w $8000
0001E0FE 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E102 8E00                       		dc.w $8E00
0001E104 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E108 A540                       		dc.w $A540
0001E10A                            		even
0001E10A                            		even
0001E10A                            
0001E10A                            		incbin	misc\padding.bin
0001E1F8                            		even
0001E1F8                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E65A                            		even
0001E65A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E752                            		even
0001E752                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E866                            		even
0001E866                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F872                            		even
0001F872                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000229CE                            		even
000229CE                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022A02                            		even
00022A02                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022AC0                            		even
00022AC0                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022F68                            		even
00022F68                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00022FC6                            		even
00022FC6                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023BCC                            		even
00023BCC                            ; ---------------------------------------------------------------------------
00023BCC                            ; Sprite mappings - Sonic
00023BCC                            ; ---------------------------------------------------------------------------
00023BCC                            Map_Sonic:
00023BCC                            	include "_maps\Sonic.asm"
00023BCC                            Map_3586:
00023BCC 0000                       Map_3586_0: 	dc.w Map_3586_B2-Map_3586
00023BCE 0000                       Map_3586_2: 	dc.w Map_3586_B3-Map_3586
00023BD0 0000                       Map_3586_4: 	dc.w Map_3586_BE-Map_3586
00023BD2 0000                       Map_3586_6: 	dc.w Map_3586_CE-Map_3586
00023BD4 0000                       Map_3586_8: 	dc.w Map_3586_DE-Map_3586
00023BD6 0000                       Map_3586_A: 	dc.w Map_3586_EE-Map_3586
00023BD8 0000                       Map_3586_C: 	dc.w Map_3586_FE-Map_3586
00023BDA 0000                       Map_3586_E: 	dc.w Map_3586_113-Map_3586
00023BDC 0000                       Map_3586_10: 	dc.w Map_3586_11E-Map_3586
00023BDE 0000                       Map_3586_12: 	dc.w Map_3586_129-Map_3586
00023BE0 0000                       Map_3586_14: 	dc.w Map_3586_13E-Map_3586
00023BE2 0000                       Map_3586_16: 	dc.w Map_3586_149-Map_3586
00023BE4 0000                       Map_3586_18: 	dc.w Map_3586_159-Map_3586
00023BE6 0000                       Map_3586_1A: 	dc.w Map_3586_173-Map_3586
00023BE8 0000                       Map_3586_1C: 	dc.w Map_3586_192-Map_3586
00023BEA 0000                       Map_3586_1E: 	dc.w Map_3586_1A7-Map_3586
00023BEC 0000                       Map_3586_20: 	dc.w Map_3586_1C1-Map_3586
00023BEE 0000                       Map_3586_22: 	dc.w Map_3586_1D6-Map_3586
00023BF0 0000                       Map_3586_24: 	dc.w Map_3586_1F0-Map_3586
00023BF2 0000                       Map_3586_26: 	dc.w Map_3586_205-Map_3586
00023BF4 0000                       Map_3586_28: 	dc.w Map_3586_210-Map_3586
00023BF6 0000                       Map_3586_2A: 	dc.w Map_3586_21B-Map_3586
00023BF8 0000                       Map_3586_2C: 	dc.w Map_3586_230-Map_3586
00023BFA 0000                       Map_3586_2E: 	dc.w Map_3586_23B-Map_3586
00023BFC 0000                       Map_3586_30: 	dc.w Map_3586_24B-Map_3586
00023BFE 0000                       Map_3586_32: 	dc.w Map_3586_26A-Map_3586
00023C00 0000                       Map_3586_34: 	dc.w Map_3586_289-Map_3586
00023C02 0000                       Map_3586_36: 	dc.w Map_3586_29E-Map_3586
00023C04 0000                       Map_3586_38: 	dc.w Map_3586_2B8-Map_3586
00023C06 0000                       Map_3586_3A: 	dc.w Map_3586_2CD-Map_3586
00023C08 0000                       Map_3586_3C: 	dc.w Map_3586_2E7-Map_3586
00023C0A 0000                       Map_3586_3E: 	dc.w Map_3586_2F2-Map_3586
00023C0C 0000                       Map_3586_40: 	dc.w Map_3586_2FD-Map_3586
00023C0E 0000                       Map_3586_42: 	dc.w Map_3586_308-Map_3586
00023C10 0000                       Map_3586_44: 	dc.w Map_3586_313-Map_3586
00023C12 0000                       Map_3586_46: 	dc.w Map_3586_328-Map_3586
00023C14 0000                       Map_3586_48: 	dc.w Map_3586_338-Map_3586
00023C16 0000                       Map_3586_4A: 	dc.w Map_3586_34D-Map_3586
00023C18 0000                       Map_3586_4C: 	dc.w Map_3586_35D-Map_3586
00023C1A 0000                       Map_3586_4E: 	dc.w Map_3586_368-Map_3586
00023C1C 0000                       Map_3586_50: 	dc.w Map_3586_373-Map_3586
00023C1E 0000                       Map_3586_52: 	dc.w Map_3586_37E-Map_3586
00023C20 0000                       Map_3586_54: 	dc.w Map_3586_389-Map_3586
00023C22 0000                       Map_3586_56: 	dc.w Map_3586_39E-Map_3586
00023C24 0000                       Map_3586_58: 	dc.w Map_3586_3A9-Map_3586
00023C26 0000                       Map_3586_5A: 	dc.w Map_3586_3BE-Map_3586
00023C28 0000                       Map_3586_5C: 	dc.w Map_3586_3C9-Map_3586
00023C2A 0000                       Map_3586_5E: 	dc.w Map_3586_3CF-Map_3586
00023C2C 0000                       Map_3586_60: 	dc.w Map_3586_3D5-Map_3586
00023C2E 0000                       Map_3586_62: 	dc.w Map_3586_3DB-Map_3586
00023C30 0000                       Map_3586_64: 	dc.w Map_3586_3E1-Map_3586
00023C32 0000                       Map_3586_66: 	dc.w Map_3586_3E7-Map_3586
00023C34 0000                       Map_3586_68: 	dc.w Map_3586_3F2-Map_3586
00023C36 0000                       Map_3586_6A: 	dc.w Map_3586_3F8-Map_3586
00023C38 0000                       Map_3586_6C: 	dc.w Map_3586_403-Map_3586
00023C3A 0000                       Map_3586_6E: 	dc.w Map_3586_409-Map_3586
00023C3C 0000                       Map_3586_70: 	dc.w Map_3586_414-Map_3586
00023C3E 0000                       Map_3586_72: 	dc.w Map_3586_429-Map_3586
00023C40 0000                       Map_3586_74: 	dc.w Map_3586_43E-Map_3586
00023C42 0000                       Map_3586_76: 	dc.w Map_3586_44E-Map_3586
00023C44 0000                       Map_3586_78: 	dc.w Map_3586_45E-Map_3586
00023C46 0000                       Map_3586_7A: 	dc.w Map_3586_46E-Map_3586
00023C48 0000                       Map_3586_7C: 	dc.w Map_3586_479-Map_3586
00023C4A 0000                       Map_3586_7E: 	dc.w Map_3586_489-Map_3586
00023C4C 0000                       Map_3586_80: 	dc.w Map_3586_499-Map_3586
00023C4E 0000                       Map_3586_82: 	dc.w Map_3586_4A9-Map_3586
00023C50 0000                       Map_3586_84: 	dc.w Map_3586_4BE-Map_3586
00023C52 0000                       Map_3586_86: 	dc.w Map_3586_4D3-Map_3586
00023C54 0000                       Map_3586_88: 	dc.w Map_3586_4ED-Map_3586
00023C56 0000                       Map_3586_8A: 	dc.w Map_3586_507-Map_3586
00023C58 0000                       Map_3586_8C: 	dc.w Map_3586_512-Map_3586
00023C5A 0000                       Map_3586_8E: 	dc.w Map_3586_522-Map_3586
00023C5C 0000                       Map_3586_90: 	dc.w Map_3586_52D-Map_3586
00023C5E 0000                       Map_3586_92: 	dc.w Map_3586_53D-Map_3586
00023C60 0000                       Map_3586_94: 	dc.w Map_3586_548-Map_3586
00023C62 0000                       Map_3586_96: 	dc.w Map_3586_558-Map_3586
00023C64 0000                       Map_3586_98: 	dc.w Map_3586_568-Map_3586
00023C66 0000                       Map_3586_9A: 	dc.w Map_3586_582-Map_3586
00023C68 0000                       Map_3586_9C: 	dc.w Map_3586_59C-Map_3586
00023C6A 0000                       Map_3586_9E: 	dc.w Map_3586_5A7-Map_3586
00023C6C 0000                       Map_3586_A0: 	dc.w Map_3586_5B7-Map_3586
00023C6E 0000                       Map_3586_A2: 	dc.w Map_3586_5BD-Map_3586
00023C70 0000                       Map_3586_A4: 	dc.w Map_3586_5C3-Map_3586
00023C72 0000                       Map_3586_A6: 	dc.w Map_3586_5C9-Map_3586
00023C74 0000                       Map_3586_A8: 	dc.w Map_3586_5D9-Map_3586
00023C76 0000                       Map_3586_AA: 	dc.w Map_3586_5E9-Map_3586
00023C78 0000                       Map_3586_AC: 	dc.w Map_3586_5F9-Map_3586
00023C7A 0000                       Map_3586_AE: 	dc.w Map_3586_609-Map_3586
00023C7C 0000                       Map_3586_B0: 	dc.w Map_3586_614-Map_3586
00023C7E 00                         Map_3586_B2: 	dc.b $0
00023C7F 02                         Map_3586_B3: 	dc.b $2
00023C80 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023C85 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023C8A 03                         Map_3586_BE: 	dc.b $3
00023C8B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023C90 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023C95 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023C9A 03                         Map_3586_CE: 	dc.b $3
00023C9B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023CA0 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023CA5 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023CAA 03                         Map_3586_DE: 	dc.b $3
00023CAB EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023CB0 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023CB5 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023CBA 03                         Map_3586_EE: 	dc.b $3
00023CBB EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023CC0 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023CC5 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023CCA 04                         Map_3586_FE: 	dc.b $4
00023CCB EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023CD0 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023CD5 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023CDA 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023CDF 02                         Map_3586_113: 	dc.b $2
00023CE0 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023CE5 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023CEA 02                         Map_3586_11E: 	dc.b $2
00023CEB ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023CF0 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023CF5 04                         Map_3586_129: 	dc.b $4
00023CF6 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023CFB FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023D00 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023D05 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023D0A 02                         Map_3586_13E: 	dc.b $2
00023D0B EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00023D10 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00023D15 03                         Map_3586_149: 	dc.b $3
00023D16 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023D1B FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023D20 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023D25 05                         Map_3586_159: 	dc.b $5
00023D26 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023D2B EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023D30 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023D35 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023D3A 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023D3F 06                         Map_3586_173: 	dc.b $6
00023D40 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023D45 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023D4A FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023D4F 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023D54 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023D59 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023D5E 04                         Map_3586_192: 	dc.b $4
00023D5F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023D64 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023D69 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023D6E 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023D73 05                         Map_3586_1A7: 	dc.b $5
00023D74 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023D79 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023D7E FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023D83 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023D88 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023D8D 04                         Map_3586_1C1: 	dc.b $4
00023D8E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023D93 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023D98 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023D9D 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023DA2 05                         Map_3586_1D6: 	dc.b $5
00023DA3 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023DA8 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023DAD FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023DB2 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023DB7 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023DBC 04                         Map_3586_1F0: 	dc.b $4
00023DBD F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023DC2 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023DC7 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023DCC 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023DD1 02                         Map_3586_205: 	dc.b $2
00023DD2 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023DD7 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023DDC 02                         Map_3586_210: 	dc.b $2
00023DDD F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023DE2 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023DE7 04                         Map_3586_21B: 	dc.b $4
00023DE8 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023DED EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023DF2 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023DF7 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023DFC 02                         Map_3586_230: 	dc.b $2
00023DFD F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023E02 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023E07 03                         Map_3586_23B: 	dc.b $3
00023E08 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023E0D EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023E12 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023E17 06                         Map_3586_24B: 	dc.b $6
00023E18 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023E1D ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023E22 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023E27 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023E2C 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023E31 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023E36 06                         Map_3586_26A: 	dc.b $6
00023E37 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023E3C E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023E41 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023E46 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023E4B F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023E50 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023E55 04                         Map_3586_289: 	dc.b $4
00023E56 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023E5B F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023E60 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023E65 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023E6A 05                         Map_3586_29E: 	dc.b $5
00023E6B FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023E70 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023E75 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023E7A F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023E7F 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023E84 04                         Map_3586_2B8: 	dc.b $4
00023E85 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023E8A F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023E8F EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023E94 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023E99 05                         Map_3586_2CD: 	dc.b $5
00023E9A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023E9F EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023EA4 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023EA9 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023EAE 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00023EB3 02                         Map_3586_2E7: 	dc.b $2
00023EB4 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023EB9 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023EBE 02                         Map_3586_2F2: 	dc.b $2
00023EBF EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023EC4 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023EC9 02                         Map_3586_2FD: 	dc.b $2
00023ECA EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023ECF FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023ED4 02                         Map_3586_308: 	dc.b $2
00023ED5 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023EDA FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023EDF 04                         Map_3586_313: 	dc.b $4
00023EE0 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023EE5 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023EEA FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023EEF FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023EF4 03                         Map_3586_328: 	dc.b $3
00023EF5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023EFA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023EFF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023F04 04                         Map_3586_338: 	dc.b $4
00023F05 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023F0A EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023F0F FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023F14 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00023F19 03                         Map_3586_34D: 	dc.b $3
00023F1A EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023F1F EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00023F24 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00023F29 02                         Map_3586_35D: 	dc.b $2
00023F2A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023F2F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023F34 02                         Map_3586_368: 	dc.b $2
00023F35 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023F3A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023F3F 02                         Map_3586_373: 	dc.b $2
00023F40 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023F45 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023F4A 02                         Map_3586_37E: 	dc.b $2
00023F4B F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00023F50 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00023F55 04                         Map_3586_389: 	dc.b $4
00023F56 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00023F5B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00023F60 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023F65 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00023F6A 02                         Map_3586_39E: 	dc.b $2
00023F6B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00023F70 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023F75 04                         Map_3586_3A9: 	dc.b $4
00023F76 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00023F7B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00023F80 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023F85 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00023F8A 02                         Map_3586_3BE: 	dc.b $2
00023F8B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00023F90 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00023F95 01                         Map_3586_3C9: 	dc.b $1
00023F96 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023F9B 01                         Map_3586_3CF: 	dc.b $1
00023F9C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023FA1 01                         Map_3586_3D5: 	dc.b $1
00023FA2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023FA7 01                         Map_3586_3DB: 	dc.b $1
00023FA8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023FAD 01                         Map_3586_3E1: 	dc.b $1
00023FAE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023FB3 02                         Map_3586_3E7: 	dc.b $2
00023FB4 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00023FB9 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00023FBE 01                         Map_3586_3F2: 	dc.b $1
00023FBF F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023FC4 02                         Map_3586_3F8: 	dc.b $2
00023FC5 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00023FCA 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00023FCF 01                         Map_3586_403: 	dc.b $1
00023FD0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00023FD5 02                         Map_3586_409: 	dc.b $2
00023FD6 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00023FDB FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00023FE0 04                         Map_3586_414: 	dc.b $4
00023FE1 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00023FE6 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00023FEB 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00023FF0 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00023FF5 04                         Map_3586_429: 	dc.b $4
00023FF6 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00023FFB FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00024000 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024005 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
0002400A 03                         Map_3586_43E: 	dc.b $3
0002400B EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00024010 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00024015 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
0002401A 03                         Map_3586_44E: 	dc.b $3
0002401B EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00024020 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00024025 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
0002402A 03                         Map_3586_45E: 	dc.b $3
0002402B F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024030 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024035 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002403A 02                         Map_3586_46E: 	dc.b $2
0002403B F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00024040 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00024045 03                         Map_3586_479: 	dc.b $3
00024046 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
0002404B FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00024050 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00024055 03                         Map_3586_489: 	dc.b $3
00024056 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002405B FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024060 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00024065 03                         Map_3586_499: 	dc.b $3
00024066 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002406B 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00024070 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00024075 04                         Map_3586_4A9: 	dc.b $4
00024076 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002407B 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024080 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00024085 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002408A 04                         Map_3586_4BE: 	dc.b $4
0002408B F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00024090 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00024095 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002409A F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002409F 05                         Map_3586_4D3: 	dc.b $5
000240A0 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000240A5 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000240AA 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000240AF 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000240B4 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000240B9 05                         Map_3586_4ED: 	dc.b $5
000240BA E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000240BF E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000240C4 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000240C9 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000240CE 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000240D3 02                         Map_3586_507: 	dc.b $2
000240D4 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000240D9 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000240DE 03                         Map_3586_512: 	dc.b $3
000240DF EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000240E4 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000240E9 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000240EE 02                         Map_3586_522: 	dc.b $2
000240EF ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000240F4 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000240F9 03                         Map_3586_52D: 	dc.b $3
000240FA EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000240FF 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00024104 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00024109 02                         Map_3586_53D: 	dc.b $2
0002410A EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002410F FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00024114 03                         Map_3586_548: 	dc.b $3
00024115 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002411A 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002411F E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00024124 03                         Map_3586_558: 	dc.b $3
00024125 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002412A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002412F F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00024134 05                         Map_3586_568: 	dc.b $5
00024135 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002413A E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002413F F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024144 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024149 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002414E 05                         Map_3586_582: 	dc.b $5
0002414F E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024154 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024159 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002415E 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024163 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00024168 02                         Map_3586_59C: 	dc.b $2
00024169 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002416E F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00024173 03                         Map_3586_5A7: 	dc.b $3
00024174 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00024179 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002417E 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00024183 01                         Map_3586_5B7: 	dc.b $1
00024184 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00024189 01                         Map_3586_5BD: 	dc.b $1
0002418A F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002418F 01                         Map_3586_5C3: 	dc.b $1
00024190 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00024195 03                         Map_3586_5C9: 	dc.b $3
00024196 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002419B FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000241A0 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000241A5 03                         Map_3586_5D9: 	dc.b $3
000241A6 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000241AB FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000241B0 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000241B5 03                         Map_3586_5E9: 	dc.b $3
000241B6 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000241BB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000241C0 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000241C5 03                         Map_3586_5F9: 	dc.b $3
000241C6 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000241CB FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000241D0 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000241D5 02                         Map_3586_609: 	dc.b $2
000241D6 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000241DB F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000241E0 02                         Map_3586_614: 	dc.b $2
000241E1 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000241E6 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000241EC 00                         	even
000241EC 00                         	even
000241EC                            
000241EC                            ; ---------------------------------------------------------------------------
000241EC                            ; Uncompressed graphics	loading	array for Sonic
000241EC                            ; ---------------------------------------------------------------------------
000241EC                            SonicDynPLC:
000241EC                            	include "_inc\Sonic dynamic pattern load cues.asm"
000241EC                            DPLC_86c7:
000241EC 0000                       DPLC_86c7_0: 	dc.w DPLC_86c7_B2-DPLC_86c7
000241EE 0000                       DPLC_86c7_2: 	dc.w DPLC_86c7_B3-DPLC_86c7
000241F0 0000                       DPLC_86c7_4: 	dc.w DPLC_86c7_B8-DPLC_86c7
000241F2 0000                       DPLC_86c7_6: 	dc.w DPLC_86c7_BF-DPLC_86c7
000241F4 0000                       DPLC_86c7_8: 	dc.w DPLC_86c7_C6-DPLC_86c7
000241F6 0000                       DPLC_86c7_A: 	dc.w DPLC_86c7_CD-DPLC_86c7
000241F8 0000                       DPLC_86c7_C: 	dc.w DPLC_86c7_D4-DPLC_86c7
000241FA 0000                       DPLC_86c7_E: 	dc.w DPLC_86c7_DD-DPLC_86c7
000241FC 0000                       DPLC_86c7_10: 	dc.w DPLC_86c7_E2-DPLC_86c7
000241FE 0000                       DPLC_86c7_12: 	dc.w DPLC_86c7_E7-DPLC_86c7
00024200 0000                       DPLC_86c7_14: 	dc.w DPLC_86c7_F0-DPLC_86c7
00024202 0000                       DPLC_86c7_16: 	dc.w DPLC_86c7_F5-DPLC_86c7
00024204 0000                       DPLC_86c7_18: 	dc.w DPLC_86c7_FC-DPLC_86c7
00024206 0000                       DPLC_86c7_1A: 	dc.w DPLC_86c7_107-DPLC_86c7
00024208 0000                       DPLC_86c7_1C: 	dc.w DPLC_86c7_114-DPLC_86c7
0002420A 0000                       DPLC_86c7_1E: 	dc.w DPLC_86c7_11D-DPLC_86c7
0002420C 0000                       DPLC_86c7_20: 	dc.w DPLC_86c7_128-DPLC_86c7
0002420E 0000                       DPLC_86c7_22: 	dc.w DPLC_86c7_131-DPLC_86c7
00024210 0000                       DPLC_86c7_24: 	dc.w DPLC_86c7_13C-DPLC_86c7
00024212 0000                       DPLC_86c7_26: 	dc.w DPLC_86c7_145-DPLC_86c7
00024214 0000                       DPLC_86c7_28: 	dc.w DPLC_86c7_14A-DPLC_86c7
00024216 0000                       DPLC_86c7_2A: 	dc.w DPLC_86c7_14F-DPLC_86c7
00024218 0000                       DPLC_86c7_2C: 	dc.w DPLC_86c7_158-DPLC_86c7
0002421A 0000                       DPLC_86c7_2E: 	dc.w DPLC_86c7_15D-DPLC_86c7
0002421C 0000                       DPLC_86c7_30: 	dc.w DPLC_86c7_164-DPLC_86c7
0002421E 0000                       DPLC_86c7_32: 	dc.w DPLC_86c7_171-DPLC_86c7
00024220 0000                       DPLC_86c7_34: 	dc.w DPLC_86c7_17E-DPLC_86c7
00024222 0000                       DPLC_86c7_36: 	dc.w DPLC_86c7_187-DPLC_86c7
00024224 0000                       DPLC_86c7_38: 	dc.w DPLC_86c7_192-DPLC_86c7
00024226 0000                       DPLC_86c7_3A: 	dc.w DPLC_86c7_19B-DPLC_86c7
00024228 0000                       DPLC_86c7_3C: 	dc.w DPLC_86c7_1A6-DPLC_86c7
0002422A 0000                       DPLC_86c7_3E: 	dc.w DPLC_86c7_1AB-DPLC_86c7
0002422C 0000                       DPLC_86c7_40: 	dc.w DPLC_86c7_1B0-DPLC_86c7
0002422E 0000                       DPLC_86c7_42: 	dc.w DPLC_86c7_1B5-DPLC_86c7
00024230 0000                       DPLC_86c7_44: 	dc.w DPLC_86c7_1BA-DPLC_86c7
00024232 0000                       DPLC_86c7_46: 	dc.w DPLC_86c7_1C3-DPLC_86c7
00024234 0000                       DPLC_86c7_48: 	dc.w DPLC_86c7_1CA-DPLC_86c7
00024236 0000                       DPLC_86c7_4A: 	dc.w DPLC_86c7_1D3-DPLC_86c7
00024238 0000                       DPLC_86c7_4C: 	dc.w DPLC_86c7_1DA-DPLC_86c7
0002423A 0000                       DPLC_86c7_4E: 	dc.w DPLC_86c7_1DF-DPLC_86c7
0002423C 0000                       DPLC_86c7_50: 	dc.w DPLC_86c7_1E4-DPLC_86c7
0002423E 0000                       DPLC_86c7_52: 	dc.w DPLC_86c7_1E9-DPLC_86c7
00024240 0000                       DPLC_86c7_54: 	dc.w DPLC_86c7_1EE-DPLC_86c7
00024242 0000                       DPLC_86c7_56: 	dc.w DPLC_86c7_1F7-DPLC_86c7
00024244 0000                       DPLC_86c7_58: 	dc.w DPLC_86c7_1FC-DPLC_86c7
00024246 0000                       DPLC_86c7_5A: 	dc.w DPLC_86c7_205-DPLC_86c7
00024248 0000                       DPLC_86c7_5C: 	dc.w DPLC_86c7_20A-DPLC_86c7
0002424A 0000                       DPLC_86c7_5E: 	dc.w DPLC_86c7_20D-DPLC_86c7
0002424C 0000                       DPLC_86c7_60: 	dc.w DPLC_86c7_210-DPLC_86c7
0002424E 0000                       DPLC_86c7_62: 	dc.w DPLC_86c7_213-DPLC_86c7
00024250 0000                       DPLC_86c7_64: 	dc.w DPLC_86c7_216-DPLC_86c7
00024252 0000                       DPLC_86c7_66: 	dc.w DPLC_86c7_219-DPLC_86c7
00024254 0000                       DPLC_86c7_68: 	dc.w DPLC_86c7_21E-DPLC_86c7
00024256 0000                       DPLC_86c7_6A: 	dc.w DPLC_86c7_221-DPLC_86c7
00024258 0000                       DPLC_86c7_6C: 	dc.w DPLC_86c7_226-DPLC_86c7
0002425A 0000                       DPLC_86c7_6E: 	dc.w DPLC_86c7_229-DPLC_86c7
0002425C 0000                       DPLC_86c7_70: 	dc.w DPLC_86c7_22E-DPLC_86c7
0002425E 0000                       DPLC_86c7_72: 	dc.w DPLC_86c7_237-DPLC_86c7
00024260 0000                       DPLC_86c7_74: 	dc.w DPLC_86c7_240-DPLC_86c7
00024262 0000                       DPLC_86c7_76: 	dc.w DPLC_86c7_247-DPLC_86c7
00024264 0000                       DPLC_86c7_78: 	dc.w DPLC_86c7_24E-DPLC_86c7
00024266 0000                       DPLC_86c7_7A: 	dc.w DPLC_86c7_255-DPLC_86c7
00024268 0000                       DPLC_86c7_7C: 	dc.w DPLC_86c7_258-DPLC_86c7
0002426A 0000                       DPLC_86c7_7E: 	dc.w DPLC_86c7_25F-DPLC_86c7
0002426C 0000                       DPLC_86c7_80: 	dc.w DPLC_86c7_266-DPLC_86c7
0002426E 0000                       DPLC_86c7_82: 	dc.w DPLC_86c7_26D-DPLC_86c7
00024270 0000                       DPLC_86c7_84: 	dc.w DPLC_86c7_276-DPLC_86c7
00024272 0000                       DPLC_86c7_86: 	dc.w DPLC_86c7_27F-DPLC_86c7
00024274 0000                       DPLC_86c7_88: 	dc.w DPLC_86c7_28A-DPLC_86c7
00024276 0000                       DPLC_86c7_8A: 	dc.w DPLC_86c7_295-DPLC_86c7
00024278 0000                       DPLC_86c7_8C: 	dc.w DPLC_86c7_29A-DPLC_86c7
0002427A 0000                       DPLC_86c7_8E: 	dc.w DPLC_86c7_2A1-DPLC_86c7
0002427C 0000                       DPLC_86c7_90: 	dc.w DPLC_86c7_2A6-DPLC_86c7
0002427E 0000                       DPLC_86c7_92: 	dc.w DPLC_86c7_2AD-DPLC_86c7
00024280 0000                       DPLC_86c7_94: 	dc.w DPLC_86c7_2B2-DPLC_86c7
00024282 0000                       DPLC_86c7_96: 	dc.w DPLC_86c7_2B9-DPLC_86c7
00024284 0000                       DPLC_86c7_98: 	dc.w DPLC_86c7_2C0-DPLC_86c7
00024286 0000                       DPLC_86c7_9A: 	dc.w DPLC_86c7_2CB-DPLC_86c7
00024288 0000                       DPLC_86c7_9C: 	dc.w DPLC_86c7_2D6-DPLC_86c7
0002428A 0000                       DPLC_86c7_9E: 	dc.w DPLC_86c7_2DB-DPLC_86c7
0002428C 0000                       DPLC_86c7_A0: 	dc.w DPLC_86c7_2E2-DPLC_86c7
0002428E 0000                       DPLC_86c7_A2: 	dc.w DPLC_86c7_2E5-DPLC_86c7
00024290 0000                       DPLC_86c7_A4: 	dc.w DPLC_86c7_2E8-DPLC_86c7
00024292 0000                       DPLC_86c7_A6: 	dc.w DPLC_86c7_2EB-DPLC_86c7
00024294 0000                       DPLC_86c7_A8: 	dc.w DPLC_86c7_2F2-DPLC_86c7
00024296 0000                       DPLC_86c7_AA: 	dc.w DPLC_86c7_2F9-DPLC_86c7
00024298 0000                       DPLC_86c7_AC: 	dc.w DPLC_86c7_300-DPLC_86c7
0002429A 0000                       DPLC_86c7_AE: 	dc.w DPLC_86c7_307-DPLC_86c7
0002429C 0000                       DPLC_86c7_B0: 	dc.w DPLC_86c7_30C-DPLC_86c7
0002429E 00                         DPLC_86c7_B2: 	dc.b $0
0002429F 02                         DPLC_86c7_B3: 	dc.b $2
000242A0 F000                       	dc.b $F0, $0
000242A2 1010                       	dc.b $10, $10
000242A4 03                         DPLC_86c7_B8: 	dc.b $3
000242A5 5012                       	dc.b $50, $12
000242A7 5018                       	dc.b $50, $18
000242A9 201E                       	dc.b $20, $1E
000242AB 03                         DPLC_86c7_BF: 	dc.b $3
000242AC 5021                       	dc.b $50, $21
000242AE 5018                       	dc.b $50, $18
000242B0 201E                       	dc.b $20, $1E
000242B2 03                         DPLC_86c7_C6: 	dc.b $3
000242B3 5021                       	dc.b $50, $21
000242B5 5018                       	dc.b $50, $18
000242B7 2027                       	dc.b $20, $27
000242B9 03                         DPLC_86c7_CD: 	dc.b $3
000242BA 802A                       	dc.b $80, $2A
000242BC 2033                       	dc.b $20, $33
000242BE 2036                       	dc.b $20, $36
000242C0 04                         DPLC_86c7_D4: 	dc.b $4
000242C1 7039                       	dc.b $70, $39
000242C3 5041                       	dc.b $50, $41
000242C5 5047                       	dc.b $50, $47
000242C7 104D                       	dc.b $10, $4D
000242C9 02                         DPLC_86c7_DD: 	dc.b $2
000242CA 7039                       	dc.b $70, $39
000242CC B04F                       	dc.b $B0, $4F
000242CE 02                         DPLC_86c7_E2: 	dc.b $2
000242CF 505B                       	dc.b $50, $5B
000242D1 8061                       	dc.b $80, $61
000242D3 04                         DPLC_86c7_E7: 	dc.b $4
000242D4 505B                       	dc.b $50, $5B
000242D6 506A                       	dc.b $50, $6A
000242D8 5070                       	dc.b $50, $70
000242DA 1076                       	dc.b $10, $76
000242DC 02                         DPLC_86c7_F0: 	dc.b $2
000242DD 505B                       	dc.b $50, $5B
000242DF B078                       	dc.b $B0, $78
000242E1 03                         DPLC_86c7_F5: 	dc.b $3
000242E2 7039                       	dc.b $70, $39
000242E4 3084                       	dc.b $30, $84
000242E6 5088                       	dc.b $50, $88
000242E8 05                         DPLC_86c7_FC: 	dc.b $5
000242E9 508E                       	dc.b $50, $8E
000242EB 5094                       	dc.b $50, $94
000242ED 209A                       	dc.b $20, $9A
000242EF 509D                       	dc.b $50, $9D
000242F1 00A3                       	dc.b $0, $A3
000242F3 06                         DPLC_86c7_107: 	dc.b $6
000242F4 508E                       	dc.b $50, $8E
000242F6 10A4                       	dc.b $10, $A4
000242F8 30A6                       	dc.b $30, $A6
000242FA 50AA                       	dc.b $50, $AA
000242FC 30B0                       	dc.b $30, $B0
000242FE 00B4                       	dc.b $0, $B4
00024300 04                         DPLC_86c7_114: 	dc.b $4
00024301 50B5                       	dc.b $50, $B5
00024303 10BB                       	dc.b $10, $BB
00024305 70BD                       	dc.b $70, $BD
00024307 20C5                       	dc.b $20, $C5
00024309 05                         DPLC_86c7_11D: 	dc.b $5
0002430A 50C8                       	dc.b $50, $C8
0002430C 30CE                       	dc.b $30, $CE
0002430E 70D2                       	dc.b $70, $D2
00024310 20DA                       	dc.b $20, $DA
00024312 10DD                       	dc.b $10, $DD
00024314 04                         DPLC_86c7_128: 	dc.b $4
00024315 50C8                       	dc.b $50, $C8
00024317 10DF                       	dc.b $10, $DF
00024319 70E1                       	dc.b $70, $E1
0002431B 20E9                       	dc.b $20, $E9
0002431D 05                         DPLC_86c7_131: 	dc.b $5
0002431E 508E                       	dc.b $50, $8E
00024320 10A4                       	dc.b $10, $A4
00024322 009A                       	dc.b $0, $9A
00024324 70EC                       	dc.b $70, $EC
00024326 20F4                       	dc.b $20, $F4
00024328 04                         DPLC_86c7_13C: 	dc.b $4
00024329 70F7                       	dc.b $70, $F7
0002432B 50FF                       	dc.b $50, $FF
0002432D 1105                       	dc.b $11, $5
0002432F 5107                       	dc.b $51, $7
00024331 02                         DPLC_86c7_145: 	dc.b $2
00024332 70F7                       	dc.b $70, $F7
00024334 B10D                       	dc.b $B1, $D
00024336 02                         DPLC_86c7_14A: 	dc.b $2
00024337 5119                       	dc.b $51, $19
00024339 811F                       	dc.b $81, $1F
0002433B 04                         DPLC_86c7_14F: 	dc.b $4
0002433C 5119                       	dc.b $51, $19
0002433E 5128                       	dc.b $51, $28
00024340 112E                       	dc.b $11, $2E
00024342 5130                       	dc.b $51, $30
00024344 02                         DPLC_86c7_158: 	dc.b $2
00024345 5119                       	dc.b $51, $19
00024347 B136                       	dc.b $B1, $36
00024349 03                         DPLC_86c7_15D: 	dc.b $3
0002434A 70F7                       	dc.b $70, $F7
0002434C 010D                       	dc.b $1, $D
0002434E 8142                       	dc.b $81, $42
00024350 06                         DPLC_86c7_164: 	dc.b $6
00024351 514B                       	dc.b $51, $4B
00024353 1151                       	dc.b $11, $51
00024355 1153                       	dc.b $11, $53
00024357 8155                       	dc.b $81, $55
00024359 015E                       	dc.b $1, $5E
0002435B 015F                       	dc.b $1, $5F
0002435D 06                         DPLC_86c7_171: 	dc.b $6
0002435E 514B                       	dc.b $51, $4B
00024360 2160                       	dc.b $21, $60
00024362 1163                       	dc.b $11, $63
00024364 1165                       	dc.b $11, $65
00024366 8167                       	dc.b $81, $67
00024368 015E                       	dc.b $1, $5E
0002436A 04                         DPLC_86c7_17E: 	dc.b $4
0002436B 5170                       	dc.b $51, $70
0002436D 1176                       	dc.b $11, $76
0002436F 8178                       	dc.b $81, $78
00024371 1181                       	dc.b $11, $81
00024373 05                         DPLC_86c7_187: 	dc.b $5
00024374 5183                       	dc.b $51, $83
00024376 2189                       	dc.b $21, $89
00024378 118C                       	dc.b $11, $8C
0002437A 718E                       	dc.b $71, $8E
0002437C 2196                       	dc.b $21, $96
0002437E 04                         DPLC_86c7_192: 	dc.b $4
0002437F 5183                       	dc.b $51, $83
00024381 1199                       	dc.b $11, $99
00024383 819B                       	dc.b $81, $9B
00024385 11A4                       	dc.b $11, $A4
00024387 05                         DPLC_86c7_19B: 	dc.b $5
00024388 514B                       	dc.b $51, $4B
0002438A 81A6                       	dc.b $81, $A6
0002438C 1165                       	dc.b $11, $65
0002438E 11AF                       	dc.b $11, $AF
00024390 015E                       	dc.b $1, $5E
00024392 02                         DPLC_86c7_1A6: 	dc.b $2
00024393 51B1                       	dc.b $51, $B1
00024395 B1B7                       	dc.b $B1, $B7
00024397 02                         DPLC_86c7_1AB: 	dc.b $2
00024398 505B                       	dc.b $50, $5B
0002439A B1C3                       	dc.b $B1, $C3
0002439C 02                         DPLC_86c7_1B0: 	dc.b $2
0002439D 51B1                       	dc.b $51, $B1
0002439F B1CF                       	dc.b $B1, $CF
000243A1 02                         DPLC_86c7_1B5: 	dc.b $2
000243A2 505B                       	dc.b $50, $5B
000243A4 B1DB                       	dc.b $B1, $DB
000243A6 04                         DPLC_86c7_1BA: 	dc.b $4
000243A7 51E7                       	dc.b $51, $E7
000243A9 11ED                       	dc.b $11, $ED
000243AB B1EF                       	dc.b $B1, $EF
000243AD 01FB                       	dc.b $1, $FB
000243AF 03                         DPLC_86c7_1C3: 	dc.b $3
000243B0 51FC                       	dc.b $51, $FC
000243B2 1202                       	dc.b $12, $2
000243B4 B204                       	dc.b $B2, $4
000243B6 04                         DPLC_86c7_1CA: 	dc.b $4
000243B7 51E7                       	dc.b $51, $E7
000243B9 1210                       	dc.b $12, $10
000243BB B212                       	dc.b $B2, $12
000243BD 01FB                       	dc.b $1, $FB
000243BF 03                         DPLC_86c7_1D3: 	dc.b $3
000243C0 51FC                       	dc.b $51, $FC
000243C2 1202                       	dc.b $12, $2
000243C4 B21E                       	dc.b $B2, $1E
000243C6 02                         DPLC_86c7_1DA: 	dc.b $2
000243C7 522A                       	dc.b $52, $2A
000243C9 B230                       	dc.b $B2, $30
000243CB 02                         DPLC_86c7_1DF: 	dc.b $2
000243CC 5119                       	dc.b $51, $19
000243CE B23C                       	dc.b $B2, $3C
000243D0 02                         DPLC_86c7_1E4: 	dc.b $2
000243D1 522A                       	dc.b $52, $2A
000243D3 B248                       	dc.b $B2, $48
000243D5 02                         DPLC_86c7_1E9: 	dc.b $2
000243D6 5119                       	dc.b $51, $19
000243D8 B254                       	dc.b $B2, $54
000243DA 04                         DPLC_86c7_1EE: 	dc.b $4
000243DB 5260                       	dc.b $52, $60
000243DD 1266                       	dc.b $12, $66
000243DF B268                       	dc.b $B2, $68
000243E1 0274                       	dc.b $2, $74
000243E3 02                         DPLC_86c7_1F7: 	dc.b $2
000243E4 7275                       	dc.b $72, $75
000243E6 B27D                       	dc.b $B2, $7D
000243E8 04                         DPLC_86c7_1FC: 	dc.b $4
000243E9 5260                       	dc.b $52, $60
000243EB 1289                       	dc.b $12, $89
000243ED B28B                       	dc.b $B2, $8B
000243EF 0274                       	dc.b $2, $74
000243F1 02                         DPLC_86c7_205: 	dc.b $2
000243F2 7275                       	dc.b $72, $75
000243F4 B297                       	dc.b $B2, $97
000243F6 01                         DPLC_86c7_20A: 	dc.b $1
000243F7 F2A3                       	dc.b $F2, $A3
000243F9 01                         DPLC_86c7_20D: 	dc.b $1
000243FA F2B3                       	dc.b $F2, $B3
000243FC 01                         DPLC_86c7_210: 	dc.b $1
000243FD F2C3                       	dc.b $F2, $C3
000243FF 01                         DPLC_86c7_213: 	dc.b $1
00024400 F2D3                       	dc.b $F2, $D3
00024402 01                         DPLC_86c7_216: 	dc.b $1
00024403 F2E3                       	dc.b $F2, $E3
00024405 02                         DPLC_86c7_219: 	dc.b $2
00024406 B2F3                       	dc.b $B2, $F3
00024408 22FF                       	dc.b $22, $FF
0002440A 01                         DPLC_86c7_21E: 	dc.b $1
0002440B F302                       	dc.b $F3, $2
0002440D 02                         DPLC_86c7_221: 	dc.b $2
0002440E B312                       	dc.b $B3, $12
00024410 231E                       	dc.b $23, $1E
00024412 01                         DPLC_86c7_226: 	dc.b $1
00024413 F321                       	dc.b $F3, $21
00024415 02                         DPLC_86c7_229: 	dc.b $2
00024416 5331                       	dc.b $53, $31
00024418 B337                       	dc.b $B3, $37
0002441A 04                         DPLC_86c7_22E: 	dc.b $4
0002441B 5343                       	dc.b $53, $43
0002441D 7349                       	dc.b $73, $49
0002441F 1351                       	dc.b $13, $51
00024421 0353                       	dc.b $3, $53
00024423 04                         DPLC_86c7_237: 	dc.b $4
00024424 1354                       	dc.b $13, $54
00024426 7356                       	dc.b $73, $56
00024428 235E                       	dc.b $23, $5E
0002442A 0361                       	dc.b $3, $61
0002442C 03                         DPLC_86c7_240: 	dc.b $3
0002442D 2362                       	dc.b $23, $62
0002442F 2365                       	dc.b $23, $65
00024431 F368                       	dc.b $F3, $68
00024433 03                         DPLC_86c7_247: 	dc.b $3
00024434 B378                       	dc.b $B3, $78
00024436 7384                       	dc.b $73, $84
00024438 0078                       	dc.b $0, $78
0002443A 03                         DPLC_86c7_24E: 	dc.b $3
0002443B 738C                       	dc.b $73, $8C
0002443D 3394                       	dc.b $33, $94
0002443F 2398                       	dc.b $23, $98
00024441 01                         DPLC_86c7_255: 	dc.b $1
00024442 839B                       	dc.b $83, $9B
00024444 03                         DPLC_86c7_258: 	dc.b $3
00024445 73A4                       	dc.b $73, $A4
00024447 03AC                       	dc.b $3, $AC
00024449 33AD                       	dc.b $33, $AD
0002444B 03                         DPLC_86c7_25F: 	dc.b $3
0002444C 73B1                       	dc.b $73, $B1
0002444E 33B9                       	dc.b $33, $B9
00024450 23BD                       	dc.b $23, $BD
00024452 03                         DPLC_86c7_266: 	dc.b $3
00024453 B3C0                       	dc.b $B3, $C0
00024455 13CC                       	dc.b $13, $CC
00024457 03CE                       	dc.b $3, $CE
00024459 04                         DPLC_86c7_26D: 	dc.b $4
0002445A B3CF                       	dc.b $B3, $CF
0002445C 33DB                       	dc.b $33, $DB
0002445E 03DF                       	dc.b $3, $DF
00024460 03E0                       	dc.b $3, $E0
00024462 04                         DPLC_86c7_276: 	dc.b $4
00024463 B3E1                       	dc.b $B3, $E1
00024465 33ED                       	dc.b $33, $ED
00024467 03F1                       	dc.b $3, $F1
00024469 03F2                       	dc.b $3, $F2
0002446B 05                         DPLC_86c7_27F: 	dc.b $5
0002446C 83F3                       	dc.b $83, $F3
0002446E 13FC                       	dc.b $13, $FC
00024470 53FE                       	dc.b $53, $FE
00024472 1404                       	dc.b $14, $4
00024474 0406                       	dc.b $4, $6
00024476 05                         DPLC_86c7_28A: 	dc.b $5
00024477 8407                       	dc.b $84, $7
00024479 1410                       	dc.b $14, $10
0002447B 53FE                       	dc.b $53, $FE
0002447D 1404                       	dc.b $14, $4
0002447F 0406                       	dc.b $4, $6
00024481 02                         DPLC_86c7_295: 	dc.b $2
00024482 8412                       	dc.b $84, $12
00024484 741B                       	dc.b $74, $1B
00024486 03                         DPLC_86c7_29A: 	dc.b $3
00024487 8423                       	dc.b $84, $23
00024489 242C                       	dc.b $24, $2C
0002448B 142F                       	dc.b $14, $2F
0002448D 02                         DPLC_86c7_2A1: 	dc.b $2
0002448E 8431                       	dc.b $84, $31
00024490 743A                       	dc.b $74, $3A
00024492 03                         DPLC_86c7_2A6: 	dc.b $3
00024493 8423                       	dc.b $84, $23
00024495 2442                       	dc.b $24, $42
00024497 1445                       	dc.b $14, $45
00024499 02                         DPLC_86c7_2AD: 	dc.b $2
0002449A 5447                       	dc.b $54, $47
0002449C B44D                       	dc.b $B4, $4D
0002449E 03                         DPLC_86c7_2B2: 	dc.b $3
0002449F 8459                       	dc.b $84, $59
000244A1 3462                       	dc.b $34, $62
000244A3 0466                       	dc.b $4, $66
000244A5 03                         DPLC_86c7_2B9: 	dc.b $3
000244A6 7467                       	dc.b $74, $67
000244A8 146F                       	dc.b $14, $6F
000244AA B471                       	dc.b $B4, $71
000244AC 05                         DPLC_86c7_2C0: 	dc.b $5
000244AD 747D                       	dc.b $74, $7D
000244AF 1485                       	dc.b $14, $85
000244B1 5487                       	dc.b $54, $87
000244B3 348D                       	dc.b $34, $8D
000244B5 0491                       	dc.b $4, $91
000244B7 05                         DPLC_86c7_2CB: 	dc.b $5
000244B8 7492                       	dc.b $74, $92
000244BA 1485                       	dc.b $14, $85
000244BC 549A                       	dc.b $54, $9A
000244BE 348D                       	dc.b $34, $8D
000244C0 0491                       	dc.b $4, $91
000244C2 02                         DPLC_86c7_2D6: 	dc.b $2
000244C3 24A0                       	dc.b $24, $A0
000244C5 F4A3                       	dc.b $F4, $A3
000244C7 03                         DPLC_86c7_2DB: 	dc.b $3
000244C8 24B3                       	dc.b $24, $B3
000244CA B4B6                       	dc.b $B4, $B6
000244CC 24C2                       	dc.b $24, $C2
000244CE 01                         DPLC_86c7_2E2: 	dc.b $1
000244CF B4C5                       	dc.b $B4, $C5
000244D1 01                         DPLC_86c7_2E5: 	dc.b $1
000244D2 54D1                       	dc.b $54, $D1
000244D4 01                         DPLC_86c7_2E8: 	dc.b $1
000244D5 14D7                       	dc.b $14, $D7
000244D7 03                         DPLC_86c7_2EB: 	dc.b $3
000244D8 738C                       	dc.b $73, $8C
000244DA 3394                       	dc.b $33, $94
000244DC 2398                       	dc.b $23, $98
000244DE 03                         DPLC_86c7_2F2: 	dc.b $3
000244DF 73A4                       	dc.b $73, $A4
000244E1 03AC                       	dc.b $3, $AC
000244E3 33AD                       	dc.b $33, $AD
000244E5 03                         DPLC_86c7_2F9: 	dc.b $3
000244E6 B4D9                       	dc.b $B4, $D9
000244E8 14E5                       	dc.b $14, $E5
000244EA 34E7                       	dc.b $34, $E7
000244EC 03                         DPLC_86c7_300: 	dc.b $3
000244ED 54EB                       	dc.b $54, $EB
000244EF B4F1                       	dc.b $B4, $F1
000244F1 1074                       	dc.b $10, $74
000244F3 02                         DPLC_86c7_307: 	dc.b $2
000244F4 F4FD                       	dc.b $F4, $FD
000244F6 250D                       	dc.b $25, $D
000244F8 02                         DPLC_86c7_30C: 	dc.b $2
000244F9 F510                       	dc.b $F5, $10
000244FB 1520                       	dc.b $15, $20
000244FE 00                         	even
000244FE 00                         	even
000244FE                            
000244FE                            ; ---------------------------------------------------------------------------
000244FE                            ; Uncompressed graphics	- Sonic
000244FE                            ; ---------------------------------------------------------------------------
000244FE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002E93E                            		even
0002E93E                            ; ---------------------------------------------------------------------------
0002E93E                            ; Compressed graphics - various
0002E93E                            ; ---------------------------------------------------------------------------
0002E93E                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002EA42                            		even
0002EA42                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002EA7C                            		even
0002EA7C                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002EC12                            		even
0002EC12                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002ED5A                            		even
0002ED5A                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002EE64                            		even
0002EE64                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002EEB6                            		even
0002EEB6                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F0FE                            		even
0002F0FE                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F284                            		even
0002F284                            ; ---------------------------------------------------------------------------
0002F284                            ; Sprite mappings - walls of the special stage
0002F284                            ; ---------------------------------------------------------------------------
0002F284                            Map_SSWalls:
0002F284                            	include "_maps\SSwalls.asm"
0002F284                            ; ---------------------------------------------------------------------------
0002F284                            ; Sprite mappings - walls of the special stage
0002F284                            ; ---------------------------------------------------------------------------
0002F284 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002F288 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002F28C 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002F290 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002F294 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002F298 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002F29C 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002F2A0 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002F2A4 01                         byte_2C584:	dc.b 1
0002F2A5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002F2AA 01                         byte_2C58A:	dc.b 1
0002F2AB F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002F2B0 01                         byte_2C590:	dc.b 1
0002F2B1 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002F2B6 01                         byte_2C596:	dc.b 1
0002F2B7 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002F2BC 01                         byte_2C59C:	dc.b 1
0002F2BD F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002F2C2 01                         byte_2C5A2:	dc.b 1
0002F2C3 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002F2C8 01                         byte_2C5A8:	dc.b 1
0002F2C9 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002F2CE 01                         byte_2C5AE:	dc.b 1
0002F2CF F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002F2D4 01                         byte_2C5B4:	dc.b 1
0002F2D5 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002F2DA 01                         byte_2C5BA:	dc.b 1
0002F2DB F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002F2E0 01                         byte_2C5C0:	dc.b 1
0002F2E1 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002F2E6 01                         byte_2C5C6:	dc.b 1
0002F2E7 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002F2EC 01                         byte_2C5CC:	dc.b 1
0002F2ED F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002F2F2 01                         byte_2C5D2:	dc.b 1
0002F2F3 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002F2F8 01                         byte_2C5D8:	dc.b 1
0002F2F9 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002F2FE 01                         byte_2C5DE:	dc.b 1
0002F2FF F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002F304                            		even
0002F304                            		even
0002F304                            ; ---------------------------------------------------------------------------
0002F304                            ; Compressed graphics - special stage
0002F304                            ; ---------------------------------------------------------------------------
0002F304                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002FC3C                            		even
0002FC3C                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002FD70                            		even
0002FD70                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00030A00                            		even
00030A00                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00030D00                            		even
00030D00                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000311F4                            		even
000311F4                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000312E2                            		even
000312E2                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000313B2                            		even
000313B2                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000314A8                            		even
000314A8                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031506                            		even
00031506                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031598                            		even
00031598                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003165A                            		even
0003165A                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031728                            		even
00031728                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000317F4                            		even
000317F4                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000318BC                            		even
000318BC                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00031986                            		even
00031986                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00031A56                            		even
00031A56                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00031C4A                            		even
00031C4A                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00031DB2                            		even
00031DB2                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00031E62                            		even
00031E62                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00031F3C                            		even
00031F3C                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00031FC0                            		even
00031FC0                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003213E                            		even
0003213E                            ; ---------------------------------------------------------------------------
0003213E                            ; Compressed graphics - GHZ stuff
0003213E                            ; ---------------------------------------------------------------------------
0003213E                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00032188                            		even
00032188                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000322A2                            		even
000322A2                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003238E                            		even
0003238E                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000323D6                            		even
000323D6                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032574                            		even
00032574                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000325F0                            		even
000325F0                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032804                            		even
00032804                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00032930                            		even
00032930                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00032A5E                            		even
00032A5E                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00032AFC                            		even
00032AFC                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00032B5C                            		even
00032B5C                            ; ---------------------------------------------------------------------------
00032B5C                            ; Compressed graphics - LZ stuff
00032B5C                            ; ---------------------------------------------------------------------------
00032B5C                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00032C80                            		even
00032C80                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033474                            		even
00033474                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000335F4                            		even
000335F4                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003375E                            		even
0003375E                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00033DB4                            		even
00033DB4                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00033E6A                            		even
00033E6A                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00033F0C                            		even
00033F0C                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00034068                            		even
00034068                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000340CC                            		even
000340CC                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003421E                            		even
0003421E                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034700                            		even
00034700                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00034870                            		even
00034870                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00034B28                            		even
00034B28                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00034C60                            		even
00034C60                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00034D8A                            		even
00034D8A                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00034E9A                            		even
00034E9A                            ; ---------------------------------------------------------------------------
00034E9A                            ; Compressed graphics - MZ stuff
00034E9A                            ; ---------------------------------------------------------------------------
00034E9A                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00035128                            		even
00035128                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000351E6                            		even
000351E6                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003529E                            		even
0003529E                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000352F2                            		even
000352F2                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000355D0                            		even
000355D0                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00035EE6                            		even
00035EE6                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003604A                            		even
0003604A                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000360D2                            		even
000360D2                            ; ---------------------------------------------------------------------------
000360D2                            ; Compressed graphics - SLZ stuff
000360D2                            ; ---------------------------------------------------------------------------
000360D2                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003630E                            		even
0003630E                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036454                            		even
00036454                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00036698                            		even
00036698                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000366FA                            		even
000366FA                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000367DC                            		even
000367DC                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000369BE                            		even
000369BE                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00036ACA                            		even
00036ACA                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00036B6E                            		even
00036B6E                            ; ---------------------------------------------------------------------------
00036B6E                            ; Compressed graphics - SYZ stuff
00036B6E                            ; ---------------------------------------------------------------------------
00036B6E                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00036CD8                            		even
00036CD8                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00036D3A                            		even
00036D3A                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00036E1C                            		even
00036E1C                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000370AA                            		even
000370AA                            ; ---------------------------------------------------------------------------
000370AA                            ; Compressed graphics - SBZ stuff
000370AA                            ; ---------------------------------------------------------------------------
000370AA                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000370FE                            		even
000370FE                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003739A                            		even
0003739A                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003759E                            		even
0003759E                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003773C                            		even
0003773C                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00037A6C                            		even
00037A6C                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00037C4A                            		even
00037C4A                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00037CA2                            		even
00037CA2                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00037E22                            		even
00037E22                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00037F20                            		even
00037F20                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000380AC                            		even
000380AC                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000380FC                            		even
000380FC                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00038154                            		even
00038154                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00038250                            		even
00038250                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038366                            		even
00038366                            ; ---------------------------------------------------------------------------
00038366                            ; Compressed graphics - enemies
00038366                            ; ---------------------------------------------------------------------------
00038366                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038726                            		even
00038726                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00038C14                            		even
00038C14                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00038FD6 00                         		even
00038FD6                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
000391BE                            		even
000391BE                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000398A8                            		even
000398A8                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039B10                            		even
00039B10                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039D9A                            		even
00039D9A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A2BE                            		even
0003A2BE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A4B4                            		even
0003A4B4                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003AAD2                            		even
0003AAD2                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003AEBA                            		even
0003AEBA                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B1B6                            		even
0003B1B6                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B3FE                            		even
0003B3FE                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003B696                            		even
0003B696                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003B874                            		even
0003B874                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003BA02                            		even
0003BA02                            ; ---------------------------------------------------------------------------
0003BA02                            ; Compressed graphics - various
0003BA02                            ; ---------------------------------------------------------------------------
0003BA02                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C010                            		even
0003C010                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C106                            		even
0003C106                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C20C                            		even
0003C20C                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C300                            		even
0003C300                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003C844                            		even
0003C844                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003CEAA                            		even
0003CEAA                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003CF5A                            		even
0003CF5A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D0EC                            		even
0003D0EC                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D1EE                            		even
0003D1EE                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D2CA                            		even
0003D2CA                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003D746                            		even
0003D746                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003D806                            		even
0003D806                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003D97A                            		even
0003D97A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003DC7C                            		even
0003DC7C                            ; ---------------------------------------------------------------------------
0003DC7C                            ; Compressed graphics - continue screen
0003DC7C                            ; ---------------------------------------------------------------------------
0003DC7C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003DF2C                            		even
0003DF2C                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E166                            		even
0003E166                            ; ---------------------------------------------------------------------------
0003E166                            ; Compressed graphics - animals
0003E166                            ; ---------------------------------------------------------------------------
0003E166                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E2BE                            		even
0003E2BE                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E41A                            		even
0003E41A                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E596                            		even
0003E596                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003E6B2                            		even
0003E6B2                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003E7E8                            		even
0003E7E8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003E922                            		even
0003E922                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003EA7E                            		even
0003EA7E                            ; ---------------------------------------------------------------------------
0003EA7E                            ; Compressed graphics - primary patterns and block mappings
0003EA7E                            ; ---------------------------------------------------------------------------
0003EA7E                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F392                            		even
0003F392                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00040CA0                            		even
00040CA0                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00042020                            		even
00042020                            Blk256_GHZ:	incbin	map256\ghz.bin
0004431E                            		even
0004431E                            Blk16_LZ:	incbin	map16\lz.bin
000445E8                            		even
000445E8                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00046074                            		even
00046074                            Blk256_LZ:	incbin	map256\lz.bin
00048858                            		even
00048858                            Blk16_MZ:	incbin	map16\mz.bin
00048FB4                            		even
00048FB4                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004B83C                            		even
0004B83C                            Blk256_MZ:	incbin	map256\mz.bin
0004CFC0                            		even
0004CFC0                            Blk16_SLZ:	incbin	map16\slz.bin
0004D2A6                            		even
0004D2A6                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E3C8                            		even
0004E3C8                            Blk256_SLZ:	incbin	map256\slz.bin
0004E582                            		even
0004E582                            Blk16_SYZ:	incbin	map16\syz.bin
0004EE16                            		even
0004EE16                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00052484                            		even
00052484                            Blk256_SYZ:	incbin	map256\syz.bin
00054806                            		even
00054806                            Blk16_SBZ:	incbin	map16\sbz.bin
000556A0                            		even
000556A0                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00057E4C                            		even
00057E4C                            Blk256_SBZ:	incbin	map256\sbz.bin
0005A89C                            		even
0005A89C                            ; ---------------------------------------------------------------------------
0005A89C                            ; Compressed graphics - bosses and ending sequence
0005A89C                            ; ---------------------------------------------------------------------------
0005A89C                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005B0B6 00                         		even
0005B0B6                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005B3A0                            		even
0005B3A0                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005BC24                            		even
0005BC24                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005C97A 00                         		even
0005C97A                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005D0E2                            		even
0005D0E2                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005D662                            		even
0005D662                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005D782                            		even
0005D782                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005D980                            		even
0005D980                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005EB5E                            		even
0005EB5E                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005F4A2                            		even
0005F4A2                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005F878                            		even
0005F878                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005FE08                            		even
0005FE08                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00060090                            		even
00060090                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006068E                            		even
0006068E                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00060916                            		even
00060916                            		incbin	misc\padding2.bin
00060A1A                            		even
00060A1A                            ; ---------------------------------------------------------------------------
00060A1A                            ; Collision data
00060A1A                            ; ---------------------------------------------------------------------------
00060A1A                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00060B1A                            		even
00060B1A                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00061B1A                            		even
00061B1A                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00062B1A                            		even
00062B1A                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00062CD2 00                         		even
00062CD2                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00062D9A                            		even
00062D9A                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00062F2A                            		even
00062F2A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006311E                            		even
0006311E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00063312                            		even
00063312                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006356A                            		even
0006356A                            ; ---------------------------------------------------------------------------
0006356A                            ; Special layouts
0006356A                            ; ---------------------------------------------------------------------------
0006356A                            SS_1:		incbin	sslayout\1.bin
000637E4                            		even
000637E4                            SS_2:		incbin	sslayout\2.bin
00063BF6                            		even
00063BF6                            SS_3:		incbin	sslayout\3.bin
00063F52                            		even
00063F52                            SS_4:		incbin	sslayout\4.bin
0006442C                            		even
0006442C                            SS_5:		incbin	sslayout\5.bin
000648FE                            		even
000648FE                            SS_6:		incbin	sslayout\6.bin
00064C0E                            		even
00064C0E                            ; ---------------------------------------------------------------------------
00064C0E                            ; Animated uncompressed graphics
00064C0E                            ; ---------------------------------------------------------------------------
00064C0E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00064E0E                            		even
00064E0E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006520E                            		even
0006520E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006568E                            		even
0006568E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006598E                            		even
0006598E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00065F8E                            		even
00065F8E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006628E                            		even
0006628E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00066D0E                            		even
00066D0E                            
00066D0E                            ; ---------------------------------------------------------------------------
00066D0E                            ; Level	layout index
00066D0E                            ; ---------------------------------------------------------------------------
00066D0E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00066D14 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00066D1A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00066D20 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00066D26 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00066D2C 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00066D32 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00066D38 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00066D3E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00066D44 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00066D4A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00066D50 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00066D56 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00066D5C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00066D62 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00066D68 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00066D6E 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00066D74 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00066D7A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00066D80 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00066D86 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00066D8C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00066D92 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00066D98 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00066D9E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00066DA4 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00066DAA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00066DB0 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00066DB6                            
00066DB6                            Level_GHZ1:	incbin	levels\ghz1.bin
00066EA8                            		even
00066EA8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00066EAC                            Level_GHZ2:	incbin	levels\ghz2.bin
00066F74                            		even
00066F74 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00066F78                            Level_GHZ3:	incbin	levels\ghz3.bin
0006709A                            		even
0006709A                            Level_GHZbg:	incbin	levels\ghzbg.bin
000670BC                            		even
000670BC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000670C0 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000670C4                            
000670C4                            Level_LZ1:	incbin	levels\lz1.bin
000671C6                            		even
000671C6                            Level_LZbg:	incbin	levels\lzbg.bin
000672C8                            		even
000672C8 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000672CC                            Level_LZ2:	incbin	levels\lz2.bin
00067366                            		even
00067366 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006736A                            Level_LZ3:	incbin	levels\lz3.bin
00067484                            		even
00067484 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00067488                            Level_SBZ3:	incbin	levels\sbz3.bin
00067542                            		even
00067542 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00067546                            
00067546                            Level_MZ1:	incbin	levels\mz1.bin
000675E4                            		even
000675E4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006765E                            		even
0006765E                            Level_MZ2:	incbin	levels\mz2.bin
00067702                            		even
00067702                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00067794                            		even
00067794 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00067798                            Level_MZ3:	incbin	levels\mz3.bin
0006787A                            		even
0006787A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006791E 00                         		even
0006791E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00067922 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00067926                            
00067926                            Level_SLZ1:	incbin	levels\slz1.bin
00067A38                            		even
00067A38                            Level_SLZbg:	incbin	levels\slzbg.bin
00067A52                            		even
00067A52                            Level_SLZ2:	incbin	levels\slz2.bin
00067B42                            		even
00067B42                            Level_SLZ3:	incbin	levels\slz3.bin
00067C5C                            		even
00067C5C 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00067C60                            
00067C60                            Level_SYZ1:	incbin	levels\syz1.bin
00067D1C 00                         		even
00067D1C                            Level_SYZbg:	incbin	levels\syzbg.bin
00067D56                            		even
00067D56 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00067D5A                            Level_SYZ2:	incbin	levels\syz2.bin
00067E5E                            		even
00067E5E 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00067E62                            Level_SYZ3:	incbin	levels\syz3.bin
00067FBC 00                         		even
00067FBC 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00067FC0 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00067FC4                            
00067FC4                            Level_SBZ1:	incbin	levels\sbz1.bin
000680E6                            		even
000680E6                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00068124                            		even
00068124                            Level_SBZ2:	incbin	levels\sbz2.bin
00068266                            		even
00068266                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000683D0                            		even
000683D0 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000683D4 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000683D8                            Level_End:	incbin	levels\ending.bin
00068408 00                         		even
00068408 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006840C                            
0006840C                            ; ---------------------------------------------------------------------------
0006840C                            ; Animated uncompressed giant ring graphics
0006840C                            ; ---------------------------------------------------------------------------
0006840C                            Art_BigRing:	incbin	artunc\bigring.bin
0006904C                            		even
0006904C                            
0006904C                            		incbin	misc\padding3.bin
000690E8                            		even
000690E8                            
000690E8                            ; ---------------------------------------------------------------------------
000690E8                            ; Sprite locations index
000690E8                            ; ---------------------------------------------------------------------------
000690E8 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000690EC 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
000690F0 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
000690F4 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000690F8 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
000690FC 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069100 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069104 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069108 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006910C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069110 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069114 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069118 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006911C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069120 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069124 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069128 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006912C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069130 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069134 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069138 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006913C 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069140 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069144 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069148 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006914C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069150 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069154 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00069158 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006915C 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00069160 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00069164 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00069168 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006916C 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00069170 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00069174 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00069178 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006917E                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000699A0                            		even
000699A0                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00069A54                            		even
00069A54                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006A498                            		even
0006A498                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006A840                            		even
0006A840                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006AB76                            		even
0006AB76                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006B0C2                            		even
0006B0C2                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006B55A                            		even
0006B55A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006B58C                            		even
0006B58C                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006B5BE                            		even
0006B5BE                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006B5F0                            		even
0006B5F0                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006B622                            		even
0006B622                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006B66C                            		even
0006B66C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006B6AA                            		even
0006B6AA                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006BA16                            		even
0006BA16                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006BEC0                            		even
0006BEC0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006C436                            		even
0006C436                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006C976                            		even
0006C976                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006CDDE                            		even
0006CDDE                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006D3C0                            		even
0006D3C0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006DA2C                            		even
0006DA2C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006DF96                            		even
0006DF96                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006E59C                            		even
0006E59C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006ECDA                            		even
0006ECDA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006F3B8                            		even
0006F3B8                            ObjPos_FZ:	incbin	objpos\fz.bin
0006F3CA                            		even
0006F3CA                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006F3FC                            		even
0006F3FC                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006F42E                            		even
0006F42E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006F460                            		even
0006F460                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006F492                            		even
0006F492                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006F4C4                            		even
0006F4C4                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006F4FC                            		even
0006F4FC                            ObjPos_End:	incbin	objpos\ending.bin
0006F658                            		even
0006F658 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006F65E                            ; ---------------------------------------------------------------------------
0006F65E                            		incbin	misc\padding4.bin
0006FC88                            		even
0006FC88                            
0006FC88 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006FC8C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006FC90 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006FC94 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006FC98 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006FC9C 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006FCA0                            ; ---------------------------------------------------------------------------
0006FCA0                            ; PSG instruments used in music
0006FCA0                            ; ---------------------------------------------------------------------------
0006FCA0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006FCAC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006FCB8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006FCC4                            PSG1:		incbin	sound\psg1.bin
0006FCDB                            PSG2:		incbin	sound\psg2.bin
0006FCE2                            PSG3:		incbin	sound\psg3.bin
0006FCF3                            PSG4:		incbin	sound\psg4.bin
0006FCFE                            PSG6:		incbin	sound\psg6.bin
0006FD0D                            PSG5:		incbin	sound\psg5.bin
0006FD37                            PSG7:		incbin	sound\psg7.bin
0006FD53                            PSG8:		incbin	sound\psg8.bin
0006FD7B                            PSG9:		incbin	sound\psg9.bin
0006FD8C                            
0006FD8C 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006FD94                            ; ---------------------------------------------------------------------------
0006FD94                            ; Music	Pointers
0006FD94                            ; ---------------------------------------------------------------------------
0006FD94 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006FD9C 0000 0000 0000 0000        		dc.l Music83, Music84
0006FDA4 0000 0000 0000 0000        		dc.l Music85, Music86
0006FDAC 0000 0000 0000 0000        		dc.l Music87, Music88
0006FDB4 0000 0000 0000 0000        		dc.l Music89, Music8A
0006FDBC 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006FDC4 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006FDCC 0000 0000 0000 0000        		dc.l Music8F, Music90
0006FDD4 0000 0000 0000 0000        		dc.l Music91, Music92
0006FDDC 0000 0000 0000 0000        		dc.l Music93, Music94
0006FDE4 0000 0000 0000 0000        		dc.l Music95, Music96
0006FDEC 0000 0000 0000 0000        		dc.l Music97, Music98
0006FDF4 0000 0000 0000 0000        		dc.l Music99, Music9A
0006FDFC 0000 0000 0000 0000        		dc.l Music9B, Music9C
0006FE04 0000 0000 0000 0000        		dc.l Music9D, Music9E
0006FE0C 0000 0000                  		dc.l Music9F
0006FE10                            ; ---------------------------------------------------------------------------
0006FE10                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006FE10                            ; ---------------------------------------------------------------------------
0006FE10 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006FE20 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006FE30 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006FE40 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006FE50 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006FE60 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006FE70 9090 9090                  		dc.b $90, $90, $90, $90
0006FE74                            
0006FE74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FE74                            
0006FE74                            
0006FE74                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006FE74 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006FE7C 4E71                       		nop	
0006FE7E 4E71                       		nop	
0006FE80 4E71                       		nop	
0006FE82                            
0006FE82                            loc_71B5A:
0006FE82 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006FE8A 66F6                       		bne.s	loc_71B5A
0006FE8C                            
0006FE8C 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006FE94 6700                       		beq.s	loc_71B82
0006FE96 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006FE9E 4E71                       		nop	
0006FEA0 4E71                       		nop	
0006FEA2 4E71                       		nop	
0006FEA4 4E71                       		nop	
0006FEA6 4E71                       		nop	
0006FEA8 60CA                       		bra.s	sub_71B4C
0006FEAA                            ; ===========================================================================
0006FEAA                            
0006FEAA                            loc_71B82:
0006FEAA 4DF9 00FF F000             		lea	($FFF000).l,a6
0006FEB0 422E 000E                  		clr.b	$E(a6)
0006FEB4 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006FEB8 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006FEBC 532E 0001                  		subq.b	#1,1(a6)
0006FEC0 6600                       		bne.s	loc_71B9E
0006FEC2 4EBA 0000                  		jsr	sub_7260C(pc)
0006FEC6                            
0006FEC6                            loc_71B9E:
0006FEC6 102E 0004                  		move.b	4(a6),d0
0006FECA 6700                       		beq.s	loc_71BA8
0006FECC 4EBA 0000                  		jsr	sub_72504(pc)
0006FED0                            
0006FED0                            loc_71BA8:
0006FED0 4A2E 0024                  		tst.b	$24(a6)
0006FED4 6700                       		beq.s	loc_71BB2
0006FED6 4EBA 0000                  		jsr	sub_7267C(pc)
0006FEDA                            
0006FEDA                            loc_71BB2:
0006FEDA 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006FEDE 6700                       		beq.s	loc_71BBC	; if not, branch
0006FEE0 4EBA 0000                  		jsr	Sound_Play(pc)
0006FEE4                            
0006FEE4                            loc_71BBC:
0006FEE4 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006FEEA 6700                       		beq.s	loc_71BC8
0006FEEC 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006FEF0                            
0006FEF0                            loc_71BC8:
0006FEF0 4BEE 0040                  		lea	$40(a6),a5
0006FEF4 4A15                       		tst.b	(a5)
0006FEF6 6A00                       		bpl.s	loc_71BD4
0006FEF8 4EBA 0000                  		jsr	sub_71C4E(pc)
0006FEFC                            
0006FEFC                            loc_71BD4:
0006FEFC 422E 0008                  		clr.b	8(a6)
0006FF00 7E05                       		moveq	#5,d7
0006FF02                            
0006FF02                            loc_71BDA:
0006FF02 DAFC 0030                  		adda.w	#$30,a5
0006FF06 4A15                       		tst.b	(a5)
0006FF08 6A00                       		bpl.s	loc_71BE6
0006FF0A 4EBA 0000                  		jsr	sub_71CCA(pc)
0006FF0E                            
0006FF0E                            loc_71BE6:
0006FF0E 51CF FFF2                  		dbf	d7,loc_71BDA
0006FF12                            
0006FF12 7E02                       		moveq	#2,d7
0006FF14                            
0006FF14                            loc_71BEC:
0006FF14 DAFC 0030                  		adda.w	#$30,a5
0006FF18 4A15                       		tst.b	(a5)
0006FF1A 6A00                       		bpl.s	loc_71BF8
0006FF1C 4EBA 0000                  		jsr	sub_72850(pc)
0006FF20                            
0006FF20                            loc_71BF8:
0006FF20 51CF FFF2                  		dbf	d7,loc_71BEC
0006FF24                            
0006FF24 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006FF2A 7E02                       		moveq	#2,d7
0006FF2C                            
0006FF2C                            loc_71C04:
0006FF2C DAFC 0030                  		adda.w	#$30,a5
0006FF30 4A15                       		tst.b	(a5)
0006FF32 6A00                       		bpl.s	loc_71C10
0006FF34 4EBA 0000                  		jsr	sub_71CCA(pc)
0006FF38                            
0006FF38                            loc_71C10:
0006FF38 51CF FFF2                  		dbf	d7,loc_71C04
0006FF3C                            
0006FF3C 7E02                       		moveq	#2,d7
0006FF3E                            
0006FF3E                            loc_71C16:
0006FF3E DAFC 0030                  		adda.w	#$30,a5
0006FF42 4A15                       		tst.b	(a5)
0006FF44 6A00                       		bpl.s	loc_71C22
0006FF46 4EBA 0000                  		jsr	sub_72850(pc)
0006FF4A                            
0006FF4A                            loc_71C22:
0006FF4A 51CF FFF2                  		dbf	d7,loc_71C16
0006FF4E 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006FF54 DAFC 0030                  		adda.w	#$30,a5
0006FF58 4A15                       		tst.b	(a5)
0006FF5A 6A00                       		bpl.s	loc_71C38
0006FF5C 4EBA 0000                  		jsr	sub_71CCA(pc)
0006FF60                            
0006FF60                            loc_71C38:
0006FF60 DAFC 0030                  		adda.w	#$30,a5
0006FF64 4A15                       		tst.b	(a5)
0006FF66 6A00                       		bpl.s	loc_71C44
0006FF68 4EBA 0000                  		jsr	sub_72850(pc)
0006FF6C                            
0006FF6C                            loc_71C44:
0006FF6C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006FF74 4E75                       		rts	
0006FF76                            ; End of function sub_71B4C
0006FF76                            
0006FF76                            
0006FF76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FF76                            
0006FF76                            
0006FF76                            sub_71C4E:				; XREF: sub_71B4C
0006FF76 532D 000E                  		subq.b	#1,$E(a5)
0006FF7A 6600                       		bne.s	locret_71CAA
0006FF7C 1D7C 0080 0008             		move.b	#$80,8(a6)
0006FF82 286D 0004                  		movea.l	4(a5),a4
0006FF86                            
0006FF86                            loc_71C5E:
0006FF86 7A00                       		moveq	#0,d5
0006FF88 1A1C                       		move.b	(a4)+,d5
0006FF8A 0C05 00E0                  		cmpi.b	#-$20,d5
0006FF8E 6500                       		bcs.s	loc_71C6E
0006FF90 4EBA 0000                  		jsr	sub_72A5A(pc)
0006FF94 60F0                       		bra.s	loc_71C5E
0006FF96                            ; ===========================================================================
0006FF96                            
0006FF96                            loc_71C6E:
0006FF96 4A05                       		tst.b	d5
0006FF98 6A00                       		bpl.s	loc_71C84
0006FF9A 1B45 0010                  		move.b	d5,$10(a5)
0006FF9E 1A1C                       		move.b	(a4)+,d5
0006FFA0 6A00                       		bpl.s	loc_71C84
0006FFA2 534C                       		subq.w	#1,a4
0006FFA4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006FFAA 6000                       		bra.s	loc_71C88
0006FFAC                            ; ===========================================================================
0006FFAC                            
0006FFAC                            loc_71C84:
0006FFAC 4EBA 0000                  		jsr	sub_71D40(pc)
0006FFB0                            
0006FFB0                            loc_71C88:
0006FFB0 2B4C 0004                  		move.l	a4,4(a5)
0006FFB4 0815 0002                  		btst	#2,(a5)
0006FFB8 6600                       		bne.s	locret_71CAA
0006FFBA 7000                       		moveq	#0,d0
0006FFBC 102D 0010                  		move.b	$10(a5),d0
0006FFC0 0C00 0080                  		cmpi.b	#$80,d0
0006FFC4 6700                       		beq.s	locret_71CAA
0006FFC6 0800 0003                  		btst	#3,d0
0006FFCA 6600                       		bne.s	loc_71CAC
0006FFCC 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006FFD2                            
0006FFD2                            locret_71CAA:
0006FFD2 4E75                       		rts	
0006FFD4                            ; ===========================================================================
0006FFD4                            
0006FFD4                            loc_71CAC:
0006FFD4 0400 0088                  		subi.b	#$88,d0
0006FFD8 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006FFDC 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006FFE2 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006FFEA 4E75                       		rts	
0006FFEC                            ; End of function sub_71C4E
0006FFEC                            
0006FFEC                            ; ===========================================================================
0006FFEC 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006FFF2                            
0006FFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006FFF2                            
0006FFF2                            
0006FFF2                            sub_71CCA:				; XREF: sub_71B4C
0006FFF2 532D 000E                  		subq.b	#1,$E(a5)
0006FFF6 6600                       		bne.s	loc_71CE0
0006FFF8 0895 0004                  		bclr	#4,(a5)
0006FFFC 4EBA 0000                  		jsr	sub_71CEC(pc)
00070000 4EBA 0000                  		jsr	sub_71E18(pc)
00070004 6000 0000                  		bra.w	loc_726E2
00070008                            ; ===========================================================================
00070008                            
00070008                            loc_71CE0:
00070008 4EBA 0000                  		jsr	sub_71D9E(pc)
0007000C 4EBA 0000                  		jsr	sub_71DC6(pc)
00070010 6000 0000                  		bra.w	loc_71E24
00070014                            ; End of function sub_71CCA
00070014                            
00070014                            
00070014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070014                            
00070014                            
00070014                            sub_71CEC:				; XREF: sub_71CCA
00070014 286D 0004                  		movea.l	4(a5),a4
00070018 0895 0001                  		bclr	#1,(a5)
0007001C                            
0007001C                            loc_71CF4:
0007001C 7A00                       		moveq	#0,d5
0007001E 1A1C                       		move.b	(a4)+,d5
00070020 0C05 00E0                  		cmpi.b	#-$20,d5
00070024 6500                       		bcs.s	loc_71D04
00070026 4EBA 0000                  		jsr	sub_72A5A(pc)
0007002A 60F0                       		bra.s	loc_71CF4
0007002C                            ; ===========================================================================
0007002C                            
0007002C                            loc_71D04:
0007002C 4EBA 0000                  		jsr	sub_726FE(pc)
00070030 4A05                       		tst.b	d5
00070032 6A00                       		bpl.s	loc_71D1A
00070034 4EBA 0000                  		jsr	sub_71D22(pc)
00070038 1A1C                       		move.b	(a4)+,d5
0007003A 6A00                       		bpl.s	loc_71D1A
0007003C 534C                       		subq.w	#1,a4
0007003E 6000 0000                  		bra.w	sub_71D60
00070042                            ; ===========================================================================
00070042                            
00070042                            loc_71D1A:
00070042 4EBA 0000                  		jsr	sub_71D40(pc)
00070046 6000 0000                  		bra.w	sub_71D60
0007004A                            ; End of function sub_71CEC
0007004A                            
0007004A                            
0007004A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007004A                            
0007004A                            
0007004A                            sub_71D22:				; XREF: sub_71CEC
0007004A 0405 0080                  		subi.b	#$80,d5
0007004E 6700                       		beq.s	loc_71D58
00070050 DA2D 0008                  		add.b	8(a5),d5
00070054 0245 007F                  		andi.w	#$7F,d5
00070058 E34D                       		lsl.w	#1,d5
0007005A 41FA 0000                  		lea	word_72790(pc),a0
0007005E 3C30 5000                  		move.w	(a0,d5.w),d6
00070062 3B46 0010                  		move.w	d6,$10(a5)
00070066 4E75                       		rts	
00070068                            ; End of function sub_71D22
00070068                            
00070068                            
00070068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070068                            
00070068                            
00070068                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00070068 1005                       		move.b	d5,d0
0007006A 122D 0002                  		move.b	2(a5),d1
0007006E                            
0007006E                            loc_71D46:
0007006E 5301                       		subq.b	#1,d1
00070070 6700                       		beq.s	loc_71D4E
00070072 D005                       		add.b	d5,d0
00070074 60F8                       		bra.s	loc_71D46
00070076                            ; ===========================================================================
00070076                            
00070076                            loc_71D4E:
00070076 1B40 000F                  		move.b	d0,$F(a5)
0007007A 1B40 000E                  		move.b	d0,$E(a5)
0007007E 4E75                       		rts	
00070080                            ; End of function sub_71D40
00070080                            
00070080                            ; ===========================================================================
00070080                            
00070080                            loc_71D58:				; XREF: sub_71D22
00070080 08D5 0001                  		bset	#1,(a5)
00070084 426D 0010                  		clr.w	$10(a5)
00070088                            
00070088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070088                            
00070088                            
00070088                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00070088 2B4C 0004                  		move.l	a4,4(a5)
0007008C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00070092 0815 0004                  		btst	#4,(a5)
00070096 6600                       		bne.s	locret_71D9C
00070098 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007009E 422D 000C                  		clr.b	$C(a5)
000700A2 0815 0003                  		btst	#3,(a5)
000700A6 6700                       		beq.s	locret_71D9C
000700A8 206D 0014                  		movea.l	$14(a5),a0
000700AC 1B58 0018                  		move.b	(a0)+,$18(a5)
000700B0 1B58 0019                  		move.b	(a0)+,$19(a5)
000700B4 1B58 001A                  		move.b	(a0)+,$1A(a5)
000700B8 1018                       		move.b	(a0)+,d0
000700BA E208                       		lsr.b	#1,d0
000700BC 1B40 001B                  		move.b	d0,$1B(a5)
000700C0 426D 001C                  		clr.w	$1C(a5)
000700C4                            
000700C4                            locret_71D9C:
000700C4 4E75                       		rts	
000700C6                            ; End of function sub_71D60
000700C6                            
000700C6                            
000700C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000700C6                            
000700C6                            
000700C6                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000700C6 4A2D 0012                  		tst.b	$12(a5)
000700CA 6700                       		beq.s	locret_71DC4
000700CC 532D 0012                  		subq.b	#1,$12(a5)
000700D0 6600                       		bne.s	locret_71DC4
000700D2 08D5 0001                  		bset	#1,(a5)
000700D6 4A2D 0001                  		tst.b	1(a5)
000700DA 6B00 0000                  		bmi.w	loc_71DBE
000700DE 4EBA 0000                  		jsr	sub_726FE(pc)
000700E2 584F                       		addq.w	#4,sp
000700E4 4E75                       		rts	
000700E6                            ; ===========================================================================
000700E6                            
000700E6                            loc_71DBE:
000700E6 4EBA 0000                  		jsr	sub_729A0(pc)
000700EA 584F                       		addq.w	#4,sp
000700EC                            
000700EC                            locret_71DC4:
000700EC 4E75                       		rts	
000700EE                            ; End of function sub_71D9E
000700EE                            
000700EE                            
000700EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000700EE                            
000700EE                            
000700EE                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000700EE 584F                       		addq.w	#4,sp
000700F0 0815 0003                  		btst	#3,(a5)
000700F4 6700                       		beq.s	locret_71E16
000700F6 4A2D 0018                  		tst.b	$18(a5)
000700FA 6700                       		beq.s	loc_71DDA
000700FC 532D 0018                  		subq.b	#1,$18(a5)
00070100 4E75                       		rts	
00070102                            ; ===========================================================================
00070102                            
00070102                            loc_71DDA:
00070102 532D 0019                  		subq.b	#1,$19(a5)
00070106 6700                       		beq.s	loc_71DE2
00070108 4E75                       		rts	
0007010A                            ; ===========================================================================
0007010A                            
0007010A                            loc_71DE2:
0007010A 206D 0014                  		movea.l	$14(a5),a0
0007010E 1B68 0001 0019             		move.b	1(a0),$19(a5)
00070114 4A2D 001B                  		tst.b	$1B(a5)
00070118 6600                       		bne.s	loc_71DFE
0007011A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00070120 442D 001A                  		neg.b	$1A(a5)
00070124 4E75                       		rts	
00070126                            ; ===========================================================================
00070126                            
00070126                            loc_71DFE:
00070126 532D 001B                  		subq.b	#1,$1B(a5)
0007012A 1C2D 001A                  		move.b	$1A(a5),d6
0007012E 4886                       		ext.w	d6
00070130 DC6D 001C                  		add.w	$1C(a5),d6
00070134 3B46 001C                  		move.w	d6,$1C(a5)
00070138 DC6D 0010                  		add.w	$10(a5),d6
0007013C 594F                       		subq.w	#4,sp
0007013E                            
0007013E                            locret_71E16:
0007013E 4E75                       		rts	
00070140                            ; End of function sub_71DC6
00070140                            
00070140                            
00070140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070140                            
00070140                            
00070140                            sub_71E18:				; XREF: sub_71CCA
00070140 0815 0001                  		btst	#1,(a5)
00070144 6600                       		bne.s	locret_71E48
00070146 3C2D 0010                  		move.w	$10(a5),d6
0007014A 6700                       		beq.s	loc_71E4A
0007014C                            
0007014C                            loc_71E24:				; XREF: sub_71CCA
0007014C 102D 001E                  		move.b	$1E(a5),d0
00070150 4880                       		ext.w	d0
00070152 DC40                       		add.w	d0,d6
00070154 0815 0002                  		btst	#2,(a5)
00070158 6600                       		bne.s	locret_71E48
0007015A 3206                       		move.w	d6,d1
0007015C E049                       		lsr.w	#8,d1
0007015E 103C 00A4                  		move.b	#-$5C,d0
00070162 4EBA 0000                  		jsr	sub_72722(pc)
00070166 1206                       		move.b	d6,d1
00070168 103C 00A0                  		move.b	#-$60,d0
0007016C 4EBA 0000                  		jsr	sub_72722(pc)
00070170                            
00070170                            locret_71E48:
00070170 4E75                       		rts	
00070172                            ; ===========================================================================
00070172                            
00070172                            loc_71E4A:
00070172 08D5 0001                  		bset	#1,(a5)
00070176 4E75                       		rts	
00070178                            ; End of function sub_71E18
00070178                            
00070178                            ; ===========================================================================
00070178                            
00070178                            loc_71E50:				; XREF: sub_71B4C
00070178 6B00                       		bmi.s	loc_71E94
0007017A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00070180 6700 0000                  		beq.w	loc_71EFE
00070184 1D7C 0002 0003             		move.b	#2,3(a6)
0007018A 7602                       		moveq	#2,d3
0007018C 103C 00B4                  		move.b	#-$4C,d0
00070190 7200                       		moveq	#0,d1
00070192                            
00070192                            loc_71E6A:
00070192 4EBA 0000                  		jsr	sub_7272E(pc)
00070196 4EBA 0000                  		jsr	sub_72764(pc)
0007019A 5200                       		addq.b	#1,d0
0007019C 51CB FFF4                  		dbf	d3,loc_71E6A
000701A0                            
000701A0 7602                       		moveq	#2,d3
000701A2 7028                       		moveq	#$28,d0
000701A4                            
000701A4                            loc_71E7C:
000701A4 1203                       		move.b	d3,d1
000701A6 4EBA 0000                  		jsr	sub_7272E(pc)
000701AA 5801                       		addq.b	#4,d1
000701AC 4EBA 0000                  		jsr	sub_7272E(pc)
000701B0 51CB FFF2                  		dbf	d3,loc_71E7C
000701B4                            
000701B4 4EBA 0000                  		jsr	sub_729B6(pc)
000701B8 6000 FDB2                  		bra.w	loc_71C44
000701BC                            ; ===========================================================================
000701BC                            
000701BC                            loc_71E94:				; XREF: loc_71E50
000701BC 422E 0003                  		clr.b	3(a6)
000701C0 7630                       		moveq	#$30,d3
000701C2 4BEE 0040                  		lea	$40(a6),a5
000701C6 7806                       		moveq	#6,d4
000701C8                            
000701C8                            loc_71EA0:
000701C8 0815 0007                  		btst	#7,(a5)
000701CC 6700                       		beq.s	loc_71EB8
000701CE 0815 0002                  		btst	#2,(a5)
000701D2 6600                       		bne.s	loc_71EB8
000701D4 103C 00B4                  		move.b	#-$4C,d0
000701D8 122D 000A                  		move.b	$A(a5),d1
000701DC 4EBA 0000                  		jsr	sub_72722(pc)
000701E0                            
000701E0                            loc_71EB8:
000701E0 DAC3                       		adda.w	d3,a5
000701E2 51CC FFE4                  		dbf	d4,loc_71EA0
000701E6                            
000701E6 4BEE 0220                  		lea	$220(a6),a5
000701EA 7802                       		moveq	#2,d4
000701EC                            
000701EC                            loc_71EC4:
000701EC 0815 0007                  		btst	#7,(a5)
000701F0 6700                       		beq.s	loc_71EDC
000701F2 0815 0002                  		btst	#2,(a5)
000701F6 6600                       		bne.s	loc_71EDC
000701F8 103C 00B4                  		move.b	#-$4C,d0
000701FC 122D 000A                  		move.b	$A(a5),d1
00070200 4EBA 0000                  		jsr	sub_72722(pc)
00070204                            
00070204                            loc_71EDC:
00070204 DAC3                       		adda.w	d3,a5
00070206 51CC FFE4                  		dbf	d4,loc_71EC4
0007020A                            
0007020A 4BEE 0340                  		lea	$340(a6),a5
0007020E 0815 0007                  		btst	#7,(a5)
00070212 6700                       		beq.s	loc_71EFE
00070214 0815 0002                  		btst	#2,(a5)
00070218 6600                       		bne.s	loc_71EFE
0007021A 103C 00B4                  		move.b	#-$4C,d0
0007021E 122D 000A                  		move.b	$A(a5),d1
00070222 4EBA 0000                  		jsr	sub_72722(pc)
00070226                            
00070226                            loc_71EFE:
00070226 6000 FD44                  		bra.w	loc_71C44
0007022A                            
0007022A                            ; ---------------------------------------------------------------------------
0007022A                            ; Subroutine to	play a sound or	music track
0007022A                            ; ---------------------------------------------------------------------------
0007022A                            
0007022A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007022A                            
0007022A                            
0007022A                            Sound_Play:				; XREF: sub_71B4C
0007022A 2079 0006 FC88             		movea.l	(Go_SoundTypes).l,a0
00070230 43EE 000A                  		lea	$A(a6),a1	; load music track number
00070234 1616                       		move.b	0(a6),d3
00070236 7802                       		moveq	#2,d4
00070238                            
00070238                            loc_71F12:
00070238 1011                       		move.b	(a1),d0		; move track number to d0
0007023A 1200                       		move.b	d0,d1
0007023C 4219                       		clr.b	(a1)+
0007023E 0400 0081                  		subi.b	#$81,d0
00070242 6500                       		bcs.s	loc_71F3E
00070244 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007024A 6700                       		beq.s	loc_71F2C
0007024C 1D41 000A                  		move.b	d1,$A(a6)
00070250 6000                       		bra.s	loc_71F3E
00070252                            ; ===========================================================================
00070252                            
00070252                            loc_71F2C:
00070252 0240 007F                  		andi.w	#$7F,d0
00070256 1430 0000                  		move.b	(a0,d0.w),d2
0007025A B403                       		cmp.b	d3,d2
0007025C 6500                       		bcs.s	loc_71F3E
0007025E 1602                       		move.b	d2,d3
00070260 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00070264                            
00070264                            loc_71F3E:
00070264 51CC FFD2                  		dbf	d4,loc_71F12
00070268                            
00070268 4A03                       		tst.b	d3
0007026A 6B00                       		bmi.s	locret_71F4A
0007026C 1C83                       		move.b	d3,0(a6)
0007026E                            
0007026E                            locret_71F4A:
0007026E 4E75                       		rts	
00070270                            ; End of function Sound_Play
00070270                            
00070270                            
00070270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070270                            
00070270                            
00070270                            Sound_ChkValue:				; XREF: sub_71B4C
00070270 7E00                       		moveq	#0,d7
00070272 1E2E 0009                  		move.b	9(a6),d7
00070276 6700 0000                  		beq.w	Sound_E4
0007027A 6A00                       		bpl.s	locret_71F8C
0007027C 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00070282 0C07 009F                  		cmpi.b	#$9F,d7
00070286 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007028A 0C07 00A0                  		cmpi.b	#$A0,d7
0007028E 6500 0000                  		bcs.w	locret_71F8C
00070292 0C07 00CF                  		cmpi.b	#$CF,d7
00070296 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007029A 0C07 00D0                  		cmpi.b	#$D0,d7
0007029E 6500 0000                  		bcs.w	locret_71F8C
000702A2 0C07 00E0                  		cmpi.b	#$E0,d7
000702A6 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000702AA 0C07 00E5                  		cmpi.b	#$E5,d7
000702AE 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000702B0                            
000702B0                            locret_71F8C:
000702B0 4E75                       		rts	
000702B2                            ; ===========================================================================
000702B2                            
000702B2                            Sound_E0toE5				; XREF: Sound_ChkValue
000702B2 0407 00E0                  		subi.b	#$E0,d7
000702B6 E54F                       		lsl.w	#2,d7
000702B8 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000702BC                            ; ===========================================================================
000702BC                            
000702BC                            Sound_ExIndex:
000702BC 6000 0000                  		bra.w	Sound_E0
000702C0                            ; ===========================================================================
000702C0 6000 0000                  		bra.w	Sound_E1
000702C4                            ; ===========================================================================
000702C4 6000 0000                  		bra.w	Sound_E2
000702C8                            ; ===========================================================================
000702C8 6000 0000                  		bra.w	Sound_E3
000702CC                            ; ===========================================================================
000702CC 6000 0000                  		bra.w	Sound_E4
000702D0                            ; ===========================================================================
000702D0 6000 0000                  		bra.w	Sound_E5
000702D4                            ; ===========================================================================
000702D4                            ; ---------------------------------------------------------------------------
000702D4                            ; Play "Say-gaa" PCM sound
000702D4                            ; ---------------------------------------------------------------------------
000702D4                            
000702D4                            Sound_E1:				  
000702D4 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000702DA 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000702E0 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000702E8                            PlayPCM_Loop:	  
000702E8 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000702EE 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000702F2 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000702F6 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000702F8 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000702FA 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000702FE 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00070304 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00070308 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007030E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00070310 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00070312                            return_PlayPCM: 
00070312 584F                       		addq.w	#4,sp 
00070314 4E75                       		rts
00070316                            		
00070316                            ; ---------------------------------------------------------------------------
00070316                            ; Play you are an idiot pcm sound
00070316                            ; ---------------------------------------------------------------------------
00070316                            
00070316                            Sound_E5:  
00070316 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007031C 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00070322 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007032A                            PlayPCM_LoopE5:	  
0007032A                            
0007032A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00070330                            		
00070330 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00070334                            		
00070334 1038 FE24                  		move.b	($FFFFFE24).w,d0
00070338 0200 000F                  		andi.b	#$F,d0
0007033C 6700                       		beq.s	SfxE5SwapPalette
0007033E                            		
0007033E 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00070342 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00070346 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00070348 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007034A 60DE                       		bra.s	PlayPCM_LoopE5
0007034C                            		
0007034C                            SfxE5SwapPalette:
0007034C                            		
0007034C                            		
0007034C                            		
0007034C 4BF9 00C0 0004             		lea	($C00004).l,a5
00070352 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00070358                            		
00070358                            		
00070358 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007035E 6700                       		beq.s	@not_black
00070360 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00070366 6000                       		bra.s	@merge
00070368                            	@not_black:
00070368 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007036E                            	@merge:
0007036E 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00070372 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00070376 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007037C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00070380                            		
00070380 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00070384 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00070388 60A0                       		bra.s	PlayPCM_LoopE5
0007038A                            		
0007038A                            ; ===========================================================================
0007038A                            ; ---------------------------------------------------------------------------
0007038A                            ; Play music track $81-$9F
0007038A                            ; ---------------------------------------------------------------------------
0007038A                            
0007038A                            Sound_81to9F:				; XREF: Sound_ChkValue
0007038A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007038E 6600                       		bne.s	loc_72024	; if not, branch
00070390 4A2E 0027                  		tst.b	$27(a6)
00070394 6600 0000                  		bne.w	loc_721B6
00070398 4BEE 0040                  		lea	$40(a6),a5
0007039C 7009                       		moveq	#9,d0
0007039E                            
0007039E                            loc_71FE6:
0007039E 0895 0002                  		bclr	#2,(a5)
000703A2 DAFC 0030                  		adda.w	#$30,a5
000703A6 51C8 FFF6                  		dbf	d0,loc_71FE6
000703AA                            
000703AA 4BEE 0220                  		lea	$220(a6),a5
000703AE 7005                       		moveq	#5,d0
000703B0                            
000703B0                            loc_71FF8:
000703B0 0895 0007                  		bclr	#7,(a5)
000703B4 DAFC 0030                  		adda.w	#$30,a5
000703B8 51C8 FFF6                  		dbf	d0,loc_71FF8
000703BC 4216                       		clr.b	0(a6)
000703BE 204E                       		movea.l	a6,a0
000703C0 43EE 03A0                  		lea	$3A0(a6),a1
000703C4 303C 0087                  		move.w	#$87,d0
000703C8                            
000703C8                            loc_72012:
000703C8 22D8                       		move.l	(a0)+,(a1)+
000703CA 51C8 FFFC                  		dbf	d0,loc_72012
000703CE                            
000703CE 1D7C 0080 0027             		move.b	#$80,$27(a6)
000703D4 4216                       		clr.b	0(a6)
000703D6 6000                       		bra.s	loc_7202C
000703D8                            ; ===========================================================================
000703D8                            
000703D8                            loc_72024:
000703D8 422E 0027                  		clr.b	$27(a6)
000703DC 422E 0026                  		clr.b	$26(a6)
000703E0                            
000703E0                            loc_7202C:
000703E0 4EBA 0000                  		jsr	sub_725CA(pc)
000703E4 2879 0006 FC98             		movea.l	(off_719A0).l,a4
000703EA 0407 0081                  		subi.b	#$81,d7
000703EE 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000703F4 2879 0006 FC90             		movea.l	(Go_MusicIndex).l,a4
000703FA E54F                       		lsl.w	#2,d7
000703FC 2874 7000                  		movea.l	(a4,d7.w),a4
00070400 7000                       		moveq	#0,d0
00070402 3014                       		move.w	(a4),d0
00070404 D08C                       		add.l	a4,d0
00070406 2D40 0018                  		move.l	d0,$18(a6)
0007040A 102C 0005                  		move.b	5(a4),d0
0007040E 1D40 0028                  		move.b	d0,$28(a6)
00070412 4A2E 002A                  		tst.b	$2A(a6)
00070416 6700                       		beq.s	loc_72068
00070418 102E 0029                  		move.b	$29(a6),d0
0007041C                            
0007041C                            loc_72068:
0007041C 1D40 0002                  		move.b	d0,2(a6)
00070420 1D40 0001                  		move.b	d0,1(a6)
00070424 7200                       		moveq	#0,d1
00070426 264C                       		movea.l	a4,a3
00070428 5C4C                       		addq.w	#6,a4
0007042A 7E00                       		moveq	#0,d7
0007042C 1E2B 0002                  		move.b	2(a3),d7
00070430 6700 0000                  		beq.w	loc_72114
00070434 5307                       		subq.b	#1,d7
00070436 123C 00C0                  		move.b	#-$40,d1
0007043A 182B 0004                  		move.b	4(a3),d4
0007043E 7C30                       		moveq	#$30,d6
00070440 1A3C 0001                  		move.b	#1,d5
00070444 43EE 0040                  		lea	$40(a6),a1
00070448 45FA 0000                  		lea	byte_721BA(pc),a2
0007044C                            
0007044C                            loc_72098:
0007044C 08D1 0007                  		bset	#7,(a1)
00070450 135A 0001                  		move.b	(a2)+,1(a1)
00070454 1344 0002                  		move.b	d4,2(a1)
00070458 1346 000D                  		move.b	d6,$D(a1)
0007045C 1341 000A                  		move.b	d1,$A(a1)
00070460 1345 000E                  		move.b	d5,$E(a1)
00070464 7000                       		moveq	#0,d0
00070466 301C                       		move.w	(a4)+,d0
00070468 D08B                       		add.l	a3,d0
0007046A 2340 0004                  		move.l	d0,4(a1)
0007046E 335C 0008                  		move.w	(a4)+,8(a1)
00070472 D2C6                       		adda.w	d6,a1
00070474 51CF FFD6                  		dbf	d7,loc_72098
00070478 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007047E 6600                       		bne.s	loc_720D8
00070480 702B                       		moveq	#$2B,d0
00070482 7200                       		moveq	#0,d1
00070484 4EBA 0000                  		jsr	sub_7272E(pc)
00070488 6000 0000                  		bra.w	loc_72114
0007048C                            ; ===========================================================================
0007048C                            
0007048C                            loc_720D8:
0007048C 7028                       		moveq	#$28,d0
0007048E 7206                       		moveq	#6,d1
00070490 4EBA 0000                  		jsr	sub_7272E(pc)
00070494 103C 0042                  		move.b	#$42,d0
00070498 727F                       		moveq	#$7F,d1
0007049A 4EBA 0000                  		jsr	sub_72764(pc)
0007049E 103C 004A                  		move.b	#$4A,d0
000704A2 727F                       		moveq	#$7F,d1
000704A4 4EBA 0000                  		jsr	sub_72764(pc)
000704A8 103C 0046                  		move.b	#$46,d0
000704AC 727F                       		moveq	#$7F,d1
000704AE 4EBA 0000                  		jsr	sub_72764(pc)
000704B2 103C 004E                  		move.b	#$4E,d0
000704B6 727F                       		moveq	#$7F,d1
000704B8 4EBA 0000                  		jsr	sub_72764(pc)
000704BC 103C 00B6                  		move.b	#-$4A,d0
000704C0 123C 00C0                  		move.b	#-$40,d1
000704C4 4EBA 0000                  		jsr	sub_72764(pc)
000704C8                            
000704C8                            loc_72114:
000704C8 7E00                       		moveq	#0,d7
000704CA 1E2B 0003                  		move.b	3(a3),d7
000704CE 6700                       		beq.s	loc_72154
000704D0 5307                       		subq.b	#1,d7
000704D2 43EE 0190                  		lea	$190(a6),a1
000704D6 45FA 0000                  		lea	byte_721C2(pc),a2
000704DA                            
000704DA                            loc_72126:
000704DA 08D1 0007                  		bset	#7,(a1)
000704DE 135A 0001                  		move.b	(a2)+,1(a1)
000704E2 1344 0002                  		move.b	d4,2(a1)
000704E6 1346 000D                  		move.b	d6,$D(a1)
000704EA 1345 000E                  		move.b	d5,$E(a1)
000704EE 7000                       		moveq	#0,d0
000704F0 301C                       		move.w	(a4)+,d0
000704F2 D08B                       		add.l	a3,d0
000704F4 2340 0004                  		move.l	d0,4(a1)
000704F8 335C 0008                  		move.w	(a4)+,8(a1)
000704FC 101C                       		move.b	(a4)+,d0
000704FE 135C 000B                  		move.b	(a4)+,$B(a1)
00070502 D2C6                       		adda.w	d6,a1
00070504 51CF FFD4                  		dbf	d7,loc_72126
00070508                            
00070508                            loc_72154:
00070508 43EE 0220                  		lea	$220(a6),a1
0007050C 7E05                       		moveq	#5,d7
0007050E                            
0007050E                            loc_7215A:
0007050E 4A11                       		tst.b	(a1)
00070510 6A00 0000                  		bpl.w	loc_7217C
00070514 7000                       		moveq	#0,d0
00070516 1029 0001                  		move.b	1(a1),d0
0007051A 6B00                       		bmi.s	loc_7216E
0007051C 5500                       		subq.b	#2,d0
0007051E E508                       		lsl.b	#2,d0
00070520 6000                       		bra.s	loc_72170
00070522                            ; ===========================================================================
00070522                            
00070522                            loc_7216E:
00070522 E608                       		lsr.b	#3,d0
00070524                            
00070524                            loc_72170:
00070524 41FA 0000                  		lea	dword_722CC(pc),a0
00070528 2070 0000                  		movea.l	(a0,d0.w),a0
0007052C 08D0 0002                  		bset	#2,(a0)
00070530                            
00070530                            loc_7217C:
00070530 D2C6                       		adda.w	d6,a1
00070532 51CF FFDA                  		dbf	d7,loc_7215A
00070536                            
00070536 4A6E 0340                  		tst.w	$340(a6)
0007053A 6A00                       		bpl.s	loc_7218E
0007053C 08EE 0002 0100             		bset	#2,$100(a6)
00070542                            
00070542                            loc_7218E:
00070542 4A6E 0370                  		tst.w	$370(a6)
00070546 6A00                       		bpl.s	loc_7219A
00070548 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007054E                            
0007054E                            loc_7219A:
0007054E 4BEE 0070                  		lea	$70(a6),a5
00070552 7805                       		moveq	#5,d4
00070554                            
00070554                            loc_721A0:
00070554 4EBA 0000                  		jsr	sub_726FE(pc)
00070558 DAC6                       		adda.w	d6,a5
0007055A 51CC FFF8                  		dbf	d4,loc_721A0
0007055E 7802                       		moveq	#2,d4
00070560                            
00070560                            loc_721AC:
00070560 4EBA 0000                  		jsr	sub_729A0(pc)
00070564 DAC6                       		adda.w	d6,a5
00070566 51CC FFF8                  		dbf	d4,loc_721AC
0007056A                            
0007056A                            loc_721B6:
0007056A 584F                       		addq.w	#4,sp
0007056C 4E75                       		rts	
0007056E                            ; ===========================================================================
0007056E 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00070576                            		even
00070576 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007057A                            		even
0007057A                            ; ===========================================================================
0007057A                            ; ---------------------------------------------------------------------------
0007057A                            ; Play normal sound effect
0007057A                            ; ---------------------------------------------------------------------------
0007057A                            
0007057A                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007057A 4A2E 0027                  		tst.b	$27(a6)
0007057E 6600 0000                  		bne.w	loc_722C6
00070582 4A2E 0004                  		tst.b	4(a6)
00070586 6600 0000                  		bne.w	loc_722C6
0007058A 4A2E 0024                  		tst.b	$24(a6)
0007058E 6600 0000                  		bne.w	loc_722C6
00070592 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00070596 6600                       		bne.s	Sound_notB5	; if not, branch
00070598 4A2E 002B                  		tst.b	$2B(a6)
0007059C 6600                       		bne.s	loc_721EE
0007059E 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000705A2                            
000705A2                            loc_721EE:
000705A2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000705A8                            
000705A8                            Sound_notB5:
000705A8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000705AC 6600                       		bne.s	Sound_notA7	; if not, branch
000705AE 4A2E 002C                  		tst.b	$2C(a6)
000705B2 6600 0000                  		bne.w	locret_722C4
000705B6 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000705BC                            
000705BC                            Sound_notA7:
000705BC 2079 0006 FC94             		movea.l	(Go_SoundIndex).l,a0
000705C2 0407 00A0                  		subi.b	#$A0,d7
000705C6 E54F                       		lsl.w	#2,d7
000705C8 2670 7000                  		movea.l	(a0,d7.w),a3
000705CC 224B                       		movea.l	a3,a1
000705CE 7200                       		moveq	#0,d1
000705D0 3219                       		move.w	(a1)+,d1
000705D2 D28B                       		add.l	a3,d1
000705D4 1A19                       		move.b	(a1)+,d5
000705D6 1E19                       		move.b	(a1)+,d7
000705D8 5307                       		subq.b	#1,d7
000705DA 7C30                       		moveq	#$30,d6
000705DC                            
000705DC                            loc_72228:
000705DC 7600                       		moveq	#0,d3
000705DE 1629 0001                  		move.b	1(a1),d3
000705E2 1803                       		move.b	d3,d4
000705E4 6B00                       		bmi.s	loc_72244
000705E6 5543                       		subq.w	#2,d3
000705E8 E54B                       		lsl.w	#2,d3
000705EA 4BFA 0000                  		lea	dword_722CC(pc),a5
000705EE 2A75 3000                  		movea.l	(a5,d3.w),a5
000705F2 08D5 0002                  		bset	#2,(a5)
000705F6 6000                       		bra.s	loc_7226E
000705F8                            ; ===========================================================================
000705F8                            
000705F8                            loc_72244:
000705F8 E64B                       		lsr.w	#3,d3
000705FA 4BFA 0000                  		lea	dword_722CC(pc),a5
000705FE 2A75 3000                  		movea.l	(a5,d3.w),a5
00070602 08D5 0002                  		bset	#2,(a5)
00070606 0C04 00C0                  		cmpi.b	#$C0,d4
0007060A 6600                       		bne.s	loc_7226E
0007060C 1004                       		move.b	d4,d0
0007060E 0000 001F                  		ori.b	#$1F,d0
00070612 13C0 00C0 0011             		move.b	d0,($C00011).l
00070618 0840 0005                  		bchg	#5,d0
0007061C 13C0 00C0 0011             		move.b	d0,($C00011).l
00070622                            
00070622                            loc_7226E:
00070622 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00070626 244D                       		movea.l	a5,a2
00070628 700B                       		moveq	#$B,d0
0007062A                            
0007062A                            loc_72276:
0007062A 429A                       		clr.l	(a2)+
0007062C 51C8 FFFC                  		dbf	d0,loc_72276
00070630                            
00070630 3A99                       		move.w	(a1)+,(a5)
00070632 1B45 0002                  		move.b	d5,2(a5)
00070636 7000                       		moveq	#0,d0
00070638 3019                       		move.w	(a1)+,d0
0007063A D08B                       		add.l	a3,d0
0007063C 2B40 0004                  		move.l	d0,4(a5)
00070640 3B59 0008                  		move.w	(a1)+,8(a5)
00070644 1B7C 0001 000E             		move.b	#1,$E(a5)
0007064A 1B46 000D                  		move.b	d6,$D(a5)
0007064E 4A04                       		tst.b	d4
00070650 6B00                       		bmi.s	loc_722A8
00070652 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00070658 2B41 0020                  		move.l	d1,$20(a5)
0007065C                            
0007065C                            loc_722A8:
0007065C 51CF FF7E                  		dbf	d7,loc_72228
00070660                            
00070660 4A2E 0250                  		tst.b	$250(a6)
00070664 6A00                       		bpl.s	loc_722B8
00070666 08EE 0002 0340             		bset	#2,$340(a6)
0007066C                            
0007066C                            loc_722B8:
0007066C 4A2E 0310                  		tst.b	$310(a6)
00070670 6A00                       		bpl.s	locret_722C4
00070672 08EE 0002 0370             		bset	#2,$370(a6)
00070678                            
00070678                            locret_722C4:
00070678 4E75                       		rts	
0007067A                            ; ===========================================================================
0007067A                            
0007067A                            loc_722C6:
0007067A 4216                       		clr.b	0(a6)
0007067C 4E75                       		rts	
0007067E                            ; ===========================================================================
0007067E 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00070682 0000 0000                  		dc.l 0
00070686 00FF F100                  		dc.l $FFF100
0007068A 00FF F130                  		dc.l $FFF130
0007068E 00FF F190                  		dc.l $FFF190
00070692 00FF F1C0                  		dc.l $FFF1C0
00070696 00FF F1F0                  		dc.l $FFF1F0
0007069A 00FF F1F0                  		dc.l $FFF1F0
0007069E 00FF F220                  dword_722EC:	dc.l $FFF220
000706A2 0000 0000                  		dc.l 0
000706A6 00FF F250                  		dc.l $FFF250
000706AA 00FF F280                  		dc.l $FFF280
000706AE 00FF F2B0                  		dc.l $FFF2B0
000706B2 00FF F2E0                  		dc.l $FFF2E0
000706B6 00FF F310                  		dc.l $FFF310
000706BA 00FF F310                  		dc.l $FFF310
000706BE                            ; ===========================================================================
000706BE                            ; ---------------------------------------------------------------------------
000706BE                            ; Play GHZ waterfall sound
000706BE                            ; ---------------------------------------------------------------------------
000706BE                            
000706BE                            Sound_D0toDF:				; XREF: Sound_ChkValue
000706BE 4A2E 0027                  		tst.b	$27(a6)
000706C2 6600 0000                  		bne.w	locret_723C6
000706C6 4A2E 0004                  		tst.b	4(a6)
000706CA 6600 0000                  		bne.w	locret_723C6
000706CE 4A2E 0024                  		tst.b	$24(a6)
000706D2 6600 0000                  		bne.w	locret_723C6
000706D6 2079 0006 FC8C             		movea.l	(Go_SoundD0).l,a0
000706DC 0407 00D0                  		subi.b	#$D0,d7
000706E0 E54F                       		lsl.w	#2,d7
000706E2 2670 7000                  		movea.l	(a0,d7.w),a3
000706E6 224B                       		movea.l	a3,a1
000706E8 7000                       		moveq	#0,d0
000706EA 3019                       		move.w	(a1)+,d0
000706EC D08B                       		add.l	a3,d0
000706EE 2D40 0020                  		move.l	d0,$20(a6)
000706F2 1A19                       		move.b	(a1)+,d5
000706F4 1E19                       		move.b	(a1)+,d7
000706F6 5307                       		subq.b	#1,d7
000706F8 7C30                       		moveq	#$30,d6
000706FA                            
000706FA                            loc_72348:
000706FA 1829 0001                  		move.b	1(a1),d4
000706FE 6B00                       		bmi.s	loc_7235A
00070700 08EE 0002 0100             		bset	#2,$100(a6)
00070706 4BEE 0340                  		lea	$340(a6),a5
0007070A 6000                       		bra.s	loc_72364
0007070C                            ; ===========================================================================
0007070C                            
0007070C                            loc_7235A:
0007070C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00070712 4BEE 0370                  		lea	$370(a6),a5
00070716                            
00070716                            loc_72364:
00070716 244D                       		movea.l	a5,a2
00070718 700B                       		moveq	#$B,d0
0007071A                            
0007071A                            loc_72368:
0007071A 429A                       		clr.l	(a2)+
0007071C 51C8 FFFC                  		dbf	d0,loc_72368
00070720                            
00070720 3A99                       		move.w	(a1)+,(a5)
00070722 1B45 0002                  		move.b	d5,2(a5)
00070726 7000                       		moveq	#0,d0
00070728 3019                       		move.w	(a1)+,d0
0007072A D08B                       		add.l	a3,d0
0007072C 2B40 0004                  		move.l	d0,4(a5)
00070730 3B59 0008                  		move.w	(a1)+,8(a5)
00070734 1B7C 0001 000E             		move.b	#1,$E(a5)
0007073A 1B46 000D                  		move.b	d6,$D(a5)
0007073E 4A04                       		tst.b	d4
00070740 6B00                       		bmi.s	loc_72396
00070742 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00070748                            
00070748                            loc_72396:
00070748 51CF FFB0                  		dbf	d7,loc_72348
0007074C                            
0007074C 4A2E 0250                  		tst.b	$250(a6)
00070750 6A00                       		bpl.s	loc_723A6
00070752 08EE 0002 0340             		bset	#2,$340(a6)
00070758                            
00070758                            loc_723A6:
00070758 4A2E 0310                  		tst.b	$310(a6)
0007075C 6A00                       		bpl.s	locret_723C6
0007075E 08EE 0002 0370             		bset	#2,$370(a6)
00070764 0004 001F                  		ori.b	#$1F,d4
00070768 13C4 00C0 0011             		move.b	d4,($C00011).l
0007076E 0844 0005                  		bchg	#5,d4
00070772 13C4 00C0 0011             		move.b	d4,($C00011).l
00070778                            
00070778                            locret_723C6:
00070778 4E75                       		rts	
0007077A                            ; End of function Sound_ChkValue
0007077A                            
0007077A                            ; ===========================================================================
0007077A 00FF F100                  		dc.l $FFF100
0007077E 00FF F1F0                  		dc.l $FFF1F0
00070782 00FF F250                  		dc.l $FFF250
00070786 00FF F310                  		dc.l $FFF310
0007078A 00FF F340                  		dc.l $FFF340
0007078E 00FF F370                  		dc.l $FFF370
00070792                            
00070792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070792                            
00070792                            
00070792                            Snd_FadeOut1:				; XREF: Sound_E0
00070792 4216                       		clr.b	0(a6)
00070794 4BEE 0220                  		lea	$220(a6),a5
00070798 7E05                       		moveq	#5,d7
0007079A                            
0007079A                            loc_723EA:
0007079A 4A15                       		tst.b	(a5)
0007079C 6A00 0000                  		bpl.w	loc_72472
000707A0 0895 0007                  		bclr	#7,(a5)
000707A4 7600                       		moveq	#0,d3
000707A6 162D 0001                  		move.b	1(a5),d3
000707AA 6B00                       		bmi.s	loc_7243C
000707AC 4EBA 0000                  		jsr	sub_726FE(pc)
000707B0 0C03 0004                  		cmpi.b	#4,d3
000707B4 6600                       		bne.s	loc_72416
000707B6 4A2E 0340                  		tst.b	$340(a6)
000707BA 6A00                       		bpl.s	loc_72416
000707BC 4BEE 0340                  		lea	$340(a6),a5
000707C0 226E 0020                  		movea.l	$20(a6),a1
000707C4 6000                       		bra.s	loc_72428
000707C6                            ; ===========================================================================
000707C6                            
000707C6                            loc_72416:
000707C6 5503                       		subq.b	#2,d3
000707C8 E50B                       		lsl.b	#2,d3
000707CA 41FA FEB2                  		lea	dword_722CC(pc),a0
000707CE 264D                       		movea.l	a5,a3
000707D0 2A70 3000                  		movea.l	(a0,d3.w),a5
000707D4 226E 0018                  		movea.l	$18(a6),a1
000707D8                            
000707D8                            loc_72428:
000707D8 0895 0002                  		bclr	#2,(a5)
000707DC 08D5 0001                  		bset	#1,(a5)
000707E0 102D 000B                  		move.b	$B(a5),d0
000707E4 4EBA 0000                  		jsr	sub_72C4E(pc)
000707E8 2A4B                       		movea.l	a3,a5
000707EA 6000                       		bra.s	loc_72472
000707EC                            ; ===========================================================================
000707EC                            
000707EC                            loc_7243C:
000707EC 4EBA 0000                  		jsr	sub_729A0(pc)
000707F0 41EE 0370                  		lea	$370(a6),a0
000707F4 0C03 00E0                  		cmpi.b	#$E0,d3
000707F8 6700                       		beq.s	loc_7245A
000707FA 0C03 00C0                  		cmpi.b	#$C0,d3
000707FE 6700                       		beq.s	loc_7245A
00070800 E60B                       		lsr.b	#3,d3
00070802 41FA FE7A                  		lea	dword_722CC(pc),a0
00070806 2070 3000                  		movea.l	(a0,d3.w),a0
0007080A                            
0007080A                            loc_7245A:
0007080A 0890 0002                  		bclr	#2,(a0)
0007080E 08D0 0001                  		bset	#1,(a0)
00070812 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00070818 6600                       		bne.s	loc_72472
0007081A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00070822                            
00070822                            loc_72472:
00070822 DAFC 0030                  		adda.w	#$30,a5
00070826 51CF FF72                  		dbf	d7,loc_723EA
0007082A                            
0007082A 4E75                       		rts	
0007082C                            ; End of function Snd_FadeOut1
0007082C                            
0007082C                            
0007082C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007082C                            
0007082C                            
0007082C                            Snd_FadeOut2:				; XREF: Sound_E0
0007082C 4BEE 0340                  		lea	$340(a6),a5
00070830 4A15                       		tst.b	(a5)
00070832 6A00                       		bpl.s	loc_724AE
00070834 0895 0007                  		bclr	#7,(a5)
00070838 0815 0002                  		btst	#2,(a5)
0007083C 6600                       		bne.s	loc_724AE
0007083E 4EBA 0000                  		jsr	loc_7270A(pc)
00070842 4BEE 0100                  		lea	$100(a6),a5
00070846 0895 0002                  		bclr	#2,(a5)
0007084A 08D5 0001                  		bset	#1,(a5)
0007084E 4A15                       		tst.b	(a5)
00070850 6A00                       		bpl.s	loc_724AE
00070852 226E 0018                  		movea.l	$18(a6),a1
00070856 102D 000B                  		move.b	$B(a5),d0
0007085A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007085E                            
0007085E                            loc_724AE:
0007085E 4BEE 0370                  		lea	$370(a6),a5
00070862 4A15                       		tst.b	(a5)
00070864 6A00                       		bpl.s	locret_724E4
00070866 0895 0007                  		bclr	#7,(a5)
0007086A 0815 0002                  		btst	#2,(a5)
0007086E 6600                       		bne.s	locret_724E4
00070870 4EBA 0000                  		jsr	loc_729A6(pc)
00070874 4BEE 01F0                  		lea	$1F0(a6),a5
00070878 0895 0002                  		bclr	#2,(a5)
0007087C 08D5 0001                  		bset	#1,(a5)
00070880 4A15                       		tst.b	(a5)
00070882 6A00                       		bpl.s	locret_724E4
00070884 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007088A 6600                       		bne.s	locret_724E4
0007088C 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00070894                            
00070894                            locret_724E4:
00070894 4E75                       		rts	
00070896                            ; End of function Snd_FadeOut2
00070896                            
00070896                            ; ===========================================================================
00070896                            ; ---------------------------------------------------------------------------
00070896                            ; Fade out music
00070896                            ; ---------------------------------------------------------------------------
00070896                            
00070896                            Sound_E0:				; XREF: Sound_ExIndex
00070896 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007089A 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007089E 1D7C 0003 0006             		move.b	#3,6(a6)
000708A4 1D7C 0028 0004             		move.b	#$28,4(a6)
000708AA 422E 0040                  		clr.b	$40(a6)
000708AE 422E 002A                  		clr.b	$2A(a6)
000708B2 4E75                       		rts	
000708B4                            
000708B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000708B4                            
000708B4                            
000708B4                            sub_72504:				; XREF: sub_71B4C
000708B4 102E 0006                  		move.b	6(a6),d0
000708B8 6700                       		beq.s	loc_72510
000708BA 532E 0006                  		subq.b	#1,6(a6)
000708BE 4E75                       		rts	
000708C0                            ; ===========================================================================
000708C0                            
000708C0                            loc_72510:
000708C0 532E 0004                  		subq.b	#1,4(a6)
000708C4 6700 0000                  		beq.w	Sound_E4
000708C8 1D7C 0003 0006             		move.b	#3,6(a6)
000708CE 4BEE 0070                  		lea	$70(a6),a5
000708D2 7E05                       		moveq	#5,d7
000708D4                            
000708D4                            loc_72524:
000708D4 4A15                       		tst.b	(a5)
000708D6 6A00                       		bpl.s	loc_72538
000708D8 522D 0009                  		addq.b	#1,9(a5)
000708DC 6A00                       		bpl.s	loc_72534
000708DE 0895 0007                  		bclr	#7,(a5)
000708E2 6000                       		bra.s	loc_72538
000708E4                            ; ===========================================================================
000708E4                            
000708E4                            loc_72534:
000708E4 4EBA 0000                  		jsr	sub_72CB4(pc)
000708E8                            
000708E8                            loc_72538:
000708E8 DAFC 0030                  		adda.w	#$30,a5
000708EC 51CF FFE6                  		dbf	d7,loc_72524
000708F0                            
000708F0 7E02                       		moveq	#2,d7
000708F2                            
000708F2                            loc_72542:
000708F2 4A15                       		tst.b	(a5)
000708F4 6A00                       		bpl.s	loc_72560
000708F6 522D 0009                  		addq.b	#1,9(a5)
000708FA 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00070900 6500                       		bcs.s	loc_72558
00070902 0895 0007                  		bclr	#7,(a5)
00070906 6000                       		bra.s	loc_72560
00070908                            ; ===========================================================================
00070908                            
00070908                            loc_72558:
00070908 1C2D 0009                  		move.b	9(a5),d6
0007090C 4EBA 0000                  		jsr	sub_7296A(pc)
00070910                            
00070910                            loc_72560:
00070910 DAFC 0030                  		adda.w	#$30,a5
00070914 51CF FFDC                  		dbf	d7,loc_72542
00070918                            
00070918 4E75                       		rts	
0007091A                            ; End of function sub_72504
0007091A                            
0007091A                            
0007091A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007091A                            
0007091A                            
0007091A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007091A 7602                       		moveq	#2,d3
0007091C 7028                       		moveq	#$28,d0
0007091E                            
0007091E                            loc_7256E:
0007091E 1203                       		move.b	d3,d1
00070920 4EBA 0000                  		jsr	sub_7272E(pc)
00070924 5801                       		addq.b	#4,d1
00070926 4EBA 0000                  		jsr	sub_7272E(pc)
0007092A 51CB FFF2                  		dbf	d3,loc_7256E
0007092E                            
0007092E 7040                       		moveq	#$40,d0
00070930 727F                       		moveq	#$7F,d1
00070932 7802                       		moveq	#2,d4
00070934                            
00070934                            loc_72584:
00070934 7603                       		moveq	#3,d3
00070936                            
00070936                            loc_72586:
00070936 4EBA 0000                  		jsr	sub_7272E(pc)
0007093A 4EBA 0000                  		jsr	sub_72764(pc)
0007093E 5840                       		addq.w	#4,d0
00070940 51CB FFF4                  		dbf	d3,loc_72586
00070944                            
00070944 0400 000F                  		subi.b	#$F,d0
00070948 51CC FFEA                  		dbf	d4,loc_72584
0007094C                            
0007094C 4E75                       		rts	
0007094E                            ; End of function sub_7256A
0007094E                            
0007094E                            ; ===========================================================================
0007094E                            ; ---------------------------------------------------------------------------
0007094E                            ; Stop music
0007094E                            ; ---------------------------------------------------------------------------
0007094E                            
0007094E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007094E 702B                       		moveq	#$2B,d0
00070950 123C 0080                  		move.b	#$80,d1
00070954 4EBA 0000                  		jsr	sub_7272E(pc)
00070958 7027                       		moveq	#$27,d0
0007095A 7200                       		moveq	#0,d1
0007095C 4EBA 0000                  		jsr	sub_7272E(pc)
00070960 204E                       		movea.l	a6,a0
00070962 303C 00E3                  		move.w	#$E3,d0
00070966                            
00070966                            loc_725B6:
00070966 4298                       		clr.l	(a0)+
00070968 51C8 FFFC                  		dbf	d0,loc_725B6
0007096C                            
0007096C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00070972 4EBA FFA6                  		jsr	sub_7256A(pc)
00070976 6000 0000                  		bra.w	sub_729B6
0007097A                            
0007097A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007097A                            
0007097A                            
0007097A                            sub_725CA:				; XREF: Sound_ChkValue
0007097A 204E                       		movea.l	a6,a0
0007097C 1216                       		move.b	0(a6),d1
0007097E 142E 0027                  		move.b	$27(a6),d2
00070982 162E 002A                  		move.b	$2A(a6),d3
00070986 182E 0026                  		move.b	$26(a6),d4
0007098A 3A2E 000A                  		move.w	$A(a6),d5
0007098E 303C 0087                  		move.w	#$87,d0
00070992                            
00070992                            loc_725E4:
00070992 4298                       		clr.l	(a0)+
00070994 51C8 FFFC                  		dbf	d0,loc_725E4
00070998                            
00070998 1C81                       		move.b	d1,0(a6)
0007099A 1D42 0027                  		move.b	d2,$27(a6)
0007099E 1D43 002A                  		move.b	d3,$2A(a6)
000709A2 1D44 0026                  		move.b	d4,$26(a6)
000709A6 3D45 000A                  		move.w	d5,$A(a6)
000709AA 1D7C 0080 0009             		move.b	#$80,9(a6)
000709B0 4EBA FF68                  		jsr	sub_7256A(pc)
000709B4 6000 0000                  		bra.w	sub_729B6
000709B8                            ; End of function sub_725CA
000709B8                            
000709B8                            
000709B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000709B8                            
000709B8                            
000709B8                            sub_7260C:				; XREF: sub_71B4C
000709B8 1D6E 0002 0001             		move.b	2(a6),1(a6)
000709BE 41EE 004E                  		lea	$4E(a6),a0
000709C2 7030                       		moveq	#$30,d0
000709C4 7209                       		moveq	#9,d1
000709C6                            
000709C6                            loc_7261A:
000709C6 5210                       		addq.b	#1,(a0)
000709C8 D0C0                       		adda.w	d0,a0
000709CA 51C9 FFFA                  		dbf	d1,loc_7261A
000709CE                            
000709CE 4E75                       		rts	
000709D0                            ; End of function sub_7260C
000709D0                            
000709D0                            ; ===========================================================================
000709D0                            ; ---------------------------------------------------------------------------
000709D0                            ; Speed	up music
000709D0                            ; ---------------------------------------------------------------------------
000709D0                            
000709D0                            Sound_E2:				; XREF: Sound_ExIndex
000709D0 4A2E 0027                  		tst.b	$27(a6)
000709D4 6600                       		bne.s	loc_7263E
000709D6 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000709DC 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000709E2 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000709E8 4E75                       		rts	
000709EA                            ; ===========================================================================
000709EA                            
000709EA                            loc_7263E:
000709EA 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000709F0 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000709F6 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000709FC 4E75                       		rts	
000709FE                            ; ===========================================================================
000709FE                            ; ---------------------------------------------------------------------------
000709FE                            ; Change music back to normal speed
000709FE                            ; ---------------------------------------------------------------------------
000709FE                            
000709FE                            Sound_E3:				; XREF: Sound_ExIndex
000709FE 4A2E 0027                  		tst.b	$27(a6)
00070A02 6600                       		bne.s	loc_7266A
00070A04 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00070A0A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00070A10 422E 002A                  		clr.b	$2A(a6)
00070A14 4E75                       		rts	
00070A16                            ; ===========================================================================
00070A16                            
00070A16                            loc_7266A:
00070A16 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00070A1C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00070A22 422E 03CA                  		clr.b	$3CA(a6)
00070A26 4E75                       		rts	
00070A28                            
00070A28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070A28                            
00070A28                            
00070A28                            sub_7267C:				; XREF: sub_71B4C
00070A28 4A2E 0025                  		tst.b	$25(a6)
00070A2C 6700                       		beq.s	loc_72688
00070A2E 532E 0025                  		subq.b	#1,$25(a6)
00070A32 4E75                       		rts	
00070A34                            ; ===========================================================================
00070A34                            
00070A34                            loc_72688:
00070A34 4A2E 0026                  		tst.b	$26(a6)
00070A38 6700                       		beq.s	loc_726D6
00070A3A 532E 0026                  		subq.b	#1,$26(a6)
00070A3E 1D7C 0002 0025             		move.b	#2,$25(a6)
00070A44 4BEE 0070                  		lea	$70(a6),a5
00070A48 7E05                       		moveq	#5,d7
00070A4A                            
00070A4A                            loc_7269E:
00070A4A 4A15                       		tst.b	(a5)
00070A4C 6A00                       		bpl.s	loc_726AA
00070A4E 532D 0009                  		subq.b	#1,9(a5)
00070A52 4EBA 0000                  		jsr	sub_72CB4(pc)
00070A56                            
00070A56                            loc_726AA:
00070A56 DAFC 0030                  		adda.w	#$30,a5
00070A5A 51CF FFEE                  		dbf	d7,loc_7269E
00070A5E 7E02                       		moveq	#2,d7
00070A60                            
00070A60                            loc_726B4:
00070A60 4A15                       		tst.b	(a5)
00070A62 6A00                       		bpl.s	loc_726CC
00070A64 532D 0009                  		subq.b	#1,9(a5)
00070A68 1C2D 0009                  		move.b	9(a5),d6
00070A6C 0C06 0010                  		cmpi.b	#$10,d6
00070A70 6500                       		bcs.s	loc_726C8
00070A72 7C0F                       		moveq	#$F,d6
00070A74                            
00070A74                            loc_726C8:
00070A74 4EBA 0000                  		jsr	sub_7296A(pc)
00070A78                            
00070A78                            loc_726CC:
00070A78 DAFC 0030                  		adda.w	#$30,a5
00070A7C 51CF FFE2                  		dbf	d7,loc_726B4
00070A80 4E75                       		rts	
00070A82                            ; ===========================================================================
00070A82                            
00070A82                            loc_726D6:
00070A82 08AE 0002 0040             		bclr	#2,$40(a6)
00070A88 422E 0024                  		clr.b	$24(a6)
00070A8C 4E75                       		rts	
00070A8E                            ; End of function sub_7267C
00070A8E                            
00070A8E                            ; ===========================================================================
00070A8E                            
00070A8E                            loc_726E2:				; XREF: sub_71CCA
00070A8E 0815 0001                  		btst	#1,(a5)
00070A92 6600                       		bne.s	locret_726FC
00070A94 0815 0002                  		btst	#2,(a5)
00070A98 6600                       		bne.s	locret_726FC
00070A9A 7028                       		moveq	#$28,d0
00070A9C 122D 0001                  		move.b	1(a5),d1
00070AA0 0001 00F0                  		ori.b	#-$10,d1
00070AA4 6000 0000                  		bra.w	sub_7272E
00070AA8                            ; ===========================================================================
00070AA8                            
00070AA8                            locret_726FC:
00070AA8 4E75                       		rts	
00070AAA                            
00070AAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070AAA                            
00070AAA                            
00070AAA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00070AAA 0815 0004                  		btst	#4,(a5)
00070AAE 6600                       		bne.s	locret_72714
00070AB0 0815 0002                  		btst	#2,(a5)
00070AB4 6600                       		bne.s	locret_72714
00070AB6                            
00070AB6                            loc_7270A:				; XREF: Snd_FadeOut2
00070AB6 7028                       		moveq	#$28,d0
00070AB8 122D 0001                  		move.b	1(a5),d1
00070ABC 6000 0000                  		bra.w	sub_7272E
00070AC0                            ; ===========================================================================
00070AC0                            
00070AC0                            locret_72714:
00070AC0 4E75                       		rts	
00070AC2                            ; End of function sub_726FE
00070AC2                            
00070AC2                            ; ===========================================================================
00070AC2                            
00070AC2                            loc_72716:				; XREF: sub_72A5A
00070AC2 0815 0002                  		btst	#2,(a5)
00070AC6 6600                       		bne.s	locret_72720
00070AC8 6000 0000                  		bra.w	sub_72722
00070ACC                            ; ===========================================================================
00070ACC                            
00070ACC                            locret_72720:
00070ACC 4E75                       		rts	
00070ACE                            
00070ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070ACE                            
00070ACE                            
00070ACE                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00070ACE 082D 0002 0001             		btst	#2,1(a5)
00070AD4 6600                       		bne.s	loc_7275A
00070AD6 D02D 0001                  		add.b	1(a5),d0
00070ADA                            ; End of function sub_72722
00070ADA                            
00070ADA                            
00070ADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070ADA                            
00070ADA                            
00070ADA                            sub_7272E:				; XREF: loc_71E6A
00070ADA 1439 00A0 4000             		move.b	($A04000).l,d2
00070AE0 0802 0007                  		btst	#7,d2
00070AE4 66F4                       		bne.s	sub_7272E
00070AE6 13C0 00A0 4000             		move.b	d0,($A04000).l
00070AEC 4E71                       		nop	
00070AEE 4E71                       		nop	
00070AF0 4E71                       		nop	
00070AF2                            
00070AF2                            loc_72746:
00070AF2 1439 00A0 4000             		move.b	($A04000).l,d2
00070AF8 0802 0007                  		btst	#7,d2
00070AFC 66F4                       		bne.s	loc_72746
00070AFE                            
00070AFE 13C1 00A0 4001             		move.b	d1,($A04001).l
00070B04 4E75                       		rts	
00070B06                            ; End of function sub_7272E
00070B06                            
00070B06                            ; ===========================================================================
00070B06                            
00070B06                            loc_7275A:				; XREF: sub_72722
00070B06 142D 0001                  		move.b	1(a5),d2
00070B0A 0882 0002                  		bclr	#2,d2
00070B0E D002                       		add.b	d2,d0
00070B10                            
00070B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070B10                            
00070B10                            
00070B10                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00070B10 1439 00A0 4000             		move.b	($A04000).l,d2
00070B16 0802 0007                  		btst	#7,d2
00070B1A 66F4                       		bne.s	sub_72764
00070B1C 13C0 00A0 4002             		move.b	d0,($A04002).l
00070B22 4E71                       		nop	
00070B24 4E71                       		nop	
00070B26 4E71                       		nop	
00070B28                            
00070B28                            loc_7277C:
00070B28 1439 00A0 4000             		move.b	($A04000).l,d2
00070B2E 0802 0007                  		btst	#7,d2
00070B32 66F4                       		bne.s	loc_7277C
00070B34                            
00070B34 13C1 00A0 4003             		move.b	d1,($A04003).l
00070B3A 4E75                       		rts	
00070B3C                            ; End of function sub_72764
00070B3C                            
00070B3C                            ; ===========================================================================
00070B3C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00070B4E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00070B60 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00070B70 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00070B80 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00070B90 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00070BA0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00070BB0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00070BC0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00070BD0 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00070BE0 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00070BF0 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00070BFC                            
00070BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070BFC                            
00070BFC                            
00070BFC                            sub_72850:				; XREF: sub_71B4C
00070BFC 532D 000E                  		subq.b	#1,$E(a5)
00070C00 6600                       		bne.s	loc_72866
00070C02 0895 0004                  		bclr	#4,(a5)
00070C06 4EBA 0000                  		jsr	sub_72878(pc)
00070C0A 4EBA 0000                  		jsr	sub_728DC(pc)
00070C0E 6000 0000                  		bra.w	loc_7292E
00070C12                            ; ===========================================================================
00070C12                            
00070C12                            loc_72866:
00070C12 4EBA F4B2                  		jsr	sub_71D9E(pc)
00070C16 4EBA 0000                  		jsr	sub_72926(pc)
00070C1A 4EBA F4D2                  		jsr	sub_71DC6(pc)
00070C1E 4EBA 0000                  		jsr	sub_728E2(pc)
00070C22 4E75                       		rts	
00070C24                            ; End of function sub_72850
00070C24                            
00070C24                            
00070C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070C24                            
00070C24                            
00070C24                            sub_72878:				; XREF: sub_72850
00070C24 0895 0001                  		bclr	#1,(a5)
00070C28 286D 0004                  		movea.l	4(a5),a4
00070C2C                            
00070C2C                            loc_72880:
00070C2C 7A00                       		moveq	#0,d5
00070C2E 1A1C                       		move.b	(a4)+,d5
00070C30 0C05 00E0                  		cmpi.b	#$E0,d5
00070C34 6500                       		bcs.s	loc_72890
00070C36 4EBA 0000                  		jsr	sub_72A5A(pc)
00070C3A 60F0                       		bra.s	loc_72880
00070C3C                            ; ===========================================================================
00070C3C                            
00070C3C                            loc_72890:
00070C3C 4A05                       		tst.b	d5
00070C3E 6A00                       		bpl.s	loc_728A4
00070C40 4EBA 0000                  		jsr	sub_728AC(pc)
00070C44 1A1C                       		move.b	(a4)+,d5
00070C46 4A05                       		tst.b	d5
00070C48 6A00                       		bpl.s	loc_728A4
00070C4A 534C                       		subq.w	#1,a4
00070C4C 6000 F43A                  		bra.w	sub_71D60
00070C50                            ; ===========================================================================
00070C50                            
00070C50                            loc_728A4:
00070C50 4EBA F416                  		jsr	sub_71D40(pc)
00070C54 6000 F432                  		bra.w	sub_71D60
00070C58                            ; End of function sub_72878
00070C58                            
00070C58                            
00070C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070C58                            
00070C58                            
00070C58                            sub_728AC:				; XREF: sub_72878
00070C58 0405 0081                  		subi.b	#$81,d5
00070C5C 6500                       		bcs.s	loc_728CA
00070C5E DA2D 0008                  		add.b	8(a5),d5
00070C62 0245 007F                  		andi.w	#$7F,d5
00070C66 E34D                       		lsl.w	#1,d5
00070C68 41FA 0000                  		lea	word_729CE(pc),a0
00070C6C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00070C72 6000 F414                  		bra.w	sub_71D60
00070C76                            ; ===========================================================================
00070C76                            
00070C76                            loc_728CA:
00070C76 08D5 0001                  		bset	#1,(a5)
00070C7A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00070C80 4EBA F406                  		jsr	sub_71D60(pc)
00070C84 6000 0000                  		bra.w	sub_729A0
00070C88                            ; End of function sub_728AC
00070C88                            
00070C88                            
00070C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070C88                            
00070C88                            
00070C88                            sub_728DC:				; XREF: sub_72850
00070C88 3C2D 0010                  		move.w	$10(a5),d6
00070C8C 6B00                       		bmi.s	loc_72920
00070C8E                            ; End of function sub_728DC
00070C8E                            
00070C8E                            
00070C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070C8E                            
00070C8E                            
00070C8E                            sub_728E2:				; XREF: sub_72850
00070C8E 102D 001E                  		move.b	$1E(a5),d0
00070C92 4880                       		ext.w	d0
00070C94 DC40                       		add.w	d0,d6
00070C96 0815 0002                  		btst	#2,(a5)
00070C9A 6600                       		bne.s	locret_7291E
00070C9C 0815 0001                  		btst	#1,(a5)
00070CA0 6600                       		bne.s	locret_7291E
00070CA2 102D 0001                  		move.b	1(a5),d0
00070CA6 0C00 00E0                  		cmpi.b	#$E0,d0
00070CAA 6600                       		bne.s	loc_72904
00070CAC 103C 00C0                  		move.b	#$C0,d0
00070CB0                            
00070CB0                            loc_72904:
00070CB0 3206                       		move.w	d6,d1
00070CB2 0201 000F                  		andi.b	#$F,d1
00070CB6 8001                       		or.b	d1,d0
00070CB8 E84E                       		lsr.w	#4,d6
00070CBA 0206 003F                  		andi.b	#$3F,d6
00070CBE 13C0 00C0 0011             		move.b	d0,($C00011).l
00070CC4 13C6 00C0 0011             		move.b	d6,($C00011).l
00070CCA                            
00070CCA                            locret_7291E:
00070CCA 4E75                       		rts	
00070CCC                            ; End of function sub_728E2
00070CCC                            
00070CCC                            ; ===========================================================================
00070CCC                            
00070CCC                            loc_72920:				; XREF: sub_728DC
00070CCC 08D5 0001                  		bset	#1,(a5)
00070CD0 4E75                       		rts	
00070CD2                            
00070CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070CD2                            
00070CD2                            
00070CD2                            sub_72926:				; XREF: sub_72850
00070CD2 4A2D 000B                  		tst.b	$B(a5)
00070CD6 6700 0000                  		beq.w	locret_7298A
00070CDA                            
00070CDA                            loc_7292E:				; XREF: sub_72850
00070CDA 1C2D 0009                  		move.b	9(a5),d6
00070CDE 7000                       		moveq	#0,d0
00070CE0 102D 000B                  		move.b	$B(a5),d0
00070CE4 6700                       		beq.s	sub_7296A
00070CE6 2079 0006 FC9C             		movea.l	(Go_PSGIndex).l,a0
00070CEC 5340                       		subq.w	#1,d0
00070CEE E548                       		lsl.w	#2,d0
00070CF0 2070 0000                  		movea.l	(a0,d0.w),a0
00070CF4 102D 000C                  		move.b	$C(a5),d0
00070CF8 1030 0000                  		move.b	(a0,d0.w),d0
00070CFC 522D 000C                  		addq.b	#1,$C(a5)
00070D00 0800 0007                  		btst	#7,d0
00070D04 6700                       		beq.s	loc_72960
00070D06 0C00 0080                  		cmpi.b	#$80,d0
00070D0A 6700                       		beq.s	loc_7299A
00070D0C                            
00070D0C                            loc_72960:
00070D0C DC40                       		add.w	d0,d6
00070D0E 0C06 0010                  		cmpi.b	#$10,d6
00070D12 6500                       		bcs.s	sub_7296A
00070D14 7C0F                       		moveq	#$F,d6
00070D16                            ; End of function sub_72926
00070D16                            
00070D16                            
00070D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070D16                            
00070D16                            
00070D16                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00070D16 0815 0001                  		btst	#1,(a5)
00070D1A 6600                       		bne.s	locret_7298A
00070D1C 0815 0002                  		btst	#2,(a5)
00070D20 6600                       		bne.s	locret_7298A
00070D22 0815 0004                  		btst	#4,(a5)
00070D26 6600                       		bne.s	loc_7298C
00070D28                            
00070D28                            loc_7297C:
00070D28 8C2D 0001                  		or.b	1(a5),d6
00070D2C 0606 0010                  		addi.b	#$10,d6
00070D30 13C6 00C0 0011             		move.b	d6,($C00011).l
00070D36                            
00070D36                            locret_7298A:
00070D36 4E75                       		rts	
00070D38                            ; ===========================================================================
00070D38                            
00070D38                            loc_7298C:
00070D38 4A2D 0013                  		tst.b	$13(a5)
00070D3C 67EA                       		beq.s	loc_7297C
00070D3E 4A2D 0012                  		tst.b	$12(a5)
00070D42 66E4                       		bne.s	loc_7297C
00070D44 4E75                       		rts	
00070D46                            ; End of function sub_7296A
00070D46                            
00070D46                            ; ===========================================================================
00070D46                            
00070D46                            loc_7299A:				; XREF: sub_72926
00070D46 532D 000C                  		subq.b	#1,$C(a5)
00070D4A 4E75                       		rts	
00070D4C                            
00070D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070D4C                            
00070D4C                            
00070D4C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00070D4C 0815 0002                  		btst	#2,(a5)
00070D50 6600                       		bne.s	locret_729B4
00070D52                            
00070D52                            loc_729A6:				; XREF: Snd_FadeOut2
00070D52 102D 0001                  		move.b	1(a5),d0
00070D56 0000 001F                  		ori.b	#$1F,d0
00070D5A 13C0 00C0 0011             		move.b	d0,($C00011).l
00070D60                            
00070D60                            locret_729B4:
00070D60 4E75                       		rts	
00070D62                            ; End of function sub_729A0
00070D62                            
00070D62                            
00070D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070D62                            
00070D62                            
00070D62                            sub_729B6:				; XREF: loc_71E7C
00070D62 41F9 00C0 0011             		lea	($C00011).l,a0
00070D68 10BC 009F                  		move.b	#$9F,(a0)
00070D6C 10BC 00BF                  		move.b	#$BF,(a0)
00070D70 10BC 00DF                  		move.b	#$DF,(a0)
00070D74 10BC 00FF                  		move.b	#$FF,(a0)
00070D78 4E75                       		rts	
00070D7A                            ; End of function sub_729B6
00070D7A                            
00070D7A                            ; ===========================================================================
00070D7A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00070D8C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00070D9E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00070DB2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00070DC6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00070DDA 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00070DEE 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00070E02 0011 0000                  		dc.w $11, 0
00070E06                            
00070E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070E06                            
00070E06                            
00070E06                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00070E06 0445 00E0                  		subi.w	#$E0,d5
00070E0A E54D                       		lsl.w	#2,d5
00070E0C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00070E10                            ; End of function sub_72A5A
00070E10                            
00070E10                            ; ===========================================================================
00070E10                            
00070E10                            loc_72A64:
00070E10 6000 0000                  		bra.w	loc_72ACC
00070E14                            ; ===========================================================================
00070E14 6000 0000                  		bra.w	loc_72AEC
00070E18                            ; ===========================================================================
00070E18 6000 0000                  		bra.w	loc_72AF2
00070E1C                            ; ===========================================================================
00070E1C 6000 0000                  		bra.w	loc_72AF8
00070E20                            ; ===========================================================================
00070E20 6000 0000                  		bra.w	loc_72B14
00070E24                            ; ===========================================================================
00070E24 6000 0000                  		bra.w	loc_72B9E
00070E28                            ; ===========================================================================
00070E28 6000 0000                  		bra.w	loc_72BA4
00070E2C                            ; ===========================================================================
00070E2C 6000 0000                  		bra.w	loc_72BAE
00070E30                            ; ===========================================================================
00070E30 6000 0000                  		bra.w	loc_72BB4
00070E34                            ; ===========================================================================
00070E34 6000 0000                  		bra.w	loc_72BBE
00070E38                            ; ===========================================================================
00070E38 6000 0000                  		bra.w	loc_72BC6
00070E3C                            ; ===========================================================================
00070E3C 6000 0000                  		bra.w	loc_72BD0
00070E40                            ; ===========================================================================
00070E40 6000 0000                  		bra.w	loc_72BE6
00070E44                            ; ===========================================================================
00070E44 6000 0000                  		bra.w	loc_72BEE
00070E48                            ; ===========================================================================
00070E48 6000 0000                  		bra.w	loc_72BF4
00070E4C                            ; ===========================================================================
00070E4C 6000 0000                  		bra.w	loc_72C26
00070E50                            ; ===========================================================================
00070E50 6000 0000                  		bra.w	loc_72D30
00070E54                            ; ===========================================================================
00070E54 6000 0000                  		bra.w	loc_72D52
00070E58                            ; ===========================================================================
00070E58 6000 0000                  		bra.w	loc_72D58
00070E5C                            ; ===========================================================================
00070E5C 6000 0000                  		bra.w	loc_72E06
00070E60                            ; ===========================================================================
00070E60 6000 0000                  		bra.w	loc_72E20
00070E64                            ; ===========================================================================
00070E64 6000 0000                  		bra.w	loc_72E26
00070E68                            ; ===========================================================================
00070E68 6000 0000                  		bra.w	loc_72E2C
00070E6C                            ; ===========================================================================
00070E6C 6000 0000                  		bra.w	loc_72E38
00070E70                            ; ===========================================================================
00070E70 6000 0000                  		bra.w	loc_72E52
00070E74                            ; ===========================================================================
00070E74 6000 0000                  		bra.w	loc_72E64
00070E78                            ; ===========================================================================
00070E78                            
00070E78                            loc_72ACC:				; XREF: loc_72A64
00070E78 121C                       		move.b	(a4)+,d1
00070E7A 4A2D 0001                  		tst.b	1(a5)
00070E7E 6B00                       		bmi.s	locret_72AEA
00070E80 102D 000A                  		move.b	$A(a5),d0
00070E84 0200 0037                  		andi.b	#$37,d0
00070E88 8200                       		or.b	d0,d1
00070E8A 1B41 000A                  		move.b	d1,$A(a5)
00070E8E 103C 00B4                  		move.b	#$B4,d0
00070E92 6000 FC2E                  		bra.w	loc_72716
00070E96                            ; ===========================================================================
00070E96                            
00070E96                            locret_72AEA:
00070E96 4E75                       		rts	
00070E98                            ; ===========================================================================
00070E98                            
00070E98                            loc_72AEC:				; XREF: loc_72A64
00070E98 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00070E9C 4E75                       		rts	
00070E9E                            ; ===========================================================================
00070E9E                            
00070E9E                            loc_72AF2:				; XREF: loc_72A64
00070E9E 1D5C 0007                  		move.b	(a4)+,7(a6)
00070EA2 4E75                       		rts	
00070EA4                            ; ===========================================================================
00070EA4                            
00070EA4                            loc_72AF8:				; XREF: loc_72A64
00070EA4 7000                       		moveq	#0,d0
00070EA6 102D 000D                  		move.b	$D(a5),d0
00070EAA 2875 0000                  		movea.l	(a5,d0.w),a4
00070EAE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00070EB6 544C                       		addq.w	#2,a4
00070EB8 5800                       		addq.b	#4,d0
00070EBA 1B40 000D                  		move.b	d0,$D(a5)
00070EBE 4E75                       		rts	
00070EC0                            ; ===========================================================================
00070EC0                            
00070EC0                            loc_72B14:				; XREF: loc_72A64
00070EC0 204E                       		movea.l	a6,a0
00070EC2 43EE 03A0                  		lea	$3A0(a6),a1
00070EC6 303C 0087                  		move.w	#$87,d0
00070ECA                            
00070ECA                            loc_72B1E:
00070ECA 20D9                       		move.l	(a1)+,(a0)+
00070ECC 51C8 FFFC                  		dbf	d0,loc_72B1E
00070ED0                            
00070ED0 08EE 0002 0040             		bset	#2,$40(a6)
00070ED6 264D                       		movea.l	a5,a3
00070ED8 1C3C 0028                  		move.b	#$28,d6
00070EDC 9C2E 0026                  		sub.b	$26(a6),d6
00070EE0 7E05                       		moveq	#5,d7
00070EE2 4BEE 0070                  		lea	$70(a6),a5
00070EE6                            
00070EE6                            loc_72B3A:
00070EE6 0815 0007                  		btst	#7,(a5)
00070EEA 6700                       		beq.s	loc_72B5C
00070EEC 08D5 0001                  		bset	#1,(a5)
00070EF0 DD2D 0009                  		add.b	d6,9(a5)
00070EF4 0815 0002                  		btst	#2,(a5)
00070EF8 6600                       		bne.s	loc_72B5C
00070EFA 7000                       		moveq	#0,d0
00070EFC 102D 000B                  		move.b	$B(a5),d0
00070F00 226E 0018                  		movea.l	$18(a6),a1
00070F04 4EBA 0000                  		jsr	sub_72C4E(pc)
00070F08                            
00070F08                            loc_72B5C:
00070F08 DAFC 0030                  		adda.w	#$30,a5
00070F0C 51CF FFD8                  		dbf	d7,loc_72B3A
00070F10                            
00070F10 7E02                       		moveq	#2,d7
00070F12                            
00070F12                            loc_72B66:
00070F12 0815 0007                  		btst	#7,(a5)
00070F16 6700                       		beq.s	loc_72B78
00070F18 08D5 0001                  		bset	#1,(a5)
00070F1C 4EBA FE2E                  		jsr	sub_729A0(pc)
00070F20 DD2D 0009                  		add.b	d6,9(a5)
00070F24                            
00070F24                            loc_72B78:
00070F24 DAFC 0030                  		adda.w	#$30,a5
00070F28 51CF FFE8                  		dbf	d7,loc_72B66
00070F2C 2A4B                       		movea.l	a3,a5
00070F2E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00070F34 1D7C 0028 0026             		move.b	#$28,$26(a6)
00070F3A 422E 0027                  		clr.b	$27(a6)
00070F3E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00070F46 504F                       		addq.w	#8,sp
00070F48 4E75                       		rts	
00070F4A                            ; ===========================================================================
00070F4A                            
00070F4A                            loc_72B9E:				; XREF: loc_72A64
00070F4A 1B5C 0002                  		move.b	(a4)+,2(a5)
00070F4E 4E75                       		rts	
00070F50                            ; ===========================================================================
00070F50                            
00070F50                            loc_72BA4:				; XREF: loc_72A64
00070F50 101C                       		move.b	(a4)+,d0
00070F52 D12D 0009                  		add.b	d0,9(a5)
00070F56 6000 0000                  		bra.w	sub_72CB4
00070F5A                            ; ===========================================================================
00070F5A                            
00070F5A                            loc_72BAE:				; XREF: loc_72A64
00070F5A 08D5 0004                  		bset	#4,(a5)
00070F5E 4E75                       		rts	
00070F60                            ; ===========================================================================
00070F60                            
00070F60                            loc_72BB4:				; XREF: loc_72A64
00070F60 1B54 0012                  		move.b	(a4),$12(a5)
00070F64 1B5C 0013                  		move.b	(a4)+,$13(a5)
00070F68 4E75                       		rts	
00070F6A                            ; ===========================================================================
00070F6A                            
00070F6A                            loc_72BBE:				; XREF: loc_72A64
00070F6A 101C                       		move.b	(a4)+,d0
00070F6C D12D 0008                  		add.b	d0,8(a5)
00070F70 4E75                       		rts	
00070F72                            ; ===========================================================================
00070F72                            
00070F72                            loc_72BC6:				; XREF: loc_72A64
00070F72 1D54 0002                  		move.b	(a4),2(a6)
00070F76 1D5C 0001                  		move.b	(a4)+,1(a6)
00070F7A 4E75                       		rts	
00070F7C                            ; ===========================================================================
00070F7C                            
00070F7C                            loc_72BD0:				; XREF: loc_72A64
00070F7C 41EE 0040                  		lea	$40(a6),a0
00070F80 101C                       		move.b	(a4)+,d0
00070F82 7230                       		moveq	#$30,d1
00070F84 7409                       		moveq	#9,d2
00070F86                            
00070F86                            loc_72BDA:
00070F86 1140 0002                  		move.b	d0,2(a0)
00070F8A D0C1                       		adda.w	d1,a0
00070F8C 51CA FFF8                  		dbf	d2,loc_72BDA
00070F90                            
00070F90 4E75                       		rts	
00070F92                            ; ===========================================================================
00070F92                            
00070F92                            loc_72BE6:				; XREF: loc_72A64
00070F92 101C                       		move.b	(a4)+,d0
00070F94 D12D 0009                  		add.b	d0,9(a5)
00070F98 4E75                       		rts	
00070F9A                            ; ===========================================================================
00070F9A                            
00070F9A                            loc_72BEE:				; XREF: loc_72A64
00070F9A 422E 002C                  		clr.b	$2C(a6)
00070F9E 4E75                       		rts	
00070FA0                            ; ===========================================================================
00070FA0                            
00070FA0                            loc_72BF4:				; XREF: loc_72A64
00070FA0 0895 0007                  		bclr	#7,(a5)
00070FA4 0895 0004                  		bclr	#4,(a5)
00070FA8 4EBA FB00                  		jsr	sub_726FE(pc)
00070FAC 4A2E 0250                  		tst.b	$250(a6)
00070FB0 6B00                       		bmi.s	loc_72C22
00070FB2 264D                       		movea.l	a5,a3
00070FB4 4BEE 0100                  		lea	$100(a6),a5
00070FB8 226E 0018                  		movea.l	$18(a6),a1
00070FBC 0895 0002                  		bclr	#2,(a5)
00070FC0 08D5 0001                  		bset	#1,(a5)
00070FC4 102D 000B                  		move.b	$B(a5),d0
00070FC8 4EBA 0000                  		jsr	sub_72C4E(pc)
00070FCC 2A4B                       		movea.l	a3,a5
00070FCE                            
00070FCE                            loc_72C22:
00070FCE 504F                       		addq.w	#8,sp
00070FD0 4E75                       		rts	
00070FD2                            ; ===========================================================================
00070FD2                            
00070FD2                            loc_72C26:				; XREF: loc_72A64
00070FD2 7000                       		moveq	#0,d0
00070FD4 101C                       		move.b	(a4)+,d0
00070FD6 1B40 000B                  		move.b	d0,$B(a5)
00070FDA 0815 0002                  		btst	#2,(a5)
00070FDE 6600 0000                  		bne.w	locret_72CAA
00070FE2 226E 0018                  		movea.l	$18(a6),a1
00070FE6 4A2E 000E                  		tst.b	$E(a6)
00070FEA 6700                       		beq.s	sub_72C4E
00070FEC 226D 0020                  		movea.l	$20(a5),a1
00070FF0 4A2E 000E                  		tst.b	$E(a6)
00070FF4 6B00                       		bmi.s	sub_72C4E
00070FF6 226E 0020                  		movea.l	$20(a6),a1
00070FFA                            
00070FFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00070FFA                            
00070FFA                            
00070FFA                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00070FFA 5340                       		subq.w	#1,d0
00070FFC 6B00                       		bmi.s	loc_72C5C
00070FFE 323C 0019                  		move.w	#$19,d1
00071002                            
00071002                            loc_72C56:
00071002 D2C1                       		adda.w	d1,a1
00071004 51C8 FFFC                  		dbf	d0,loc_72C56
00071008                            
00071008                            loc_72C5C:
00071008 1219                       		move.b	(a1)+,d1
0007100A 1B41 001F                  		move.b	d1,$1F(a5)
0007100E 1801                       		move.b	d1,d4
00071010 103C 00B0                  		move.b	#$B0,d0
00071014 4EBA FAB8                  		jsr	sub_72722(pc)
00071018 45FA 0000                  		lea	byte_72D18(pc),a2
0007101C 7613                       		moveq	#$13,d3
0007101E                            
0007101E                            loc_72C72:
0007101E 101A                       		move.b	(a2)+,d0
00071020 1219                       		move.b	(a1)+,d1
00071022 4EBA FAAA                  		jsr	sub_72722(pc)
00071026 51CB FFF6                  		dbf	d3,loc_72C72
0007102A 7A03                       		moveq	#3,d5
0007102C 0244 0007                  		andi.w	#7,d4
00071030 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00071034 162D 0009                  		move.b	9(a5),d3
00071038                            
00071038                            loc_72C8C:
00071038 101A                       		move.b	(a2)+,d0
0007103A 1219                       		move.b	(a1)+,d1
0007103C E20C                       		lsr.b	#1,d4
0007103E 6400                       		bcc.s	loc_72C96
00071040 D203                       		add.b	d3,d1
00071042                            
00071042                            loc_72C96:
00071042 4EBA FA8A                  		jsr	sub_72722(pc)
00071046 51CD FFF0                  		dbf	d5,loc_72C8C
0007104A 103C 00B4                  		move.b	#$B4,d0
0007104E 122D 000A                  		move.b	$A(a5),d1
00071052 4EBA FA7A                  		jsr	sub_72722(pc)
00071056                            
00071056                            locret_72CAA:
00071056 4E75                       		rts	
00071058                            ; End of function sub_72C4E
00071058                            
00071058                            ; ===========================================================================
00071058 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00071060                            
00071060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071060                            
00071060                            
00071060                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00071060 0815 0002                  		btst	#2,(a5)
00071064 6600                       		bne.s	locret_72D16
00071066 7000                       		moveq	#0,d0
00071068 102D 000B                  		move.b	$B(a5),d0
0007106C 226E 0018                  		movea.l	$18(a6),a1
00071070 4A2E 000E                  		tst.b	$E(a6)
00071074 6700                       		beq.s	loc_72CD8
00071076 226E 0020                  		movea.l	$20(a6),a1
0007107A 4A2E 000E                  		tst.b	$E(a6)
0007107E 6B00                       		bmi.s	loc_72CD8
00071080 226E 0020                  		movea.l	$20(a6),a1
00071084                            
00071084                            loc_72CD8:
00071084 5340                       		subq.w	#1,d0
00071086 6B00                       		bmi.s	loc_72CE6
00071088 323C 0019                  		move.w	#$19,d1
0007108C                            
0007108C                            loc_72CE0:
0007108C D2C1                       		adda.w	d1,a1
0007108E 51C8 FFFC                  		dbf	d0,loc_72CE0
00071092                            
00071092                            loc_72CE6:
00071092 D2FC 0015                  		adda.w	#$15,a1
00071096 45FA 0000                  		lea	byte_72D2C(pc),a2
0007109A 102D 001F                  		move.b	$1F(a5),d0
0007109E 0240 0007                  		andi.w	#7,d0
000710A2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000710A6 162D 0009                  		move.b	9(a5),d3
000710AA 6B00                       		bmi.s	locret_72D16
000710AC 7A03                       		moveq	#3,d5
000710AE                            
000710AE                            loc_72D02:
000710AE 101A                       		move.b	(a2)+,d0
000710B0 1219                       		move.b	(a1)+,d1
000710B2 E20C                       		lsr.b	#1,d4
000710B4 6400                       		bcc.s	loc_72D12
000710B6 D203                       		add.b	d3,d1
000710B8 6500                       		bcs.s	loc_72D12
000710BA 4EBA FA12                  		jsr	sub_72722(pc)
000710BE                            
000710BE                            loc_72D12:
000710BE 51CD FFEE                  		dbf	d5,loc_72D02
000710C2                            
000710C2                            locret_72D16:
000710C2 4E75                       		rts	
000710C4                            ; End of function sub_72CB4
000710C4                            
000710C4                            ; ===========================================================================
000710C4 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000710CE 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000710D8 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000710DC                            ; ===========================================================================
000710DC                            
000710DC                            loc_72D30:				; XREF: loc_72A64
000710DC 08D5 0003                  		bset	#3,(a5)
000710E0 2B4C 0014                  		move.l	a4,$14(a5)
000710E4 1B5C 0018                  		move.b	(a4)+,$18(a5)
000710E8 1B5C 0019                  		move.b	(a4)+,$19(a5)
000710EC 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000710F0 101C                       		move.b	(a4)+,d0
000710F2 E208                       		lsr.b	#1,d0
000710F4 1B40 001B                  		move.b	d0,$1B(a5)
000710F8 426D 001C                  		clr.w	$1C(a5)
000710FC 4E75                       		rts	
000710FE                            ; ===========================================================================
000710FE                            
000710FE                            loc_72D52:				; XREF: loc_72A64
000710FE 08D5 0003                  		bset	#3,(a5)
00071102 4E75                       		rts	
00071104                            ; ===========================================================================
00071104                            
00071104                            loc_72D58:				; XREF: loc_72A64
00071104 0895 0007                  		bclr	#7,(a5)
00071108 0895 0004                  		bclr	#4,(a5)
0007110C 4A2D 0001                  		tst.b	1(a5)
00071110 6B00                       		bmi.s	loc_72D74
00071112 4A2E 0008                  		tst.b	8(a6)
00071116 6B00 0000                  		bmi.w	loc_72E02
0007111A 4EBA F98E                  		jsr	sub_726FE(pc)
0007111E 6000                       		bra.s	loc_72D78
00071120                            ; ===========================================================================
00071120                            
00071120                            loc_72D74:
00071120 4EBA FC2A                  		jsr	sub_729A0(pc)
00071124                            
00071124                            loc_72D78:
00071124 4A2E 000E                  		tst.b	$E(a6)
00071128 6A00 0000                  		bpl.w	loc_72E02
0007112C 4216                       		clr.b	0(a6)
0007112E 7000                       		moveq	#0,d0
00071130 102D 0001                  		move.b	1(a5),d0
00071134 6B00                       		bmi.s	loc_72DCC
00071136 41FA F546                  		lea	dword_722CC(pc),a0
0007113A 264D                       		movea.l	a5,a3
0007113C 0C00 0004                  		cmpi.b	#4,d0
00071140 6600                       		bne.s	loc_72DA8
00071142 4A2E 0340                  		tst.b	$340(a6)
00071146 6A00                       		bpl.s	loc_72DA8
00071148 4BEE 0340                  		lea	$340(a6),a5
0007114C 226E 0020                  		movea.l	$20(a6),a1
00071150 6000                       		bra.s	loc_72DB8
00071152                            ; ===========================================================================
00071152                            
00071152                            loc_72DA8:
00071152 5500                       		subq.b	#2,d0
00071154 E508                       		lsl.b	#2,d0
00071156 2A70 0000                  		movea.l	(a0,d0.w),a5
0007115A 4A15                       		tst.b	(a5)
0007115C 6A00                       		bpl.s	loc_72DC8
0007115E 226E 0018                  		movea.l	$18(a6),a1
00071162                            
00071162                            loc_72DB8:
00071162 0895 0002                  		bclr	#2,(a5)
00071166 08D5 0001                  		bset	#1,(a5)
0007116A 102D 000B                  		move.b	$B(a5),d0
0007116E 4EBA FE8A                  		jsr	sub_72C4E(pc)
00071172                            
00071172                            loc_72DC8:
00071172 2A4B                       		movea.l	a3,a5
00071174 6000                       		bra.s	loc_72E02
00071176                            ; ===========================================================================
00071176                            
00071176                            loc_72DCC:
00071176 41EE 0370                  		lea	$370(a6),a0
0007117A 4A10                       		tst.b	(a0)
0007117C 6A00                       		bpl.s	loc_72DE0
0007117E 0C00 00E0                  		cmpi.b	#$E0,d0
00071182 6700                       		beq.s	loc_72DEA
00071184 0C00 00C0                  		cmpi.b	#$C0,d0
00071188 6700                       		beq.s	loc_72DEA
0007118A                            
0007118A                            loc_72DE0:
0007118A 41FA F4F2                  		lea	dword_722CC(pc),a0
0007118E E608                       		lsr.b	#3,d0
00071190 2070 0000                  		movea.l	(a0,d0.w),a0
00071194                            
00071194                            loc_72DEA:
00071194 0890 0002                  		bclr	#2,(a0)
00071198 08D0 0001                  		bset	#1,(a0)
0007119C 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000711A2 6600                       		bne.s	loc_72E02
000711A4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000711AC                            
000711AC                            loc_72E02:
000711AC 504F                       		addq.w	#8,sp
000711AE 4E75                       		rts	
000711B0                            ; ===========================================================================
000711B0                            
000711B0                            loc_72E06:				; XREF: loc_72A64
000711B0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000711B6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000711BA 0815 0002                  		btst	#2,(a5)
000711BE 6600                       		bne.s	locret_72E1E
000711C0 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000711C8                            
000711C8                            locret_72E1E:
000711C8 4E75                       		rts	
000711CA                            ; ===========================================================================
000711CA                            
000711CA                            loc_72E20:				; XREF: loc_72A64
000711CA 0895 0003                  		bclr	#3,(a5)
000711CE 4E75                       		rts	
000711D0                            ; ===========================================================================
000711D0                            
000711D0                            loc_72E26:				; XREF: loc_72A64
000711D0 1B5C 000B                  		move.b	(a4)+,$B(a5)
000711D4 4E75                       		rts	
000711D6                            ; ===========================================================================
000711D6                            
000711D6                            loc_72E2C:				; XREF: loc_72A64
000711D6 101C                       		move.b	(a4)+,d0
000711D8 E148                       		lsl.w	#8,d0
000711DA 101C                       		move.b	(a4)+,d0
000711DC D8C0                       		adda.w	d0,a4
000711DE 534C                       		subq.w	#1,a4
000711E0 4E75                       		rts	
000711E2                            ; ===========================================================================
000711E2                            
000711E2                            loc_72E38:				; XREF: loc_72A64
000711E2 7000                       		moveq	#0,d0
000711E4 101C                       		move.b	(a4)+,d0
000711E6 121C                       		move.b	(a4)+,d1
000711E8 4A35 0024                  		tst.b	$24(a5,d0.w)
000711EC 6600                       		bne.s	loc_72E48
000711EE 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000711F2                            
000711F2                            loc_72E48:
000711F2 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000711F6 66DE                       		bne.s	loc_72E2C
000711F8 544C                       		addq.w	#2,a4
000711FA 4E75                       		rts	
000711FC                            ; ===========================================================================
000711FC                            
000711FC                            loc_72E52:				; XREF: loc_72A64
000711FC 7000                       		moveq	#0,d0
000711FE 102D 000D                  		move.b	$D(a5),d0
00071202 5900                       		subq.b	#4,d0
00071204 2B8C 0000                  		move.l	a4,(a5,d0.w)
00071208 1B40 000D                  		move.b	d0,$D(a5)
0007120C 60C8                       		bra.s	loc_72E2C
0007120E                            ; ===========================================================================
0007120E                            
0007120E                            loc_72E64:				; XREF: loc_72A64
0007120E 103C 0088                  		move.b	#$88,d0
00071212 123C 000F                  		move.b	#$F,d1
00071216 4EBA F8C2                  		jsr	sub_7272E(pc)
0007121A 103C 008C                  		move.b	#$8C,d0
0007121E 123C 000F                  		move.b	#$F,d1
00071222 6000 F8B6                  		bra.w	sub_7272E
00071226                            ; ===========================================================================
00071226                            Kos_Z80:	incbin	sound\z80_1.bin
000712D6 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000712D8 21                         		dc.b $21
000712D9 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000712DB                            		incbin	sound\z80_2.bin
00072986                            		even
00072986                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00079186                            		even
00079186                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00082A24                            		even
00082A24                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00082FB2                            		even
00082FB2                            Music84:	include	sound\music84.asm ; Star Light Act 1
00082FB2                            music84_Header:
00082FB2 =00000001                  smpsHeaderStartSong = 1
00082FB2 0000                       	smpsHeaderVoice     music84_Voices
00082FB4 0603                       	smpsHeaderChan      $06, $03
00082FB6 0205                       	smpsHeaderTempo     $02, $05
00082FB8                            
00082FBC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00082FC0 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00082FC4 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00082FC8 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00082FCC 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00082FD0 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00082FD6 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00082FDC 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00082FE2                            
00082FE2                            ; FM1 Data
00082FE2                            music84_FM1:
00082FE2 E0C0                       	smpsPan             panCenter, $00
00082FE6 E107                       	smpsAlterNote       $07
00082FE8 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00082FEC E106                       	smpsAlterNote       $06
00082FEE 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00082FF2 E10B                       	smpsAlterNote       $0B
00082FF4 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00082FFA E10C                       	smpsAlterNote       $0C
00082FFC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00082FFF E10B                       	smpsAlterNote       $0B
00083001 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083004 E109                       	smpsAlterNote       $09
00083006 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008300B E108                       	smpsAlterNote       $08
0008300D 8001                       	dc.b	nRst, $01
0008300F E10B                       	smpsAlterNote       $0B
00083011 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00083017 E107                       	smpsAlterNote       $07
00083019 9B03                       	dc.b	nD2, $03
0008301B                            
0008301B                            music84_Jump04:
0008301B E107                       	smpsAlterNote       $07
0008301D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083021 E10B                       	smpsAlterNote       $0B
00083023 A202 8001                  	dc.b	nA2, $02, nRst, $01
00083027 E107                       	smpsAlterNote       $07
00083029 9B03                       	dc.b	nD2, $03
0008302B E11A                       	smpsAlterNote       $1A
0008302D A301                       	dc.b	nBb2, $01
0008302F E1F2                       	smpsAlterNote       $F2
00083031 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083034 E1FF                       	smpsAlterNote       $FF
00083036 E701                       	dc.b	smpsNoAttack, $01
00083038 E111                       	smpsAlterNote       $11
0008303A E701                       	dc.b	smpsNoAttack, $01
0008303C E106                       	smpsAlterNote       $06
0008303E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083041 E107                       	smpsAlterNote       $07
00083043 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083047 E108                       	smpsAlterNote       $08
00083049 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00083051 E109                       	smpsAlterNote       $09
00083053 A003                       	dc.b	nG2, $03
00083055 E10C                       	smpsAlterNote       $0C
00083057 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008305B E1FD                       	smpsAlterNote       $FD
0008305D A401                       	dc.b	nB2, $01
0008305F E109                       	smpsAlterNote       $09
00083061 E701                       	dc.b	smpsNoAttack, $01
00083063 E106                       	smpsAlterNote       $06
00083065 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083068 E109                       	smpsAlterNote       $09
0008306A A007                       	dc.b	nG2, $07
0008306C E108                       	smpsAlterNote       $08
0008306E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00083072 E107                       	smpsAlterNote       $07
00083074 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008307A E10B                       	smpsAlterNote       $0B
0008307C A203 8001                  	dc.b	nA2, $03, nRst, $01
00083080 E107                       	smpsAlterNote       $07
00083082 9B03                       	dc.b	nD2, $03
00083084 E11A                       	smpsAlterNote       $1A
00083086 A301                       	dc.b	nBb2, $01
00083088 E1F9                       	smpsAlterNote       $F9
0008308A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008308D E107                       	smpsAlterNote       $07
0008308F E701                       	dc.b	smpsNoAttack, $01
00083091 E111                       	smpsAlterNote       $11
00083093 E701                       	dc.b	smpsNoAttack, $01
00083095 E106                       	smpsAlterNote       $06
00083097 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008309C E107                       	smpsAlterNote       $07
0008309E 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000830A6 E1EC                       	smpsAlterNote       $EC
000830A8 A101                       	dc.b	nAb2, $01
000830AA E108                       	smpsAlterNote       $08
000830AC E701                       	dc.b	smpsNoAttack, $01
000830AE E116                       	smpsAlterNote       $16
000830B0 E701                       	dc.b	smpsNoAttack, $01
000830B2 E1F5                       	smpsAlterNote       $F5
000830B4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000830B7 E10B                       	smpsAlterNote       $0B
000830B9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000830BD E107                       	smpsAlterNote       $07
000830BF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000830C5 E109                       	smpsAlterNote       $09
000830C7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000830CB E10B                       	smpsAlterNote       $0B
000830CD 9603                       	dc.b	nA1, $03
000830CF E107                       	smpsAlterNote       $07
000830D1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000830D7 E10B                       	smpsAlterNote       $0B
000830D9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000830DD E107                       	smpsAlterNote       $07
000830DF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000830E3 E11A                       	smpsAlterNote       $1A
000830E5 A301                       	dc.b	nBb2, $01
000830E7 E1F9                       	smpsAlterNote       $F9
000830E9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000830EC E107                       	smpsAlterNote       $07
000830EE E701                       	dc.b	smpsNoAttack, $01
000830F0 E1FB                       	smpsAlterNote       $FB
000830F2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000830F5 E106                       	smpsAlterNote       $06
000830F7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000830FB E107                       	smpsAlterNote       $07
000830FD 9B03                       	dc.b	nD2, $03
000830FF E108                       	smpsAlterNote       $08
00083101 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083107 E109                       	smpsAlterNote       $09
00083109 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008310D E10C                       	smpsAlterNote       $0C
0008310F A303                       	dc.b	nBb2, $03
00083111 E1F0                       	smpsAlterNote       $F0
00083113 A401                       	dc.b	nB2, $01
00083115 E1FD                       	smpsAlterNote       $FD
00083117 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008311C E106                       	smpsAlterNote       $06
0008311E 8001                       	dc.b	nRst, $01
00083120 E109                       	smpsAlterNote       $09
00083122 A006 8001                  	dc.b	nG2, $06, nRst, $01
00083126 E108                       	smpsAlterNote       $08
00083128 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008312C E107                       	smpsAlterNote       $07
0008312E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083134 E10B                       	smpsAlterNote       $0B
00083136 A203                       	dc.b	nA2, $03
00083138 E107                       	smpsAlterNote       $07
0008313A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008313E E1F2                       	smpsAlterNote       $F2
00083140 A401                       	dc.b	nB2, $01
00083142 E1FF                       	smpsAlterNote       $FF
00083144 E701                       	dc.b	smpsNoAttack, $01
00083146 E107                       	smpsAlterNote       $07
00083148 E701                       	dc.b	smpsNoAttack, $01
0008314A E1FB                       	smpsAlterNote       $FB
0008314C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008314F E106                       	smpsAlterNote       $06
00083151 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083155 E107                       	smpsAlterNote       $07
00083157 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00083161 E117                       	smpsAlterNote       $17
00083163 A001                       	dc.b	nG2, $01
00083165 E1FA                       	smpsAlterNote       $FA
00083167 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008316A E108                       	smpsAlterNote       $08
0008316C E701                       	dc.b	smpsNoAttack, $01
0008316E E1E7                       	smpsAlterNote       $E7
00083170 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083173 E103                       	smpsAlterNote       $03
00083175 E701                       	dc.b	smpsNoAttack, $01
00083177 E10B                       	smpsAlterNote       $0B
00083179 E702                       	dc.b	smpsNoAttack, $02
0008317B E107                       	smpsAlterNote       $07
0008317D 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00083185 E106                       	smpsAlterNote       $06
00083187 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008318D E10C                       	smpsAlterNote       $0C
0008318F 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00083195 E109                       	smpsAlterNote       $09
00083197 9E03                       	dc.b	nF2, $03
00083199 E10C                       	smpsAlterNote       $0C
0008319B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008319F E1EA                       	smpsAlterNote       $EA
000831A1 A201                       	dc.b	nA2, $01
000831A3 E106                       	smpsAlterNote       $06
000831A5 E701                       	dc.b	smpsNoAttack, $01
000831A7 E1E2                       	smpsAlterNote       $E2
000831A9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000831AC E1F0                       	smpsAlterNote       $F0
000831AE E701                       	dc.b	smpsNoAttack, $01
000831B0 E10C                       	smpsAlterNote       $0C
000831B2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000831BE E116                       	smpsAlterNote       $16
000831C0 9C01                       	dc.b	nEb2, $01
000831C2 E105                       	smpsAlterNote       $05
000831C4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000831C7 E1F1                       	smpsAlterNote       $F1
000831C9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000831CC E1FF                       	smpsAlterNote       $FF
000831CE E701                       	dc.b	smpsNoAttack, $01
000831D0 E109                       	smpsAlterNote       $09
000831D2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000831D6 E10C                       	smpsAlterNote       $0C
000831D8 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000831E4 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000831EA E109                       	smpsAlterNote       $09
000831EC 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000831F0 E10C                       	smpsAlterNote       $0C
000831F2 9703                       	dc.b	nBb1, $03
000831F4 E11A                       	smpsAlterNote       $1A
000831F6 A101                       	dc.b	nAb2, $01
000831F8 E1FB                       	smpsAlterNote       $FB
000831FA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000831FD E10A                       	smpsAlterNote       $0A
000831FF E701                       	dc.b	smpsNoAttack, $01
00083201 E1E8                       	smpsAlterNote       $E8
00083203 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083206 E106                       	smpsAlterNote       $06
00083208 E701                       	dc.b	smpsNoAttack, $01
0008320A E10C                       	smpsAlterNote       $0C
0008320C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00083218 E1F9                       	smpsAlterNote       $F9
0008321A 9D01                       	dc.b	nE2, $01
0008321C E108                       	smpsAlterNote       $08
0008321E E701                       	dc.b	smpsNoAttack, $01
00083220 E1F6                       	smpsAlterNote       $F6
00083222 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00083225 E109                       	smpsAlterNote       $09
00083227 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008322B E10C                       	smpsAlterNote       $0C
0008322D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00083239 E108                       	smpsAlterNote       $08
0008323B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00083241 E106                       	smpsAlterNote       $06
00083243 A403 8001                  	dc.b	nB2, $03, nRst, $01
00083247 E108                       	smpsAlterNote       $08
00083249 9D03                       	dc.b	nE2, $03
0008324B E1EB                       	smpsAlterNote       $EB
0008324D A801                       	dc.b	nEb3, $01
0008324F E109                       	smpsAlterNote       $09
00083251 E701                       	dc.b	smpsNoAttack, $01
00083253 E1FA                       	smpsAlterNote       $FA
00083255 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00083258 E108                       	smpsAlterNote       $08
0008325A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00083266 E1E9                       	smpsAlterNote       $E9
00083268 A301                       	dc.b	nBb2, $01
0008326A E107                       	smpsAlterNote       $07
0008326C E701                       	dc.b	smpsNoAttack, $01
0008326E E1F0                       	smpsAlterNote       $F0
00083270 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083273 E1F7                       	smpsAlterNote       $F7
00083275 E701                       	dc.b	smpsNoAttack, $01
00083277 E107                       	smpsAlterNote       $07
00083279 E701                       	dc.b	smpsNoAttack, $01
0008327B E106                       	smpsAlterNote       $06
0008327D E701                       	dc.b	smpsNoAttack, $01
0008327F E108                       	smpsAlterNote       $08
00083281 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00083287 E106                       	smpsAlterNote       $06
00083289 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008328D E108                       	smpsAlterNote       $08
0008328F 9D03                       	dc.b	nE2, $03
00083291 E10B                       	smpsAlterNote       $0B
00083293 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008329B E108                       	smpsAlterNote       $08
0008329D 9D03                       	dc.b	nE2, $03
0008329F E10B                       	smpsAlterNote       $0B
000832A1 9603 8001                  	dc.b	nA1, $03, nRst, $01
000832A5 E113                       	smpsAlterNote       $13
000832A7 A001                       	dc.b	nG2, $01
000832A9 E118                       	smpsAlterNote       $18
000832AB E701                       	dc.b	smpsNoAttack, $01
000832AD E1E9                       	smpsAlterNote       $E9
000832AF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000832B2 E1F3                       	smpsAlterNote       $F3
000832B4 E701                       	dc.b	smpsNoAttack, $01
000832B6 E1FD                       	smpsAlterNote       $FD
000832B8 E701                       	dc.b	smpsNoAttack, $01
000832BA E102                       	smpsAlterNote       $02
000832BC E701                       	dc.b	smpsNoAttack, $01
000832BE E107                       	smpsAlterNote       $07
000832C0 8001                       	dc.b	nRst, $01
000832C2 E10B                       	smpsAlterNote       $0B
000832C4 9603                       	dc.b	nA1, $03
000832C6 E10C                       	smpsAlterNote       $0C
000832C8 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000832CE E10B                       	smpsAlterNote       $0B
000832D0 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000832DC 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000832E2 E107                       	smpsAlterNote       $07
000832E4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000832EA E10B                       	smpsAlterNote       $0B
000832EC A203                       	dc.b	nA2, $03
000832EE E107                       	smpsAlterNote       $07
000832F0 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000832F4 E1F2                       	smpsAlterNote       $F2
000832F6 A401                       	dc.b	nB2, $01
000832F8 E1FF                       	smpsAlterNote       $FF
000832FA E701                       	dc.b	smpsNoAttack, $01
000832FC E107                       	smpsAlterNote       $07
000832FE E701                       	dc.b	smpsNoAttack, $01
00083300 E1FB                       	smpsAlterNote       $FB
00083302 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083305 E106                       	smpsAlterNote       $06
00083307 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008330B E107                       	smpsAlterNote       $07
0008330D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083311 E108                       	smpsAlterNote       $08
00083313 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00083319 E109                       	smpsAlterNote       $09
0008331B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008331F E10C                       	smpsAlterNote       $0C
00083321 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00083325 E1F0                       	smpsAlterNote       $F0
00083327 A401                       	dc.b	nB2, $01
00083329 E109                       	smpsAlterNote       $09
0008332B E701                       	dc.b	smpsNoAttack, $01
0008332D E106                       	smpsAlterNote       $06
0008332F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083332 E109                       	smpsAlterNote       $09
00083334 A007                       	dc.b	nG2, $07
00083336 E108                       	smpsAlterNote       $08
00083338 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008333C E107                       	smpsAlterNote       $07
0008333E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083344 E10B                       	smpsAlterNote       $0B
00083346 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008334A E107                       	smpsAlterNote       $07
0008334C 9B03                       	dc.b	nD2, $03
0008334E E11A                       	smpsAlterNote       $1A
00083350 A301                       	dc.b	nBb2, $01
00083352 E1F2                       	smpsAlterNote       $F2
00083354 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083357 E1FF                       	smpsAlterNote       $FF
00083359 E701                       	dc.b	smpsNoAttack, $01
0008335B E111                       	smpsAlterNote       $11
0008335D E701                       	dc.b	smpsNoAttack, $01
0008335F E106                       	smpsAlterNote       $06
00083361 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083364 E107                       	smpsAlterNote       $07
00083366 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00083372 E117                       	smpsAlterNote       $17
00083374 A001                       	dc.b	nG2, $01
00083376 E1FA                       	smpsAlterNote       $FA
00083378 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008337B E116                       	smpsAlterNote       $16
0008337D E701                       	dc.b	smpsNoAttack, $01
0008337F E1F5                       	smpsAlterNote       $F5
00083381 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083384 E103                       	smpsAlterNote       $03
00083386 E701                       	dc.b	smpsNoAttack, $01
00083388 E10B                       	smpsAlterNote       $0B
0008338A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008338E E107                       	smpsAlterNote       $07
00083390 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083396 E109                       	smpsAlterNote       $09
00083398 9E03                       	dc.b	nF2, $03
0008339A E10B                       	smpsAlterNote       $0B
0008339C 9603 8001                  	dc.b	nA1, $03, nRst, $01
000833A0 E107                       	smpsAlterNote       $07
000833A2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000833A8 E10B                       	smpsAlterNote       $0B
000833AA A203 8001                  	dc.b	nA2, $03, nRst, $01
000833AE E107                       	smpsAlterNote       $07
000833B0 9B03                       	dc.b	nD2, $03
000833B2 E11A                       	smpsAlterNote       $1A
000833B4 A301                       	dc.b	nBb2, $01
000833B6 E1F9                       	smpsAlterNote       $F9
000833B8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000833BB E107                       	smpsAlterNote       $07
000833BD E701                       	dc.b	smpsNoAttack, $01
000833BF E111                       	smpsAlterNote       $11
000833C1 E701                       	dc.b	smpsNoAttack, $01
000833C3 E106                       	smpsAlterNote       $06
000833C5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000833CA E107                       	smpsAlterNote       $07
000833CC 9B03                       	dc.b	nD2, $03
000833CE E108                       	smpsAlterNote       $08
000833D0 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000833D6 E109                       	smpsAlterNote       $09
000833D8 A003                       	dc.b	nG2, $03
000833DA E10C                       	smpsAlterNote       $0C
000833DC A303 8001                  	dc.b	nBb2, $03, nRst, $01
000833E0 E1FD                       	smpsAlterNote       $FD
000833E2 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000833E7 E106                       	smpsAlterNote       $06
000833E9 8001                       	dc.b	nRst, $01
000833EB E109                       	smpsAlterNote       $09
000833ED A006 8001                  	dc.b	nG2, $06, nRst, $01
000833F1 E108                       	smpsAlterNote       $08
000833F3 9C03                       	dc.b	nEb2, $03
000833F5 E107                       	smpsAlterNote       $07
000833F7 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000833FD E10B                       	smpsAlterNote       $0B
000833FF A203 8001                  	dc.b	nA2, $03, nRst, $01
00083403 E107                       	smpsAlterNote       $07
00083405 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083409 E11A                       	smpsAlterNote       $1A
0008340B A301                       	dc.b	nBb2, $01
0008340D E1F9                       	smpsAlterNote       $F9
0008340F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083412 E107                       	smpsAlterNote       $07
00083414 E701                       	dc.b	smpsNoAttack, $01
00083416 E1FB                       	smpsAlterNote       $FB
00083418 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008341B E106                       	smpsAlterNote       $06
0008341D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083421 E107                       	smpsAlterNote       $07
00083423 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008342B E1EC                       	smpsAlterNote       $EC
0008342D A101                       	dc.b	nAb2, $01
0008342F E108                       	smpsAlterNote       $08
00083431 E701                       	dc.b	smpsNoAttack, $01
00083433 E1E7                       	smpsAlterNote       $E7
00083435 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083438 E1F5                       	smpsAlterNote       $F5
0008343A E701                       	dc.b	smpsNoAttack, $01
0008343C E10B                       	smpsAlterNote       $0B
0008343E E702                       	dc.b	smpsNoAttack, $02
00083440 E107                       	smpsAlterNote       $07
00083442 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00083448 E106                       	smpsAlterNote       $06
0008344A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00083450 E10C                       	smpsAlterNote       $0C
00083452 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008345A E109                       	smpsAlterNote       $09
0008345C 9E03                       	dc.b	nF2, $03
0008345E E10C                       	smpsAlterNote       $0C
00083460 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083464 E1EA                       	smpsAlterNote       $EA
00083466 A201                       	dc.b	nA2, $01
00083468 E106                       	smpsAlterNote       $06
0008346A E701                       	dc.b	smpsNoAttack, $01
0008346C E114                       	smpsAlterNote       $14
0008346E E701                       	dc.b	smpsNoAttack, $01
00083470 E1F0                       	smpsAlterNote       $F0
00083472 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00083475 E10C                       	smpsAlterNote       $0C
00083477 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00083483 9703                       	dc.b	nBb1, $03
00083485 E116                       	smpsAlterNote       $16
00083487 9C01                       	dc.b	nEb2, $01
00083489 E105                       	smpsAlterNote       $05
0008348B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008348E E113                       	smpsAlterNote       $13
00083490 E701                       	dc.b	smpsNoAttack, $01
00083492 E1FF                       	smpsAlterNote       $FF
00083494 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00083497 E109                       	smpsAlterNote       $09
00083499 E703                       	dc.b	smpsNoAttack, $03
0008349B E10C                       	smpsAlterNote       $0C
0008349D 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000834A9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000834B1 E109                       	smpsAlterNote       $09
000834B3 9E03                       	dc.b	nF2, $03
000834B5 E10C                       	smpsAlterNote       $0C
000834B7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000834BB E1EC                       	smpsAlterNote       $EC
000834BD A201                       	dc.b	nA2, $01
000834BF E10A                       	smpsAlterNote       $0A
000834C1 E701                       	dc.b	smpsNoAttack, $01
000834C3 E1E8                       	smpsAlterNote       $E8
000834C5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000834C8 E1F7                       	smpsAlterNote       $F7
000834CA E701                       	dc.b	smpsNoAttack, $01
000834CC E10C                       	smpsAlterNote       $0C
000834CE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000834DA E1EA                       	smpsAlterNote       $EA
000834DC 9D01                       	dc.b	nE2, $01
000834DE E108                       	smpsAlterNote       $08
000834E0 E701                       	dc.b	smpsNoAttack, $01
000834E2 E1F6                       	smpsAlterNote       $F6
000834E4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000834E7 E105                       	smpsAlterNote       $05
000834E9 E701                       	dc.b	smpsNoAttack, $01
000834EB E109                       	smpsAlterNote       $09
000834ED E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000834F1 E10C                       	smpsAlterNote       $0C
000834F3 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000834FF E108                       	smpsAlterNote       $08
00083501 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00083507 E106                       	smpsAlterNote       $06
00083509 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008350D E108                       	smpsAlterNote       $08
0008350F 9D03                       	dc.b	nE2, $03
00083511 E1EB                       	smpsAlterNote       $EB
00083513 A801                       	dc.b	nEb3, $01
00083515 E109                       	smpsAlterNote       $09
00083517 E701                       	dc.b	smpsNoAttack, $01
00083519 E1EB                       	smpsAlterNote       $EB
0008351B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008351E E108                       	smpsAlterNote       $08
00083520 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008352C E1E9                       	smpsAlterNote       $E9
0008352E A301                       	dc.b	nBb2, $01
00083530 E1F8                       	smpsAlterNote       $F8
00083532 E701                       	dc.b	smpsNoAttack, $01
00083534 E116                       	smpsAlterNote       $16
00083536 E701                       	dc.b	smpsNoAttack, $01
00083538 E1F7                       	smpsAlterNote       $F7
0008353A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008353D E107                       	smpsAlterNote       $07
0008353F E701                       	dc.b	smpsNoAttack, $01
00083541 E1EE                       	smpsAlterNote       $EE
00083543 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083546 E106                       	smpsAlterNote       $06
00083548 8001                       	dc.b	nRst, $01
0008354A E108                       	smpsAlterNote       $08
0008354C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00083552 E106                       	smpsAlterNote       $06
00083554 A402 8001                  	dc.b	nB2, $02, nRst, $01
00083558 E108                       	smpsAlterNote       $08
0008355A 9D03                       	dc.b	nE2, $03
0008355C E10B                       	smpsAlterNote       $0B
0008355E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00083564 E108                       	smpsAlterNote       $08
00083566 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008356A E10B                       	smpsAlterNote       $0B
0008356C 9603                       	dc.b	nA1, $03
0008356E E10E                       	smpsAlterNote       $0E
00083570 A001                       	dc.b	nG2, $01
00083572 E118                       	smpsAlterNote       $18
00083574 E701                       	dc.b	smpsNoAttack, $01
00083576 E1E9                       	smpsAlterNote       $E9
00083578 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008357B E1EE                       	smpsAlterNote       $EE
0008357D E701                       	dc.b	smpsNoAttack, $01
0008357F E1F8                       	smpsAlterNote       $F8
00083581 E701                       	dc.b	smpsNoAttack, $01
00083583 E102                       	smpsAlterNote       $02
00083585 E701                       	dc.b	smpsNoAttack, $01
00083587 E107                       	smpsAlterNote       $07
00083589 8001                       	dc.b	nRst, $01
0008358B E10B                       	smpsAlterNote       $0B
0008358D 9603                       	dc.b	nA1, $03
0008358F E10C                       	smpsAlterNote       $0C
00083591 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00083597 E10B                       	smpsAlterNote       $0B
00083599 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000835A5 8001 9603                  	dc.b	nRst, $01, nA1, $03
000835A9 E10C                       	smpsAlterNote       $0C
000835AB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000835B7 8001                       	dc.b	nRst, $01
000835B9 E10B                       	smpsAlterNote       $0B
000835BB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000835C3 E107                       	smpsAlterNote       $07
000835C5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000835C9 E10B                       	smpsAlterNote       $0B
000835CB 9603                       	dc.b	nA1, $03
000835CD E109                       	smpsAlterNote       $09
000835CF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000835D3 E108                       	smpsAlterNote       $08
000835D5 9D06                       	dc.b	nE2, $06
000835D7 E107                       	smpsAlterNote       $07
000835D9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000835DD E106                       	smpsAlterNote       $06
000835DF 9903                       	dc.b	nC2, $03
000835E1 E10C                       	smpsAlterNote       $0C
000835E3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000835E7 E10B                       	smpsAlterNote       $0B
000835E9 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000835F5 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000835FF E10C                       	smpsAlterNote       $0C
00083601 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008360D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00083619 8001                       	dc.b	nRst, $01
0008361B E10B                       	smpsAlterNote       $0B
0008361D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00083629 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00083635 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00083641 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008364B E10C                       	smpsAlterNote       $0C
0008364D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00083659 E10B                       	smpsAlterNote       $0B
0008365B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00083663 E107                       	smpsAlterNote       $07
00083665 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00083669 E10B                       	smpsAlterNote       $0B
0008366B 9603                       	dc.b	nA1, $03
0008366D E109                       	smpsAlterNote       $09
0008366F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00083673 E108                       	smpsAlterNote       $08
00083675 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00083679 E107                       	smpsAlterNote       $07
0008367B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008367F E106                       	smpsAlterNote       $06
00083681 9903                       	dc.b	nC2, $03
00083683 E10C                       	smpsAlterNote       $0C
00083685 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083689 E10B                       	smpsAlterNote       $0B
0008368B 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00083697 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000836A1 E10C                       	smpsAlterNote       $0C
000836A3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000836AF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000836BB 8001                       	dc.b	nRst, $01
000836BD E10B                       	smpsAlterNote       $0B
000836BF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000836CB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000836D5 E10C                       	smpsAlterNote       $0C
000836D7 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000836E3 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000836EF E10B                       	smpsAlterNote       $0B
000836F1 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000836FD 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00083707 E10C                       	smpsAlterNote       $0C
00083709 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083715 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00083721 E10B                       	smpsAlterNote       $0B
00083723 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008372F 8001                       	dc.b	nRst, $01
00083731 E1EC                       	smpsAlterNote       $EC
00083733 A101                       	dc.b	nAb2, $01
00083735 E1FA                       	smpsAlterNote       $FA
00083737 E701                       	dc.b	smpsNoAttack, $01
00083739 E116                       	smpsAlterNote       $16
0008373B E701                       	dc.b	smpsNoAttack, $01
0008373D E1F5                       	smpsAlterNote       $F5
0008373F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083742 E10B                       	smpsAlterNote       $0B
00083744 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00083750 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008375C E107                       	smpsAlterNote       $07
0008375E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083764 E10B                       	smpsAlterNote       $0B
00083766 A203                       	dc.b	nA2, $03
00083768 E107                       	smpsAlterNote       $07
0008376A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008376E E1F3                       	smpsAlterNote       $F3
00083770 A401                       	dc.b	nB2, $01
00083772 E102                       	smpsAlterNote       $02
00083774 E701                       	dc.b	smpsNoAttack, $01
00083776 E109                       	smpsAlterNote       $09
00083778 E701                       	dc.b	smpsNoAttack, $01
0008377A E102                       	smpsAlterNote       $02
0008377C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008377F E106                       	smpsAlterNote       $06
00083781 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083785 E107                       	smpsAlterNote       $07
00083787 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008378B E108                       	smpsAlterNote       $08
0008378D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00083793 E109                       	smpsAlterNote       $09
00083795 A003 8001                  	dc.b	nG2, $03, nRst, $01
00083799 E1F2                       	smpsAlterNote       $F2
0008379B A401                       	dc.b	nB2, $01
0008379D E1FF                       	smpsAlterNote       $FF
0008379F E701                       	dc.b	smpsNoAttack, $01
000837A1 E111                       	smpsAlterNote       $11
000837A3 E701                       	dc.b	smpsNoAttack, $01
000837A5 E1FB                       	smpsAlterNote       $FB
000837A7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000837AA E106                       	smpsAlterNote       $06
000837AC E702                       	dc.b	smpsNoAttack, $02
000837AE E109                       	smpsAlterNote       $09
000837B0 A007                       	dc.b	nG2, $07
000837B2 E108                       	smpsAlterNote       $08
000837B4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000837B8 E107                       	smpsAlterNote       $07
000837BA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000837C0 E10B                       	smpsAlterNote       $0B
000837C2 A202 8001                  	dc.b	nA2, $02, nRst, $01
000837C6 E107                       	smpsAlterNote       $07
000837C8 9B03                       	dc.b	nD2, $03
000837CA E11A                       	smpsAlterNote       $1A
000837CC A301                       	dc.b	nBb2, $01
000837CE E1F2                       	smpsAlterNote       $F2
000837D0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000837D3 E1FF                       	smpsAlterNote       $FF
000837D5 E701                       	dc.b	smpsNoAttack, $01
000837D7 E111                       	smpsAlterNote       $11
000837D9 E701                       	dc.b	smpsNoAttack, $01
000837DB E106                       	smpsAlterNote       $06
000837DD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000837E0 E107                       	smpsAlterNote       $07
000837E2 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000837EE E117                       	smpsAlterNote       $17
000837F0 A001                       	dc.b	nG2, $01
000837F2 E1FA                       	smpsAlterNote       $FA
000837F4 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000837F7 E116                       	smpsAlterNote       $16
000837F9 E701                       	dc.b	smpsNoAttack, $01
000837FB E1F5                       	smpsAlterNote       $F5
000837FD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00083800 E103                       	smpsAlterNote       $03
00083802 E701                       	dc.b	smpsNoAttack, $01
00083804 E10B                       	smpsAlterNote       $0B
00083806 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008380A E107                       	smpsAlterNote       $07
0008380C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083812 E109                       	smpsAlterNote       $09
00083814 9E03                       	dc.b	nF2, $03
00083816 E10B                       	smpsAlterNote       $0B
00083818 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008381C E107                       	smpsAlterNote       $07
0008381E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00083824 E10B                       	smpsAlterNote       $0B
00083826 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008382A E107                       	smpsAlterNote       $07
0008382C 9B03                       	dc.b	nD2, $03
0008382E E11A                       	smpsAlterNote       $1A
00083830 A301                       	dc.b	nBb2, $01
00083832 E1F9                       	smpsAlterNote       $F9
00083834 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083837 E1FF                       	smpsAlterNote       $FF
00083839 E701                       	dc.b	smpsNoAttack, $01
0008383B E111                       	smpsAlterNote       $11
0008383D E701                       	dc.b	smpsNoAttack, $01
0008383F E106                       	smpsAlterNote       $06
00083841 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083844 E107                       	smpsAlterNote       $07
00083846 9B03                       	dc.b	nD2, $03
00083848 E108                       	smpsAlterNote       $08
0008384A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00083850 E109                       	smpsAlterNote       $09
00083852 A003                       	dc.b	nG2, $03
00083854 E1F0                       	smpsAlterNote       $F0
00083856 A501                       	dc.b	nC3, $01
00083858 E106                       	smpsAlterNote       $06
0008385A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008385E E109                       	smpsAlterNote       $09
00083860 A006 8001                  	dc.b	nG2, $06, nRst, $01
00083864 E108                       	smpsAlterNote       $08
00083866 9C03                       	dc.b	nEb2, $03
00083868 E107                       	smpsAlterNote       $07
0008386A 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00083870 E10B                       	smpsAlterNote       $0B
00083872 A203 8001                  	dc.b	nA2, $03, nRst, $01
00083876 E107                       	smpsAlterNote       $07
00083878 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008387C E11A                       	smpsAlterNote       $1A
0008387E A301                       	dc.b	nBb2, $01
00083880 E1F9                       	smpsAlterNote       $F9
00083882 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083885 E107                       	smpsAlterNote       $07
00083887 E701                       	dc.b	smpsNoAttack, $01
00083889 E1FB                       	smpsAlterNote       $FB
0008388B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008388E E106                       	smpsAlterNote       $06
00083890 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083894 E107                       	smpsAlterNote       $07
00083896 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008389E E1EC                       	smpsAlterNote       $EC
000838A0 A101                       	dc.b	nAb2, $01
000838A2 E108                       	smpsAlterNote       $08
000838A4 E701                       	dc.b	smpsNoAttack, $01
000838A6 E1E7                       	smpsAlterNote       $E7
000838A8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000838AB E1F5                       	smpsAlterNote       $F5
000838AD E701                       	dc.b	smpsNoAttack, $01
000838AF E10B                       	smpsAlterNote       $0B
000838B1 E702                       	dc.b	smpsNoAttack, $02
000838B3 E107                       	smpsAlterNote       $07
000838B5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000838BB E106                       	smpsAlterNote       $06
000838BD 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000838C3 E10C                       	smpsAlterNote       $0C
000838C5 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000838CD E109                       	smpsAlterNote       $09
000838CF 9E03                       	dc.b	nF2, $03
000838D1 E10C                       	smpsAlterNote       $0C
000838D3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000838D7 E1EA                       	smpsAlterNote       $EA
000838D9 A201                       	dc.b	nA2, $01
000838DB E106                       	smpsAlterNote       $06
000838DD E701                       	dc.b	smpsNoAttack, $01
000838DF E114                       	smpsAlterNote       $14
000838E1 E701                       	dc.b	smpsNoAttack, $01
000838E3 E1F0                       	smpsAlterNote       $F0
000838E5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000838E8 E10C                       	smpsAlterNote       $0C
000838EA E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000838F6 9703                       	dc.b	nBb1, $03
000838F8 E116                       	smpsAlterNote       $16
000838FA 9C01                       	dc.b	nEb2, $01
000838FC E105                       	smpsAlterNote       $05
000838FE E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00083901 E113                       	smpsAlterNote       $13
00083903 E701                       	dc.b	smpsNoAttack, $01
00083905 E1FF                       	smpsAlterNote       $FF
00083907 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008390A E109                       	smpsAlterNote       $09
0008390C E703                       	dc.b	smpsNoAttack, $03
0008390E E10C                       	smpsAlterNote       $0C
00083910 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008391C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00083924 E109                       	smpsAlterNote       $09
00083926 9E03                       	dc.b	nF2, $03
00083928 E10C                       	smpsAlterNote       $0C
0008392A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008392E E1EA                       	smpsAlterNote       $EA
00083930 A201                       	dc.b	nA2, $01
00083932 E106                       	smpsAlterNote       $06
00083934 E701                       	dc.b	smpsNoAttack, $01
00083936 E1E2                       	smpsAlterNote       $E2
00083938 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008393B E1F0                       	smpsAlterNote       $F0
0008393D E701                       	dc.b	smpsNoAttack, $01
0008393F E10C                       	smpsAlterNote       $0C
00083941 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008394D E116                       	smpsAlterNote       $16
0008394F 9C01                       	dc.b	nEb2, $01
00083951 E105                       	smpsAlterNote       $05
00083953 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00083956 E1F1                       	smpsAlterNote       $F1
00083958 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008395B E1FF                       	smpsAlterNote       $FF
0008395D E701                       	dc.b	smpsNoAttack, $01
0008395F E109                       	smpsAlterNote       $09
00083961 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083965 E10C                       	smpsAlterNote       $0C
00083967 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00083973 E106                       	smpsAlterNote       $06
00083975 9903                       	dc.b	nC2, $03
00083977 E107                       	smpsAlterNote       $07
00083979 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008397D E109                       	smpsAlterNote       $09
0008397F 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00083985 E107                       	smpsAlterNote       $07
00083987 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008398B E108                       	smpsAlterNote       $08
0008398D 9D03                       	dc.b	nE2, $03
0008398F E10B                       	smpsAlterNote       $0B
00083991 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00083997 E109                       	smpsAlterNote       $09
00083999 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008399F E10C                       	smpsAlterNote       $0C
000839A1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000839A7 E106                       	smpsAlterNote       $06
000839A9 9903                       	dc.b	nC2, $03
000839AB E11A                       	smpsAlterNote       $1A
000839AD A301                       	dc.b	nBb2, $01
000839AF E1F9                       	smpsAlterNote       $F9
000839B1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000839B4 E1FF                       	smpsAlterNote       $FF
000839B6 E701                       	dc.b	smpsNoAttack, $01
000839B8 E111                       	smpsAlterNote       $11
000839BA E701                       	dc.b	smpsNoAttack, $01
000839BC E106                       	smpsAlterNote       $06
000839BE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000839C5 E109                       	smpsAlterNote       $09
000839C7 A003                       	dc.b	nG2, $03
000839C9 E106                       	smpsAlterNote       $06
000839CB 9907                       	dc.b	nC2, $07
000839CD E107                       	smpsAlterNote       $07
000839CF 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000839D7 E10B                       	smpsAlterNote       $0B
000839D9 A203                       	dc.b	nA2, $03
000839DB E107                       	smpsAlterNote       $07
000839DD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000839E1 E1F2                       	smpsAlterNote       $F2
000839E3 A401                       	dc.b	nB2, $01
000839E5 E1F9                       	smpsAlterNote       $F9
000839E7 E701                       	dc.b	smpsNoAttack, $01
000839E9 E107                       	smpsAlterNote       $07
000839EB E701                       	dc.b	smpsNoAttack, $01
000839ED E1FB                       	smpsAlterNote       $FB
000839EF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000839F2 E106                       	smpsAlterNote       $06
000839F4 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000839F8 E107                       	smpsAlterNote       $07
000839FA 9B03                       	dc.b	nD2, $03
000839FC E108                       	smpsAlterNote       $08
000839FE 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00083A04 E109                       	smpsAlterNote       $09
00083A06 A003 8001                  	dc.b	nG2, $03, nRst, $01
00083A0A E1F2                       	smpsAlterNote       $F2
00083A0C A401                       	dc.b	nB2, $01
00083A0E E1F9                       	smpsAlterNote       $F9
00083A10 E701                       	dc.b	smpsNoAttack, $01
00083A12 E107                       	smpsAlterNote       $07
00083A14 E701                       	dc.b	smpsNoAttack, $01
00083A16 E1FB                       	smpsAlterNote       $FB
00083A18 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083A1B E106                       	smpsAlterNote       $06
00083A1D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083A21 E108                       	smpsAlterNote       $08
00083A23 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00083A27 E10C                       	smpsAlterNote       $0C
00083A29 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00083A2D E107                       	smpsAlterNote       $07
00083A2F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083A35 E10B                       	smpsAlterNote       $0B
00083A37 A203                       	dc.b	nA2, $03
00083A39 E107                       	smpsAlterNote       $07
00083A3B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083A3F E1F2                       	smpsAlterNote       $F2
00083A41 A401                       	dc.b	nB2, $01
00083A43 E1FF                       	smpsAlterNote       $FF
00083A45 E701                       	dc.b	smpsNoAttack, $01
00083A47 E107                       	smpsAlterNote       $07
00083A49 E701                       	dc.b	smpsNoAttack, $01
00083A4B E1FB                       	smpsAlterNote       $FB
00083A4D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083A50 E106                       	smpsAlterNote       $06
00083A52 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00083A56 E107                       	smpsAlterNote       $07
00083A58 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00083A5C E108                       	smpsAlterNote       $08
00083A5E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00083A64 E109                       	smpsAlterNote       $09
00083A66 A003 8001                  	dc.b	nG2, $03, nRst, $01
00083A6A E1F2                       	smpsAlterNote       $F2
00083A6C A401                       	dc.b	nB2, $01
00083A6E E1FF                       	smpsAlterNote       $FF
00083A70 E701                       	dc.b	smpsNoAttack, $01
00083A72 E111                       	smpsAlterNote       $11
00083A74 E701                       	dc.b	smpsNoAttack, $01
00083A76 E1FB                       	smpsAlterNote       $FB
00083A78 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00083A7B E106                       	smpsAlterNote       $06
00083A7D E702                       	dc.b	smpsNoAttack, $02
00083A7F E108                       	smpsAlterNote       $08
00083A81 9C07                       	dc.b	nEb2, $07
00083A83 E10C                       	smpsAlterNote       $0C
00083A85 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083A89 E107                       	smpsAlterNote       $07
00083A8B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00083A91 E10B                       	smpsAlterNote       $0B
00083A93 A202 8001                  	dc.b	nA2, $02, nRst, $01
00083A97 E107                       	smpsAlterNote       $07
00083A99 9B03                       	dc.b	nD2, $03
00083A9B E11A                       	smpsAlterNote       $1A
00083A9D A301                       	dc.b	nBb2, $01
00083A9F E1F2                       	smpsAlterNote       $F2
00083AA1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083AA4 E1FF                       	smpsAlterNote       $FF
00083AA6 E701                       	dc.b	smpsNoAttack, $01
00083AA8 E111                       	smpsAlterNote       $11
00083AAA E701                       	dc.b	smpsNoAttack, $01
00083AAC E106                       	smpsAlterNote       $06
00083AAE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083AB1 E107                       	smpsAlterNote       $07
00083AB3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083AB7 E108                       	smpsAlterNote       $08
00083AB9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00083AC1 E109                       	smpsAlterNote       $09
00083AC3 A003                       	dc.b	nG2, $03
00083AC5 E11A                       	smpsAlterNote       $1A
00083AC7 A301                       	dc.b	nBb2, $01
00083AC9 E1F2                       	smpsAlterNote       $F2
00083ACB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00083ACE E1FF                       	smpsAlterNote       $FF
00083AD0 E701                       	dc.b	smpsNoAttack, $01
00083AD2 E111                       	smpsAlterNote       $11
00083AD4 E701                       	dc.b	smpsNoAttack, $01
00083AD6 E106                       	smpsAlterNote       $06
00083AD8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00083ADB E108                       	smpsAlterNote       $08
00083ADD 9C07                       	dc.b	nEb2, $07
00083ADF E10C                       	smpsAlterNote       $0C
00083AE1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00083AE5 E107                       	smpsAlterNote       $07
00083AE7 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00083AF3 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00083AFD E108                       	smpsAlterNote       $08
00083AFF 9C06                       	dc.b	nEb2, $06
00083B01 E10C                       	smpsAlterNote       $0C
00083B03 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00083B07 E108                       	smpsAlterNote       $08
00083B09 9C03                       	dc.b	nEb2, $03
00083B0B E109                       	smpsAlterNote       $09
00083B0D A003 8001                  	dc.b	nG2, $03, nRst, $01
00083B11 E10C                       	smpsAlterNote       $0C
00083B13 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00083B1B E107                       	smpsAlterNote       $07
00083B1D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00083B21 F6F4 F8                    	smpsJump            music84_Jump04
00083B24                            
00083B24                            ; FM2 Data
00083B24                            music84_FM2:
00083B24 E0C0                       	smpsPan             panCenter, $00
00083B28 E10B                       	smpsAlterNote       $0B
00083B2A C603 8007                  	dc.b	nA5, $03, nRst, $07
00083B2E E109                       	smpsAlterNote       $09
00083B30 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00083B34 E108                       	smpsAlterNote       $08
00083B36 C103 8004                  	dc.b	nE5, $03, nRst, $04
00083B3C E080                       	smpsPan             panLeft, $00
00083B3E E10C                       	smpsAlterNote       $0C
00083B40 E6F9                       	smpsAlterVol        $F9
00083B42 C703                       	dc.b	nBb5, $03
00083B44 E10B                       	smpsAlterNote       $0B
00083B46 C603 8001                  	dc.b	nA5, $03, nRst, $01
00083B4A E109                       	smpsAlterNote       $09
00083B4C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00083B52 E108                       	smpsAlterNote       $08
00083B54 C103 8001                  	dc.b	nE5, $03, nRst, $01
00083B58 E106                       	smpsAlterNote       $06
00083B5A BD03                       	dc.b	nC5, $03
00083B5C E10B                       	smpsAlterNote       $0B
00083B5E BA03 8001                  	dc.b	nA4, $03, nRst, $01
00083B64 E0C0                       	smpsPan             panCenter, $00
00083B66 E107                       	smpsAlterNote       $07
00083B68 E606                       	smpsAlterVol        $06
00083B6A BF03                       	dc.b	nD5, $03
00083B6C                            
00083B6C                            music84_Jump03:
00083B6C E108                       	smpsAlterNote       $08
00083B6E C103 8001                  	dc.b	nE5, $03, nRst, $01
00083B72 E109                       	smpsAlterNote       $09
00083B74 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00083B7A E10B                       	smpsAlterNote       $0B
00083B7C C607                       	dc.b	nA5, $07
00083B7E E107                       	smpsAlterNote       $07
00083B80 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00083B84 E106                       	smpsAlterNote       $06
00083B86 C90D                       	dc.b	nC6, $0D
00083B88 E100                       	smpsAlterNote       $00
00083B8A E701                       	dc.b	smpsNoAttack, $01
00083B8C E1FF                       	smpsAlterNote       $FF
00083B8E E701                       	dc.b	smpsNoAttack, $01
00083B90 E103                       	smpsAlterNote       $03
00083B92 E701                       	dc.b	smpsNoAttack, $01
00083B94 E109                       	smpsAlterNote       $09
00083B96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083B9A E106                       	smpsAlterNote       $06
00083B9C E701                       	dc.b	smpsNoAttack, $01
00083B9E E100                       	smpsAlterNote       $00
00083BA0 E701                       	dc.b	smpsNoAttack, $01
00083BA2 E10C                       	smpsAlterNote       $0C
00083BA4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00083BA8 E10B                       	smpsAlterNote       $0B
00083BAA C603                       	dc.b	nA5, $03
00083BAC E109                       	smpsAlterNote       $09
00083BAE C403 8001                  	dc.b	nG5, $03, nRst, $01
00083BB2 E10B                       	smpsAlterNote       $0B
00083BB4 C60D                       	dc.b	nA5, $0D
00083BB6 E105                       	smpsAlterNote       $05
00083BB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BBC E10B                       	smpsAlterNote       $0B
00083BBE E701                       	dc.b	smpsNoAttack, $01
00083BC0 E10E                       	smpsAlterNote       $0E
00083BC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BC6 E108                       	smpsAlterNote       $08
00083BC8 E701                       	dc.b	smpsNoAttack, $01
00083BCA E104                       	smpsAlterNote       $04
00083BCC E701                       	dc.b	smpsNoAttack, $01
00083BCE E105                       	smpsAlterNote       $05
00083BD0 E701                       	dc.b	smpsNoAttack, $01
00083BD2 E10B                       	smpsAlterNote       $0B
00083BD4 E701                       	dc.b	smpsNoAttack, $01
00083BD6 E10F                       	smpsAlterNote       $0F
00083BD8 E701                       	dc.b	smpsNoAttack, $01
00083BDA E10B                       	smpsAlterNote       $0B
00083BDC E701                       	dc.b	smpsNoAttack, $01
00083BDE E108                       	smpsAlterNote       $08
00083BE0 E701                       	dc.b	smpsNoAttack, $01
00083BE2 E104                       	smpsAlterNote       $04
00083BE4 E701                       	dc.b	smpsNoAttack, $01
00083BE6 E108                       	smpsAlterNote       $08
00083BE8 E701                       	dc.b	smpsNoAttack, $01
00083BEA E10E                       	smpsAlterNote       $0E
00083BEC E701                       	dc.b	smpsNoAttack, $01
00083BEE E10F                       	smpsAlterNote       $0F
00083BF0 E701                       	dc.b	smpsNoAttack, $01
00083BF2 E10B                       	smpsAlterNote       $0B
00083BF4 E701                       	dc.b	smpsNoAttack, $01
00083BF6 E105                       	smpsAlterNote       $05
00083BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083BFC E108                       	smpsAlterNote       $08
00083BFE E701                       	dc.b	smpsNoAttack, $01
00083C00 E10E                       	smpsAlterNote       $0E
00083C02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C06 E108                       	smpsAlterNote       $08
00083C08 E701                       	dc.b	smpsNoAttack, $01
00083C0A E105                       	smpsAlterNote       $05
00083C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C10 E10B                       	smpsAlterNote       $0B
00083C12 E701                       	dc.b	smpsNoAttack, $01
00083C14 E10F                       	smpsAlterNote       $0F
00083C16 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00083C1A E107                       	smpsAlterNote       $07
00083C1C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00083C20 E108                       	smpsAlterNote       $08
00083C22 C103                       	dc.b	nE5, $03
00083C24 E109                       	smpsAlterNote       $09
00083C26 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00083C2E E10B                       	smpsAlterNote       $0B
00083C30 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083C34 E107                       	smpsAlterNote       $07
00083C36 BF03                       	dc.b	nD5, $03
00083C38 E106                       	smpsAlterNote       $06
00083C3A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00083C3E E107                       	smpsAlterNote       $07
00083C40 CB03                       	dc.b	nD6, $03
00083C42 E10C                       	smpsAlterNote       $0C
00083C44 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00083C48 E10B                       	smpsAlterNote       $0B
00083C4A C604 8001                  	dc.b	nA5, $04, nRst, $01
00083C4E E109                       	smpsAlterNote       $09
00083C50 C404                       	dc.b	nG5, $04
00083C52 E10B                       	smpsAlterNote       $0B
00083C54 C60D                       	dc.b	nA5, $0D
00083C56 E108                       	smpsAlterNote       $08
00083C58 E701                       	dc.b	smpsNoAttack, $01
00083C5A E104                       	smpsAlterNote       $04
00083C5C E701                       	dc.b	smpsNoAttack, $01
00083C5E E108                       	smpsAlterNote       $08
00083C60 E701                       	dc.b	smpsNoAttack, $01
00083C62 E10B                       	smpsAlterNote       $0B
00083C64 E701                       	dc.b	smpsNoAttack, $01
00083C66 E10F                       	smpsAlterNote       $0F
00083C68 E701                       	dc.b	smpsNoAttack, $01
00083C6A E10B                       	smpsAlterNote       $0B
00083C6C E701                       	dc.b	smpsNoAttack, $01
00083C6E E105                       	smpsAlterNote       $05
00083C70 E701                       	dc.b	smpsNoAttack, $01
00083C72 E104                       	smpsAlterNote       $04
00083C74 E701                       	dc.b	smpsNoAttack, $01
00083C76 E108                       	smpsAlterNote       $08
00083C78 E701                       	dc.b	smpsNoAttack, $01
00083C7A E10E                       	smpsAlterNote       $0E
00083C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C80 E10B                       	smpsAlterNote       $0B
00083C82 E701                       	dc.b	smpsNoAttack, $01
00083C84 E105                       	smpsAlterNote       $05
00083C86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C8A E10B                       	smpsAlterNote       $0B
00083C8C E701                       	dc.b	smpsNoAttack, $01
00083C8E E10E                       	smpsAlterNote       $0E
00083C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083C94 E108                       	smpsAlterNote       $08
00083C96 E701                       	dc.b	smpsNoAttack, $01
00083C98 E104                       	smpsAlterNote       $04
00083C9A E701                       	dc.b	smpsNoAttack, $01
00083C9C E105                       	smpsAlterNote       $05
00083C9E E701                       	dc.b	smpsNoAttack, $01
00083CA0 E10B                       	smpsAlterNote       $0B
00083CA2 E701                       	dc.b	smpsNoAttack, $01
00083CA4 E10F                       	smpsAlterNote       $0F
00083CA6 E701                       	dc.b	smpsNoAttack, $01
00083CA8 E10B                       	smpsAlterNote       $0B
00083CAA E701                       	dc.b	smpsNoAttack, $01
00083CAC E108                       	smpsAlterNote       $08
00083CAE E701                       	dc.b	smpsNoAttack, $01
00083CB0 E105                       	smpsAlterNote       $05
00083CB2 8001                       	dc.b	nRst, $01
00083CB4 E109                       	smpsAlterNote       $09
00083CB6 C401                       	dc.b	nG5, $01
00083CB8 E10B                       	smpsAlterNote       $0B
00083CBA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00083CC3 E109                       	smpsAlterNote       $09
00083CC5 C404 8001                  	dc.b	nG5, $04, nRst, $01
00083CC9 E10B                       	smpsAlterNote       $0B
00083CCB C604 8001                  	dc.b	nA5, $04, nRst, $01
00083CCF E107                       	smpsAlterNote       $07
00083CD1 BF0D                       	dc.b	nD5, $0D
00083CD3 E101                       	smpsAlterNote       $01
00083CD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CD9 E104                       	smpsAlterNote       $04
00083CDB E701                       	dc.b	smpsNoAttack, $01
00083CDD E10A                       	smpsAlterNote       $0A
00083CDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CE3 E104                       	smpsAlterNote       $04
00083CE5 E701                       	dc.b	smpsNoAttack, $01
00083CE7 E101                       	smpsAlterNote       $01
00083CE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083CED E107                       	smpsAlterNote       $07
00083CEF E701                       	dc.b	smpsNoAttack, $01
00083CF1 E10B                       	smpsAlterNote       $0B
00083CF3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083CF7 E108                       	smpsAlterNote       $08
00083CF9 C101                       	dc.b	nE5, $01
00083CFB E109                       	smpsAlterNote       $09
00083CFD E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00083D02 E10B                       	smpsAlterNote       $0B
00083D04 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00083D0C E108                       	smpsAlterNote       $08
00083D0E CD06                       	dc.b	nE6, $06
00083D10 E109                       	smpsAlterNote       $09
00083D12 CE07                       	dc.b	nF6, $07
00083D14 E108                       	smpsAlterNote       $08
00083D16 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00083D1A E106                       	smpsAlterNote       $06
00083D1C C903                       	dc.b	nC6, $03
00083D1E E109                       	smpsAlterNote       $09
00083D20 C403 8001                  	dc.b	nG5, $03, nRst, $01
00083D24 E10C                       	smpsAlterNote       $0C
00083D26 C70D                       	dc.b	nBb5, $0D
00083D28 E106                       	smpsAlterNote       $06
00083D2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D2E E109                       	smpsAlterNote       $09
00083D30 E701                       	dc.b	smpsNoAttack, $01
00083D32 E10F                       	smpsAlterNote       $0F
00083D34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D38 E109                       	smpsAlterNote       $09
00083D3A E701                       	dc.b	smpsNoAttack, $01
00083D3C E106                       	smpsAlterNote       $06
00083D3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D42 E10C                       	smpsAlterNote       $0C
00083D44 E701                       	dc.b	smpsNoAttack, $01
00083D46 E110                       	smpsAlterNote       $10
00083D48 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00083D4C E10B                       	smpsAlterNote       $0B
00083D4E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00083D52 E105                       	smpsAlterNote       $05
00083D54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D58 E10B                       	smpsAlterNote       $0B
00083D5A E701                       	dc.b	smpsNoAttack, $01
00083D5C E10E                       	smpsAlterNote       $0E
00083D5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D62 E108                       	smpsAlterNote       $08
00083D64 E701                       	dc.b	smpsNoAttack, $01
00083D66 E104                       	smpsAlterNote       $04
00083D68 E701                       	dc.b	smpsNoAttack, $01
00083D6A E105                       	smpsAlterNote       $05
00083D6C E701                       	dc.b	smpsNoAttack, $01
00083D6E E10B                       	smpsAlterNote       $0B
00083D70 E701                       	dc.b	smpsNoAttack, $01
00083D72 E10F                       	smpsAlterNote       $0F
00083D74 E701                       	dc.b	smpsNoAttack, $01
00083D76 E10B                       	smpsAlterNote       $0B
00083D78 E701                       	dc.b	smpsNoAttack, $01
00083D7A E108                       	smpsAlterNote       $08
00083D7C E701                       	dc.b	smpsNoAttack, $01
00083D7E E104                       	smpsAlterNote       $04
00083D80 E701                       	dc.b	smpsNoAttack, $01
00083D82 E108                       	smpsAlterNote       $08
00083D84 E701                       	dc.b	smpsNoAttack, $01
00083D86 E10E                       	smpsAlterNote       $0E
00083D88 E701                       	dc.b	smpsNoAttack, $01
00083D8A E10F                       	smpsAlterNote       $0F
00083D8C E701                       	dc.b	smpsNoAttack, $01
00083D8E E10B                       	smpsAlterNote       $0B
00083D90 E701                       	dc.b	smpsNoAttack, $01
00083D92 E105                       	smpsAlterNote       $05
00083D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083D98 E108                       	smpsAlterNote       $08
00083D9A E701                       	dc.b	smpsNoAttack, $01
00083D9C E10E                       	smpsAlterNote       $0E
00083D9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DA2 E108                       	smpsAlterNote       $08
00083DA4 E701                       	dc.b	smpsNoAttack, $01
00083DA6 E105                       	smpsAlterNote       $05
00083DA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DAC E10B                       	smpsAlterNote       $0B
00083DAE E701                       	dc.b	smpsNoAttack, $01
00083DB0 E10F                       	smpsAlterNote       $0F
00083DB2 E701                       	dc.b	smpsNoAttack, $01
00083DB4 E10E                       	smpsAlterNote       $0E
00083DB6 E701                       	dc.b	smpsNoAttack, $01
00083DB8 E108                       	smpsAlterNote       $08
00083DBA E701                       	dc.b	smpsNoAttack, $01
00083DBC E104                       	smpsAlterNote       $04
00083DBE E701                       	dc.b	smpsNoAttack, $01
00083DC0 E108                       	smpsAlterNote       $08
00083DC2 E701                       	dc.b	smpsNoAttack, $01
00083DC4 E10E                       	smpsAlterNote       $0E
00083DC6 E701                       	dc.b	smpsNoAttack, $01
00083DC8 E10F                       	smpsAlterNote       $0F
00083DCA E701                       	dc.b	smpsNoAttack, $01
00083DCC E10B                       	smpsAlterNote       $0B
00083DCE E701                       	dc.b	smpsNoAttack, $01
00083DD0 E105                       	smpsAlterNote       $05
00083DD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DD6 E108                       	smpsAlterNote       $08
00083DD8 E701                       	dc.b	smpsNoAttack, $01
00083DDA E10E                       	smpsAlterNote       $0E
00083DDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083DE0 E108                       	smpsAlterNote       $08
00083DE2 E701                       	dc.b	smpsNoAttack, $01
00083DE4 E105                       	smpsAlterNote       $05
00083DE6 E701                       	dc.b	smpsNoAttack, $01
00083DE8 E10B                       	smpsAlterNote       $0B
00083DEA C60D                       	dc.b	nA5, $0D
00083DEC E108                       	smpsAlterNote       $08
00083DEE E701                       	dc.b	smpsNoAttack, $01
00083DF0 E104                       	smpsAlterNote       $04
00083DF2 E701                       	dc.b	smpsNoAttack, $01
00083DF4 E105                       	smpsAlterNote       $05
00083DF6 E701                       	dc.b	smpsNoAttack, $01
00083DF8 E10B                       	smpsAlterNote       $0B
00083DFA E701                       	dc.b	smpsNoAttack, $01
00083DFC E10F                       	smpsAlterNote       $0F
00083DFE E701                       	dc.b	smpsNoAttack, $01
00083E00 E10B                       	smpsAlterNote       $0B
00083E02 E701                       	dc.b	smpsNoAttack, $01
00083E04 E108                       	smpsAlterNote       $08
00083E06 E701                       	dc.b	smpsNoAttack, $01
00083E08 E104                       	smpsAlterNote       $04
00083E0A E701                       	dc.b	smpsNoAttack, $01
00083E0C E108                       	smpsAlterNote       $08
00083E0E E701                       	dc.b	smpsNoAttack, $01
00083E10 E10E                       	smpsAlterNote       $0E
00083E12 E701                       	dc.b	smpsNoAttack, $01
00083E14 E10F                       	smpsAlterNote       $0F
00083E16 E701                       	dc.b	smpsNoAttack, $01
00083E1A E109                       	smpsAlterNote       $09
00083E1C E6FF                       	smpsAlterVol        $FF
00083E1E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00083E28 E108                       	smpsAlterNote       $08
00083E2A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00083E30 E107                       	smpsAlterNote       $07
00083E32 E601                       	smpsAlterVol        $01
00083E34 BF03                       	dc.b	nD5, $03
00083E36 E108                       	smpsAlterNote       $08
00083E38 C103 8001                  	dc.b	nE5, $03, nRst, $01
00083E3C E109                       	smpsAlterNote       $09
00083E3E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00083E44 E10B                       	smpsAlterNote       $0B
00083E46 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083E4A E107                       	smpsAlterNote       $07
00083E4C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083E50 E106                       	smpsAlterNote       $06
00083E52 C90D                       	dc.b	nC6, $0D
00083E54 E103                       	smpsAlterNote       $03
00083E56 E701                       	dc.b	smpsNoAttack, $01
00083E58 E1FF                       	smpsAlterNote       $FF
00083E5A E701                       	dc.b	smpsNoAttack, $01
00083E5C E103                       	smpsAlterNote       $03
00083E5E E701                       	dc.b	smpsNoAttack, $01
00083E60 E109                       	smpsAlterNote       $09
00083E62 E701                       	dc.b	smpsNoAttack, $01
00083E64 E10A                       	smpsAlterNote       $0A
00083E66 E701                       	dc.b	smpsNoAttack, $01
00083E68 E106                       	smpsAlterNote       $06
00083E6A E701                       	dc.b	smpsNoAttack, $01
00083E6C E100                       	smpsAlterNote       $00
00083E6E E701                       	dc.b	smpsNoAttack, $01
00083E70 E10C                       	smpsAlterNote       $0C
00083E72 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00083E76 E10B                       	smpsAlterNote       $0B
00083E78 C603                       	dc.b	nA5, $03
00083E7A E109                       	smpsAlterNote       $09
00083E7C C403 8001                  	dc.b	nG5, $03, nRst, $01
00083E80 E10B                       	smpsAlterNote       $0B
00083E82 C60D                       	dc.b	nA5, $0D
00083E84 E105                       	smpsAlterNote       $05
00083E86 E701                       	dc.b	smpsNoAttack, $01
00083E88 E104                       	smpsAlterNote       $04
00083E8A E701                       	dc.b	smpsNoAttack, $01
00083E8C E108                       	smpsAlterNote       $08
00083E8E E701                       	dc.b	smpsNoAttack, $01
00083E90 E10E                       	smpsAlterNote       $0E
00083E92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083E96 E10B                       	smpsAlterNote       $0B
00083E98 E701                       	dc.b	smpsNoAttack, $01
00083E9A E105                       	smpsAlterNote       $05
00083E9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EA0 E10B                       	smpsAlterNote       $0B
00083EA2 E701                       	dc.b	smpsNoAttack, $01
00083EA4 E10E                       	smpsAlterNote       $0E
00083EA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EAA E108                       	smpsAlterNote       $08
00083EAC E701                       	dc.b	smpsNoAttack, $01
00083EAE E104                       	smpsAlterNote       $04
00083EB0 E701                       	dc.b	smpsNoAttack, $01
00083EB2 E105                       	smpsAlterNote       $05
00083EB4 E701                       	dc.b	smpsNoAttack, $01
00083EB6 E10B                       	smpsAlterNote       $0B
00083EB8 E701                       	dc.b	smpsNoAttack, $01
00083EBA E10F                       	smpsAlterNote       $0F
00083EBC E701                       	dc.b	smpsNoAttack, $01
00083EBE E10B                       	smpsAlterNote       $0B
00083EC0 E701                       	dc.b	smpsNoAttack, $01
00083EC2 E108                       	smpsAlterNote       $08
00083EC4 E701                       	dc.b	smpsNoAttack, $01
00083EC6 E104                       	smpsAlterNote       $04
00083EC8 E701                       	dc.b	smpsNoAttack, $01
00083ECA E108                       	smpsAlterNote       $08
00083ECC E701                       	dc.b	smpsNoAttack, $01
00083ECE E10E                       	smpsAlterNote       $0E
00083ED0 E701                       	dc.b	smpsNoAttack, $01
00083ED2 E10F                       	smpsAlterNote       $0F
00083ED4 E701                       	dc.b	smpsNoAttack, $01
00083ED6 E10B                       	smpsAlterNote       $0B
00083ED8 E701                       	dc.b	smpsNoAttack, $01
00083EDA E105                       	smpsAlterNote       $05
00083EDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083EE0 E108                       	smpsAlterNote       $08
00083EE2 E701                       	dc.b	smpsNoAttack, $01
00083EE4 E10E                       	smpsAlterNote       $0E
00083EE6 E701                       	dc.b	smpsNoAttack, $01
00083EE8 E10F                       	smpsAlterNote       $0F
00083EEA 800F                       	dc.b	nRst, $0F
00083EEC E107                       	smpsAlterNote       $07
00083EEE BF02 8001                  	dc.b	nD5, $02, nRst, $01
00083EF2 E108                       	smpsAlterNote       $08
00083EF4 C103                       	dc.b	nE5, $03
00083EF6 E109                       	smpsAlterNote       $09
00083EF8 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00083EFE E10B                       	smpsAlterNote       $0B
00083F00 C606 8001                  	dc.b	nA5, $06, nRst, $01
00083F04 E107                       	smpsAlterNote       $07
00083F06 BF03                       	dc.b	nD5, $03
00083F08 E106                       	smpsAlterNote       $06
00083F0A C90E                       	dc.b	nC6, $0E
00083F0C E107                       	smpsAlterNote       $07
00083F0E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00083F12 E10C                       	smpsAlterNote       $0C
00083F14 C704                       	dc.b	nBb5, $04
00083F16 E10B                       	smpsAlterNote       $0B
00083F18 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083F1C E109                       	smpsAlterNote       $09
00083F1E C404                       	dc.b	nG5, $04
00083F20 E10B                       	smpsAlterNote       $0B
00083F22 C60D                       	dc.b	nA5, $0D
00083F24 E108                       	smpsAlterNote       $08
00083F26 E701                       	dc.b	smpsNoAttack, $01
00083F28 E105                       	smpsAlterNote       $05
00083F2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F2E E10B                       	smpsAlterNote       $0B
00083F30 E701                       	dc.b	smpsNoAttack, $01
00083F32 E10F                       	smpsAlterNote       $0F
00083F34 E701                       	dc.b	smpsNoAttack, $01
00083F36 E10E                       	smpsAlterNote       $0E
00083F38 E701                       	dc.b	smpsNoAttack, $01
00083F3A E108                       	smpsAlterNote       $08
00083F3C E701                       	dc.b	smpsNoAttack, $01
00083F3E E104                       	smpsAlterNote       $04
00083F40 E701                       	dc.b	smpsNoAttack, $01
00083F42 E108                       	smpsAlterNote       $08
00083F44 E701                       	dc.b	smpsNoAttack, $01
00083F46 E10B                       	smpsAlterNote       $0B
00083F48 E701                       	dc.b	smpsNoAttack, $01
00083F4A E10F                       	smpsAlterNote       $0F
00083F4C E701                       	dc.b	smpsNoAttack, $01
00083F4E E10B                       	smpsAlterNote       $0B
00083F50 E701                       	dc.b	smpsNoAttack, $01
00083F52 E105                       	smpsAlterNote       $05
00083F54 E701                       	dc.b	smpsNoAttack, $01
00083F56 E104                       	smpsAlterNote       $04
00083F58 E701                       	dc.b	smpsNoAttack, $01
00083F5A E108                       	smpsAlterNote       $08
00083F5C E701                       	dc.b	smpsNoAttack, $01
00083F5E E10E                       	smpsAlterNote       $0E
00083F60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F64 E10B                       	smpsAlterNote       $0B
00083F66 E701                       	dc.b	smpsNoAttack, $01
00083F68 E105                       	smpsAlterNote       $05
00083F6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F6E E10B                       	smpsAlterNote       $0B
00083F70 E701                       	dc.b	smpsNoAttack, $01
00083F72 E10E                       	smpsAlterNote       $0E
00083F74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083F78 E108                       	smpsAlterNote       $08
00083F7A E701                       	dc.b	smpsNoAttack, $01
00083F7C E105                       	smpsAlterNote       $05
00083F7E 8001                       	dc.b	nRst, $01
00083F80 E109                       	smpsAlterNote       $09
00083F82 C402                       	dc.b	nG5, $02
00083F84 E10B                       	smpsAlterNote       $0B
00083F86 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00083F8F E109                       	smpsAlterNote       $09
00083F91 C404                       	dc.b	nG5, $04
00083F93 E10B                       	smpsAlterNote       $0B
00083F95 C604 8001                  	dc.b	nA5, $04, nRst, $01
00083F99 E107                       	smpsAlterNote       $07
00083F9B BF0D                       	dc.b	nD5, $0D
00083F9D E101                       	smpsAlterNote       $01
00083F9F E701                       	dc.b	smpsNoAttack, $01
00083FA1 E100                       	smpsAlterNote       $00
00083FA3 E701                       	dc.b	smpsNoAttack, $01
00083FA5 E104                       	smpsAlterNote       $04
00083FA7 E701                       	dc.b	smpsNoAttack, $01
00083FA9 E10A                       	smpsAlterNote       $0A
00083FAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FAF E107                       	smpsAlterNote       $07
00083FB1 E701                       	dc.b	smpsNoAttack, $01
00083FB3 E101                       	smpsAlterNote       $01
00083FB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00083FB9 E107                       	smpsAlterNote       $07
00083FBB E701                       	dc.b	smpsNoAttack, $01
00083FBD E10A                       	smpsAlterNote       $0A
00083FBF E701                       	dc.b	smpsNoAttack, $01
00083FC1 E10B                       	smpsAlterNote       $0B
00083FC3 8001                       	dc.b	nRst, $01
00083FC5 E108                       	smpsAlterNote       $08
00083FC7 C101                       	dc.b	nE5, $01
00083FC9 E109                       	smpsAlterNote       $09
00083FCB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00083FD0 E10B                       	smpsAlterNote       $0B
00083FD2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00083FDA E108                       	smpsAlterNote       $08
00083FDC CD06 8001                  	dc.b	nE6, $06, nRst, $01
00083FE0 E109                       	smpsAlterNote       $09
00083FE2 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00083FE6 E108                       	smpsAlterNote       $08
00083FE8 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00083FEC E106                       	smpsAlterNote       $06
00083FEE C903                       	dc.b	nC6, $03
00083FF0 E109                       	smpsAlterNote       $09
00083FF2 C403 8001                  	dc.b	nG5, $03, nRst, $01
00083FF6 E10C                       	smpsAlterNote       $0C
00083FF8 C70D                       	dc.b	nBb5, $0D
00083FFA E109                       	smpsAlterNote       $09
00083FFC E701                       	dc.b	smpsNoAttack, $01
00083FFE E105                       	smpsAlterNote       $05
00084000 E701                       	dc.b	smpsNoAttack, $01
00084002 E109                       	smpsAlterNote       $09
00084004 E701                       	dc.b	smpsNoAttack, $01
00084006 E10F                       	smpsAlterNote       $0F
00084008 E701                       	dc.b	smpsNoAttack, $01
0008400A E110                       	smpsAlterNote       $10
0008400C E701                       	dc.b	smpsNoAttack, $01
0008400E E10C                       	smpsAlterNote       $0C
00084010 E701                       	dc.b	smpsNoAttack, $01
00084012 E106                       	smpsAlterNote       $06
00084014 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084018 E109                       	smpsAlterNote       $09
0008401A E701                       	dc.b	smpsNoAttack, $01
0008401C E10F                       	smpsAlterNote       $0F
0008401E E701                       	dc.b	smpsNoAttack, $01
00084020 E110                       	smpsAlterNote       $10
00084022 8001                       	dc.b	nRst, $01
00084024 E10B                       	smpsAlterNote       $0B
00084026 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008402C E105                       	smpsAlterNote       $05
0008402E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084032 E108                       	smpsAlterNote       $08
00084034 E701                       	dc.b	smpsNoAttack, $01
00084036 E10E                       	smpsAlterNote       $0E
00084038 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008403C E108                       	smpsAlterNote       $08
0008403E E701                       	dc.b	smpsNoAttack, $01
00084040 E105                       	smpsAlterNote       $05
00084042 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084046 E10B                       	smpsAlterNote       $0B
00084048 E701                       	dc.b	smpsNoAttack, $01
0008404A E10F                       	smpsAlterNote       $0F
0008404C E701                       	dc.b	smpsNoAttack, $01
0008404E E10E                       	smpsAlterNote       $0E
00084050 E701                       	dc.b	smpsNoAttack, $01
00084052 E108                       	smpsAlterNote       $08
00084054 E701                       	dc.b	smpsNoAttack, $01
00084056 E104                       	smpsAlterNote       $04
00084058 E701                       	dc.b	smpsNoAttack, $01
0008405A E108                       	smpsAlterNote       $08
0008405C E701                       	dc.b	smpsNoAttack, $01
0008405E E10B                       	smpsAlterNote       $0B
00084060 E701                       	dc.b	smpsNoAttack, $01
00084062 E10F                       	smpsAlterNote       $0F
00084064 E701                       	dc.b	smpsNoAttack, $01
00084066 E10B                       	smpsAlterNote       $0B
00084068 E701                       	dc.b	smpsNoAttack, $01
0008406A E105                       	smpsAlterNote       $05
0008406C E701                       	dc.b	smpsNoAttack, $01
0008406E E104                       	smpsAlterNote       $04
00084070 E701                       	dc.b	smpsNoAttack, $01
00084072 E108                       	smpsAlterNote       $08
00084074 E701                       	dc.b	smpsNoAttack, $01
00084076 E10E                       	smpsAlterNote       $0E
00084078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008407C E10B                       	smpsAlterNote       $0B
0008407E E701                       	dc.b	smpsNoAttack, $01
00084080 E105                       	smpsAlterNote       $05
00084082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084086 E10B                       	smpsAlterNote       $0B
00084088 E701                       	dc.b	smpsNoAttack, $01
0008408A E10E                       	smpsAlterNote       $0E
0008408C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084090 E108                       	smpsAlterNote       $08
00084092 E701                       	dc.b	smpsNoAttack, $01
00084094 E104                       	smpsAlterNote       $04
00084096 E701                       	dc.b	smpsNoAttack, $01
00084098 E105                       	smpsAlterNote       $05
0008409A E701                       	dc.b	smpsNoAttack, $01
0008409C E10B                       	smpsAlterNote       $0B
0008409E E701                       	dc.b	smpsNoAttack, $01
000840A0 E10F                       	smpsAlterNote       $0F
000840A2 E701                       	dc.b	smpsNoAttack, $01
000840A4 E10B                       	smpsAlterNote       $0B
000840A6 E701                       	dc.b	smpsNoAttack, $01
000840A8 E108                       	smpsAlterNote       $08
000840AA E701                       	dc.b	smpsNoAttack, $01
000840AC E104                       	smpsAlterNote       $04
000840AE E701                       	dc.b	smpsNoAttack, $01
000840B0 E108                       	smpsAlterNote       $08
000840B2 E701                       	dc.b	smpsNoAttack, $01
000840B4 E10E                       	smpsAlterNote       $0E
000840B6 E701                       	dc.b	smpsNoAttack, $01
000840B8 E10F                       	smpsAlterNote       $0F
000840BA E701                       	dc.b	smpsNoAttack, $01
000840BC E10B                       	smpsAlterNote       $0B
000840BE E701                       	dc.b	smpsNoAttack, $01
000840C0 E105                       	smpsAlterNote       $05
000840C2 E701                       	dc.b	smpsNoAttack, $01
000840C4 E10B                       	smpsAlterNote       $0B
000840C6 C60E                       	dc.b	nA5, $0E
000840C8 E105                       	smpsAlterNote       $05
000840CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840CE E10B                       	smpsAlterNote       $0B
000840D0 E701                       	dc.b	smpsNoAttack, $01
000840D2 E10E                       	smpsAlterNote       $0E
000840D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000840D8 E108                       	smpsAlterNote       $08
000840DA E701                       	dc.b	smpsNoAttack, $01
000840DC E104                       	smpsAlterNote       $04
000840DE E701                       	dc.b	smpsNoAttack, $01
000840E0 E105                       	smpsAlterNote       $05
000840E2 E701                       	dc.b	smpsNoAttack, $01
000840E4 E10B                       	smpsAlterNote       $0B
000840E6 E701                       	dc.b	smpsNoAttack, $01
000840E8 E10F                       	smpsAlterNote       $0F
000840EA E701                       	dc.b	smpsNoAttack, $01
000840EC E10B                       	smpsAlterNote       $0B
000840EE E701                       	dc.b	smpsNoAttack, $01
000840F0 E108                       	smpsAlterNote       $08
000840F2 E701                       	dc.b	smpsNoAttack, $01
000840F4 E104                       	smpsAlterNote       $04
000840F6 E701                       	dc.b	smpsNoAttack, $01
000840F8 E108                       	smpsAlterNote       $08
000840FA E701                       	dc.b	smpsNoAttack, $01
000840FC E10E                       	smpsAlterNote       $0E
000840FE E701                       	dc.b	smpsNoAttack, $01
00084100 E10F                       	smpsAlterNote       $0F
00084102 E701                       	dc.b	smpsNoAttack, $01
00084104 E10B                       	smpsAlterNote       $0B
00084106 E701                       	dc.b	smpsNoAttack, $01
00084108 E105                       	smpsAlterNote       $05
0008410A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008410E E108                       	smpsAlterNote       $08
00084110 E701                       	dc.b	smpsNoAttack, $01
00084112 E10E                       	smpsAlterNote       $0E
00084114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084118 E108                       	smpsAlterNote       $08
0008411A E701                       	dc.b	smpsNoAttack, $01
0008411C E105                       	smpsAlterNote       $05
0008411E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084122 E10B                       	smpsAlterNote       $0B
00084124 E701                       	dc.b	smpsNoAttack, $01
00084126 E10F                       	smpsAlterNote       $0F
00084128 E701                       	dc.b	smpsNoAttack, $01
0008412A E10E                       	smpsAlterNote       $0E
0008412C E701                       	dc.b	smpsNoAttack, $01
0008412E E108                       	smpsAlterNote       $08
00084130 E701                       	dc.b	smpsNoAttack, $01
00084132 E104                       	smpsAlterNote       $04
00084134 E701                       	dc.b	smpsNoAttack, $01
00084136 E108                       	smpsAlterNote       $08
00084138 E701                       	dc.b	smpsNoAttack, $01
0008413A E10E                       	smpsAlterNote       $0E
0008413C E701                       	dc.b	smpsNoAttack, $01
0008413E E10F                       	smpsAlterNote       $0F
00084140 E701                       	dc.b	smpsNoAttack, $01
00084142 E10B                       	smpsAlterNote       $0B
00084144 E701                       	dc.b	smpsNoAttack, $01
00084146 E105                       	smpsAlterNote       $05
00084148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008414C E108                       	smpsAlterNote       $08
0008414E E701                       	dc.b	smpsNoAttack, $01
00084150 E10E                       	smpsAlterNote       $0E
00084152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084156 E108                       	smpsAlterNote       $08
00084158 E701                       	dc.b	smpsNoAttack, $01
0008415A E105                       	smpsAlterNote       $05
0008415C E701                       	dc.b	smpsNoAttack, $01
00084160 E10B                       	smpsAlterNote       $0B
00084162 E6FD                       	smpsAlterVol        $FD
00084164 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084168 E109                       	smpsAlterNote       $09
0008416A C404                       	dc.b	nG5, $04
0008416C E10B                       	smpsAlterNote       $0B
0008416E C604 8001                  	dc.b	nA5, $04, nRst, $01
00084172 E107                       	smpsAlterNote       $07
00084174 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008417A E10B                       	smpsAlterNote       $0B
0008417C C604                       	dc.b	nA5, $04
0008417E E109                       	smpsAlterNote       $09
00084180 C404 8001                  	dc.b	nG5, $04, nRst, $01
00084184 E10B                       	smpsAlterNote       $0B
00084186 C604                       	dc.b	nA5, $04
00084188 E108                       	smpsAlterNote       $08
0008418A C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00084192 E106                       	smpsAlterNote       $06
00084194 C904 8001                  	dc.b	nC6, $04, nRst, $01
00084198 E10C                       	smpsAlterNote       $0C
0008419A C704                       	dc.b	nBb5, $04
0008419C E10B                       	smpsAlterNote       $0B
0008419E C604 8001                  	dc.b	nA5, $04, nRst, $01
000841A2 E109                       	smpsAlterNote       $09
000841A4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000841AE E10B                       	smpsAlterNote       $0B
000841B0 C60D                       	dc.b	nA5, $0D
000841B2 E108                       	smpsAlterNote       $08
000841B4 E701                       	dc.b	smpsNoAttack, $01
000841B6 E104                       	smpsAlterNote       $04
000841B8 E701                       	dc.b	smpsNoAttack, $01
000841BA E108                       	smpsAlterNote       $08
000841BC E701                       	dc.b	smpsNoAttack, $01
000841BE E10E                       	smpsAlterNote       $0E
000841C0 E701                       	dc.b	smpsNoAttack, $01
000841C2 E10F                       	smpsAlterNote       $0F
000841C4 E701                       	dc.b	smpsNoAttack, $01
000841C6 E10B                       	smpsAlterNote       $0B
000841C8 E701                       	dc.b	smpsNoAttack, $01
000841CA E105                       	smpsAlterNote       $05
000841CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000841D0 E108                       	smpsAlterNote       $08
000841D2 E701                       	dc.b	smpsNoAttack, $01
000841D4 E10E                       	smpsAlterNote       $0E
000841D6 E701                       	dc.b	smpsNoAttack, $01
000841D8 E10F                       	smpsAlterNote       $0F
000841DA 8001                       	dc.b	nRst, $01
000841DC E109                       	smpsAlterNote       $09
000841DE C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000841E4 E108                       	smpsAlterNote       $08
000841E6 C10D                       	dc.b	nE5, $0D
000841E8 E102                       	smpsAlterNote       $02
000841EA E701                       	dc.b	smpsNoAttack, $01
000841EC E101                       	smpsAlterNote       $01
000841EE E701                       	dc.b	smpsNoAttack, $01
000841F0 E105                       	smpsAlterNote       $05
000841F2 E701                       	dc.b	smpsNoAttack, $01
000841F4 E10B                       	smpsAlterNote       $0B
000841F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000841FA E108                       	smpsAlterNote       $08
000841FC E701                       	dc.b	smpsNoAttack, $01
000841FE E102                       	smpsAlterNote       $02
00084200 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084204 E108                       	smpsAlterNote       $08
00084206 E701                       	dc.b	smpsNoAttack, $01
00084208 E10B                       	smpsAlterNote       $0B
0008420A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008420E E105                       	smpsAlterNote       $05
00084210 E701                       	dc.b	smpsNoAttack, $01
00084212 E101                       	smpsAlterNote       $01
00084214 E701                       	dc.b	smpsNoAttack, $01
00084216 E102                       	smpsAlterNote       $02
00084218 E701                       	dc.b	smpsNoAttack, $01
0008421A E108                       	smpsAlterNote       $08
0008421C E701                       	dc.b	smpsNoAttack, $01
0008421E E10C                       	smpsAlterNote       $0C
00084220 E701                       	dc.b	smpsNoAttack, $01
00084222 E108                       	smpsAlterNote       $08
00084224 E701                       	dc.b	smpsNoAttack, $01
00084226 E105                       	smpsAlterNote       $05
00084228 E701                       	dc.b	smpsNoAttack, $01
0008422A E101                       	smpsAlterNote       $01
0008422C E701                       	dc.b	smpsNoAttack, $01
0008422E E105                       	smpsAlterNote       $05
00084230 E701                       	dc.b	smpsNoAttack, $01
00084232 E10B                       	smpsAlterNote       $0B
00084234 E701                       	dc.b	smpsNoAttack, $01
00084236 E10C                       	smpsAlterNote       $0C
00084238 E701                       	dc.b	smpsNoAttack, $01
0008423A E108                       	smpsAlterNote       $08
0008423C E701                       	dc.b	smpsNoAttack, $01
0008423E E102                       	smpsAlterNote       $02
00084240 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084244 E105                       	smpsAlterNote       $05
00084246 E701                       	dc.b	smpsNoAttack, $01
00084248 E10B                       	smpsAlterNote       $0B
0008424A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008424E E105                       	smpsAlterNote       $05
00084250 E701                       	dc.b	smpsNoAttack, $01
00084252 E102                       	smpsAlterNote       $02
00084254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084258 E108                       	smpsAlterNote       $08
0008425A E701                       	dc.b	smpsNoAttack, $01
0008425C E10C                       	smpsAlterNote       $0C
0008425E E701                       	dc.b	smpsNoAttack, $01
00084260 E10B                       	smpsAlterNote       $0B
00084262 E701                       	dc.b	smpsNoAttack, $01
00084264 E105                       	smpsAlterNote       $05
00084266 E701                       	dc.b	smpsNoAttack, $01
00084268 E101                       	smpsAlterNote       $01
0008426A E701                       	dc.b	smpsNoAttack, $01
0008426C E105                       	smpsAlterNote       $05
0008426E E701                       	dc.b	smpsNoAttack, $01
00084270 E108                       	smpsAlterNote       $08
00084272 E701                       	dc.b	smpsNoAttack, $01
00084274 E10C                       	smpsAlterNote       $0C
00084276 E701                       	dc.b	smpsNoAttack, $01
00084278 E108                       	smpsAlterNote       $08
0008427A E701                       	dc.b	smpsNoAttack, $01
0008427C E102                       	smpsAlterNote       $02
0008427E E701                       	dc.b	smpsNoAttack, $01
00084280 E101                       	smpsAlterNote       $01
00084282 E701                       	dc.b	smpsNoAttack, $01
00084284 E105                       	smpsAlterNote       $05
00084286 E701                       	dc.b	smpsNoAttack, $01
00084288 E10B                       	smpsAlterNote       $0B
0008428A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008428E E108                       	smpsAlterNote       $08
00084290 E701                       	dc.b	smpsNoAttack, $01
00084292 E102                       	smpsAlterNote       $02
00084294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084298 E108                       	smpsAlterNote       $08
0008429A E701                       	dc.b	smpsNoAttack, $01
0008429C E10B                       	smpsAlterNote       $0B
0008429E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842A2 E105                       	smpsAlterNote       $05
000842A4 E701                       	dc.b	smpsNoAttack, $01
000842A6 E101                       	smpsAlterNote       $01
000842A8 E701                       	dc.b	smpsNoAttack, $01
000842AA E102                       	smpsAlterNote       $02
000842AC E701                       	dc.b	smpsNoAttack, $01
000842AE E108                       	smpsAlterNote       $08
000842B0 E701                       	dc.b	smpsNoAttack, $01
000842B2 E10C                       	smpsAlterNote       $0C
000842B4 E701                       	dc.b	smpsNoAttack, $01
000842B6 E108                       	smpsAlterNote       $08
000842B8 E701                       	dc.b	smpsNoAttack, $01
000842BA E105                       	smpsAlterNote       $05
000842BC E701                       	dc.b	smpsNoAttack, $01
000842BE E101                       	smpsAlterNote       $01
000842C0 E701                       	dc.b	smpsNoAttack, $01
000842C2 E105                       	smpsAlterNote       $05
000842C4 E701                       	dc.b	smpsNoAttack, $01
000842C6 E10B                       	smpsAlterNote       $0B
000842C8 E701                       	dc.b	smpsNoAttack, $01
000842CA E10C                       	smpsAlterNote       $0C
000842CC E701                       	dc.b	smpsNoAttack, $01
000842CE E108                       	smpsAlterNote       $08
000842D0 E701                       	dc.b	smpsNoAttack, $01
000842D2 E102                       	smpsAlterNote       $02
000842D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842D8 E105                       	smpsAlterNote       $05
000842DA E701                       	dc.b	smpsNoAttack, $01
000842DC E10B                       	smpsAlterNote       $0B
000842DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000842E2 E105                       	smpsAlterNote       $05
000842E4 E701                       	dc.b	smpsNoAttack, $01
000842E6 E101                       	smpsAlterNote       $01
000842E8 E701                       	dc.b	smpsNoAttack, $01
000842EA E102                       	smpsAlterNote       $02
000842EC E701                       	dc.b	smpsNoAttack, $01
000842EE E108                       	smpsAlterNote       $08
000842F0 E701                       	dc.b	smpsNoAttack, $01
000842F2 E10C                       	smpsAlterNote       $0C
000842F4 E701                       	dc.b	smpsNoAttack, $01
000842F6 E108                       	smpsAlterNote       $08
000842F8 E701                       	dc.b	smpsNoAttack, $01
000842FA E105                       	smpsAlterNote       $05
000842FC E701                       	dc.b	smpsNoAttack, $01
000842FE E101                       	smpsAlterNote       $01
00084300 E701                       	dc.b	smpsNoAttack, $01
00084302 E105                       	smpsAlterNote       $05
00084304 E701                       	dc.b	smpsNoAttack, $01
00084306 E10B                       	smpsAlterNote       $0B
00084308 E701                       	dc.b	smpsNoAttack, $01
0008430A E10C                       	smpsAlterNote       $0C
0008430C E701                       	dc.b	smpsNoAttack, $01
0008430E E108                       	smpsAlterNote       $08
00084310 E701                       	dc.b	smpsNoAttack, $01
00084312 E102                       	smpsAlterNote       $02
00084314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084318 E105                       	smpsAlterNote       $05
0008431A E701                       	dc.b	smpsNoAttack, $01
0008431C E10B                       	smpsAlterNote       $0B
0008431E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084322 E105                       	smpsAlterNote       $05
00084324 E701                       	dc.b	smpsNoAttack, $01
00084326 E102                       	smpsAlterNote       $02
00084328 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008432C E108                       	smpsAlterNote       $08
0008432E E701                       	dc.b	smpsNoAttack, $01
00084330 E10C                       	smpsAlterNote       $0C
00084332 E701                       	dc.b	smpsNoAttack, $01
00084334 E10B                       	smpsAlterNote       $0B
00084336 E701                       	dc.b	smpsNoAttack, $01
00084338 E105                       	smpsAlterNote       $05
0008433A E701                       	dc.b	smpsNoAttack, $01
0008433C E101                       	smpsAlterNote       $01
0008433E E701                       	dc.b	smpsNoAttack, $01
00084340 E105                       	smpsAlterNote       $05
00084342 E701                       	dc.b	smpsNoAttack, $01
00084344 E108                       	smpsAlterNote       $08
00084346 E701                       	dc.b	smpsNoAttack, $01
00084348 E10C                       	smpsAlterNote       $0C
0008434A E701                       	dc.b	smpsNoAttack, $01
0008434E E10B                       	smpsAlterNote       $0B
00084350 C604 8001                  	dc.b	nA5, $04, nRst, $01
00084354 E109                       	smpsAlterNote       $09
00084356 C404                       	dc.b	nG5, $04
00084358 E10B                       	smpsAlterNote       $0B
0008435A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008435E E107                       	smpsAlterNote       $07
00084360 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00084366 E10B                       	smpsAlterNote       $0B
00084368 C604                       	dc.b	nA5, $04
0008436A E109                       	smpsAlterNote       $09
0008436C C404 8001                  	dc.b	nG5, $04, nRst, $01
00084370 E10B                       	smpsAlterNote       $0B
00084372 C604                       	dc.b	nA5, $04
00084374 E108                       	smpsAlterNote       $08
00084376 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008437C E106                       	smpsAlterNote       $06
0008437E C904 8001                  	dc.b	nC6, $04, nRst, $01
00084382 E10C                       	smpsAlterNote       $0C
00084384 C704                       	dc.b	nBb5, $04
00084386 E10B                       	smpsAlterNote       $0B
00084388 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008438C E109                       	smpsAlterNote       $09
0008438E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00084398 E10B                       	smpsAlterNote       $0B
0008439A C60D                       	dc.b	nA5, $0D
0008439C E108                       	smpsAlterNote       $08
0008439E E701                       	dc.b	smpsNoAttack, $01
000843A0 E104                       	smpsAlterNote       $04
000843A2 E701                       	dc.b	smpsNoAttack, $01
000843A4 E108                       	smpsAlterNote       $08
000843A6 E701                       	dc.b	smpsNoAttack, $01
000843A8 E10B                       	smpsAlterNote       $0B
000843AA E701                       	dc.b	smpsNoAttack, $01
000843AC E10F                       	smpsAlterNote       $0F
000843AE E701                       	dc.b	smpsNoAttack, $01
000843B0 E10B                       	smpsAlterNote       $0B
000843B2 E701                       	dc.b	smpsNoAttack, $01
000843B4 E105                       	smpsAlterNote       $05
000843B6 E701                       	dc.b	smpsNoAttack, $01
000843B8 E104                       	smpsAlterNote       $04
000843BA E701                       	dc.b	smpsNoAttack, $01
000843BC E108                       	smpsAlterNote       $08
000843BE E701                       	dc.b	smpsNoAttack, $01
000843C0 E10E                       	smpsAlterNote       $0E
000843C2 E701                       	dc.b	smpsNoAttack, $01
000843C4 E10F                       	smpsAlterNote       $0F
000843C6 8001                       	dc.b	nRst, $01
000843C8 E109                       	smpsAlterNote       $09
000843CA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000843D0 E108                       	smpsAlterNote       $08
000843D2 C10D                       	dc.b	nE5, $0D
000843D4 E105                       	smpsAlterNote       $05
000843D6 E701                       	dc.b	smpsNoAttack, $01
000843D8 E101                       	smpsAlterNote       $01
000843DA E701                       	dc.b	smpsNoAttack, $01
000843DC E105                       	smpsAlterNote       $05
000843DE E701                       	dc.b	smpsNoAttack, $01
000843E0 E10B                       	smpsAlterNote       $0B
000843E2 E701                       	dc.b	smpsNoAttack, $01
000843E4 E10C                       	smpsAlterNote       $0C
000843E6 E701                       	dc.b	smpsNoAttack, $01
000843E8 E108                       	smpsAlterNote       $08
000843EA E701                       	dc.b	smpsNoAttack, $01
000843EC E102                       	smpsAlterNote       $02
000843EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843F2 E105                       	smpsAlterNote       $05
000843F4 E701                       	dc.b	smpsNoAttack, $01
000843F6 E10B                       	smpsAlterNote       $0B
000843F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000843FC E105                       	smpsAlterNote       $05
000843FE E701                       	dc.b	smpsNoAttack, $01
00084400 E102                       	smpsAlterNote       $02
00084402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084406 E108                       	smpsAlterNote       $08
00084408 E701                       	dc.b	smpsNoAttack, $01
0008440A E10C                       	smpsAlterNote       $0C
0008440C E701                       	dc.b	smpsNoAttack, $01
0008440E E10B                       	smpsAlterNote       $0B
00084410 E701                       	dc.b	smpsNoAttack, $01
00084412 E105                       	smpsAlterNote       $05
00084414 E701                       	dc.b	smpsNoAttack, $01
00084416 E101                       	smpsAlterNote       $01
00084418 E701                       	dc.b	smpsNoAttack, $01
0008441A E105                       	smpsAlterNote       $05
0008441C E701                       	dc.b	smpsNoAttack, $01
0008441E E108                       	smpsAlterNote       $08
00084420 E701                       	dc.b	smpsNoAttack, $01
00084422 E10C                       	smpsAlterNote       $0C
00084424 E701                       	dc.b	smpsNoAttack, $01
00084426 E108                       	smpsAlterNote       $08
00084428 E701                       	dc.b	smpsNoAttack, $01
0008442A E102                       	smpsAlterNote       $02
0008442C E701                       	dc.b	smpsNoAttack, $01
0008442E E101                       	smpsAlterNote       $01
00084430 E701                       	dc.b	smpsNoAttack, $01
00084432 E105                       	smpsAlterNote       $05
00084434 E701                       	dc.b	smpsNoAttack, $01
00084436 E10B                       	smpsAlterNote       $0B
00084438 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008443C E108                       	smpsAlterNote       $08
0008443E E701                       	dc.b	smpsNoAttack, $01
00084440 E102                       	smpsAlterNote       $02
00084442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084446 E108                       	smpsAlterNote       $08
00084448 E701                       	dc.b	smpsNoAttack, $01
0008444A E10B                       	smpsAlterNote       $0B
0008444C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084450 E105                       	smpsAlterNote       $05
00084452 E701                       	dc.b	smpsNoAttack, $01
00084454 E101                       	smpsAlterNote       $01
00084456 E701                       	dc.b	smpsNoAttack, $01
00084458 E102                       	smpsAlterNote       $02
0008445A E701                       	dc.b	smpsNoAttack, $01
0008445C E108                       	smpsAlterNote       $08
0008445E E701                       	dc.b	smpsNoAttack, $01
00084460 E10C                       	smpsAlterNote       $0C
00084462 E701                       	dc.b	smpsNoAttack, $01
00084464 E108                       	smpsAlterNote       $08
00084466 E701                       	dc.b	smpsNoAttack, $01
00084468 E105                       	smpsAlterNote       $05
0008446A E701                       	dc.b	smpsNoAttack, $01
0008446C E101                       	smpsAlterNote       $01
0008446E E701                       	dc.b	smpsNoAttack, $01
00084470 E105                       	smpsAlterNote       $05
00084472 E701                       	dc.b	smpsNoAttack, $01
00084474 E10B                       	smpsAlterNote       $0B
00084476 E701                       	dc.b	smpsNoAttack, $01
00084478 E10C                       	smpsAlterNote       $0C
0008447A E701                       	dc.b	smpsNoAttack, $01
0008447C E108                       	smpsAlterNote       $08
0008447E E701                       	dc.b	smpsNoAttack, $01
00084480 E102                       	smpsAlterNote       $02
00084482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084486 E108                       	smpsAlterNote       $08
00084488 E701                       	dc.b	smpsNoAttack, $01
0008448A E10B                       	smpsAlterNote       $0B
0008448C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084490 E105                       	smpsAlterNote       $05
00084492 E701                       	dc.b	smpsNoAttack, $01
00084494 E101                       	smpsAlterNote       $01
00084496 E701                       	dc.b	smpsNoAttack, $01
00084498 E102                       	smpsAlterNote       $02
0008449A E701                       	dc.b	smpsNoAttack, $01
0008449C E108                       	smpsAlterNote       $08
0008449E E701                       	dc.b	smpsNoAttack, $01
000844A0 E10C                       	smpsAlterNote       $0C
000844A2 E701                       	dc.b	smpsNoAttack, $01
000844A4 E108                       	smpsAlterNote       $08
000844A6 E701                       	dc.b	smpsNoAttack, $01
000844A8 E105                       	smpsAlterNote       $05
000844AA E701                       	dc.b	smpsNoAttack, $01
000844AC E101                       	smpsAlterNote       $01
000844AE E701                       	dc.b	smpsNoAttack, $01
000844B0 E105                       	smpsAlterNote       $05
000844B2 E701                       	dc.b	smpsNoAttack, $01
000844B4 E10B                       	smpsAlterNote       $0B
000844B6 E701                       	dc.b	smpsNoAttack, $01
000844B8 E10C                       	smpsAlterNote       $0C
000844BA E701                       	dc.b	smpsNoAttack, $01
000844BC E108                       	smpsAlterNote       $08
000844BE E701                       	dc.b	smpsNoAttack, $01
000844C0 E102                       	smpsAlterNote       $02
000844C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844C6 E105                       	smpsAlterNote       $05
000844C8 E701                       	dc.b	smpsNoAttack, $01
000844CA E10B                       	smpsAlterNote       $0B
000844CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844D0 E105                       	smpsAlterNote       $05
000844D2 E701                       	dc.b	smpsNoAttack, $01
000844D4 E102                       	smpsAlterNote       $02
000844D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000844DA E108                       	smpsAlterNote       $08
000844DC E701                       	dc.b	smpsNoAttack, $01
000844DE E10C                       	smpsAlterNote       $0C
000844E0 E701                       	dc.b	smpsNoAttack, $01
000844E2 E10B                       	smpsAlterNote       $0B
000844E4 E701                       	dc.b	smpsNoAttack, $01
000844E6 E105                       	smpsAlterNote       $05
000844E8 E701                       	dc.b	smpsNoAttack, $01
000844EA E101                       	smpsAlterNote       $01
000844EC E701                       	dc.b	smpsNoAttack, $01
000844EE E105                       	smpsAlterNote       $05
000844F0 E701                       	dc.b	smpsNoAttack, $01
000844F2 E108                       	smpsAlterNote       $08
000844F4 E701                       	dc.b	smpsNoAttack, $01
000844F6 E10C                       	smpsAlterNote       $0C
000844F8 E701                       	dc.b	smpsNoAttack, $01
000844FA E108                       	smpsAlterNote       $08
000844FC E701                       	dc.b	smpsNoAttack, $01
000844FE E102                       	smpsAlterNote       $02
00084500 E701                       	dc.b	smpsNoAttack, $01
00084502 E101                       	smpsAlterNote       $01
00084504 E701                       	dc.b	smpsNoAttack, $01
00084506 E105                       	smpsAlterNote       $05
00084508 E701                       	dc.b	smpsNoAttack, $01
0008450A E10B                       	smpsAlterNote       $0B
0008450C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084510 E108                       	smpsAlterNote       $08
00084512 E701                       	dc.b	smpsNoAttack, $01
00084514 E102                       	smpsAlterNote       $02
00084516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008451A E108                       	smpsAlterNote       $08
0008451C E701                       	dc.b	smpsNoAttack, $01
0008451E E10B                       	smpsAlterNote       $0B
00084520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084524 E105                       	smpsAlterNote       $05
00084526 E701                       	dc.b	smpsNoAttack, $01
00084528 E102                       	smpsAlterNote       $02
0008452A 8001                       	dc.b	nRst, $01
0008452C E107                       	smpsAlterNote       $07
0008452E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00084532 E108                       	smpsAlterNote       $08
00084534 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00084538 E102                       	smpsAlterNote       $02
0008453A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008453E E108                       	smpsAlterNote       $08
00084540 E701                       	dc.b	smpsNoAttack, $01
00084542 E10B                       	smpsAlterNote       $0B
00084544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084548 E105                       	smpsAlterNote       $05
0008454A E701                       	dc.b	smpsNoAttack, $01
0008454C E101                       	smpsAlterNote       $01
0008454E E701                       	dc.b	smpsNoAttack, $01
00084550 E102                       	smpsAlterNote       $02
00084552 E701                       	dc.b	smpsNoAttack, $01
00084554 E108                       	smpsAlterNote       $08
00084556 E701                       	dc.b	smpsNoAttack, $01
00084558 E10C                       	smpsAlterNote       $0C
0008455A E701                       	dc.b	smpsNoAttack, $01
0008455C E108                       	smpsAlterNote       $08
0008455E E701                       	dc.b	smpsNoAttack, $01
00084560 E105                       	smpsAlterNote       $05
00084562 E701                       	dc.b	smpsNoAttack, $01
00084564 E101                       	smpsAlterNote       $01
00084566 E701                       	dc.b	smpsNoAttack, $01
00084568 E105                       	smpsAlterNote       $05
0008456A E701                       	dc.b	smpsNoAttack, $01
0008456C E10B                       	smpsAlterNote       $0B
0008456E E701                       	dc.b	smpsNoAttack, $01
00084570 E10C                       	smpsAlterNote       $0C
00084572 E701                       	dc.b	smpsNoAttack, $01
00084574 E108                       	smpsAlterNote       $08
00084576 E701                       	dc.b	smpsNoAttack, $01
00084578 E102                       	smpsAlterNote       $02
0008457A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008457E E105                       	smpsAlterNote       $05
00084580 E701                       	dc.b	smpsNoAttack, $01
00084582 E10B                       	smpsAlterNote       $0B
00084584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084588 E105                       	smpsAlterNote       $05
0008458A E701                       	dc.b	smpsNoAttack, $01
0008458C E102                       	smpsAlterNote       $02
0008458E E701                       	dc.b	smpsNoAttack, $01
00084590 E109                       	smpsAlterNote       $09
00084592 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00084596 E108                       	smpsAlterNote       $08
00084598 C10D                       	dc.b	nE5, $0D
0008459A E105                       	smpsAlterNote       $05
0008459C E701                       	dc.b	smpsNoAttack, $01
0008459E E101                       	smpsAlterNote       $01
000845A0 E701                       	dc.b	smpsNoAttack, $01
000845A2 E102                       	smpsAlterNote       $02
000845A4 E701                       	dc.b	smpsNoAttack, $01
000845A6 E108                       	smpsAlterNote       $08
000845A8 E701                       	dc.b	smpsNoAttack, $01
000845AA E10C                       	smpsAlterNote       $0C
000845AC E701                       	dc.b	smpsNoAttack, $01
000845AE E108                       	smpsAlterNote       $08
000845B0 E701                       	dc.b	smpsNoAttack, $01
000845B2 E105                       	smpsAlterNote       $05
000845B4 E701                       	dc.b	smpsNoAttack, $01
000845B6 E101                       	smpsAlterNote       $01
000845B8 E701                       	dc.b	smpsNoAttack, $01
000845BA E105                       	smpsAlterNote       $05
000845BC E701                       	dc.b	smpsNoAttack, $01
000845BE E10B                       	smpsAlterNote       $0B
000845C0 E701                       	dc.b	smpsNoAttack, $01
000845C2 E10C                       	smpsAlterNote       $0C
000845C4 E701                       	dc.b	smpsNoAttack, $01
000845C6 E108                       	smpsAlterNote       $08
000845C8 E701                       	dc.b	smpsNoAttack, $01
000845CA E102                       	smpsAlterNote       $02
000845CC E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000845D4 E10B                       	smpsAlterNote       $0B
000845D6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000845DA E10C                       	smpsAlterNote       $0C
000845DC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000845E0 E10B                       	smpsAlterNote       $0B
000845E2 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000845E8 E107                       	smpsAlterNote       $07
000845EA BF03                       	dc.b	nD5, $03
000845EC E108                       	smpsAlterNote       $08
000845EE C103 8001                  	dc.b	nE5, $03, nRst, $01
000845F2 E109                       	smpsAlterNote       $09
000845F4 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000845FA E10B                       	smpsAlterNote       $0B
000845FC C606 8001                  	dc.b	nA5, $06, nRst, $01
00084600 E107                       	smpsAlterNote       $07
00084602 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00084606 E106                       	smpsAlterNote       $06
00084608 C90D                       	dc.b	nC6, $0D
0008460A E103                       	smpsAlterNote       $03
0008460C E701                       	dc.b	smpsNoAttack, $01
0008460E E1FF                       	smpsAlterNote       $FF
00084610 E701                       	dc.b	smpsNoAttack, $01
00084612 E103                       	smpsAlterNote       $03
00084614 E701                       	dc.b	smpsNoAttack, $01
00084616 E109                       	smpsAlterNote       $09
00084618 E701                       	dc.b	smpsNoAttack, $01
0008461A E10A                       	smpsAlterNote       $0A
0008461C E701                       	dc.b	smpsNoAttack, $01
0008461E E106                       	smpsAlterNote       $06
00084620 E701                       	dc.b	smpsNoAttack, $01
00084622 E100                       	smpsAlterNote       $00
00084624 E701                       	dc.b	smpsNoAttack, $01
00084626 E10C                       	smpsAlterNote       $0C
00084628 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008462C E10B                       	smpsAlterNote       $0B
0008462E C603                       	dc.b	nA5, $03
00084630 E109                       	smpsAlterNote       $09
00084632 C403 8001                  	dc.b	nG5, $03, nRst, $01
00084636 E10B                       	smpsAlterNote       $0B
00084638 C60D                       	dc.b	nA5, $0D
0008463A E105                       	smpsAlterNote       $05
0008463C E701                       	dc.b	smpsNoAttack, $01
0008463E E104                       	smpsAlterNote       $04
00084640 E701                       	dc.b	smpsNoAttack, $01
00084642 E108                       	smpsAlterNote       $08
00084644 E701                       	dc.b	smpsNoAttack, $01
00084646 E10E                       	smpsAlterNote       $0E
00084648 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008464C E10B                       	smpsAlterNote       $0B
0008464E E701                       	dc.b	smpsNoAttack, $01
00084650 E105                       	smpsAlterNote       $05
00084652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084656 E10B                       	smpsAlterNote       $0B
00084658 E701                       	dc.b	smpsNoAttack, $01
0008465A E10E                       	smpsAlterNote       $0E
0008465C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084660 E108                       	smpsAlterNote       $08
00084662 E701                       	dc.b	smpsNoAttack, $01
00084664 E104                       	smpsAlterNote       $04
00084666 E701                       	dc.b	smpsNoAttack, $01
00084668 E105                       	smpsAlterNote       $05
0008466A E701                       	dc.b	smpsNoAttack, $01
0008466C E10B                       	smpsAlterNote       $0B
0008466E E701                       	dc.b	smpsNoAttack, $01
00084670 E10F                       	smpsAlterNote       $0F
00084672 E701                       	dc.b	smpsNoAttack, $01
00084674 E10B                       	smpsAlterNote       $0B
00084676 E701                       	dc.b	smpsNoAttack, $01
00084678 E108                       	smpsAlterNote       $08
0008467A E701                       	dc.b	smpsNoAttack, $01
0008467C E104                       	smpsAlterNote       $04
0008467E E701                       	dc.b	smpsNoAttack, $01
00084680 E108                       	smpsAlterNote       $08
00084682 E701                       	dc.b	smpsNoAttack, $01
00084684 E10E                       	smpsAlterNote       $0E
00084686 E701                       	dc.b	smpsNoAttack, $01
00084688 E10F                       	smpsAlterNote       $0F
0008468A E701                       	dc.b	smpsNoAttack, $01
0008468C E10B                       	smpsAlterNote       $0B
0008468E E701                       	dc.b	smpsNoAttack, $01
00084690 E105                       	smpsAlterNote       $05
00084692 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084696 E108                       	smpsAlterNote       $08
00084698 E701                       	dc.b	smpsNoAttack, $01
0008469A E10E                       	smpsAlterNote       $0E
0008469C E701                       	dc.b	smpsNoAttack, $01
0008469E E10F                       	smpsAlterNote       $0F
000846A0 800F                       	dc.b	nRst, $0F
000846A2 E107                       	smpsAlterNote       $07
000846A4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000846A8 E108                       	smpsAlterNote       $08
000846AA C103                       	dc.b	nE5, $03
000846AC E109                       	smpsAlterNote       $09
000846AE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000846B4 E10B                       	smpsAlterNote       $0B
000846B6 C607                       	dc.b	nA5, $07
000846B8 E107                       	smpsAlterNote       $07
000846BA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000846BE E106                       	smpsAlterNote       $06
000846C0 C90D                       	dc.b	nC6, $0D
000846C2 E107                       	smpsAlterNote       $07
000846C4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000846C8 E10C                       	smpsAlterNote       $0C
000846CA C704                       	dc.b	nBb5, $04
000846CC E10B                       	smpsAlterNote       $0B
000846CE C604 8001                  	dc.b	nA5, $04, nRst, $01
000846D2 E109                       	smpsAlterNote       $09
000846D4 C404                       	dc.b	nG5, $04
000846D6 E10B                       	smpsAlterNote       $0B
000846D8 C60D                       	dc.b	nA5, $0D
000846DA E108                       	smpsAlterNote       $08
000846DC E701                       	dc.b	smpsNoAttack, $01
000846DE E105                       	smpsAlterNote       $05
000846E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000846E4 E10B                       	smpsAlterNote       $0B
000846E6 E701                       	dc.b	smpsNoAttack, $01
000846E8 E10F                       	smpsAlterNote       $0F
000846EA E701                       	dc.b	smpsNoAttack, $01
000846EC E10E                       	smpsAlterNote       $0E
000846EE E701                       	dc.b	smpsNoAttack, $01
000846F0 E108                       	smpsAlterNote       $08
000846F2 E701                       	dc.b	smpsNoAttack, $01
000846F4 E104                       	smpsAlterNote       $04
000846F6 E701                       	dc.b	smpsNoAttack, $01
000846F8 E108                       	smpsAlterNote       $08
000846FA E701                       	dc.b	smpsNoAttack, $01
000846FC E10B                       	smpsAlterNote       $0B
000846FE E701                       	dc.b	smpsNoAttack, $01
00084700 E10F                       	smpsAlterNote       $0F
00084702 E701                       	dc.b	smpsNoAttack, $01
00084704 E10B                       	smpsAlterNote       $0B
00084706 E701                       	dc.b	smpsNoAttack, $01
00084708 E105                       	smpsAlterNote       $05
0008470A E701                       	dc.b	smpsNoAttack, $01
0008470C E104                       	smpsAlterNote       $04
0008470E E701                       	dc.b	smpsNoAttack, $01
00084710 E108                       	smpsAlterNote       $08
00084712 E701                       	dc.b	smpsNoAttack, $01
00084714 E10E                       	smpsAlterNote       $0E
00084716 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008471A E10B                       	smpsAlterNote       $0B
0008471C E701                       	dc.b	smpsNoAttack, $01
0008471E E105                       	smpsAlterNote       $05
00084720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084724 E10B                       	smpsAlterNote       $0B
00084726 E701                       	dc.b	smpsNoAttack, $01
00084728 E10E                       	smpsAlterNote       $0E
0008472A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008472E E108                       	smpsAlterNote       $08
00084730 E701                       	dc.b	smpsNoAttack, $01
00084732 E105                       	smpsAlterNote       $05
00084734 8001                       	dc.b	nRst, $01
00084736 E109                       	smpsAlterNote       $09
00084738 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008473C E10B                       	smpsAlterNote       $0B
0008473E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00084746 E109                       	smpsAlterNote       $09
00084748 C404                       	dc.b	nG5, $04
0008474A E10B                       	smpsAlterNote       $0B
0008474C C604 8001                  	dc.b	nA5, $04, nRst, $01
00084750 E107                       	smpsAlterNote       $07
00084752 BF0D                       	dc.b	nD5, $0D
00084754 E101                       	smpsAlterNote       $01
00084756 E701                       	dc.b	smpsNoAttack, $01
00084758 E100                       	smpsAlterNote       $00
0008475A E701                       	dc.b	smpsNoAttack, $01
0008475C E104                       	smpsAlterNote       $04
0008475E E701                       	dc.b	smpsNoAttack, $01
00084760 E10A                       	smpsAlterNote       $0A
00084762 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084766 E107                       	smpsAlterNote       $07
00084768 E701                       	dc.b	smpsNoAttack, $01
0008476A E101                       	smpsAlterNote       $01
0008476C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084770 E107                       	smpsAlterNote       $07
00084772 E701                       	dc.b	smpsNoAttack, $01
00084774 E10A                       	smpsAlterNote       $0A
00084776 E701                       	dc.b	smpsNoAttack, $01
00084778 E10B                       	smpsAlterNote       $0B
0008477A 8001                       	dc.b	nRst, $01
0008477C E108                       	smpsAlterNote       $08
0008477E 8001                       	dc.b	nRst, $01
00084780 E109                       	smpsAlterNote       $09
00084782 8001 C401                  	dc.b	nRst, $01, nG5, $01
00084786 E10B                       	smpsAlterNote       $0B
00084788 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00084790 E108                       	smpsAlterNote       $08
00084792 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084796 E109                       	smpsAlterNote       $09
00084798 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008479C E108                       	smpsAlterNote       $08
0008479E CD02 8001                  	dc.b	nE6, $02, nRst, $01
000847A2 E106                       	smpsAlterNote       $06
000847A4 C903                       	dc.b	nC6, $03
000847A6 E109                       	smpsAlterNote       $09
000847A8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000847AC E10C                       	smpsAlterNote       $0C
000847AE C70D                       	dc.b	nBb5, $0D
000847B0 E109                       	smpsAlterNote       $09
000847B2 E701                       	dc.b	smpsNoAttack, $01
000847B4 E105                       	smpsAlterNote       $05
000847B6 E701                       	dc.b	smpsNoAttack, $01
000847B8 E109                       	smpsAlterNote       $09
000847BA E701                       	dc.b	smpsNoAttack, $01
000847BC E10F                       	smpsAlterNote       $0F
000847BE E701                       	dc.b	smpsNoAttack, $01
000847C0 E110                       	smpsAlterNote       $10
000847C2 E701                       	dc.b	smpsNoAttack, $01
000847C4 E10C                       	smpsAlterNote       $0C
000847C6 E701                       	dc.b	smpsNoAttack, $01
000847C8 E106                       	smpsAlterNote       $06
000847CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847CE E109                       	smpsAlterNote       $09
000847D0 E701                       	dc.b	smpsNoAttack, $01
000847D2 E10F                       	smpsAlterNote       $0F
000847D4 E701                       	dc.b	smpsNoAttack, $01
000847D6 E110                       	smpsAlterNote       $10
000847D8 8001                       	dc.b	nRst, $01
000847DA E10B                       	smpsAlterNote       $0B
000847DC C606 8001                  	dc.b	nA5, $06, nRst, $01
000847E0 E109                       	smpsAlterNote       $09
000847E2 C40D                       	dc.b	nG5, $0D
000847E4 E103                       	smpsAlterNote       $03
000847E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847EA E106                       	smpsAlterNote       $06
000847EC E701                       	dc.b	smpsNoAttack, $01
000847EE E10C                       	smpsAlterNote       $0C
000847F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847F4 E106                       	smpsAlterNote       $06
000847F6 E701                       	dc.b	smpsNoAttack, $01
000847F8 E103                       	smpsAlterNote       $03
000847FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000847FE E109                       	smpsAlterNote       $09
00084800 E701                       	dc.b	smpsNoAttack, $01
00084802 E10D                       	smpsAlterNote       $0D
00084804 E701                       	dc.b	smpsNoAttack, $01
00084806 E10C                       	smpsAlterNote       $0C
00084808 E701                       	dc.b	smpsNoAttack, $01
0008480A E106                       	smpsAlterNote       $06
0008480C E701                       	dc.b	smpsNoAttack, $01
0008480E E102                       	smpsAlterNote       $02
00084810 E701                       	dc.b	smpsNoAttack, $01
00084812 E103                       	smpsAlterNote       $03
00084814 8001                       	dc.b	nRst, $01
00084816 E10B                       	smpsAlterNote       $0B
00084818 C60D                       	dc.b	nA5, $0D
0008481A E108                       	smpsAlterNote       $08
0008481C E701                       	dc.b	smpsNoAttack, $01
0008481E E104                       	smpsAlterNote       $04
00084820 E701                       	dc.b	smpsNoAttack, $01
00084822 E108                       	smpsAlterNote       $08
00084824 E701                       	dc.b	smpsNoAttack, $01
00084826 E10B                       	smpsAlterNote       $0B
00084828 E701                       	dc.b	smpsNoAttack, $01
0008482A E10F                       	smpsAlterNote       $0F
0008482C E701                       	dc.b	smpsNoAttack, $01
0008482E E10B                       	smpsAlterNote       $0B
00084830 E701                       	dc.b	smpsNoAttack, $01
00084832 E105                       	smpsAlterNote       $05
00084834 E701                       	dc.b	smpsNoAttack, $01
00084836 E104                       	smpsAlterNote       $04
00084838 E701                       	dc.b	smpsNoAttack, $01
0008483A E108                       	smpsAlterNote       $08
0008483C E701                       	dc.b	smpsNoAttack, $01
0008483E E10E                       	smpsAlterNote       $0E
00084840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084844 E10B                       	smpsAlterNote       $0B
00084846 E701                       	dc.b	smpsNoAttack, $01
00084848 E105                       	smpsAlterNote       $05
0008484A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008484E E10C                       	smpsAlterNote       $0C
00084850 C70E                       	dc.b	nBb5, $0E
00084852 E106                       	smpsAlterNote       $06
00084854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084858 E10C                       	smpsAlterNote       $0C
0008485A E701                       	dc.b	smpsNoAttack, $01
0008485C E10F                       	smpsAlterNote       $0F
0008485E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084862 E109                       	smpsAlterNote       $09
00084864 E701                       	dc.b	smpsNoAttack, $01
00084866 E105                       	smpsAlterNote       $05
00084868 E701                       	dc.b	smpsNoAttack, $01
0008486A E106                       	smpsAlterNote       $06
0008486C E701                       	dc.b	smpsNoAttack, $01
0008486E E10C                       	smpsAlterNote       $0C
00084870 E701                       	dc.b	smpsNoAttack, $01
00084872 E110                       	smpsAlterNote       $10
00084874 E701                       	dc.b	smpsNoAttack, $01
00084876 E10C                       	smpsAlterNote       $0C
00084878 E701                       	dc.b	smpsNoAttack, $01
0008487A E109                       	smpsAlterNote       $09
0008487C E701                       	dc.b	smpsNoAttack, $01
0008487E E105                       	smpsAlterNote       $05
00084880 E701                       	dc.b	smpsNoAttack, $01
00084882 E106                       	smpsAlterNote       $06
00084884 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00084888 E107                       	smpsAlterNote       $07
0008488A CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008488F E108                       	smpsAlterNote       $08
00084891 CD0D                       	dc.b	nE6, $0D
00084893 E107                       	smpsAlterNote       $07
00084895 CB0D                       	dc.b	nD6, $0D
00084897 E104                       	smpsAlterNote       $04
00084899 E701                       	dc.b	smpsNoAttack, $01
0008489B E100                       	smpsAlterNote       $00
0008489D E701                       	dc.b	smpsNoAttack, $01
0008489F E101                       	smpsAlterNote       $01
000848A1 E701                       	dc.b	smpsNoAttack, $01
000848A3 E107                       	smpsAlterNote       $07
000848A5 E701                       	dc.b	smpsNoAttack, $01
000848A7 E10B                       	smpsAlterNote       $0B
000848A9 E701                       	dc.b	smpsNoAttack, $01
000848AB E107                       	smpsAlterNote       $07
000848AD E701                       	dc.b	smpsNoAttack, $01
000848AF E104                       	smpsAlterNote       $04
000848B1 E701                       	dc.b	smpsNoAttack, $01
000848B3 E100                       	smpsAlterNote       $00
000848B5 E701                       	dc.b	smpsNoAttack, $01
000848B7 E104                       	smpsAlterNote       $04
000848B9 E701                       	dc.b	smpsNoAttack, $01
000848BB E10A                       	smpsAlterNote       $0A
000848BD E701                       	dc.b	smpsNoAttack, $01
000848BF E10B                       	smpsAlterNote       $0B
000848C1 E701                       	dc.b	smpsNoAttack, $01
000848C3 E108                       	smpsAlterNote       $08
000848C5 CC0D                       	dc.b	nEb6, $0D
000848C7 E105                       	smpsAlterNote       $05
000848C9 E701                       	dc.b	smpsNoAttack, $01
000848CB E101                       	smpsAlterNote       $01
000848CD E701                       	dc.b	smpsNoAttack, $01
000848CF E102                       	smpsAlterNote       $02
000848D1 E701                       	dc.b	smpsNoAttack, $01
000848D3 E108                       	smpsAlterNote       $08
000848D5 E701                       	dc.b	smpsNoAttack, $01
000848D7 E106                       	smpsAlterNote       $06
000848D9 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000848E5 8001                       	dc.b	nRst, $01
000848E7 E107                       	smpsAlterNote       $07
000848E9 CB0D                       	dc.b	nD6, $0D
000848EB E104                       	smpsAlterNote       $04
000848ED E701                       	dc.b	smpsNoAttack, $01
000848EF E100                       	smpsAlterNote       $00
000848F1 E701                       	dc.b	smpsNoAttack, $01
000848F3 E104                       	smpsAlterNote       $04
000848F5 E701                       	dc.b	smpsNoAttack, $01
000848F7 E107                       	smpsAlterNote       $07
000848F9 E701                       	dc.b	smpsNoAttack, $01
000848FB E10B                       	smpsAlterNote       $0B
000848FD E701                       	dc.b	smpsNoAttack, $01
000848FF E107                       	smpsAlterNote       $07
00084901 E701                       	dc.b	smpsNoAttack, $01
00084903 E101                       	smpsAlterNote       $01
00084905 E701                       	dc.b	smpsNoAttack, $01
00084907 E100                       	smpsAlterNote       $00
00084909 E701                       	dc.b	smpsNoAttack, $01
0008490B E104                       	smpsAlterNote       $04
0008490D E701                       	dc.b	smpsNoAttack, $01
0008490F E10A                       	smpsAlterNote       $0A
00084911 E701                       	dc.b	smpsNoAttack, $01
00084913 E10B                       	smpsAlterNote       $0B
00084915 8001                       	dc.b	nRst, $01
00084917 E109                       	smpsAlterNote       $09
00084919 CE0A                       	dc.b	nF6, $0A
0008491B E108                       	smpsAlterNote       $08
0008491D CC07                       	dc.b	nEb6, $07
0008491F E106                       	smpsAlterNote       $06
00084921 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008492D E107                       	smpsAlterNote       $07
0008492F CB0D                       	dc.b	nD6, $0D
00084931 E101                       	smpsAlterNote       $01
00084933 E701                       	dc.b	smpsNoAttack, $01
00084935 E100                       	smpsAlterNote       $00
00084937 E701                       	dc.b	smpsNoAttack, $01
00084939 E104                       	smpsAlterNote       $04
0008493B E701                       	dc.b	smpsNoAttack, $01
0008493D E10A                       	smpsAlterNote       $0A
0008493F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084943 E107                       	smpsAlterNote       $07
00084945 E701                       	dc.b	smpsNoAttack, $01
00084947 E101                       	smpsAlterNote       $01
00084949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008494D E107                       	smpsAlterNote       $07
0008494F E701                       	dc.b	smpsNoAttack, $01
00084951 E10A                       	smpsAlterNote       $0A
00084953 E701                       	dc.b	smpsNoAttack, $01
00084955 E10B                       	smpsAlterNote       $0B
00084957 8001                       	dc.b	nRst, $01
00084959 E108                       	smpsAlterNote       $08
0008495B CC0D                       	dc.b	nEb6, $0D
0008495D E102                       	smpsAlterNote       $02
0008495F E701                       	dc.b	smpsNoAttack, $01
00084961 E101                       	smpsAlterNote       $01
00084963 E701                       	dc.b	smpsNoAttack, $01
00084965 E105                       	smpsAlterNote       $05
00084967 E701                       	dc.b	smpsNoAttack, $01
00084969 E108                       	smpsAlterNote       $08
0008496B 8001                       	dc.b	nRst, $01
0008496D E106                       	smpsAlterNote       $06
0008496F C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008497B 8001                       	dc.b	nRst, $01
0008497D E107                       	smpsAlterNote       $07
0008497F CB0D                       	dc.b	nD6, $0D
00084981 E101                       	smpsAlterNote       $01
00084983 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084987 E104                       	smpsAlterNote       $04
00084989 E701                       	dc.b	smpsNoAttack, $01
0008498B E10A                       	smpsAlterNote       $0A
0008498D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084991 E104                       	smpsAlterNote       $04
00084993 E701                       	dc.b	smpsNoAttack, $01
00084995 E101                       	smpsAlterNote       $01
00084997 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008499B E107                       	smpsAlterNote       $07
0008499D E701                       	dc.b	smpsNoAttack, $01
0008499F E10B                       	smpsAlterNote       $0B
000849A1 E701                       	dc.b	smpsNoAttack, $01
000849A3 E10A                       	smpsAlterNote       $0A
000849A5 E701                       	dc.b	smpsNoAttack, $01
000849A7 E104                       	smpsAlterNote       $04
000849A9 E701                       	dc.b	smpsNoAttack, $01
000849AB E100                       	smpsAlterNote       $00
000849AD E701                       	dc.b	smpsNoAttack, $01
000849AF E101                       	smpsAlterNote       $01
000849B1 801C                       	dc.b	nRst, $1C
000849B5 E107                       	smpsAlterNote       $07
000849B7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000849BB E603                       	smpsAlterVol        $03
000849BD F6F1 AD                    	smpsJump            music84_Jump03
000849C0                            
000849C0                            ; FM3 Data
000849C0                            music84_FM3:
000849C0 E0C0                       	smpsPan             panCenter, $00
000849C4 E109                       	smpsAlterNote       $09
000849C6 C203 8007                  	dc.b	nF5, $03, nRst, $07
000849CA E108                       	smpsAlterNote       $08
000849CC C103 800B                  	dc.b	nE5, $03, nRst, $0B
000849D0 E10B                       	smpsAlterNote       $0B
000849D2 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000849D8 E040                       	smpsPan             panRight, $00
000849DA E110                       	smpsAlterNote       $10
000849DC E6F9                       	smpsAlterVol        $F9
000849DE C702 8001                  	dc.b	nBb5, $02, nRst, $01
000849E2 E10F                       	smpsAlterNote       $0F
000849E4 C603                       	dc.b	nA5, $03
000849E6 E10D                       	smpsAlterNote       $0D
000849E8 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000849EE E10C                       	smpsAlterNote       $0C
000849F0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000849F4 E10A                       	smpsAlterNote       $0A
000849F6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000849FA E10F                       	smpsAlterNote       $0F
000849FC BA01 8001                  	dc.b	nA4, $01, nRst, $01
00084A00 E0C0                       	smpsPan             panCenter, $00
00084A04 E109                       	smpsAlterNote       $09
00084A06 E609                       	smpsAlterVol        $09
00084A08 B603                       	dc.b	nF4, $03
00084A0A                            
00084A0A                            music84_Jump02:
00084A0A E70A                       	dc.b	smpsNoAttack, $0A
00084A0C E103                       	smpsAlterNote       $03
00084A0E E701                       	dc.b	smpsNoAttack, $01
00084A10 E102                       	smpsAlterNote       $02
00084A12 E701                       	dc.b	smpsNoAttack, $01
00084A14 E106                       	smpsAlterNote       $06
00084A16 E701                       	dc.b	smpsNoAttack, $01
00084A18 E10C                       	smpsAlterNote       $0C
00084A1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A1E E109                       	smpsAlterNote       $09
00084A20 E701                       	dc.b	smpsNoAttack, $01
00084A22 E103                       	smpsAlterNote       $03
00084A24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A28 E109                       	smpsAlterNote       $09
00084A2A E701                       	dc.b	smpsNoAttack, $01
00084A2C E10C                       	smpsAlterNote       $0C
00084A2E E701                       	dc.b	smpsNoAttack, $01
00084A30 E10D                       	smpsAlterNote       $0D
00084A32 8001                       	dc.b	nRst, $01
00084A34 E109                       	smpsAlterNote       $09
00084A36 B80D                       	dc.b	nG4, $0D
00084A38 E103                       	smpsAlterNote       $03
00084A3A E701                       	dc.b	smpsNoAttack, $01
00084A3C E102                       	smpsAlterNote       $02
00084A3E E701                       	dc.b	smpsNoAttack, $01
00084A40 E106                       	smpsAlterNote       $06
00084A42 E701                       	dc.b	smpsNoAttack, $01
00084A44 E10C                       	smpsAlterNote       $0C
00084A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A4A E109                       	smpsAlterNote       $09
00084A4C E701                       	dc.b	smpsNoAttack, $01
00084A4E E103                       	smpsAlterNote       $03
00084A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A54 E109                       	smpsAlterNote       $09
00084A56 E701                       	dc.b	smpsNoAttack, $01
00084A58 E10C                       	smpsAlterNote       $0C
00084A5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A5E E106                       	smpsAlterNote       $06
00084A60 E701                       	dc.b	smpsNoAttack, $01
00084A62 E102                       	smpsAlterNote       $02
00084A64 E701                       	dc.b	smpsNoAttack, $01
00084A66 E103                       	smpsAlterNote       $03
00084A68 E701                       	dc.b	smpsNoAttack, $01
00084A6A E109                       	smpsAlterNote       $09
00084A6C E701                       	dc.b	smpsNoAttack, $01
00084A6E E10D                       	smpsAlterNote       $0D
00084A70 E701                       	dc.b	smpsNoAttack, $01
00084A72 E109                       	smpsAlterNote       $09
00084A74 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084A78 E10B                       	smpsAlterNote       $0B
00084A7A BA0D                       	dc.b	nA4, $0D
00084A7C E105                       	smpsAlterNote       $05
00084A7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A82 E108                       	smpsAlterNote       $08
00084A84 E701                       	dc.b	smpsNoAttack, $01
00084A86 E10E                       	smpsAlterNote       $0E
00084A88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084A8C E108                       	smpsAlterNote       $08
00084A8E E701                       	dc.b	smpsNoAttack, $01
00084A90 E104                       	smpsAlterNote       $04
00084A92 E701                       	dc.b	smpsNoAttack, $01
00084A94 E105                       	smpsAlterNote       $05
00084A96 E701                       	dc.b	smpsNoAttack, $01
00084A98 E10B                       	smpsAlterNote       $0B
00084A9A E701                       	dc.b	smpsNoAttack, $01
00084A9C E10F                       	smpsAlterNote       $0F
00084A9E E701                       	dc.b	smpsNoAttack, $01
00084AA0 E10B                       	smpsAlterNote       $0B
00084AA2 E701                       	dc.b	smpsNoAttack, $01
00084AA4 E108                       	smpsAlterNote       $08
00084AA6 E701                       	dc.b	smpsNoAttack, $01
00084AA8 E104                       	smpsAlterNote       $04
00084AAA E701                       	dc.b	smpsNoAttack, $01
00084AAC E108                       	smpsAlterNote       $08
00084AAE E701                       	dc.b	smpsNoAttack, $01
00084AB0 E10E                       	smpsAlterNote       $0E
00084AB2 E701                       	dc.b	smpsNoAttack, $01
00084AB4 E10F                       	smpsAlterNote       $0F
00084AB6 E701                       	dc.b	smpsNoAttack, $01
00084AB8 E10B                       	smpsAlterNote       $0B
00084ABA E701                       	dc.b	smpsNoAttack, $01
00084ABC E105                       	smpsAlterNote       $05
00084ABE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AC2 E108                       	smpsAlterNote       $08
00084AC4 E701                       	dc.b	smpsNoAttack, $01
00084AC6 E10E                       	smpsAlterNote       $0E
00084AC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084ACC E108                       	smpsAlterNote       $08
00084ACE E701                       	dc.b	smpsNoAttack, $01
00084AD0 E105                       	smpsAlterNote       $05
00084AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084AD6 E10B                       	smpsAlterNote       $0B
00084AD8 E701                       	dc.b	smpsNoAttack, $01
00084ADA E10F                       	smpsAlterNote       $0F
00084ADC E701                       	dc.b	smpsNoAttack, $01
00084ADE E10E                       	smpsAlterNote       $0E
00084AE0 E701                       	dc.b	smpsNoAttack, $01
00084AE2 E108                       	smpsAlterNote       $08
00084AE4 E701                       	dc.b	smpsNoAttack, $01
00084AE6 E104                       	smpsAlterNote       $04
00084AE8 E701                       	dc.b	smpsNoAttack, $01
00084AEA E105                       	smpsAlterNote       $05
00084AEC 8001                       	dc.b	nRst, $01
00084AEE E108                       	smpsAlterNote       $08
00084AF0 B50A                       	dc.b	nE4, $0A
00084AF2 E109                       	smpsAlterNote       $09
00084AF4 B60D                       	dc.b	nF4, $0D
00084AF6 E106                       	smpsAlterNote       $06
00084AF8 E701                       	dc.b	smpsNoAttack, $01
00084AFA E103                       	smpsAlterNote       $03
00084AFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B00 E109                       	smpsAlterNote       $09
00084B02 E701                       	dc.b	smpsNoAttack, $01
00084B04 E10D                       	smpsAlterNote       $0D
00084B06 E701                       	dc.b	smpsNoAttack, $01
00084B08 E10C                       	smpsAlterNote       $0C
00084B0A E701                       	dc.b	smpsNoAttack, $01
00084B0C E106                       	smpsAlterNote       $06
00084B0E E701                       	dc.b	smpsNoAttack, $01
00084B10 E102                       	smpsAlterNote       $02
00084B12 E701                       	dc.b	smpsNoAttack, $01
00084B14 E106                       	smpsAlterNote       $06
00084B16 E701                       	dc.b	smpsNoAttack, $01
00084B18 E109                       	smpsAlterNote       $09
00084B1A E701                       	dc.b	smpsNoAttack, $01
00084B1C E10D                       	smpsAlterNote       $0D
00084B1E E701                       	dc.b	smpsNoAttack, $01
00084B20 E109                       	smpsAlterNote       $09
00084B22 B80D                       	dc.b	nG4, $0D
00084B24 E106                       	smpsAlterNote       $06
00084B26 E701                       	dc.b	smpsNoAttack, $01
00084B28 E103                       	smpsAlterNote       $03
00084B2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B2E E109                       	smpsAlterNote       $09
00084B30 E701                       	dc.b	smpsNoAttack, $01
00084B32 E10D                       	smpsAlterNote       $0D
00084B34 E701                       	dc.b	smpsNoAttack, $01
00084B36 E10C                       	smpsAlterNote       $0C
00084B38 E701                       	dc.b	smpsNoAttack, $01
00084B3A E106                       	smpsAlterNote       $06
00084B3C E701                       	dc.b	smpsNoAttack, $01
00084B3E E102                       	smpsAlterNote       $02
00084B40 E701                       	dc.b	smpsNoAttack, $01
00084B42 E106                       	smpsAlterNote       $06
00084B44 E701                       	dc.b	smpsNoAttack, $01
00084B46 E109                       	smpsAlterNote       $09
00084B48 E701                       	dc.b	smpsNoAttack, $01
00084B4A E10D                       	smpsAlterNote       $0D
00084B4C E701                       	dc.b	smpsNoAttack, $01
00084B4E E109                       	smpsAlterNote       $09
00084B50 E701                       	dc.b	smpsNoAttack, $01
00084B52 E103                       	smpsAlterNote       $03
00084B54 E701                       	dc.b	smpsNoAttack, $01
00084B56 E102                       	smpsAlterNote       $02
00084B58 E701                       	dc.b	smpsNoAttack, $01
00084B5A E106                       	smpsAlterNote       $06
00084B5C E701                       	dc.b	smpsNoAttack, $01
00084B5E E10C                       	smpsAlterNote       $0C
00084B60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B64 E109                       	smpsAlterNote       $09
00084B66 E701                       	dc.b	smpsNoAttack, $01
00084B68 E10B                       	smpsAlterNote       $0B
00084B6A BA0D                       	dc.b	nA4, $0D
00084B6C E108                       	smpsAlterNote       $08
00084B6E E701                       	dc.b	smpsNoAttack, $01
00084B70 E104                       	smpsAlterNote       $04
00084B72 E701                       	dc.b	smpsNoAttack, $01
00084B74 E108                       	smpsAlterNote       $08
00084B76 E701                       	dc.b	smpsNoAttack, $01
00084B78 E10B                       	smpsAlterNote       $0B
00084B7A E701                       	dc.b	smpsNoAttack, $01
00084B7C E10F                       	smpsAlterNote       $0F
00084B7E E701                       	dc.b	smpsNoAttack, $01
00084B80 E10B                       	smpsAlterNote       $0B
00084B82 E701                       	dc.b	smpsNoAttack, $01
00084B84 E105                       	smpsAlterNote       $05
00084B86 E701                       	dc.b	smpsNoAttack, $01
00084B88 E104                       	smpsAlterNote       $04
00084B8A E701                       	dc.b	smpsNoAttack, $01
00084B8C E108                       	smpsAlterNote       $08
00084B8E E701                       	dc.b	smpsNoAttack, $01
00084B90 E10E                       	smpsAlterNote       $0E
00084B92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084B96 E10B                       	smpsAlterNote       $0B
00084B98 E701                       	dc.b	smpsNoAttack, $01
00084B9A E105                       	smpsAlterNote       $05
00084B9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BA0 E10B                       	smpsAlterNote       $0B
00084BA2 E701                       	dc.b	smpsNoAttack, $01
00084BA4 E10E                       	smpsAlterNote       $0E
00084BA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084BAA E108                       	smpsAlterNote       $08
00084BAC E701                       	dc.b	smpsNoAttack, $01
00084BAE E104                       	smpsAlterNote       $04
00084BB0 E701                       	dc.b	smpsNoAttack, $01
00084BB2 E105                       	smpsAlterNote       $05
00084BB4 E701                       	dc.b	smpsNoAttack, $01
00084BB6 E10B                       	smpsAlterNote       $0B
00084BB8 E701                       	dc.b	smpsNoAttack, $01
00084BBA E10F                       	smpsAlterNote       $0F
00084BBC E701                       	dc.b	smpsNoAttack, $01
00084BBE E10B                       	smpsAlterNote       $0B
00084BC0 E701                       	dc.b	smpsNoAttack, $01
00084BC2 E108                       	smpsAlterNote       $08
00084BC4 E701                       	dc.b	smpsNoAttack, $01
00084BC6 E105                       	smpsAlterNote       $05
00084BC8 8001                       	dc.b	nRst, $01
00084BCA E109                       	smpsAlterNote       $09
00084BCC B609 8001                  	dc.b	nF4, $09, nRst, $01
00084BD0 E108                       	smpsAlterNote       $08
00084BD2 B506 8001                  	dc.b	nE4, $06, nRst, $01
00084BD6 E107                       	smpsAlterNote       $07
00084BD8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00084BDC E108                       	smpsAlterNote       $08
00084BDE B502 8001                  	dc.b	nE4, $02, nRst, $01
00084BE2 E109                       	smpsAlterNote       $09
00084BE4 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00084BEA E10B                       	smpsAlterNote       $0B
00084BEC BA0D                       	dc.b	nA4, $0D
00084BEE E108                       	smpsAlterNote       $08
00084BF0 E701                       	dc.b	smpsNoAttack, $01
00084BF2 E104                       	smpsAlterNote       $04
00084BF4 E701                       	dc.b	smpsNoAttack, $01
00084BF6 E108                       	smpsAlterNote       $08
00084BF8 E701                       	dc.b	smpsNoAttack, $01
00084BFA E10E                       	smpsAlterNote       $0E
00084BFC E701                       	dc.b	smpsNoAttack, $01
00084BFE E10F                       	smpsAlterNote       $0F
00084C00 E701                       	dc.b	smpsNoAttack, $01
00084C02 E10B                       	smpsAlterNote       $0B
00084C04 E701                       	dc.b	smpsNoAttack, $01
00084C06 E105                       	smpsAlterNote       $05
00084C08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C0C E108                       	smpsAlterNote       $08
00084C0E E701                       	dc.b	smpsNoAttack, $01
00084C10 E10E                       	smpsAlterNote       $0E
00084C12 E701                       	dc.b	smpsNoAttack, $01
00084C14 E10F                       	smpsAlterNote       $0F
00084C16 8001                       	dc.b	nRst, $01
00084C18 E109                       	smpsAlterNote       $09
00084C1A C20D                       	dc.b	nF5, $0D
00084C1C E103                       	smpsAlterNote       $03
00084C1E E701                       	dc.b	smpsNoAttack, $01
00084C20 E102                       	smpsAlterNote       $02
00084C22 E701                       	dc.b	smpsNoAttack, $01
00084C24 E106                       	smpsAlterNote       $06
00084C26 E701                       	dc.b	smpsNoAttack, $01
00084C28 E10C                       	smpsAlterNote       $0C
00084C2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C2E E109                       	smpsAlterNote       $09
00084C30 E701                       	dc.b	smpsNoAttack, $01
00084C32 E103                       	smpsAlterNote       $03
00084C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C38 E109                       	smpsAlterNote       $09
00084C3A E701                       	dc.b	smpsNoAttack, $01
00084C3C E10C                       	smpsAlterNote       $0C
00084C3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C42 E106                       	smpsAlterNote       $06
00084C44 E701                       	dc.b	smpsNoAttack, $01
00084C46 E102                       	smpsAlterNote       $02
00084C48 E701                       	dc.b	smpsNoAttack, $01
00084C4A E103                       	smpsAlterNote       $03
00084C4C E701                       	dc.b	smpsNoAttack, $01
00084C4E E109                       	smpsAlterNote       $09
00084C50 E701                       	dc.b	smpsNoAttack, $01
00084C52 E10D                       	smpsAlterNote       $0D
00084C54 E701                       	dc.b	smpsNoAttack, $01
00084C56 E109                       	smpsAlterNote       $09
00084C58 E701                       	dc.b	smpsNoAttack, $01
00084C5A E106                       	smpsAlterNote       $06
00084C5C E701                       	dc.b	smpsNoAttack, $01
00084C5E E102                       	smpsAlterNote       $02
00084C60 E701                       	dc.b	smpsNoAttack, $01
00084C62 E106                       	smpsAlterNote       $06
00084C64 E701                       	dc.b	smpsNoAttack, $01
00084C66 E10C                       	smpsAlterNote       $0C
00084C68 E701                       	dc.b	smpsNoAttack, $01
00084C6A E10D                       	smpsAlterNote       $0D
00084C6C E701                       	dc.b	smpsNoAttack, $01
00084C6E E109                       	smpsAlterNote       $09
00084C70 E701                       	dc.b	smpsNoAttack, $01
00084C72 E103                       	smpsAlterNote       $03
00084C74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C78 E106                       	smpsAlterNote       $06
00084C7A E701                       	dc.b	smpsNoAttack, $01
00084C7C E10C                       	smpsAlterNote       $0C
00084C7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C82 E106                       	smpsAlterNote       $06
00084C84 E701                       	dc.b	smpsNoAttack, $01
00084C86 E103                       	smpsAlterNote       $03
00084C88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084C8C E109                       	smpsAlterNote       $09
00084C8E E701                       	dc.b	smpsNoAttack, $01
00084C90 E10D                       	smpsAlterNote       $0D
00084C92 E701                       	dc.b	smpsNoAttack, $01
00084C94 E10C                       	smpsAlterNote       $0C
00084C96 E701                       	dc.b	smpsNoAttack, $01
00084C98 E106                       	smpsAlterNote       $06
00084C9A E701                       	dc.b	smpsNoAttack, $01
00084C9C E102                       	smpsAlterNote       $02
00084C9E E701                       	dc.b	smpsNoAttack, $01
00084CA0 E106                       	smpsAlterNote       $06
00084CA2 E701                       	dc.b	smpsNoAttack, $01
00084CA4 E109                       	smpsAlterNote       $09
00084CA6 E701                       	dc.b	smpsNoAttack, $01
00084CA8 E10D                       	smpsAlterNote       $0D
00084CAA E701                       	dc.b	smpsNoAttack, $01
00084CAC E109                       	smpsAlterNote       $09
00084CAE E701                       	dc.b	smpsNoAttack, $01
00084CB0 E103                       	smpsAlterNote       $03
00084CB2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084CB6 E109                       	smpsAlterNote       $09
00084CB8 C206                       	dc.b	nF5, $06
00084CBA E108                       	smpsAlterNote       $08
00084CBC C10E                       	dc.b	nE5, $0E
00084CBE E102                       	smpsAlterNote       $02
00084CC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CC4 E108                       	smpsAlterNote       $08
00084CC6 E701                       	dc.b	smpsNoAttack, $01
00084CC8 E10B                       	smpsAlterNote       $0B
00084CCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CCE E105                       	smpsAlterNote       $05
00084CD0 E701                       	dc.b	smpsNoAttack, $01
00084CD2 E101                       	smpsAlterNote       $01
00084CD4 E701                       	dc.b	smpsNoAttack, $01
00084CD6 E102                       	smpsAlterNote       $02
00084CD8 E701                       	dc.b	smpsNoAttack, $01
00084CDA E108                       	smpsAlterNote       $08
00084CDC E701                       	dc.b	smpsNoAttack, $01
00084CDE E10C                       	smpsAlterNote       $0C
00084CE0 E701                       	dc.b	smpsNoAttack, $01
00084CE2 E107                       	smpsAlterNote       $07
00084CE4 BF0E                       	dc.b	nD5, $0E
00084CE6 E101                       	smpsAlterNote       $01
00084CE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CEC E107                       	smpsAlterNote       $07
00084CEE E701                       	dc.b	smpsNoAttack, $01
00084CF0 E10A                       	smpsAlterNote       $0A
00084CF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084CF6 E104                       	smpsAlterNote       $04
00084CF8 E701                       	dc.b	smpsNoAttack, $01
00084CFA E100                       	smpsAlterNote       $00
00084CFC E701                       	dc.b	smpsNoAttack, $01
00084CFE E104                       	smpsAlterNote       $04
00084D00 E701                       	dc.b	smpsNoAttack, $01
00084D02 E107                       	smpsAlterNote       $07
00084D04 E701                       	dc.b	smpsNoAttack, $01
00084D06 E10B                       	smpsAlterNote       $0B
00084D08 E701                       	dc.b	smpsNoAttack, $01
00084D0A E107                       	smpsAlterNote       $07
00084D0C E701                       	dc.b	smpsNoAttack, $01
00084D0E E101                       	smpsAlterNote       $01
00084D10 E701                       	dc.b	smpsNoAttack, $01
00084D12 E100                       	smpsAlterNote       $00
00084D14 E701                       	dc.b	smpsNoAttack, $01
00084D16 E104                       	smpsAlterNote       $04
00084D18 E701                       	dc.b	smpsNoAttack, $01
00084D1A E10A                       	smpsAlterNote       $0A
00084D1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D20 E107                       	smpsAlterNote       $07
00084D22 E701                       	dc.b	smpsNoAttack, $01
00084D24 E101                       	smpsAlterNote       $01
00084D26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D2A E107                       	smpsAlterNote       $07
00084D2C E701                       	dc.b	smpsNoAttack, $01
00084D2E E10A                       	smpsAlterNote       $0A
00084D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D34 E104                       	smpsAlterNote       $04
00084D36 E701                       	dc.b	smpsNoAttack, $01
00084D38 E100                       	smpsAlterNote       $00
00084D3A E701                       	dc.b	smpsNoAttack, $01
00084D3C E101                       	smpsAlterNote       $01
00084D3E E701                       	dc.b	smpsNoAttack, $01
00084D40 E107                       	smpsAlterNote       $07
00084D42 E701                       	dc.b	smpsNoAttack, $01
00084D44 E10B                       	smpsAlterNote       $0B
00084D46 E701                       	dc.b	smpsNoAttack, $01
00084D48 E107                       	smpsAlterNote       $07
00084D4A E701                       	dc.b	smpsNoAttack, $01
00084D4C E104                       	smpsAlterNote       $04
00084D4E E701                       	dc.b	smpsNoAttack, $01
00084D50 E100                       	smpsAlterNote       $00
00084D52 E701                       	dc.b	smpsNoAttack, $01
00084D54 E104                       	smpsAlterNote       $04
00084D56 E701                       	dc.b	smpsNoAttack, $01
00084D58 E10A                       	smpsAlterNote       $0A
00084D5A E701                       	dc.b	smpsNoAttack, $01
00084D5C E10B                       	smpsAlterNote       $0B
00084D5E E701                       	dc.b	smpsNoAttack, $01
00084D60 E107                       	smpsAlterNote       $07
00084D62 E701                       	dc.b	smpsNoAttack, $01
00084D64 E101                       	smpsAlterNote       $01
00084D66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D6A E104                       	smpsAlterNote       $04
00084D6C E701                       	dc.b	smpsNoAttack, $01
00084D6E E10A                       	smpsAlterNote       $0A
00084D70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084D74 E104                       	smpsAlterNote       $04
00084D76 E701                       	dc.b	smpsNoAttack, $01
00084D78 E101                       	smpsAlterNote       $01
00084D7A E701                       	dc.b	smpsNoAttack, $01
00084D7E E107                       	smpsAlterNote       $07
00084D80 E6FF                       	smpsAlterVol        $FF
00084D82 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00084D8E 8004                       	dc.b	nRst, $04
00084D92 E109                       	smpsAlterNote       $09
00084D94 E602                       	smpsAlterVol        $02
00084D96 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00084D9C E108                       	smpsAlterNote       $08
00084D9E B502 8001                  	dc.b	nE4, $02, nRst, $01
00084DA2 E109                       	smpsAlterNote       $09
00084DA4 B60D                       	dc.b	nF4, $0D
00084DA6 E106                       	smpsAlterNote       $06
00084DA8 E701                       	dc.b	smpsNoAttack, $01
00084DAA E102                       	smpsAlterNote       $02
00084DAC E701                       	dc.b	smpsNoAttack, $01
00084DAE E106                       	smpsAlterNote       $06
00084DB0 E701                       	dc.b	smpsNoAttack, $01
00084DB2 E109                       	smpsAlterNote       $09
00084DB4 E701                       	dc.b	smpsNoAttack, $01
00084DB6 E10D                       	smpsAlterNote       $0D
00084DB8 E701                       	dc.b	smpsNoAttack, $01
00084DBA E109                       	smpsAlterNote       $09
00084DBC E701                       	dc.b	smpsNoAttack, $01
00084DBE E103                       	smpsAlterNote       $03
00084DC0 E701                       	dc.b	smpsNoAttack, $01
00084DC2 E102                       	smpsAlterNote       $02
00084DC4 E701                       	dc.b	smpsNoAttack, $01
00084DC6 E106                       	smpsAlterNote       $06
00084DC8 E701                       	dc.b	smpsNoAttack, $01
00084DCA E10C                       	smpsAlterNote       $0C
00084DCC E701                       	dc.b	smpsNoAttack, $01
00084DCE E10D                       	smpsAlterNote       $0D
00084DD0 8001                       	dc.b	nRst, $01
00084DD2 E109                       	smpsAlterNote       $09
00084DD4 B80D                       	dc.b	nG4, $0D
00084DD6 E106                       	smpsAlterNote       $06
00084DD8 E701                       	dc.b	smpsNoAttack, $01
00084DDA E102                       	smpsAlterNote       $02
00084DDC E701                       	dc.b	smpsNoAttack, $01
00084DDE E106                       	smpsAlterNote       $06
00084DE0 E701                       	dc.b	smpsNoAttack, $01
00084DE2 E10C                       	smpsAlterNote       $0C
00084DE4 E701                       	dc.b	smpsNoAttack, $01
00084DE6 E10D                       	smpsAlterNote       $0D
00084DE8 E701                       	dc.b	smpsNoAttack, $01
00084DEA E109                       	smpsAlterNote       $09
00084DEC E701                       	dc.b	smpsNoAttack, $01
00084DEE E103                       	smpsAlterNote       $03
00084DF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DF4 E106                       	smpsAlterNote       $06
00084DF6 E701                       	dc.b	smpsNoAttack, $01
00084DF8 E10C                       	smpsAlterNote       $0C
00084DFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084DFE E106                       	smpsAlterNote       $06
00084E00 E701                       	dc.b	smpsNoAttack, $01
00084E02 E103                       	smpsAlterNote       $03
00084E04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E08 E109                       	smpsAlterNote       $09
00084E0A E701                       	dc.b	smpsNoAttack, $01
00084E0C E10D                       	smpsAlterNote       $0D
00084E0E E701                       	dc.b	smpsNoAttack, $01
00084E10 E10C                       	smpsAlterNote       $0C
00084E12 E701                       	dc.b	smpsNoAttack, $01
00084E14 E109                       	smpsAlterNote       $09
00084E16 8001                       	dc.b	nRst, $01
00084E18 E10B                       	smpsAlterNote       $0B
00084E1A BA03                       	dc.b	nA4, $03
00084E1C E10C                       	smpsAlterNote       $0C
00084E1E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00084E22 E10B                       	smpsAlterNote       $0B
00084E24 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00084E2A E10C                       	smpsAlterNote       $0C
00084E2C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084E30 E10B                       	smpsAlterNote       $0B
00084E32 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00084E38 E10C                       	smpsAlterNote       $0C
00084E3A D303                       	dc.b	nBb6, $03
00084E3C E10B                       	smpsAlterNote       $0B
00084E3E D20D                       	dc.b	nA6, $0D
00084E40 E108                       	smpsAlterNote       $08
00084E42 E701                       	dc.b	smpsNoAttack, $01
00084E44 E104                       	smpsAlterNote       $04
00084E46 E701                       	dc.b	smpsNoAttack, $01
00084E48 E105                       	smpsAlterNote       $05
00084E4A E701                       	dc.b	smpsNoAttack, $01
00084E4C E10B                       	smpsAlterNote       $0B
00084E4E E701                       	dc.b	smpsNoAttack, $01
00084E50 E10F                       	smpsAlterNote       $0F
00084E52 E701                       	dc.b	smpsNoAttack, $01
00084E54 E10B                       	smpsAlterNote       $0B
00084E56 E701                       	dc.b	smpsNoAttack, $01
00084E58 E108                       	smpsAlterNote       $08
00084E5A E701                       	dc.b	smpsNoAttack, $01
00084E5C E104                       	smpsAlterNote       $04
00084E5E E701                       	dc.b	smpsNoAttack, $01
00084E60 E108                       	smpsAlterNote       $08
00084E62 E701                       	dc.b	smpsNoAttack, $01
00084E64 E10E                       	smpsAlterNote       $0E
00084E66 E701                       	dc.b	smpsNoAttack, $01
00084E68 E10F                       	smpsAlterNote       $0F
00084E6A E701                       	dc.b	smpsNoAttack, $01
00084E6C E10B                       	smpsAlterNote       $0B
00084E6E E701                       	dc.b	smpsNoAttack, $01
00084E70 E105                       	smpsAlterNote       $05
00084E72 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00084E78 E109                       	smpsAlterNote       $09
00084E7A CE07                       	dc.b	nF6, $07
00084E7C E108                       	smpsAlterNote       $08
00084E7E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00084E82 E109                       	smpsAlterNote       $09
00084E84 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00084E88 E108                       	smpsAlterNote       $08
00084E8A CC0D                       	dc.b	nEb6, $0D
00084E8C E102                       	smpsAlterNote       $02
00084E8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E92 E108                       	smpsAlterNote       $08
00084E94 E701                       	dc.b	smpsNoAttack, $01
00084E96 E10B                       	smpsAlterNote       $0B
00084E98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084E9C E105                       	smpsAlterNote       $05
00084E9E E701                       	dc.b	smpsNoAttack, $01
00084EA0 E101                       	smpsAlterNote       $01
00084EA2 E701                       	dc.b	smpsNoAttack, $01
00084EA4 E102                       	smpsAlterNote       $02
00084EA6 E701                       	dc.b	smpsNoAttack, $01
00084EA8 E108                       	smpsAlterNote       $08
00084EAA E701                       	dc.b	smpsNoAttack, $01
00084EAC E10C                       	smpsAlterNote       $0C
00084EAE E701                       	dc.b	smpsNoAttack, $01
00084EB0 E108                       	smpsAlterNote       $08
00084EB2 E701                       	dc.b	smpsNoAttack, $01
00084EB4 E105                       	smpsAlterNote       $05
00084EB6 E701                       	dc.b	smpsNoAttack, $01
00084EB8 E101                       	smpsAlterNote       $01
00084EBA E701                       	dc.b	smpsNoAttack, $01
00084EBC E105                       	smpsAlterNote       $05
00084EBE E701                       	dc.b	smpsNoAttack, $01
00084EC0 E10B                       	smpsAlterNote       $0B
00084EC2 E701                       	dc.b	smpsNoAttack, $01
00084EC4 E10C                       	smpsAlterNote       $0C
00084EC6 E701                       	dc.b	smpsNoAttack, $01
00084EC8 E108                       	smpsAlterNote       $08
00084ECA E701                       	dc.b	smpsNoAttack, $01
00084ECC E107                       	smpsAlterNote       $07
00084ECE CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00084ED8 E10B                       	smpsAlterNote       $0B
00084EDA C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00084EE4 E109                       	smpsAlterNote       $09
00084EE6 C203                       	dc.b	nF5, $03
00084EE8 E108                       	smpsAlterNote       $08
00084EEA C103 8001                  	dc.b	nE5, $03, nRst, $01
00084EEE E109                       	smpsAlterNote       $09
00084EF0 C20D                       	dc.b	nF5, $0D
00084EF2 E108                       	smpsAlterNote       $08
00084EF4 C10E                       	dc.b	nE5, $0E
00084EF6 E107                       	smpsAlterNote       $07
00084EF8 BF0D                       	dc.b	nD5, $0D
00084EFA E104                       	smpsAlterNote       $04
00084EFC E701                       	dc.b	smpsNoAttack, $01
00084EFE E100                       	smpsAlterNote       $00
00084F00 E701                       	dc.b	smpsNoAttack, $01
00084F02 E104                       	smpsAlterNote       $04
00084F04 E701                       	dc.b	smpsNoAttack, $01
00084F06 E107                       	smpsAlterNote       $07
00084F08 E701                       	dc.b	smpsNoAttack, $01
00084F0A E10B                       	smpsAlterNote       $0B
00084F0C E701                       	dc.b	smpsNoAttack, $01
00084F0E E107                       	smpsAlterNote       $07
00084F10 E701                       	dc.b	smpsNoAttack, $01
00084F12 E101                       	smpsAlterNote       $01
00084F14 E701                       	dc.b	smpsNoAttack, $01
00084F16 E100                       	smpsAlterNote       $00
00084F18 E701                       	dc.b	smpsNoAttack, $01
00084F1A E104                       	smpsAlterNote       $04
00084F1C E701                       	dc.b	smpsNoAttack, $01
00084F1E E10A                       	smpsAlterNote       $0A
00084F20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F24 E107                       	smpsAlterNote       $07
00084F26 E701                       	dc.b	smpsNoAttack, $01
00084F28 E101                       	smpsAlterNote       $01
00084F2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F2E E107                       	smpsAlterNote       $07
00084F30 E701                       	dc.b	smpsNoAttack, $01
00084F32 E10A                       	smpsAlterNote       $0A
00084F34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F38 E104                       	smpsAlterNote       $04
00084F3A E701                       	dc.b	smpsNoAttack, $01
00084F3C E100                       	smpsAlterNote       $00
00084F3E E701                       	dc.b	smpsNoAttack, $01
00084F40 E101                       	smpsAlterNote       $01
00084F42 E701                       	dc.b	smpsNoAttack, $01
00084F44 E107                       	smpsAlterNote       $07
00084F46 E701                       	dc.b	smpsNoAttack, $01
00084F48 E10B                       	smpsAlterNote       $0B
00084F4A E701                       	dc.b	smpsNoAttack, $01
00084F4C E107                       	smpsAlterNote       $07
00084F4E E701                       	dc.b	smpsNoAttack, $01
00084F50 E104                       	smpsAlterNote       $04
00084F52 E701                       	dc.b	smpsNoAttack, $01
00084F54 E100                       	smpsAlterNote       $00
00084F56 E701                       	dc.b	smpsNoAttack, $01
00084F58 E104                       	smpsAlterNote       $04
00084F5A E701                       	dc.b	smpsNoAttack, $01
00084F5C E10A                       	smpsAlterNote       $0A
00084F5E E701                       	dc.b	smpsNoAttack, $01
00084F60 E10B                       	smpsAlterNote       $0B
00084F62 E701                       	dc.b	smpsNoAttack, $01
00084F64 E107                       	smpsAlterNote       $07
00084F66 E701                       	dc.b	smpsNoAttack, $01
00084F68 E101                       	smpsAlterNote       $01
00084F6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F6E E104                       	smpsAlterNote       $04
00084F70 E701                       	dc.b	smpsNoAttack, $01
00084F72 E10A                       	smpsAlterNote       $0A
00084F74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F78 E104                       	smpsAlterNote       $04
00084F7A E701                       	dc.b	smpsNoAttack, $01
00084F7C E101                       	smpsAlterNote       $01
00084F7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F82 E107                       	smpsAlterNote       $07
00084F84 E701                       	dc.b	smpsNoAttack, $01
00084F86 E10B                       	smpsAlterNote       $0B
00084F88 E701                       	dc.b	smpsNoAttack, $01
00084F8A E10A                       	smpsAlterNote       $0A
00084F8C E701                       	dc.b	smpsNoAttack, $01
00084F8E E104                       	smpsAlterNote       $04
00084F90 E701                       	dc.b	smpsNoAttack, $01
00084F92 E100                       	smpsAlterNote       $00
00084F94 E701                       	dc.b	smpsNoAttack, $01
00084F96 E104                       	smpsAlterNote       $04
00084F98 E701                       	dc.b	smpsNoAttack, $01
00084F9A E107                       	smpsAlterNote       $07
00084F9C E701                       	dc.b	smpsNoAttack, $01
00084F9E E10B                       	smpsAlterNote       $0B
00084FA0 E701                       	dc.b	smpsNoAttack, $01
00084FA2 E107                       	smpsAlterNote       $07
00084FA4 E701                       	dc.b	smpsNoAttack, $01
00084FA6 E101                       	smpsAlterNote       $01
00084FA8 E701                       	dc.b	smpsNoAttack, $01
00084FAA E100                       	smpsAlterNote       $00
00084FAC E701                       	dc.b	smpsNoAttack, $01
00084FAE E104                       	smpsAlterNote       $04
00084FB0 E701                       	dc.b	smpsNoAttack, $01
00084FB2 E10A                       	smpsAlterNote       $0A
00084FB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FB8 E107                       	smpsAlterNote       $07
00084FBA E701                       	dc.b	smpsNoAttack, $01
00084FBC E101                       	smpsAlterNote       $01
00084FBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FC2 E107                       	smpsAlterNote       $07
00084FC4 E701                       	dc.b	smpsNoAttack, $01
00084FC6 E10A                       	smpsAlterNote       $0A
00084FC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FCC E104                       	smpsAlterNote       $04
00084FCE E701                       	dc.b	smpsNoAttack, $01
00084FD0 E100                       	smpsAlterNote       $00
00084FD2 E701                       	dc.b	smpsNoAttack, $01
00084FD4 E101                       	smpsAlterNote       $01
00084FD6 E701                       	dc.b	smpsNoAttack, $01
00084FD8 E107                       	smpsAlterNote       $07
00084FDA E701                       	dc.b	smpsNoAttack, $01
00084FDC E10B                       	smpsAlterNote       $0B
00084FDE E701                       	dc.b	smpsNoAttack, $01
00084FE0 E107                       	smpsAlterNote       $07
00084FE2 E701                       	dc.b	smpsNoAttack, $01
00084FE4 E104                       	smpsAlterNote       $04
00084FE6 E701                       	dc.b	smpsNoAttack, $01
00084FE8 E100                       	smpsAlterNote       $00
00084FEA E701                       	dc.b	smpsNoAttack, $01
00084FEC E101                       	smpsAlterNote       $01
00084FEE 8001                       	dc.b	nRst, $01
00084FF0 E109                       	smpsAlterNote       $09
00084FF2 C20D                       	dc.b	nF5, $0D
00084FF4 E106                       	smpsAlterNote       $06
00084FF6 E701                       	dc.b	smpsNoAttack, $01
00084FF8 E102                       	smpsAlterNote       $02
00084FFA E701                       	dc.b	smpsNoAttack, $01
00084FFC E106                       	smpsAlterNote       $06
00084FFE E701                       	dc.b	smpsNoAttack, $01
00085000 E10C                       	smpsAlterNote       $0C
00085002 E701                       	dc.b	smpsNoAttack, $01
00085004 E10D                       	smpsAlterNote       $0D
00085006 E701                       	dc.b	smpsNoAttack, $01
00085008 E109                       	smpsAlterNote       $09
0008500A E701                       	dc.b	smpsNoAttack, $01
0008500C E103                       	smpsAlterNote       $03
0008500E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085012 E106                       	smpsAlterNote       $06
00085014 E701                       	dc.b	smpsNoAttack, $01
00085016 E10C                       	smpsAlterNote       $0C
00085018 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008501C E106                       	smpsAlterNote       $06
0008501E E701                       	dc.b	smpsNoAttack, $01
00085020 E103                       	smpsAlterNote       $03
00085022 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085026 E109                       	smpsAlterNote       $09
00085028 E701                       	dc.b	smpsNoAttack, $01
0008502A E10D                       	smpsAlterNote       $0D
0008502C E701                       	dc.b	smpsNoAttack, $01
0008502E E10C                       	smpsAlterNote       $0C
00085030 E701                       	dc.b	smpsNoAttack, $01
00085032 E109                       	smpsAlterNote       $09
00085034 8001                       	dc.b	nRst, $01
00085036 E108                       	smpsAlterNote       $08
00085038 C10D                       	dc.b	nE5, $0D
0008503A E109                       	smpsAlterNote       $09
0008503C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00085040 E108                       	smpsAlterNote       $08
00085042 C10D                       	dc.b	nE5, $0D
00085044 E102                       	smpsAlterNote       $02
00085046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008504A E105                       	smpsAlterNote       $05
0008504C E701                       	dc.b	smpsNoAttack, $01
0008504E E108                       	smpsAlterNote       $08
00085050 8001                       	dc.b	nRst, $01
00085052 E107                       	smpsAlterNote       $07
00085054 BF0D                       	dc.b	nD5, $0D
00085056 E108                       	smpsAlterNote       $08
00085058 C107                       	dc.b	nE5, $07
0008505A E109                       	smpsAlterNote       $09
0008505C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00085062 E10B                       	smpsAlterNote       $0B
00085064 C603                       	dc.b	nA5, $03
00085066 E10C                       	smpsAlterNote       $0C
00085068 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008506E E10B                       	smpsAlterNote       $0B
00085070 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00085076 E109                       	smpsAlterNote       $09
00085078 D003                       	dc.b	nG6, $03
0008507A E108                       	smpsAlterNote       $08
0008507C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00085080 E10B                       	smpsAlterNote       $0B
00085082 C601 8001                  	dc.b	nA5, $01, nRst, $01
00085086 E108                       	smpsAlterNote       $08
00085088 C102                       	dc.b	nE5, $02
0008508C E10C                       	smpsAlterNote       $0C
0008508E E6FB                       	smpsAlterVol        $FB
00085090 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008509C 8001                       	dc.b	nRst, $01
0008509E E10B                       	smpsAlterNote       $0B
000850A0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000850A8 E107                       	smpsAlterNote       $07
000850AA A706 8001                  	dc.b	nD3, $06, nRst, $01
000850AE E10B                       	smpsAlterNote       $0B
000850B0 A203                       	dc.b	nA2, $03
000850B2 E109                       	smpsAlterNote       $09
000850B4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000850B8 E108                       	smpsAlterNote       $08
000850BA A906                       	dc.b	nE3, $06
000850BC E107                       	smpsAlterNote       $07
000850BE A703 8001                  	dc.b	nD3, $03, nRst, $01
000850C2 E106                       	smpsAlterNote       $06
000850C4 A503                       	dc.b	nC3, $03
000850C6 E10C                       	smpsAlterNote       $0C
000850C8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000850CC E10B                       	smpsAlterNote       $0B
000850CE A203 8004                  	dc.b	nA2, $03, nRst, $04
000850D2 E11B                       	smpsAlterNote       $1B
000850D4 C401                       	dc.b	nG5, $01
000850D6 E1F4                       	smpsAlterNote       $F4
000850D8 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000850DB E106                       	smpsAlterNote       $06
000850DD E701                       	dc.b	smpsNoAttack, $01
000850DF E10F                       	smpsAlterNote       $0F
000850E1 E701                       	dc.b	smpsNoAttack, $01
000850E3 E1E4                       	smpsAlterNote       $E4
000850E5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000850E8 E1F6                       	smpsAlterNote       $F6
000850EA E701                       	dc.b	smpsNoAttack, $01
000850EC E108                       	smpsAlterNote       $08
000850EE E701                       	dc.b	smpsNoAttack, $01
000850F0 E10B                       	smpsAlterNote       $0B
000850F2 E706                       	dc.b	smpsNoAttack, $06
000850F4 E105                       	smpsAlterNote       $05
000850F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850FA E108                       	smpsAlterNote       $08
000850FC E701                       	dc.b	smpsNoAttack, $01
000850FE E10E                       	smpsAlterNote       $0E
00085100 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085104 E108                       	smpsAlterNote       $08
00085106 E701                       	dc.b	smpsNoAttack, $01
00085108 E105                       	smpsAlterNote       $05
0008510A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008510E E10B                       	smpsAlterNote       $0B
00085110 E701                       	dc.b	smpsNoAttack, $01
00085112 E10F                       	smpsAlterNote       $0F
00085114 E701                       	dc.b	smpsNoAttack, $01
00085116 E10E                       	smpsAlterNote       $0E
00085118 E701                       	dc.b	smpsNoAttack, $01
0008511A E108                       	smpsAlterNote       $08
0008511C E701                       	dc.b	smpsNoAttack, $01
0008511E E104                       	smpsAlterNote       $04
00085120 E701                       	dc.b	smpsNoAttack, $01
00085122 E108                       	smpsAlterNote       $08
00085124 E701                       	dc.b	smpsNoAttack, $01
00085126 E10B                       	smpsAlterNote       $0B
00085128 E701                       	dc.b	smpsNoAttack, $01
0008512A E10F                       	smpsAlterNote       $0F
0008512C E701                       	dc.b	smpsNoAttack, $01
0008512E E10B                       	smpsAlterNote       $0B
00085130 E701                       	dc.b	smpsNoAttack, $01
00085132 E105                       	smpsAlterNote       $05
00085134 E701                       	dc.b	smpsNoAttack, $01
00085136 E104                       	smpsAlterNote       $04
00085138 E701                       	dc.b	smpsNoAttack, $01
0008513A E108                       	smpsAlterNote       $08
0008513C E701                       	dc.b	smpsNoAttack, $01
0008513E E10E                       	smpsAlterNote       $0E
00085140 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085144 E10B                       	smpsAlterNote       $0B
00085146 E701                       	dc.b	smpsNoAttack, $01
00085148 E105                       	smpsAlterNote       $05
0008514A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008514E E10B                       	smpsAlterNote       $0B
00085150 E701                       	dc.b	smpsNoAttack, $01
00085152 E10E                       	smpsAlterNote       $0E
00085154 E701                       	dc.b	smpsNoAttack, $01
00085156 E10F                       	smpsAlterNote       $0F
00085158 8001                       	dc.b	nRst, $01
0008515A E109                       	smpsAlterNote       $09
0008515C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00085162 E108                       	smpsAlterNote       $08
00085164 C101 8001                  	dc.b	nE5, $01, nRst, $01
00085168 E109                       	smpsAlterNote       $09
0008516A C202                       	dc.b	nF5, $02
0008516C E108                       	smpsAlterNote       $08
0008516E C102                       	dc.b	nE5, $02
00085170 E107                       	smpsAlterNote       $07
00085172 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085176 E108                       	smpsAlterNote       $08
00085178 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008517C E107                       	smpsAlterNote       $07
0008517E BF02                       	dc.b	nD5, $02
00085180 E106                       	smpsAlterNote       $06
00085182 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00085186 E107                       	smpsAlterNote       $07
00085188 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008518C E106                       	smpsAlterNote       $06
0008518E BD02                       	dc.b	nC5, $02
00085190 E10C                       	smpsAlterNote       $0C
00085192 BB02                       	dc.b	nBb4, $02
00085194 E106                       	smpsAlterNote       $06
00085196 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008519A E10C                       	smpsAlterNote       $0C
0008519C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000851A0 E10B                       	smpsAlterNote       $0B
000851A2 BA02                       	dc.b	nA4, $02
000851A4 E10C                       	smpsAlterNote       $0C
000851A6 BB02                       	dc.b	nBb4, $02
000851A8 E10B                       	smpsAlterNote       $0B
000851AA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000851B4 E108                       	smpsAlterNote       $08
000851B6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000851BE E107                       	smpsAlterNote       $07
000851C0 BE02                       	dc.b	nCs5, $02
000851C2 E10B                       	smpsAlterNote       $0B
000851C4 BA02                       	dc.b	nA4, $02
000851C6 E109                       	smpsAlterNote       $09
000851C8 B802 8001                  	dc.b	nG4, $02, nRst, $01
000851CC E108                       	smpsAlterNote       $08
000851CE B501 8001                  	dc.b	nE4, $01, nRst, $01
000851D2 E10B                       	smpsAlterNote       $0B
000851D4 AE02                       	dc.b	nA3, $02
000851D6 E10C                       	smpsAlterNote       $0C
000851D8 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000851E4 E10B                       	smpsAlterNote       $0B
000851E6 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000851EE E107                       	smpsAlterNote       $07
000851F0 A706 8001                  	dc.b	nD3, $06, nRst, $01
000851F4 E10B                       	smpsAlterNote       $0B
000851F6 A203                       	dc.b	nA2, $03
000851F8 E109                       	smpsAlterNote       $09
000851FA AA03 8001                  	dc.b	nF3, $03, nRst, $01
000851FE E108                       	smpsAlterNote       $08
00085200 A906 8001                  	dc.b	nE3, $06, nRst, $01
00085204 E107                       	smpsAlterNote       $07
00085206 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008520A E106                       	smpsAlterNote       $06
0008520C A503                       	dc.b	nC3, $03
0008520E E10C                       	smpsAlterNote       $0C
00085210 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085216 E107                       	smpsAlterNote       $07
00085218 B20D                       	dc.b	nCs4, $0D
0008521A E104                       	smpsAlterNote       $04
0008521C E701                       	dc.b	smpsNoAttack, $01
0008521E E100                       	smpsAlterNote       $00
00085220 E701                       	dc.b	smpsNoAttack, $01
00085222 E104                       	smpsAlterNote       $04
00085224 E701                       	dc.b	smpsNoAttack, $01
00085226 E10A                       	smpsAlterNote       $0A
00085228 E701                       	dc.b	smpsNoAttack, $01
0008522A E10B                       	smpsAlterNote       $0B
0008522C E701                       	dc.b	smpsNoAttack, $01
0008522E E107                       	smpsAlterNote       $07
00085230 E701                       	dc.b	smpsNoAttack, $01
00085232 E101                       	smpsAlterNote       $01
00085234 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085238 E104                       	smpsAlterNote       $04
0008523A E701                       	dc.b	smpsNoAttack, $01
0008523C E10A                       	smpsAlterNote       $0A
0008523E E701                       	dc.b	smpsNoAttack, $01
00085240 E10B                       	smpsAlterNote       $0B
00085242 8001                       	dc.b	nRst, $01
00085244 E107                       	smpsAlterNote       $07
00085246 B30D                       	dc.b	nD4, $0D
00085248 E104                       	smpsAlterNote       $04
0008524A E701                       	dc.b	smpsNoAttack, $01
0008524C E100                       	smpsAlterNote       $00
0008524E E701                       	dc.b	smpsNoAttack, $01
00085250 E104                       	smpsAlterNote       $04
00085252 E701                       	dc.b	smpsNoAttack, $01
00085254 E10A                       	smpsAlterNote       $0A
00085256 E701                       	dc.b	smpsNoAttack, $01
00085258 E10B                       	smpsAlterNote       $0B
0008525A E701                       	dc.b	smpsNoAttack, $01
0008525C E107                       	smpsAlterNote       $07
0008525E E701                       	dc.b	smpsNoAttack, $01
00085260 E101                       	smpsAlterNote       $01
00085262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085266 E104                       	smpsAlterNote       $04
00085268 E701                       	dc.b	smpsNoAttack, $01
0008526A E10A                       	smpsAlterNote       $0A
0008526C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085270 E104                       	smpsAlterNote       $04
00085272 E701                       	dc.b	smpsNoAttack, $01
00085274 E101                       	smpsAlterNote       $01
00085276 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008527A E107                       	smpsAlterNote       $07
0008527C E701                       	dc.b	smpsNoAttack, $01
0008527E E10B                       	smpsAlterNote       $0B
00085280 E701                       	dc.b	smpsNoAttack, $01
00085282 E10A                       	smpsAlterNote       $0A
00085284 E701                       	dc.b	smpsNoAttack, $01
00085286 E107                       	smpsAlterNote       $07
00085288 8001                       	dc.b	nRst, $01
0008528A E108                       	smpsAlterNote       $08
0008528C B50D                       	dc.b	nE4, $0D
0008528E E102                       	smpsAlterNote       $02
00085290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085294 E105                       	smpsAlterNote       $05
00085296 E701                       	dc.b	smpsNoAttack, $01
00085298 E10B                       	smpsAlterNote       $0B
0008529A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008529E E105                       	smpsAlterNote       $05
000852A0 E701                       	dc.b	smpsNoAttack, $01
000852A2 E102                       	smpsAlterNote       $02
000852A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852A8 E108                       	smpsAlterNote       $08
000852AA E701                       	dc.b	smpsNoAttack, $01
000852AC E10C                       	smpsAlterNote       $0C
000852AE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000852B2 E107                       	smpsAlterNote       $07
000852B4 B30D                       	dc.b	nD4, $0D
000852B6 E101                       	smpsAlterNote       $01
000852B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852BC E104                       	smpsAlterNote       $04
000852BE E701                       	dc.b	smpsNoAttack, $01
000852C0 E10A                       	smpsAlterNote       $0A
000852C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852C6 E104                       	smpsAlterNote       $04
000852C8 E701                       	dc.b	smpsNoAttack, $01
000852CA E101                       	smpsAlterNote       $01
000852CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852D0 E107                       	smpsAlterNote       $07
000852D2 E701                       	dc.b	smpsNoAttack, $01
000852D4 E10B                       	smpsAlterNote       $0B
000852D6 E701                       	dc.b	smpsNoAttack, $01
000852D8 E10A                       	smpsAlterNote       $0A
000852DA E701                       	dc.b	smpsNoAttack, $01
000852DC E104                       	smpsAlterNote       $04
000852DE E701                       	dc.b	smpsNoAttack, $01
000852E0 E100                       	smpsAlterNote       $00
000852E2 E701                       	dc.b	smpsNoAttack, $01
000852E4 E104                       	smpsAlterNote       $04
000852E6 E701                       	dc.b	smpsNoAttack, $01
000852E8 E107                       	smpsAlterNote       $07
000852EA E701                       	dc.b	smpsNoAttack, $01
000852EC E10B                       	smpsAlterNote       $0B
000852EE E701                       	dc.b	smpsNoAttack, $01
000852F0 E107                       	smpsAlterNote       $07
000852F2 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000852F6 E101                       	smpsAlterNote       $01
000852F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852FC E107                       	smpsAlterNote       $07
000852FE E701                       	dc.b	smpsNoAttack, $01
00085300 E10A                       	smpsAlterNote       $0A
00085302 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085306 E104                       	smpsAlterNote       $04
00085308 E701                       	dc.b	smpsNoAttack, $01
0008530A E100                       	smpsAlterNote       $00
0008530C E701                       	dc.b	smpsNoAttack, $01
0008530E E101                       	smpsAlterNote       $01
00085310 E701                       	dc.b	smpsNoAttack, $01
00085312 E107                       	smpsAlterNote       $07
00085314 E701                       	dc.b	smpsNoAttack, $01
00085316 E10B                       	smpsAlterNote       $0B
00085318 E701                       	dc.b	smpsNoAttack, $01
0008531A E107                       	smpsAlterNote       $07
0008531C B30E                       	dc.b	nD4, $0E
0008531E E101                       	smpsAlterNote       $01
00085320 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085324 E107                       	smpsAlterNote       $07
00085326 E701                       	dc.b	smpsNoAttack, $01
00085328 E10A                       	smpsAlterNote       $0A
0008532A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008532E E104                       	smpsAlterNote       $04
00085330 E701                       	dc.b	smpsNoAttack, $01
00085332 E100                       	smpsAlterNote       $00
00085334 E701                       	dc.b	smpsNoAttack, $01
00085336 E101                       	smpsAlterNote       $01
00085338 E701                       	dc.b	smpsNoAttack, $01
0008533A E107                       	smpsAlterNote       $07
0008533C E701                       	dc.b	smpsNoAttack, $01
0008533E E10B                       	smpsAlterNote       $0B
00085340 E701                       	dc.b	smpsNoAttack, $01
00085342 E107                       	smpsAlterNote       $07
00085344 E701                       	dc.b	smpsNoAttack, $01
00085346 E104                       	smpsAlterNote       $04
00085348 E701                       	dc.b	smpsNoAttack, $01
0008534A E100                       	smpsAlterNote       $00
0008534C E701                       	dc.b	smpsNoAttack, $01
0008534E E104                       	smpsAlterNote       $04
00085350 E701                       	dc.b	smpsNoAttack, $01
00085352 E10A                       	smpsAlterNote       $0A
00085354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085358 E107                       	smpsAlterNote       $07
0008535A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008535E E104                       	smpsAlterNote       $04
00085360 E701                       	dc.b	smpsNoAttack, $01
00085362 E100                       	smpsAlterNote       $00
00085364 E701                       	dc.b	smpsNoAttack, $01
00085366 E101                       	smpsAlterNote       $01
00085368 E701                       	dc.b	smpsNoAttack, $01
0008536A E107                       	smpsAlterNote       $07
0008536C E701                       	dc.b	smpsNoAttack, $01
0008536E E10B                       	smpsAlterNote       $0B
00085370 E701                       	dc.b	smpsNoAttack, $01
00085372 E107                       	smpsAlterNote       $07
00085374 E701                       	dc.b	smpsNoAttack, $01
00085376 E104                       	smpsAlterNote       $04
00085378 E701                       	dc.b	smpsNoAttack, $01
0008537A E100                       	smpsAlterNote       $00
0008537C E701                       	dc.b	smpsNoAttack, $01
0008537E E104                       	smpsAlterNote       $04
00085380 E701                       	dc.b	smpsNoAttack, $01
00085382 E10A                       	smpsAlterNote       $0A
00085384 E701                       	dc.b	smpsNoAttack, $01
00085386 E10B                       	smpsAlterNote       $0B
00085388 E701                       	dc.b	smpsNoAttack, $01
0008538C E6FF                       	smpsAlterVol        $FF
0008538E A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008539A 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000853A2 E109                       	smpsAlterNote       $09
000853A4 E601                       	smpsAlterVol        $01
000853A6 B60D                       	dc.b	nF4, $0D
000853A8 E106                       	smpsAlterNote       $06
000853AA E701                       	dc.b	smpsNoAttack, $01
000853AC E102                       	smpsAlterNote       $02
000853AE E701                       	dc.b	smpsNoAttack, $01
000853B0 E106                       	smpsAlterNote       $06
000853B2 E701                       	dc.b	smpsNoAttack, $01
000853B4 E109                       	smpsAlterNote       $09
000853B6 E701                       	dc.b	smpsNoAttack, $01
000853B8 E10D                       	smpsAlterNote       $0D
000853BA E701                       	dc.b	smpsNoAttack, $01
000853BC E109                       	smpsAlterNote       $09
000853BE E701                       	dc.b	smpsNoAttack, $01
000853C0 E103                       	smpsAlterNote       $03
000853C2 E701                       	dc.b	smpsNoAttack, $01
000853C4 E102                       	smpsAlterNote       $02
000853C6 E701                       	dc.b	smpsNoAttack, $01
000853C8 E106                       	smpsAlterNote       $06
000853CA E701                       	dc.b	smpsNoAttack, $01
000853CC E10C                       	smpsAlterNote       $0C
000853CE E701                       	dc.b	smpsNoAttack, $01
000853D0 E10D                       	smpsAlterNote       $0D
000853D2 8001                       	dc.b	nRst, $01
000853D4 E109                       	smpsAlterNote       $09
000853D6 B80D                       	dc.b	nG4, $0D
000853D8 E106                       	smpsAlterNote       $06
000853DA E701                       	dc.b	smpsNoAttack, $01
000853DC E102                       	smpsAlterNote       $02
000853DE E701                       	dc.b	smpsNoAttack, $01
000853E0 E106                       	smpsAlterNote       $06
000853E2 E701                       	dc.b	smpsNoAttack, $01
000853E4 E109                       	smpsAlterNote       $09
000853E6 E701                       	dc.b	smpsNoAttack, $01
000853E8 E10D                       	smpsAlterNote       $0D
000853EA E701                       	dc.b	smpsNoAttack, $01
000853EC E109                       	smpsAlterNote       $09
000853EE E701                       	dc.b	smpsNoAttack, $01
000853F0 E103                       	smpsAlterNote       $03
000853F2 E701                       	dc.b	smpsNoAttack, $01
000853F4 E102                       	smpsAlterNote       $02
000853F6 E701                       	dc.b	smpsNoAttack, $01
000853F8 E106                       	smpsAlterNote       $06
000853FA E701                       	dc.b	smpsNoAttack, $01
000853FC E10C                       	smpsAlterNote       $0C
000853FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085402 E106                       	smpsAlterNote       $06
00085404 E701                       	dc.b	smpsNoAttack, $01
00085406 E103                       	smpsAlterNote       $03
00085408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008540C E109                       	smpsAlterNote       $09
0008540E E701                       	dc.b	smpsNoAttack, $01
00085410 E10D                       	smpsAlterNote       $0D
00085412 E701                       	dc.b	smpsNoAttack, $01
00085414 E10C                       	smpsAlterNote       $0C
00085416 E701                       	dc.b	smpsNoAttack, $01
00085418 E109                       	smpsAlterNote       $09
0008541A 8001                       	dc.b	nRst, $01
0008541C E10B                       	smpsAlterNote       $0B
0008541E BA0D                       	dc.b	nA4, $0D
00085420 E105                       	smpsAlterNote       $05
00085422 E701                       	dc.b	smpsNoAttack, $01
00085424 E104                       	smpsAlterNote       $04
00085426 E701                       	dc.b	smpsNoAttack, $01
00085428 E108                       	smpsAlterNote       $08
0008542A E701                       	dc.b	smpsNoAttack, $01
0008542C E10E                       	smpsAlterNote       $0E
0008542E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085432 E10B                       	smpsAlterNote       $0B
00085434 E701                       	dc.b	smpsNoAttack, $01
00085436 E105                       	smpsAlterNote       $05
00085438 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008543C E10B                       	smpsAlterNote       $0B
0008543E E701                       	dc.b	smpsNoAttack, $01
00085440 E10E                       	smpsAlterNote       $0E
00085442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085446 E108                       	smpsAlterNote       $08
00085448 E701                       	dc.b	smpsNoAttack, $01
0008544A E104                       	smpsAlterNote       $04
0008544C E701                       	dc.b	smpsNoAttack, $01
0008544E E105                       	smpsAlterNote       $05
00085450 E701                       	dc.b	smpsNoAttack, $01
00085452 E10B                       	smpsAlterNote       $0B
00085454 E701                       	dc.b	smpsNoAttack, $01
00085456 E10F                       	smpsAlterNote       $0F
00085458 E701                       	dc.b	smpsNoAttack, $01
0008545A E10B                       	smpsAlterNote       $0B
0008545C E701                       	dc.b	smpsNoAttack, $01
0008545E E108                       	smpsAlterNote       $08
00085460 E701                       	dc.b	smpsNoAttack, $01
00085462 E104                       	smpsAlterNote       $04
00085464 E701                       	dc.b	smpsNoAttack, $01
00085466 E108                       	smpsAlterNote       $08
00085468 E701                       	dc.b	smpsNoAttack, $01
0008546A E10E                       	smpsAlterNote       $0E
0008546C E701                       	dc.b	smpsNoAttack, $01
0008546E E10F                       	smpsAlterNote       $0F
00085470 E701                       	dc.b	smpsNoAttack, $01
00085472 E10B                       	smpsAlterNote       $0B
00085474 E701                       	dc.b	smpsNoAttack, $01
00085476 E105                       	smpsAlterNote       $05
00085478 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008547C E108                       	smpsAlterNote       $08
0008547E E701                       	dc.b	smpsNoAttack, $01
00085480 E10E                       	smpsAlterNote       $0E
00085482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085486 E108                       	smpsAlterNote       $08
00085488 E701                       	dc.b	smpsNoAttack, $01
0008548A E105                       	smpsAlterNote       $05
0008548C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085490 E108                       	smpsAlterNote       $08
00085492 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00085496 E109                       	smpsAlterNote       $09
00085498 B60D                       	dc.b	nF4, $0D
0008549A E103                       	smpsAlterNote       $03
0008549C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854A0 E106                       	smpsAlterNote       $06
000854A2 E701                       	dc.b	smpsNoAttack, $01
000854A4 E10C                       	smpsAlterNote       $0C
000854A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854AA E106                       	smpsAlterNote       $06
000854AC E701                       	dc.b	smpsNoAttack, $01
000854AE E103                       	smpsAlterNote       $03
000854B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854B4 E109                       	smpsAlterNote       $09
000854B6 E701                       	dc.b	smpsNoAttack, $01
000854B8 E10D                       	smpsAlterNote       $0D
000854BA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000854BE E109                       	smpsAlterNote       $09
000854C0 B80D                       	dc.b	nG4, $0D
000854C2 E103                       	smpsAlterNote       $03
000854C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854C8 E109                       	smpsAlterNote       $09
000854CA E701                       	dc.b	smpsNoAttack, $01
000854CC E10C                       	smpsAlterNote       $0C
000854CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854D2 E106                       	smpsAlterNote       $06
000854D4 E701                       	dc.b	smpsNoAttack, $01
000854D6 E102                       	smpsAlterNote       $02
000854D8 E701                       	dc.b	smpsNoAttack, $01
000854DA E103                       	smpsAlterNote       $03
000854DC E701                       	dc.b	smpsNoAttack, $01
000854DE E109                       	smpsAlterNote       $09
000854E0 E701                       	dc.b	smpsNoAttack, $01
000854E2 E10D                       	smpsAlterNote       $0D
000854E4 E701                       	dc.b	smpsNoAttack, $01
000854E6 E109                       	smpsAlterNote       $09
000854E8 E701                       	dc.b	smpsNoAttack, $01
000854EA E106                       	smpsAlterNote       $06
000854EC E701                       	dc.b	smpsNoAttack, $01
000854EE E102                       	smpsAlterNote       $02
000854F0 E701                       	dc.b	smpsNoAttack, $01
000854F2 E106                       	smpsAlterNote       $06
000854F4 E701                       	dc.b	smpsNoAttack, $01
000854F6 E10C                       	smpsAlterNote       $0C
000854F8 E701                       	dc.b	smpsNoAttack, $01
000854FA E10D                       	smpsAlterNote       $0D
000854FC E701                       	dc.b	smpsNoAttack, $01
000854FE E109                       	smpsAlterNote       $09
00085500 E701                       	dc.b	smpsNoAttack, $01
00085502 E10B                       	smpsAlterNote       $0B
00085504 BA0D                       	dc.b	nA4, $0D
00085506 E108                       	smpsAlterNote       $08
00085508 E701                       	dc.b	smpsNoAttack, $01
0008550A E105                       	smpsAlterNote       $05
0008550C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085510 E10B                       	smpsAlterNote       $0B
00085512 E701                       	dc.b	smpsNoAttack, $01
00085514 E10F                       	smpsAlterNote       $0F
00085516 E701                       	dc.b	smpsNoAttack, $01
00085518 E10E                       	smpsAlterNote       $0E
0008551A E701                       	dc.b	smpsNoAttack, $01
0008551C E108                       	smpsAlterNote       $08
0008551E E701                       	dc.b	smpsNoAttack, $01
00085520 E104                       	smpsAlterNote       $04
00085522 E701                       	dc.b	smpsNoAttack, $01
00085524 E108                       	smpsAlterNote       $08
00085526 E701                       	dc.b	smpsNoAttack, $01
00085528 E10B                       	smpsAlterNote       $0B
0008552A E701                       	dc.b	smpsNoAttack, $01
0008552C E10F                       	smpsAlterNote       $0F
0008552E E701                       	dc.b	smpsNoAttack, $01
00085530 E10B                       	smpsAlterNote       $0B
00085532 E701                       	dc.b	smpsNoAttack, $01
00085534 E105                       	smpsAlterNote       $05
00085536 E701                       	dc.b	smpsNoAttack, $01
00085538 E104                       	smpsAlterNote       $04
0008553A E701                       	dc.b	smpsNoAttack, $01
0008553C E108                       	smpsAlterNote       $08
0008553E E701                       	dc.b	smpsNoAttack, $01
00085540 E10E                       	smpsAlterNote       $0E
00085542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085546 E10B                       	smpsAlterNote       $0B
00085548 E701                       	dc.b	smpsNoAttack, $01
0008554A E105                       	smpsAlterNote       $05
0008554C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085550 E10B                       	smpsAlterNote       $0B
00085552 E701                       	dc.b	smpsNoAttack, $01
00085554 E10E                       	smpsAlterNote       $0E
00085556 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008555A E108                       	smpsAlterNote       $08
0008555C E701                       	dc.b	smpsNoAttack, $01
0008555E E105                       	smpsAlterNote       $05
00085560 8001                       	dc.b	nRst, $01
00085562 E109                       	smpsAlterNote       $09
00085564 B60A                       	dc.b	nF4, $0A
00085566 E108                       	smpsAlterNote       $08
00085568 B507                       	dc.b	nE4, $07
0008556A E107                       	smpsAlterNote       $07
0008556C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085570 E108                       	smpsAlterNote       $08
00085572 B503                       	dc.b	nE4, $03
00085574 E109                       	smpsAlterNote       $09
00085576 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008557E E10B                       	smpsAlterNote       $0B
00085580 BA0D                       	dc.b	nA4, $0D
00085582 E108                       	smpsAlterNote       $08
00085584 E701                       	dc.b	smpsNoAttack, $01
00085586 E104                       	smpsAlterNote       $04
00085588 E701                       	dc.b	smpsNoAttack, $01
0008558A E108                       	smpsAlterNote       $08
0008558C E701                       	dc.b	smpsNoAttack, $01
0008558E E10B                       	smpsAlterNote       $0B
00085590 E701                       	dc.b	smpsNoAttack, $01
00085592 E10F                       	smpsAlterNote       $0F
00085594 E701                       	dc.b	smpsNoAttack, $01
00085596 E10B                       	smpsAlterNote       $0B
00085598 E701                       	dc.b	smpsNoAttack, $01
0008559A E105                       	smpsAlterNote       $05
0008559C E701                       	dc.b	smpsNoAttack, $01
0008559E E104                       	smpsAlterNote       $04
000855A0 E701                       	dc.b	smpsNoAttack, $01
000855A2 E108                       	smpsAlterNote       $08
000855A4 E701                       	dc.b	smpsNoAttack, $01
000855A6 E10E                       	smpsAlterNote       $0E
000855A8 E701                       	dc.b	smpsNoAttack, $01
000855AA E10F                       	smpsAlterNote       $0F
000855AC 8001                       	dc.b	nRst, $01
000855AE E109                       	smpsAlterNote       $09
000855B0 C20D                       	dc.b	nF5, $0D
000855B2 E106                       	smpsAlterNote       $06
000855B4 E701                       	dc.b	smpsNoAttack, $01
000855B6 E102                       	smpsAlterNote       $02
000855B8 E701                       	dc.b	smpsNoAttack, $01
000855BA E106                       	smpsAlterNote       $06
000855BC E701                       	dc.b	smpsNoAttack, $01
000855BE E109                       	smpsAlterNote       $09
000855C0 E701                       	dc.b	smpsNoAttack, $01
000855C2 E10D                       	smpsAlterNote       $0D
000855C4 E701                       	dc.b	smpsNoAttack, $01
000855C6 E109                       	smpsAlterNote       $09
000855C8 E701                       	dc.b	smpsNoAttack, $01
000855CA E103                       	smpsAlterNote       $03
000855CC E701                       	dc.b	smpsNoAttack, $01
000855CE E102                       	smpsAlterNote       $02
000855D0 E701                       	dc.b	smpsNoAttack, $01
000855D2 E106                       	smpsAlterNote       $06
000855D4 E701                       	dc.b	smpsNoAttack, $01
000855D6 E10C                       	smpsAlterNote       $0C
000855D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855DC E109                       	smpsAlterNote       $09
000855DE E701                       	dc.b	smpsNoAttack, $01
000855E0 E103                       	smpsAlterNote       $03
000855E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855E6 E109                       	smpsAlterNote       $09
000855E8 E701                       	dc.b	smpsNoAttack, $01
000855EA E10C                       	smpsAlterNote       $0C
000855EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855F0 E106                       	smpsAlterNote       $06
000855F2 E701                       	dc.b	smpsNoAttack, $01
000855F4 E102                       	smpsAlterNote       $02
000855F6 E701                       	dc.b	smpsNoAttack, $01
000855F8 E103                       	smpsAlterNote       $03
000855FA E701                       	dc.b	smpsNoAttack, $01
000855FC E109                       	smpsAlterNote       $09
000855FE E701                       	dc.b	smpsNoAttack, $01
00085600 E10D                       	smpsAlterNote       $0D
00085602 E701                       	dc.b	smpsNoAttack, $01
00085604 E109                       	smpsAlterNote       $09
00085606 E701                       	dc.b	smpsNoAttack, $01
00085608 E106                       	smpsAlterNote       $06
0008560A E701                       	dc.b	smpsNoAttack, $01
0008560C E102                       	smpsAlterNote       $02
0008560E E701                       	dc.b	smpsNoAttack, $01
00085610 E106                       	smpsAlterNote       $06
00085612 E701                       	dc.b	smpsNoAttack, $01
00085614 E10C                       	smpsAlterNote       $0C
00085616 E701                       	dc.b	smpsNoAttack, $01
00085618 E10D                       	smpsAlterNote       $0D
0008561A E701                       	dc.b	smpsNoAttack, $01
0008561C E109                       	smpsAlterNote       $09
0008561E E701                       	dc.b	smpsNoAttack, $01
00085620 E103                       	smpsAlterNote       $03
00085622 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085626 E106                       	smpsAlterNote       $06
00085628 E701                       	dc.b	smpsNoAttack, $01
0008562A E10C                       	smpsAlterNote       $0C
0008562C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085630 E106                       	smpsAlterNote       $06
00085632 E701                       	dc.b	smpsNoAttack, $01
00085634 E103                       	smpsAlterNote       $03
00085636 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008563A E109                       	smpsAlterNote       $09
0008563C E701                       	dc.b	smpsNoAttack, $01
0008563E E10D                       	smpsAlterNote       $0D
00085640 E701                       	dc.b	smpsNoAttack, $01
00085642 E10C                       	smpsAlterNote       $0C
00085644 E701                       	dc.b	smpsNoAttack, $01
00085646 E106                       	smpsAlterNote       $06
00085648 E701                       	dc.b	smpsNoAttack, $01
0008564A E103                       	smpsAlterNote       $03
0008564C 8001                       	dc.b	nRst, $01
0008564E E109                       	smpsAlterNote       $09
00085650 C206 8001                  	dc.b	nF5, $06, nRst, $01
00085656 E10C                       	smpsAlterNote       $0C
00085658 E601                       	smpsAlterVol        $01
0008565A BB0D                       	dc.b	nBb4, $0D
0008565C E106                       	smpsAlterNote       $06
0008565E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085662 E109                       	smpsAlterNote       $09
00085664 E701                       	dc.b	smpsNoAttack, $01
00085666 E10F                       	smpsAlterNote       $0F
00085668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008566C E109                       	smpsAlterNote       $09
0008566E E701                       	dc.b	smpsNoAttack, $01
00085670 E106                       	smpsAlterNote       $06
00085672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085676 E10C                       	smpsAlterNote       $0C
00085678 E701                       	dc.b	smpsNoAttack, $01
0008567A E110                       	smpsAlterNote       $10
0008567C E701                       	dc.b	smpsNoAttack, $01
0008567E E10F                       	smpsAlterNote       $0F
00085680 E701                       	dc.b	smpsNoAttack, $01
00085682 E109                       	smpsAlterNote       $09
00085684 E701                       	dc.b	smpsNoAttack, $01
00085686 E105                       	smpsAlterNote       $05
00085688 E701                       	dc.b	smpsNoAttack, $01
0008568A E106                       	smpsAlterNote       $06
0008568C 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00085690 E103                       	smpsAlterNote       $03
00085692 E701                       	dc.b	smpsNoAttack, $01
00085694 E1FF                       	smpsAlterNote       $FF
00085696 E701                       	dc.b	smpsNoAttack, $01
00085698 E103                       	smpsAlterNote       $03
0008569A E701                       	dc.b	smpsNoAttack, $01
0008569C E106                       	smpsAlterNote       $06
0008569E E701                       	dc.b	smpsNoAttack, $01
000856A0 E10A                       	smpsAlterNote       $0A
000856A2 E701                       	dc.b	smpsNoAttack, $01
000856A4 E106                       	smpsAlterNote       $06
000856A6 E701                       	dc.b	smpsNoAttack, $01
000856A8 E100                       	smpsAlterNote       $00
000856AA E701                       	dc.b	smpsNoAttack, $01
000856AC E1FF                       	smpsAlterNote       $FF
000856AE E701                       	dc.b	smpsNoAttack, $01
000856B0 E103                       	smpsAlterNote       $03
000856B2 E701                       	dc.b	smpsNoAttack, $01
000856B4 E109                       	smpsAlterNote       $09
000856B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856BA E106                       	smpsAlterNote       $06
000856BC E701                       	dc.b	smpsNoAttack, $01
000856BE E100                       	smpsAlterNote       $00
000856C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856C4 E107                       	smpsAlterNote       $07
000856C6 BF0E                       	dc.b	nD5, $0E
000856C8 E101                       	smpsAlterNote       $01
000856CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856CE E107                       	smpsAlterNote       $07
000856D0 E701                       	dc.b	smpsNoAttack, $01
000856D2 E10A                       	smpsAlterNote       $0A
000856D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856D8 E104                       	smpsAlterNote       $04
000856DA E701                       	dc.b	smpsNoAttack, $01
000856DC E100                       	smpsAlterNote       $00
000856DE E701                       	dc.b	smpsNoAttack, $01
000856E0 E101                       	smpsAlterNote       $01
000856E2 E701                       	dc.b	smpsNoAttack, $01
000856E4 E107                       	smpsAlterNote       $07
000856E6 E701                       	dc.b	smpsNoAttack, $01
000856E8 E10B                       	smpsAlterNote       $0B
000856EA E701                       	dc.b	smpsNoAttack, $01
000856EC E107                       	smpsAlterNote       $07
000856EE E701                       	dc.b	smpsNoAttack, $01
000856F0 E104                       	smpsAlterNote       $04
000856F2 E701                       	dc.b	smpsNoAttack, $01
000856F4 E100                       	smpsAlterNote       $00
000856F6 E701                       	dc.b	smpsNoAttack, $01
000856F8 E101                       	smpsAlterNote       $01
000856FA 8001                       	dc.b	nRst, $01
000856FC E108                       	smpsAlterNote       $08
000856FE C10C                       	dc.b	nE5, $0C
00085700 E109                       	smpsAlterNote       $09
00085702 C201 8001                  	dc.b	nF5, $01, nRst, $01
00085706 E10A                       	smpsAlterNote       $0A
00085708 8001                       	dc.b	nRst, $01
0008570A E109                       	smpsAlterNote       $09
0008570C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00085710 E106                       	smpsAlterNote       $06
00085712 E701                       	dc.b	smpsNoAttack, $01
00085714 E102                       	smpsAlterNote       $02
00085716 E701                       	dc.b	smpsNoAttack, $01
00085718 E103                       	smpsAlterNote       $03
0008571A E701                       	dc.b	smpsNoAttack, $01
0008571C E109                       	smpsAlterNote       $09
0008571E E701                       	dc.b	smpsNoAttack, $01
00085720 E10D                       	smpsAlterNote       $0D
00085722 E701                       	dc.b	smpsNoAttack, $01
00085724 E109                       	smpsAlterNote       $09
00085726 E701                       	dc.b	smpsNoAttack, $01
00085728 E106                       	smpsAlterNote       $06
0008572A E701                       	dc.b	smpsNoAttack, $01
0008572C E102                       	smpsAlterNote       $02
0008572E E701                       	dc.b	smpsNoAttack, $01
00085730 E106                       	smpsAlterNote       $06
00085732 E701                       	dc.b	smpsNoAttack, $01
00085734 E10C                       	smpsAlterNote       $0C
00085736 E701                       	dc.b	smpsNoAttack, $01
00085738 E10D                       	smpsAlterNote       $0D
0008573A E701                       	dc.b	smpsNoAttack, $01
0008573C E109                       	smpsAlterNote       $09
0008573E C40D                       	dc.b	nG5, $0D
00085740 E106                       	smpsAlterNote       $06
00085742 E701                       	dc.b	smpsNoAttack, $01
00085744 E102                       	smpsAlterNote       $02
00085746 E701                       	dc.b	smpsNoAttack, $01
00085748 E103                       	smpsAlterNote       $03
0008574A E701                       	dc.b	smpsNoAttack, $01
0008574C E109                       	smpsAlterNote       $09
0008574E E701                       	dc.b	smpsNoAttack, $01
00085750 E108                       	smpsAlterNote       $08
00085752 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008575E E109                       	smpsAlterNote       $09
00085760 C20D                       	dc.b	nF5, $0D
00085762 E106                       	smpsAlterNote       $06
00085764 E701                       	dc.b	smpsNoAttack, $01
00085766 E102                       	smpsAlterNote       $02
00085768 E701                       	dc.b	smpsNoAttack, $01
0008576A E106                       	smpsAlterNote       $06
0008576C E701                       	dc.b	smpsNoAttack, $01
0008576E E109                       	smpsAlterNote       $09
00085770 E701                       	dc.b	smpsNoAttack, $01
00085772 E10D                       	smpsAlterNote       $0D
00085774 E701                       	dc.b	smpsNoAttack, $01
00085776 E109                       	smpsAlterNote       $09
00085778 E701                       	dc.b	smpsNoAttack, $01
0008577A E103                       	smpsAlterNote       $03
0008577C E701                       	dc.b	smpsNoAttack, $01
0008577E E102                       	smpsAlterNote       $02
00085780 E701                       	dc.b	smpsNoAttack, $01
00085782 E106                       	smpsAlterNote       $06
00085784 E701                       	dc.b	smpsNoAttack, $01
00085786 E10C                       	smpsAlterNote       $0C
00085788 E701                       	dc.b	smpsNoAttack, $01
0008578A E10D                       	smpsAlterNote       $0D
0008578C 8001                       	dc.b	nRst, $01
0008578E E112                       	smpsAlterNote       $12
00085790 C401                       	dc.b	nG5, $01
00085792 E1EB                       	smpsAlterNote       $EB
00085794 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00085797 E1FD                       	smpsAlterNote       $FD
00085799 E701                       	dc.b	smpsNoAttack, $01
0008579B E10F                       	smpsAlterNote       $0F
0008579D E701                       	dc.b	smpsNoAttack, $01
0008579F E118                       	smpsAlterNote       $18
000857A1 E701                       	dc.b	smpsNoAttack, $01
000857A3 E1ED                       	smpsAlterNote       $ED
000857A5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000857A8 E1FF                       	smpsAlterNote       $FF
000857AA E701                       	dc.b	smpsNoAttack, $01
000857AC E10B                       	smpsAlterNote       $0B
000857AE E703                       	dc.b	smpsNoAttack, $03
000857B0 E109                       	smpsAlterNote       $09
000857B2 C407                       	dc.b	nG5, $07
000857B4 E108                       	smpsAlterNote       $08
000857B6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000857C2 E109                       	smpsAlterNote       $09
000857C4 C20D                       	dc.b	nF5, $0D
000857C6 E103                       	smpsAlterNote       $03
000857C8 E701                       	dc.b	smpsNoAttack, $01
000857CA E102                       	smpsAlterNote       $02
000857CC E701                       	dc.b	smpsNoAttack, $01
000857CE E106                       	smpsAlterNote       $06
000857D0 E701                       	dc.b	smpsNoAttack, $01
000857D2 E10C                       	smpsAlterNote       $0C
000857D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857D8 E109                       	smpsAlterNote       $09
000857DA E701                       	dc.b	smpsNoAttack, $01
000857DC E103                       	smpsAlterNote       $03
000857DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857E2 E109                       	smpsAlterNote       $09
000857E4 E701                       	dc.b	smpsNoAttack, $01
000857E6 E10C                       	smpsAlterNote       $0C
000857E8 E701                       	dc.b	smpsNoAttack, $01
000857EA E10D                       	smpsAlterNote       $0D
000857EC 8001                       	dc.b	nRst, $01
000857EE E10B                       	smpsAlterNote       $0B
000857F0 C609 8001                  	dc.b	nA5, $09, nRst, $01
000857F4 E109                       	smpsAlterNote       $09
000857F6 B806 8001                  	dc.b	nG4, $06, nRst, $01
000857FA E108                       	smpsAlterNote       $08
000857FC C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00085808 8001                       	dc.b	nRst, $01
0008580A E109                       	smpsAlterNote       $09
0008580C C20D                       	dc.b	nF5, $0D
0008580E E103                       	smpsAlterNote       $03
00085810 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085814 E106                       	smpsAlterNote       $06
00085816 E701                       	dc.b	smpsNoAttack, $01
00085818 E10C                       	smpsAlterNote       $0C
0008581A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008581E E106                       	smpsAlterNote       $06
00085820 E701                       	dc.b	smpsNoAttack, $01
00085822 E103                       	smpsAlterNote       $03
00085824 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085828 E109                       	smpsAlterNote       $09
0008582A E701                       	dc.b	smpsNoAttack, $01
0008582C E10D                       	smpsAlterNote       $0D
0008582E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085834 E108                       	smpsAlterNote       $08
00085836 E6FF                       	smpsAlterVol        $FF
00085838 A806                       	dc.b	nEb3, $06
0008583A E10C                       	smpsAlterNote       $0C
0008583C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085840 E108                       	smpsAlterNote       $08
00085842 A803                       	dc.b	nEb3, $03
00085844 E109                       	smpsAlterNote       $09
00085846 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008584A E10C                       	smpsAlterNote       $0C
0008584C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00085856 E109                       	smpsAlterNote       $09
00085858 E602                       	smpsAlterVol        $02
0008585A B604                       	dc.b	nF4, $04
0008585C E602                       	smpsAlterVol        $02
0008585E F6F1 AA                    	smpsJump            music84_Jump02
00085861                            
00085861                            ; FM4 Data
00085861                            music84_FM4:
00085863 E040                       	smpsPan             panRight, $00
00085865 8003                       	dc.b	nRst, $03
00085867 E10F                       	smpsAlterNote       $0F
00085869 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008586D E10D                       	smpsAlterNote       $0D
0008586F C403 800A                  	dc.b	nG5, $03, nRst, $0A
00085873 E10C                       	smpsAlterNote       $0C
00085875 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008587B E6FE                       	smpsAlterVol        $FE
0008587D E110                       	smpsAlterNote       $10
0008587F C703 8001                  	dc.b	nBb5, $03, nRst, $01
00085883 E10F                       	smpsAlterNote       $0F
00085885 C602 8001                  	dc.b	nA5, $02, nRst, $01
00085889 E10D                       	smpsAlterNote       $0D
0008588B C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00085894 E10C                       	smpsAlterNote       $0C
00085896 C103                       	dc.b	nE5, $03
00085898 E10A                       	smpsAlterNote       $0A
0008589A BD03 8001                  	dc.b	nC5, $03, nRst, $01
000858A0 03                         	dc.b	$03
000858A1                            
000858A1                            music84_Jump01:
000858A1 E10B                       	smpsAlterNote       $0B
000858A3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000858A7 E10C                       	smpsAlterNote       $0C
000858A9 C102 8001                  	dc.b	nE5, $02, nRst, $01
000858AD E10D                       	smpsAlterNote       $0D
000858AF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000858B9 E10B                       	smpsAlterNote       $0B
000858BB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000858BF E107                       	smpsAlterNote       $07
000858C1 E701                       	dc.b	smpsNoAttack, $01
000858C3 E103                       	smpsAlterNote       $03
000858C5 E701                       	dc.b	smpsNoAttack, $01
000858C7 E104                       	smpsAlterNote       $04
000858C9 E701                       	dc.b	smpsNoAttack, $01
000858CB E10A                       	smpsAlterNote       $0A
000858CD E701                       	dc.b	smpsNoAttack, $01
000858CF E10E                       	smpsAlterNote       $0E
000858D1 E701                       	dc.b	smpsNoAttack, $01
000858D3 E10A                       	smpsAlterNote       $0A
000858D5 E701                       	dc.b	smpsNoAttack, $01
000858D7 E107                       	smpsAlterNote       $07
000858D9 E701                       	dc.b	smpsNoAttack, $01
000858DB E104                       	smpsAlterNote       $04
000858DD 8001                       	dc.b	nRst, $01
000858DF E110                       	smpsAlterNote       $10
000858E1 C703                       	dc.b	nBb5, $03
000858E3 E10F                       	smpsAlterNote       $0F
000858E5 C603 8001                  	dc.b	nA5, $03, nRst, $01
000858E9 E10D                       	smpsAlterNote       $0D
000858EB C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000858F1 E10C                       	smpsAlterNote       $0C
000858F3 E701                       	dc.b	smpsNoAttack, $01
000858F5 E108                       	smpsAlterNote       $08
000858F7 E701                       	dc.b	smpsNoAttack, $01
000858F9 E10C                       	smpsAlterNote       $0C
000858FB E701                       	dc.b	smpsNoAttack, $01
000858FD E10F                       	smpsAlterNote       $0F
000858FF E701                       	dc.b	smpsNoAttack, $01
00085901 E113                       	smpsAlterNote       $13
00085903 E701                       	dc.b	smpsNoAttack, $01
00085905 E10F                       	smpsAlterNote       $0F
00085907 E701                       	dc.b	smpsNoAttack, $01
00085909 E109                       	smpsAlterNote       $09
0008590B E701                       	dc.b	smpsNoAttack, $01
0008590D E108                       	smpsAlterNote       $08
0008590F E701                       	dc.b	smpsNoAttack, $01
00085911 E10C                       	smpsAlterNote       $0C
00085913 E701                       	dc.b	smpsNoAttack, $01
00085915 E112                       	smpsAlterNote       $12
00085917 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008591B E10C                       	smpsAlterNote       $0C
0008591D E701                       	dc.b	smpsNoAttack, $01
0008591F E109                       	smpsAlterNote       $09
00085921 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085925 E10F                       	smpsAlterNote       $0F
00085927 E701                       	dc.b	smpsNoAttack, $01
00085929 E113                       	smpsAlterNote       $13
0008592B E701                       	dc.b	smpsNoAttack, $01
0008592D E112                       	smpsAlterNote       $12
0008592F E701                       	dc.b	smpsNoAttack, $01
00085931 E10C                       	smpsAlterNote       $0C
00085933 E701                       	dc.b	smpsNoAttack, $01
00085935 E108                       	smpsAlterNote       $08
00085937 E701                       	dc.b	smpsNoAttack, $01
00085939 E10C                       	smpsAlterNote       $0C
0008593B E701                       	dc.b	smpsNoAttack, $01
0008593D E10F                       	smpsAlterNote       $0F
0008593F E701                       	dc.b	smpsNoAttack, $01
00085941 E113                       	smpsAlterNote       $13
00085943 E701                       	dc.b	smpsNoAttack, $01
00085945 E10F                       	smpsAlterNote       $0F
00085947 E701                       	dc.b	smpsNoAttack, $01
00085949 E109                       	smpsAlterNote       $09
0008594B E701                       	dc.b	smpsNoAttack, $01
0008594D E108                       	smpsAlterNote       $08
0008594F E701                       	dc.b	smpsNoAttack, $01
00085951 E10C                       	smpsAlterNote       $0C
00085953 E701                       	dc.b	smpsNoAttack, $01
00085955 E112                       	smpsAlterNote       $12
00085957 E701                       	dc.b	smpsNoAttack, $01
00085959 E113                       	smpsAlterNote       $13
0008595B 800F                       	dc.b	nRst, $0F
0008595D E10B                       	smpsAlterNote       $0B
0008595F BF03                       	dc.b	nD5, $03
00085961 E10C                       	smpsAlterNote       $0C
00085963 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085967 E10D                       	smpsAlterNote       $0D
00085969 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00085971 E10B                       	smpsAlterNote       $0B
00085973 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008597D E110                       	smpsAlterNote       $10
0008597F C704                       	dc.b	nBb5, $04
00085981 E10F                       	smpsAlterNote       $0F
00085983 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085987 E10D                       	smpsAlterNote       $0D
00085989 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008598F E109                       	smpsAlterNote       $09
00085991 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085995 E10F                       	smpsAlterNote       $0F
00085997 E701                       	dc.b	smpsNoAttack, $01
00085999 E112                       	smpsAlterNote       $12
0008599B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008599F E10C                       	smpsAlterNote       $0C
000859A1 E701                       	dc.b	smpsNoAttack, $01
000859A3 E108                       	smpsAlterNote       $08
000859A5 E701                       	dc.b	smpsNoAttack, $01
000859A7 E109                       	smpsAlterNote       $09
000859A9 E701                       	dc.b	smpsNoAttack, $01
000859AB E10F                       	smpsAlterNote       $0F
000859AD E701                       	dc.b	smpsNoAttack, $01
000859AF E113                       	smpsAlterNote       $13
000859B1 E701                       	dc.b	smpsNoAttack, $01
000859B3 E10F                       	smpsAlterNote       $0F
000859B5 E701                       	dc.b	smpsNoAttack, $01
000859B7 E10C                       	smpsAlterNote       $0C
000859B9 E701                       	dc.b	smpsNoAttack, $01
000859BB E108                       	smpsAlterNote       $08
000859BD E701                       	dc.b	smpsNoAttack, $01
000859BF E10C                       	smpsAlterNote       $0C
000859C1 E701                       	dc.b	smpsNoAttack, $01
000859C3 E112                       	smpsAlterNote       $12
000859C5 E701                       	dc.b	smpsNoAttack, $01
000859C7 E113                       	smpsAlterNote       $13
000859C9 E701                       	dc.b	smpsNoAttack, $01
000859CB E10F                       	smpsAlterNote       $0F
000859CD E701                       	dc.b	smpsNoAttack, $01
000859CF E109                       	smpsAlterNote       $09
000859D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859D5 E10C                       	smpsAlterNote       $0C
000859D7 E701                       	dc.b	smpsNoAttack, $01
000859D9 E112                       	smpsAlterNote       $12
000859DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000859DF E10C                       	smpsAlterNote       $0C
000859E1 E701                       	dc.b	smpsNoAttack, $01
000859E3 E109                       	smpsAlterNote       $09
000859E5 E701                       	dc.b	smpsNoAttack, $01
000859E7 E10D                       	smpsAlterNote       $0D
000859E9 C401 8001                  	dc.b	nG5, $01, nRst, $01
000859ED E10F                       	smpsAlterNote       $0F
000859EF C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000859F9 E10D                       	smpsAlterNote       $0D
000859FB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00085A01 E10B                       	smpsAlterNote       $0B
00085A03 BF0D                       	dc.b	nD5, $0D
00085A05 E108                       	smpsAlterNote       $08
00085A07 E701                       	dc.b	smpsNoAttack, $01
00085A09 E104                       	smpsAlterNote       $04
00085A0B E701                       	dc.b	smpsNoAttack, $01
00085A0D E108                       	smpsAlterNote       $08
00085A0F E701                       	dc.b	smpsNoAttack, $01
00085A11 E10B                       	smpsAlterNote       $0B
00085A13 E701                       	dc.b	smpsNoAttack, $01
00085A15 E10F                       	smpsAlterNote       $0F
00085A17 E701                       	dc.b	smpsNoAttack, $01
00085A19 E10B                       	smpsAlterNote       $0B
00085A1B E701                       	dc.b	smpsNoAttack, $01
00085A1D E105                       	smpsAlterNote       $05
00085A1F E701                       	dc.b	smpsNoAttack, $01
00085A21 E104                       	smpsAlterNote       $04
00085A23 E701                       	dc.b	smpsNoAttack, $01
00085A25 E108                       	smpsAlterNote       $08
00085A27 E701                       	dc.b	smpsNoAttack, $01
00085A29 E10E                       	smpsAlterNote       $0E
00085A2B E701                       	dc.b	smpsNoAttack, $01
00085A2D E10F                       	smpsAlterNote       $0F
00085A2F 8001                       	dc.b	nRst, $01
00085A31 E10C                       	smpsAlterNote       $0C
00085A33 C101                       	dc.b	nE5, $01
00085A35 E10D                       	smpsAlterNote       $0D
00085A37 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00085A3D E10F                       	smpsAlterNote       $0F
00085A3F C606 8001                  	dc.b	nA5, $06, nRst, $01
00085A43 E10C                       	smpsAlterNote       $0C
00085A45 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085A49 E10D                       	smpsAlterNote       $0D
00085A4B CE06 8001                  	dc.b	nF6, $06, nRst, $01
00085A4F E10C                       	smpsAlterNote       $0C
00085A51 CD03                       	dc.b	nE6, $03
00085A53 E10A                       	smpsAlterNote       $0A
00085A55 C903 8001                  	dc.b	nC6, $03, nRst, $01
00085A59 E10D                       	smpsAlterNote       $0D
00085A5B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00085A63 E109                       	smpsAlterNote       $09
00085A65 E701                       	dc.b	smpsNoAttack, $01
00085A67 E10D                       	smpsAlterNote       $0D
00085A69 E701                       	dc.b	smpsNoAttack, $01
00085A6B E110                       	smpsAlterNote       $10
00085A6D E701                       	dc.b	smpsNoAttack, $01
00085A6F E114                       	smpsAlterNote       $14
00085A71 E701                       	dc.b	smpsNoAttack, $01
00085A73 E110                       	smpsAlterNote       $10
00085A75 E701                       	dc.b	smpsNoAttack, $01
00085A77 E10A                       	smpsAlterNote       $0A
00085A79 E701                       	dc.b	smpsNoAttack, $01
00085A7B E109                       	smpsAlterNote       $09
00085A7D E701                       	dc.b	smpsNoAttack, $01
00085A7F E10D                       	smpsAlterNote       $0D
00085A81 E701                       	dc.b	smpsNoAttack, $01
00085A83 E113                       	smpsAlterNote       $13
00085A85 E701                       	dc.b	smpsNoAttack, $01
00085A87 E114                       	smpsAlterNote       $14
00085A89 8001                       	dc.b	nRst, $01
00085A8B E10F                       	smpsAlterNote       $0F
00085A8D C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00085A93 E10C                       	smpsAlterNote       $0C
00085A95 E701                       	dc.b	smpsNoAttack, $01
00085A97 E108                       	smpsAlterNote       $08
00085A99 E701                       	dc.b	smpsNoAttack, $01
00085A9B E10C                       	smpsAlterNote       $0C
00085A9D E701                       	dc.b	smpsNoAttack, $01
00085A9F E112                       	smpsAlterNote       $12
00085AA1 E701                       	dc.b	smpsNoAttack, $01
00085AA3 E113                       	smpsAlterNote       $13
00085AA5 E701                       	dc.b	smpsNoAttack, $01
00085AA7 E10F                       	smpsAlterNote       $0F
00085AA9 E701                       	dc.b	smpsNoAttack, $01
00085AAB E109                       	smpsAlterNote       $09
00085AAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AB1 E10C                       	smpsAlterNote       $0C
00085AB3 E701                       	dc.b	smpsNoAttack, $01
00085AB5 E112                       	smpsAlterNote       $12
00085AB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085ABB E10C                       	smpsAlterNote       $0C
00085ABD E701                       	dc.b	smpsNoAttack, $01
00085ABF E109                       	smpsAlterNote       $09
00085AC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AC5 E10F                       	smpsAlterNote       $0F
00085AC7 E701                       	dc.b	smpsNoAttack, $01
00085AC9 E113                       	smpsAlterNote       $13
00085ACB E701                       	dc.b	smpsNoAttack, $01
00085ACD E112                       	smpsAlterNote       $12
00085ACF E701                       	dc.b	smpsNoAttack, $01
00085AD1 E10C                       	smpsAlterNote       $0C
00085AD3 E701                       	dc.b	smpsNoAttack, $01
00085AD5 E108                       	smpsAlterNote       $08
00085AD7 E701                       	dc.b	smpsNoAttack, $01
00085AD9 E10C                       	smpsAlterNote       $0C
00085ADB E701                       	dc.b	smpsNoAttack, $01
00085ADD E10F                       	smpsAlterNote       $0F
00085ADF E701                       	dc.b	smpsNoAttack, $01
00085AE1 E113                       	smpsAlterNote       $13
00085AE3 E701                       	dc.b	smpsNoAttack, $01
00085AE5 E10F                       	smpsAlterNote       $0F
00085AE7 E701                       	dc.b	smpsNoAttack, $01
00085AE9 E109                       	smpsAlterNote       $09
00085AEB E701                       	dc.b	smpsNoAttack, $01
00085AED E108                       	smpsAlterNote       $08
00085AEF E701                       	dc.b	smpsNoAttack, $01
00085AF1 E10C                       	smpsAlterNote       $0C
00085AF3 E701                       	dc.b	smpsNoAttack, $01
00085AF5 E112                       	smpsAlterNote       $12
00085AF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AFB E10F                       	smpsAlterNote       $0F
00085AFD E701                       	dc.b	smpsNoAttack, $01
00085AFF E109                       	smpsAlterNote       $09
00085B01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B05 E10F                       	smpsAlterNote       $0F
00085B07 E701                       	dc.b	smpsNoAttack, $01
00085B09 E113                       	smpsAlterNote       $13
00085B0B E701                       	dc.b	smpsNoAttack, $01
00085B0D E112                       	smpsAlterNote       $12
00085B0F E701                       	dc.b	smpsNoAttack, $01
00085B11 E10C                       	smpsAlterNote       $0C
00085B13 E701                       	dc.b	smpsNoAttack, $01
00085B15 E108                       	smpsAlterNote       $08
00085B17 E701                       	dc.b	smpsNoAttack, $01
00085B19 E10C                       	smpsAlterNote       $0C
00085B1B E701                       	dc.b	smpsNoAttack, $01
00085B1D E10F                       	smpsAlterNote       $0F
00085B1F E701                       	dc.b	smpsNoAttack, $01
00085B21 E113                       	smpsAlterNote       $13
00085B23 E701                       	dc.b	smpsNoAttack, $01
00085B25 E10F                       	smpsAlterNote       $0F
00085B27 E701                       	dc.b	smpsNoAttack, $01
00085B29 E109                       	smpsAlterNote       $09
00085B2B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085B2F E10F                       	smpsAlterNote       $0F
00085B31 C60D                       	dc.b	nA5, $0D
00085B33 E109                       	smpsAlterNote       $09
00085B35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B39 E10C                       	smpsAlterNote       $0C
00085B3B E701                       	dc.b	smpsNoAttack, $01
00085B3D E112                       	smpsAlterNote       $12
00085B3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B43 E10C                       	smpsAlterNote       $0C
00085B45 E701                       	dc.b	smpsNoAttack, $01
00085B47 E109                       	smpsAlterNote       $09
00085B49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B4D E10F                       	smpsAlterNote       $0F
00085B4F E701                       	dc.b	smpsNoAttack, $01
00085B51 E113                       	smpsAlterNote       $13
00085B53 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085B59 E10D                       	smpsAlterNote       $0D
00085B5B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00085B63 E10C                       	smpsAlterNote       $0C
00085B65 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00085B6B E6FF                       	smpsAlterVol        $FF
00085B6D E10B                       	smpsAlterNote       $0B
00085B6F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085B73 E10C                       	smpsAlterNote       $0C
00085B75 C103                       	dc.b	nE5, $03
00085B77 E10D                       	smpsAlterNote       $0D
00085B79 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00085B83 E10B                       	smpsAlterNote       $0B
00085B85 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00085B89 E107                       	smpsAlterNote       $07
00085B8B E701                       	dc.b	smpsNoAttack, $01
00085B8D E104                       	smpsAlterNote       $04
00085B8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B93 E10A                       	smpsAlterNote       $0A
00085B95 E701                       	dc.b	smpsNoAttack, $01
00085B97 E10D                       	smpsAlterNote       $0D
00085B99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B9D E107                       	smpsAlterNote       $07
00085B9F E701                       	dc.b	smpsNoAttack, $01
00085BA1 E104                       	smpsAlterNote       $04
00085BA3 8001                       	dc.b	nRst, $01
00085BA5 E110                       	smpsAlterNote       $10
00085BA7 C703                       	dc.b	nBb5, $03
00085BA9 E10F                       	smpsAlterNote       $0F
00085BAB C603 8001                  	dc.b	nA5, $03, nRst, $01
00085BAF E10D                       	smpsAlterNote       $0D
00085BB1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00085BB5 E10C                       	smpsAlterNote       $0C
00085BB7 E701                       	dc.b	smpsNoAttack, $01
00085BB9 E108                       	smpsAlterNote       $08
00085BBB E701                       	dc.b	smpsNoAttack, $01
00085BBD E109                       	smpsAlterNote       $09
00085BBF E701                       	dc.b	smpsNoAttack, $01
00085BC1 E10F                       	smpsAlterNote       $0F
00085BC3 E701                       	dc.b	smpsNoAttack, $01
00085BC5 E113                       	smpsAlterNote       $13
00085BC7 E701                       	dc.b	smpsNoAttack, $01
00085BC9 E10F                       	smpsAlterNote       $0F
00085BCB E701                       	dc.b	smpsNoAttack, $01
00085BCD E10C                       	smpsAlterNote       $0C
00085BCF E701                       	dc.b	smpsNoAttack, $01
00085BD1 E108                       	smpsAlterNote       $08
00085BD3 E701                       	dc.b	smpsNoAttack, $01
00085BD5 E10C                       	smpsAlterNote       $0C
00085BD7 E701                       	dc.b	smpsNoAttack, $01
00085BD9 E112                       	smpsAlterNote       $12
00085BDB E701                       	dc.b	smpsNoAttack, $01
00085BDD E113                       	smpsAlterNote       $13
00085BDF E701                       	dc.b	smpsNoAttack, $01
00085BE1 E10F                       	smpsAlterNote       $0F
00085BE3 E701                       	dc.b	smpsNoAttack, $01
00085BE5 E109                       	smpsAlterNote       $09
00085BE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BEB E10C                       	smpsAlterNote       $0C
00085BED E701                       	dc.b	smpsNoAttack, $01
00085BEF E112                       	smpsAlterNote       $12
00085BF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BF5 E10C                       	smpsAlterNote       $0C
00085BF7 E701                       	dc.b	smpsNoAttack, $01
00085BF9 E109                       	smpsAlterNote       $09
00085BFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BFF E10F                       	smpsAlterNote       $0F
00085C01 E701                       	dc.b	smpsNoAttack, $01
00085C03 E113                       	smpsAlterNote       $13
00085C05 E701                       	dc.b	smpsNoAttack, $01
00085C07 E112                       	smpsAlterNote       $12
00085C09 E701                       	dc.b	smpsNoAttack, $01
00085C0B E10C                       	smpsAlterNote       $0C
00085C0D E701                       	dc.b	smpsNoAttack, $01
00085C0F E108                       	smpsAlterNote       $08
00085C11 E701                       	dc.b	smpsNoAttack, $01
00085C13 E10C                       	smpsAlterNote       $0C
00085C15 E701                       	dc.b	smpsNoAttack, $01
00085C17 E10F                       	smpsAlterNote       $0F
00085C19 E701                       	dc.b	smpsNoAttack, $01
00085C1B E113                       	smpsAlterNote       $13
00085C1D E701                       	dc.b	smpsNoAttack, $01
00085C1F E10F                       	smpsAlterNote       $0F
00085C21 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00085C25 E110                       	smpsAlterNote       $10
00085C27 BB03                       	dc.b	nBb4, $03
00085C29 E10F                       	smpsAlterNote       $0F
00085C2B BA06 8001                  	dc.b	nA4, $06, nRst, $01
00085C2F E10B                       	smpsAlterNote       $0B
00085C31 BF03                       	dc.b	nD5, $03
00085C33 E10C                       	smpsAlterNote       $0C
00085C35 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085C39 E10D                       	smpsAlterNote       $0D
00085C3B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00085C45 E10B                       	smpsAlterNote       $0B
00085C47 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00085C53 E110                       	smpsAlterNote       $10
00085C55 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00085C59 E10F                       	smpsAlterNote       $0F
00085C5B C604                       	dc.b	nA5, $04
00085C5D E10D                       	smpsAlterNote       $0D
00085C5F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00085C65 E109                       	smpsAlterNote       $09
00085C67 E701                       	dc.b	smpsNoAttack, $01
00085C69 E108                       	smpsAlterNote       $08
00085C6B E701                       	dc.b	smpsNoAttack, $01
00085C6D E10C                       	smpsAlterNote       $0C
00085C6F E701                       	dc.b	smpsNoAttack, $01
00085C71 E112                       	smpsAlterNote       $12
00085C73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C77 E10F                       	smpsAlterNote       $0F
00085C79 E701                       	dc.b	smpsNoAttack, $01
00085C7B E109                       	smpsAlterNote       $09
00085C7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C81 E10F                       	smpsAlterNote       $0F
00085C83 E701                       	dc.b	smpsNoAttack, $01
00085C85 E112                       	smpsAlterNote       $12
00085C87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C8B E10C                       	smpsAlterNote       $0C
00085C8D E701                       	dc.b	smpsNoAttack, $01
00085C8F E108                       	smpsAlterNote       $08
00085C91 E701                       	dc.b	smpsNoAttack, $01
00085C93 E109                       	smpsAlterNote       $09
00085C95 E701                       	dc.b	smpsNoAttack, $01
00085C97 E10F                       	smpsAlterNote       $0F
00085C99 E701                       	dc.b	smpsNoAttack, $01
00085C9B E113                       	smpsAlterNote       $13
00085C9D E701                       	dc.b	smpsNoAttack, $01
00085C9F E10F                       	smpsAlterNote       $0F
00085CA1 E701                       	dc.b	smpsNoAttack, $01
00085CA3 E10C                       	smpsAlterNote       $0C
00085CA5 E701                       	dc.b	smpsNoAttack, $01
00085CA7 E108                       	smpsAlterNote       $08
00085CA9 E701                       	dc.b	smpsNoAttack, $01
00085CAB E10C                       	smpsAlterNote       $0C
00085CAD E701                       	dc.b	smpsNoAttack, $01
00085CAF E112                       	smpsAlterNote       $12
00085CB1 E701                       	dc.b	smpsNoAttack, $01
00085CB3 E113                       	smpsAlterNote       $13
00085CB5 E701                       	dc.b	smpsNoAttack, $01
00085CB7 E10F                       	smpsAlterNote       $0F
00085CB9 E701                       	dc.b	smpsNoAttack, $01
00085CBB E109                       	smpsAlterNote       $09
00085CBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085CC1 E10C                       	smpsAlterNote       $0C
00085CC3 E701                       	dc.b	smpsNoAttack, $01
00085CC5 E112                       	smpsAlterNote       $12
00085CC7 E701                       	dc.b	smpsNoAttack, $01
00085CC9 E113                       	smpsAlterNote       $13
00085CCB 8001                       	dc.b	nRst, $01
00085CCD E10F                       	smpsAlterNote       $0F
00085CCF C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00085CDB C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00085CE3 E10D                       	smpsAlterNote       $0D
00085CE5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00085CEB E10B                       	smpsAlterNote       $0B
00085CED BF0D                       	dc.b	nD5, $0D
00085CEF E108                       	smpsAlterNote       $08
00085CF1 E701                       	dc.b	smpsNoAttack, $01
00085CF3 E104                       	smpsAlterNote       $04
00085CF5 E701                       	dc.b	smpsNoAttack, $01
00085CF7 E105                       	smpsAlterNote       $05
00085CF9 E701                       	dc.b	smpsNoAttack, $01
00085CFB E10B                       	smpsAlterNote       $0B
00085CFD E701                       	dc.b	smpsNoAttack, $01
00085CFF E10F                       	smpsAlterNote       $0F
00085D01 E701                       	dc.b	smpsNoAttack, $01
00085D03 E10B                       	smpsAlterNote       $0B
00085D05 E701                       	dc.b	smpsNoAttack, $01
00085D07 E108                       	smpsAlterNote       $08
00085D09 E701                       	dc.b	smpsNoAttack, $01
00085D0B E104                       	smpsAlterNote       $04
00085D0D E701                       	dc.b	smpsNoAttack, $01
00085D0F E108                       	smpsAlterNote       $08
00085D11 E701                       	dc.b	smpsNoAttack, $01
00085D13 E10E                       	smpsAlterNote       $0E
00085D15 E701                       	dc.b	smpsNoAttack, $01
00085D17 E10F                       	smpsAlterNote       $0F
00085D19 E701                       	dc.b	smpsNoAttack, $01
00085D1B E10C                       	smpsAlterNote       $0C
00085D1D C101                       	dc.b	nE5, $01
00085D1F E10D                       	smpsAlterNote       $0D
00085D21 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00085D29 E10F                       	smpsAlterNote       $0F
00085D2B C607                       	dc.b	nA5, $07
00085D2D E10C                       	smpsAlterNote       $0C
00085D2F CD07                       	dc.b	nE6, $07
00085D31 E10D                       	smpsAlterNote       $0D
00085D33 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00085D37 E10C                       	smpsAlterNote       $0C
00085D39 CD03                       	dc.b	nE6, $03
00085D3B E10A                       	smpsAlterNote       $0A
00085D3D C903 8001                  	dc.b	nC6, $03, nRst, $01
00085D41 E10D                       	smpsAlterNote       $0D
00085D43 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00085D49 E10A                       	smpsAlterNote       $0A
00085D4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D4F E110                       	smpsAlterNote       $10
00085D51 E701                       	dc.b	smpsNoAttack, $01
00085D53 E114                       	smpsAlterNote       $14
00085D55 E701                       	dc.b	smpsNoAttack, $01
00085D57 E113                       	smpsAlterNote       $13
00085D59 E701                       	dc.b	smpsNoAttack, $01
00085D5B E10D                       	smpsAlterNote       $0D
00085D5D E701                       	dc.b	smpsNoAttack, $01
00085D5F E109                       	smpsAlterNote       $09
00085D61 E701                       	dc.b	smpsNoAttack, $01
00085D63 E10D                       	smpsAlterNote       $0D
00085D65 E701                       	dc.b	smpsNoAttack, $01
00085D67 E110                       	smpsAlterNote       $10
00085D69 E701                       	dc.b	smpsNoAttack, $01
00085D6B E114                       	smpsAlterNote       $14
00085D6D E701                       	dc.b	smpsNoAttack, $01
00085D6F E10F                       	smpsAlterNote       $0F
00085D71 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00085D75 E10C                       	smpsAlterNote       $0C
00085D77 E701                       	dc.b	smpsNoAttack, $01
00085D79 E108                       	smpsAlterNote       $08
00085D7B E701                       	dc.b	smpsNoAttack, $01
00085D7D E10C                       	smpsAlterNote       $0C
00085D7F E701                       	dc.b	smpsNoAttack, $01
00085D81 E10F                       	smpsAlterNote       $0F
00085D83 E701                       	dc.b	smpsNoAttack, $01
00085D85 E113                       	smpsAlterNote       $13
00085D87 E701                       	dc.b	smpsNoAttack, $01
00085D89 E10F                       	smpsAlterNote       $0F
00085D8B E701                       	dc.b	smpsNoAttack, $01
00085D8D E109                       	smpsAlterNote       $09
00085D8F E701                       	dc.b	smpsNoAttack, $01
00085D91 E108                       	smpsAlterNote       $08
00085D93 E701                       	dc.b	smpsNoAttack, $01
00085D95 E10C                       	smpsAlterNote       $0C
00085D97 E701                       	dc.b	smpsNoAttack, $01
00085D99 E112                       	smpsAlterNote       $12
00085D9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D9F E10F                       	smpsAlterNote       $0F
00085DA1 E701                       	dc.b	smpsNoAttack, $01
00085DA3 E109                       	smpsAlterNote       $09
00085DA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DA9 E10F                       	smpsAlterNote       $0F
00085DAB E701                       	dc.b	smpsNoAttack, $01
00085DAD E112                       	smpsAlterNote       $12
00085DAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DB3 E10C                       	smpsAlterNote       $0C
00085DB5 E701                       	dc.b	smpsNoAttack, $01
00085DB7 E108                       	smpsAlterNote       $08
00085DB9 E701                       	dc.b	smpsNoAttack, $01
00085DBB E109                       	smpsAlterNote       $09
00085DBD E701                       	dc.b	smpsNoAttack, $01
00085DBF E10F                       	smpsAlterNote       $0F
00085DC1 E701                       	dc.b	smpsNoAttack, $01
00085DC3 E113                       	smpsAlterNote       $13
00085DC5 E701                       	dc.b	smpsNoAttack, $01
00085DC7 E10F                       	smpsAlterNote       $0F
00085DC9 E701                       	dc.b	smpsNoAttack, $01
00085DCB E10C                       	smpsAlterNote       $0C
00085DCD E701                       	dc.b	smpsNoAttack, $01
00085DCF E108                       	smpsAlterNote       $08
00085DD1 E701                       	dc.b	smpsNoAttack, $01
00085DD3 E10C                       	smpsAlterNote       $0C
00085DD5 E701                       	dc.b	smpsNoAttack, $01
00085DD7 E112                       	smpsAlterNote       $12
00085DD9 E701                       	dc.b	smpsNoAttack, $01
00085DDB E113                       	smpsAlterNote       $13
00085DDD E701                       	dc.b	smpsNoAttack, $01
00085DDF E10F                       	smpsAlterNote       $0F
00085DE1 E701                       	dc.b	smpsNoAttack, $01
00085DE3 E109                       	smpsAlterNote       $09
00085DE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DE9 E10C                       	smpsAlterNote       $0C
00085DEB E701                       	dc.b	smpsNoAttack, $01
00085DED E112                       	smpsAlterNote       $12
00085DEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DF3 E10C                       	smpsAlterNote       $0C
00085DF5 E701                       	dc.b	smpsNoAttack, $01
00085DF7 E109                       	smpsAlterNote       $09
00085DF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085DFD E10F                       	smpsAlterNote       $0F
00085DFF E701                       	dc.b	smpsNoAttack, $01
00085E01 E113                       	smpsAlterNote       $13
00085E03 E701                       	dc.b	smpsNoAttack, $01
00085E05 E112                       	smpsAlterNote       $12
00085E07 E701                       	dc.b	smpsNoAttack, $01
00085E09 E10C                       	smpsAlterNote       $0C
00085E0B E701                       	dc.b	smpsNoAttack, $01
00085E0D E109                       	smpsAlterNote       $09
00085E0F 8001                       	dc.b	nRst, $01
00085E11 E10F                       	smpsAlterNote       $0F
00085E13 C60D                       	dc.b	nA5, $0D
00085E15 E10C                       	smpsAlterNote       $0C
00085E17 E701                       	dc.b	smpsNoAttack, $01
00085E19 E108                       	smpsAlterNote       $08
00085E1B E701                       	dc.b	smpsNoAttack, $01
00085E1D E10C                       	smpsAlterNote       $0C
00085E1F E701                       	dc.b	smpsNoAttack, $01
00085E21 E112                       	smpsAlterNote       $12
00085E23 E701                       	dc.b	smpsNoAttack, $01
00085E25 E113                       	smpsAlterNote       $13
00085E27 E701                       	dc.b	smpsNoAttack, $01
00085E29 E10F                       	smpsAlterNote       $0F
00085E2B E701                       	dc.b	smpsNoAttack, $01
00085E2D E109                       	smpsAlterNote       $09
00085E2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E33 E10C                       	smpsAlterNote       $0C
00085E35 E701                       	dc.b	smpsNoAttack, $01
00085E37 E112                       	smpsAlterNote       $12
00085E39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E3D E10C                       	smpsAlterNote       $0C
00085E3F E701                       	dc.b	smpsNoAttack, $01
00085E41 E109                       	smpsAlterNote       $09
00085E43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E47 E10F                       	smpsAlterNote       $0F
00085E49 E701                       	dc.b	smpsNoAttack, $01
00085E4B E113                       	smpsAlterNote       $13
00085E4D E701                       	dc.b	smpsNoAttack, $01
00085E4F E112                       	smpsAlterNote       $12
00085E51 E701                       	dc.b	smpsNoAttack, $01
00085E53 E10C                       	smpsAlterNote       $0C
00085E55 E701                       	dc.b	smpsNoAttack, $01
00085E57 E108                       	smpsAlterNote       $08
00085E59 E701                       	dc.b	smpsNoAttack, $01
00085E5B E10C                       	smpsAlterNote       $0C
00085E5D E701                       	dc.b	smpsNoAttack, $01
00085E5F E10F                       	smpsAlterNote       $0F
00085E61 E701                       	dc.b	smpsNoAttack, $01
00085E63 E113                       	smpsAlterNote       $13
00085E65 E701                       	dc.b	smpsNoAttack, $01
00085E67 E10F                       	smpsAlterNote       $0F
00085E69 E701                       	dc.b	smpsNoAttack, $01
00085E6B E109                       	smpsAlterNote       $09
00085E6D E701                       	dc.b	smpsNoAttack, $01
00085E6F E108                       	smpsAlterNote       $08
00085E71 E701                       	dc.b	smpsNoAttack, $01
00085E73 E10C                       	smpsAlterNote       $0C
00085E75 E701                       	dc.b	smpsNoAttack, $01
00085E77 E112                       	smpsAlterNote       $12
00085E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E7D E10F                       	smpsAlterNote       $0F
00085E7F E701                       	dc.b	smpsNoAttack, $01
00085E81 E109                       	smpsAlterNote       $09
00085E83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E87 E10F                       	smpsAlterNote       $0F
00085E89 E701                       	dc.b	smpsNoAttack, $01
00085E8B E112                       	smpsAlterNote       $12
00085E8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E91 E10C                       	smpsAlterNote       $0C
00085E93 E701                       	dc.b	smpsNoAttack, $01
00085E95 E108                       	smpsAlterNote       $08
00085E97 E701                       	dc.b	smpsNoAttack, $01
00085E99 E10C                       	smpsAlterNote       $0C
00085E9B E701                       	dc.b	smpsNoAttack, $01
00085E9D E10F                       	smpsAlterNote       $0F
00085E9F E701                       	dc.b	smpsNoAttack, $01
00085EA1 E113                       	smpsAlterNote       $13
00085EA3 E701                       	dc.b	smpsNoAttack, $01
00085EA5 E10F                       	smpsAlterNote       $0F
00085EA7 E701                       	dc.b	smpsNoAttack, $01
00085EA9 E109                       	smpsAlterNote       $09
00085EAB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085EB1 E601                       	smpsAlterVol        $01
00085EB3 E10F                       	smpsAlterNote       $0F
00085EB5 C604                       	dc.b	nA5, $04
00085EB7 E10D                       	smpsAlterNote       $0D
00085EB9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00085EBF E10B                       	smpsAlterNote       $0B
00085EC1 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
00085EC9 E10F                       	smpsAlterNote       $0F
00085ECB C604 8001                  	dc.b	nA5, $04, nRst, $01
00085ECF E10D                       	smpsAlterNote       $0D
00085ED1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00085ED7 E10C                       	smpsAlterNote       $0C
00085ED9 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00085EDF E10A                       	smpsAlterNote       $0A
00085EE1 C904 8001                  	dc.b	nC6, $04, nRst, $01
00085EE5 E110                       	smpsAlterNote       $10
00085EE7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00085EEB E10F                       	smpsAlterNote       $0F
00085EED C604                       	dc.b	nA5, $04
00085EEF E10D                       	smpsAlterNote       $0D
00085EF1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00085EFD E109                       	smpsAlterNote       $09
00085EFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F03 E10F                       	smpsAlterNote       $0F
00085F05 E701                       	dc.b	smpsNoAttack, $01
00085F07 E112                       	smpsAlterNote       $12
00085F09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F0D E10C                       	smpsAlterNote       $0C
00085F0F E701                       	dc.b	smpsNoAttack, $01
00085F11 E108                       	smpsAlterNote       $08
00085F13 E701                       	dc.b	smpsNoAttack, $01
00085F15 E10C                       	smpsAlterNote       $0C
00085F17 E701                       	dc.b	smpsNoAttack, $01
00085F19 E10F                       	smpsAlterNote       $0F
00085F1B E701                       	dc.b	smpsNoAttack, $01
00085F1D E113                       	smpsAlterNote       $13
00085F1F E701                       	dc.b	smpsNoAttack, $01
00085F21 E10D                       	smpsAlterNote       $0D
00085F23 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00085F29 E10C                       	smpsAlterNote       $0C
00085F2B C10D                       	dc.b	nE5, $0D
00085F2D E109                       	smpsAlterNote       $09
00085F2F E701                       	dc.b	smpsNoAttack, $01
00085F31 E105                       	smpsAlterNote       $05
00085F33 E701                       	dc.b	smpsNoAttack, $01
00085F35 E106                       	smpsAlterNote       $06
00085F37 E701                       	dc.b	smpsNoAttack, $01
00085F39 E10C                       	smpsAlterNote       $0C
00085F3B E701                       	dc.b	smpsNoAttack, $01
00085F3D E110                       	smpsAlterNote       $10
00085F3F E701                       	dc.b	smpsNoAttack, $01
00085F41 E10C                       	smpsAlterNote       $0C
00085F43 E701                       	dc.b	smpsNoAttack, $01
00085F45 E109                       	smpsAlterNote       $09
00085F47 E701                       	dc.b	smpsNoAttack, $01
00085F49 E105                       	smpsAlterNote       $05
00085F4B E701                       	dc.b	smpsNoAttack, $01
00085F4D E109                       	smpsAlterNote       $09
00085F4F E701                       	dc.b	smpsNoAttack, $01
00085F51 E10F                       	smpsAlterNote       $0F
00085F53 E701                       	dc.b	smpsNoAttack, $01
00085F55 E110                       	smpsAlterNote       $10
00085F57 E701                       	dc.b	smpsNoAttack, $01
00085F59 E10C                       	smpsAlterNote       $0C
00085F5B E701                       	dc.b	smpsNoAttack, $01
00085F5D E106                       	smpsAlterNote       $06
00085F5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F63 E109                       	smpsAlterNote       $09
00085F65 E701                       	dc.b	smpsNoAttack, $01
00085F67 E10F                       	smpsAlterNote       $0F
00085F69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F6D E109                       	smpsAlterNote       $09
00085F6F E701                       	dc.b	smpsNoAttack, $01
00085F71 E106                       	smpsAlterNote       $06
00085F73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F77 E10C                       	smpsAlterNote       $0C
00085F79 E701                       	dc.b	smpsNoAttack, $01
00085F7B E110                       	smpsAlterNote       $10
00085F7D E701                       	dc.b	smpsNoAttack, $01
00085F7F E10F                       	smpsAlterNote       $0F
00085F81 E701                       	dc.b	smpsNoAttack, $01
00085F83 E109                       	smpsAlterNote       $09
00085F85 E701                       	dc.b	smpsNoAttack, $01
00085F87 E105                       	smpsAlterNote       $05
00085F89 E701                       	dc.b	smpsNoAttack, $01
00085F8B E109                       	smpsAlterNote       $09
00085F8D E701                       	dc.b	smpsNoAttack, $01
00085F8F E10C                       	smpsAlterNote       $0C
00085F91 E701                       	dc.b	smpsNoAttack, $01
00085F93 E110                       	smpsAlterNote       $10
00085F95 E701                       	dc.b	smpsNoAttack, $01
00085F97 E10C                       	smpsAlterNote       $0C
00085F99 E701                       	dc.b	smpsNoAttack, $01
00085F9B E106                       	smpsAlterNote       $06
00085F9D E701                       	dc.b	smpsNoAttack, $01
00085F9F E105                       	smpsAlterNote       $05
00085FA1 E701                       	dc.b	smpsNoAttack, $01
00085FA3 E109                       	smpsAlterNote       $09
00085FA5 E701                       	dc.b	smpsNoAttack, $01
00085FA7 E10F                       	smpsAlterNote       $0F
00085FA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FAD E10C                       	smpsAlterNote       $0C
00085FAF E701                       	dc.b	smpsNoAttack, $01
00085FB1 E106                       	smpsAlterNote       $06
00085FB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FB7 E10C                       	smpsAlterNote       $0C
00085FB9 E701                       	dc.b	smpsNoAttack, $01
00085FBB E10F                       	smpsAlterNote       $0F
00085FBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FC1 E109                       	smpsAlterNote       $09
00085FC3 E701                       	dc.b	smpsNoAttack, $01
00085FC5 E105                       	smpsAlterNote       $05
00085FC7 E701                       	dc.b	smpsNoAttack, $01
00085FC9 E106                       	smpsAlterNote       $06
00085FCB E701                       	dc.b	smpsNoAttack, $01
00085FCD E10C                       	smpsAlterNote       $0C
00085FCF E701                       	dc.b	smpsNoAttack, $01
00085FD1 E110                       	smpsAlterNote       $10
00085FD3 E701                       	dc.b	smpsNoAttack, $01
00085FD5 E10C                       	smpsAlterNote       $0C
00085FD7 E701                       	dc.b	smpsNoAttack, $01
00085FD9 E109                       	smpsAlterNote       $09
00085FDB E701                       	dc.b	smpsNoAttack, $01
00085FDD E105                       	smpsAlterNote       $05
00085FDF E701                       	dc.b	smpsNoAttack, $01
00085FE1 E109                       	smpsAlterNote       $09
00085FE3 E701                       	dc.b	smpsNoAttack, $01
00085FE5 E10F                       	smpsAlterNote       $0F
00085FE7 E701                       	dc.b	smpsNoAttack, $01
00085FE9 E110                       	smpsAlterNote       $10
00085FEB E701                       	dc.b	smpsNoAttack, $01
00085FED E10C                       	smpsAlterNote       $0C
00085FEF E701                       	dc.b	smpsNoAttack, $01
00085FF1 E106                       	smpsAlterNote       $06
00085FF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085FF7 E109                       	smpsAlterNote       $09
00085FF9 E701                       	dc.b	smpsNoAttack, $01
00085FFB E10F                       	smpsAlterNote       $0F
00085FFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086001 E109                       	smpsAlterNote       $09
00086003 E701                       	dc.b	smpsNoAttack, $01
00086005 E106                       	smpsAlterNote       $06
00086007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008600B E10C                       	smpsAlterNote       $0C
0008600D E701                       	dc.b	smpsNoAttack, $01
0008600F E110                       	smpsAlterNote       $10
00086011 E701                       	dc.b	smpsNoAttack, $01
00086013 E10F                       	smpsAlterNote       $0F
00086015 E701                       	dc.b	smpsNoAttack, $01
00086017 E109                       	smpsAlterNote       $09
00086019 E701                       	dc.b	smpsNoAttack, $01
0008601B E105                       	smpsAlterNote       $05
0008601D E701                       	dc.b	smpsNoAttack, $01
0008601F E109                       	smpsAlterNote       $09
00086021 E701                       	dc.b	smpsNoAttack, $01
00086023 E10C                       	smpsAlterNote       $0C
00086025 E701                       	dc.b	smpsNoAttack, $01
00086027 E110                       	smpsAlterNote       $10
00086029 E701                       	dc.b	smpsNoAttack, $01
0008602B E10C                       	smpsAlterNote       $0C
0008602D E701                       	dc.b	smpsNoAttack, $01
0008602F E106                       	smpsAlterNote       $06
00086031 E701                       	dc.b	smpsNoAttack, $01
00086033 E105                       	smpsAlterNote       $05
00086035 E701                       	dc.b	smpsNoAttack, $01
00086037 E109                       	smpsAlterNote       $09
00086039 E701                       	dc.b	smpsNoAttack, $01
0008603B E10F                       	smpsAlterNote       $0F
0008603D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086041 E109                       	smpsAlterNote       $09
00086043 E701                       	dc.b	smpsNoAttack, $01
00086045 E106                       	smpsAlterNote       $06
00086047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008604B E10C                       	smpsAlterNote       $0C
0008604D E701                       	dc.b	smpsNoAttack, $01
0008604F E110                       	smpsAlterNote       $10
00086051 E701                       	dc.b	smpsNoAttack, $01
00086053 E10F                       	smpsAlterNote       $0F
00086055 E701                       	dc.b	smpsNoAttack, $01
00086057 E109                       	smpsAlterNote       $09
00086059 E701                       	dc.b	smpsNoAttack, $01
0008605B E105                       	smpsAlterNote       $05
0008605D E701                       	dc.b	smpsNoAttack, $01
0008605F E109                       	smpsAlterNote       $09
00086061 E701                       	dc.b	smpsNoAttack, $01
00086063 E10C                       	smpsAlterNote       $0C
00086065 E701                       	dc.b	smpsNoAttack, $01
00086067 E110                       	smpsAlterNote       $10
00086069 E701                       	dc.b	smpsNoAttack, $01
0008606B E10C                       	smpsAlterNote       $0C
0008606D E701                       	dc.b	smpsNoAttack, $01
0008606F E106                       	smpsAlterNote       $06
00086071 E701                       	dc.b	smpsNoAttack, $01
00086073 E105                       	smpsAlterNote       $05
00086075 E701                       	dc.b	smpsNoAttack, $01
00086077 E109                       	smpsAlterNote       $09
00086079 E701                       	dc.b	smpsNoAttack, $01
0008607B E10F                       	smpsAlterNote       $0F
0008607D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086081 E10C                       	smpsAlterNote       $0C
00086083 E701                       	dc.b	smpsNoAttack, $01
00086085 E106                       	smpsAlterNote       $06
00086087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008608B E10C                       	smpsAlterNote       $0C
0008608D E701                       	dc.b	smpsNoAttack, $01
0008608F E10F                       	smpsAlterNote       $0F
00086091 E701                       	dc.b	smpsNoAttack, $01
00086093 E110                       	smpsAlterNote       $10
00086095 8001                       	dc.b	nRst, $01
00086097 E10F                       	smpsAlterNote       $0F
00086099 C604                       	dc.b	nA5, $04
0008609B E10D                       	smpsAlterNote       $0D
0008609D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000860A3 E10B                       	smpsAlterNote       $0B
000860A5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000860AB E10F                       	smpsAlterNote       $0F
000860AD C604 8001                  	dc.b	nA5, $04, nRst, $01
000860B1 E10D                       	smpsAlterNote       $0D
000860B3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000860B9 E10C                       	smpsAlterNote       $0C
000860BB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000860C1 E10A                       	smpsAlterNote       $0A
000860C3 C904                       	dc.b	nC6, $04
000860C5 E110                       	smpsAlterNote       $10
000860C7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000860CB E10F                       	smpsAlterNote       $0F
000860CD C604                       	dc.b	nA5, $04
000860CF E10D                       	smpsAlterNote       $0D
000860D1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000860DD E109                       	smpsAlterNote       $09
000860DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860E3 E10F                       	smpsAlterNote       $0F
000860E5 E701                       	dc.b	smpsNoAttack, $01
000860E7 E112                       	smpsAlterNote       $12
000860E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860ED E10C                       	smpsAlterNote       $0C
000860EF E701                       	dc.b	smpsNoAttack, $01
000860F1 E108                       	smpsAlterNote       $08
000860F3 E701                       	dc.b	smpsNoAttack, $01
000860F5 E109                       	smpsAlterNote       $09
000860F7 E701                       	dc.b	smpsNoAttack, $01
000860F9 E10F                       	smpsAlterNote       $0F
000860FB E701                       	dc.b	smpsNoAttack, $01
000860FD E113                       	smpsAlterNote       $13
000860FF E701                       	dc.b	smpsNoAttack, $01
00086101 E10D                       	smpsAlterNote       $0D
00086103 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00086109 E10C                       	smpsAlterNote       $0C
0008610B C10D                       	dc.b	nE5, $0D
0008610D E109                       	smpsAlterNote       $09
0008610F E701                       	dc.b	smpsNoAttack, $01
00086111 E106                       	smpsAlterNote       $06
00086113 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086117 E10C                       	smpsAlterNote       $0C
00086119 E701                       	dc.b	smpsNoAttack, $01
0008611B E110                       	smpsAlterNote       $10
0008611D E701                       	dc.b	smpsNoAttack, $01
0008611F E10F                       	smpsAlterNote       $0F
00086121 E701                       	dc.b	smpsNoAttack, $01
00086123 E109                       	smpsAlterNote       $09
00086125 E701                       	dc.b	smpsNoAttack, $01
00086127 E105                       	smpsAlterNote       $05
00086129 E701                       	dc.b	smpsNoAttack, $01
0008612B E109                       	smpsAlterNote       $09
0008612D E701                       	dc.b	smpsNoAttack, $01
0008612F E10C                       	smpsAlterNote       $0C
00086131 E701                       	dc.b	smpsNoAttack, $01
00086133 E110                       	smpsAlterNote       $10
00086135 E701                       	dc.b	smpsNoAttack, $01
00086137 E10C                       	smpsAlterNote       $0C
00086139 E701                       	dc.b	smpsNoAttack, $01
0008613B E106                       	smpsAlterNote       $06
0008613D E701                       	dc.b	smpsNoAttack, $01
0008613F E105                       	smpsAlterNote       $05
00086141 E701                       	dc.b	smpsNoAttack, $01
00086143 E109                       	smpsAlterNote       $09
00086145 E701                       	dc.b	smpsNoAttack, $01
00086147 E10F                       	smpsAlterNote       $0F
00086149 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008614D E10C                       	smpsAlterNote       $0C
0008614F E701                       	dc.b	smpsNoAttack, $01
00086151 E106                       	smpsAlterNote       $06
00086153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086157 E10C                       	smpsAlterNote       $0C
00086159 E701                       	dc.b	smpsNoAttack, $01
0008615B E10F                       	smpsAlterNote       $0F
0008615D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086161 E109                       	smpsAlterNote       $09
00086163 E701                       	dc.b	smpsNoAttack, $01
00086165 E105                       	smpsAlterNote       $05
00086167 E701                       	dc.b	smpsNoAttack, $01
00086169 E106                       	smpsAlterNote       $06
0008616B E701                       	dc.b	smpsNoAttack, $01
0008616D E10C                       	smpsAlterNote       $0C
0008616F E701                       	dc.b	smpsNoAttack, $01
00086171 E110                       	smpsAlterNote       $10
00086173 E701                       	dc.b	smpsNoAttack, $01
00086175 E10C                       	smpsAlterNote       $0C
00086177 E701                       	dc.b	smpsNoAttack, $01
00086179 E109                       	smpsAlterNote       $09
0008617B E701                       	dc.b	smpsNoAttack, $01
0008617D E105                       	smpsAlterNote       $05
0008617F E701                       	dc.b	smpsNoAttack, $01
00086181 E109                       	smpsAlterNote       $09
00086183 E701                       	dc.b	smpsNoAttack, $01
00086185 E10F                       	smpsAlterNote       $0F
00086187 E701                       	dc.b	smpsNoAttack, $01
00086189 E110                       	smpsAlterNote       $10
0008618B E701                       	dc.b	smpsNoAttack, $01
0008618D E10C                       	smpsAlterNote       $0C
0008618F E701                       	dc.b	smpsNoAttack, $01
00086191 E106                       	smpsAlterNote       $06
00086193 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086197 E109                       	smpsAlterNote       $09
00086199 E701                       	dc.b	smpsNoAttack, $01
0008619B E10F                       	smpsAlterNote       $0F
0008619D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861A1 E109                       	smpsAlterNote       $09
000861A3 E701                       	dc.b	smpsNoAttack, $01
000861A5 E106                       	smpsAlterNote       $06
000861A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861AB E10C                       	smpsAlterNote       $0C
000861AD E701                       	dc.b	smpsNoAttack, $01
000861AF E110                       	smpsAlterNote       $10
000861B1 E701                       	dc.b	smpsNoAttack, $01
000861B3 E10F                       	smpsAlterNote       $0F
000861B5 E701                       	dc.b	smpsNoAttack, $01
000861B7 E109                       	smpsAlterNote       $09
000861B9 E701                       	dc.b	smpsNoAttack, $01
000861BB E105                       	smpsAlterNote       $05
000861BD E701                       	dc.b	smpsNoAttack, $01
000861BF E109                       	smpsAlterNote       $09
000861C1 E701                       	dc.b	smpsNoAttack, $01
000861C3 E10F                       	smpsAlterNote       $0F
000861C5 E701                       	dc.b	smpsNoAttack, $01
000861C7 E110                       	smpsAlterNote       $10
000861C9 E701                       	dc.b	smpsNoAttack, $01
000861CB E10C                       	smpsAlterNote       $0C
000861CD E701                       	dc.b	smpsNoAttack, $01
000861CF E106                       	smpsAlterNote       $06
000861D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861D5 E109                       	smpsAlterNote       $09
000861D7 E701                       	dc.b	smpsNoAttack, $01
000861D9 E10F                       	smpsAlterNote       $0F
000861DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861DF E109                       	smpsAlterNote       $09
000861E1 E701                       	dc.b	smpsNoAttack, $01
000861E3 E106                       	smpsAlterNote       $06
000861E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861E9 E10C                       	smpsAlterNote       $0C
000861EB E701                       	dc.b	smpsNoAttack, $01
000861ED E110                       	smpsAlterNote       $10
000861EF E701                       	dc.b	smpsNoAttack, $01
000861F1 E10F                       	smpsAlterNote       $0F
000861F3 E701                       	dc.b	smpsNoAttack, $01
000861F5 E109                       	smpsAlterNote       $09
000861F7 E701                       	dc.b	smpsNoAttack, $01
000861F9 E105                       	smpsAlterNote       $05
000861FB E701                       	dc.b	smpsNoAttack, $01
000861FD E109                       	smpsAlterNote       $09
000861FF E701                       	dc.b	smpsNoAttack, $01
00086201 E10C                       	smpsAlterNote       $0C
00086203 E701                       	dc.b	smpsNoAttack, $01
00086205 E110                       	smpsAlterNote       $10
00086207 E701                       	dc.b	smpsNoAttack, $01
00086209 E10C                       	smpsAlterNote       $0C
0008620B E701                       	dc.b	smpsNoAttack, $01
0008620D E106                       	smpsAlterNote       $06
0008620F E701                       	dc.b	smpsNoAttack, $01
00086211 E105                       	smpsAlterNote       $05
00086213 E701                       	dc.b	smpsNoAttack, $01
00086215 E109                       	smpsAlterNote       $09
00086217 E701                       	dc.b	smpsNoAttack, $01
00086219 E10F                       	smpsAlterNote       $0F
0008621B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008621F E10C                       	smpsAlterNote       $0C
00086221 E701                       	dc.b	smpsNoAttack, $01
00086223 E106                       	smpsAlterNote       $06
00086225 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086229 E10C                       	smpsAlterNote       $0C
0008622B E701                       	dc.b	smpsNoAttack, $01
0008622D E10F                       	smpsAlterNote       $0F
0008622F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086233 E109                       	smpsAlterNote       $09
00086235 E701                       	dc.b	smpsNoAttack, $01
00086237 E105                       	smpsAlterNote       $05
00086239 E701                       	dc.b	smpsNoAttack, $01
0008623B E106                       	smpsAlterNote       $06
0008623D E701                       	dc.b	smpsNoAttack, $01
0008623F E10C                       	smpsAlterNote       $0C
00086241 E701                       	dc.b	smpsNoAttack, $01
00086243 E110                       	smpsAlterNote       $10
00086245 E701                       	dc.b	smpsNoAttack, $01
00086247 E10C                       	smpsAlterNote       $0C
00086249 E701                       	dc.b	smpsNoAttack, $01
0008624B E109                       	smpsAlterNote       $09
0008624D E701                       	dc.b	smpsNoAttack, $01
0008624F E105                       	smpsAlterNote       $05
00086251 E701                       	dc.b	smpsNoAttack, $01
00086253 E109                       	smpsAlterNote       $09
00086255 E701                       	dc.b	smpsNoAttack, $01
00086257 E10F                       	smpsAlterNote       $0F
00086259 E701                       	dc.b	smpsNoAttack, $01
0008625B E110                       	smpsAlterNote       $10
0008625D E701                       	dc.b	smpsNoAttack, $01
0008625F E10C                       	smpsAlterNote       $0C
00086261 E701                       	dc.b	smpsNoAttack, $01
00086263 E106                       	smpsAlterNote       $06
00086265 E701                       	dc.b	smpsNoAttack, $01
00086267 E10B                       	smpsAlterNote       $0B
00086269 BF02                       	dc.b	nD5, $02
0008626B E10C                       	smpsAlterNote       $0C
0008626D C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00086273 E109                       	smpsAlterNote       $09
00086275 E701                       	dc.b	smpsNoAttack, $01
00086277 E105                       	smpsAlterNote       $05
00086279 E701                       	dc.b	smpsNoAttack, $01
0008627B E109                       	smpsAlterNote       $09
0008627D E701                       	dc.b	smpsNoAttack, $01
0008627F E10F                       	smpsAlterNote       $0F
00086281 E701                       	dc.b	smpsNoAttack, $01
00086283 E110                       	smpsAlterNote       $10
00086285 E701                       	dc.b	smpsNoAttack, $01
00086287 E10C                       	smpsAlterNote       $0C
00086289 E701                       	dc.b	smpsNoAttack, $01
0008628B E106                       	smpsAlterNote       $06
0008628D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086291 E109                       	smpsAlterNote       $09
00086293 E701                       	dc.b	smpsNoAttack, $01
00086295 E10F                       	smpsAlterNote       $0F
00086297 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008629B E109                       	smpsAlterNote       $09
0008629D E701                       	dc.b	smpsNoAttack, $01
0008629F E106                       	smpsAlterNote       $06
000862A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862A5 E10C                       	smpsAlterNote       $0C
000862A7 E701                       	dc.b	smpsNoAttack, $01
000862A9 E110                       	smpsAlterNote       $10
000862AB E701                       	dc.b	smpsNoAttack, $01
000862AD E10F                       	smpsAlterNote       $0F
000862AF E701                       	dc.b	smpsNoAttack, $01
000862B1 E109                       	smpsAlterNote       $09
000862B3 E701                       	dc.b	smpsNoAttack, $01
000862B5 E105                       	smpsAlterNote       $05
000862B7 E701                       	dc.b	smpsNoAttack, $01
000862B9 E109                       	smpsAlterNote       $09
000862BB E701                       	dc.b	smpsNoAttack, $01
000862BD E10C                       	smpsAlterNote       $0C
000862BF E701                       	dc.b	smpsNoAttack, $01
000862C1 E110                       	smpsAlterNote       $10
000862C3 E701                       	dc.b	smpsNoAttack, $01
000862C5 E10C                       	smpsAlterNote       $0C
000862C7 E701                       	dc.b	smpsNoAttack, $01
000862C9 E106                       	smpsAlterNote       $06
000862CB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000862CF E10D                       	smpsAlterNote       $0D
000862D1 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000862D9 E10C                       	smpsAlterNote       $0C
000862DB C10D                       	dc.b	nE5, $0D
000862DD E106                       	smpsAlterNote       $06
000862DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862E3 E109                       	smpsAlterNote       $09
000862E5 E701                       	dc.b	smpsNoAttack, $01
000862E7 E10F                       	smpsAlterNote       $0F
000862E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862ED E109                       	smpsAlterNote       $09
000862EF E701                       	dc.b	smpsNoAttack, $01
000862F1 E106                       	smpsAlterNote       $06
000862F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862F7 E10C                       	smpsAlterNote       $0C
000862F9 E701                       	dc.b	smpsNoAttack, $01
000862FB E110                       	smpsAlterNote       $10
000862FD E701                       	dc.b	smpsNoAttack, $01
000862FF E10F                       	smpsAlterNote       $0F
00086301 E701                       	dc.b	smpsNoAttack, $01
00086303 E109                       	smpsAlterNote       $09
00086305 E701                       	dc.b	smpsNoAttack, $01
00086307 E105                       	smpsAlterNote       $05
00086309 E701                       	dc.b	smpsNoAttack, $01
0008630B E106                       	smpsAlterNote       $06
0008630D 800F                       	dc.b	nRst, $0F
00086311 E6FF                       	smpsAlterVol        $FF
00086313 E10F                       	smpsAlterNote       $0F
00086315 BA01                       	dc.b	nA4, $01
00086317 E110                       	smpsAlterNote       $10
00086319 BB02                       	dc.b	nBb4, $02
0008631B E10F                       	smpsAlterNote       $0F
0008631D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00086323 E10B                       	smpsAlterNote       $0B
00086325 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086329 E10C                       	smpsAlterNote       $0C
0008632B C103                       	dc.b	nE5, $03
0008632D E10D                       	smpsAlterNote       $0D
0008632F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00086339 E10B                       	smpsAlterNote       $0B
0008633B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008633F E104                       	smpsAlterNote       $04
00086341 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086345 E10A                       	smpsAlterNote       $0A
00086347 E701                       	dc.b	smpsNoAttack, $01
00086349 E10D                       	smpsAlterNote       $0D
0008634B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008634F E107                       	smpsAlterNote       $07
00086351 E701                       	dc.b	smpsNoAttack, $01
00086353 E104                       	smpsAlterNote       $04
00086355 8001                       	dc.b	nRst, $01
00086357 E110                       	smpsAlterNote       $10
00086359 C703                       	dc.b	nBb5, $03
0008635B E10F                       	smpsAlterNote       $0F
0008635D C603 8001                  	dc.b	nA5, $03, nRst, $01
00086361 E10D                       	smpsAlterNote       $0D
00086363 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00086367 E10C                       	smpsAlterNote       $0C
00086369 E701                       	dc.b	smpsNoAttack, $01
0008636B E108                       	smpsAlterNote       $08
0008636D E701                       	dc.b	smpsNoAttack, $01
0008636F E109                       	smpsAlterNote       $09
00086371 E701                       	dc.b	smpsNoAttack, $01
00086373 E10F                       	smpsAlterNote       $0F
00086375 E701                       	dc.b	smpsNoAttack, $01
00086377 E113                       	smpsAlterNote       $13
00086379 E701                       	dc.b	smpsNoAttack, $01
0008637B E10F                       	smpsAlterNote       $0F
0008637D E701                       	dc.b	smpsNoAttack, $01
0008637F E10C                       	smpsAlterNote       $0C
00086381 E701                       	dc.b	smpsNoAttack, $01
00086383 E108                       	smpsAlterNote       $08
00086385 E701                       	dc.b	smpsNoAttack, $01
00086387 E10C                       	smpsAlterNote       $0C
00086389 E701                       	dc.b	smpsNoAttack, $01
0008638B E112                       	smpsAlterNote       $12
0008638D E701                       	dc.b	smpsNoAttack, $01
0008638F E113                       	smpsAlterNote       $13
00086391 E701                       	dc.b	smpsNoAttack, $01
00086393 E10F                       	smpsAlterNote       $0F
00086395 E701                       	dc.b	smpsNoAttack, $01
00086397 E109                       	smpsAlterNote       $09
00086399 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008639D E10C                       	smpsAlterNote       $0C
0008639F E701                       	dc.b	smpsNoAttack, $01
000863A1 E112                       	smpsAlterNote       $12
000863A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863A7 E10C                       	smpsAlterNote       $0C
000863A9 E701                       	dc.b	smpsNoAttack, $01
000863AB E109                       	smpsAlterNote       $09
000863AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863B1 E10F                       	smpsAlterNote       $0F
000863B3 E701                       	dc.b	smpsNoAttack, $01
000863B5 E113                       	smpsAlterNote       $13
000863B7 E701                       	dc.b	smpsNoAttack, $01
000863B9 E112                       	smpsAlterNote       $12
000863BB E701                       	dc.b	smpsNoAttack, $01
000863BD E10C                       	smpsAlterNote       $0C
000863BF E701                       	dc.b	smpsNoAttack, $01
000863C1 E108                       	smpsAlterNote       $08
000863C3 E701                       	dc.b	smpsNoAttack, $01
000863C5 E10C                       	smpsAlterNote       $0C
000863C7 E701                       	dc.b	smpsNoAttack, $01
000863C9 E10F                       	smpsAlterNote       $0F
000863CB E701                       	dc.b	smpsNoAttack, $01
000863CD E113                       	smpsAlterNote       $13
000863CF E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000863D3 E10B                       	smpsAlterNote       $0B
000863D5 BF03                       	dc.b	nD5, $03
000863D7 E10C                       	smpsAlterNote       $0C
000863D9 C103 8001                  	dc.b	nE5, $03, nRst, $01
000863DD E10D                       	smpsAlterNote       $0D
000863DF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000863E9 E10B                       	smpsAlterNote       $0B
000863EB BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000863F7 E110                       	smpsAlterNote       $10
000863F9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000863FD E10F                       	smpsAlterNote       $0F
000863FF C604                       	dc.b	nA5, $04
00086401 E10D                       	smpsAlterNote       $0D
00086403 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086409 E109                       	smpsAlterNote       $09
0008640B E701                       	dc.b	smpsNoAttack, $01
0008640D E108                       	smpsAlterNote       $08
0008640F E701                       	dc.b	smpsNoAttack, $01
00086411 E10C                       	smpsAlterNote       $0C
00086413 E701                       	dc.b	smpsNoAttack, $01
00086415 E112                       	smpsAlterNote       $12
00086417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008641B E10F                       	smpsAlterNote       $0F
0008641D E701                       	dc.b	smpsNoAttack, $01
0008641F E109                       	smpsAlterNote       $09
00086421 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086425 E10F                       	smpsAlterNote       $0F
00086427 E701                       	dc.b	smpsNoAttack, $01
00086429 E112                       	smpsAlterNote       $12
0008642B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008642F E10C                       	smpsAlterNote       $0C
00086431 E701                       	dc.b	smpsNoAttack, $01
00086433 E108                       	smpsAlterNote       $08
00086435 E701                       	dc.b	smpsNoAttack, $01
00086437 E109                       	smpsAlterNote       $09
00086439 E701                       	dc.b	smpsNoAttack, $01
0008643B E10F                       	smpsAlterNote       $0F
0008643D E701                       	dc.b	smpsNoAttack, $01
0008643F E113                       	smpsAlterNote       $13
00086441 E701                       	dc.b	smpsNoAttack, $01
00086443 E10F                       	smpsAlterNote       $0F
00086445 E701                       	dc.b	smpsNoAttack, $01
00086447 E10C                       	smpsAlterNote       $0C
00086449 E701                       	dc.b	smpsNoAttack, $01
0008644B E108                       	smpsAlterNote       $08
0008644D E701                       	dc.b	smpsNoAttack, $01
0008644F E10C                       	smpsAlterNote       $0C
00086451 E701                       	dc.b	smpsNoAttack, $01
00086453 E112                       	smpsAlterNote       $12
00086455 E701                       	dc.b	smpsNoAttack, $01
00086457 E113                       	smpsAlterNote       $13
00086459 E701                       	dc.b	smpsNoAttack, $01
0008645B E10F                       	smpsAlterNote       $0F
0008645D E701                       	dc.b	smpsNoAttack, $01
0008645F E109                       	smpsAlterNote       $09
00086461 E701                       	dc.b	smpsNoAttack, $01
00086463 E10D                       	smpsAlterNote       $0D
00086465 C402                       	dc.b	nG5, $02
00086467 E10F                       	smpsAlterNote       $0F
00086469 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00086473 E10D                       	smpsAlterNote       $0D
00086475 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008647B E10B                       	smpsAlterNote       $0B
0008647D BF0D                       	dc.b	nD5, $0D
0008647F E108                       	smpsAlterNote       $08
00086481 E701                       	dc.b	smpsNoAttack, $01
00086483 E104                       	smpsAlterNote       $04
00086485 E701                       	dc.b	smpsNoAttack, $01
00086487 E105                       	smpsAlterNote       $05
00086489 E701                       	dc.b	smpsNoAttack, $01
0008648B E10B                       	smpsAlterNote       $0B
0008648D E701                       	dc.b	smpsNoAttack, $01
0008648F E10F                       	smpsAlterNote       $0F
00086491 E701                       	dc.b	smpsNoAttack, $01
00086493 E10B                       	smpsAlterNote       $0B
00086495 E701                       	dc.b	smpsNoAttack, $01
00086497 E108                       	smpsAlterNote       $08
00086499 E701                       	dc.b	smpsNoAttack, $01
0008649B E104                       	smpsAlterNote       $04
0008649D E701                       	dc.b	smpsNoAttack, $01
0008649F E108                       	smpsAlterNote       $08
000864A1 E701                       	dc.b	smpsNoAttack, $01
000864A3 E10E                       	smpsAlterNote       $0E
000864A5 E701                       	dc.b	smpsNoAttack, $01
000864A7 E10F                       	smpsAlterNote       $0F
000864A9 E701                       	dc.b	smpsNoAttack, $01
000864AB E10C                       	smpsAlterNote       $0C
000864AD C101                       	dc.b	nE5, $01
000864AF E10D                       	smpsAlterNote       $0D
000864B1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000864B9 E10F                       	smpsAlterNote       $0F
000864BB C607                       	dc.b	nA5, $07
000864BD E10C                       	smpsAlterNote       $0C
000864BF CD07                       	dc.b	nE6, $07
000864C1 E10D                       	smpsAlterNote       $0D
000864C3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000864C7 E10C                       	smpsAlterNote       $0C
000864C9 CD03                       	dc.b	nE6, $03
000864CB E10A                       	smpsAlterNote       $0A
000864CD C903 8001                  	dc.b	nC6, $03, nRst, $01
000864D1 E10D                       	smpsAlterNote       $0D
000864D3 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000864D9 E10A                       	smpsAlterNote       $0A
000864DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864DF E110                       	smpsAlterNote       $10
000864E1 E701                       	dc.b	smpsNoAttack, $01
000864E3 E114                       	smpsAlterNote       $14
000864E5 E701                       	dc.b	smpsNoAttack, $01
000864E7 E113                       	smpsAlterNote       $13
000864E9 E701                       	dc.b	smpsNoAttack, $01
000864EB E10D                       	smpsAlterNote       $0D
000864ED E701                       	dc.b	smpsNoAttack, $01
000864EF E109                       	smpsAlterNote       $09
000864F1 E701                       	dc.b	smpsNoAttack, $01
000864F3 E10D                       	smpsAlterNote       $0D
000864F5 E701                       	dc.b	smpsNoAttack, $01
000864F7 E110                       	smpsAlterNote       $10
000864F9 E701                       	dc.b	smpsNoAttack, $01
000864FB E114                       	smpsAlterNote       $14
000864FD E701                       	dc.b	smpsNoAttack, $01
000864FF E10F                       	smpsAlterNote       $0F
00086501 C607                       	dc.b	nA5, $07
00086503 E10D                       	smpsAlterNote       $0D
00086505 C40D                       	dc.b	nG5, $0D
00086507 E10A                       	smpsAlterNote       $0A
00086509 E701                       	dc.b	smpsNoAttack, $01
0008650B E106                       	smpsAlterNote       $06
0008650D E701                       	dc.b	smpsNoAttack, $01
0008650F E10A                       	smpsAlterNote       $0A
00086511 E701                       	dc.b	smpsNoAttack, $01
00086513 E10D                       	smpsAlterNote       $0D
00086515 E701                       	dc.b	smpsNoAttack, $01
00086517 E111                       	smpsAlterNote       $11
00086519 E701                       	dc.b	smpsNoAttack, $01
0008651B E10D                       	smpsAlterNote       $0D
0008651D E701                       	dc.b	smpsNoAttack, $01
0008651F E107                       	smpsAlterNote       $07
00086521 E701                       	dc.b	smpsNoAttack, $01
00086523 E106                       	smpsAlterNote       $06
00086525 E701                       	dc.b	smpsNoAttack, $01
00086527 E10A                       	smpsAlterNote       $0A
00086529 E701                       	dc.b	smpsNoAttack, $01
0008652B E110                       	smpsAlterNote       $10
0008652D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086531 E10D                       	smpsAlterNote       $0D
00086533 E701                       	dc.b	smpsNoAttack, $01
00086535 E107                       	smpsAlterNote       $07
00086537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008653B E10F                       	smpsAlterNote       $0F
0008653D C60E                       	dc.b	nA5, $0E
0008653F E109                       	smpsAlterNote       $09
00086541 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086545 E10F                       	smpsAlterNote       $0F
00086547 E701                       	dc.b	smpsNoAttack, $01
00086549 E112                       	smpsAlterNote       $12
0008654B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008654F E10C                       	smpsAlterNote       $0C
00086551 E701                       	dc.b	smpsNoAttack, $01
00086553 E108                       	smpsAlterNote       $08
00086555 E701                       	dc.b	smpsNoAttack, $01
00086557 E109                       	smpsAlterNote       $09
00086559 E701                       	dc.b	smpsNoAttack, $01
0008655B E10F                       	smpsAlterNote       $0F
0008655D E701                       	dc.b	smpsNoAttack, $01
0008655F E113                       	smpsAlterNote       $13
00086561 E701                       	dc.b	smpsNoAttack, $01
00086563 E10F                       	smpsAlterNote       $0F
00086565 E701                       	dc.b	smpsNoAttack, $01
00086567 E10C                       	smpsAlterNote       $0C
00086569 E701                       	dc.b	smpsNoAttack, $01
0008656B E108                       	smpsAlterNote       $08
0008656D E701                       	dc.b	smpsNoAttack, $01
0008656F E109                       	smpsAlterNote       $09
00086571 8001                       	dc.b	nRst, $01
00086573 E110                       	smpsAlterNote       $10
00086575 C70D                       	dc.b	nBb5, $0D
00086577 E10D                       	smpsAlterNote       $0D
00086579 E701                       	dc.b	smpsNoAttack, $01
0008657B E109                       	smpsAlterNote       $09
0008657D E701                       	dc.b	smpsNoAttack, $01
0008657F E10D                       	smpsAlterNote       $0D
00086581 E701                       	dc.b	smpsNoAttack, $01
00086583 E113                       	smpsAlterNote       $13
00086585 E701                       	dc.b	smpsNoAttack, $01
00086587 E114                       	smpsAlterNote       $14
00086589 E701                       	dc.b	smpsNoAttack, $01
0008658B E110                       	smpsAlterNote       $10
0008658D E701                       	dc.b	smpsNoAttack, $01
0008658F E10A                       	smpsAlterNote       $0A
00086591 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086595 E10D                       	smpsAlterNote       $0D
00086597 E701                       	dc.b	smpsNoAttack, $01
00086599 E113                       	smpsAlterNote       $13
0008659B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008659F E10D                       	smpsAlterNote       $0D
000865A1 E701                       	dc.b	smpsNoAttack, $01
000865A3 E10A                       	smpsAlterNote       $0A
000865A5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000865AF E10B                       	smpsAlterNote       $0B
000865B1 8001                       	dc.b	nRst, $01
000865B3 E10C                       	smpsAlterNote       $0C
000865B5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000865B9 E10B                       	smpsAlterNote       $0B
000865BB CB0D                       	dc.b	nD6, $0D
000865BD E105                       	smpsAlterNote       $05
000865BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865C3 E108                       	smpsAlterNote       $08
000865C5 E701                       	dc.b	smpsNoAttack, $01
000865C7 E10E                       	smpsAlterNote       $0E
000865C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865CD E108                       	smpsAlterNote       $08
000865CF E701                       	dc.b	smpsNoAttack, $01
000865D1 E105                       	smpsAlterNote       $05
000865D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865D7 E10B                       	smpsAlterNote       $0B
000865D9 E701                       	dc.b	smpsNoAttack, $01
000865DB E10F                       	smpsAlterNote       $0F
000865DD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000865E1 E10C                       	smpsAlterNote       $0C
000865E3 CC0D                       	dc.b	nEb6, $0D
000865E5 E106                       	smpsAlterNote       $06
000865E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865EB E109                       	smpsAlterNote       $09
000865ED E701                       	dc.b	smpsNoAttack, $01
000865EF E10C                       	smpsAlterNote       $0C
000865F1 8001                       	dc.b	nRst, $01
000865F3 E10A                       	smpsAlterNote       $0A
000865F5 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00086601 CB0E                       	dc.b	nD6, $0E
00086603 E105                       	smpsAlterNote       $05
00086605 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086609 E10B                       	smpsAlterNote       $0B
0008660B E701                       	dc.b	smpsNoAttack, $01
0008660D E10E                       	smpsAlterNote       $0E
0008660F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086613 E108                       	smpsAlterNote       $08
00086615 E701                       	dc.b	smpsNoAttack, $01
00086617 E104                       	smpsAlterNote       $04
00086619 E701                       	dc.b	smpsNoAttack, $01
0008661B E105                       	smpsAlterNote       $05
0008661D E701                       	dc.b	smpsNoAttack, $01
0008661F E10B                       	smpsAlterNote       $0B
00086621 E701                       	dc.b	smpsNoAttack, $01
00086623 E10F                       	smpsAlterNote       $0F
00086625 E701                       	dc.b	smpsNoAttack, $01
00086627 E10D                       	smpsAlterNote       $0D
00086629 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008662D E10C                       	smpsAlterNote       $0C
0008662F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00086633 E10A                       	smpsAlterNote       $0A
00086635 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00086641 CB0D                       	dc.b	nD6, $0D
00086643 E108                       	smpsAlterNote       $08
00086645 E701                       	dc.b	smpsNoAttack, $01
00086647 E104                       	smpsAlterNote       $04
00086649 E701                       	dc.b	smpsNoAttack, $01
0008664B E105                       	smpsAlterNote       $05
0008664D E701                       	dc.b	smpsNoAttack, $01
0008664F E10B                       	smpsAlterNote       $0B
00086651 E701                       	dc.b	smpsNoAttack, $01
00086653 E10F                       	smpsAlterNote       $0F
00086655 E701                       	dc.b	smpsNoAttack, $01
00086657 E10B                       	smpsAlterNote       $0B
00086659 E701                       	dc.b	smpsNoAttack, $01
0008665B E108                       	smpsAlterNote       $08
0008665D E701                       	dc.b	smpsNoAttack, $01
0008665F E104                       	smpsAlterNote       $04
00086661 E701                       	dc.b	smpsNoAttack, $01
00086663 E108                       	smpsAlterNote       $08
00086665 E701                       	dc.b	smpsNoAttack, $01
00086667 E10E                       	smpsAlterNote       $0E
00086669 E701                       	dc.b	smpsNoAttack, $01
0008666B E10F                       	smpsAlterNote       $0F
0008666D E701                       	dc.b	smpsNoAttack, $01
0008666F E10C                       	smpsAlterNote       $0C
00086671 CC0D                       	dc.b	nEb6, $0D
00086673 E109                       	smpsAlterNote       $09
00086675 E701                       	dc.b	smpsNoAttack, $01
00086677 E105                       	smpsAlterNote       $05
00086679 E701                       	dc.b	smpsNoAttack, $01
0008667B E106                       	smpsAlterNote       $06
0008667D E701                       	dc.b	smpsNoAttack, $01
0008667F E10C                       	smpsAlterNote       $0C
00086681 E701                       	dc.b	smpsNoAttack, $01
00086683 E10A                       	smpsAlterNote       $0A
00086685 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00086691 CB0D                       	dc.b	nD6, $0D
00086693 E108                       	smpsAlterNote       $08
00086695 E701                       	dc.b	smpsNoAttack, $01
00086697 E104                       	smpsAlterNote       $04
00086699 E701                       	dc.b	smpsNoAttack, $01
0008669B E108                       	smpsAlterNote       $08
0008669D E701                       	dc.b	smpsNoAttack, $01
0008669F E10B                       	smpsAlterNote       $0B
000866A1 E701                       	dc.b	smpsNoAttack, $01
000866A3 E10F                       	smpsAlterNote       $0F
000866A5 E701                       	dc.b	smpsNoAttack, $01
000866A7 E10B                       	smpsAlterNote       $0B
000866A9 E701                       	dc.b	smpsNoAttack, $01
000866AB E105                       	smpsAlterNote       $05
000866AD E701                       	dc.b	smpsNoAttack, $01
000866AF E104                       	smpsAlterNote       $04
000866B1 E701                       	dc.b	smpsNoAttack, $01
000866B3 E108                       	smpsAlterNote       $08
000866B5 E701                       	dc.b	smpsNoAttack, $01
000866B7 E10E                       	smpsAlterNote       $0E
000866B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866BD E10B                       	smpsAlterNote       $0B
000866BF E701                       	dc.b	smpsNoAttack, $01
000866C1 E105                       	smpsAlterNote       $05
000866C3 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000866CB 03                         	dc.b	$03
000866CC E601                       	smpsAlterVol        $01
000866CE F6F1 D1                    	smpsJump            music84_Jump01
000866D1                            
000866D1                            ; FM5 Data
000866D1                            music84_FM5:
000866D3 E080                       	smpsPan             panLeft, $00
000866D5 8003                       	dc.b	nRst, $03
000866D7 E10D                       	smpsAlterNote       $0D
000866D9 C203 8008                  	dc.b	nF5, $03, nRst, $08
000866DD E10C                       	smpsAlterNote       $0C
000866DF C103 800A                  	dc.b	nE5, $03, nRst, $0A
000866E3 E10F                       	smpsAlterNote       $0F
000866E5 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000866EB E6FE                       	smpsAlterVol        $FE
000866ED C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
000866F3 E10D                       	smpsAlterNote       $0D
000866F5 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000866FB E10C                       	smpsAlterNote       $0C
000866FD C102 8001                  	dc.b	nE5, $02, nRst, $01
00086701 E10A                       	smpsAlterNote       $0A
00086703 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00086709 03                         	dc.b	$03
0008670A                            
0008670A                            music84_Jump00:
0008670A 8004                       	dc.b	nRst, $04
0008670C E602                       	smpsAlterVol        $02
0008670E E10D                       	smpsAlterNote       $0D
00086710 B60D                       	dc.b	nF4, $0D
00086712 E107                       	smpsAlterNote       $07
00086714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086718 E10A                       	smpsAlterNote       $0A
0008671A E701                       	dc.b	smpsNoAttack, $01
0008671C E110                       	smpsAlterNote       $10
0008671E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086722 E10A                       	smpsAlterNote       $0A
00086724 E701                       	dc.b	smpsNoAttack, $01
00086726 E107                       	smpsAlterNote       $07
00086728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008672C E10D                       	smpsAlterNote       $0D
0008672E E701                       	dc.b	smpsNoAttack, $01
00086730 E111                       	smpsAlterNote       $11
00086732 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086736 E10D                       	smpsAlterNote       $0D
00086738 B80D                       	dc.b	nG4, $0D
0008673A E107                       	smpsAlterNote       $07
0008673C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086740 E10A                       	smpsAlterNote       $0A
00086742 E701                       	dc.b	smpsNoAttack, $01
00086744 E110                       	smpsAlterNote       $10
00086746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008674A E10A                       	smpsAlterNote       $0A
0008674C E701                       	dc.b	smpsNoAttack, $01
0008674E E107                       	smpsAlterNote       $07
00086750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086754 E10D                       	smpsAlterNote       $0D
00086756 E701                       	dc.b	smpsNoAttack, $01
00086758 E111                       	smpsAlterNote       $11
0008675A E701                       	dc.b	smpsNoAttack, $01
0008675C E110                       	smpsAlterNote       $10
0008675E E701                       	dc.b	smpsNoAttack, $01
00086760 E10A                       	smpsAlterNote       $0A
00086762 E701                       	dc.b	smpsNoAttack, $01
00086764 E106                       	smpsAlterNote       $06
00086766 E701                       	dc.b	smpsNoAttack, $01
00086768 E10A                       	smpsAlterNote       $0A
0008676A E701                       	dc.b	smpsNoAttack, $01
0008676C E10D                       	smpsAlterNote       $0D
0008676E E701                       	dc.b	smpsNoAttack, $01
00086770 E111                       	smpsAlterNote       $11
00086772 E701                       	dc.b	smpsNoAttack, $01
00086774 E10D                       	smpsAlterNote       $0D
00086776 E701                       	dc.b	smpsNoAttack, $01
00086778 E10F                       	smpsAlterNote       $0F
0008677A BA0E                       	dc.b	nA4, $0E
0008677C E109                       	smpsAlterNote       $09
0008677E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086782 E10F                       	smpsAlterNote       $0F
00086784 E701                       	dc.b	smpsNoAttack, $01
00086786 E112                       	smpsAlterNote       $12
00086788 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008678C E10C                       	smpsAlterNote       $0C
0008678E E701                       	dc.b	smpsNoAttack, $01
00086790 E108                       	smpsAlterNote       $08
00086792 E701                       	dc.b	smpsNoAttack, $01
00086794 E109                       	smpsAlterNote       $09
00086796 E701                       	dc.b	smpsNoAttack, $01
00086798 E10F                       	smpsAlterNote       $0F
0008679A E701                       	dc.b	smpsNoAttack, $01
0008679C E113                       	smpsAlterNote       $13
0008679E E701                       	dc.b	smpsNoAttack, $01
000867A0 E10F                       	smpsAlterNote       $0F
000867A2 E701                       	dc.b	smpsNoAttack, $01
000867A4 E109                       	smpsAlterNote       $09
000867A6 E701                       	dc.b	smpsNoAttack, $01
000867A8 E108                       	smpsAlterNote       $08
000867AA E701                       	dc.b	smpsNoAttack, $01
000867AC E10C                       	smpsAlterNote       $0C
000867AE E701                       	dc.b	smpsNoAttack, $01
000867B0 E112                       	smpsAlterNote       $12
000867B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867B6 E10F                       	smpsAlterNote       $0F
000867B8 E701                       	dc.b	smpsNoAttack, $01
000867BA E109                       	smpsAlterNote       $09
000867BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867C0 E10F                       	smpsAlterNote       $0F
000867C2 E701                       	dc.b	smpsNoAttack, $01
000867C4 E112                       	smpsAlterNote       $12
000867C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867CA E10C                       	smpsAlterNote       $0C
000867CC E701                       	dc.b	smpsNoAttack, $01
000867CE E108                       	smpsAlterNote       $08
000867D0 E701                       	dc.b	smpsNoAttack, $01
000867D2 E109                       	smpsAlterNote       $09
000867D4 E701                       	dc.b	smpsNoAttack, $01
000867D6 E10F                       	smpsAlterNote       $0F
000867D8 E701                       	dc.b	smpsNoAttack, $01
000867DA E113                       	smpsAlterNote       $13
000867DC E701                       	dc.b	smpsNoAttack, $01
000867DE E10F                       	smpsAlterNote       $0F
000867E0 E701                       	dc.b	smpsNoAttack, $01
000867E2 E10C                       	smpsAlterNote       $0C
000867E4 E701                       	dc.b	smpsNoAttack, $01
000867E6 E108                       	smpsAlterNote       $08
000867E8 E701                       	dc.b	smpsNoAttack, $01
000867EA E109                       	smpsAlterNote       $09
000867EC 8001                       	dc.b	nRst, $01
000867EE E10C                       	smpsAlterNote       $0C
000867F0 B50A                       	dc.b	nE4, $0A
000867F2 E10D                       	smpsAlterNote       $0D
000867F4 B60D                       	dc.b	nF4, $0D
000867F6 E10A                       	smpsAlterNote       $0A
000867F8 E701                       	dc.b	smpsNoAttack, $01
000867FA E106                       	smpsAlterNote       $06
000867FC E701                       	dc.b	smpsNoAttack, $01
000867FE E107                       	smpsAlterNote       $07
00086800 E701                       	dc.b	smpsNoAttack, $01
00086802 E10D                       	smpsAlterNote       $0D
00086804 E701                       	dc.b	smpsNoAttack, $01
00086806 E111                       	smpsAlterNote       $11
00086808 E701                       	dc.b	smpsNoAttack, $01
0008680A E10D                       	smpsAlterNote       $0D
0008680C E701                       	dc.b	smpsNoAttack, $01
0008680E E10A                       	smpsAlterNote       $0A
00086810 E701                       	dc.b	smpsNoAttack, $01
00086812 E106                       	smpsAlterNote       $06
00086814 E701                       	dc.b	smpsNoAttack, $01
00086816 E10A                       	smpsAlterNote       $0A
00086818 E701                       	dc.b	smpsNoAttack, $01
0008681A E110                       	smpsAlterNote       $10
0008681C E701                       	dc.b	smpsNoAttack, $01
0008681E E111                       	smpsAlterNote       $11
00086820 E701                       	dc.b	smpsNoAttack, $01
00086822 E10D                       	smpsAlterNote       $0D
00086824 B80D                       	dc.b	nG4, $0D
00086826 E10A                       	smpsAlterNote       $0A
00086828 E701                       	dc.b	smpsNoAttack, $01
0008682A E106                       	smpsAlterNote       $06
0008682C E701                       	dc.b	smpsNoAttack, $01
0008682E E107                       	smpsAlterNote       $07
00086830 E701                       	dc.b	smpsNoAttack, $01
00086832 E10D                       	smpsAlterNote       $0D
00086834 E701                       	dc.b	smpsNoAttack, $01
00086836 E111                       	smpsAlterNote       $11
00086838 E701                       	dc.b	smpsNoAttack, $01
0008683A E10D                       	smpsAlterNote       $0D
0008683C E701                       	dc.b	smpsNoAttack, $01
0008683E E10A                       	smpsAlterNote       $0A
00086840 E701                       	dc.b	smpsNoAttack, $01
00086842 E106                       	smpsAlterNote       $06
00086844 E701                       	dc.b	smpsNoAttack, $01
00086846 E10A                       	smpsAlterNote       $0A
00086848 E701                       	dc.b	smpsNoAttack, $01
0008684A E110                       	smpsAlterNote       $10
0008684C E701                       	dc.b	smpsNoAttack, $01
0008684E E111                       	smpsAlterNote       $11
00086850 E701                       	dc.b	smpsNoAttack, $01
00086852 E10D                       	smpsAlterNote       $0D
00086854 E701                       	dc.b	smpsNoAttack, $01
00086856 E107                       	smpsAlterNote       $07
00086858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008685C E10A                       	smpsAlterNote       $0A
0008685E E701                       	dc.b	smpsNoAttack, $01
00086860 E110                       	smpsAlterNote       $10
00086862 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086866 E10D                       	smpsAlterNote       $0D
00086868 8001                       	dc.b	nRst, $01
0008686A E10F                       	smpsAlterNote       $0F
0008686C BA0D                       	dc.b	nA4, $0D
0008686E E10C                       	smpsAlterNote       $0C
00086870 E701                       	dc.b	smpsNoAttack, $01
00086872 E108                       	smpsAlterNote       $08
00086874 E701                       	dc.b	smpsNoAttack, $01
00086876 E10C                       	smpsAlterNote       $0C
00086878 E701                       	dc.b	smpsNoAttack, $01
0008687A E112                       	smpsAlterNote       $12
0008687C E701                       	dc.b	smpsNoAttack, $01
0008687E E113                       	smpsAlterNote       $13
00086880 E701                       	dc.b	smpsNoAttack, $01
00086882 E10F                       	smpsAlterNote       $0F
00086884 E701                       	dc.b	smpsNoAttack, $01
00086886 E109                       	smpsAlterNote       $09
00086888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008688C E10C                       	smpsAlterNote       $0C
0008688E E701                       	dc.b	smpsNoAttack, $01
00086890 E112                       	smpsAlterNote       $12
00086892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086896 E10C                       	smpsAlterNote       $0C
00086898 E701                       	dc.b	smpsNoAttack, $01
0008689A E109                       	smpsAlterNote       $09
0008689C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868A0 E10F                       	smpsAlterNote       $0F
000868A2 E701                       	dc.b	smpsNoAttack, $01
000868A4 E113                       	smpsAlterNote       $13
000868A6 E701                       	dc.b	smpsNoAttack, $01
000868A8 E112                       	smpsAlterNote       $12
000868AA E701                       	dc.b	smpsNoAttack, $01
000868AC E10C                       	smpsAlterNote       $0C
000868AE E701                       	dc.b	smpsNoAttack, $01
000868B0 E108                       	smpsAlterNote       $08
000868B2 E701                       	dc.b	smpsNoAttack, $01
000868B4 E10C                       	smpsAlterNote       $0C
000868B6 E701                       	dc.b	smpsNoAttack, $01
000868B8 E10F                       	smpsAlterNote       $0F
000868BA E701                       	dc.b	smpsNoAttack, $01
000868BC E113                       	smpsAlterNote       $13
000868BE E701                       	dc.b	smpsNoAttack, $01
000868C0 E10F                       	smpsAlterNote       $0F
000868C2 E701                       	dc.b	smpsNoAttack, $01
000868C4 E109                       	smpsAlterNote       $09
000868C6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000868CA E10D                       	smpsAlterNote       $0D
000868CC B609 8001                  	dc.b	nF4, $09, nRst, $01
000868D0 E10C                       	smpsAlterNote       $0C
000868D2 B506 8001                  	dc.b	nE4, $06, nRst, $01
000868D6 E10B                       	smpsAlterNote       $0B
000868D8 B30D                       	dc.b	nD4, $0D
000868DA E10C                       	smpsAlterNote       $0C
000868DC B503 8001                  	dc.b	nE4, $03, nRst, $01
000868E0 E10D                       	smpsAlterNote       $0D
000868E2 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000868EA E109                       	smpsAlterNote       $09
000868EC E701                       	dc.b	smpsNoAttack, $01
000868EE E108                       	smpsAlterNote       $08
000868F0 E701                       	dc.b	smpsNoAttack, $01
000868F2 E10C                       	smpsAlterNote       $0C
000868F4 E701                       	dc.b	smpsNoAttack, $01
000868F6 E112                       	smpsAlterNote       $12
000868F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868FC E10F                       	smpsAlterNote       $0F
000868FE E701                       	dc.b	smpsNoAttack, $01
00086900 E109                       	smpsAlterNote       $09
00086902 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086906 E10F                       	smpsAlterNote       $0F
00086908 E701                       	dc.b	smpsNoAttack, $01
0008690A E112                       	smpsAlterNote       $12
0008690C E701                       	dc.b	smpsNoAttack, $01
0008690E E113                       	smpsAlterNote       $13
00086910 8001                       	dc.b	nRst, $01
00086912 E10D                       	smpsAlterNote       $0D
00086914 C20D                       	dc.b	nF5, $0D
00086916 E107                       	smpsAlterNote       $07
00086918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008691C E10A                       	smpsAlterNote       $0A
0008691E E701                       	dc.b	smpsNoAttack, $01
00086920 E110                       	smpsAlterNote       $10
00086922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086926 E10A                       	smpsAlterNote       $0A
00086928 E701                       	dc.b	smpsNoAttack, $01
0008692A E107                       	smpsAlterNote       $07
0008692C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086930 E10D                       	smpsAlterNote       $0D
00086932 E701                       	dc.b	smpsNoAttack, $01
00086934 E111                       	smpsAlterNote       $11
00086936 E701                       	dc.b	smpsNoAttack, $01
00086938 E110                       	smpsAlterNote       $10
0008693A E701                       	dc.b	smpsNoAttack, $01
0008693C E10A                       	smpsAlterNote       $0A
0008693E E701                       	dc.b	smpsNoAttack, $01
00086940 E106                       	smpsAlterNote       $06
00086942 E701                       	dc.b	smpsNoAttack, $01
00086944 E10A                       	smpsAlterNote       $0A
00086946 E701                       	dc.b	smpsNoAttack, $01
00086948 E10D                       	smpsAlterNote       $0D
0008694A E701                       	dc.b	smpsNoAttack, $01
0008694C E111                       	smpsAlterNote       $11
0008694E E701                       	dc.b	smpsNoAttack, $01
00086950 E10D                       	smpsAlterNote       $0D
00086952 E701                       	dc.b	smpsNoAttack, $01
00086954 E107                       	smpsAlterNote       $07
00086956 E701                       	dc.b	smpsNoAttack, $01
00086958 E106                       	smpsAlterNote       $06
0008695A E701                       	dc.b	smpsNoAttack, $01
0008695C E10A                       	smpsAlterNote       $0A
0008695E E701                       	dc.b	smpsNoAttack, $01
00086960 E110                       	smpsAlterNote       $10
00086962 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086966 E10D                       	smpsAlterNote       $0D
00086968 E701                       	dc.b	smpsNoAttack, $01
0008696A E107                       	smpsAlterNote       $07
0008696C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086970 E10D                       	smpsAlterNote       $0D
00086972 E701                       	dc.b	smpsNoAttack, $01
00086974 E110                       	smpsAlterNote       $10
00086976 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008697A E10A                       	smpsAlterNote       $0A
0008697C E701                       	dc.b	smpsNoAttack, $01
0008697E E106                       	smpsAlterNote       $06
00086980 E701                       	dc.b	smpsNoAttack, $01
00086982 E107                       	smpsAlterNote       $07
00086984 E701                       	dc.b	smpsNoAttack, $01
00086986 E10D                       	smpsAlterNote       $0D
00086988 E701                       	dc.b	smpsNoAttack, $01
0008698A E111                       	smpsAlterNote       $11
0008698C E701                       	dc.b	smpsNoAttack, $01
0008698E E10D                       	smpsAlterNote       $0D
00086990 E701                       	dc.b	smpsNoAttack, $01
00086992 E10A                       	smpsAlterNote       $0A
00086994 E701                       	dc.b	smpsNoAttack, $01
00086996 E106                       	smpsAlterNote       $06
00086998 E701                       	dc.b	smpsNoAttack, $01
0008699A E10A                       	smpsAlterNote       $0A
0008699C E701                       	dc.b	smpsNoAttack, $01
0008699E E110                       	smpsAlterNote       $10
000869A0 E701                       	dc.b	smpsNoAttack, $01
000869A2 E111                       	smpsAlterNote       $11
000869A4 E701                       	dc.b	smpsNoAttack, $01
000869A6 E10D                       	smpsAlterNote       $0D
000869A8 E701                       	dc.b	smpsNoAttack, $01
000869AA E107                       	smpsAlterNote       $07
000869AC E701                       	dc.b	smpsNoAttack, $01
000869AE E10D                       	smpsAlterNote       $0D
000869B0 C207                       	dc.b	nF5, $07
000869B2 E10C                       	smpsAlterNote       $0C
000869B4 C10D                       	dc.b	nE5, $0D
000869B6 E109                       	smpsAlterNote       $09
000869B8 E701                       	dc.b	smpsNoAttack, $01
000869BA E106                       	smpsAlterNote       $06
000869BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869C0 E10C                       	smpsAlterNote       $0C
000869C2 E701                       	dc.b	smpsNoAttack, $01
000869C4 E110                       	smpsAlterNote       $10
000869C6 E701                       	dc.b	smpsNoAttack, $01
000869C8 E10F                       	smpsAlterNote       $0F
000869CA E701                       	dc.b	smpsNoAttack, $01
000869CC E109                       	smpsAlterNote       $09
000869CE E701                       	dc.b	smpsNoAttack, $01
000869D0 E105                       	smpsAlterNote       $05
000869D2 E701                       	dc.b	smpsNoAttack, $01
000869D4 E109                       	smpsAlterNote       $09
000869D6 E701                       	dc.b	smpsNoAttack, $01
000869D8 E10C                       	smpsAlterNote       $0C
000869DA E701                       	dc.b	smpsNoAttack, $01
000869DC E110                       	smpsAlterNote       $10
000869DE E701                       	dc.b	smpsNoAttack, $01
000869E0 E10B                       	smpsAlterNote       $0B
000869E2 BF0D                       	dc.b	nD5, $0D
000869E4 E108                       	smpsAlterNote       $08
000869E6 E701                       	dc.b	smpsNoAttack, $01
000869E8 E105                       	smpsAlterNote       $05
000869EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869EE E10B                       	smpsAlterNote       $0B
000869F0 E701                       	dc.b	smpsNoAttack, $01
000869F2 E10F                       	smpsAlterNote       $0F
000869F4 E701                       	dc.b	smpsNoAttack, $01
000869F6 E10E                       	smpsAlterNote       $0E
000869F8 E701                       	dc.b	smpsNoAttack, $01
000869FA E108                       	smpsAlterNote       $08
000869FC E701                       	dc.b	smpsNoAttack, $01
000869FE E104                       	smpsAlterNote       $04
00086A00 E701                       	dc.b	smpsNoAttack, $01
00086A02 E108                       	smpsAlterNote       $08
00086A04 E701                       	dc.b	smpsNoAttack, $01
00086A06 E10E                       	smpsAlterNote       $0E
00086A08 E701                       	dc.b	smpsNoAttack, $01
00086A0A E10F                       	smpsAlterNote       $0F
00086A0C E701                       	dc.b	smpsNoAttack, $01
00086A0E E10B                       	smpsAlterNote       $0B
00086A10 E701                       	dc.b	smpsNoAttack, $01
00086A12 E105                       	smpsAlterNote       $05
00086A14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A18 E108                       	smpsAlterNote       $08
00086A1A E701                       	dc.b	smpsNoAttack, $01
00086A1C E10E                       	smpsAlterNote       $0E
00086A1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A22 E108                       	smpsAlterNote       $08
00086A24 E701                       	dc.b	smpsNoAttack, $01
00086A26 E105                       	smpsAlterNote       $05
00086A28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A2C E10B                       	smpsAlterNote       $0B
00086A2E E701                       	dc.b	smpsNoAttack, $01
00086A30 E10F                       	smpsAlterNote       $0F
00086A32 E701                       	dc.b	smpsNoAttack, $01
00086A34 E10E                       	smpsAlterNote       $0E
00086A36 E701                       	dc.b	smpsNoAttack, $01
00086A38 E108                       	smpsAlterNote       $08
00086A3A E701                       	dc.b	smpsNoAttack, $01
00086A3C E104                       	smpsAlterNote       $04
00086A3E E701                       	dc.b	smpsNoAttack, $01
00086A40 E108                       	smpsAlterNote       $08
00086A42 E701                       	dc.b	smpsNoAttack, $01
00086A44 E10B                       	smpsAlterNote       $0B
00086A46 E701                       	dc.b	smpsNoAttack, $01
00086A48 E10F                       	smpsAlterNote       $0F
00086A4A E701                       	dc.b	smpsNoAttack, $01
00086A4C E10B                       	smpsAlterNote       $0B
00086A4E E701                       	dc.b	smpsNoAttack, $01
00086A50 E105                       	smpsAlterNote       $05
00086A52 E701                       	dc.b	smpsNoAttack, $01
00086A54 E104                       	smpsAlterNote       $04
00086A56 E701                       	dc.b	smpsNoAttack, $01
00086A58 E108                       	smpsAlterNote       $08
00086A5A E701                       	dc.b	smpsNoAttack, $01
00086A5C E10E                       	smpsAlterNote       $0E
00086A5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A62 E10B                       	smpsAlterNote       $0B
00086A64 E701                       	dc.b	smpsNoAttack, $01
00086A66 E105                       	smpsAlterNote       $05
00086A68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A6C E10B                       	smpsAlterNote       $0B
00086A6E E701                       	dc.b	smpsNoAttack, $01
00086A70 E10E                       	smpsAlterNote       $0E
00086A72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A76 E108                       	smpsAlterNote       $08
00086A78 E701                       	dc.b	smpsNoAttack, $01
00086A7A E105                       	smpsAlterNote       $05
00086A7C 8001                       	dc.b	nRst, $01
00086A80 E601                       	smpsAlterVol        $01
00086A82 E10B                       	smpsAlterNote       $0B
00086A84 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00086A90 8004                       	dc.b	nRst, $04
00086A94 E6FF                       	smpsAlterVol        $FF
00086A96 E10D                       	smpsAlterNote       $0D
00086A98 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00086AA0 E10C                       	smpsAlterNote       $0C
00086AA2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00086AA7 E10D                       	smpsAlterNote       $0D
00086AA9 B60D                       	dc.b	nF4, $0D
00086AAB E10A                       	smpsAlterNote       $0A
00086AAD E701                       	dc.b	smpsNoAttack, $01
00086AAF E106                       	smpsAlterNote       $06
00086AB1 E701                       	dc.b	smpsNoAttack, $01
00086AB3 E10A                       	smpsAlterNote       $0A
00086AB5 E701                       	dc.b	smpsNoAttack, $01
00086AB7 E110                       	smpsAlterNote       $10
00086AB9 E701                       	dc.b	smpsNoAttack, $01
00086ABB E111                       	smpsAlterNote       $11
00086ABD E701                       	dc.b	smpsNoAttack, $01
00086ABF E10D                       	smpsAlterNote       $0D
00086AC1 E701                       	dc.b	smpsNoAttack, $01
00086AC3 E107                       	smpsAlterNote       $07
00086AC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AC9 E10A                       	smpsAlterNote       $0A
00086ACB E701                       	dc.b	smpsNoAttack, $01
00086ACD E110                       	smpsAlterNote       $10
00086ACF E701                       	dc.b	smpsNoAttack, $01
00086AD1 E111                       	smpsAlterNote       $11
00086AD3 8001                       	dc.b	nRst, $01
00086AD5 E10D                       	smpsAlterNote       $0D
00086AD7 B80D                       	dc.b	nG4, $0D
00086AD9 E10A                       	smpsAlterNote       $0A
00086ADB E701                       	dc.b	smpsNoAttack, $01
00086ADD E106                       	smpsAlterNote       $06
00086ADF E701                       	dc.b	smpsNoAttack, $01
00086AE1 E10A                       	smpsAlterNote       $0A
00086AE3 E701                       	dc.b	smpsNoAttack, $01
00086AE5 E110                       	smpsAlterNote       $10
00086AE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AEB E10D                       	smpsAlterNote       $0D
00086AED E701                       	dc.b	smpsNoAttack, $01
00086AEF E107                       	smpsAlterNote       $07
00086AF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AF5 E10D                       	smpsAlterNote       $0D
00086AF7 E701                       	dc.b	smpsNoAttack, $01
00086AF9 E110                       	smpsAlterNote       $10
00086AFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AFF E10A                       	smpsAlterNote       $0A
00086B01 E701                       	dc.b	smpsNoAttack, $01
00086B03 E106                       	smpsAlterNote       $06
00086B05 E701                       	dc.b	smpsNoAttack, $01
00086B07 E107                       	smpsAlterNote       $07
00086B09 E701                       	dc.b	smpsNoAttack, $01
00086B0B E10D                       	smpsAlterNote       $0D
00086B0D E701                       	dc.b	smpsNoAttack, $01
00086B0F E111                       	smpsAlterNote       $11
00086B11 E701                       	dc.b	smpsNoAttack, $01
00086B13 E10D                       	smpsAlterNote       $0D
00086B15 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086B19 E10F                       	smpsAlterNote       $0F
00086B1B BA02 8001                  	dc.b	nA4, $02, nRst, $01
00086B1F E110                       	smpsAlterNote       $10
00086B21 BB03                       	dc.b	nBb4, $03
00086B23 E10F                       	smpsAlterNote       $0F
00086B25 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00086B2B E110                       	smpsAlterNote       $10
00086B2D C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086B31 E10F                       	smpsAlterNote       $0F
00086B33 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00086B39 E110                       	smpsAlterNote       $10
00086B3B D302 8001                  	dc.b	nBb6, $02, nRst, $01
00086B3F E10F                       	smpsAlterNote       $0F
00086B41 D20D                       	dc.b	nA6, $0D
00086B43 E10C                       	smpsAlterNote       $0C
00086B45 E701                       	dc.b	smpsNoAttack, $01
00086B47 E108                       	smpsAlterNote       $08
00086B49 E701                       	dc.b	smpsNoAttack, $01
00086B4B E10C                       	smpsAlterNote       $0C
00086B4D E701                       	dc.b	smpsNoAttack, $01
00086B4F E10F                       	smpsAlterNote       $0F
00086B51 E701                       	dc.b	smpsNoAttack, $01
00086B53 E113                       	smpsAlterNote       $13
00086B55 E701                       	dc.b	smpsNoAttack, $01
00086B57 E10F                       	smpsAlterNote       $0F
00086B59 E701                       	dc.b	smpsNoAttack, $01
00086B5B E109                       	smpsAlterNote       $09
00086B5D E701                       	dc.b	smpsNoAttack, $01
00086B5F E108                       	smpsAlterNote       $08
00086B61 E701                       	dc.b	smpsNoAttack, $01
00086B63 E10C                       	smpsAlterNote       $0C
00086B65 E701                       	dc.b	smpsNoAttack, $01
00086B67 E112                       	smpsAlterNote       $12
00086B69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B6D E10F                       	smpsAlterNote       $0F
00086B6F E701                       	dc.b	smpsNoAttack, $01
00086B71 E109                       	smpsAlterNote       $09
00086B73 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00086B79 E10D                       	smpsAlterNote       $0D
00086B7B CE07                       	dc.b	nF6, $07
00086B7D E10C                       	smpsAlterNote       $0C
00086B7F CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086B83 E10D                       	smpsAlterNote       $0D
00086B85 CE03                       	dc.b	nF6, $03
00086B87 E10C                       	smpsAlterNote       $0C
00086B89 CC0D                       	dc.b	nEb6, $0D
00086B8B E109                       	smpsAlterNote       $09
00086B8D E701                       	dc.b	smpsNoAttack, $01
00086B8F E106                       	smpsAlterNote       $06
00086B91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B95 E10C                       	smpsAlterNote       $0C
00086B97 E701                       	dc.b	smpsNoAttack, $01
00086B99 E110                       	smpsAlterNote       $10
00086B9B E701                       	dc.b	smpsNoAttack, $01
00086B9D E10F                       	smpsAlterNote       $0F
00086B9F E701                       	dc.b	smpsNoAttack, $01
00086BA1 E109                       	smpsAlterNote       $09
00086BA3 E701                       	dc.b	smpsNoAttack, $01
00086BA5 E105                       	smpsAlterNote       $05
00086BA7 E701                       	dc.b	smpsNoAttack, $01
00086BA9 E109                       	smpsAlterNote       $09
00086BAB E701                       	dc.b	smpsNoAttack, $01
00086BAD E10C                       	smpsAlterNote       $0C
00086BAF E701                       	dc.b	smpsNoAttack, $01
00086BB1 E110                       	smpsAlterNote       $10
00086BB3 E701                       	dc.b	smpsNoAttack, $01
00086BB5 E10C                       	smpsAlterNote       $0C
00086BB7 E701                       	dc.b	smpsNoAttack, $01
00086BB9 E106                       	smpsAlterNote       $06
00086BBB E701                       	dc.b	smpsNoAttack, $01
00086BBD E105                       	smpsAlterNote       $05
00086BBF E701                       	dc.b	smpsNoAttack, $01
00086BC1 E109                       	smpsAlterNote       $09
00086BC3 E701                       	dc.b	smpsNoAttack, $01
00086BC5 E10F                       	smpsAlterNote       $0F
00086BC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BCB E10C                       	smpsAlterNote       $0C
00086BCD E701                       	dc.b	smpsNoAttack, $01
00086BCF E10B                       	smpsAlterNote       $0B
00086BD1 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00086BDB E10F                       	smpsAlterNote       $0F
00086BDD C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00086BE7 E10D                       	smpsAlterNote       $0D
00086BE9 C203                       	dc.b	nF5, $03
00086BEB E10C                       	smpsAlterNote       $0C
00086BED C103 8001                  	dc.b	nE5, $03, nRst, $01
00086BF1 E10D                       	smpsAlterNote       $0D
00086BF3 C20D                       	dc.b	nF5, $0D
00086BF5 E10C                       	smpsAlterNote       $0C
00086BF7 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00086BFB E10B                       	smpsAlterNote       $0B
00086BFD BF0D                       	dc.b	nD5, $0D
00086BFF E108                       	smpsAlterNote       $08
00086C01 E701                       	dc.b	smpsNoAttack, $01
00086C03 E104                       	smpsAlterNote       $04
00086C05 E701                       	dc.b	smpsNoAttack, $01
00086C07 E108                       	smpsAlterNote       $08
00086C09 E701                       	dc.b	smpsNoAttack, $01
00086C0B E10E                       	smpsAlterNote       $0E
00086C0D E701                       	dc.b	smpsNoAttack, $01
00086C0F E10F                       	smpsAlterNote       $0F
00086C11 E701                       	dc.b	smpsNoAttack, $01
00086C13 E10B                       	smpsAlterNote       $0B
00086C15 E701                       	dc.b	smpsNoAttack, $01
00086C17 E105                       	smpsAlterNote       $05
00086C19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C1D E108                       	smpsAlterNote       $08
00086C1F E701                       	dc.b	smpsNoAttack, $01
00086C21 E10E                       	smpsAlterNote       $0E
00086C23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C27 E108                       	smpsAlterNote       $08
00086C29 E701                       	dc.b	smpsNoAttack, $01
00086C2B E105                       	smpsAlterNote       $05
00086C2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C31 E10B                       	smpsAlterNote       $0B
00086C33 E701                       	dc.b	smpsNoAttack, $01
00086C35 E10F                       	smpsAlterNote       $0F
00086C37 E701                       	dc.b	smpsNoAttack, $01
00086C39 E10E                       	smpsAlterNote       $0E
00086C3B E701                       	dc.b	smpsNoAttack, $01
00086C3D E108                       	smpsAlterNote       $08
00086C3F E701                       	dc.b	smpsNoAttack, $01
00086C41 E104                       	smpsAlterNote       $04
00086C43 E701                       	dc.b	smpsNoAttack, $01
00086C45 E108                       	smpsAlterNote       $08
00086C47 E701                       	dc.b	smpsNoAttack, $01
00086C49 E10B                       	smpsAlterNote       $0B
00086C4B E701                       	dc.b	smpsNoAttack, $01
00086C4D E10F                       	smpsAlterNote       $0F
00086C4F E701                       	dc.b	smpsNoAttack, $01
00086C51 E10B                       	smpsAlterNote       $0B
00086C53 E701                       	dc.b	smpsNoAttack, $01
00086C55 E105                       	smpsAlterNote       $05
00086C57 E701                       	dc.b	smpsNoAttack, $01
00086C59 E104                       	smpsAlterNote       $04
00086C5B E701                       	dc.b	smpsNoAttack, $01
00086C5D E108                       	smpsAlterNote       $08
00086C5F E701                       	dc.b	smpsNoAttack, $01
00086C61 E10E                       	smpsAlterNote       $0E
00086C63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C67 E10B                       	smpsAlterNote       $0B
00086C69 E701                       	dc.b	smpsNoAttack, $01
00086C6B E105                       	smpsAlterNote       $05
00086C6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C71 E10B                       	smpsAlterNote       $0B
00086C73 E701                       	dc.b	smpsNoAttack, $01
00086C75 E10E                       	smpsAlterNote       $0E
00086C77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C7B E108                       	smpsAlterNote       $08
00086C7D E701                       	dc.b	smpsNoAttack, $01
00086C7F E104                       	smpsAlterNote       $04
00086C81 E701                       	dc.b	smpsNoAttack, $01
00086C83 E105                       	smpsAlterNote       $05
00086C85 E701                       	dc.b	smpsNoAttack, $01
00086C87 E10B                       	smpsAlterNote       $0B
00086C89 E701                       	dc.b	smpsNoAttack, $01
00086C8B E10F                       	smpsAlterNote       $0F
00086C8D E701                       	dc.b	smpsNoAttack, $01
00086C8F E10B                       	smpsAlterNote       $0B
00086C91 E701                       	dc.b	smpsNoAttack, $01
00086C93 E108                       	smpsAlterNote       $08
00086C95 E701                       	dc.b	smpsNoAttack, $01
00086C97 E104                       	smpsAlterNote       $04
00086C99 E701                       	dc.b	smpsNoAttack, $01
00086C9B E108                       	smpsAlterNote       $08
00086C9D E701                       	dc.b	smpsNoAttack, $01
00086C9F E10E                       	smpsAlterNote       $0E
00086CA1 E701                       	dc.b	smpsNoAttack, $01
00086CA3 E10F                       	smpsAlterNote       $0F
00086CA5 E701                       	dc.b	smpsNoAttack, $01
00086CA7 E10B                       	smpsAlterNote       $0B
00086CA9 E701                       	dc.b	smpsNoAttack, $01
00086CAB E105                       	smpsAlterNote       $05
00086CAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CB1 E108                       	smpsAlterNote       $08
00086CB3 E701                       	dc.b	smpsNoAttack, $01
00086CB5 E10E                       	smpsAlterNote       $0E
00086CB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CBB E108                       	smpsAlterNote       $08
00086CBD E701                       	dc.b	smpsNoAttack, $01
00086CBF E105                       	smpsAlterNote       $05
00086CC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CC5 E10B                       	smpsAlterNote       $0B
00086CC7 E701                       	dc.b	smpsNoAttack, $01
00086CC9 E10F                       	smpsAlterNote       $0F
00086CCB E701                       	dc.b	smpsNoAttack, $01
00086CCD E10E                       	smpsAlterNote       $0E
00086CCF E701                       	dc.b	smpsNoAttack, $01
00086CD1 E108                       	smpsAlterNote       $08
00086CD3 E701                       	dc.b	smpsNoAttack, $01
00086CD5 E104                       	smpsAlterNote       $04
00086CD7 E701                       	dc.b	smpsNoAttack, $01
00086CD9 E108                       	smpsAlterNote       $08
00086CDB E701                       	dc.b	smpsNoAttack, $01
00086CDD E10B                       	smpsAlterNote       $0B
00086CDF E701                       	dc.b	smpsNoAttack, $01
00086CE1 E10F                       	smpsAlterNote       $0F
00086CE3 E701                       	dc.b	smpsNoAttack, $01
00086CE5 E10B                       	smpsAlterNote       $0B
00086CE7 E701                       	dc.b	smpsNoAttack, $01
00086CE9 E105                       	smpsAlterNote       $05
00086CEB E701                       	dc.b	smpsNoAttack, $01
00086CED E104                       	smpsAlterNote       $04
00086CEF E701                       	dc.b	smpsNoAttack, $01
00086CF1 E105                       	smpsAlterNote       $05
00086CF3 8001                       	dc.b	nRst, $01
00086CF5 E10D                       	smpsAlterNote       $0D
00086CF7 C20D                       	dc.b	nF5, $0D
00086CF9 E107                       	smpsAlterNote       $07
00086CFB E701                       	dc.b	smpsNoAttack, $01
00086CFD E106                       	smpsAlterNote       $06
00086CFF E701                       	dc.b	smpsNoAttack, $01
00086D01 E10A                       	smpsAlterNote       $0A
00086D03 E701                       	dc.b	smpsNoAttack, $01
00086D05 E110                       	smpsAlterNote       $10
00086D07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D0B E10D                       	smpsAlterNote       $0D
00086D0D E701                       	dc.b	smpsNoAttack, $01
00086D0F E107                       	smpsAlterNote       $07
00086D11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D15 E10D                       	smpsAlterNote       $0D
00086D17 E701                       	dc.b	smpsNoAttack, $01
00086D19 E110                       	smpsAlterNote       $10
00086D1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D1F E10A                       	smpsAlterNote       $0A
00086D21 E701                       	dc.b	smpsNoAttack, $01
00086D23 E106                       	smpsAlterNote       $06
00086D25 E701                       	dc.b	smpsNoAttack, $01
00086D27 E107                       	smpsAlterNote       $07
00086D29 E701                       	dc.b	smpsNoAttack, $01
00086D2B E10D                       	smpsAlterNote       $0D
00086D2D E701                       	dc.b	smpsNoAttack, $01
00086D2F E111                       	smpsAlterNote       $11
00086D31 E701                       	dc.b	smpsNoAttack, $01
00086D33 E10D                       	smpsAlterNote       $0D
00086D35 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086D39 E10C                       	smpsAlterNote       $0C
00086D3B C10D                       	dc.b	nE5, $0D
00086D3D E10D                       	smpsAlterNote       $0D
00086D3F C20A                       	dc.b	nF5, $0A
00086D41 E10C                       	smpsAlterNote       $0C
00086D43 C10E                       	dc.b	nE5, $0E
00086D45 E106                       	smpsAlterNote       $06
00086D47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D4B E10C                       	smpsAlterNote       $0C
00086D4D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086D51 E10B                       	smpsAlterNote       $0B
00086D53 BF0D                       	dc.b	nD5, $0D
00086D55 E10C                       	smpsAlterNote       $0C
00086D57 C107                       	dc.b	nE5, $07
00086D59 E10D                       	smpsAlterNote       $0D
00086D5B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00086D65 E110                       	smpsAlterNote       $10
00086D67 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00086D6D E10F                       	smpsAlterNote       $0F
00086D6F C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00086D77 E10D                       	smpsAlterNote       $0D
00086D79 D003                       	dc.b	nG6, $03
00086D7D E0C0                       	smpsPan             panCenter, $00
00086D7F E6FF                       	smpsAlterVol        $FF
00086D81 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00086D8D 8001                       	dc.b	nRst, $01
00086D8F E10C                       	smpsAlterNote       $0C
00086D91 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00086D9B E604                       	smpsAlterVol        $04
00086D9D E10B                       	smpsAlterNote       $0B
00086D9F B306 8001                  	dc.b	nD4, $06, nRst, $01
00086DA3 E10F                       	smpsAlterNote       $0F
00086DA5 AE03                       	dc.b	nA3, $03
00086DA7 E10D                       	smpsAlterNote       $0D
00086DA9 B603 8001                  	dc.b	nF4, $03, nRst, $01
00086DAD E10C                       	smpsAlterNote       $0C
00086DAF B506 8001                  	dc.b	nE4, $06, nRst, $01
00086DB3 E10B                       	smpsAlterNote       $0B
00086DB5 B302 8001                  	dc.b	nD4, $02, nRst, $01
00086DB9 E10A                       	smpsAlterNote       $0A
00086DBB B103                       	dc.b	nC4, $03
00086DBD E110                       	smpsAlterNote       $10
00086DBF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00086DC3 E10F                       	smpsAlterNote       $0F
00086DC5 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00086DC9 E080                       	smpsPan             panLeft, $00
00086DCB 01                         	dc.b	$01
00086DCE E6FB                       	smpsAlterVol        $FB
00086DD0 E1E4                       	smpsAlterNote       $E4
00086DD2 C501                       	dc.b	nAb5, $01
00086DD4 E1F4                       	smpsAlterNote       $F4
00086DD6 E701                       	dc.b	smpsNoAttack, $01
00086DD8 E104                       	smpsAlterNote       $04
00086DDA E701                       	dc.b	smpsNoAttack, $01
00086DDC E114                       	smpsAlterNote       $14
00086DDE E701                       	dc.b	smpsNoAttack, $01
00086DE0 E11C                       	smpsAlterNote       $1C
00086DE2 E701                       	dc.b	smpsNoAttack, $01
00086DE4 E1EF                       	smpsAlterNote       $EF
00086DE6 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00086DE9 E1FF                       	smpsAlterNote       $FF
00086DEB E701                       	dc.b	smpsNoAttack, $01
00086DED E10F                       	smpsAlterNote       $0F
00086DEF C606                       	dc.b	nA5, $06
00086DF1 E109                       	smpsAlterNote       $09
00086DF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DF7 E10F                       	smpsAlterNote       $0F
00086DF9 E701                       	dc.b	smpsNoAttack, $01
00086DFB E112                       	smpsAlterNote       $12
00086DFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E01 E10C                       	smpsAlterNote       $0C
00086E03 E701                       	dc.b	smpsNoAttack, $01
00086E05 E108                       	smpsAlterNote       $08
00086E07 E701                       	dc.b	smpsNoAttack, $01
00086E09 E109                       	smpsAlterNote       $09
00086E0B E701                       	dc.b	smpsNoAttack, $01
00086E0D E10F                       	smpsAlterNote       $0F
00086E0F E701                       	dc.b	smpsNoAttack, $01
00086E11 E113                       	smpsAlterNote       $13
00086E13 E701                       	dc.b	smpsNoAttack, $01
00086E15 E10F                       	smpsAlterNote       $0F
00086E17 E701                       	dc.b	smpsNoAttack, $01
00086E19 E10C                       	smpsAlterNote       $0C
00086E1B E701                       	dc.b	smpsNoAttack, $01
00086E1D E108                       	smpsAlterNote       $08
00086E1F E701                       	dc.b	smpsNoAttack, $01
00086E21 E10C                       	smpsAlterNote       $0C
00086E23 E701                       	dc.b	smpsNoAttack, $01
00086E25 E112                       	smpsAlterNote       $12
00086E27 E701                       	dc.b	smpsNoAttack, $01
00086E29 E113                       	smpsAlterNote       $13
00086E2B E701                       	dc.b	smpsNoAttack, $01
00086E2D E10F                       	smpsAlterNote       $0F
00086E2F E701                       	dc.b	smpsNoAttack, $01
00086E31 E109                       	smpsAlterNote       $09
00086E33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E37 E10C                       	smpsAlterNote       $0C
00086E39 E701                       	dc.b	smpsNoAttack, $01
00086E3B E112                       	smpsAlterNote       $12
00086E3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E41 E10C                       	smpsAlterNote       $0C
00086E43 E701                       	dc.b	smpsNoAttack, $01
00086E45 E109                       	smpsAlterNote       $09
00086E47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E4B E10F                       	smpsAlterNote       $0F
00086E4D E701                       	dc.b	smpsNoAttack, $01
00086E4F E113                       	smpsAlterNote       $13
00086E51 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086E55 E10D                       	smpsAlterNote       $0D
00086E57 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00086E5D E10C                       	smpsAlterNote       $0C
00086E5F C102 8001                  	dc.b	nE5, $02, nRst, $01
00086E63 E10D                       	smpsAlterNote       $0D
00086E65 C201 8001                  	dc.b	nF5, $01, nRst, $01
00086E69 E10C                       	smpsAlterNote       $0C
00086E6B C102                       	dc.b	nE5, $02
00086E6D E10B                       	smpsAlterNote       $0B
00086E6F BF02 8001                  	dc.b	nD5, $02, nRst, $01
00086E73 E10C                       	smpsAlterNote       $0C
00086E75 C101 8001                  	dc.b	nE5, $01, nRst, $01
00086E79 E10B                       	smpsAlterNote       $0B
00086E7B BF02                       	dc.b	nD5, $02
00086E7D E10A                       	smpsAlterNote       $0A
00086E7F BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00086E89 E110                       	smpsAlterNote       $10
00086E8B BB02                       	dc.b	nBb4, $02
00086E8D E10A                       	smpsAlterNote       $0A
00086E8F BD02 8001                  	dc.b	nC5, $02, nRst, $01
00086E93 E110                       	smpsAlterNote       $10
00086E95 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00086E99 E10F                       	smpsAlterNote       $0F
00086E9B BA01 8001                  	dc.b	nA4, $01, nRst, $01
00086E9F E110                       	smpsAlterNote       $10
00086EA1 BB02                       	dc.b	nBb4, $02
00086EA3 E10F                       	smpsAlterNote       $0F
00086EA5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00086EAF E10C                       	smpsAlterNote       $0C
00086EB1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
00086EB9 E10B                       	smpsAlterNote       $0B
00086EBB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00086EBF E10F                       	smpsAlterNote       $0F
00086EC1 BA02                       	dc.b	nA4, $02
00086EC5 E0C0                       	smpsPan             panCenter, $00
00086EC7 E601                       	smpsAlterVol        $01
00086EC9 E109                       	smpsAlterNote       $09
00086ECB AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00086ED7 E108                       	smpsAlterNote       $08
00086ED9 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00086EDF E107                       	smpsAlterNote       $07
00086EE1 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
00086EE7 E109                       	smpsAlterNote       $09
00086EE9 B603 8001                  	dc.b	nF4, $03, nRst, $01
00086EED E108                       	smpsAlterNote       $08
00086EEF B506 8001                  	dc.b	nE4, $06, nRst, $01
00086EF3 E107                       	smpsAlterNote       $07
00086EF5 B302 8001                  	dc.b	nD4, $02, nRst, $01
00086EF9 E106                       	smpsAlterNote       $06
00086EFB B103                       	dc.b	nC4, $03
00086EFD E10C                       	smpsAlterNote       $0C
00086EFF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00086F05 E080                       	smpsPan             panLeft, $00
00086F07 07                         	dc.b	$07
00086F08 E6FE                       	smpsAlterVol        $FE
00086F0A E10B                       	smpsAlterNote       $0B
00086F0C B20D                       	dc.b	nCs4, $0D
00086F0E E105                       	smpsAlterNote       $05
00086F10 E701                       	dc.b	smpsNoAttack, $01
00086F12 E104                       	smpsAlterNote       $04
00086F14 E701                       	dc.b	smpsNoAttack, $01
00086F16 E108                       	smpsAlterNote       $08
00086F18 E701                       	dc.b	smpsNoAttack, $01
00086F1A E10E                       	smpsAlterNote       $0E
00086F1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F20 E10B                       	smpsAlterNote       $0B
00086F22 E701                       	dc.b	smpsNoAttack, $01
00086F24 E105                       	smpsAlterNote       $05
00086F26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F2A E10B                       	smpsAlterNote       $0B
00086F2C E701                       	dc.b	smpsNoAttack, $01
00086F2E E10E                       	smpsAlterNote       $0E
00086F30 E701                       	dc.b	smpsNoAttack, $01
00086F32 E10F                       	smpsAlterNote       $0F
00086F34 8001                       	dc.b	nRst, $01
00086F36 E10B                       	smpsAlterNote       $0B
00086F38 B30D                       	dc.b	nD4, $0D
00086F3A E105                       	smpsAlterNote       $05
00086F3C E701                       	dc.b	smpsNoAttack, $01
00086F3E E104                       	smpsAlterNote       $04
00086F40 E701                       	dc.b	smpsNoAttack, $01
00086F42 E108                       	smpsAlterNote       $08
00086F44 E701                       	dc.b	smpsNoAttack, $01
00086F46 E10E                       	smpsAlterNote       $0E
00086F48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F4C E10B                       	smpsAlterNote       $0B
00086F4E E701                       	dc.b	smpsNoAttack, $01
00086F50 E105                       	smpsAlterNote       $05
00086F52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F56 E10B                       	smpsAlterNote       $0B
00086F58 E701                       	dc.b	smpsNoAttack, $01
00086F5A E10E                       	smpsAlterNote       $0E
00086F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F60 E108                       	smpsAlterNote       $08
00086F62 E701                       	dc.b	smpsNoAttack, $01
00086F64 E104                       	smpsAlterNote       $04
00086F66 E701                       	dc.b	smpsNoAttack, $01
00086F68 E105                       	smpsAlterNote       $05
00086F6A E701                       	dc.b	smpsNoAttack, $01
00086F6C E10B                       	smpsAlterNote       $0B
00086F6E E701                       	dc.b	smpsNoAttack, $01
00086F70 E10F                       	smpsAlterNote       $0F
00086F72 E701                       	dc.b	smpsNoAttack, $01
00086F74 E10B                       	smpsAlterNote       $0B
00086F76 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086F7A E10C                       	smpsAlterNote       $0C
00086F7C B50D                       	dc.b	nE4, $0D
00086F7E E106                       	smpsAlterNote       $06
00086F80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F84 E10C                       	smpsAlterNote       $0C
00086F86 E701                       	dc.b	smpsNoAttack, $01
00086F88 E10F                       	smpsAlterNote       $0F
00086F8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F8E E109                       	smpsAlterNote       $09
00086F90 E701                       	dc.b	smpsNoAttack, $01
00086F92 E105                       	smpsAlterNote       $05
00086F94 E701                       	dc.b	smpsNoAttack, $01
00086F96 E106                       	smpsAlterNote       $06
00086F98 E701                       	dc.b	smpsNoAttack, $01
00086F9A E10C                       	smpsAlterNote       $0C
00086F9C E701                       	dc.b	smpsNoAttack, $01
00086F9E E110                       	smpsAlterNote       $10
00086FA0 E701                       	dc.b	smpsNoAttack, $01
00086FA2 E10B                       	smpsAlterNote       $0B
00086FA4 B30E                       	dc.b	nD4, $0E
00086FA6 E105                       	smpsAlterNote       $05
00086FA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FAC E10B                       	smpsAlterNote       $0B
00086FAE E701                       	dc.b	smpsNoAttack, $01
00086FB0 E10E                       	smpsAlterNote       $0E
00086FB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FB6 E108                       	smpsAlterNote       $08
00086FB8 E701                       	dc.b	smpsNoAttack, $01
00086FBA E104                       	smpsAlterNote       $04
00086FBC E701                       	dc.b	smpsNoAttack, $01
00086FBE E105                       	smpsAlterNote       $05
00086FC0 E701                       	dc.b	smpsNoAttack, $01
00086FC2 E10B                       	smpsAlterNote       $0B
00086FC4 E701                       	dc.b	smpsNoAttack, $01
00086FC6 E10F                       	smpsAlterNote       $0F
00086FC8 E701                       	dc.b	smpsNoAttack, $01
00086FCA E10B                       	smpsAlterNote       $0B
00086FCC E701                       	dc.b	smpsNoAttack, $01
00086FCE E108                       	smpsAlterNote       $08
00086FD0 E701                       	dc.b	smpsNoAttack, $01
00086FD2 E104                       	smpsAlterNote       $04
00086FD4 E701                       	dc.b	smpsNoAttack, $01
00086FD6 E108                       	smpsAlterNote       $08
00086FD8 E701                       	dc.b	smpsNoAttack, $01
00086FDA E10E                       	smpsAlterNote       $0E
00086FDC E701                       	dc.b	smpsNoAttack, $01
00086FDE E10F                       	smpsAlterNote       $0F
00086FE0 E701                       	dc.b	smpsNoAttack, $01
00086FE2 E10B                       	smpsAlterNote       $0B
00086FE4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00086FE8 E108                       	smpsAlterNote       $08
00086FEA E701                       	dc.b	smpsNoAttack, $01
00086FEC E105                       	smpsAlterNote       $05
00086FEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FF2 E10B                       	smpsAlterNote       $0B
00086FF4 E701                       	dc.b	smpsNoAttack, $01
00086FF6 E10F                       	smpsAlterNote       $0F
00086FF8 E701                       	dc.b	smpsNoAttack, $01
00086FFA E10E                       	smpsAlterNote       $0E
00086FFC E701                       	dc.b	smpsNoAttack, $01
00086FFE E108                       	smpsAlterNote       $08
00087000 E701                       	dc.b	smpsNoAttack, $01
00087002 E104                       	smpsAlterNote       $04
00087004 E701                       	dc.b	smpsNoAttack, $01
00087006 E108                       	smpsAlterNote       $08
00087008 E701                       	dc.b	smpsNoAttack, $01
0008700A E10B                       	smpsAlterNote       $0B
0008700C E701                       	dc.b	smpsNoAttack, $01
0008700E E10F                       	smpsAlterNote       $0F
00087010 E701                       	dc.b	smpsNoAttack, $01
00087012 E10B                       	smpsAlterNote       $0B
00087014 B30D                       	dc.b	nD4, $0D
00087016 E108                       	smpsAlterNote       $08
00087018 E701                       	dc.b	smpsNoAttack, $01
0008701A E105                       	smpsAlterNote       $05
0008701C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087020 E10B                       	smpsAlterNote       $0B
00087022 E701                       	dc.b	smpsNoAttack, $01
00087024 E10F                       	smpsAlterNote       $0F
00087026 E701                       	dc.b	smpsNoAttack, $01
00087028 E10E                       	smpsAlterNote       $0E
0008702A E701                       	dc.b	smpsNoAttack, $01
0008702C E108                       	smpsAlterNote       $08
0008702E E701                       	dc.b	smpsNoAttack, $01
00087030 E104                       	smpsAlterNote       $04
00087032 E701                       	dc.b	smpsNoAttack, $01
00087034 E108                       	smpsAlterNote       $08
00087036 E701                       	dc.b	smpsNoAttack, $01
00087038 E10B                       	smpsAlterNote       $0B
0008703A E701                       	dc.b	smpsNoAttack, $01
0008703C E10F                       	smpsAlterNote       $0F
0008703E E701                       	dc.b	smpsNoAttack, $01
00087040 E10B                       	smpsAlterNote       $0B
00087042 E701                       	dc.b	smpsNoAttack, $01
00087044 E105                       	smpsAlterNote       $05
00087046 E701                       	dc.b	smpsNoAttack, $01
00087048 E104                       	smpsAlterNote       $04
0008704A E701                       	dc.b	smpsNoAttack, $01
0008704C E108                       	smpsAlterNote       $08
0008704E E701                       	dc.b	smpsNoAttack, $01
00087050 E10E                       	smpsAlterNote       $0E
00087052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087056 E10B                       	smpsAlterNote       $0B
00087058 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008705C E108                       	smpsAlterNote       $08
0008705E E701                       	dc.b	smpsNoAttack, $01
00087060 E104                       	smpsAlterNote       $04
00087062 E701                       	dc.b	smpsNoAttack, $01
00087064 E108                       	smpsAlterNote       $08
00087066 E701                       	dc.b	smpsNoAttack, $01
00087068 E10B                       	smpsAlterNote       $0B
0008706A E701                       	dc.b	smpsNoAttack, $01
0008706E E0C0                       	smpsPan             panCenter, $00
00087070 E601                       	smpsAlterVol        $01
00087072 E108                       	smpsAlterNote       $08
00087074 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00087080 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00087088 E080                       	smpsPan             panLeft, $00
0008708A 07                         	dc.b	$07
0008708B E6FF                       	smpsAlterVol        $FF
0008708D E10D                       	smpsAlterNote       $0D
0008708F B60D                       	dc.b	nF4, $0D
00087091 E10A                       	smpsAlterNote       $0A
00087093 E701                       	dc.b	smpsNoAttack, $01
00087095 E106                       	smpsAlterNote       $06
00087097 E701                       	dc.b	smpsNoAttack, $01
00087099 E10A                       	smpsAlterNote       $0A
0008709B E701                       	dc.b	smpsNoAttack, $01
0008709D E110                       	smpsAlterNote       $10
0008709F E701                       	dc.b	smpsNoAttack, $01
000870A1 E111                       	smpsAlterNote       $11
000870A3 E701                       	dc.b	smpsNoAttack, $01
000870A5 E10D                       	smpsAlterNote       $0D
000870A7 E701                       	dc.b	smpsNoAttack, $01
000870A9 E107                       	smpsAlterNote       $07
000870AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870AF E10A                       	smpsAlterNote       $0A
000870B1 E701                       	dc.b	smpsNoAttack, $01
000870B3 E110                       	smpsAlterNote       $10
000870B5 E701                       	dc.b	smpsNoAttack, $01
000870B7 E111                       	smpsAlterNote       $11
000870B9 8001                       	dc.b	nRst, $01
000870BB E10D                       	smpsAlterNote       $0D
000870BD B80D                       	dc.b	nG4, $0D
000870BF E10A                       	smpsAlterNote       $0A
000870C1 E701                       	dc.b	smpsNoAttack, $01
000870C3 E106                       	smpsAlterNote       $06
000870C5 E701                       	dc.b	smpsNoAttack, $01
000870C7 E10A                       	smpsAlterNote       $0A
000870C9 E701                       	dc.b	smpsNoAttack, $01
000870CB E110                       	smpsAlterNote       $10
000870CD E701                       	dc.b	smpsNoAttack, $01
000870CF E111                       	smpsAlterNote       $11
000870D1 E701                       	dc.b	smpsNoAttack, $01
000870D3 E10D                       	smpsAlterNote       $0D
000870D5 E701                       	dc.b	smpsNoAttack, $01
000870D7 E107                       	smpsAlterNote       $07
000870D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870DD E10D                       	smpsAlterNote       $0D
000870DF E701                       	dc.b	smpsNoAttack, $01
000870E1 E110                       	smpsAlterNote       $10
000870E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870E7 E10A                       	smpsAlterNote       $0A
000870E9 E701                       	dc.b	smpsNoAttack, $01
000870EB E106                       	smpsAlterNote       $06
000870ED E701                       	dc.b	smpsNoAttack, $01
000870EF E107                       	smpsAlterNote       $07
000870F1 E701                       	dc.b	smpsNoAttack, $01
000870F3 E10D                       	smpsAlterNote       $0D
000870F5 E701                       	dc.b	smpsNoAttack, $01
000870F7 E111                       	smpsAlterNote       $11
000870F9 E701                       	dc.b	smpsNoAttack, $01
000870FB E10D                       	smpsAlterNote       $0D
000870FD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087101 E10F                       	smpsAlterNote       $0F
00087103 BA0D                       	dc.b	nA4, $0D
00087105 E109                       	smpsAlterNote       $09
00087107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008710B E10C                       	smpsAlterNote       $0C
0008710D E701                       	dc.b	smpsNoAttack, $01
0008710F E112                       	smpsAlterNote       $12
00087111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087115 E10C                       	smpsAlterNote       $0C
00087117 E701                       	dc.b	smpsNoAttack, $01
00087119 E109                       	smpsAlterNote       $09
0008711B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008711F E10F                       	smpsAlterNote       $0F
00087121 E701                       	dc.b	smpsNoAttack, $01
00087123 E113                       	smpsAlterNote       $13
00087125 E701                       	dc.b	smpsNoAttack, $01
00087127 E112                       	smpsAlterNote       $12
00087129 E701                       	dc.b	smpsNoAttack, $01
0008712B E10C                       	smpsAlterNote       $0C
0008712D E701                       	dc.b	smpsNoAttack, $01
0008712F E108                       	smpsAlterNote       $08
00087131 E701                       	dc.b	smpsNoAttack, $01
00087133 E10C                       	smpsAlterNote       $0C
00087135 E701                       	dc.b	smpsNoAttack, $01
00087137 E10F                       	smpsAlterNote       $0F
00087139 E701                       	dc.b	smpsNoAttack, $01
0008713B E113                       	smpsAlterNote       $13
0008713D E701                       	dc.b	smpsNoAttack, $01
0008713F E10F                       	smpsAlterNote       $0F
00087141 E701                       	dc.b	smpsNoAttack, $01
00087143 E109                       	smpsAlterNote       $09
00087145 E701                       	dc.b	smpsNoAttack, $01
00087147 E108                       	smpsAlterNote       $08
00087149 E701                       	dc.b	smpsNoAttack, $01
0008714B E10C                       	smpsAlterNote       $0C
0008714D E701                       	dc.b	smpsNoAttack, $01
0008714F E112                       	smpsAlterNote       $12
00087151 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087155 E10F                       	smpsAlterNote       $0F
00087157 E701                       	dc.b	smpsNoAttack, $01
00087159 E109                       	smpsAlterNote       $09
0008715B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008715F E10F                       	smpsAlterNote       $0F
00087161 E701                       	dc.b	smpsNoAttack, $01
00087163 E112                       	smpsAlterNote       $12
00087165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087169 E10C                       	smpsAlterNote       $0C
0008716B E701                       	dc.b	smpsNoAttack, $01
0008716D E108                       	smpsAlterNote       $08
0008716F E701                       	dc.b	smpsNoAttack, $01
00087171 E109                       	smpsAlterNote       $09
00087173 E701                       	dc.b	smpsNoAttack, $01
00087175 E10C                       	smpsAlterNote       $0C
00087177 B50A                       	dc.b	nE4, $0A
00087179 E10D                       	smpsAlterNote       $0D
0008717B B60E                       	dc.b	nF4, $0E
0008717D E107                       	smpsAlterNote       $07
0008717F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087183 E10D                       	smpsAlterNote       $0D
00087185 E701                       	dc.b	smpsNoAttack, $01
00087187 E110                       	smpsAlterNote       $10
00087189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008718D E10A                       	smpsAlterNote       $0A
0008718F E701                       	dc.b	smpsNoAttack, $01
00087191 E106                       	smpsAlterNote       $06
00087193 E701                       	dc.b	smpsNoAttack, $01
00087195 E107                       	smpsAlterNote       $07
00087197 E701                       	dc.b	smpsNoAttack, $01
00087199 E10D                       	smpsAlterNote       $0D
0008719B E701                       	dc.b	smpsNoAttack, $01
0008719D E111                       	smpsAlterNote       $11
0008719F E701                       	dc.b	smpsNoAttack, $01
000871A1 E10D                       	smpsAlterNote       $0D
000871A3 B80D                       	dc.b	nG4, $0D
000871A5 E10A                       	smpsAlterNote       $0A
000871A7 E701                       	dc.b	smpsNoAttack, $01
000871A9 E107                       	smpsAlterNote       $07
000871AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871AF E10D                       	smpsAlterNote       $0D
000871B1 E701                       	dc.b	smpsNoAttack, $01
000871B3 E111                       	smpsAlterNote       $11
000871B5 E701                       	dc.b	smpsNoAttack, $01
000871B7 E110                       	smpsAlterNote       $10
000871B9 E701                       	dc.b	smpsNoAttack, $01
000871BB E10A                       	smpsAlterNote       $0A
000871BD E701                       	dc.b	smpsNoAttack, $01
000871BF E106                       	smpsAlterNote       $06
000871C1 E701                       	dc.b	smpsNoAttack, $01
000871C3 E10A                       	smpsAlterNote       $0A
000871C5 E701                       	dc.b	smpsNoAttack, $01
000871C7 E10D                       	smpsAlterNote       $0D
000871C9 E701                       	dc.b	smpsNoAttack, $01
000871CB E111                       	smpsAlterNote       $11
000871CD E701                       	dc.b	smpsNoAttack, $01
000871CF E10D                       	smpsAlterNote       $0D
000871D1 E701                       	dc.b	smpsNoAttack, $01
000871D3 E107                       	smpsAlterNote       $07
000871D5 E701                       	dc.b	smpsNoAttack, $01
000871D7 E106                       	smpsAlterNote       $06
000871D9 E701                       	dc.b	smpsNoAttack, $01
000871DB E10A                       	smpsAlterNote       $0A
000871DD E701                       	dc.b	smpsNoAttack, $01
000871DF E110                       	smpsAlterNote       $10
000871E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871E5 E10D                       	smpsAlterNote       $0D
000871E7 E701                       	dc.b	smpsNoAttack, $01
000871E9 E10F                       	smpsAlterNote       $0F
000871EB BA0D                       	dc.b	nA4, $0D
000871ED E10C                       	smpsAlterNote       $0C
000871EF E701                       	dc.b	smpsNoAttack, $01
000871F1 E108                       	smpsAlterNote       $08
000871F3 E701                       	dc.b	smpsNoAttack, $01
000871F5 E109                       	smpsAlterNote       $09
000871F7 E701                       	dc.b	smpsNoAttack, $01
000871F9 E10F                       	smpsAlterNote       $0F
000871FB E701                       	dc.b	smpsNoAttack, $01
000871FD E113                       	smpsAlterNote       $13
000871FF E701                       	dc.b	smpsNoAttack, $01
00087201 E10F                       	smpsAlterNote       $0F
00087203 E701                       	dc.b	smpsNoAttack, $01
00087205 E10C                       	smpsAlterNote       $0C
00087207 E701                       	dc.b	smpsNoAttack, $01
00087209 E108                       	smpsAlterNote       $08
0008720B E701                       	dc.b	smpsNoAttack, $01
0008720D E10C                       	smpsAlterNote       $0C
0008720F E701                       	dc.b	smpsNoAttack, $01
00087211 E112                       	smpsAlterNote       $12
00087213 E701                       	dc.b	smpsNoAttack, $01
00087215 E113                       	smpsAlterNote       $13
00087217 E701                       	dc.b	smpsNoAttack, $01
00087219 E10F                       	smpsAlterNote       $0F
0008721B E701                       	dc.b	smpsNoAttack, $01
0008721D E109                       	smpsAlterNote       $09
0008721F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087223 E10C                       	smpsAlterNote       $0C
00087225 E701                       	dc.b	smpsNoAttack, $01
00087227 E112                       	smpsAlterNote       $12
00087229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008722D E10C                       	smpsAlterNote       $0C
0008722F E701                       	dc.b	smpsNoAttack, $01
00087231 E109                       	smpsAlterNote       $09
00087233 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087237 E10F                       	smpsAlterNote       $0F
00087239 E701                       	dc.b	smpsNoAttack, $01
0008723B E113                       	smpsAlterNote       $13
0008723D E701                       	dc.b	smpsNoAttack, $01
0008723F E112                       	smpsAlterNote       $12
00087241 E701                       	dc.b	smpsNoAttack, $01
00087243 E10C                       	smpsAlterNote       $0C
00087245 E701                       	dc.b	smpsNoAttack, $01
00087247 E109                       	smpsAlterNote       $09
00087249 8001                       	dc.b	nRst, $01
0008724B E10D                       	smpsAlterNote       $0D
0008724D B60A                       	dc.b	nF4, $0A
0008724F E10C                       	smpsAlterNote       $0C
00087251 B506 8001                  	dc.b	nE4, $06, nRst, $01
00087255 E10B                       	smpsAlterNote       $0B
00087257 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008725B E10C                       	smpsAlterNote       $0C
0008725D B503                       	dc.b	nE4, $03
0008725F E10D                       	smpsAlterNote       $0D
00087261 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008726B E10C                       	smpsAlterNote       $0C
0008726D E701                       	dc.b	smpsNoAttack, $01
0008726F E108                       	smpsAlterNote       $08
00087271 E701                       	dc.b	smpsNoAttack, $01
00087273 E10C                       	smpsAlterNote       $0C
00087275 E701                       	dc.b	smpsNoAttack, $01
00087277 E112                       	smpsAlterNote       $12
00087279 E701                       	dc.b	smpsNoAttack, $01
0008727B E113                       	smpsAlterNote       $13
0008727D E701                       	dc.b	smpsNoAttack, $01
0008727F E10F                       	smpsAlterNote       $0F
00087281 E701                       	dc.b	smpsNoAttack, $01
00087283 E109                       	smpsAlterNote       $09
00087285 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087289 E10C                       	smpsAlterNote       $0C
0008728B E701                       	dc.b	smpsNoAttack, $01
0008728D E112                       	smpsAlterNote       $12
0008728F E701                       	dc.b	smpsNoAttack, $01
00087291 E113                       	smpsAlterNote       $13
00087293 8001                       	dc.b	nRst, $01
00087295 E10D                       	smpsAlterNote       $0D
00087297 C20D                       	dc.b	nF5, $0D
00087299 E10A                       	smpsAlterNote       $0A
0008729B E701                       	dc.b	smpsNoAttack, $01
0008729D E106                       	smpsAlterNote       $06
0008729F E701                       	dc.b	smpsNoAttack, $01
000872A1 E10A                       	smpsAlterNote       $0A
000872A3 E701                       	dc.b	smpsNoAttack, $01
000872A5 E110                       	smpsAlterNote       $10
000872A7 E701                       	dc.b	smpsNoAttack, $01
000872A9 E111                       	smpsAlterNote       $11
000872AB E701                       	dc.b	smpsNoAttack, $01
000872AD E10D                       	smpsAlterNote       $0D
000872AF E701                       	dc.b	smpsNoAttack, $01
000872B1 E107                       	smpsAlterNote       $07
000872B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872B7 E10A                       	smpsAlterNote       $0A
000872B9 E701                       	dc.b	smpsNoAttack, $01
000872BB E110                       	smpsAlterNote       $10
000872BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872C1 E10A                       	smpsAlterNote       $0A
000872C3 E701                       	dc.b	smpsNoAttack, $01
000872C5 E107                       	smpsAlterNote       $07
000872C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872CB E10D                       	smpsAlterNote       $0D
000872CD E701                       	dc.b	smpsNoAttack, $01
000872CF E111                       	smpsAlterNote       $11
000872D1 E701                       	dc.b	smpsNoAttack, $01
000872D3 E110                       	smpsAlterNote       $10
000872D5 E701                       	dc.b	smpsNoAttack, $01
000872D7 E10A                       	smpsAlterNote       $0A
000872D9 E701                       	dc.b	smpsNoAttack, $01
000872DB E106                       	smpsAlterNote       $06
000872DD E701                       	dc.b	smpsNoAttack, $01
000872DF E10A                       	smpsAlterNote       $0A
000872E1 E701                       	dc.b	smpsNoAttack, $01
000872E3 E10D                       	smpsAlterNote       $0D
000872E5 E701                       	dc.b	smpsNoAttack, $01
000872E7 E111                       	smpsAlterNote       $11
000872E9 E701                       	dc.b	smpsNoAttack, $01
000872EB E10D                       	smpsAlterNote       $0D
000872ED E701                       	dc.b	smpsNoAttack, $01
000872EF E107                       	smpsAlterNote       $07
000872F1 E701                       	dc.b	smpsNoAttack, $01
000872F3 E106                       	smpsAlterNote       $06
000872F5 E701                       	dc.b	smpsNoAttack, $01
000872F7 E10A                       	smpsAlterNote       $0A
000872F9 E701                       	dc.b	smpsNoAttack, $01
000872FB E110                       	smpsAlterNote       $10
000872FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087301 E10D                       	smpsAlterNote       $0D
00087303 E701                       	dc.b	smpsNoAttack, $01
00087305 E107                       	smpsAlterNote       $07
00087307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008730B E10D                       	smpsAlterNote       $0D
0008730D E701                       	dc.b	smpsNoAttack, $01
0008730F E110                       	smpsAlterNote       $10
00087311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087315 E10A                       	smpsAlterNote       $0A
00087317 E701                       	dc.b	smpsNoAttack, $01
00087319 E106                       	smpsAlterNote       $06
0008731B E701                       	dc.b	smpsNoAttack, $01
0008731D E107                       	smpsAlterNote       $07
0008731F E701                       	dc.b	smpsNoAttack, $01
00087321 E10D                       	smpsAlterNote       $0D
00087323 E701                       	dc.b	smpsNoAttack, $01
00087325 E111                       	smpsAlterNote       $11
00087327 E701                       	dc.b	smpsNoAttack, $01
00087329 E10D                       	smpsAlterNote       $0D
0008732B E701                       	dc.b	smpsNoAttack, $01
0008732D E10A                       	smpsAlterNote       $0A
0008732F E701                       	dc.b	smpsNoAttack, $01
00087331 E107                       	smpsAlterNote       $07
00087333 8001                       	dc.b	nRst, $01
00087335 E10D                       	smpsAlterNote       $0D
00087337 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008733D E601                       	smpsAlterVol        $01
0008733F E110                       	smpsAlterNote       $10
00087341 BB0D                       	dc.b	nBb4, $0D
00087343 E10A                       	smpsAlterNote       $0A
00087345 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087349 E110                       	smpsAlterNote       $10
0008734B E701                       	dc.b	smpsNoAttack, $01
0008734D E113                       	smpsAlterNote       $13
0008734F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087353 E10D                       	smpsAlterNote       $0D
00087355 E701                       	dc.b	smpsNoAttack, $01
00087357 E109                       	smpsAlterNote       $09
00087359 E701                       	dc.b	smpsNoAttack, $01
0008735B E10A                       	smpsAlterNote       $0A
0008735D E701                       	dc.b	smpsNoAttack, $01
0008735F E110                       	smpsAlterNote       $10
00087361 E701                       	dc.b	smpsNoAttack, $01
00087363 E114                       	smpsAlterNote       $14
00087365 E701                       	dc.b	smpsNoAttack, $01
00087367 E110                       	smpsAlterNote       $10
00087369 E701                       	dc.b	smpsNoAttack, $01
0008736B E10D                       	smpsAlterNote       $0D
0008736D E701                       	dc.b	smpsNoAttack, $01
0008736F E109                       	smpsAlterNote       $09
00087371 E701                       	dc.b	smpsNoAttack, $01
00087373 E10A                       	smpsAlterNote       $0A
00087375 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00087379 E107                       	smpsAlterNote       $07
0008737B E701                       	dc.b	smpsNoAttack, $01
0008737D E103                       	smpsAlterNote       $03
0008737F E701                       	dc.b	smpsNoAttack, $01
00087381 E107                       	smpsAlterNote       $07
00087383 E701                       	dc.b	smpsNoAttack, $01
00087385 E10D                       	smpsAlterNote       $0D
00087387 E701                       	dc.b	smpsNoAttack, $01
00087389 E10E                       	smpsAlterNote       $0E
0008738B E701                       	dc.b	smpsNoAttack, $01
0008738D E10A                       	smpsAlterNote       $0A
0008738F E701                       	dc.b	smpsNoAttack, $01
00087391 E104                       	smpsAlterNote       $04
00087393 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087397 E107                       	smpsAlterNote       $07
00087399 E701                       	dc.b	smpsNoAttack, $01
0008739B E10D                       	smpsAlterNote       $0D
0008739D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873A1 E107                       	smpsAlterNote       $07
000873A3 E701                       	dc.b	smpsNoAttack, $01
000873A5 E104                       	smpsAlterNote       $04
000873A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873AB E10B                       	smpsAlterNote       $0B
000873AD BF0D                       	dc.b	nD5, $0D
000873AF E108                       	smpsAlterNote       $08
000873B1 E701                       	dc.b	smpsNoAttack, $01
000873B3 E105                       	smpsAlterNote       $05
000873B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873B9 E10B                       	smpsAlterNote       $0B
000873BB E701                       	dc.b	smpsNoAttack, $01
000873BD E10F                       	smpsAlterNote       $0F
000873BF E701                       	dc.b	smpsNoAttack, $01
000873C1 E10E                       	smpsAlterNote       $0E
000873C3 E701                       	dc.b	smpsNoAttack, $01
000873C5 E108                       	smpsAlterNote       $08
000873C7 E701                       	dc.b	smpsNoAttack, $01
000873C9 E104                       	smpsAlterNote       $04
000873CB E701                       	dc.b	smpsNoAttack, $01
000873CD E108                       	smpsAlterNote       $08
000873CF E701                       	dc.b	smpsNoAttack, $01
000873D1 E10B                       	smpsAlterNote       $0B
000873D3 E701                       	dc.b	smpsNoAttack, $01
000873D5 E10F                       	smpsAlterNote       $0F
000873D7 E701                       	dc.b	smpsNoAttack, $01
000873D9 E10B                       	smpsAlterNote       $0B
000873DB E701                       	dc.b	smpsNoAttack, $01
000873DD E105                       	smpsAlterNote       $05
000873DF E701                       	dc.b	smpsNoAttack, $01
000873E1 E104                       	smpsAlterNote       $04
000873E3 E701                       	dc.b	smpsNoAttack, $01
000873E5 E105                       	smpsAlterNote       $05
000873E7 8001                       	dc.b	nRst, $01
000873E9 E10C                       	smpsAlterNote       $0C
000873EB C10C                       	dc.b	nE5, $0C
000873ED E10D                       	smpsAlterNote       $0D
000873EF C201                       	dc.b	nF5, $01
000873F1 E10E                       	smpsAlterNote       $0E
000873F3 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000873F7 E10D                       	smpsAlterNote       $0D
000873F9 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000873FD E10A                       	smpsAlterNote       $0A
000873FF E701                       	dc.b	smpsNoAttack, $01
00087401 E106                       	smpsAlterNote       $06
00087403 E701                       	dc.b	smpsNoAttack, $01
00087405 E10A                       	smpsAlterNote       $0A
00087407 E701                       	dc.b	smpsNoAttack, $01
00087409 E10D                       	smpsAlterNote       $0D
0008740B E701                       	dc.b	smpsNoAttack, $01
0008740D E111                       	smpsAlterNote       $11
0008740F E701                       	dc.b	smpsNoAttack, $01
00087411 E10D                       	smpsAlterNote       $0D
00087413 E701                       	dc.b	smpsNoAttack, $01
00087415 E107                       	smpsAlterNote       $07
00087417 E701                       	dc.b	smpsNoAttack, $01
00087419 E106                       	smpsAlterNote       $06
0008741B E701                       	dc.b	smpsNoAttack, $01
0008741D E10A                       	smpsAlterNote       $0A
0008741F E701                       	dc.b	smpsNoAttack, $01
00087421 E110                       	smpsAlterNote       $10
00087423 E701                       	dc.b	smpsNoAttack, $01
00087425 E111                       	smpsAlterNote       $11
00087427 8001                       	dc.b	nRst, $01
00087429 E10D                       	smpsAlterNote       $0D
0008742B C40D                       	dc.b	nG5, $0D
0008742D E10A                       	smpsAlterNote       $0A
0008742F E701                       	dc.b	smpsNoAttack, $01
00087431 E106                       	smpsAlterNote       $06
00087433 E701                       	dc.b	smpsNoAttack, $01
00087435 E10A                       	smpsAlterNote       $0A
00087437 E701                       	dc.b	smpsNoAttack, $01
00087439 E10D                       	smpsAlterNote       $0D
0008743B E701                       	dc.b	smpsNoAttack, $01
0008743D E10C                       	smpsAlterNote       $0C
0008743F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008744B 8001                       	dc.b	nRst, $01
0008744D E10D                       	smpsAlterNote       $0D
0008744F C20D                       	dc.b	nF5, $0D
00087451 E10A                       	smpsAlterNote       $0A
00087453 E701                       	dc.b	smpsNoAttack, $01
00087455 E106                       	smpsAlterNote       $06
00087457 E701                       	dc.b	smpsNoAttack, $01
00087459 E10A                       	smpsAlterNote       $0A
0008745B E701                       	dc.b	smpsNoAttack, $01
0008745D E110                       	smpsAlterNote       $10
0008745F E701                       	dc.b	smpsNoAttack, $01
00087461 E111                       	smpsAlterNote       $11
00087463 E701                       	dc.b	smpsNoAttack, $01
00087465 E10D                       	smpsAlterNote       $0D
00087467 E701                       	dc.b	smpsNoAttack, $01
00087469 E107                       	smpsAlterNote       $07
0008746B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008746F E10A                       	smpsAlterNote       $0A
00087471 E701                       	dc.b	smpsNoAttack, $01
00087473 E110                       	smpsAlterNote       $10
00087475 E701                       	dc.b	smpsNoAttack, $01
00087477 E111                       	smpsAlterNote       $11
00087479 8001                       	dc.b	nRst, $01
0008747B E10F                       	smpsAlterNote       $0F
0008747D C60A                       	dc.b	nA5, $0A
0008747F E10D                       	smpsAlterNote       $0D
00087481 C406 8001                  	dc.b	nG5, $06, nRst, $01
00087485 E10C                       	smpsAlterNote       $0C
00087487 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00087493 8001                       	dc.b	nRst, $01
00087495 E10D                       	smpsAlterNote       $0D
00087497 C20D                       	dc.b	nF5, $0D
00087499 E107                       	smpsAlterNote       $07
0008749B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008749F E10A                       	smpsAlterNote       $0A
000874A1 E701                       	dc.b	smpsNoAttack, $01
000874A3 E110                       	smpsAlterNote       $10
000874A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874A9 E10A                       	smpsAlterNote       $0A
000874AB E701                       	dc.b	smpsNoAttack, $01
000874AD E107                       	smpsAlterNote       $07
000874AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874B3 E10D                       	smpsAlterNote       $0D
000874B5 E701                       	dc.b	smpsNoAttack, $01
000874B7 E111                       	smpsAlterNote       $11
000874B9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000874BD E10D                       	smpsAlterNote       $0D
000874BF C40D                       	dc.b	nG5, $0D
000874C1 E107                       	smpsAlterNote       $07
000874C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874C7 E10A                       	smpsAlterNote       $0A
000874C9 E701                       	dc.b	smpsNoAttack, $01
000874CB E10D                       	smpsAlterNote       $0D
000874CD 8001                       	dc.b	nRst, $01
000874CF E10C                       	smpsAlterNote       $0C
000874D1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000874DD E10D                       	smpsAlterNote       $0D
000874DF C20E                       	dc.b	nF5, $0E
000874E1 E107                       	smpsAlterNote       $07
000874E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874E7 E10D                       	smpsAlterNote       $0D
000874E9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000874EF E0C0                       	smpsPan             panCenter, $00
000874F1 E603                       	smpsAlterVol        $03
000874F3 E108                       	smpsAlterNote       $08
000874F5 B406                       	dc.b	nEb4, $06
000874F7 E10C                       	smpsAlterNote       $0C
000874F9 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000874FD E108                       	smpsAlterNote       $08
000874FF B403                       	dc.b	nEb4, $03
00087501 E109                       	smpsAlterNote       $09
00087503 B803 8001                  	dc.b	nG4, $03, nRst, $01
00087507 E10C                       	smpsAlterNote       $0C
00087509 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00087511 03                         	dc.b	$03
00087512 E6FD                       	smpsAlterVol        $FD
00087514 F6F1 F4                    	smpsJump            music84_Jump00
00087517                            
00087517                            ; PSG1 Data
00087517                            music84_PSG1:
00087517 E1FD                       	smpsAlterNote       $FD
00087519 EC04                       	smpsPSGAlterVol     $04
0008751B 9203                       	dc.b	nF1, $03
0008751D E1FE                       	smpsAlterNote       $FE
0008751F 9603                       	dc.b	nA1, $03
00087521 EC04                       	smpsPSGAlterVol     $04
00087523 E701                       	dc.b	smpsNoAttack, $01
00087525 E1FF                       	smpsAlterNote       $FF
00087527 ECFC                       	smpsPSGAlterVol     $FC
00087529 9B03                       	dc.b	nD2, $03
0008752B E1FD                       	smpsAlterNote       $FD
0008752D 9403                       	dc.b	nG1, $03
0008752F EC04                       	smpsPSGAlterVol     $04
00087531 E701                       	dc.b	smpsNoAttack, $01
00087533 E1FE                       	smpsAlterNote       $FE
00087535 ECFC                       	smpsPSGAlterVol     $FC
00087537 9703                       	dc.b	nBb1, $03
00087539 E1FF                       	smpsAlterNote       $FF
0008753B 9B03                       	dc.b	nD2, $03
0008753D EC04                       	smpsPSGAlterVol     $04
0008753F E701                       	dc.b	smpsNoAttack, $01
00087541 E1FE                       	smpsAlterNote       $FE
00087543 ECFC                       	smpsPSGAlterVol     $FC
00087545 A002                       	dc.b	nG2, $02
00087547 EC04                       	smpsPSGAlterVol     $04
00087549 E701                       	dc.b	smpsNoAttack, $01
0008754B E1FF                       	smpsAlterNote       $FF
0008754D ECFC                       	smpsPSGAlterVol     $FC
0008754F A203                       	dc.b	nA2, $03
00087551 EC0B                       	smpsPSGAlterVol     $0B
00087553 800A                       	dc.b	nRst, $0A
00087555 E105                       	smpsAlterNote       $05
00087557 01                         	dc.b	$01
00087558 E1FC                       	smpsAlterNote       $FC
0008755A 01                         	dc.b	$01
0008755B E105                       	smpsAlterNote       $05
0008755D 01                         	dc.b	$01
0008755E E1FD                       	smpsAlterNote       $FD
00087560 01                         	dc.b	$01
00087561 E105                       	smpsAlterNote       $05
00087563 01                         	dc.b	$01
00087564 E1FD                       	smpsAlterNote       $FD
00087566 01                         	dc.b	$01
00087567 E1FA                       	smpsAlterNote       $FA
00087569 01                         	dc.b	$01
0008756A E1FC                       	smpsAlterNote       $FC
0008756C 01                         	dc.b	$01
0008756D E105                       	smpsAlterNote       $05
0008756F 01                         	dc.b	$01
00087570 E108                       	smpsAlterNote       $08
00087572 0101                       	dc.b	$01, $01
00087574 E105                       	smpsAlterNote       $05
00087576 01                         	dc.b	$01
00087577 E1FA                       	smpsAlterNote       $FA
00087579 0101                       	dc.b	$01, $01
0008757B E1FD                       	smpsAlterNote       $FD
0008757D 01                         	dc.b	$01
0008757E E105                       	smpsAlterNote       $05
00087580 01                         	dc.b	$01
00087581 E108                       	smpsAlterNote       $08
00087583 01                         	dc.b	$01
00087584 E105                       	smpsAlterNote       $05
00087586 01                         	dc.b	$01
00087587 E1FC                       	smpsAlterNote       $FC
00087589 01                         	dc.b	$01
0008758A E105                       	smpsAlterNote       $05
0008758C 01                         	dc.b	$01
0008758D E1FD                       	smpsAlterNote       $FD
0008758F 01                         	dc.b	$01
00087590                            
00087590                            music84_Jump07:
00087590 E105                       	smpsAlterNote       $05
00087592 8001                       	dc.b	nRst, $01
00087594 E1FD                       	smpsAlterNote       $FD
00087596 01                         	dc.b	$01
00087597 E1FA                       	smpsAlterNote       $FA
00087599 01                         	dc.b	$01
0008759A E1FC                       	smpsAlterNote       $FC
0008759C 01                         	dc.b	$01
0008759D E1FD                       	smpsAlterNote       $FD
0008759F ECF5                       	smpsPSGAlterVol     $F5
000875A1 9206                       	dc.b	nF1, $06
000875A3 EC04                       	smpsPSGAlterVol     $04
000875A5 E701                       	dc.b	smpsNoAttack, $01
000875A7 EC07                       	smpsPSGAlterVol     $07
000875A9 8003                       	dc.b	nRst, $03
000875AB ECF5                       	smpsPSGAlterVol     $F5
000875AD 9206                       	dc.b	nF1, $06
000875AF EC04                       	smpsPSGAlterVol     $04
000875B1 E701                       	dc.b	smpsNoAttack, $01
000875B3 EC07                       	smpsPSGAlterVol     $07
000875B5 8006                       	dc.b	nRst, $06
000875B7 E100                       	smpsAlterNote       $00
000875B9 01                         	dc.b	$01
000875BA E104                       	smpsAlterNote       $04
000875BC 01                         	dc.b	$01
000875BD E100                       	smpsAlterNote       $00
000875BF 01                         	dc.b	$01
000875C0 E1FB                       	smpsAlterNote       $FB
000875C2 01                         	dc.b	$01
000875C3 E1FD                       	smpsAlterNote       $FD
000875C5 ECF5                       	smpsPSGAlterVol     $F5
000875C7 9406                       	dc.b	nG1, $06
000875C9 EC04                       	smpsPSGAlterVol     $04
000875CB E701                       	dc.b	smpsNoAttack, $01
000875CD EC07                       	smpsPSGAlterVol     $07
000875CF 8003                       	dc.b	nRst, $03
000875D1 ECF5                       	smpsPSGAlterVol     $F5
000875D3 9407                       	dc.b	nG1, $07
000875D5 EC0B                       	smpsPSGAlterVol     $0B
000875D7 8006                       	dc.b	nRst, $06
000875D9 E100                       	smpsAlterNote       $00
000875DB 01                         	dc.b	$01
000875DC E103                       	smpsAlterNote       $03
000875DE 0101                       	dc.b	$01, $01
000875E0 E1FD                       	smpsAlterNote       $FD
000875E2 01                         	dc.b	$01
000875E3 ECF5                       	smpsPSGAlterVol     $F5
000875E5 9207                       	dc.b	nF1, $07
000875E7 EC0B                       	smpsPSGAlterVol     $0B
000875E9 8004                       	dc.b	nRst, $04
000875EB ECF5                       	smpsPSGAlterVol     $F5
000875ED 9206                       	dc.b	nF1, $06
000875EF EC04                       	smpsPSGAlterVol     $04
000875F1 E701                       	dc.b	smpsNoAttack, $01
000875F3 EC07                       	smpsPSGAlterVol     $07
000875F5 8006                       	dc.b	nRst, $06
000875F7 E103                       	smpsAlterNote       $03
000875F9 01                         	dc.b	$01
000875FA E104                       	smpsAlterNote       $04
000875FC 01                         	dc.b	$01
000875FD E100                       	smpsAlterNote       $00
000875FF 01                         	dc.b	$01
00087600 E1FA                       	smpsAlterNote       $FA
00087602 01                         	dc.b	$01
00087603 E1FD                       	smpsAlterNote       $FD
00087605 ECF5                       	smpsPSGAlterVol     $F5
00087607 9206                       	dc.b	nF1, $06
00087609 EC04                       	smpsPSGAlterVol     $04
0008760B E701                       	dc.b	smpsNoAttack, $01
0008760D EC07                       	smpsPSGAlterVol     $07
0008760F 8003                       	dc.b	nRst, $03
00087611 ECF5                       	smpsPSGAlterVol     $F5
00087613 9106                       	dc.b	nE1, $06
00087615 EC04                       	smpsPSGAlterVol     $04
00087617 E701                       	dc.b	smpsNoAttack, $01
00087619 EC07                       	smpsPSGAlterVol     $07
0008761B 8006                       	dc.b	nRst, $06
0008761D E100                       	smpsAlterNote       $00
0008761F 01                         	dc.b	$01
00087620 E104                       	smpsAlterNote       $04
00087622 01                         	dc.b	$01
00087623 E100                       	smpsAlterNote       $00
00087625 01                         	dc.b	$01
00087626 E1FD                       	smpsAlterNote       $FD
00087628 01                         	dc.b	$01
00087629 ECF5                       	smpsPSGAlterVol     $F5
0008762B 9206                       	dc.b	nF1, $06
0008762D EC04                       	smpsPSGAlterVol     $04
0008762F E701                       	dc.b	smpsNoAttack, $01
00087631 EC07                       	smpsPSGAlterVol     $07
00087633 8003                       	dc.b	nRst, $03
00087635 ECF5                       	smpsPSGAlterVol     $F5
00087637 9207                       	dc.b	nF1, $07
00087639 EC0B                       	smpsPSGAlterVol     $0B
0008763B 8007                       	dc.b	nRst, $07
0008763D E103                       	smpsAlterNote       $03
0008763F 0101                       	dc.b	$01, $01
00087641 E1FD                       	smpsAlterNote       $FD
00087643 01                         	dc.b	$01
00087644 E1FB                       	smpsAlterNote       $FB
00087646 01                         	dc.b	$01
00087647 E1FD                       	smpsAlterNote       $FD
00087649 ECF5                       	smpsPSGAlterVol     $F5
0008764B 9406                       	dc.b	nG1, $06
0008764D EC0B                       	smpsPSGAlterVol     $0B
0008764F 8004                       	dc.b	nRst, $04
00087651 ECF5                       	smpsPSGAlterVol     $F5
00087653 9406                       	dc.b	nG1, $06
00087655 EC04                       	smpsPSGAlterVol     $04
00087657 E701                       	dc.b	smpsNoAttack, $01
00087659 EC07                       	smpsPSGAlterVol     $07
0008765B 8006                       	dc.b	nRst, $06
0008765D E100                       	smpsAlterNote       $00
0008765F 01                         	dc.b	$01
00087660 E104                       	smpsAlterNote       $04
00087662 01                         	dc.b	$01
00087663 E100                       	smpsAlterNote       $00
00087665 01                         	dc.b	$01
00087666 E1F9                       	smpsAlterNote       $F9
00087668 01                         	dc.b	$01
00087669 E1FD                       	smpsAlterNote       $FD
0008766B ECF5                       	smpsPSGAlterVol     $F5
0008766D 9206                       	dc.b	nF1, $06
0008766F EC04                       	smpsPSGAlterVol     $04
00087671 E701                       	dc.b	smpsNoAttack, $01
00087673 EC07                       	smpsPSGAlterVol     $07
00087675 8003                       	dc.b	nRst, $03
00087677 ECF5                       	smpsPSGAlterVol     $F5
00087679 9207                       	dc.b	nF1, $07
0008767B EC0B                       	smpsPSGAlterVol     $0B
0008767D 8006                       	dc.b	nRst, $06
0008767F E100                       	smpsAlterNote       $00
00087681 01                         	dc.b	$01
00087682 E104                       	smpsAlterNote       $04
00087684 01                         	dc.b	$01
00087685 E103                       	smpsAlterNote       $03
00087687 01                         	dc.b	$01
00087688 E1FD                       	smpsAlterNote       $FD
0008768A 01                         	dc.b	$01
0008768B ECF5                       	smpsPSGAlterVol     $F5
0008768D 9207                       	dc.b	nF1, $07
0008768F EC0B                       	smpsPSGAlterVol     $0B
00087691 8004                       	dc.b	nRst, $04
00087693 ECF5                       	smpsPSGAlterVol     $F5
00087695 9206                       	dc.b	nF1, $06
00087697 EC0B                       	smpsPSGAlterVol     $0B
00087699 8007                       	dc.b	nRst, $07
0008769B E103                       	smpsAlterNote       $03
0008769D 0101                       	dc.b	$01, $01
0008769F E100                       	smpsAlterNote       $00
000876A1 01                         	dc.b	$01
000876A2 E1FA                       	smpsAlterNote       $FA
000876A4 01                         	dc.b	$01
000876A5 E1FD                       	smpsAlterNote       $FD
000876A7 ECF5                       	smpsPSGAlterVol     $F5
000876A9 9206                       	dc.b	nF1, $06
000876AB EC04                       	smpsPSGAlterVol     $04
000876AD E701                       	dc.b	smpsNoAttack, $01
000876AF EC07                       	smpsPSGAlterVol     $07
000876B1 8003                       	dc.b	nRst, $03
000876B3 ECF5                       	smpsPSGAlterVol     $F5
000876B5 9206                       	dc.b	nF1, $06
000876B7 EC04                       	smpsPSGAlterVol     $04
000876B9 E701                       	dc.b	smpsNoAttack, $01
000876BB EC07                       	smpsPSGAlterVol     $07
000876BD 8006                       	dc.b	nRst, $06
000876BF E100                       	smpsAlterNote       $00
000876C1 01                         	dc.b	$01
000876C2 E104                       	smpsAlterNote       $04
000876C4 01                         	dc.b	$01
000876C5 E100                       	smpsAlterNote       $00
000876C7 01                         	dc.b	$01
000876C8 E1FD                       	smpsAlterNote       $FD
000876CA 01                         	dc.b	$01
000876CB ECF5                       	smpsPSGAlterVol     $F5
000876CD 9206                       	dc.b	nF1, $06
000876CF EC04                       	smpsPSGAlterVol     $04
000876D1 E701                       	dc.b	smpsNoAttack, $01
000876D3 EC07                       	smpsPSGAlterVol     $07
000876D5 8003                       	dc.b	nRst, $03
000876D7 ECF5                       	smpsPSGAlterVol     $F5
000876D9 9207                       	dc.b	nF1, $07
000876DB EC0B                       	smpsPSGAlterVol     $0B
000876DD 8007                       	dc.b	nRst, $07
000876DF E103                       	smpsAlterNote       $03
000876E1 0101                       	dc.b	$01, $01
000876E3 E1FD                       	smpsAlterNote       $FD
000876E5 01                         	dc.b	$01
000876E6 E1FA                       	smpsAlterNote       $FA
000876E8 01                         	dc.b	$01
000876E9 E1FD                       	smpsAlterNote       $FD
000876EB ECF5                       	smpsPSGAlterVol     $F5
000876ED 9206                       	dc.b	nF1, $06
000876EF EC0B                       	smpsPSGAlterVol     $0B
000876F1 8004                       	dc.b	nRst, $04
000876F3 ECF5                       	smpsPSGAlterVol     $F5
000876F5 9206                       	dc.b	nF1, $06
000876F7 EC04                       	smpsPSGAlterVol     $04
000876F9 E701                       	dc.b	smpsNoAttack, $01
000876FB EC07                       	smpsPSGAlterVol     $07
000876FD 8006                       	dc.b	nRst, $06
000876FF E103                       	smpsAlterNote       $03
00087701 01                         	dc.b	$01
00087702 E104                       	smpsAlterNote       $04
00087704 01                         	dc.b	$01
00087705 E100                       	smpsAlterNote       $00
00087707 01                         	dc.b	$01
00087708 E1FA                       	smpsAlterNote       $FA
0008770A 01                         	dc.b	$01
0008770B E1FD                       	smpsAlterNote       $FD
0008770D ECF5                       	smpsPSGAlterVol     $F5
0008770F 9206                       	dc.b	nF1, $06
00087711 EC04                       	smpsPSGAlterVol     $04
00087713 E701                       	dc.b	smpsNoAttack, $01
00087715 EC07                       	smpsPSGAlterVol     $07
00087717 8003                       	dc.b	nRst, $03
00087719 ECF5                       	smpsPSGAlterVol     $F5
0008771B 9206                       	dc.b	nF1, $06
0008771D EC04                       	smpsPSGAlterVol     $04
0008771F E701                       	dc.b	smpsNoAttack, $01
00087721 EC07                       	smpsPSGAlterVol     $07
00087723 8006                       	dc.b	nRst, $06
00087725 E100                       	smpsAlterNote       $00
00087727 01                         	dc.b	$01
00087728 E104                       	smpsAlterNote       $04
0008772A 01                         	dc.b	$01
0008772B E103                       	smpsAlterNote       $03
0008772D 01                         	dc.b	$01
0008772E E1FD                       	smpsAlterNote       $FD
00087730 01                         	dc.b	$01
00087731 ECF5                       	smpsPSGAlterVol     $F5
00087733 9107                       	dc.b	nE1, $07
00087735 EC0B                       	smpsPSGAlterVol     $0B
00087737 8004                       	dc.b	nRst, $04
00087739 ECF5                       	smpsPSGAlterVol     $F5
0008773B 9106                       	dc.b	nE1, $06
0008773D EC0B                       	smpsPSGAlterVol     $0B
0008773F 8007                       	dc.b	nRst, $07
00087741 E103                       	smpsAlterNote       $03
00087743 0101                       	dc.b	$01, $01
00087745 E100                       	smpsAlterNote       $00
00087747 01                         	dc.b	$01
00087748 E1FA                       	smpsAlterNote       $FA
0008774A 01                         	dc.b	$01
0008774B E1FD                       	smpsAlterNote       $FD
0008774D ECF5                       	smpsPSGAlterVol     $F5
0008774F 9106                       	dc.b	nE1, $06
00087751 EC04                       	smpsPSGAlterVol     $04
00087753 E701                       	dc.b	smpsNoAttack, $01
00087755 EC07                       	smpsPSGAlterVol     $07
00087757 8003                       	dc.b	nRst, $03
00087759 ECF5                       	smpsPSGAlterVol     $F5
0008775B 9106                       	dc.b	nE1, $06
0008775D EC04                       	smpsPSGAlterVol     $04
0008775F E701                       	dc.b	smpsNoAttack, $01
00087761 EC07                       	smpsPSGAlterVol     $07
00087763 8006                       	dc.b	nRst, $06
00087765 E100                       	smpsAlterNote       $00
00087767 01                         	dc.b	$01
00087768 E104                       	smpsAlterNote       $04
0008776A 01                         	dc.b	$01
0008776B E100                       	smpsAlterNote       $00
0008776D 01                         	dc.b	$01
0008776E E1FA                       	smpsAlterNote       $FA
00087770 01                         	dc.b	$01
00087771 E1FD                       	smpsAlterNote       $FD
00087773 ECF5                       	smpsPSGAlterVol     $F5
00087775 9106                       	dc.b	nE1, $06
00087777 EC04                       	smpsPSGAlterVol     $04
00087779 E701                       	dc.b	smpsNoAttack, $01
0008777B EC07                       	smpsPSGAlterVol     $07
0008777D 8003                       	dc.b	nRst, $03
0008777F ECF5                       	smpsPSGAlterVol     $F5
00087781 9107 9106                  	dc.b	nE1, $07, nE1, $06
00087785 EC04                       	smpsPSGAlterVol     $04
00087787 E701                       	dc.b	smpsNoAttack, $01
00087789 ECFC                       	smpsPSGAlterVol     $FC
0008778B 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008778F EC04                       	smpsPSGAlterVol     $04
00087791 E701                       	dc.b	smpsNoAttack, $01
00087793 ECFC                       	smpsPSGAlterVol     $FC
00087795 9106                       	dc.b	nE1, $06
00087797 EC04                       	smpsPSGAlterVol     $04
00087799 E701                       	dc.b	smpsNoAttack, $01
0008779B EC07                       	smpsPSGAlterVol     $07
0008779D 8006                       	dc.b	nRst, $06
0008779F E100                       	smpsAlterNote       $00
000877A1 01                         	dc.b	$01
000877A2 E104                       	smpsAlterNote       $04
000877A4 01                         	dc.b	$01
000877A5 E100                       	smpsAlterNote       $00
000877A7 01                         	dc.b	$01
000877A8 E1FA                       	smpsAlterNote       $FA
000877AA 01                         	dc.b	$01
000877AB E1F9                       	smpsAlterNote       $F9
000877AD 01                         	dc.b	$01
000877AE E1FD                       	smpsAlterNote       $FD
000877B0 01                         	dc.b	$01
000877B1 E103                       	smpsAlterNote       $03
000877B3 01                         	dc.b	$01
000877B4 E104                       	smpsAlterNote       $04
000877B6 01                         	dc.b	$01
000877B7 E100                       	smpsAlterNote       $00
000877B9 01                         	dc.b	$01
000877BA E1FA                       	smpsAlterNote       $FA
000877BC 0101                       	dc.b	$01, $01
000877BE E1FD                       	smpsAlterNote       $FD
000877C0 ECF5                       	smpsPSGAlterVol     $F5
000877C2 9206                       	dc.b	nF1, $06
000877C4 EC04                       	smpsPSGAlterVol     $04
000877C6 E701                       	dc.b	smpsNoAttack, $01
000877C8 EC07                       	smpsPSGAlterVol     $07
000877CA 8003                       	dc.b	nRst, $03
000877CC ECF5                       	smpsPSGAlterVol     $F5
000877CE 9206                       	dc.b	nF1, $06
000877D0 EC04                       	smpsPSGAlterVol     $04
000877D2 E701                       	dc.b	smpsNoAttack, $01
000877D4 EC07                       	smpsPSGAlterVol     $07
000877D6 8006                       	dc.b	nRst, $06
000877D8 E100                       	smpsAlterNote       $00
000877DA 01                         	dc.b	$01
000877DB E104                       	smpsAlterNote       $04
000877DD 01                         	dc.b	$01
000877DE E103                       	smpsAlterNote       $03
000877E0 01                         	dc.b	$01
000877E1 E1FD                       	smpsAlterNote       $FD
000877E3 01                         	dc.b	$01
000877E4 ECF5                       	smpsPSGAlterVol     $F5
000877E6 9407                       	dc.b	nG1, $07
000877E8 EC0B                       	smpsPSGAlterVol     $0B
000877EA 8004                       	dc.b	nRst, $04
000877EC ECF5                       	smpsPSGAlterVol     $F5
000877EE 9406                       	dc.b	nG1, $06
000877F0 EC0B                       	smpsPSGAlterVol     $0B
000877F2 8007                       	dc.b	nRst, $07
000877F4 E103                       	smpsAlterNote       $03
000877F6 0101                       	dc.b	$01, $01
000877F8 E1FD                       	smpsAlterNote       $FD
000877FA 01                         	dc.b	$01
000877FB E1F9                       	smpsAlterNote       $F9
000877FD 01                         	dc.b	$01
000877FE E1FD                       	smpsAlterNote       $FD
00087800 ECF5                       	smpsPSGAlterVol     $F5
00087802 9206                       	dc.b	nF1, $06
00087804 EC04                       	smpsPSGAlterVol     $04
00087806 E701                       	dc.b	smpsNoAttack, $01
00087808 EC07                       	smpsPSGAlterVol     $07
0008780A 8003                       	dc.b	nRst, $03
0008780C ECF5                       	smpsPSGAlterVol     $F5
0008780E 9206                       	dc.b	nF1, $06
00087810 EC04                       	smpsPSGAlterVol     $04
00087812 E701                       	dc.b	smpsNoAttack, $01
00087814 EC07                       	smpsPSGAlterVol     $07
00087816 8006                       	dc.b	nRst, $06
00087818 E100                       	smpsAlterNote       $00
0008781A 01                         	dc.b	$01
0008781B E104                       	smpsAlterNote       $04
0008781D 01                         	dc.b	$01
0008781E E100                       	smpsAlterNote       $00
00087820 01                         	dc.b	$01
00087821 E1FA                       	smpsAlterNote       $FA
00087823 01                         	dc.b	$01
00087824 E1FD                       	smpsAlterNote       $FD
00087826 ECF5                       	smpsPSGAlterVol     $F5
00087828 9206                       	dc.b	nF1, $06
0008782A EC04                       	smpsPSGAlterVol     $04
0008782C E701                       	dc.b	smpsNoAttack, $01
0008782E EC07                       	smpsPSGAlterVol     $07
00087830 8003                       	dc.b	nRst, $03
00087832 ECF5                       	smpsPSGAlterVol     $F5
00087834 9107                       	dc.b	nE1, $07
00087836 EC0B                       	smpsPSGAlterVol     $0B
00087838 8006                       	dc.b	nRst, $06
0008783A E100                       	smpsAlterNote       $00
0008783C 01                         	dc.b	$01
0008783D E103                       	smpsAlterNote       $03
0008783F 0101                       	dc.b	$01, $01
00087841 E1FD                       	smpsAlterNote       $FD
00087843 01                         	dc.b	$01
00087844 ECF5                       	smpsPSGAlterVol     $F5
00087846 9207                       	dc.b	nF1, $07
00087848 EC0B                       	smpsPSGAlterVol     $0B
0008784A 8004                       	dc.b	nRst, $04
0008784C ECF5                       	smpsPSGAlterVol     $F5
0008784E 9206                       	dc.b	nF1, $06
00087850 EC04                       	smpsPSGAlterVol     $04
00087852 E701                       	dc.b	smpsNoAttack, $01
00087854 EC07                       	smpsPSGAlterVol     $07
00087856 8006                       	dc.b	nRst, $06
00087858 E103                       	smpsAlterNote       $03
0008785A 01                         	dc.b	$01
0008785B E104                       	smpsAlterNote       $04
0008785D 01                         	dc.b	$01
0008785E E100                       	smpsAlterNote       $00
00087860 01                         	dc.b	$01
00087861 E1FB                       	smpsAlterNote       $FB
00087863 01                         	dc.b	$01
00087864 E1FD                       	smpsAlterNote       $FD
00087866 ECF5                       	smpsPSGAlterVol     $F5
00087868 9406                       	dc.b	nG1, $06
0008786A EC04                       	smpsPSGAlterVol     $04
0008786C E701                       	dc.b	smpsNoAttack, $01
0008786E EC07                       	smpsPSGAlterVol     $07
00087870 8003                       	dc.b	nRst, $03
00087872 ECF5                       	smpsPSGAlterVol     $F5
00087874 9406                       	dc.b	nG1, $06
00087876 EC04                       	smpsPSGAlterVol     $04
00087878 E701                       	dc.b	smpsNoAttack, $01
0008787A EC07                       	smpsPSGAlterVol     $07
0008787C 8006                       	dc.b	nRst, $06
0008787E E100                       	smpsAlterNote       $00
00087880 01                         	dc.b	$01
00087881 E104                       	smpsAlterNote       $04
00087883 01                         	dc.b	$01
00087884 E100                       	smpsAlterNote       $00
00087886 01                         	dc.b	$01
00087887 E1FD                       	smpsAlterNote       $FD
00087889 01                         	dc.b	$01
0008788A ECF5                       	smpsPSGAlterVol     $F5
0008788C 9206                       	dc.b	nF1, $06
0008788E EC04                       	smpsPSGAlterVol     $04
00087890 E701                       	dc.b	smpsNoAttack, $01
00087892 EC07                       	smpsPSGAlterVol     $07
00087894 8003                       	dc.b	nRst, $03
00087896 ECF5                       	smpsPSGAlterVol     $F5
00087898 9207                       	dc.b	nF1, $07
0008789A EC0B                       	smpsPSGAlterVol     $0B
0008789C 8007                       	dc.b	nRst, $07
0008789E E103                       	smpsAlterNote       $03
000878A0 0101                       	dc.b	$01, $01
000878A2 E1FD                       	smpsAlterNote       $FD
000878A4 01                         	dc.b	$01
000878A5 E1FA                       	smpsAlterNote       $FA
000878A7 01                         	dc.b	$01
000878A8 E1FD                       	smpsAlterNote       $FD
000878AA ECF5                       	smpsPSGAlterVol     $F5
000878AC 9206                       	dc.b	nF1, $06
000878AE EC0B                       	smpsPSGAlterVol     $0B
000878B0 8004                       	dc.b	nRst, $04
000878B2 ECF5                       	smpsPSGAlterVol     $F5
000878B4 9206                       	dc.b	nF1, $06
000878B6 EC04                       	smpsPSGAlterVol     $04
000878B8 E701                       	dc.b	smpsNoAttack, $01
000878BA EC07                       	smpsPSGAlterVol     $07
000878BC 8006                       	dc.b	nRst, $06
000878BE E100                       	smpsAlterNote       $00
000878C0 01                         	dc.b	$01
000878C1 E104                       	smpsAlterNote       $04
000878C3 01                         	dc.b	$01
000878C4 E100                       	smpsAlterNote       $00
000878C6 01                         	dc.b	$01
000878C7 E1FA                       	smpsAlterNote       $FA
000878C9 01                         	dc.b	$01
000878CA E1FD                       	smpsAlterNote       $FD
000878CC ECF5                       	smpsPSGAlterVol     $F5
000878CE 9206                       	dc.b	nF1, $06
000878D0 EC04                       	smpsPSGAlterVol     $04
000878D2 E704                       	dc.b	smpsNoAttack, $04
000878D4 ECFC                       	smpsPSGAlterVol     $FC
000878D6 9207                       	dc.b	nF1, $07
000878D8 EC0B                       	smpsPSGAlterVol     $0B
000878DA 8006                       	dc.b	nRst, $06
000878DC E100                       	smpsAlterNote       $00
000878DE 01                         	dc.b	$01
000878DF E104                       	smpsAlterNote       $04
000878E1 01                         	dc.b	$01
000878E2 E103                       	smpsAlterNote       $03
000878E4 01                         	dc.b	$01
000878E5 E1FD                       	smpsAlterNote       $FD
000878E7 01                         	dc.b	$01
000878E8 ECF5                       	smpsPSGAlterVol     $F5
000878EA 9207                       	dc.b	nF1, $07
000878EC EC0B                       	smpsPSGAlterVol     $0B
000878EE 8004                       	dc.b	nRst, $04
000878F0 ECF5                       	smpsPSGAlterVol     $F5
000878F2 9206                       	dc.b	nF1, $06
000878F4 EC0B                       	smpsPSGAlterVol     $0B
000878F6 8007                       	dc.b	nRst, $07
000878F8 E103                       	smpsAlterNote       $03
000878FA 0101                       	dc.b	$01, $01
000878FC E100                       	smpsAlterNote       $00
000878FE 01                         	dc.b	$01
000878FF E1FA                       	smpsAlterNote       $FA
00087901 01                         	dc.b	$01
00087902 E1FD                       	smpsAlterNote       $FD
00087904 ECF5                       	smpsPSGAlterVol     $F5
00087906 9206                       	dc.b	nF1, $06
00087908 EC04                       	smpsPSGAlterVol     $04
0008790A E704                       	dc.b	smpsNoAttack, $04
0008790C ECFC                       	smpsPSGAlterVol     $FC
0008790E 9206                       	dc.b	nF1, $06
00087910 EC04                       	smpsPSGAlterVol     $04
00087912 E701                       	dc.b	smpsNoAttack, $01
00087914 EC07                       	smpsPSGAlterVol     $07
00087916 8006                       	dc.b	nRst, $06
00087918 E100                       	smpsAlterNote       $00
0008791A 01                         	dc.b	$01
0008791B E104                       	smpsAlterNote       $04
0008791D 01                         	dc.b	$01
0008791E E100                       	smpsAlterNote       $00
00087920 01                         	dc.b	$01
00087921 E1FD                       	smpsAlterNote       $FD
00087923 01                         	dc.b	$01
00087924 ECF5                       	smpsPSGAlterVol     $F5
00087926 9206                       	dc.b	nF1, $06
00087928 EC04                       	smpsPSGAlterVol     $04
0008792A E701                       	dc.b	smpsNoAttack, $01
0008792C EC07                       	smpsPSGAlterVol     $07
0008792E 8003                       	dc.b	nRst, $03
00087930 ECF5                       	smpsPSGAlterVol     $F5
00087932 9207                       	dc.b	nF1, $07
00087934 EC0B                       	smpsPSGAlterVol     $0B
00087936 8007                       	dc.b	nRst, $07
00087938 E103                       	smpsAlterNote       $03
0008793A 0101                       	dc.b	$01, $01
0008793C E1FD                       	smpsAlterNote       $FD
0008793E 01                         	dc.b	$01
0008793F E1FA                       	smpsAlterNote       $FA
00087941 01                         	dc.b	$01
00087942 E1FD                       	smpsAlterNote       $FD
00087944 ECF5                       	smpsPSGAlterVol     $F5
00087946 9106                       	dc.b	nE1, $06
00087948 EC0B                       	smpsPSGAlterVol     $0B
0008794A 8004                       	dc.b	nRst, $04
0008794C ECF5                       	smpsPSGAlterVol     $F5
0008794E 9106                       	dc.b	nE1, $06
00087950 EC04                       	smpsPSGAlterVol     $04
00087952 E701                       	dc.b	smpsNoAttack, $01
00087954 EC07                       	smpsPSGAlterVol     $07
00087956 8006                       	dc.b	nRst, $06
00087958 E100                       	smpsAlterNote       $00
0008795A 01                         	dc.b	$01
0008795B E104                       	smpsAlterNote       $04
0008795D 01                         	dc.b	$01
0008795E E100                       	smpsAlterNote       $00
00087960 01                         	dc.b	$01
00087961 E1FA                       	smpsAlterNote       $FA
00087963 01                         	dc.b	$01
00087964 E1FD                       	smpsAlterNote       $FD
00087966 ECF5                       	smpsPSGAlterVol     $F5
00087968 9106                       	dc.b	nE1, $06
0008796A EC04                       	smpsPSGAlterVol     $04
0008796C E701                       	dc.b	smpsNoAttack, $01
0008796E EC07                       	smpsPSGAlterVol     $07
00087970 8003                       	dc.b	nRst, $03
00087972 ECF5                       	smpsPSGAlterVol     $F5
00087974 9106                       	dc.b	nE1, $06
00087976 EC04                       	smpsPSGAlterVol     $04
00087978 E701                       	dc.b	smpsNoAttack, $01
0008797A EC07                       	smpsPSGAlterVol     $07
0008797C 8006                       	dc.b	nRst, $06
0008797E E100                       	smpsAlterNote       $00
00087980 01                         	dc.b	$01
00087981 E104                       	smpsAlterNote       $04
00087983 01                         	dc.b	$01
00087984 E103                       	smpsAlterNote       $03
00087986 01                         	dc.b	$01
00087987 E1FD                       	smpsAlterNote       $FD
00087989 01                         	dc.b	$01
0008798A ECF5                       	smpsPSGAlterVol     $F5
0008798C 9107                       	dc.b	nE1, $07
0008798E EC0B                       	smpsPSGAlterVol     $0B
00087990 8004                       	dc.b	nRst, $04
00087992 ECF5                       	smpsPSGAlterVol     $F5
00087994 9106                       	dc.b	nE1, $06
00087996 EC0B                       	smpsPSGAlterVol     $0B
00087998 8007                       	dc.b	nRst, $07
0008799A E103                       	smpsAlterNote       $03
0008799C 0101                       	dc.b	$01, $01
0008799E E100                       	smpsAlterNote       $00
000879A0 01                         	dc.b	$01
000879A1 E1FA                       	smpsAlterNote       $FA
000879A3 01                         	dc.b	$01
000879A4 E1FD                       	smpsAlterNote       $FD
000879A6 ECF5                       	smpsPSGAlterVol     $F5
000879A8 9106                       	dc.b	nE1, $06
000879AA EC04                       	smpsPSGAlterVol     $04
000879AC E701                       	dc.b	smpsNoAttack, $01
000879AE EC07                       	smpsPSGAlterVol     $07
000879B0 8003                       	dc.b	nRst, $03
000879B2 ECF5                       	smpsPSGAlterVol     $F5
000879B4 9106                       	dc.b	nE1, $06
000879B6 EC04                       	smpsPSGAlterVol     $04
000879B8 E701                       	dc.b	smpsNoAttack, $01
000879BA EC07                       	smpsPSGAlterVol     $07
000879BC 8003                       	dc.b	nRst, $03
000879BE ECF5                       	smpsPSGAlterVol     $F5
000879C0 9207                       	dc.b	nF1, $07
000879C2 EC0B                       	smpsPSGAlterVol     $0B
000879C4 8006                       	dc.b	nRst, $06
000879C6 E100                       	smpsAlterNote       $00
000879C8 01                         	dc.b	$01
000879C9 E104                       	smpsAlterNote       $04
000879CB 01                         	dc.b	$01
000879CC E103                       	smpsAlterNote       $03
000879CE 01                         	dc.b	$01
000879CF E1FD                       	smpsAlterNote       $FD
000879D1 01                         	dc.b	$01
000879D2 E1F9                       	smpsAlterNote       $F9
000879D4 01                         	dc.b	$01
000879D5 E1FD                       	smpsAlterNote       $FD
000879D7 01                         	dc.b	$01
000879D8 E100                       	smpsAlterNote       $00
000879DA 01                         	dc.b	$01
000879DB E104                       	smpsAlterNote       $04
000879DD 01                         	dc.b	$01
000879DE E1FD                       	smpsAlterNote       $FD
000879E0 ECF5                       	smpsPSGAlterVol     $F5
000879E2 9203 9203                  	dc.b	nF1, $03, nF1, $03
000879E6 EC04                       	smpsPSGAlterVol     $04
000879E8 E701                       	dc.b	smpsNoAttack, $01
000879EA EC07                       	smpsPSGAlterVol     $07
000879EC 8009                       	dc.b	nRst, $09
000879EE E100                       	smpsAlterNote       $00
000879F0 01                         	dc.b	$01
000879F1 E104                       	smpsAlterNote       $04
000879F3 01                         	dc.b	$01
000879F4 E103                       	smpsAlterNote       $03
000879F6 01                         	dc.b	$01
000879F7 E1FD                       	smpsAlterNote       $FD
000879F9 01                         	dc.b	$01
000879FA E1F9                       	smpsAlterNote       $F9
000879FC 01                         	dc.b	$01
000879FD E1FD                       	smpsAlterNote       $FD
000879FF 01                         	dc.b	$01
00087A00 E100                       	smpsAlterNote       $00
00087A02 01                         	dc.b	$01
00087A03 E104                       	smpsAlterNote       $04
00087A05 01                         	dc.b	$01
00087A06 E100                       	smpsAlterNote       $00
00087A08 01                         	dc.b	$01
00087A09 E1FA                       	smpsAlterNote       $FA
00087A0B 01                         	dc.b	$01
00087A0C E1F9                       	smpsAlterNote       $F9
00087A0E 01                         	dc.b	$01
00087A0F E1FD                       	smpsAlterNote       $FD
00087A11 01                         	dc.b	$01
00087A12 E103                       	smpsAlterNote       $03
00087A14 0101                       	dc.b	$01, $01
00087A16 E100                       	smpsAlterNote       $00
00087A18 01                         	dc.b	$01
00087A19 E1FD                       	smpsAlterNote       $FD
00087A1B ECF5                       	smpsPSGAlterVol     $F5
00087A1D 9202                       	dc.b	nF1, $02
00087A1F EC04                       	smpsPSGAlterVol     $04
00087A21 E701                       	dc.b	smpsNoAttack, $01
00087A23 ECFC                       	smpsPSGAlterVol     $FC
00087A25 9106                       	dc.b	nE1, $06
00087A27 EC04                       	smpsPSGAlterVol     $04
00087A29 E701                       	dc.b	smpsNoAttack, $01
00087A2B EC07                       	smpsPSGAlterVol     $07
00087A2D 8006                       	dc.b	nRst, $06
00087A2F E100                       	smpsAlterNote       $00
00087A31 01                         	dc.b	$01
00087A32 E104                       	smpsAlterNote       $04
00087A34 01                         	dc.b	$01
00087A35 E100                       	smpsAlterNote       $00
00087A37 01                         	dc.b	$01
00087A38 E1FD                       	smpsAlterNote       $FD
00087A3A 01                         	dc.b	$01
00087A3B E1F9                       	smpsAlterNote       $F9
00087A3D 01                         	dc.b	$01
00087A3E E1FD                       	smpsAlterNote       $FD
00087A40 01                         	dc.b	$01
00087A41 E103                       	smpsAlterNote       $03
00087A43 01                         	dc.b	$01
00087A44 E104                       	smpsAlterNote       $04
00087A46 01                         	dc.b	$01
00087A47 E1FD                       	smpsAlterNote       $FD
00087A49 ECF5                       	smpsPSGAlterVol     $F5
00087A4B 9102                       	dc.b	nE1, $02
00087A4D EC04                       	smpsPSGAlterVol     $04
00087A4F E701                       	dc.b	smpsNoAttack, $01
00087A51 ECFC                       	smpsPSGAlterVol     $FC
00087A53 920D                       	dc.b	nF1, $0D
00087A55 E100                       	smpsAlterNote       $00
00087A57 E701                       	dc.b	smpsNoAttack, $01
00087A59 E104                       	smpsAlterNote       $04
00087A5B E701                       	dc.b	smpsNoAttack, $01
00087A5D E100                       	smpsAlterNote       $00
00087A5F E701                       	dc.b	smpsNoAttack, $01
00087A61 E1FD                       	smpsAlterNote       $FD
00087A63 E701                       	dc.b	smpsNoAttack, $01
00087A65 E1F9                       	smpsAlterNote       $F9
00087A67 E701                       	dc.b	smpsNoAttack, $01
00087A69 E1FD                       	smpsAlterNote       $FD
00087A6B E701                       	dc.b	smpsNoAttack, $01
00087A6D E103                       	smpsAlterNote       $03
00087A6F E701                       	dc.b	smpsNoAttack, $01
00087A71 E104                       	smpsAlterNote       $04
00087A73 E701                       	dc.b	smpsNoAttack, $01
00087A75 E100                       	smpsAlterNote       $00
00087A77 E701                       	dc.b	smpsNoAttack, $01
00087A79 E1FA                       	smpsAlterNote       $FA
00087A7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A7F E1FD                       	smpsAlterNote       $FD
00087A81 E701                       	dc.b	smpsNoAttack, $01
00087A83 E103                       	smpsAlterNote       $03
00087A85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A89 E1FD                       	smpsAlterNote       $FD
00087A8B E701                       	dc.b	smpsNoAttack, $01
00087A8D E1F9                       	smpsAlterNote       $F9
00087A8F E701                       	dc.b	smpsNoAttack, $01
00087A91 E1FA                       	smpsAlterNote       $FA
00087A93 E701                       	dc.b	smpsNoAttack, $01
00087A95 E100                       	smpsAlterNote       $00
00087A97 EC04                       	smpsPSGAlterVol     $04
00087A99 E701                       	dc.b	smpsNoAttack, $01
00087A9B EC07                       	smpsPSGAlterVol     $07
00087A9D E104                       	smpsAlterNote       $04
00087A9F 8001                       	dc.b	nRst, $01
00087AA1 E100                       	smpsAlterNote       $00
00087AA3 01                         	dc.b	$01
00087AA4 E1FD                       	smpsAlterNote       $FD
00087AA6 01                         	dc.b	$01
00087AA7 E1F9                       	smpsAlterNote       $F9
00087AA9 01                         	dc.b	$01
00087AAA E1FD                       	smpsAlterNote       $FD
00087AAC 01                         	dc.b	$01
00087AAD E103                       	smpsAlterNote       $03
00087AAF 01                         	dc.b	$01
00087AB0 E104                       	smpsAlterNote       $04
00087AB2 01                         	dc.b	$01
00087AB3 E1FD                       	smpsAlterNote       $FD
00087AB5 ECF5                       	smpsPSGAlterVol     $F5
00087AB7 9106                       	dc.b	nE1, $06
00087AB9 EC04                       	smpsPSGAlterVol     $04
00087ABB E701                       	dc.b	smpsNoAttack, $01
00087ABD EC07                       	smpsPSGAlterVol     $07
00087ABF 8003                       	dc.b	nRst, $03
00087AC1 ECF5                       	smpsPSGAlterVol     $F5
00087AC3 9106                       	dc.b	nE1, $06
00087AC5 EC04                       	smpsPSGAlterVol     $04
00087AC7 E701                       	dc.b	smpsNoAttack, $01
00087AC9 EC07                       	smpsPSGAlterVol     $07
00087ACB 8006                       	dc.b	nRst, $06
00087ACD E100                       	smpsAlterNote       $00
00087ACF 01                         	dc.b	$01
00087AD0 E104                       	smpsAlterNote       $04
00087AD2 01                         	dc.b	$01
00087AD3 E100                       	smpsAlterNote       $00
00087AD5 01                         	dc.b	$01
00087AD6 E1FA                       	smpsAlterNote       $FA
00087AD8 01                         	dc.b	$01
00087AD9 E1FD                       	smpsAlterNote       $FD
00087ADB ECF5                       	smpsPSGAlterVol     $F5
00087ADD 9206                       	dc.b	nF1, $06
00087ADF EC04                       	smpsPSGAlterVol     $04
00087AE1 E701                       	dc.b	smpsNoAttack, $01
00087AE3 EC07                       	smpsPSGAlterVol     $07
00087AE5 8003                       	dc.b	nRst, $03
00087AE7 ECF5                       	smpsPSGAlterVol     $F5
00087AE9 9207                       	dc.b	nF1, $07
00087AEB EC0B                       	smpsPSGAlterVol     $0B
00087AED 8006                       	dc.b	nRst, $06
00087AEF E100                       	smpsAlterNote       $00
00087AF1 01                         	dc.b	$01
00087AF2 E103                       	smpsAlterNote       $03
00087AF4 0101                       	dc.b	$01, $01
00087AF6 E1FD                       	smpsAlterNote       $FD
00087AF8 01                         	dc.b	$01
00087AF9 ECF5                       	smpsPSGAlterVol     $F5
00087AFB 9107                       	dc.b	nE1, $07
00087AFD EC0B                       	smpsPSGAlterVol     $0B
00087AFF 8004                       	dc.b	nRst, $04
00087B01 ECF5                       	smpsPSGAlterVol     $F5
00087B03 9106                       	dc.b	nE1, $06
00087B05 EC04                       	smpsPSGAlterVol     $04
00087B07 E701                       	dc.b	smpsNoAttack, $01
00087B09 EC07                       	smpsPSGAlterVol     $07
00087B0B 8006                       	dc.b	nRst, $06
00087B0D E103                       	smpsAlterNote       $03
00087B0F 01                         	dc.b	$01
00087B10 E104                       	smpsAlterNote       $04
00087B12 01                         	dc.b	$01
00087B13 E100                       	smpsAlterNote       $00
00087B15 01                         	dc.b	$01
00087B16 E1FA                       	smpsAlterNote       $FA
00087B18 01                         	dc.b	$01
00087B19 E1FD                       	smpsAlterNote       $FD
00087B1B ECF5                       	smpsPSGAlterVol     $F5
00087B1D 9106                       	dc.b	nE1, $06
00087B1F EC04                       	smpsPSGAlterVol     $04
00087B21 E701                       	dc.b	smpsNoAttack, $01
00087B23 EC07                       	smpsPSGAlterVol     $07
00087B25 8003                       	dc.b	nRst, $03
00087B27 ECF5                       	smpsPSGAlterVol     $F5
00087B29 9106                       	dc.b	nE1, $06
00087B2B EC04                       	smpsPSGAlterVol     $04
00087B2D E701                       	dc.b	smpsNoAttack, $01
00087B2F EC07                       	smpsPSGAlterVol     $07
00087B31 8003                       	dc.b	nRst, $03
00087B33 ECF5                       	smpsPSGAlterVol     $F5
00087B35 9207                       	dc.b	nF1, $07
00087B37 EC0B                       	smpsPSGAlterVol     $0B
00087B39 8006                       	dc.b	nRst, $06
00087B3B E100                       	smpsAlterNote       $00
00087B3D 01                         	dc.b	$01
00087B3E E103                       	smpsAlterNote       $03
00087B40 0101                       	dc.b	$01, $01
00087B42 E1FD                       	smpsAlterNote       $FD
00087B44 01                         	dc.b	$01
00087B45 E1F9                       	smpsAlterNote       $F9
00087B47 01                         	dc.b	$01
00087B48 E1FA                       	smpsAlterNote       $FA
00087B4A 01                         	dc.b	$01
00087B4B E100                       	smpsAlterNote       $00
00087B4D 01                         	dc.b	$01
00087B4E E104                       	smpsAlterNote       $04
00087B50 01                         	dc.b	$01
00087B51 E1FD                       	smpsAlterNote       $FD
00087B53 ECF5                       	smpsPSGAlterVol     $F5
00087B55 9203 9203                  	dc.b	nF1, $03, nF1, $03
00087B59 EC04                       	smpsPSGAlterVol     $04
00087B5B E701                       	dc.b	smpsNoAttack, $01
00087B5D EC07                       	smpsPSGAlterVol     $07
00087B5F 8009                       	dc.b	nRst, $09
00087B61 E100                       	smpsAlterNote       $00
00087B63 01                         	dc.b	$01
00087B64 E103                       	smpsAlterNote       $03
00087B66 0101                       	dc.b	$01, $01
00087B68 E1FD                       	smpsAlterNote       $FD
00087B6A 01                         	dc.b	$01
00087B6B E1F9                       	smpsAlterNote       $F9
00087B6D 01                         	dc.b	$01
00087B6E E1FA                       	smpsAlterNote       $FA
00087B70 01                         	dc.b	$01
00087B71 E100                       	smpsAlterNote       $00
00087B73 01                         	dc.b	$01
00087B74 E104                       	smpsAlterNote       $04
00087B76 01                         	dc.b	$01
00087B77 E100                       	smpsAlterNote       $00
00087B79 01                         	dc.b	$01
00087B7A E1FD                       	smpsAlterNote       $FD
00087B7C 01                         	dc.b	$01
00087B7D E1F9                       	smpsAlterNote       $F9
00087B7F 01                         	dc.b	$01
00087B80 E1FD                       	smpsAlterNote       $FD
00087B82 01                         	dc.b	$01
00087B83 E103                       	smpsAlterNote       $03
00087B85 01                         	dc.b	$01
00087B86 E104                       	smpsAlterNote       $04
00087B88 01                         	dc.b	$01
00087B89 E100                       	smpsAlterNote       $00
00087B8B 01                         	dc.b	$01
00087B8C E1FD                       	smpsAlterNote       $FD
00087B8E ECF5                       	smpsPSGAlterVol     $F5
00087B90 9203 9106                  	dc.b	nF1, $03, nE1, $06
00087B94 EC04                       	smpsPSGAlterVol     $04
00087B96 E701                       	dc.b	smpsNoAttack, $01
00087B98 EC07                       	smpsPSGAlterVol     $07
00087B9A 8006                       	dc.b	nRst, $06
00087B9C E100                       	smpsAlterNote       $00
00087B9E 01                         	dc.b	$01
00087B9F E104                       	smpsAlterNote       $04
00087BA1 01                         	dc.b	$01
00087BA2 E103                       	smpsAlterNote       $03
00087BA4 01                         	dc.b	$01
00087BA5 E1FD                       	smpsAlterNote       $FD
00087BA7 01                         	dc.b	$01
00087BA8 E1F9                       	smpsAlterNote       $F9
00087BAA 01                         	dc.b	$01
00087BAB E1FD                       	smpsAlterNote       $FD
00087BAD 01                         	dc.b	$01
00087BAE E100                       	smpsAlterNote       $00
00087BB0 01                         	dc.b	$01
00087BB1 E104                       	smpsAlterNote       $04
00087BB3 01                         	dc.b	$01
00087BB4 E1FD                       	smpsAlterNote       $FD
00087BB6 ECF5                       	smpsPSGAlterVol     $F5
00087BB8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00087BBC E100                       	smpsAlterNote       $00
00087BBE E701                       	dc.b	smpsNoAttack, $01
00087BC0 E104                       	smpsAlterNote       $04
00087BC2 E701                       	dc.b	smpsNoAttack, $01
00087BC4 E100                       	smpsAlterNote       $00
00087BC6 E701                       	dc.b	smpsNoAttack, $01
00087BC8 E1FD                       	smpsAlterNote       $FD
00087BCA E701                       	dc.b	smpsNoAttack, $01
00087BCC E1F9                       	smpsAlterNote       $F9
00087BCE E701                       	dc.b	smpsNoAttack, $01
00087BD0 E1FD                       	smpsAlterNote       $FD
00087BD2 E701                       	dc.b	smpsNoAttack, $01
00087BD4 E103                       	smpsAlterNote       $03
00087BD6 E701                       	dc.b	smpsNoAttack, $01
00087BD8 E104                       	smpsAlterNote       $04
00087BDA E701                       	dc.b	smpsNoAttack, $01
00087BDC E100                       	smpsAlterNote       $00
00087BDE E701                       	dc.b	smpsNoAttack, $01
00087BE0 E1FA                       	smpsAlterNote       $FA
00087BE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BE6 E1FD                       	smpsAlterNote       $FD
00087BE8 E701                       	dc.b	smpsNoAttack, $01
00087BEA E103                       	smpsAlterNote       $03
00087BEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BF0 E100                       	smpsAlterNote       $00
00087BF2 E701                       	dc.b	smpsNoAttack, $01
00087BF4 E1FA                       	smpsAlterNote       $FA
00087BF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BFA E100                       	smpsAlterNote       $00
00087BFC EC04                       	smpsPSGAlterVol     $04
00087BFE E701                       	dc.b	smpsNoAttack, $01
00087C00 EC07                       	smpsPSGAlterVol     $07
00087C02 E104                       	smpsAlterNote       $04
00087C04 8001                       	dc.b	nRst, $01
00087C06 E103                       	smpsAlterNote       $03
00087C08 01                         	dc.b	$01
00087C09 E1FD                       	smpsAlterNote       $FD
00087C0B 01                         	dc.b	$01
00087C0C E1F9                       	smpsAlterNote       $F9
00087C0E 01                         	dc.b	$01
00087C0F E1FD                       	smpsAlterNote       $FD
00087C11 01                         	dc.b	$01
00087C12 E100                       	smpsAlterNote       $00
00087C14 01                         	dc.b	$01
00087C15 E104                       	smpsAlterNote       $04
00087C17 01                         	dc.b	$01
00087C18 E1FD                       	smpsAlterNote       $FD
00087C1A ECF5                       	smpsPSGAlterVol     $F5
00087C1C 9106                       	dc.b	nE1, $06
00087C1E EC04                       	smpsPSGAlterVol     $04
00087C20 E701                       	dc.b	smpsNoAttack, $01
00087C22 EC07                       	smpsPSGAlterVol     $07
00087C24 8003                       	dc.b	nRst, $03
00087C26 ECF5                       	smpsPSGAlterVol     $F5
00087C28 9106                       	dc.b	nE1, $06
00087C2A EC04                       	smpsPSGAlterVol     $04
00087C2C E701                       	dc.b	smpsNoAttack, $01
00087C2E EC07                       	smpsPSGAlterVol     $07
00087C30 8006                       	dc.b	nRst, $06
00087C32 E100                       	smpsAlterNote       $00
00087C34 01                         	dc.b	$01
00087C35 E104                       	smpsAlterNote       $04
00087C37 01                         	dc.b	$01
00087C38 E100                       	smpsAlterNote       $00
00087C3A 01                         	dc.b	$01
00087C3B E1FD                       	smpsAlterNote       $FD
00087C3D 01                         	dc.b	$01
00087C3E ECF5                       	smpsPSGAlterVol     $F5
00087C40 9206                       	dc.b	nF1, $06
00087C42 EC04                       	smpsPSGAlterVol     $04
00087C44 E701                       	dc.b	smpsNoAttack, $01
00087C46 EC07                       	smpsPSGAlterVol     $07
00087C48 8003                       	dc.b	nRst, $03
00087C4A ECF5                       	smpsPSGAlterVol     $F5
00087C4C 9207                       	dc.b	nF1, $07
00087C4E EC0B                       	smpsPSGAlterVol     $0B
00087C50 8007                       	dc.b	nRst, $07
00087C52 E103                       	smpsAlterNote       $03
00087C54 0101                       	dc.b	$01, $01
00087C56 E1FD                       	smpsAlterNote       $FD
00087C58 01                         	dc.b	$01
00087C59 E1FA                       	smpsAlterNote       $FA
00087C5B 01                         	dc.b	$01
00087C5C E1FD                       	smpsAlterNote       $FD
00087C5E ECF5                       	smpsPSGAlterVol     $F5
00087C60 9106                       	dc.b	nE1, $06
00087C62 EC0B                       	smpsPSGAlterVol     $0B
00087C64 8004                       	dc.b	nRst, $04
00087C66 ECF5                       	smpsPSGAlterVol     $F5
00087C68 9106                       	dc.b	nE1, $06
00087C6A EC04                       	smpsPSGAlterVol     $04
00087C6C E701                       	dc.b	smpsNoAttack, $01
00087C6E EC07                       	smpsPSGAlterVol     $07
00087C70 8006                       	dc.b	nRst, $06
00087C72 E100                       	smpsAlterNote       $00
00087C74 01                         	dc.b	$01
00087C75 E104                       	smpsAlterNote       $04
00087C77 01                         	dc.b	$01
00087C78 E100                       	smpsAlterNote       $00
00087C7A 01                         	dc.b	$01
00087C7B E1FA                       	smpsAlterNote       $FA
00087C7D 01                         	dc.b	$01
00087C7E E1FD                       	smpsAlterNote       $FD
00087C80 ECF5                       	smpsPSGAlterVol     $F5
00087C82 9206                       	dc.b	nF1, $06
00087C84 EC04                       	smpsPSGAlterVol     $04
00087C86 E701                       	dc.b	smpsNoAttack, $01
00087C88 EC07                       	smpsPSGAlterVol     $07
00087C8A 8003                       	dc.b	nRst, $03
00087C8C ECF5                       	smpsPSGAlterVol     $F5
00087C8E 9206                       	dc.b	nF1, $06
00087C90 EC04                       	smpsPSGAlterVol     $04
00087C92 E701                       	dc.b	smpsNoAttack, $01
00087C94 EC07                       	smpsPSGAlterVol     $07
00087C96 8006                       	dc.b	nRst, $06
00087C98 E100                       	smpsAlterNote       $00
00087C9A 01                         	dc.b	$01
00087C9B E104                       	smpsAlterNote       $04
00087C9D 01                         	dc.b	$01
00087C9E E103                       	smpsAlterNote       $03
00087CA0 01                         	dc.b	$01
00087CA1 E1FD                       	smpsAlterNote       $FD
00087CA3 01                         	dc.b	$01
00087CA4 ECF5                       	smpsPSGAlterVol     $F5
00087CA6 9107                       	dc.b	nE1, $07
00087CA8 EC0B                       	smpsPSGAlterVol     $0B
00087CAA 8004                       	dc.b	nRst, $04
00087CAC ECF5                       	smpsPSGAlterVol     $F5
00087CAE 9106                       	dc.b	nE1, $06
00087CB0 EC0B                       	smpsPSGAlterVol     $0B
00087CB2 8007                       	dc.b	nRst, $07
00087CB4 E103                       	smpsAlterNote       $03
00087CB6 0101                       	dc.b	$01, $01
00087CB8 E100                       	smpsAlterNote       $00
00087CBA 01                         	dc.b	$01
00087CBB E1FA                       	smpsAlterNote       $FA
00087CBD 01                         	dc.b	$01
00087CBE E1FD                       	smpsAlterNote       $FD
00087CC0 ECF5                       	smpsPSGAlterVol     $F5
00087CC2 9206                       	dc.b	nF1, $06
00087CC4 EC04                       	smpsPSGAlterVol     $04
00087CC6 E701                       	dc.b	smpsNoAttack, $01
00087CC8 EC07                       	smpsPSGAlterVol     $07
00087CCA 8003                       	dc.b	nRst, $03
00087CCC ECF5                       	smpsPSGAlterVol     $F5
00087CCE 9206                       	dc.b	nF1, $06
00087CD0 EC04                       	smpsPSGAlterVol     $04
00087CD2 E701                       	dc.b	smpsNoAttack, $01
00087CD4 EC07                       	smpsPSGAlterVol     $07
00087CD6 8006                       	dc.b	nRst, $06
00087CD8 E100                       	smpsAlterNote       $00
00087CDA 01                         	dc.b	$01
00087CDB E104                       	smpsAlterNote       $04
00087CDD 01                         	dc.b	$01
00087CDE E100                       	smpsAlterNote       $00
00087CE0 01                         	dc.b	$01
00087CE1 E1FD                       	smpsAlterNote       $FD
00087CE3 01                         	dc.b	$01
00087CE4 ECF5                       	smpsPSGAlterVol     $F5
00087CE6 9106                       	dc.b	nE1, $06
00087CE8 EC04                       	smpsPSGAlterVol     $04
00087CEA E701                       	dc.b	smpsNoAttack, $01
00087CEC EC07                       	smpsPSGAlterVol     $07
00087CEE 8003                       	dc.b	nRst, $03
00087CF0 ECF5                       	smpsPSGAlterVol     $F5
00087CF2 9107 9106                  	dc.b	nE1, $07, nE1, $06
00087CF6 EC04                       	smpsPSGAlterVol     $04
00087CF8 E701                       	dc.b	smpsNoAttack, $01
00087CFA ECFC                       	smpsPSGAlterVol     $FC
00087CFC 9103                       	dc.b	nE1, $03
00087CFE EC04                       	smpsPSGAlterVol     $04
00087D00 E701                       	dc.b	smpsNoAttack, $01
00087D02 ECFC                       	smpsPSGAlterVol     $FC
00087D04 9102                       	dc.b	nE1, $02
00087D06 EC04                       	smpsPSGAlterVol     $04
00087D08 E701                       	dc.b	smpsNoAttack, $01
00087D0A ECFC                       	smpsPSGAlterVol     $FC
00087D0C 9103                       	dc.b	nE1, $03
00087D0E EC0B                       	smpsPSGAlterVol     $0B
00087D10 800A                       	dc.b	nRst, $0A
00087D12 E100                       	smpsAlterNote       $00
00087D14 01                         	dc.b	$01
00087D15 E104                       	smpsAlterNote       $04
00087D17 01                         	dc.b	$01
00087D18 E100                       	smpsAlterNote       $00
00087D1A 01                         	dc.b	$01
00087D1B E1FA                       	smpsAlterNote       $FA
00087D1D 01                         	dc.b	$01
00087D1E E1F9                       	smpsAlterNote       $F9
00087D20 01                         	dc.b	$01
00087D21 E1FD                       	smpsAlterNote       $FD
00087D23 01                         	dc.b	$01
00087D24 E103                       	smpsAlterNote       $03
00087D26 0101                       	dc.b	$01, $01
00087D28 E100                       	smpsAlterNote       $00
00087D2A 01                         	dc.b	$01
00087D2B E1FA                       	smpsAlterNote       $FA
00087D2D 0101                       	dc.b	$01, $01
00087D2F E1FD                       	smpsAlterNote       $FD
00087D31 ECF5                       	smpsPSGAlterVol     $F5
00087D33 9206                       	dc.b	nF1, $06
00087D35 EC04                       	smpsPSGAlterVol     $04
00087D37 E704                       	dc.b	smpsNoAttack, $04
00087D39 ECFC                       	smpsPSGAlterVol     $FC
00087D3B 9206                       	dc.b	nF1, $06
00087D3D EC04                       	smpsPSGAlterVol     $04
00087D3F E701                       	dc.b	smpsNoAttack, $01
00087D41 EC07                       	smpsPSGAlterVol     $07
00087D43 8006                       	dc.b	nRst, $06
00087D45 E100                       	smpsAlterNote       $00
00087D47 01                         	dc.b	$01
00087D48 E104                       	smpsAlterNote       $04
00087D4A 01                         	dc.b	$01
00087D4B E103                       	smpsAlterNote       $03
00087D4D 01                         	dc.b	$01
00087D4E E1FD                       	smpsAlterNote       $FD
00087D50 01                         	dc.b	$01
00087D51 ECF5                       	smpsPSGAlterVol     $F5
00087D53 9407                       	dc.b	nG1, $07
00087D55 EC0B                       	smpsPSGAlterVol     $0B
00087D57 8004                       	dc.b	nRst, $04
00087D59 ECF5                       	smpsPSGAlterVol     $F5
00087D5B 9406                       	dc.b	nG1, $06
00087D5D EC0B                       	smpsPSGAlterVol     $0B
00087D5F 8007                       	dc.b	nRst, $07
00087D61 E103                       	smpsAlterNote       $03
00087D63 0101                       	dc.b	$01, $01
00087D65 E1FD                       	smpsAlterNote       $FD
00087D67 01                         	dc.b	$01
00087D68 E1F9                       	smpsAlterNote       $F9
00087D6A 01                         	dc.b	$01
00087D6B E1FD                       	smpsAlterNote       $FD
00087D6D ECF5                       	smpsPSGAlterVol     $F5
00087D6F 9206                       	dc.b	nF1, $06
00087D71 EC04                       	smpsPSGAlterVol     $04
00087D73 E701                       	dc.b	smpsNoAttack, $01
00087D75 EC07                       	smpsPSGAlterVol     $07
00087D77 8003                       	dc.b	nRst, $03
00087D79 ECF5                       	smpsPSGAlterVol     $F5
00087D7B 9206                       	dc.b	nF1, $06
00087D7D EC04                       	smpsPSGAlterVol     $04
00087D7F E701                       	dc.b	smpsNoAttack, $01
00087D81 EC07                       	smpsPSGAlterVol     $07
00087D83 8006                       	dc.b	nRst, $06
00087D85 E100                       	smpsAlterNote       $00
00087D87 01                         	dc.b	$01
00087D88 E104                       	smpsAlterNote       $04
00087D8A 01                         	dc.b	$01
00087D8B E100                       	smpsAlterNote       $00
00087D8D 01                         	dc.b	$01
00087D8E E1FA                       	smpsAlterNote       $FA
00087D90 01                         	dc.b	$01
00087D91 E1FD                       	smpsAlterNote       $FD
00087D93 ECF5                       	smpsPSGAlterVol     $F5
00087D95 9206                       	dc.b	nF1, $06
00087D97 EC04                       	smpsPSGAlterVol     $04
00087D99 E701                       	dc.b	smpsNoAttack, $01
00087D9B EC07                       	smpsPSGAlterVol     $07
00087D9D 8003                       	dc.b	nRst, $03
00087D9F ECF5                       	smpsPSGAlterVol     $F5
00087DA1 9107                       	dc.b	nE1, $07
00087DA3 EC0B                       	smpsPSGAlterVol     $0B
00087DA5 8006                       	dc.b	nRst, $06
00087DA7 E100                       	smpsAlterNote       $00
00087DA9 01                         	dc.b	$01
00087DAA E103                       	smpsAlterNote       $03
00087DAC 0101                       	dc.b	$01, $01
00087DAE E1FD                       	smpsAlterNote       $FD
00087DB0 01                         	dc.b	$01
00087DB1 ECF5                       	smpsPSGAlterVol     $F5
00087DB3 9207                       	dc.b	nF1, $07
00087DB5 EC0B                       	smpsPSGAlterVol     $0B
00087DB7 8004                       	dc.b	nRst, $04
00087DB9 ECF5                       	smpsPSGAlterVol     $F5
00087DBB 9206                       	dc.b	nF1, $06
00087DBD EC04                       	smpsPSGAlterVol     $04
00087DBF E701                       	dc.b	smpsNoAttack, $01
00087DC1 EC07                       	smpsPSGAlterVol     $07
00087DC3 8006                       	dc.b	nRst, $06
00087DC5 E103                       	smpsAlterNote       $03
00087DC7 01                         	dc.b	$01
00087DC8 E104                       	smpsAlterNote       $04
00087DCA 01                         	dc.b	$01
00087DCB E100                       	smpsAlterNote       $00
00087DCD 01                         	dc.b	$01
00087DCE E1FB                       	smpsAlterNote       $FB
00087DD0 01                         	dc.b	$01
00087DD1 E1FD                       	smpsAlterNote       $FD
00087DD3 ECF5                       	smpsPSGAlterVol     $F5
00087DD5 9406                       	dc.b	nG1, $06
00087DD7 EC04                       	smpsPSGAlterVol     $04
00087DD9 E701                       	dc.b	smpsNoAttack, $01
00087DDB EC07                       	smpsPSGAlterVol     $07
00087DDD 8003                       	dc.b	nRst, $03
00087DDF ECF5                       	smpsPSGAlterVol     $F5
00087DE1 9406                       	dc.b	nG1, $06
00087DE3 EC04                       	smpsPSGAlterVol     $04
00087DE5 E701                       	dc.b	smpsNoAttack, $01
00087DE7 EC07                       	smpsPSGAlterVol     $07
00087DE9 8006                       	dc.b	nRst, $06
00087DEB E100                       	smpsAlterNote       $00
00087DED 01                         	dc.b	$01
00087DEE E104                       	smpsAlterNote       $04
00087DF0 01                         	dc.b	$01
00087DF1 E100                       	smpsAlterNote       $00
00087DF3 01                         	dc.b	$01
00087DF4 E1FD                       	smpsAlterNote       $FD
00087DF6 01                         	dc.b	$01
00087DF7 ECF5                       	smpsPSGAlterVol     $F5
00087DF9 9206                       	dc.b	nF1, $06
00087DFB EC04                       	smpsPSGAlterVol     $04
00087DFD E701                       	dc.b	smpsNoAttack, $01
00087DFF EC07                       	smpsPSGAlterVol     $07
00087E01 8003                       	dc.b	nRst, $03
00087E03 ECF5                       	smpsPSGAlterVol     $F5
00087E05 9207                       	dc.b	nF1, $07
00087E07 EC0B                       	smpsPSGAlterVol     $0B
00087E09 8007                       	dc.b	nRst, $07
00087E0B E103                       	smpsAlterNote       $03
00087E0D 0101                       	dc.b	$01, $01
00087E0F E1FD                       	smpsAlterNote       $FD
00087E11 01                         	dc.b	$01
00087E12 E1FA                       	smpsAlterNote       $FA
00087E14 01                         	dc.b	$01
00087E15 E1FD                       	smpsAlterNote       $FD
00087E17 ECF5                       	smpsPSGAlterVol     $F5
00087E19 9206                       	dc.b	nF1, $06
00087E1B EC0B                       	smpsPSGAlterVol     $0B
00087E1D 8004                       	dc.b	nRst, $04
00087E1F ECF5                       	smpsPSGAlterVol     $F5
00087E21 9206                       	dc.b	nF1, $06
00087E23 EC04                       	smpsPSGAlterVol     $04
00087E25 E701                       	dc.b	smpsNoAttack, $01
00087E27 EC07                       	smpsPSGAlterVol     $07
00087E29 8006                       	dc.b	nRst, $06
00087E2B E100                       	smpsAlterNote       $00
00087E2D 01                         	dc.b	$01
00087E2E E104                       	smpsAlterNote       $04
00087E30 01                         	dc.b	$01
00087E31 E100                       	smpsAlterNote       $00
00087E33 01                         	dc.b	$01
00087E34 E1FA                       	smpsAlterNote       $FA
00087E36 01                         	dc.b	$01
00087E37 E1FD                       	smpsAlterNote       $FD
00087E39 ECF5                       	smpsPSGAlterVol     $F5
00087E3B 9206                       	dc.b	nF1, $06
00087E3D EC04                       	smpsPSGAlterVol     $04
00087E3F E701                       	dc.b	smpsNoAttack, $01
00087E41 EC07                       	smpsPSGAlterVol     $07
00087E43 8003                       	dc.b	nRst, $03
00087E45 ECF5                       	smpsPSGAlterVol     $F5
00087E47 9207                       	dc.b	nF1, $07
00087E49 EC0B                       	smpsPSGAlterVol     $0B
00087E4B 8006                       	dc.b	nRst, $06
00087E4D E100                       	smpsAlterNote       $00
00087E4F 01                         	dc.b	$01
00087E50 E103                       	smpsAlterNote       $03
00087E52 0101                       	dc.b	$01, $01
00087E54 E1FD                       	smpsAlterNote       $FD
00087E56 01                         	dc.b	$01
00087E57 ECF5                       	smpsPSGAlterVol     $F5
00087E59 9207                       	dc.b	nF1, $07
00087E5B EC0B                       	smpsPSGAlterVol     $0B
00087E5D 8004                       	dc.b	nRst, $04
00087E5F ECF5                       	smpsPSGAlterVol     $F5
00087E61 9206                       	dc.b	nF1, $06
00087E63 EC0B                       	smpsPSGAlterVol     $0B
00087E65 8007                       	dc.b	nRst, $07
00087E67 E103                       	smpsAlterNote       $03
00087E69 0101                       	dc.b	$01, $01
00087E6B E100                       	smpsAlterNote       $00
00087E6D 01                         	dc.b	$01
00087E6E E1FA                       	smpsAlterNote       $FA
00087E70 01                         	dc.b	$01
00087E71 E1FD                       	smpsAlterNote       $FD
00087E73 ECF5                       	smpsPSGAlterVol     $F5
00087E75 9206                       	dc.b	nF1, $06
00087E77 EC04                       	smpsPSGAlterVol     $04
00087E79 E701                       	dc.b	smpsNoAttack, $01
00087E7B EC07                       	smpsPSGAlterVol     $07
00087E7D 8003                       	dc.b	nRst, $03
00087E7F ECF5                       	smpsPSGAlterVol     $F5
00087E81 9206                       	dc.b	nF1, $06
00087E83 EC04                       	smpsPSGAlterVol     $04
00087E85 E701                       	dc.b	smpsNoAttack, $01
00087E87 EC07                       	smpsPSGAlterVol     $07
00087E89 8006                       	dc.b	nRst, $06
00087E8B E100                       	smpsAlterNote       $00
00087E8D 01                         	dc.b	$01
00087E8E E104                       	smpsAlterNote       $04
00087E90 01                         	dc.b	$01
00087E91 E100                       	smpsAlterNote       $00
00087E93 01                         	dc.b	$01
00087E94 E1FD                       	smpsAlterNote       $FD
00087E96 01                         	dc.b	$01
00087E97 ECF5                       	smpsPSGAlterVol     $F5
00087E99 9206                       	dc.b	nF1, $06
00087E9B EC04                       	smpsPSGAlterVol     $04
00087E9D E701                       	dc.b	smpsNoAttack, $01
00087E9F EC07                       	smpsPSGAlterVol     $07
00087EA1 8003                       	dc.b	nRst, $03
00087EA3 ECF5                       	smpsPSGAlterVol     $F5
00087EA5 9207                       	dc.b	nF1, $07
00087EA7 EC0B                       	smpsPSGAlterVol     $0B
00087EA9 8007                       	dc.b	nRst, $07
00087EAB E104                       	smpsAlterNote       $04
00087EAD 0101                       	dc.b	$01, $01
00087EAF E1FB                       	smpsAlterNote       $FB
00087EB1 01                         	dc.b	$01
00087EB2 E1F6                       	smpsAlterNote       $F6
00087EB4 0101                       	dc.b	$01, $01
00087EB6 E1FF                       	smpsAlterNote       $FF
00087EB8 01                         	dc.b	$01
00087EB9 E105                       	smpsAlterNote       $05
00087EBB 01                         	dc.b	$01
00087EBC E104                       	smpsAlterNote       $04
00087EBE 01                         	dc.b	$01
00087EBF E1FB                       	smpsAlterNote       $FB
00087EC1 01                         	dc.b	$01
00087EC2 E1F5                       	smpsAlterNote       $F5
00087EC4 01                         	dc.b	$01
00087EC5 E1FC                       	smpsAlterNote       $FC
00087EC7 ECF5                       	smpsPSGAlterVol     $F5
00087EC9 8B0E                       	dc.b	nBb0, $0E
00087ECB E102                       	smpsAlterNote       $02
00087ECD EC0B                       	smpsPSGAlterVol     $0B
00087ECF 8001                       	dc.b	nRst, $01
00087ED1 E101                       	smpsAlterNote       $01
00087ED3 01                         	dc.b	$01
00087ED4 E1FC                       	smpsAlterNote       $FC
00087ED6 01                         	dc.b	$01
00087ED7 E1F9                       	smpsAlterNote       $F9
00087ED9 0101                       	dc.b	$01, $01
00087EDB E1FF                       	smpsAlterNote       $FF
00087EDD 01                         	dc.b	$01
00087EDE E102                       	smpsAlterNote       $02
00087EE0 01                         	dc.b	$01
00087EE1 E1FF                       	smpsAlterNote       $FF
00087EE3 01                         	dc.b	$01
00087EE4 E1FC                       	smpsAlterNote       $FC
00087EE6 01                         	dc.b	$01
00087EE7 E1F8                       	smpsAlterNote       $F8
00087EE9 01                         	dc.b	$01
00087EEA E1FC                       	smpsAlterNote       $FC
00087EEC 01                         	dc.b	$01
00087EED E101                       	smpsAlterNote       $01
00087EEF 01                         	dc.b	$01
00087EF0 E102                       	smpsAlterNote       $02
00087EF2 01                         	dc.b	$01
00087EF3 E1FF                       	smpsAlterNote       $FF
00087EF5 01                         	dc.b	$01
00087EF6 E1FB                       	smpsAlterNote       $FB
00087EF8 ECF5                       	smpsPSGAlterVol     $F5
00087EFA 8D0D                       	dc.b	nC1, $0D
00087EFC E101                       	smpsAlterNote       $01
00087EFE EC0B                       	smpsPSGAlterVol     $0B
00087F00 8001                       	dc.b	nRst, $01
00087F02 E102                       	smpsAlterNote       $02
00087F04 01                         	dc.b	$01
00087F05 E1FF                       	smpsAlterNote       $FF
00087F07 01                         	dc.b	$01
00087F08 E1F9                       	smpsAlterNote       $F9
00087F0A 0101                       	dc.b	$01, $01
00087F0C E1FC                       	smpsAlterNote       $FC
00087F0E 01                         	dc.b	$01
00087F0F E101                       	smpsAlterNote       $01
00087F11 0101                       	dc.b	$01, $01
00087F13 E1FC                       	smpsAlterNote       $FC
00087F15 01                         	dc.b	$01
00087F16 E1F9                       	smpsAlterNote       $F9
00087F18 0101                       	dc.b	$01, $01
00087F1A E1FF                       	smpsAlterNote       $FF
00087F1C 01                         	dc.b	$01
00087F1D E102                       	smpsAlterNote       $02
00087F1F 01                         	dc.b	$01
00087F20 E101                       	smpsAlterNote       $01
00087F22 01                         	dc.b	$01
00087F23 E1FC                       	smpsAlterNote       $FC
00087F25 ECF5                       	smpsPSGAlterVol     $F5
00087F27 8F0D                       	dc.b	nD1, $0D
00087F29 E1FF                       	smpsAlterNote       $FF
00087F2B EC04                       	smpsPSGAlterVol     $04
00087F2D E701                       	dc.b	smpsNoAttack, $01
00087F2F EC07                       	smpsPSGAlterVol     $07
00087F31 E103                       	smpsAlterNote       $03
00087F33 8001                       	dc.b	nRst, $01
00087F35 E102                       	smpsAlterNote       $02
00087F37 01                         	dc.b	$01
00087F38 E1FD                       	smpsAlterNote       $FD
00087F3A 01                         	dc.b	$01
00087F3B E1F9                       	smpsAlterNote       $F9
00087F3D 01                         	dc.b	$01
00087F3E E1FD                       	smpsAlterNote       $FD
00087F40 01                         	dc.b	$01
00087F41 E100                       	smpsAlterNote       $00
00087F43 01                         	dc.b	$01
00087F44 E103                       	smpsAlterNote       $03
00087F46 01                         	dc.b	$01
00087F47 E100                       	smpsAlterNote       $00
00087F49 01                         	dc.b	$01
00087F4A E1FA                       	smpsAlterNote       $FA
00087F4C 01                         	dc.b	$01
00087F4D E1F9                       	smpsAlterNote       $F9
00087F4F 01                         	dc.b	$01
00087F50 E1FD                       	smpsAlterNote       $FD
00087F52 01                         	dc.b	$01
00087F53 E102                       	smpsAlterNote       $02
00087F55 0101                       	dc.b	$01, $01
00087F57 E100                       	smpsAlterNote       $00
00087F59 01                         	dc.b	$01
00087F5A E1FD                       	smpsAlterNote       $FD
00087F5C ECF5                       	smpsPSGAlterVol     $F5
00087F5E 910D                       	dc.b	nE1, $0D
00087F60 E103                       	smpsAlterNote       $03
00087F62 EC0B                       	smpsPSGAlterVol     $0B
00087F64 8001 01                    	dc.b	nRst, $01, $01
00087F67 E100                       	smpsAlterNote       $00
00087F69 01                         	dc.b	$01
00087F6A E1FA                       	smpsAlterNote       $FA
00087F6C 0101                       	dc.b	$01, $01
00087F6E E100                       	smpsAlterNote       $00
00087F70 01                         	dc.b	$01
00087F71 E103                       	smpsAlterNote       $03
00087F73 01                         	dc.b	$01
00087F74 E1FD                       	smpsAlterNote       $FD
00087F76 ECF5                       	smpsPSGAlterVol     $F5
00087F78 9206                       	dc.b	nF1, $06
00087F7A EC04                       	smpsPSGAlterVol     $04
00087F7C E701                       	dc.b	smpsNoAttack, $01
00087F7E EC07                       	smpsPSGAlterVol     $07
00087F80 8003                       	dc.b	nRst, $03
00087F82 ECF5                       	smpsPSGAlterVol     $F5
00087F84 9207                       	dc.b	nF1, $07
00087F86 EC0B                       	smpsPSGAlterVol     $0B
00087F88 8006                       	dc.b	nRst, $06
00087F8A E100                       	smpsAlterNote       $00
00087F8C 01                         	dc.b	$01
00087F8D E103                       	smpsAlterNote       $03
00087F8F 0101                       	dc.b	$01, $01
00087F91 E1FD                       	smpsAlterNote       $FD
00087F93 01                         	dc.b	$01
00087F94 ECF5                       	smpsPSGAlterVol     $F5
00087F96 9407                       	dc.b	nG1, $07
00087F98 EC0B                       	smpsPSGAlterVol     $0B
00087F9A 8004                       	dc.b	nRst, $04
00087F9C ECF5                       	smpsPSGAlterVol     $F5
00087F9E 9406                       	dc.b	nG1, $06
00087FA0 EC04                       	smpsPSGAlterVol     $04
00087FA2 E701                       	dc.b	smpsNoAttack, $01
00087FA4 EC07                       	smpsPSGAlterVol     $07
00087FA6 8006                       	dc.b	nRst, $06
00087FA8 E103                       	smpsAlterNote       $03
00087FAA 01                         	dc.b	$01
00087FAB E104                       	smpsAlterNote       $04
00087FAD 01                         	dc.b	$01
00087FAE E100                       	smpsAlterNote       $00
00087FB0 01                         	dc.b	$01
00087FB1 E1F9                       	smpsAlterNote       $F9
00087FB3 01                         	dc.b	$01
00087FB4 E1FD                       	smpsAlterNote       $FD
00087FB6 ECF5                       	smpsPSGAlterVol     $F5
00087FB8 9206                       	dc.b	nF1, $06
00087FBA EC04                       	smpsPSGAlterVol     $04
00087FBC E701                       	dc.b	smpsNoAttack, $01
00087FBE EC07                       	smpsPSGAlterVol     $07
00087FC0 8003                       	dc.b	nRst, $03
00087FC2 ECF5                       	smpsPSGAlterVol     $F5
00087FC4 9206                       	dc.b	nF1, $06
00087FC6 EC04                       	smpsPSGAlterVol     $04
00087FC8 E701                       	dc.b	smpsNoAttack, $01
00087FCA EC07                       	smpsPSGAlterVol     $07
00087FCC 8006                       	dc.b	nRst, $06
00087FCE E100                       	smpsAlterNote       $00
00087FD0 01                         	dc.b	$01
00087FD1 E104                       	smpsAlterNote       $04
00087FD3 01                         	dc.b	$01
00087FD4 E103                       	smpsAlterNote       $03
00087FD6 01                         	dc.b	$01
00087FD7 E1FD                       	smpsAlterNote       $FD
00087FD9 01                         	dc.b	$01
00087FDA ECF5                       	smpsPSGAlterVol     $F5
00087FDC 9407                       	dc.b	nG1, $07
00087FDE EC0B                       	smpsPSGAlterVol     $0B
00087FE0 8004                       	dc.b	nRst, $04
00087FE2 ECF5                       	smpsPSGAlterVol     $F5
00087FE4 9406                       	dc.b	nG1, $06
00087FE6 EC0B                       	smpsPSGAlterVol     $0B
00087FE8 8007                       	dc.b	nRst, $07
00087FEA E103                       	smpsAlterNote       $03
00087FEC 0101                       	dc.b	$01, $01
00087FEE E100                       	smpsAlterNote       $00
00087FF0 01                         	dc.b	$01
00087FF1 E1F9                       	smpsAlterNote       $F9
00087FF3 01                         	dc.b	$01
00087FF4 E1FD                       	smpsAlterNote       $FD
00087FF6 ECF5                       	smpsPSGAlterVol     $F5
00087FF8 9206                       	dc.b	nF1, $06
00087FFA EC04                       	smpsPSGAlterVol     $04
00087FFC E701                       	dc.b	smpsNoAttack, $01
00087FFE EC07                       	smpsPSGAlterVol     $07
00088000 8003                       	dc.b	nRst, $03
00088002 ECF5                       	smpsPSGAlterVol     $F5
00088004 9206                       	dc.b	nF1, $06
00088006 EC04                       	smpsPSGAlterVol     $04
00088008 E701                       	dc.b	smpsNoAttack, $01
0008800A EC07                       	smpsPSGAlterVol     $07
0008800C 8006                       	dc.b	nRst, $06
0008800E E100                       	smpsAlterNote       $00
00088010 01                         	dc.b	$01
00088011 E104                       	smpsAlterNote       $04
00088013 01                         	dc.b	$01
00088014 E100                       	smpsAlterNote       $00
00088016 01                         	dc.b	$01
00088017 E1FB                       	smpsAlterNote       $FB
00088019 01                         	dc.b	$01
0008801A E1FD                       	smpsAlterNote       $FD
0008801C ECF5                       	smpsPSGAlterVol     $F5
0008801E 9406                       	dc.b	nG1, $06
00088020 EC04                       	smpsPSGAlterVol     $04
00088022 E701                       	dc.b	smpsNoAttack, $01
00088024 EC07                       	smpsPSGAlterVol     $07
00088026 8003                       	dc.b	nRst, $03
00088028 ECF5                       	smpsPSGAlterVol     $F5
0008802A 9407                       	dc.b	nG1, $07
0008802C EC0B                       	smpsPSGAlterVol     $0B
0008802E 8006                       	dc.b	nRst, $06
00088030 E100                       	smpsAlterNote       $00
00088032 01                         	dc.b	$01
00088033 E103                       	smpsAlterNote       $03
00088035 0101                       	dc.b	$01, $01
00088037 E1FD                       	smpsAlterNote       $FD
00088039 01                         	dc.b	$01
0008803A ECF5                       	smpsPSGAlterVol     $F5
0008803C 9207                       	dc.b	nF1, $07
0008803E EC0B                       	smpsPSGAlterVol     $0B
00088040 8004                       	dc.b	nRst, $04
00088042 ECF5                       	smpsPSGAlterVol     $F5
00088044 9206                       	dc.b	nF1, $06
00088046 EC04                       	smpsPSGAlterVol     $04
00088048 E701                       	dc.b	smpsNoAttack, $01
0008804A ECFC                       	smpsPSGAlterVol     $FC
0008804C E1FC                       	smpsAlterNote       $FC
0008804E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00088052 EC04                       	smpsPSGAlterVol     $04
00088054 E701                       	dc.b	smpsNoAttack, $01
00088056 ECFC                       	smpsPSGAlterVol     $FC
00088058 9003                       	dc.b	nEb1, $03
0008805A E1FD                       	smpsAlterNote       $FD
0008805C 9403                       	dc.b	nG1, $03
0008805E EC04                       	smpsPSGAlterVol     $04
00088060 E701                       	dc.b	smpsNoAttack, $01
00088062 E1FE                       	smpsAlterNote       $FE
00088064 ECFC                       	smpsPSGAlterVol     $FC
00088066 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008806A EC04                       	smpsPSGAlterVol     $04
0008806C E701                       	dc.b	smpsNoAttack, $01
0008806E EC07                       	smpsPSGAlterVol     $07
00088070 8009                       	dc.b	nRst, $09
00088072 E100                       	smpsAlterNote       $00
00088074 01                         	dc.b	$01
00088075 F6F5 19                    	smpsJump            music84_Jump07
00088078                            
00088078                            ; PSG2 Data
00088078                            music84_PSG2:
00088078 E1FC                       	smpsAlterNote       $FC
0008807A EC04                       	smpsPSGAlterVol     $04
0008807C 8F03                       	dc.b	nD1, $03
0008807E E1FD                       	smpsAlterNote       $FD
00088080 9203                       	dc.b	nF1, $03
00088082 EC04                       	smpsPSGAlterVol     $04
00088084 E701                       	dc.b	smpsNoAttack, $01
00088086 E1FE                       	smpsAlterNote       $FE
00088088 ECFC                       	smpsPSGAlterVol     $FC
0008808A 9603                       	dc.b	nA1, $03
0008808C E1FD                       	smpsAlterNote       $FD
0008808E 9103                       	dc.b	nE1, $03
00088090 EC04                       	smpsPSGAlterVol     $04
00088092 E701                       	dc.b	smpsNoAttack, $01
00088094 ECFC                       	smpsPSGAlterVol     $FC
00088096 9403                       	dc.b	nG1, $03
00088098 E1FE                       	smpsAlterNote       $FE
0008809A 9703                       	dc.b	nBb1, $03
0008809C EC04                       	smpsPSGAlterVol     $04
0008809E E701                       	dc.b	smpsNoAttack, $01
000880A0 E1FF                       	smpsAlterNote       $FF
000880A2 ECFC                       	smpsPSGAlterVol     $FC
000880A4 9B02                       	dc.b	nD2, $02
000880A6 EC04                       	smpsPSGAlterVol     $04
000880A8 E701                       	dc.b	smpsNoAttack, $01
000880AA ECFC                       	smpsPSGAlterVol     $FC
000880AC E1FE                       	smpsAlterNote       $FE
000880AE 9A03                       	dc.b	nCs2, $03
000880B0 EC0B                       	smpsPSGAlterVol     $0B
000880B2 800A                       	dc.b	nRst, $0A
000880B4 E102                       	smpsAlterNote       $02
000880B6 01                         	dc.b	$01
000880B7 E10A                       	smpsAlterNote       $0A
000880B9 01                         	dc.b	$01
000880BA E102                       	smpsAlterNote       $02
000880BC 01                         	dc.b	$01
000880BD E1FC                       	smpsAlterNote       $FC
000880BF 01                         	dc.b	$01
000880C0 E10A                       	smpsAlterNote       $0A
000880C2 01                         	dc.b	$01
000880C3 E1FC                       	smpsAlterNote       $FC
000880C5 01                         	dc.b	$01
000880C6 E108                       	smpsAlterNote       $08
000880C8 01                         	dc.b	$01
000880C9 E10A                       	smpsAlterNote       $0A
000880CB 01                         	dc.b	$01
000880CC E102                       	smpsAlterNote       $02
000880CE 01                         	dc.b	$01
000880CF E1F7                       	smpsAlterNote       $F7
000880D1 0101                       	dc.b	$01, $01
000880D3 E102                       	smpsAlterNote       $02
000880D5 01                         	dc.b	$01
000880D6 E108                       	smpsAlterNote       $08
000880D8 0101                       	dc.b	$01, $01
000880DA E1FC                       	smpsAlterNote       $FC
000880DC 01                         	dc.b	$01
000880DD E10A                       	smpsAlterNote       $0A
000880DF 01                         	dc.b	$01
000880E0 E1F7                       	smpsAlterNote       $F7
000880E2 01                         	dc.b	$01
000880E3 E102                       	smpsAlterNote       $02
000880E5 01                         	dc.b	$01
000880E6 E10A                       	smpsAlterNote       $0A
000880E8 01                         	dc.b	$01
000880E9 E102                       	smpsAlterNote       $02
000880EB 01                         	dc.b	$01
000880EC E1FC                       	smpsAlterNote       $FC
000880EE 01                         	dc.b	$01
000880EF                            
000880EF                            music84_Jump06:
000880EF E10A                       	smpsAlterNote       $0A
000880F1 8001                       	dc.b	nRst, $01
000880F3 E1FC                       	smpsAlterNote       $FC
000880F5 01                         	dc.b	$01
000880F6 E108                       	smpsAlterNote       $08
000880F8 01                         	dc.b	$01
000880F9 E10A                       	smpsAlterNote       $0A
000880FB 01                         	dc.b	$01
000880FC E1FC                       	smpsAlterNote       $FC
000880FE ECF5                       	smpsPSGAlterVol     $F5
00088100 8F06                       	dc.b	nD1, $06
00088102 EC04                       	smpsPSGAlterVol     $04
00088104 E701                       	dc.b	smpsNoAttack, $01
00088106 EC07                       	smpsPSGAlterVol     $07
00088108 8003                       	dc.b	nRst, $03
0008810A ECF5                       	smpsPSGAlterVol     $F5
0008810C 8F06                       	dc.b	nD1, $06
0008810E EC04                       	smpsPSGAlterVol     $04
00088110 E701                       	dc.b	smpsNoAttack, $01
00088112 EC07                       	smpsPSGAlterVol     $07
00088114 8006                       	dc.b	nRst, $06
00088116 E1FF                       	smpsAlterNote       $FF
00088118 01                         	dc.b	$01
00088119 E102                       	smpsAlterNote       $02
0008811B 01                         	dc.b	$01
0008811C E1FF                       	smpsAlterNote       $FF
0008811E 01                         	dc.b	$01
0008811F E1F9                       	smpsAlterNote       $F9
00088121 01                         	dc.b	$01
00088122 E1FC                       	smpsAlterNote       $FC
00088124 ECF5                       	smpsPSGAlterVol     $F5
00088126 9006                       	dc.b	nEb1, $06
00088128 EC04                       	smpsPSGAlterVol     $04
0008812A E701                       	dc.b	smpsNoAttack, $01
0008812C EC07                       	smpsPSGAlterVol     $07
0008812E 8003                       	dc.b	nRst, $03
00088130 ECF5                       	smpsPSGAlterVol     $F5
00088132 9007                       	dc.b	nEb1, $07
00088134 EC0B                       	smpsPSGAlterVol     $0B
00088136 8006                       	dc.b	nRst, $06
00088138 E1FF                       	smpsAlterNote       $FF
0008813A 01                         	dc.b	$01
0008813B E103                       	smpsAlterNote       $03
0008813D 0101                       	dc.b	$01, $01
0008813F E1FC                       	smpsAlterNote       $FC
00088141 01                         	dc.b	$01
00088142 ECF5                       	smpsPSGAlterVol     $F5
00088144 8F07                       	dc.b	nD1, $07
00088146 EC0B                       	smpsPSGAlterVol     $0B
00088148 8004                       	dc.b	nRst, $04
0008814A ECF5                       	smpsPSGAlterVol     $F5
0008814C 8F06                       	dc.b	nD1, $06
0008814E EC04                       	smpsPSGAlterVol     $04
00088150 E701                       	dc.b	smpsNoAttack, $01
00088152 EC07                       	smpsPSGAlterVol     $07
00088154 8006                       	dc.b	nRst, $06
00088156 E102                       	smpsAlterNote       $02
00088158 01                         	dc.b	$01
00088159 E103                       	smpsAlterNote       $03
0008815B 01                         	dc.b	$01
0008815C E1FF                       	smpsAlterNote       $FF
0008815E 01                         	dc.b	$01
0008815F E1F9                       	smpsAlterNote       $F9
00088161 01                         	dc.b	$01
00088162 E1FC                       	smpsAlterNote       $FC
00088164 ECF5                       	smpsPSGAlterVol     $F5
00088166 8F06                       	dc.b	nD1, $06
00088168 EC04                       	smpsPSGAlterVol     $04
0008816A E701                       	dc.b	smpsNoAttack, $01
0008816C EC07                       	smpsPSGAlterVol     $07
0008816E 8003                       	dc.b	nRst, $03
00088170 ECF5                       	smpsPSGAlterVol     $F5
00088172 8F06                       	dc.b	nD1, $06
00088174 EC04                       	smpsPSGAlterVol     $04
00088176 E701                       	dc.b	smpsNoAttack, $01
00088178 EC07                       	smpsPSGAlterVol     $07
0008817A 8006                       	dc.b	nRst, $06
0008817C E1FF                       	smpsAlterNote       $FF
0008817E 01                         	dc.b	$01
0008817F E103                       	smpsAlterNote       $03
00088181 01                         	dc.b	$01
00088182 E1FF                       	smpsAlterNote       $FF
00088184 01                         	dc.b	$01
00088185 E1FC                       	smpsAlterNote       $FC
00088187 01                         	dc.b	$01
00088188 ECF5                       	smpsPSGAlterVol     $F5
0008818A 8F06                       	dc.b	nD1, $06
0008818C EC04                       	smpsPSGAlterVol     $04
0008818E E701                       	dc.b	smpsNoAttack, $01
00088190 EC07                       	smpsPSGAlterVol     $07
00088192 8003                       	dc.b	nRst, $03
00088194 ECF5                       	smpsPSGAlterVol     $F5
00088196 8F07                       	dc.b	nD1, $07
00088198 EC0B                       	smpsPSGAlterVol     $0B
0008819A 8007                       	dc.b	nRst, $07
0008819C E101                       	smpsAlterNote       $01
0008819E 0101                       	dc.b	$01, $01
000881A0 E1FC                       	smpsAlterNote       $FC
000881A2 01                         	dc.b	$01
000881A3 E1F9                       	smpsAlterNote       $F9
000881A5 01                         	dc.b	$01
000881A6 E1FC                       	smpsAlterNote       $FC
000881A8 ECF5                       	smpsPSGAlterVol     $F5
000881AA 9006                       	dc.b	nEb1, $06
000881AC EC0B                       	smpsPSGAlterVol     $0B
000881AE 8004                       	dc.b	nRst, $04
000881B0 ECF5                       	smpsPSGAlterVol     $F5
000881B2 9006                       	dc.b	nEb1, $06
000881B4 EC04                       	smpsPSGAlterVol     $04
000881B6 E701                       	dc.b	smpsNoAttack, $01
000881B8 EC07                       	smpsPSGAlterVol     $07
000881BA 8006                       	dc.b	nRst, $06
000881BC E100                       	smpsAlterNote       $00
000881BE 01                         	dc.b	$01
000881BF E102                       	smpsAlterNote       $02
000881C1 01                         	dc.b	$01
000881C2 E100                       	smpsAlterNote       $00
000881C4 01                         	dc.b	$01
000881C5 E1FD                       	smpsAlterNote       $FD
000881C7 01                         	dc.b	$01
000881C8 E1FF                       	smpsAlterNote       $FF
000881CA ECF5                       	smpsPSGAlterVol     $F5
000881CC 9B06                       	dc.b	nD2, $06
000881CE EC04                       	smpsPSGAlterVol     $04
000881D0 E701                       	dc.b	smpsNoAttack, $01
000881D2 EC07                       	smpsPSGAlterVol     $07
000881D4 8003                       	dc.b	nRst, $03
000881D6 ECF5                       	smpsPSGAlterVol     $F5
000881D8 9B07                       	dc.b	nD2, $07
000881DA EC0B                       	smpsPSGAlterVol     $0B
000881DC 8006                       	dc.b	nRst, $06
000881DE E102                       	smpsAlterNote       $02
000881E0 01                         	dc.b	$01
000881E1 E106                       	smpsAlterNote       $06
000881E3 01                         	dc.b	$01
000881E4 E105                       	smpsAlterNote       $05
000881E6 01                         	dc.b	$01
000881E7 E1FF                       	smpsAlterNote       $FF
000881E9 01                         	dc.b	$01
000881EA ECF5                       	smpsPSGAlterVol     $F5
000881EC 9B07                       	dc.b	nD2, $07
000881EE EC0B                       	smpsPSGAlterVol     $0B
000881F0 8004                       	dc.b	nRst, $04
000881F2 ECF5                       	smpsPSGAlterVol     $F5
000881F4 9B06                       	dc.b	nD2, $06
000881F6 EC0B                       	smpsPSGAlterVol     $0B
000881F8 8007                       	dc.b	nRst, $07
000881FA E105                       	smpsAlterNote       $05
000881FC 0101                       	dc.b	$01, $01
000881FE E102                       	smpsAlterNote       $02
00088200 01                         	dc.b	$01
00088201 E1FC                       	smpsAlterNote       $FC
00088203 01                         	dc.b	$01
00088204 E1FF                       	smpsAlterNote       $FF
00088206 ECF5                       	smpsPSGAlterVol     $F5
00088208 9B06                       	dc.b	nD2, $06
0008820A EC04                       	smpsPSGAlterVol     $04
0008820C E701                       	dc.b	smpsNoAttack, $01
0008820E EC07                       	smpsPSGAlterVol     $07
00088210 8003                       	dc.b	nRst, $03
00088212 ECF5                       	smpsPSGAlterVol     $F5
00088214 9B06                       	dc.b	nD2, $06
00088216 EC04                       	smpsPSGAlterVol     $04
00088218 E701                       	dc.b	smpsNoAttack, $01
0008821A EC07                       	smpsPSGAlterVol     $07
0008821C 8006                       	dc.b	nRst, $06
0008821E E102                       	smpsAlterNote       $02
00088220 01                         	dc.b	$01
00088221 E106                       	smpsAlterNote       $06
00088223 01                         	dc.b	$01
00088224 E102                       	smpsAlterNote       $02
00088226 01                         	dc.b	$01
00088227 E1FF                       	smpsAlterNote       $FF
00088229 01                         	dc.b	$01
0008822A ECF5                       	smpsPSGAlterVol     $F5
0008822C 9B06                       	dc.b	nD2, $06
0008822E EC04                       	smpsPSGAlterVol     $04
00088230 E701                       	dc.b	smpsNoAttack, $01
00088232 EC07                       	smpsPSGAlterVol     $07
00088234 8003                       	dc.b	nRst, $03
00088236 ECF5                       	smpsPSGAlterVol     $F5
00088238 9B07                       	dc.b	nD2, $07
0008823A EC0B                       	smpsPSGAlterVol     $0B
0008823C 8007                       	dc.b	nRst, $07
0008823E E105                       	smpsAlterNote       $05
00088240 0101                       	dc.b	$01, $01
00088242 E1FF                       	smpsAlterNote       $FF
00088244 01                         	dc.b	$01
00088245 E1FC                       	smpsAlterNote       $FC
00088247 01                         	dc.b	$01
00088248 E1FF                       	smpsAlterNote       $FF
0008824A ECF5                       	smpsPSGAlterVol     $F5
0008824C 9B06                       	dc.b	nD2, $06
0008824E EC0B                       	smpsPSGAlterVol     $0B
00088250 8004                       	dc.b	nRst, $04
00088252 ECF5                       	smpsPSGAlterVol     $F5
00088254 9B06                       	dc.b	nD2, $06
00088256 EC04                       	smpsPSGAlterVol     $04
00088258 E701                       	dc.b	smpsNoAttack, $01
0008825A EC07                       	smpsPSGAlterVol     $07
0008825C 8006                       	dc.b	nRst, $06
0008825E E105                       	smpsAlterNote       $05
00088260 01                         	dc.b	$01
00088261 E106                       	smpsAlterNote       $06
00088263 01                         	dc.b	$01
00088264 E102                       	smpsAlterNote       $02
00088266 01                         	dc.b	$01
00088267 E1FC                       	smpsAlterNote       $FC
00088269 01                         	dc.b	$01
0008826A E1FF                       	smpsAlterNote       $FF
0008826C ECF5                       	smpsPSGAlterVol     $F5
0008826E 9B06                       	dc.b	nD2, $06
00088270 EC04                       	smpsPSGAlterVol     $04
00088272 E701                       	dc.b	smpsNoAttack, $01
00088274 EC07                       	smpsPSGAlterVol     $07
00088276 8003                       	dc.b	nRst, $03
00088278 ECF5                       	smpsPSGAlterVol     $F5
0008827A 9B06                       	dc.b	nD2, $06
0008827C EC04                       	smpsPSGAlterVol     $04
0008827E E701                       	dc.b	smpsNoAttack, $01
00088280 EC07                       	smpsPSGAlterVol     $07
00088282 8006                       	dc.b	nRst, $06
00088284 E102                       	smpsAlterNote       $02
00088286 01                         	dc.b	$01
00088287 E106                       	smpsAlterNote       $06
00088289 01                         	dc.b	$01
0008828A E105                       	smpsAlterNote       $05
0008828C 01                         	dc.b	$01
0008828D E1FF                       	smpsAlterNote       $FF
0008828F 01                         	dc.b	$01
00088290 ECF5                       	smpsPSGAlterVol     $F5
00088292 9B07                       	dc.b	nD2, $07
00088294 EC0B                       	smpsPSGAlterVol     $0B
00088296 8004                       	dc.b	nRst, $04
00088298 ECF5                       	smpsPSGAlterVol     $F5
0008829A 9B06                       	dc.b	nD2, $06
0008829C EC0B                       	smpsPSGAlterVol     $0B
0008829E 8007                       	dc.b	nRst, $07
000882A0 E105                       	smpsAlterNote       $05
000882A2 0101                       	dc.b	$01, $01
000882A4 E102                       	smpsAlterNote       $02
000882A6 01                         	dc.b	$01
000882A7 E1FC                       	smpsAlterNote       $FC
000882A9 01                         	dc.b	$01
000882AA E1FF                       	smpsAlterNote       $FF
000882AC ECF5                       	smpsPSGAlterVol     $F5
000882AE 9B06                       	dc.b	nD2, $06
000882B0 EC04                       	smpsPSGAlterVol     $04
000882B2 E701                       	dc.b	smpsNoAttack, $01
000882B4 EC07                       	smpsPSGAlterVol     $07
000882B6 8003                       	dc.b	nRst, $03
000882B8 ECF5                       	smpsPSGAlterVol     $F5
000882BA 9B06                       	dc.b	nD2, $06
000882BC EC04                       	smpsPSGAlterVol     $04
000882BE E701                       	dc.b	smpsNoAttack, $01
000882C0 EC07                       	smpsPSGAlterVol     $07
000882C2 8006                       	dc.b	nRst, $06
000882C4 E102                       	smpsAlterNote       $02
000882C6 01                         	dc.b	$01
000882C7 E106                       	smpsAlterNote       $06
000882C9 01                         	dc.b	$01
000882CA E102                       	smpsAlterNote       $02
000882CC 01                         	dc.b	$01
000882CD E1FF                       	smpsAlterNote       $FF
000882CF 01                         	dc.b	$01
000882D0 ECF5                       	smpsPSGAlterVol     $F5
000882D2 9B06                       	dc.b	nD2, $06
000882D4 EC04                       	smpsPSGAlterVol     $04
000882D6 E701                       	dc.b	smpsNoAttack, $01
000882D8 EC07                       	smpsPSGAlterVol     $07
000882DA 8003                       	dc.b	nRst, $03
000882DC ECF5                       	smpsPSGAlterVol     $F5
000882DE 9B07                       	dc.b	nD2, $07
000882E0 E1FE                       	smpsAlterNote       $FE
000882E2 9706                       	dc.b	nBb1, $06
000882E4 EC04                       	smpsPSGAlterVol     $04
000882E6 E701                       	dc.b	smpsNoAttack, $01
000882E8 ECFC                       	smpsPSGAlterVol     $FC
000882EA 9703                       	dc.b	nBb1, $03
000882EC EC04                       	smpsPSGAlterVol     $04
000882EE E701                       	dc.b	smpsNoAttack, $01
000882F0 ECFC                       	smpsPSGAlterVol     $FC
000882F2 9702                       	dc.b	nBb1, $02
000882F4 EC04                       	smpsPSGAlterVol     $04
000882F6 E701                       	dc.b	smpsNoAttack, $01
000882F8 ECFC                       	smpsPSGAlterVol     $FC
000882FA 9606                       	dc.b	nA1, $06
000882FC EC04                       	smpsPSGAlterVol     $04
000882FE E701                       	dc.b	smpsNoAttack, $01
00088300 EC07                       	smpsPSGAlterVol     $07
00088302 8006                       	dc.b	nRst, $06
00088304 E101                       	smpsAlterNote       $01
00088306 01                         	dc.b	$01
00088307 E107                       	smpsAlterNote       $07
00088309 01                         	dc.b	$01
0008830A E101                       	smpsAlterNote       $01
0008830C 01                         	dc.b	$01
0008830D E1F8                       	smpsAlterNote       $F8
0008830F 01                         	dc.b	$01
00088310 E1F7                       	smpsAlterNote       $F7
00088312 01                         	dc.b	$01
00088313 E1FC                       	smpsAlterNote       $FC
00088315 01                         	dc.b	$01
00088316 E106                       	smpsAlterNote       $06
00088318 01                         	dc.b	$01
00088319 E107                       	smpsAlterNote       $07
0008831B 01                         	dc.b	$01
0008831C E101                       	smpsAlterNote       $01
0008831E 01                         	dc.b	$01
0008831F E1F8                       	smpsAlterNote       $F8
00088321 0101                       	dc.b	$01, $01
00088323 E1FC                       	smpsAlterNote       $FC
00088325 ECF5                       	smpsPSGAlterVol     $F5
00088327 8F06                       	dc.b	nD1, $06
00088329 EC04                       	smpsPSGAlterVol     $04
0008832B E701                       	dc.b	smpsNoAttack, $01
0008832D EC07                       	smpsPSGAlterVol     $07
0008832F 8003                       	dc.b	nRst, $03
00088331 ECF5                       	smpsPSGAlterVol     $F5
00088333 8F06                       	dc.b	nD1, $06
00088335 EC04                       	smpsPSGAlterVol     $04
00088337 E701                       	dc.b	smpsNoAttack, $01
00088339 EC07                       	smpsPSGAlterVol     $07
0008833B 8006                       	dc.b	nRst, $06
0008833D E1FF                       	smpsAlterNote       $FF
0008833F 01                         	dc.b	$01
00088340 E102                       	smpsAlterNote       $02
00088342 01                         	dc.b	$01
00088343 E101                       	smpsAlterNote       $01
00088345 01                         	dc.b	$01
00088346 E1FC                       	smpsAlterNote       $FC
00088348 01                         	dc.b	$01
00088349 ECF5                       	smpsPSGAlterVol     $F5
0008834B 9007                       	dc.b	nEb1, $07
0008834D EC0B                       	smpsPSGAlterVol     $0B
0008834F 8004                       	dc.b	nRst, $04
00088351 ECF5                       	smpsPSGAlterVol     $F5
00088353 9006                       	dc.b	nEb1, $06
00088355 EC0B                       	smpsPSGAlterVol     $0B
00088357 8007                       	dc.b	nRst, $07
00088359 E103                       	smpsAlterNote       $03
0008835B 0101                       	dc.b	$01, $01
0008835D E1FC                       	smpsAlterNote       $FC
0008835F 01                         	dc.b	$01
00088360 E1F9                       	smpsAlterNote       $F9
00088362 01                         	dc.b	$01
00088363 E1FC                       	smpsAlterNote       $FC
00088365 ECF5                       	smpsPSGAlterVol     $F5
00088367 8F06                       	dc.b	nD1, $06
00088369 EC04                       	smpsPSGAlterVol     $04
0008836B E701                       	dc.b	smpsNoAttack, $01
0008836D EC07                       	smpsPSGAlterVol     $07
0008836F 8003                       	dc.b	nRst, $03
00088371 ECF5                       	smpsPSGAlterVol     $F5
00088373 8F06                       	dc.b	nD1, $06
00088375 EC04                       	smpsPSGAlterVol     $04
00088377 E701                       	dc.b	smpsNoAttack, $01
00088379 EC07                       	smpsPSGAlterVol     $07
0008837B 8006                       	dc.b	nRst, $06
0008837D E1FF                       	smpsAlterNote       $FF
0008837F 01                         	dc.b	$01
00088380 E103                       	smpsAlterNote       $03
00088382 01                         	dc.b	$01
00088383 E1FF                       	smpsAlterNote       $FF
00088385 01                         	dc.b	$01
00088386 E1F9                       	smpsAlterNote       $F9
00088388 01                         	dc.b	$01
00088389 E1FC                       	smpsAlterNote       $FC
0008838B ECF5                       	smpsPSGAlterVol     $F5
0008838D 8F06                       	dc.b	nD1, $06
0008838F EC04                       	smpsPSGAlterVol     $04
00088391 E701                       	dc.b	smpsNoAttack, $01
00088393 EC07                       	smpsPSGAlterVol     $07
00088395 8003                       	dc.b	nRst, $03
00088397 ECF5                       	smpsPSGAlterVol     $F5
00088399 8F07                       	dc.b	nD1, $07
0008839B EC0B                       	smpsPSGAlterVol     $0B
0008839D 8006                       	dc.b	nRst, $06
0008839F E1FF                       	smpsAlterNote       $FF
000883A1 01                         	dc.b	$01
000883A2 E102                       	smpsAlterNote       $02
000883A4 0101                       	dc.b	$01, $01
000883A6 E1FC                       	smpsAlterNote       $FC
000883A8 01                         	dc.b	$01
000883A9 ECF5                       	smpsPSGAlterVol     $F5
000883AB 8F07                       	dc.b	nD1, $07
000883AD EC0B                       	smpsPSGAlterVol     $0B
000883AF 8004                       	dc.b	nRst, $04
000883B1 ECF5                       	smpsPSGAlterVol     $F5
000883B3 8F06                       	dc.b	nD1, $06
000883B5 EC04                       	smpsPSGAlterVol     $04
000883B7 E701                       	dc.b	smpsNoAttack, $01
000883B9 EC07                       	smpsPSGAlterVol     $07
000883BB 8006                       	dc.b	nRst, $06
000883BD E101                       	smpsAlterNote       $01
000883BF 01                         	dc.b	$01
000883C0 E102                       	smpsAlterNote       $02
000883C2 01                         	dc.b	$01
000883C3 E1FF                       	smpsAlterNote       $FF
000883C5 01                         	dc.b	$01
000883C6 E1F9                       	smpsAlterNote       $F9
000883C8 01                         	dc.b	$01
000883C9 E1FC                       	smpsAlterNote       $FC
000883CB ECF5                       	smpsPSGAlterVol     $F5
000883CD 9006                       	dc.b	nEb1, $06
000883CF EC04                       	smpsPSGAlterVol     $04
000883D1 E701                       	dc.b	smpsNoAttack, $01
000883D3 EC07                       	smpsPSGAlterVol     $07
000883D5 8003                       	dc.b	nRst, $03
000883D7 ECF5                       	smpsPSGAlterVol     $F5
000883D9 9006                       	dc.b	nEb1, $06
000883DB EC04                       	smpsPSGAlterVol     $04
000883DD E701                       	dc.b	smpsNoAttack, $01
000883DF EC07                       	smpsPSGAlterVol     $07
000883E1 8006                       	dc.b	nRst, $06
000883E3 E100                       	smpsAlterNote       $00
000883E5 01                         	dc.b	$01
000883E6 E102                       	smpsAlterNote       $02
000883E8 01                         	dc.b	$01
000883E9 E100                       	smpsAlterNote       $00
000883EB 01                         	dc.b	$01
000883EC E1FF                       	smpsAlterNote       $FF
000883EE 01                         	dc.b	$01
000883EF ECF5                       	smpsPSGAlterVol     $F5
000883F1 9B06                       	dc.b	nD2, $06
000883F3 EC04                       	smpsPSGAlterVol     $04
000883F5 E701                       	dc.b	smpsNoAttack, $01
000883F7 EC07                       	smpsPSGAlterVol     $07
000883F9 8003                       	dc.b	nRst, $03
000883FB ECF5                       	smpsPSGAlterVol     $F5
000883FD 9B07                       	dc.b	nD2, $07
000883FF EC0B                       	smpsPSGAlterVol     $0B
00088401 8007                       	dc.b	nRst, $07
00088403 E105                       	smpsAlterNote       $05
00088405 0101                       	dc.b	$01, $01
00088407 E1FF                       	smpsAlterNote       $FF
00088409 01                         	dc.b	$01
0008840A E1FC                       	smpsAlterNote       $FC
0008840C 01                         	dc.b	$01
0008840D E1FF                       	smpsAlterNote       $FF
0008840F ECF5                       	smpsPSGAlterVol     $F5
00088411 9B06                       	dc.b	nD2, $06
00088413 EC0B                       	smpsPSGAlterVol     $0B
00088415 8004                       	dc.b	nRst, $04
00088417 ECF5                       	smpsPSGAlterVol     $F5
00088419 9B06                       	dc.b	nD2, $06
0008841B EC04                       	smpsPSGAlterVol     $04
0008841D E701                       	dc.b	smpsNoAttack, $01
0008841F EC07                       	smpsPSGAlterVol     $07
00088421 8006                       	dc.b	nRst, $06
00088423 E102                       	smpsAlterNote       $02
00088425 01                         	dc.b	$01
00088426 E106                       	smpsAlterNote       $06
00088428 01                         	dc.b	$01
00088429 E102                       	smpsAlterNote       $02
0008842B 01                         	dc.b	$01
0008842C E1FC                       	smpsAlterNote       $FC
0008842E 01                         	dc.b	$01
0008842F E1FF                       	smpsAlterNote       $FF
00088431 ECF5                       	smpsPSGAlterVol     $F5
00088433 9B06                       	dc.b	nD2, $06
00088435 EC04                       	smpsPSGAlterVol     $04
00088437 E701                       	dc.b	smpsNoAttack, $01
00088439 EC07                       	smpsPSGAlterVol     $07
0008843B 8003                       	dc.b	nRst, $03
0008843D ECF5                       	smpsPSGAlterVol     $F5
0008843F 9B07                       	dc.b	nD2, $07
00088441 EC0B                       	smpsPSGAlterVol     $0B
00088443 8006                       	dc.b	nRst, $06
00088445 E102                       	smpsAlterNote       $02
00088447 01                         	dc.b	$01
00088448 E105                       	smpsAlterNote       $05
0008844A 0101                       	dc.b	$01, $01
0008844C E1FF                       	smpsAlterNote       $FF
0008844E 01                         	dc.b	$01
0008844F ECF5                       	smpsPSGAlterVol     $F5
00088451 9B07                       	dc.b	nD2, $07
00088453 EC0B                       	smpsPSGAlterVol     $0B
00088455 8004                       	dc.b	nRst, $04
00088457 ECF5                       	smpsPSGAlterVol     $F5
00088459 9B06                       	dc.b	nD2, $06
0008845B EC0B                       	smpsPSGAlterVol     $0B
0008845D 8007                       	dc.b	nRst, $07
0008845F E105                       	smpsAlterNote       $05
00088461 0101                       	dc.b	$01, $01
00088463 E102                       	smpsAlterNote       $02
00088465 01                         	dc.b	$01
00088466 E1FC                       	smpsAlterNote       $FC
00088468 01                         	dc.b	$01
00088469 E1FF                       	smpsAlterNote       $FF
0008846B ECF5                       	smpsPSGAlterVol     $F5
0008846D 9B06                       	dc.b	nD2, $06
0008846F EC04                       	smpsPSGAlterVol     $04
00088471 E701                       	dc.b	smpsNoAttack, $01
00088473 EC07                       	smpsPSGAlterVol     $07
00088475 8003                       	dc.b	nRst, $03
00088477 ECF5                       	smpsPSGAlterVol     $F5
00088479 9B06                       	dc.b	nD2, $06
0008847B EC04                       	smpsPSGAlterVol     $04
0008847D E701                       	dc.b	smpsNoAttack, $01
0008847F EC07                       	smpsPSGAlterVol     $07
00088481 8006                       	dc.b	nRst, $06
00088483 E102                       	smpsAlterNote       $02
00088485 01                         	dc.b	$01
00088486 E106                       	smpsAlterNote       $06
00088488 01                         	dc.b	$01
00088489 E102                       	smpsAlterNote       $02
0008848B 01                         	dc.b	$01
0008848C E1FF                       	smpsAlterNote       $FF
0008848E 01                         	dc.b	$01
0008848F ECF5                       	smpsPSGAlterVol     $F5
00088491 9B06                       	dc.b	nD2, $06
00088493 EC04                       	smpsPSGAlterVol     $04
00088495 E701                       	dc.b	smpsNoAttack, $01
00088497 EC07                       	smpsPSGAlterVol     $07
00088499 8003                       	dc.b	nRst, $03
0008849B ECF5                       	smpsPSGAlterVol     $F5
0008849D 9B07                       	dc.b	nD2, $07
0008849F EC0B                       	smpsPSGAlterVol     $0B
000884A1 8007                       	dc.b	nRst, $07
000884A3 E105                       	smpsAlterNote       $05
000884A5 0101                       	dc.b	$01, $01
000884A7 E1FF                       	smpsAlterNote       $FF
000884A9 01                         	dc.b	$01
000884AA E1FC                       	smpsAlterNote       $FC
000884AC 01                         	dc.b	$01
000884AD E1FF                       	smpsAlterNote       $FF
000884AF ECF5                       	smpsPSGAlterVol     $F5
000884B1 9B06                       	dc.b	nD2, $06
000884B3 EC0B                       	smpsPSGAlterVol     $0B
000884B5 8004                       	dc.b	nRst, $04
000884B7 ECF5                       	smpsPSGAlterVol     $F5
000884B9 9B06                       	dc.b	nD2, $06
000884BB EC04                       	smpsPSGAlterVol     $04
000884BD E701                       	dc.b	smpsNoAttack, $01
000884BF EC07                       	smpsPSGAlterVol     $07
000884C1 8006                       	dc.b	nRst, $06
000884C3 E102                       	smpsAlterNote       $02
000884C5 01                         	dc.b	$01
000884C6 E106                       	smpsAlterNote       $06
000884C8 01                         	dc.b	$01
000884C9 E102                       	smpsAlterNote       $02
000884CB 01                         	dc.b	$01
000884CC E1FC                       	smpsAlterNote       $FC
000884CE 01                         	dc.b	$01
000884CF E1FF                       	smpsAlterNote       $FF
000884D1 ECF5                       	smpsPSGAlterVol     $F5
000884D3 9B06                       	dc.b	nD2, $06
000884D5 EC04                       	smpsPSGAlterVol     $04
000884D7 E701                       	dc.b	smpsNoAttack, $01
000884D9 EC07                       	smpsPSGAlterVol     $07
000884DB 8003                       	dc.b	nRst, $03
000884DD ECF5                       	smpsPSGAlterVol     $F5
000884DF 9B06                       	dc.b	nD2, $06
000884E1 EC04                       	smpsPSGAlterVol     $04
000884E3 E701                       	dc.b	smpsNoAttack, $01
000884E5 EC07                       	smpsPSGAlterVol     $07
000884E7 8006                       	dc.b	nRst, $06
000884E9 E102                       	smpsAlterNote       $02
000884EB 01                         	dc.b	$01
000884EC E106                       	smpsAlterNote       $06
000884EE 01                         	dc.b	$01
000884EF E105                       	smpsAlterNote       $05
000884F1 01                         	dc.b	$01
000884F2 E1FF                       	smpsAlterNote       $FF
000884F4 01                         	dc.b	$01
000884F5 ECF5                       	smpsPSGAlterVol     $F5
000884F7 9B07                       	dc.b	nD2, $07
000884F9 EC0B                       	smpsPSGAlterVol     $0B
000884FB 8004                       	dc.b	nRst, $04
000884FD ECF5                       	smpsPSGAlterVol     $F5
000884FF 9B06                       	dc.b	nD2, $06
00088501 EC0B                       	smpsPSGAlterVol     $0B
00088503 8007                       	dc.b	nRst, $07
00088505 E105                       	smpsAlterNote       $05
00088507 0101                       	dc.b	$01, $01
00088509 E101                       	smpsAlterNote       $01
0008850B 01                         	dc.b	$01
0008850C E1FB                       	smpsAlterNote       $FB
0008850E 01                         	dc.b	$01
0008850F E1FE                       	smpsAlterNote       $FE
00088511 ECF5                       	smpsPSGAlterVol     $F5
00088513 9A06                       	dc.b	nCs2, $06
00088515 EC04                       	smpsPSGAlterVol     $04
00088517 E701                       	dc.b	smpsNoAttack, $01
00088519 EC07                       	smpsPSGAlterVol     $07
0008851B 8003                       	dc.b	nRst, $03
0008851D ECF5                       	smpsPSGAlterVol     $F5
0008851F 9A06                       	dc.b	nCs2, $06
00088521 EC04                       	smpsPSGAlterVol     $04
00088523 E701                       	dc.b	smpsNoAttack, $01
00088525 EC07                       	smpsPSGAlterVol     $07
00088527 8003                       	dc.b	nRst, $03
00088529 E1FC                       	smpsAlterNote       $FC
0008852B ECF5                       	smpsPSGAlterVol     $F5
0008852D 8F07                       	dc.b	nD1, $07
0008852F EC0B                       	smpsPSGAlterVol     $0B
00088531 8006                       	dc.b	nRst, $06
00088533 E1FF                       	smpsAlterNote       $FF
00088535 01                         	dc.b	$01
00088536 E103                       	smpsAlterNote       $03
00088538 01                         	dc.b	$01
00088539 E102                       	smpsAlterNote       $02
0008853B 01                         	dc.b	$01
0008853C E1FC                       	smpsAlterNote       $FC
0008853E 01                         	dc.b	$01
0008853F E1F8                       	smpsAlterNote       $F8
00088541 01                         	dc.b	$01
00088542 E1FC                       	smpsAlterNote       $FC
00088544 01                         	dc.b	$01
00088545 E1FF                       	smpsAlterNote       $FF
00088547 01                         	dc.b	$01
00088548 E103                       	smpsAlterNote       $03
0008854A 01                         	dc.b	$01
0008854B E1FC                       	smpsAlterNote       $FC
0008854D ECF5                       	smpsPSGAlterVol     $F5
0008854F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00088553 EC04                       	smpsPSGAlterVol     $04
00088555 E701                       	dc.b	smpsNoAttack, $01
00088557 EC07                       	smpsPSGAlterVol     $07
00088559 8009                       	dc.b	nRst, $09
0008855B E1FF                       	smpsAlterNote       $FF
0008855D 01                         	dc.b	$01
0008855E E103                       	smpsAlterNote       $03
00088560 01                         	dc.b	$01
00088561 E102                       	smpsAlterNote       $02
00088563 01                         	dc.b	$01
00088564 E1FC                       	smpsAlterNote       $FC
00088566 01                         	dc.b	$01
00088567 E1F8                       	smpsAlterNote       $F8
00088569 01                         	dc.b	$01
0008856A E1FC                       	smpsAlterNote       $FC
0008856C 01                         	dc.b	$01
0008856D E1FF                       	smpsAlterNote       $FF
0008856F 01                         	dc.b	$01
00088570 E103                       	smpsAlterNote       $03
00088572 01                         	dc.b	$01
00088573 E1FF                       	smpsAlterNote       $FF
00088575 01                         	dc.b	$01
00088576 E1F9                       	smpsAlterNote       $F9
00088578 01                         	dc.b	$01
00088579 E1F8                       	smpsAlterNote       $F8
0008857B 01                         	dc.b	$01
0008857C E1FC                       	smpsAlterNote       $FC
0008857E 01                         	dc.b	$01
0008857F E102                       	smpsAlterNote       $02
00088581 0101                       	dc.b	$01, $01
00088583 E1FF                       	smpsAlterNote       $FF
00088585 01                         	dc.b	$01
00088586 E1FC                       	smpsAlterNote       $FC
00088588 ECF5                       	smpsPSGAlterVol     $F5
0008858A 8F02                       	dc.b	nD1, $02
0008858C EC04                       	smpsPSGAlterVol     $04
0008858E E701                       	dc.b	smpsNoAttack, $01
00088590 ECFC                       	smpsPSGAlterVol     $FC
00088592 E1FB                       	smpsAlterNote       $FB
00088594 8D06                       	dc.b	nC1, $06
00088596 EC04                       	smpsPSGAlterVol     $04
00088598 E701                       	dc.b	smpsNoAttack, $01
0008859A EC07                       	smpsPSGAlterVol     $07
0008859C 8006                       	dc.b	nRst, $06
0008859E E1FE                       	smpsAlterNote       $FE
000885A0 01                         	dc.b	$01
000885A1 E102                       	smpsAlterNote       $02
000885A3 01                         	dc.b	$01
000885A4 E1FE                       	smpsAlterNote       $FE
000885A6 01                         	dc.b	$01
000885A7 E1FB                       	smpsAlterNote       $FB
000885A9 01                         	dc.b	$01
000885AA E1F7                       	smpsAlterNote       $F7
000885AC 01                         	dc.b	$01
000885AD E1FB                       	smpsAlterNote       $FB
000885AF 01                         	dc.b	$01
000885B0 E101                       	smpsAlterNote       $01
000885B2 01                         	dc.b	$01
000885B3 E102                       	smpsAlterNote       $02
000885B5 01                         	dc.b	$01
000885B6 E1FB                       	smpsAlterNote       $FB
000885B8 ECF5                       	smpsPSGAlterVol     $F5
000885BA 8D02                       	dc.b	nC1, $02
000885BC EC04                       	smpsPSGAlterVol     $04
000885BE E701                       	dc.b	smpsNoAttack, $01
000885C0 E1FC                       	smpsAlterNote       $FC
000885C2 ECFC                       	smpsPSGAlterVol     $FC
000885C4 8F0D                       	dc.b	nD1, $0D
000885C6 E1FF                       	smpsAlterNote       $FF
000885C8 E701                       	dc.b	smpsNoAttack, $01
000885CA E103                       	smpsAlterNote       $03
000885CC E701                       	dc.b	smpsNoAttack, $01
000885CE E1FF                       	smpsAlterNote       $FF
000885D0 E701                       	dc.b	smpsNoAttack, $01
000885D2 E1FC                       	smpsAlterNote       $FC
000885D4 E701                       	dc.b	smpsNoAttack, $01
000885D6 E1F8                       	smpsAlterNote       $F8
000885D8 E701                       	dc.b	smpsNoAttack, $01
000885DA E1FC                       	smpsAlterNote       $FC
000885DC E701                       	dc.b	smpsNoAttack, $01
000885DE E102                       	smpsAlterNote       $02
000885E0 E701                       	dc.b	smpsNoAttack, $01
000885E2 E103                       	smpsAlterNote       $03
000885E4 E701                       	dc.b	smpsNoAttack, $01
000885E6 E1FF                       	smpsAlterNote       $FF
000885E8 E701                       	dc.b	smpsNoAttack, $01
000885EA E1F9                       	smpsAlterNote       $F9
000885EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885F0 E1FC                       	smpsAlterNote       $FC
000885F2 E701                       	dc.b	smpsNoAttack, $01
000885F4 E102                       	smpsAlterNote       $02
000885F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885FA E1FC                       	smpsAlterNote       $FC
000885FC E701                       	dc.b	smpsNoAttack, $01
000885FE E1F9                       	smpsAlterNote       $F9
00088600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088604 E1FF                       	smpsAlterNote       $FF
00088606 EC04                       	smpsPSGAlterVol     $04
00088608 E701                       	dc.b	smpsNoAttack, $01
0008860A EC07                       	smpsPSGAlterVol     $07
0008860C E103                       	smpsAlterNote       $03
0008860E 8001                       	dc.b	nRst, $01
00088610 E102                       	smpsAlterNote       $02
00088612 01                         	dc.b	$01
00088613 E1FB                       	smpsAlterNote       $FB
00088615 01                         	dc.b	$01
00088616 E1F7                       	smpsAlterNote       $F7
00088618 01                         	dc.b	$01
00088619 E1FB                       	smpsAlterNote       $FB
0008861B 01                         	dc.b	$01
0008861C E102                       	smpsAlterNote       $02
0008861E 01                         	dc.b	$01
0008861F E103                       	smpsAlterNote       $03
00088621 01                         	dc.b	$01
00088622 E1FB                       	smpsAlterNote       $FB
00088624 ECF5                       	smpsPSGAlterVol     $F5
00088626 8E06                       	dc.b	nCs1, $06
00088628 EC04                       	smpsPSGAlterVol     $04
0008862A E701                       	dc.b	smpsNoAttack, $01
0008862C EC07                       	smpsPSGAlterVol     $07
0008862E 8003                       	dc.b	nRst, $03
00088630 ECF5                       	smpsPSGAlterVol     $F5
00088632 8E06                       	dc.b	nCs1, $06
00088634 EC04                       	smpsPSGAlterVol     $04
00088636 E701                       	dc.b	smpsNoAttack, $01
00088638 EC07                       	smpsPSGAlterVol     $07
0008863A 8006                       	dc.b	nRst, $06
0008863C E1FE                       	smpsAlterNote       $FE
0008863E 01                         	dc.b	$01
0008863F E102                       	smpsAlterNote       $02
00088641 01                         	dc.b	$01
00088642 E1FE                       	smpsAlterNote       $FE
00088644 01                         	dc.b	$01
00088645 E1F9                       	smpsAlterNote       $F9
00088647 01                         	dc.b	$01
00088648 E1FC                       	smpsAlterNote       $FC
0008864A ECF5                       	smpsPSGAlterVol     $F5
0008864C 8F06                       	dc.b	nD1, $06
0008864E EC04                       	smpsPSGAlterVol     $04
00088650 E701                       	dc.b	smpsNoAttack, $01
00088652 EC07                       	smpsPSGAlterVol     $07
00088654 8003                       	dc.b	nRst, $03
00088656 ECF5                       	smpsPSGAlterVol     $F5
00088658 8F07                       	dc.b	nD1, $07
0008865A EC0B                       	smpsPSGAlterVol     $0B
0008865C 8006                       	dc.b	nRst, $06
0008865E E1FF                       	smpsAlterNote       $FF
00088660 01                         	dc.b	$01
00088661 E102                       	smpsAlterNote       $02
00088663 0101                       	dc.b	$01, $01
00088665 E1FB                       	smpsAlterNote       $FB
00088667 01                         	dc.b	$01
00088668 ECF5                       	smpsPSGAlterVol     $F5
0008866A 8E07                       	dc.b	nCs1, $07
0008866C EC0B                       	smpsPSGAlterVol     $0B
0008866E 8004                       	dc.b	nRst, $04
00088670 ECF5                       	smpsPSGAlterVol     $F5
00088672 8E06                       	dc.b	nCs1, $06
00088674 EC04                       	smpsPSGAlterVol     $04
00088676 E701                       	dc.b	smpsNoAttack, $01
00088678 EC07                       	smpsPSGAlterVol     $07
0008867A 8006                       	dc.b	nRst, $06
0008867C E101                       	smpsAlterNote       $01
0008867E 01                         	dc.b	$01
0008867F E102                       	smpsAlterNote       $02
00088681 01                         	dc.b	$01
00088682 E1FE                       	smpsAlterNote       $FE
00088684 01                         	dc.b	$01
00088685 E1F8                       	smpsAlterNote       $F8
00088687 01                         	dc.b	$01
00088688 E1FB                       	smpsAlterNote       $FB
0008868A ECF5                       	smpsPSGAlterVol     $F5
0008868C 8E06                       	dc.b	nCs1, $06
0008868E EC04                       	smpsPSGAlterVol     $04
00088690 E701                       	dc.b	smpsNoAttack, $01
00088692 EC07                       	smpsPSGAlterVol     $07
00088694 8003                       	dc.b	nRst, $03
00088696 ECF5                       	smpsPSGAlterVol     $F5
00088698 8E06                       	dc.b	nCs1, $06
0008869A EC04                       	smpsPSGAlterVol     $04
0008869C E701                       	dc.b	smpsNoAttack, $01
0008869E EC07                       	smpsPSGAlterVol     $07
000886A0 8004                       	dc.b	nRst, $04
000886A2 E1FC                       	smpsAlterNote       $FC
000886A4 ECF5                       	smpsPSGAlterVol     $F5
000886A6 8F06                       	dc.b	nD1, $06
000886A8 EC0B                       	smpsPSGAlterVol     $0B
000886AA 8006                       	dc.b	nRst, $06
000886AC E1FF                       	smpsAlterNote       $FF
000886AE 01                         	dc.b	$01
000886AF E102                       	smpsAlterNote       $02
000886B1 0101                       	dc.b	$01, $01
000886B3 E1FC                       	smpsAlterNote       $FC
000886B5 01                         	dc.b	$01
000886B6 E1F8                       	smpsAlterNote       $F8
000886B8 01                         	dc.b	$01
000886B9 E1F9                       	smpsAlterNote       $F9
000886BB 01                         	dc.b	$01
000886BC E1FF                       	smpsAlterNote       $FF
000886BE 01                         	dc.b	$01
000886BF E103                       	smpsAlterNote       $03
000886C1 01                         	dc.b	$01
000886C2 E1FC                       	smpsAlterNote       $FC
000886C4 ECF5                       	smpsPSGAlterVol     $F5
000886C6 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000886CA EC04                       	smpsPSGAlterVol     $04
000886CC E701                       	dc.b	smpsNoAttack, $01
000886CE EC07                       	smpsPSGAlterVol     $07
000886D0 8009                       	dc.b	nRst, $09
000886D2 E1FF                       	smpsAlterNote       $FF
000886D4 01                         	dc.b	$01
000886D5 E102                       	smpsAlterNote       $02
000886D7 0101                       	dc.b	$01, $01
000886D9 E1FC                       	smpsAlterNote       $FC
000886DB 01                         	dc.b	$01
000886DC E1F8                       	smpsAlterNote       $F8
000886DE 01                         	dc.b	$01
000886DF E1F9                       	smpsAlterNote       $F9
000886E1 01                         	dc.b	$01
000886E2 E1FF                       	smpsAlterNote       $FF
000886E4 01                         	dc.b	$01
000886E5 E103                       	smpsAlterNote       $03
000886E7 01                         	dc.b	$01
000886E8 E1FF                       	smpsAlterNote       $FF
000886EA 01                         	dc.b	$01
000886EB E1FC                       	smpsAlterNote       $FC
000886ED 01                         	dc.b	$01
000886EE E1F8                       	smpsAlterNote       $F8
000886F0 01                         	dc.b	$01
000886F1 E1FC                       	smpsAlterNote       $FC
000886F3 01                         	dc.b	$01
000886F4 E102                       	smpsAlterNote       $02
000886F6 01                         	dc.b	$01
000886F7 E103                       	smpsAlterNote       $03
000886F9 01                         	dc.b	$01
000886FA E1FF                       	smpsAlterNote       $FF
000886FC 01                         	dc.b	$01
000886FD E1FC                       	smpsAlterNote       $FC
000886FF ECF5                       	smpsPSGAlterVol     $F5
00088701 8F03                       	dc.b	nD1, $03
00088703 E1FB                       	smpsAlterNote       $FB
00088705 8D06                       	dc.b	nC1, $06
00088707 EC04                       	smpsPSGAlterVol     $04
00088709 E701                       	dc.b	smpsNoAttack, $01
0008870B EC07                       	smpsPSGAlterVol     $07
0008870D 8006                       	dc.b	nRst, $06
0008870F E1FE                       	smpsAlterNote       $FE
00088711 01                         	dc.b	$01
00088712 E102                       	smpsAlterNote       $02
00088714 01                         	dc.b	$01
00088715 E101                       	smpsAlterNote       $01
00088717 01                         	dc.b	$01
00088718 E1FB                       	smpsAlterNote       $FB
0008871A 01                         	dc.b	$01
0008871B E1F7                       	smpsAlterNote       $F7
0008871D 01                         	dc.b	$01
0008871E E1FB                       	smpsAlterNote       $FB
00088720 01                         	dc.b	$01
00088721 E1FE                       	smpsAlterNote       $FE
00088723 01                         	dc.b	$01
00088724 E102                       	smpsAlterNote       $02
00088726 01                         	dc.b	$01
00088727 E1FB                       	smpsAlterNote       $FB
00088729 ECF5                       	smpsPSGAlterVol     $F5
0008872B 8D03                       	dc.b	nC1, $03
0008872D E1FC                       	smpsAlterNote       $FC
0008872F 8F0D                       	dc.b	nD1, $0D
00088731 E1FF                       	smpsAlterNote       $FF
00088733 E701                       	dc.b	smpsNoAttack, $01
00088735 E103                       	smpsAlterNote       $03
00088737 E701                       	dc.b	smpsNoAttack, $01
00088739 E1FF                       	smpsAlterNote       $FF
0008873B E701                       	dc.b	smpsNoAttack, $01
0008873D E1FC                       	smpsAlterNote       $FC
0008873F E701                       	dc.b	smpsNoAttack, $01
00088741 E1F8                       	smpsAlterNote       $F8
00088743 E701                       	dc.b	smpsNoAttack, $01
00088745 E1FC                       	smpsAlterNote       $FC
00088747 E701                       	dc.b	smpsNoAttack, $01
00088749 E102                       	smpsAlterNote       $02
0008874B E701                       	dc.b	smpsNoAttack, $01
0008874D E103                       	smpsAlterNote       $03
0008874F E701                       	dc.b	smpsNoAttack, $01
00088751 E1FF                       	smpsAlterNote       $FF
00088753 E701                       	dc.b	smpsNoAttack, $01
00088755 E1F9                       	smpsAlterNote       $F9
00088757 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008875B E1FC                       	smpsAlterNote       $FC
0008875D E701                       	dc.b	smpsNoAttack, $01
0008875F E102                       	smpsAlterNote       $02
00088761 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088765 E1FF                       	smpsAlterNote       $FF
00088767 E701                       	dc.b	smpsNoAttack, $01
00088769 E1F9                       	smpsAlterNote       $F9
0008876B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008876F E1FF                       	smpsAlterNote       $FF
00088771 EC04                       	smpsPSGAlterVol     $04
00088773 E701                       	dc.b	smpsNoAttack, $01
00088775 EC07                       	smpsPSGAlterVol     $07
00088777 E103                       	smpsAlterNote       $03
00088779 8001                       	dc.b	nRst, $01
0008877B E102                       	smpsAlterNote       $02
0008877D 01                         	dc.b	$01
0008877E E1FB                       	smpsAlterNote       $FB
00088780 01                         	dc.b	$01
00088781 E1F7                       	smpsAlterNote       $F7
00088783 01                         	dc.b	$01
00088784 E1FB                       	smpsAlterNote       $FB
00088786 01                         	dc.b	$01
00088787 E1FF                       	smpsAlterNote       $FF
00088789 01                         	dc.b	$01
0008878A E103                       	smpsAlterNote       $03
0008878C 01                         	dc.b	$01
0008878D E1FB                       	smpsAlterNote       $FB
0008878F ECF5                       	smpsPSGAlterVol     $F5
00088791 8E06                       	dc.b	nCs1, $06
00088793 EC04                       	smpsPSGAlterVol     $04
00088795 E701                       	dc.b	smpsNoAttack, $01
00088797 EC07                       	smpsPSGAlterVol     $07
00088799 8003                       	dc.b	nRst, $03
0008879B ECF5                       	smpsPSGAlterVol     $F5
0008879D 8E06                       	dc.b	nCs1, $06
0008879F EC04                       	smpsPSGAlterVol     $04
000887A1 E701                       	dc.b	smpsNoAttack, $01
000887A3 EC07                       	smpsPSGAlterVol     $07
000887A5 8006                       	dc.b	nRst, $06
000887A7 E1FE                       	smpsAlterNote       $FE
000887A9 01                         	dc.b	$01
000887AA E102                       	smpsAlterNote       $02
000887AC 01                         	dc.b	$01
000887AD E1FE                       	smpsAlterNote       $FE
000887AF 01                         	dc.b	$01
000887B0 E1FC                       	smpsAlterNote       $FC
000887B2 01                         	dc.b	$01
000887B3 ECF5                       	smpsPSGAlterVol     $F5
000887B5 8F06                       	dc.b	nD1, $06
000887B7 EC04                       	smpsPSGAlterVol     $04
000887B9 E701                       	dc.b	smpsNoAttack, $01
000887BB EC07                       	smpsPSGAlterVol     $07
000887BD 8003                       	dc.b	nRst, $03
000887BF ECF5                       	smpsPSGAlterVol     $F5
000887C1 8F07                       	dc.b	nD1, $07
000887C3 EC0B                       	smpsPSGAlterVol     $0B
000887C5 8007                       	dc.b	nRst, $07
000887C7 E102                       	smpsAlterNote       $02
000887C9 0101                       	dc.b	$01, $01
000887CB E1FB                       	smpsAlterNote       $FB
000887CD 01                         	dc.b	$01
000887CE E1F8                       	smpsAlterNote       $F8
000887D0 01                         	dc.b	$01
000887D1 E1FB                       	smpsAlterNote       $FB
000887D3 ECF5                       	smpsPSGAlterVol     $F5
000887D5 8E06                       	dc.b	nCs1, $06
000887D7 EC0B                       	smpsPSGAlterVol     $0B
000887D9 8004                       	dc.b	nRst, $04
000887DB ECF5                       	smpsPSGAlterVol     $F5
000887DD 8E06                       	dc.b	nCs1, $06
000887DF EC04                       	smpsPSGAlterVol     $04
000887E1 E701                       	dc.b	smpsNoAttack, $01
000887E3 EC07                       	smpsPSGAlterVol     $07
000887E5 8006                       	dc.b	nRst, $06
000887E7 E1FE                       	smpsAlterNote       $FE
000887E9 01                         	dc.b	$01
000887EA E102                       	smpsAlterNote       $02
000887EC 01                         	dc.b	$01
000887ED E1FE                       	smpsAlterNote       $FE
000887EF 01                         	dc.b	$01
000887F0 E1F9                       	smpsAlterNote       $F9
000887F2 01                         	dc.b	$01
000887F3 E1FC                       	smpsAlterNote       $FC
000887F5 ECF5                       	smpsPSGAlterVol     $F5
000887F7 8F06                       	dc.b	nD1, $06
000887F9 EC04                       	smpsPSGAlterVol     $04
000887FB E701                       	dc.b	smpsNoAttack, $01
000887FD EC07                       	smpsPSGAlterVol     $07
000887FF 8003                       	dc.b	nRst, $03
00088801 ECF5                       	smpsPSGAlterVol     $F5
00088803 8F06                       	dc.b	nD1, $06
00088805 EC04                       	smpsPSGAlterVol     $04
00088807 E701                       	dc.b	smpsNoAttack, $01
00088809 EC07                       	smpsPSGAlterVol     $07
0008880B 8006                       	dc.b	nRst, $06
0008880D E1FF                       	smpsAlterNote       $FF
0008880F 01                         	dc.b	$01
00088810 E103                       	smpsAlterNote       $03
00088812 01                         	dc.b	$01
00088813 E102                       	smpsAlterNote       $02
00088815 01                         	dc.b	$01
00088816 E1FB                       	smpsAlterNote       $FB
00088818 01                         	dc.b	$01
00088819 ECF5                       	smpsPSGAlterVol     $F5
0008881B 8E07                       	dc.b	nCs1, $07
0008881D EC0B                       	smpsPSGAlterVol     $0B
0008881F 8004                       	dc.b	nRst, $04
00088821 ECF5                       	smpsPSGAlterVol     $F5
00088823 8E06                       	dc.b	nCs1, $06
00088825 EC0B                       	smpsPSGAlterVol     $0B
00088827 8007                       	dc.b	nRst, $07
00088829 E101                       	smpsAlterNote       $01
0008882B 0101                       	dc.b	$01, $01
0008882D E1FE                       	smpsAlterNote       $FE
0008882F 01                         	dc.b	$01
00088830 E1F9                       	smpsAlterNote       $F9
00088832 01                         	dc.b	$01
00088833 E1FC                       	smpsAlterNote       $FC
00088835 ECF5                       	smpsPSGAlterVol     $F5
00088837 8F06                       	dc.b	nD1, $06
00088839 EC04                       	smpsPSGAlterVol     $04
0008883B E701                       	dc.b	smpsNoAttack, $01
0008883D EC07                       	smpsPSGAlterVol     $07
0008883F 8003                       	dc.b	nRst, $03
00088841 ECF5                       	smpsPSGAlterVol     $F5
00088843 8F06                       	dc.b	nD1, $06
00088845 EC04                       	smpsPSGAlterVol     $04
00088847 E701                       	dc.b	smpsNoAttack, $01
00088849 EC07                       	smpsPSGAlterVol     $07
0008884B 8006                       	dc.b	nRst, $06
0008884D E1FF                       	smpsAlterNote       $FF
0008884F 01                         	dc.b	$01
00088850 E103                       	smpsAlterNote       $03
00088852 01                         	dc.b	$01
00088853 E1FF                       	smpsAlterNote       $FF
00088855 01                         	dc.b	$01
00088856 E1FB                       	smpsAlterNote       $FB
00088858 01                         	dc.b	$01
00088859 ECF5                       	smpsPSGAlterVol     $F5
0008885B 8E06                       	dc.b	nCs1, $06
0008885D EC04                       	smpsPSGAlterVol     $04
0008885F E701                       	dc.b	smpsNoAttack, $01
00088861 EC07                       	smpsPSGAlterVol     $07
00088863 8003                       	dc.b	nRst, $03
00088865 ECF5                       	smpsPSGAlterVol     $F5
00088867 8E07                       	dc.b	nCs1, $07
00088869 E1FF                       	smpsAlterNote       $FF
0008886B 9B06                       	dc.b	nD2, $06
0008886D EC04                       	smpsPSGAlterVol     $04
0008886F E701                       	dc.b	smpsNoAttack, $01
00088871 ECFC                       	smpsPSGAlterVol     $FC
00088873 9B03                       	dc.b	nD2, $03
00088875 EC04                       	smpsPSGAlterVol     $04
00088877 E701                       	dc.b	smpsNoAttack, $01
00088879 ECFC                       	smpsPSGAlterVol     $FC
0008887B 9B02                       	dc.b	nD2, $02
0008887D EC04                       	smpsPSGAlterVol     $04
0008887F E701                       	dc.b	smpsNoAttack, $01
00088881 ECFC                       	smpsPSGAlterVol     $FC
00088883 E1FE                       	smpsAlterNote       $FE
00088885 9A03                       	dc.b	nCs2, $03
00088887 EC0B                       	smpsPSGAlterVol     $0B
00088889 800A                       	dc.b	nRst, $0A
0008888B E102                       	smpsAlterNote       $02
0008888D 01                         	dc.b	$01
0008888E E10A                       	smpsAlterNote       $0A
00088890 01                         	dc.b	$01
00088891 E102                       	smpsAlterNote       $02
00088893 01                         	dc.b	$01
00088894 E1F7                       	smpsAlterNote       $F7
00088896 01                         	dc.b	$01
00088897 E10A                       	smpsAlterNote       $0A
00088899 01                         	dc.b	$01
0008889A E1FC                       	smpsAlterNote       $FC
0008889C 01                         	dc.b	$01
0008889D E108                       	smpsAlterNote       $08
0008889F 0101                       	dc.b	$01, $01
000888A1 E102                       	smpsAlterNote       $02
000888A3 01                         	dc.b	$01
000888A4 E1F7                       	smpsAlterNote       $F7
000888A6 0101                       	dc.b	$01, $01
000888A8 E1FC                       	smpsAlterNote       $FC
000888AA ECF5                       	smpsPSGAlterVol     $F5
000888AC 8F06                       	dc.b	nD1, $06
000888AE EC04                       	smpsPSGAlterVol     $04
000888B0 E701                       	dc.b	smpsNoAttack, $01
000888B2 EC07                       	smpsPSGAlterVol     $07
000888B4 8003                       	dc.b	nRst, $03
000888B6 ECF5                       	smpsPSGAlterVol     $F5
000888B8 8F06                       	dc.b	nD1, $06
000888BA EC04                       	smpsPSGAlterVol     $04
000888BC E701                       	dc.b	smpsNoAttack, $01
000888BE EC07                       	smpsPSGAlterVol     $07
000888C0 8006                       	dc.b	nRst, $06
000888C2 E1FF                       	smpsAlterNote       $FF
000888C4 01                         	dc.b	$01
000888C5 E102                       	smpsAlterNote       $02
000888C7 01                         	dc.b	$01
000888C8 E101                       	smpsAlterNote       $01
000888CA 01                         	dc.b	$01
000888CB E1FC                       	smpsAlterNote       $FC
000888CD 01                         	dc.b	$01
000888CE ECF5                       	smpsPSGAlterVol     $F5
000888D0 9007                       	dc.b	nEb1, $07
000888D2 EC0B                       	smpsPSGAlterVol     $0B
000888D4 8004                       	dc.b	nRst, $04
000888D6 ECF5                       	smpsPSGAlterVol     $F5
000888D8 9006                       	dc.b	nEb1, $06
000888DA EC0B                       	smpsPSGAlterVol     $0B
000888DC 8007                       	dc.b	nRst, $07
000888DE E103                       	smpsAlterNote       $03
000888E0 0101                       	dc.b	$01, $01
000888E2 E1FF                       	smpsAlterNote       $FF
000888E4 01                         	dc.b	$01
000888E5 E1F9                       	smpsAlterNote       $F9
000888E7 01                         	dc.b	$01
000888E8 E1FC                       	smpsAlterNote       $FC
000888EA ECF5                       	smpsPSGAlterVol     $F5
000888EC 8F06                       	dc.b	nD1, $06
000888EE EC04                       	smpsPSGAlterVol     $04
000888F0 E701                       	dc.b	smpsNoAttack, $01
000888F2 EC07                       	smpsPSGAlterVol     $07
000888F4 8003                       	dc.b	nRst, $03
000888F6 ECF5                       	smpsPSGAlterVol     $F5
000888F8 8F06                       	dc.b	nD1, $06
000888FA EC04                       	smpsPSGAlterVol     $04
000888FC E701                       	dc.b	smpsNoAttack, $01
000888FE EC07                       	smpsPSGAlterVol     $07
00088900 8006                       	dc.b	nRst, $06
00088902 E1FF                       	smpsAlterNote       $FF
00088904 01                         	dc.b	$01
00088905 E103                       	smpsAlterNote       $03
00088907 01                         	dc.b	$01
00088908 E1FF                       	smpsAlterNote       $FF
0008890A 01                         	dc.b	$01
0008890B E1F9                       	smpsAlterNote       $F9
0008890D 01                         	dc.b	$01
0008890E E1FC                       	smpsAlterNote       $FC
00088910 ECF5                       	smpsPSGAlterVol     $F5
00088912 8F06                       	dc.b	nD1, $06
00088914 EC04                       	smpsPSGAlterVol     $04
00088916 E701                       	dc.b	smpsNoAttack, $01
00088918 EC07                       	smpsPSGAlterVol     $07
0008891A 8003                       	dc.b	nRst, $03
0008891C ECF5                       	smpsPSGAlterVol     $F5
0008891E 8F07                       	dc.b	nD1, $07
00088920 EC0B                       	smpsPSGAlterVol     $0B
00088922 8006                       	dc.b	nRst, $06
00088924 E1FF                       	smpsAlterNote       $FF
00088926 01                         	dc.b	$01
00088927 E102                       	smpsAlterNote       $02
00088929 0101                       	dc.b	$01, $01
0008892B E1FC                       	smpsAlterNote       $FC
0008892D 01                         	dc.b	$01
0008892E ECF5                       	smpsPSGAlterVol     $F5
00088930 8F07                       	dc.b	nD1, $07
00088932 EC0B                       	smpsPSGAlterVol     $0B
00088934 8004                       	dc.b	nRst, $04
00088936 ECF5                       	smpsPSGAlterVol     $F5
00088938 8F06                       	dc.b	nD1, $06
0008893A EC04                       	smpsPSGAlterVol     $04
0008893C E701                       	dc.b	smpsNoAttack, $01
0008893E EC07                       	smpsPSGAlterVol     $07
00088940 8006                       	dc.b	nRst, $06
00088942 E101                       	smpsAlterNote       $01
00088944 01                         	dc.b	$01
00088945 E102                       	smpsAlterNote       $02
00088947 01                         	dc.b	$01
00088948 E1FF                       	smpsAlterNote       $FF
0008894A 01                         	dc.b	$01
0008894B E1F9                       	smpsAlterNote       $F9
0008894D 01                         	dc.b	$01
0008894E E1FC                       	smpsAlterNote       $FC
00088950 ECF5                       	smpsPSGAlterVol     $F5
00088952 9006                       	dc.b	nEb1, $06
00088954 EC04                       	smpsPSGAlterVol     $04
00088956 E701                       	dc.b	smpsNoAttack, $01
00088958 EC07                       	smpsPSGAlterVol     $07
0008895A 8003                       	dc.b	nRst, $03
0008895C ECF5                       	smpsPSGAlterVol     $F5
0008895E 9006                       	dc.b	nEb1, $06
00088960 EC04                       	smpsPSGAlterVol     $04
00088962 E701                       	dc.b	smpsNoAttack, $01
00088964 EC07                       	smpsPSGAlterVol     $07
00088966 8006                       	dc.b	nRst, $06
00088968 E100                       	smpsAlterNote       $00
0008896A 01                         	dc.b	$01
0008896B E102                       	smpsAlterNote       $02
0008896D 01                         	dc.b	$01
0008896E E100                       	smpsAlterNote       $00
00088970 01                         	dc.b	$01
00088971 E1FF                       	smpsAlterNote       $FF
00088973 01                         	dc.b	$01
00088974 ECF5                       	smpsPSGAlterVol     $F5
00088976 9B06                       	dc.b	nD2, $06
00088978 EC04                       	smpsPSGAlterVol     $04
0008897A E701                       	dc.b	smpsNoAttack, $01
0008897C EC07                       	smpsPSGAlterVol     $07
0008897E 8003                       	dc.b	nRst, $03
00088980 ECF5                       	smpsPSGAlterVol     $F5
00088982 9B07                       	dc.b	nD2, $07
00088984 EC0B                       	smpsPSGAlterVol     $0B
00088986 8007                       	dc.b	nRst, $07
00088988 E105                       	smpsAlterNote       $05
0008898A 0101                       	dc.b	$01, $01
0008898C E1FF                       	smpsAlterNote       $FF
0008898E 01                         	dc.b	$01
0008898F E1FC                       	smpsAlterNote       $FC
00088991 01                         	dc.b	$01
00088992 E1FF                       	smpsAlterNote       $FF
00088994 ECF5                       	smpsPSGAlterVol     $F5
00088996 9B06                       	dc.b	nD2, $06
00088998 EC0B                       	smpsPSGAlterVol     $0B
0008899A 8004                       	dc.b	nRst, $04
0008899C ECF5                       	smpsPSGAlterVol     $F5
0008899E 9B06                       	dc.b	nD2, $06
000889A0 EC04                       	smpsPSGAlterVol     $04
000889A2 E701                       	dc.b	smpsNoAttack, $01
000889A4 EC07                       	smpsPSGAlterVol     $07
000889A6 8006                       	dc.b	nRst, $06
000889A8 E102                       	smpsAlterNote       $02
000889AA 01                         	dc.b	$01
000889AB E106                       	smpsAlterNote       $06
000889AD 01                         	dc.b	$01
000889AE E102                       	smpsAlterNote       $02
000889B0 01                         	dc.b	$01
000889B1 E1FC                       	smpsAlterNote       $FC
000889B3 01                         	dc.b	$01
000889B4 E1FF                       	smpsAlterNote       $FF
000889B6 ECF5                       	smpsPSGAlterVol     $F5
000889B8 9B06                       	dc.b	nD2, $06
000889BA EC04                       	smpsPSGAlterVol     $04
000889BC E701                       	dc.b	smpsNoAttack, $01
000889BE EC07                       	smpsPSGAlterVol     $07
000889C0 8003                       	dc.b	nRst, $03
000889C2 ECF5                       	smpsPSGAlterVol     $F5
000889C4 9B07                       	dc.b	nD2, $07
000889C6 EC0B                       	smpsPSGAlterVol     $0B
000889C8 8006                       	dc.b	nRst, $06
000889CA E102                       	smpsAlterNote       $02
000889CC 01                         	dc.b	$01
000889CD E105                       	smpsAlterNote       $05
000889CF 0101                       	dc.b	$01, $01
000889D1 E1FF                       	smpsAlterNote       $FF
000889D3 01                         	dc.b	$01
000889D4 ECF5                       	smpsPSGAlterVol     $F5
000889D6 9B07                       	dc.b	nD2, $07
000889D8 EC0B                       	smpsPSGAlterVol     $0B
000889DA 8004                       	dc.b	nRst, $04
000889DC ECF5                       	smpsPSGAlterVol     $F5
000889DE 9B06                       	dc.b	nD2, $06
000889E0 EC04                       	smpsPSGAlterVol     $04
000889E2 E701                       	dc.b	smpsNoAttack, $01
000889E4 EC07                       	smpsPSGAlterVol     $07
000889E6 8006                       	dc.b	nRst, $06
000889E8 E105                       	smpsAlterNote       $05
000889EA 0101                       	dc.b	$01, $01
000889EC E102                       	smpsAlterNote       $02
000889EE 01                         	dc.b	$01
000889EF E1FC                       	smpsAlterNote       $FC
000889F1 01                         	dc.b	$01
000889F2 E1FF                       	smpsAlterNote       $FF
000889F4 ECF5                       	smpsPSGAlterVol     $F5
000889F6 9B06                       	dc.b	nD2, $06
000889F8 EC04                       	smpsPSGAlterVol     $04
000889FA E701                       	dc.b	smpsNoAttack, $01
000889FC EC07                       	smpsPSGAlterVol     $07
000889FE 8003                       	dc.b	nRst, $03
00088A00 ECF5                       	smpsPSGAlterVol     $F5
00088A02 9B06                       	dc.b	nD2, $06
00088A04 EC04                       	smpsPSGAlterVol     $04
00088A06 E701                       	dc.b	smpsNoAttack, $01
00088A08 EC07                       	smpsPSGAlterVol     $07
00088A0A 8006                       	dc.b	nRst, $06
00088A0C E102                       	smpsAlterNote       $02
00088A0E 01                         	dc.b	$01
00088A0F E106                       	smpsAlterNote       $06
00088A11 01                         	dc.b	$01
00088A12 E102                       	smpsAlterNote       $02
00088A14 01                         	dc.b	$01
00088A15 E1FF                       	smpsAlterNote       $FF
00088A17 01                         	dc.b	$01
00088A18 ECF5                       	smpsPSGAlterVol     $F5
00088A1A 9B06                       	dc.b	nD2, $06
00088A1C EC04                       	smpsPSGAlterVol     $04
00088A1E E701                       	dc.b	smpsNoAttack, $01
00088A20 EC07                       	smpsPSGAlterVol     $07
00088A22 8003                       	dc.b	nRst, $03
00088A24 ECF5                       	smpsPSGAlterVol     $F5
00088A26 9B07                       	dc.b	nD2, $07
00088A28 EC0B                       	smpsPSGAlterVol     $0B
00088A2A 8007                       	dc.b	nRst, $07
00088A2C E107                       	smpsAlterNote       $07
00088A2E 0101                       	dc.b	$01, $01
00088A30 E1FE                       	smpsAlterNote       $FE
00088A32 01                         	dc.b	$01
00088A33 E1FA                       	smpsAlterNote       $FA
00088A35 0101                       	dc.b	$01, $01
00088A37 E103                       	smpsAlterNote       $03
00088A39 01                         	dc.b	$01
00088A3A E109                       	smpsAlterNote       $09
00088A3C 01                         	dc.b	$01
00088A3D E107                       	smpsAlterNote       $07
00088A3F 01                         	dc.b	$01
00088A40 E1FE                       	smpsAlterNote       $FE
00088A42 01                         	dc.b	$01
00088A43 E108                       	smpsAlterNote       $08
00088A45 01                         	dc.b	$01
00088A46 E1FD                       	smpsAlterNote       $FD
00088A48 ECF5                       	smpsPSGAlterVol     $F5
00088A4A 940E                       	dc.b	nG1, $0E
00088A4C E103                       	smpsAlterNote       $03
00088A4E EC0B                       	smpsPSGAlterVol     $0B
00088A50 8001 01                    	dc.b	nRst, $01, $01
00088A53 E1FD                       	smpsAlterNote       $FD
00088A55 01                         	dc.b	$01
00088A56 E1FB                       	smpsAlterNote       $FB
00088A58 0101                       	dc.b	$01, $01
00088A5A E100                       	smpsAlterNote       $00
00088A5C 01                         	dc.b	$01
00088A5D E103                       	smpsAlterNote       $03
00088A5F 01                         	dc.b	$01
00088A60 E100                       	smpsAlterNote       $00
00088A62 01                         	dc.b	$01
00088A63 E1FD                       	smpsAlterNote       $FD
00088A65 01                         	dc.b	$01
00088A66 E1FA                       	smpsAlterNote       $FA
00088A68 01                         	dc.b	$01
00088A69 E1FD                       	smpsAlterNote       $FD
00088A6B 01                         	dc.b	$01
00088A6C E103                       	smpsAlterNote       $03
00088A6E 0101                       	dc.b	$01, $01
00088A70 E100                       	smpsAlterNote       $00
00088A72 01                         	dc.b	$01
00088A73 E1FE                       	smpsAlterNote       $FE
00088A75 ECF5                       	smpsPSGAlterVol     $F5
00088A77 960D                       	dc.b	nA1, $0D
00088A79 E104                       	smpsAlterNote       $04
00088A7B EC0B                       	smpsPSGAlterVol     $0B
00088A7D 8001 01                    	dc.b	nRst, $01, $01
00088A80 E101                       	smpsAlterNote       $01
00088A82 01                         	dc.b	$01
00088A83 E1FB                       	smpsAlterNote       $FB
00088A85 0101                       	dc.b	$01, $01
00088A87 E1FE                       	smpsAlterNote       $FE
00088A89 01                         	dc.b	$01
00088A8A E104                       	smpsAlterNote       $04
00088A8C 0101                       	dc.b	$01, $01
00088A8E E1FE                       	smpsAlterNote       $FE
00088A90 01                         	dc.b	$01
00088A91 E1FB                       	smpsAlterNote       $FB
00088A93 0101                       	dc.b	$01, $01
00088A95 E101                       	smpsAlterNote       $01
00088A97 01                         	dc.b	$01
00088A98 E104                       	smpsAlterNote       $04
00088A9A 0101                       	dc.b	$01, $01
00088A9C E1FE                       	smpsAlterNote       $FE
00088A9E ECF5                       	smpsPSGAlterVol     $F5
00088AA0 970D                       	dc.b	nBb1, $0D
00088AA2 E101                       	smpsAlterNote       $01
00088AA4 EC04                       	smpsPSGAlterVol     $04
00088AA6 E701                       	dc.b	smpsNoAttack, $01
00088AA8 EC07                       	smpsPSGAlterVol     $07
00088AAA E104                       	smpsAlterNote       $04
00088AAC 8001                       	dc.b	nRst, $01
00088AAE E103                       	smpsAlterNote       $03
00088AB0 01                         	dc.b	$01
00088AB1 E1FE                       	smpsAlterNote       $FE
00088AB3 01                         	dc.b	$01
00088AB4 E1FA                       	smpsAlterNote       $FA
00088AB6 01                         	dc.b	$01
00088AB7 E1FE                       	smpsAlterNote       $FE
00088AB9 01                         	dc.b	$01
00088ABA E101                       	smpsAlterNote       $01
00088ABC 01                         	dc.b	$01
00088ABD E104                       	smpsAlterNote       $04
00088ABF 01                         	dc.b	$01
00088AC0 E101                       	smpsAlterNote       $01
00088AC2 01                         	dc.b	$01
00088AC3 E1FB                       	smpsAlterNote       $FB
00088AC5 01                         	dc.b	$01
00088AC6 E1FA                       	smpsAlterNote       $FA
00088AC8 01                         	dc.b	$01
00088AC9 E1FE                       	smpsAlterNote       $FE
00088ACB 01                         	dc.b	$01
00088ACC E103                       	smpsAlterNote       $03
00088ACE 0101                       	dc.b	$01, $01
00088AD0 E101                       	smpsAlterNote       $01
00088AD2 01                         	dc.b	$01
00088AD3 E1FE                       	smpsAlterNote       $FE
00088AD5 ECF5                       	smpsPSGAlterVol     $F5
00088AD7 990D                       	dc.b	nC2, $0D
00088AD9 E104                       	smpsAlterNote       $04
00088ADB EC0B                       	smpsPSGAlterVol     $0B
00088ADD 8001 01                    	dc.b	nRst, $01, $01
00088AE0 E102                       	smpsAlterNote       $02
00088AE2 01                         	dc.b	$01
00088AE3 E1FC                       	smpsAlterNote       $FC
00088AE5 0101                       	dc.b	$01, $01
00088AE7 E102                       	smpsAlterNote       $02
00088AE9 01                         	dc.b	$01
00088AEA E104                       	smpsAlterNote       $04
00088AEC 01                         	dc.b	$01
00088AED E1FF                       	smpsAlterNote       $FF
00088AEF ECF5                       	smpsPSGAlterVol     $F5
00088AF1 9B06                       	dc.b	nD2, $06
00088AF3 EC04                       	smpsPSGAlterVol     $04
00088AF5 E701                       	dc.b	smpsNoAttack, $01
00088AF7 EC07                       	smpsPSGAlterVol     $07
00088AF9 8003                       	dc.b	nRst, $03
00088AFB ECF5                       	smpsPSGAlterVol     $F5
00088AFD 9B07                       	dc.b	nD2, $07
00088AFF EC0B                       	smpsPSGAlterVol     $0B
00088B01 8006                       	dc.b	nRst, $06
00088B03 E101                       	smpsAlterNote       $01
00088B05 01                         	dc.b	$01
00088B06 E104                       	smpsAlterNote       $04
00088B08 0101                       	dc.b	$01, $01
00088B0A E1FE                       	smpsAlterNote       $FE
00088B0C 01                         	dc.b	$01
00088B0D E1FC                       	smpsAlterNote       $FC
00088B0F 01                         	dc.b	$01
00088B10 E1FE                       	smpsAlterNote       $FE
00088B12 ECF5                       	smpsPSGAlterVol     $F5
00088B14 9C06                       	dc.b	nEb2, $06
00088B16 EC0B                       	smpsPSGAlterVol     $0B
00088B18 8004                       	dc.b	nRst, $04
00088B1A ECF5                       	smpsPSGAlterVol     $F5
00088B1C 9C06                       	dc.b	nEb2, $06
00088B1E EC04                       	smpsPSGAlterVol     $04
00088B20 E701                       	dc.b	smpsNoAttack, $01
00088B22 EC07                       	smpsPSGAlterVol     $07
00088B24 8006                       	dc.b	nRst, $06
00088B26 E105                       	smpsAlterNote       $05
00088B28 01                         	dc.b	$01
00088B29 E106                       	smpsAlterNote       $06
00088B2B 01                         	dc.b	$01
00088B2C E102                       	smpsAlterNote       $02
00088B2E 01                         	dc.b	$01
00088B2F E1FB                       	smpsAlterNote       $FB
00088B31 01                         	dc.b	$01
00088B32 E1FF                       	smpsAlterNote       $FF
00088B34 ECF5                       	smpsPSGAlterVol     $F5
00088B36 9B06                       	dc.b	nD2, $06
00088B38 EC04                       	smpsPSGAlterVol     $04
00088B3A E701                       	dc.b	smpsNoAttack, $01
00088B3C EC07                       	smpsPSGAlterVol     $07
00088B3E 8003                       	dc.b	nRst, $03
00088B40 ECF5                       	smpsPSGAlterVol     $F5
00088B42 9B06                       	dc.b	nD2, $06
00088B44 EC04                       	smpsPSGAlterVol     $04
00088B46 E701                       	dc.b	smpsNoAttack, $01
00088B48 EC07                       	smpsPSGAlterVol     $07
00088B4A 8006                       	dc.b	nRst, $06
00088B4C E101                       	smpsAlterNote       $01
00088B4E 01                         	dc.b	$01
00088B4F E105                       	smpsAlterNote       $05
00088B51 01                         	dc.b	$01
00088B52 E104                       	smpsAlterNote       $04
00088B54 01                         	dc.b	$01
00088B55 E1FE                       	smpsAlterNote       $FE
00088B57 01                         	dc.b	$01
00088B58 ECF5                       	smpsPSGAlterVol     $F5
00088B5A 9C07                       	dc.b	nEb2, $07
00088B5C EC0B                       	smpsPSGAlterVol     $0B
00088B5E 8004                       	dc.b	nRst, $04
00088B60 ECF5                       	smpsPSGAlterVol     $F5
00088B62 9C06                       	dc.b	nEb2, $06
00088B64 EC0B                       	smpsPSGAlterVol     $0B
00088B66 8007                       	dc.b	nRst, $07
00088B68 E105                       	smpsAlterNote       $05
00088B6A 0101                       	dc.b	$01, $01
00088B6C E102                       	smpsAlterNote       $02
00088B6E 01                         	dc.b	$01
00088B6F E1FB                       	smpsAlterNote       $FB
00088B71 01                         	dc.b	$01
00088B72 E1FF                       	smpsAlterNote       $FF
00088B74 ECF5                       	smpsPSGAlterVol     $F5
00088B76 9B06                       	dc.b	nD2, $06
00088B78 EC04                       	smpsPSGAlterVol     $04
00088B7A E701                       	dc.b	smpsNoAttack, $01
00088B7C EC07                       	smpsPSGAlterVol     $07
00088B7E 8003                       	dc.b	nRst, $03
00088B80 ECF5                       	smpsPSGAlterVol     $F5
00088B82 9B06                       	dc.b	nD2, $06
00088B84 EC04                       	smpsPSGAlterVol     $04
00088B86 E701                       	dc.b	smpsNoAttack, $01
00088B88 EC07                       	smpsPSGAlterVol     $07
00088B8A 8006                       	dc.b	nRst, $06
00088B8C E101                       	smpsAlterNote       $01
00088B8E 01                         	dc.b	$01
00088B8F E105                       	smpsAlterNote       $05
00088B91 01                         	dc.b	$01
00088B92 E101                       	smpsAlterNote       $01
00088B94 01                         	dc.b	$01
00088B95 E1FC                       	smpsAlterNote       $FC
00088B97 01                         	dc.b	$01
00088B98 E1FE                       	smpsAlterNote       $FE
00088B9A ECF5                       	smpsPSGAlterVol     $F5
00088B9C 9C06                       	dc.b	nEb2, $06
00088B9E EC04                       	smpsPSGAlterVol     $04
00088BA0 E701                       	dc.b	smpsNoAttack, $01
00088BA2 EC07                       	smpsPSGAlterVol     $07
00088BA4 8003                       	dc.b	nRst, $03
00088BA6 ECF5                       	smpsPSGAlterVol     $F5
00088BA8 9C07                       	dc.b	nEb2, $07
00088BAA EC0B                       	smpsPSGAlterVol     $0B
00088BAC 8006                       	dc.b	nRst, $06
00088BAE E102                       	smpsAlterNote       $02
00088BB0 01                         	dc.b	$01
00088BB1 E105                       	smpsAlterNote       $05
00088BB3 0101                       	dc.b	$01, $01
00088BB5 E1FF                       	smpsAlterNote       $FF
00088BB7 01                         	dc.b	$01
00088BB8 ECF5                       	smpsPSGAlterVol     $F5
00088BBA 9B07                       	dc.b	nD2, $07
00088BBC EC0B                       	smpsPSGAlterVol     $0B
00088BBE 8004                       	dc.b	nRst, $04
00088BC0 ECF5                       	smpsPSGAlterVol     $F5
00088BC2 9B06                       	dc.b	nD2, $06
00088BC4 EC04                       	smpsPSGAlterVol     $04
00088BC6 E701                       	dc.b	smpsNoAttack, $01
00088BC8 EC07                       	smpsPSGAlterVol     $07
00088BCA 8002                       	dc.b	nRst, $02
00088BCC E1FC                       	smpsAlterNote       $FC
00088BCE ECF5                       	smpsPSGAlterVol     $F5
00088BD0 9006                       	dc.b	nEb1, $06
00088BD2 EC04                       	smpsPSGAlterVol     $04
00088BD4 E701                       	dc.b	smpsNoAttack, $01
00088BD6 ECFC                       	smpsPSGAlterVol     $FC
00088BD8 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00088BDC EC04                       	smpsPSGAlterVol     $04
00088BDE E701                       	dc.b	smpsNoAttack, $01
00088BE0 E1FD                       	smpsAlterNote       $FD
00088BE2 ECFC                       	smpsPSGAlterVol     $FC
00088BE4 9402                       	dc.b	nG1, $02
00088BE6 EC04                       	smpsPSGAlterVol     $04
00088BE8 E701                       	dc.b	smpsNoAttack, $01
00088BEA E1FE                       	smpsAlterNote       $FE
00088BEC ECFC                       	smpsPSGAlterVol     $FC
00088BEE 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00088BF2 EC04                       	smpsPSGAlterVol     $04
00088BF4 E701                       	dc.b	smpsNoAttack, $01
00088BF6 EC07                       	smpsPSGAlterVol     $07
00088BF8 8008                       	dc.b	nRst, $08
00088BFA F6F4 F3                    	smpsJump            music84_Jump06
00088BFD                            
00088BFD                            ; PSG3 Data
00088BFD                            music84_PSG3:
00088BFD F500                       	smpsPSGvoice        $00
00088BFF E1FF                       	smpsAlterNote       $FF
00088C01 EC0F                       	smpsPSGAlterVol     $0F
00088C03 803A                       	dc.b	nRst, $3A
00088C05                            
00088C05                            music84_Jump05:
00088C05 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00088C11 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00088C1B F6FF E8                    	smpsJump            music84_Jump05
00088C1E                            
00088C1E                            ; DAC Data
00088C1E                            music84_DAC:
00088C1E E0C0                       	smpsPan             panCenter, $00
00088C20 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00088C2C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00088C38 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00088C44 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00088C50 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00088C5C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00088C68 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00088C74 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00088C80 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00088C8C 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00088C98 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00088CA4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00088CB0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00088CBC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00088CC8 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00088CD4 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00088CE0 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00088CEC 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00088CF8 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00088D04 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00088D10 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00088D1C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00088D28 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00088D34 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00088D40 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00088D4C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00088D58 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00088D64 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00088D70 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00088D7C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00088D88 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00088D94 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00088DA0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00088DAC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00088DB8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00088DC4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00088DD0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00088DDC 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00088DE8 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00088DF4 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00088E00 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00088E0C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00088E18 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00088E24 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00088E30 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00088E3C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00088E48 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00088E54 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00088E60 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00088E6C 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00088E78 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00088E84 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00088E90 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00088E9C 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00088EA8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00088EB4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00088EC0 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00088ECC 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00088ED8 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00088EE4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00088EF0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00088EFC 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00088F08 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00088F14 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00088F20 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00088F2C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00088F38 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00088F44 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00088F50 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00088F5C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00088F68 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00088F74 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00088F80 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00088F8C 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00088F98 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00088FA4 E0C0                       	smpsPan             panCenter, $00
00088FA6 F2                         	smpsStop
00088FA7                            
00088FA7                            music84_Voices:
00088FA7                            ;	Voice $00
00088FA7                            ;	$3D
00088FA7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00088FA7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00088FA7                            	smpsVcAlgorithm     $05
00088FA7                            	smpsVcFeedback      $07
00088FA7                            	smpsVcUnusedBits    $00
00088FA7                            	smpsVcDetune        $05, $04, $03, $04
00088FA7                            	smpsVcCoarseFreq    $01, $01, $01, $01
00088FA7                            	smpsVcRateScale     $00, $00, $00, $00
00088FA7                            	smpsVcAttackRate    $11, $11, $11, $11
00088FA7                            	smpsVcAmpMod        $00, $00, $00, $00
00088FA7                            	smpsVcDecayRate1    $00, $00, $00, $0A
00088FA7                            	smpsVcDecayRate2    $00, $00, $00, $0B
00088FA7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00088FA7                            	smpsVcReleaseRate   $08, $08, $08, $07
00088FA7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00088FC0                            
00088FC0                            ;	Voice $01
00088FC0                            ;	$04
00088FC0                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00088FC0                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00088FC0                            	smpsVcAlgorithm     $04
00088FC0                            	smpsVcFeedback      $00
00088FC0                            	smpsVcUnusedBits    $00
00088FC0                            	smpsVcDetune        $04, $03, $04, $05
00088FC0                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00088FC0                            	smpsVcRateScale     $00, $01, $00, $01
00088FC0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00088FC0                            	smpsVcAmpMod        $00, $00, $00, $00
00088FC0                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00088FC0                            	smpsVcDecayRate2    $05, $00, $05, $00
00088FC0                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00088FC0                            	smpsVcReleaseRate   $06, $06, $06, $06
00088FC0 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00088FD9                            
00088FD9                            ;	Voice $02
00088FD9                            ;	$30
00088FD9                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00088FD9                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00088FD9                            	smpsVcAlgorithm     $00
00088FD9                            	smpsVcFeedback      $06
00088FD9                            	smpsVcUnusedBits    $00
00088FD9                            	smpsVcDetune        $04, $02, $00, $06
00088FD9                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00088FD9                            	smpsVcRateScale     $00, $00, $00, $00
00088FD9                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00088FD9                            	smpsVcAmpMod        $00, $00, $00, $00
00088FD9                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00088FD9                            	smpsVcDecayRate2    $01, $01, $01, $01
00088FD9                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00088FD9                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00088FD9 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00088FF2                            
00088FF2                            ;	Voice $03
00088FF2                            ;	$3A
00088FF2                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00088FF2                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00088FF2                            	smpsVcAlgorithm     $02
00088FF2                            	smpsVcFeedback      $07
00088FF2                            	smpsVcUnusedBits    $00
00088FF2                            	smpsVcDetune        $04, $06, $02, $00
00088FF2                            	smpsVcCoarseFreq    $01, $01, $01, $01
00088FF2                            	smpsVcRateScale     $00, $00, $00, $00
00088FF2                            	smpsVcAttackRate    $18, $19, $14, $14
00088FF2                            	smpsVcAmpMod        $00, $00, $00, $00
00088FF2                            	smpsVcDecayRate1    $09, $0D, $09, $09
00088FF2                            	smpsVcDecayRate2    $00, $00, $00, $00
00088FF2                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00088FF2                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00088FF2 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008900B                            
0008900B                            ;	Voice $04
0008900B                            ;	$3C
0008900B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008900B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008900B                            	smpsVcAlgorithm     $04
0008900B                            	smpsVcFeedback      $07
0008900B                            	smpsVcUnusedBits    $00
0008900B                            	smpsVcDetune        $07, $00, $00, $03
0008900B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008900B                            	smpsVcRateScale     $00, $00, $00, $00
0008900B                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008900B                            	smpsVcAmpMod        $00, $00, $00, $00
0008900B                            	smpsVcDecayRate1    $00, $00, $00, $00
0008900B                            	smpsVcDecayRate2    $00, $00, $00, $00
0008900B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008900B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008900B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00089024                            
00089024                            ;	Voice $05
00089024                            ;	$38
00089024                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00089024                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00089024                            	smpsVcAlgorithm     $00
00089024                            	smpsVcFeedback      $07
00089024                            	smpsVcUnusedBits    $00
00089024                            	smpsVcDetune        $04, $06, $02, $00
00089024                            	smpsVcCoarseFreq    $01, $01, $01, $00
00089024                            	smpsVcRateScale     $00, $00, $00, $00
00089024                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00089024                            	smpsVcAmpMod        $00, $00, $00, $00
00089024                            	smpsVcDecayRate1    $00, $03, $00, $17
00089024                            	smpsVcDecayRate2    $00, $08, $08, $0B
00089024                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00089024                            	smpsVcReleaseRate   $08, $05, $05, $05
00089024 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008903D                            
0008903D                            
0008903E 00                         		even
0008903E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008D24E                            		even
0008D24E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00090DA6 00                         		even
00090DA6                            Music87:	include	sound\music87.asm; Invincibility
00090DA6                            triple_Header:
00090DA6 =00000001                  smpsHeaderStartSong = 1
00090DA6 0000                       	smpsHeaderVoice     triple_Voices
00090DA8 0501                       	smpsHeaderChan      $05, $01
00090DAA 0200                       	smpsHeaderTempo     $02, $00
00090DAC                            
00090DB0 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00090DB4 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00090DB8 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00090DBC 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00090DC0 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00090DC6                            
00090DC6                            ; DAC Data
00090DC6                            triple_DAC:
00090DC6 E0C0                       	smpsPan             panCenter, $00
00090DC8 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00090DCE                            
00090DCE                            triple_Loop01:
00090DCE 8282 82                    	dc.b	dSnare, dSnare, dSnare
00090DD1                            
00090DD1                            triple_Loop00:
00090DD1 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00090DDD 06                         	dc.b	$06
00090DDE F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00090DE3 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00090DEF 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00090DF6 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00090DFB 0303 1B                    	dc.b	$03, $03, $1B
00090DFE E0C0                       	smpsPan             panCenter, $00
00090E00 F6FF C4                    	smpsJump triple_DAC
00090E03                            
00090E03                            ; FM1 Data
00090E03                            triple_FM1:
00090E03 E0C0                       	smpsPan             panCenter, $00
00090E07 8018                       	dc.b	nRst, $18
00090E09                            
00090E09                            triple_Loop0B:
00090E09 AC06 B8                    	dc.b	nG3, $06, nG4
00090E0C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00090E11                            
00090E11                            triple_Loop0C:
00090E11 A7B3                       	dc.b	nD3, nD4
00090E13 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00090E18                            
00090E18                            triple_Loop0D:
00090E18 A9B5                       	dc.b	nE3, nE4
00090E1A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00090E1F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00090E27 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00090E2C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00090E38 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00090E44 AD                         	dc.b	nAb3
00090E45 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00090E4A 8018                       	dc.b	nRst, $18
00090E4C E0C0                       	smpsPan             panCenter, $00
00090E50 F6FF B1                    	smpsJump triple_FM1
00090E53                            
00090E53                            ; FM2 Data
00090E53                            triple_FM2:
00090E53 E0C0                       	smpsPan             panCenter, $00
00090E57 8018                       	dc.b	nRst, $18
00090E59                            
00090E59                            triple_Loop07:
00090E59 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090E65 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090E71 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00090E76 8003                       	dc.b	nRst, $03
00090E78                            
00090E78                            triple_Loop08:
00090E78 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090E7E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00090E83 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00090E89                            
00090E89                            triple_Loop09:
00090E89 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090E95 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090EA1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00090EA6 8003                       	dc.b	nRst, $03
00090EA8                            
00090EA8                            triple_Loop0A:
00090EA8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090EAE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00090EB3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00090EB9 E0C0                       	smpsPan             panCenter, $00
00090EBD F6FF 94                    	smpsJump triple_FM2
00090EC0                            
00090EC0                            ; FM3 Data
00090EC0                            triple_FM3:
00090EC0 E0C0                       	smpsPan             panCenter, $00
00090EC4 8018                       	dc.b	nRst, $18
00090EC6                            
00090EC6                            triple_Loop06:
00090EC6 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00090ECD F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00090ED2 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00090EDE BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00090EEA C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00090EED F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00090EF2 8018                       	dc.b	nRst, $18
00090EF4 E0C0                       	smpsPan             panCenter, $00
00090EF8 F6FF C6                    	smpsJump triple_FM3
00090EFB                            
00090EFB                            ; FM4 Data
00090EFB                            triple_FM4:
00090EFB E103                       	smpsAlterNote       $03
00090EFF E0C0                       	smpsPan             panCenter, $00
00090F01 8018                       	dc.b	nRst, $18
00090F03                            
00090F03                            triple_Loop02:
00090F03 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090F0F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090F1B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00090F20 8003                       	dc.b	nRst, $03
00090F22                            
00090F22                            triple_Loop03:
00090F22 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090F28 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00090F2D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00090F33                            
00090F33                            triple_Loop04:
00090F33 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00090F3F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00090F4B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00090F50 8003                       	dc.b	nRst, $03
00090F52                            
00090F52                            triple_Loop05:
00090F52 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00090F58 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00090F5D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00090F63 E0C0                       	smpsPan             panCenter, $00
00090F65 F6FF 94                    	smpsJump triple_FM4
00090F68                            
00090F68                            ; PSG1 Data
00090F68                            triple_PSG1:
00090F68 8018                       	dc.b	nRst, $18
00090F6A                            
00090F6A                            triple_Loop0E:
00090F6A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090F76 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090F82 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090F8E 9402 8004                  	dc.b	nG1, $02, nRst, $04
00090F92 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00090F97 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090FA3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090FAF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090FBB 9402 8007                  	dc.b	nG1, $02, nRst, $07
00090FBF                            
00090FBF                            triple_Loop0F:
00090FBF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00090FC5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00090FCA 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00090FD0                            
00090FD0                            triple_Loop10:
00090FD0 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00090FDC 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00090FE8 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00090FF4 9402 8004                  	dc.b	nG1, $02, nRst, $04
00090FF8 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00090FFD A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00091009 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00091015 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00091021 9402 8007                  	dc.b	nG1, $02, nRst, $07
00091025                            
00091025                            triple_Loop11:
00091025 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009102B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00091030 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00091036 F500                       	smpsPSGvoice        $00
00091038 F6FF 2E                    	smpsJump triple_PSG1
0009103B                            
0009103B                            triple_Voices:
0009103B                            ;	Voice $00
0009103B                            ;	$3A
0009103B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009103B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009103B                            	smpsVcAlgorithm     $02
0009103B                            	smpsVcFeedback      $07
0009103B                            	smpsVcUnusedBits    $00
0009103B                            	smpsVcDetune        $00, $00, $00, $00
0009103B                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009103B                            	smpsVcRateScale     $01, $02, $02, $02
0009103B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009103B                            	smpsVcAmpMod        $00, $00, $00, $00
0009103B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009103B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009103B                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009103B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009103B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00091054                            
00091054                            ;	Voice $01
00091054                            ;	$20
00091054                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00091054                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00091054                            	smpsVcAlgorithm     $00
00091054                            	smpsVcFeedback      $04
00091054                            	smpsVcUnusedBits    $00
00091054                            	smpsVcDetune        $00, $00, $03, $07
00091054                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00091054                            	smpsVcRateScale     $03, $03, $03, $02
00091054                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00091054                            	smpsVcAmpMod        $00, $00, $00, $00
00091054                            	smpsVcDecayRate1    $04, $04, $0A, $10
00091054                            	smpsVcDecayRate2    $08, $08, $08, $0F
00091054                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00091054                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00091054 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00091054 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009106E 00                         		even
0009106E                            Music88:	incbin	sound\music88.bin; Extra Life
0009115C                            		even
0009115C                            Music89:	incbin	sound\music89.bin; Special Stage
00095024 00                         		even
00095024                            Music8A:	incbin	sound\music8A.bin; Title Screen
000951EE                            		even
000951EE                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00095488                            		even
00095488                            Music8C:	incbin	sound\music8C.bin; VS Boss
000956A4                            		even
000956A4                            Music8D:	incbin	sound\music8D.bin; Final Zone
000958C0                            		even
000958C0                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00095D2E 00                         		even
00095D2E                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009636E 00                         		even
0009636E                            Music90:	incbin	sound\music90.bin ; Continue
000964CC                            		even
000964CC                            Music91:	incbin	sound\music91.bin ; Credits
0009779A                            		even
0009779A                            Music92:	incbin	sound\music92.bin ; Drowning
000978C4                            		even
000978C4                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
00097992                            		even
00097992                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000979CC 00                         		even
000979CC                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00097A06 00                         		even
00097A06                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
00097A40 00                         		even
00097A40                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
00097A7A 00                         		even
00097A7A                            Music98:	incbin	sound\music98.bin ; Marble Act 2
00097AB4 00                         		even
00097AB4                            Music99:	incbin	sound\music99.bin ; Marble Act 3
00097AEE 00                         		even
00097AEE                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00097B28 00                         		even
00097B28                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
00097B62 00                         		even
00097B62                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
00097B9C 00                         		even
00097B9C                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
00097BD6 00                         		even
00097BD6                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
00097C10 00                         		even
00097C10                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00097C4A 00                         		even
00097C4A                            ; ---------------------------------------------------------------------------
00097C4A                            ; Sound	effect pointers
00097C4A                            ; ---------------------------------------------------------------------------
00097C4A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00097C56 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00097C62 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00097C6E 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00097C7A 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00097C86 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00097C92 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00097C9E 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00097CAA 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00097CB6 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00097CC2 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00097CCE 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00097CDA 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00097CE6 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00097CF2 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00097CFE 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00097D0A 0000 0000                  SoundD0Index:	dc.l SoundD0
00097D0E                            SoundA0:	incbin	sound\soundA0.bin
00097D24                            		even
00097D24                            SoundA1:	incbin	sound\soundA1.bin
00097D4E                            		even
00097D4E                            SoundA2:	incbin	sound\soundA2.bin
00097D6E                            		even
00097D6E                            SoundA3:	incbin	sound\soundA3.bin
00097DA0                            		even
00097DA0                            SoundA4:	incbin	sound\soundA4.bin
00097DD6                            		even
00097DD6                            SoundA5:	incbin	sound\soundA5.bin
00097E02                            		even
00097E02                            SoundA6:	incbin	sound\soundA6.bin
00097E32                            		even
00097E32                            SoundA7:	incbin	sound\soundA7.bin
00097E62                            		even
00097E62                            SoundA8:	incbin	sound\soundA8.bin
00097E96                            		even
00097E96                            SoundA9:	incbin	sound\soundA9.bin
00097EA8                            		even
00097EA8                            SoundAA:	incbin	sound\soundAA.bin
00097EEA                            		even
00097EEA                            SoundAB:	incbin	sound\soundAB.bin
00097F0A                            		even
00097F0A                            SoundAC:	incbin	sound\soundAC.bin
00097F3E                            		even
00097F3E                            SoundAD:	incbin	sound\soundAD.bin
00097F74                            		even
00097F74                            SoundAE:	incbin	sound\soundAE.bin
00097FBE                            		even
00097FBE                            SoundAF:	incbin	sound\soundAF.bin
00097FEC                            		even
00097FEC                            SoundB0:	incbin	sound\soundB0.bin
0009801E                            		even
0009801E                            SoundB1:	incbin	sound\soundB1.bin
0009804A                            		even
0009804A                            SoundB2:	incbin	sound\soundB2.bin
0009809A                            		even
0009809A                            SoundB3:	incbin	sound\soundB3.bin
000980E4                            		even
000980E4                            SoundB4:	include	sound\soundB4.asm
000980E4                            SndB4_Bumper_Header:
000980E4 =00000001                  smpsHeaderStartSong = 1
000980E4 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000980E6 01                         	smpsHeaderTempoSFX  $01
000980E7 03                         	smpsHeaderChanSFX   $03
000980E8                            
000980FA                            
000980FA                            ; FM5 Data
000980FA                            SndB4_Bumper_FM5:
000980FC F600 00                    	smpsJump            SndB4_Bumper_Jump00
000980FF                            
000980FF                            ; FM4 Data
000980FF                            SndB4_Bumper_FM4:
000980FF F2                         	smpsStop
00098100                            
00098100                            SndB4_Bumper_Jump00:
00098100 A020                       	dc.b	nG2, $20
00098102 F2                         	smpsStop
00098103                            
00098103                            ; FM3 Data
00098103                            SndB4_Bumper_FM3:
00098103 F2                         	smpsStop
00098104                            
00098104                            SndB4_Bumper_Voices:
00098104                            ;	Voice $00
00098104                            ;	$32
00098104                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
00098104                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
00098104                            	smpsVcAlgorithm     $02
00098104                            	smpsVcFeedback      $06
00098104                            	smpsVcUnusedBits    $00
00098104                            	smpsVcDetune        $07, $07, $02, $00
00098104                            	smpsVcCoarseFreq    $00, $00, $00, $04
00098104                            	smpsVcRateScale     $00, $00, $00, $00
00098104                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00098104                            	smpsVcAmpMod        $00, $00, $00, $00
00098104                            	smpsVcDecayRate1    $08, $00, $00, $09
00098104                            	smpsVcDecayRate2    $0B, $00, $00, $09
00098104                            	smpsVcDecayLevel    $00, $00, $00, $00
00098104                            	smpsVcReleaseRate   $0F, $00, $00, $00
00098104 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00098104 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009811E 00                         		even
0009811E                            SoundB5:	incbin	sound\soundB5.bin
0009814C                            		even
0009814C                            SoundB6:	incbin	sound\soundB6.bin
0009816A                            		even
0009816A                            SoundB7:	incbin	sound\soundB7.bin
000981A6                            		even
000981A6                            SoundB8:	incbin	sound\soundB8.bin
000981C4                            		even
000981C4                            SoundB9:	incbin	sound\soundB9.bin
00098228                            		even
00098228                            SoundBA:	incbin	sound\soundBA.bin
00098250                            		even
00098250                            SoundBB:	incbin	sound\soundBB.bin
0009827C                            		even
0009827C                            SoundBC:	incbin	sound\soundBC.bin
000982BE                            		even
000982BE                            SoundBD:	incbin	sound\soundBD.bin
00098312                            		even
00098312                            SoundBE:	incbin	sound\soundBE.bin
0009834C                            		even
0009834C                            SoundBF:	incbin	sound\soundBF.bin
000983BE                            		even
000983BE                            SoundC0:	incbin	sound\soundC0.bin
000983EC                            		even
000983EC                            SoundC1:	incbin	sound\soundC1.bin
00098446                            		even
00098446                            SoundC2:	incbin	sound\soundC2.bin
00098470                            		even
00098470                            SoundC3:	incbin	sound\soundC3.bin
000984EA                            		even
000984EA                            SoundC4:	incbin	sound\soundC4.bin
00098512                            		even
00098512                            SoundC5:	incbin	sound\soundC5.bin
0009857A                            		even
0009857A                            SoundC6:	incbin	sound\soundC6.bin
000985BC                            		even
000985BC                            SoundC7:	incbin	sound\soundC7.bin
000985EA                            		even
000985EA                            SoundC8:	incbin	sound\soundC8.bin
000985FC                            		even
000985FC                            SoundC9:	incbin	sound\soundC9.bin
0009862A                            		even
0009862A                            SoundCA:	incbin	sound\soundCA.bin
00098658                            		even
00098658                            SoundCB:	incbin	sound\soundCB.bin
000986A4                            		even
000986A4                            SoundCC:	incbin	sound\soundCC.bin
000986DE                            		even
000986DE                            SoundCD:	incbin	sound\soundCD.bin
000986EC                            		even
000986EC                            SoundCE:	incbin	sound\soundCE.bin
0009871A                            		even
0009871A                            SoundCF:	incbin	sound\soundCF.bin
00098752                            		even
00098752                            SoundD0:	incbin	sound\soundD0.bin
0009878C                            		even
0009878C                            SegaPCM:	incbin	sound\segapcm.bin
000B28E2                            SegaPCM_end:	even
000B28E2                            
000B28E2                            IdiotPCM:	incbin	sound\youare.bin
000BC9B4 00                         IdiotPCM_end:	even
000BC9B4                            
000BC9B4                            ; end of 'ROM'
000BC9B4                            EndOfRom:
000BC9B4                            
000BC9B4                            
