00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
00002630                            Pal_GHZ:	incbin	pallet\ghz.bin
00002690                            Pal_LZ:		incbin	pallet\lz.bin
000026F0                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002770                            Pal_MZ:		incbin	pallet\mz.bin
000027D0                            Pal_SLZ:	incbin	pallet\slz.bin
00002830                            Pal_SYZ:	incbin	pallet\syz.bin
00002890                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000028F0                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002950                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000029D0                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002A30                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002AB0                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002AD0                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002AF0                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B70                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002BB0                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C30                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C50                            
00002C50                            ; ---------------------------------------------------------------------------
00002C50                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C50                            ; ---------------------------------------------------------------------------
00002C50                            
00002C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C50                            
00002C50                            
00002C50                            DelayProgram:				; XREF: PauseGame
00002C50 46FC 2300                  		move	#$2300,sr
00002C54                            
00002C54                            loc_29AC:
00002C54 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C58 66FA                       		bne.s	loc_29AC
00002C5A 4E75                       		rts	
00002C5C                            ; End of function DelayProgram
00002C5C                            
00002C5C                            ; ---------------------------------------------------------------------------
00002C5C                            ; Subroutine to	generate a pseudo-random number	in d0
00002C5C                            ; ---------------------------------------------------------------------------
00002C5C                            
00002C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C5C                            
00002C5C                            
00002C5C                            RandomNumber:
00002C5C 2238 F636                  		move.l	($FFFFF636).w,d1
00002C60 6600                       		bne.s	loc_29C0
00002C62 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C68                            
00002C68                            loc_29C0:
00002C68 2001                       		move.l	d1,d0
00002C6A E581                       		asl.l	#2,d1
00002C6C D280                       		add.l	d0,d1
00002C6E E781                       		asl.l	#3,d1
00002C70 D280                       		add.l	d0,d1
00002C72 3001                       		move.w	d1,d0
00002C74 4841                       		swap	d1
00002C76 D041                       		add.w	d1,d0
00002C78 3200                       		move.w	d0,d1
00002C7A 4841                       		swap	d1
00002C7C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C80 4E75                       		rts	
00002C82                            ; End of function RandomNumber
00002C82                            
00002C82                            
00002C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C82                            
00002C82                            
00002C82                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C82 0240 00FF                  		andi.w	#$FF,d0
00002C86 D040                       		add.w	d0,d0
00002C88 0640 0080                  		addi.w	#$80,d0
00002C8C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C90 0440 0080                  		subi.w	#$80,d0
00002C94 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C98 4E75                       		rts	
00002C9A                            ; End of function CalcSine
00002C9A                            
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F1A                            
00002F1A                            ; ===========================================================================
00002F1A 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F1E 3200                       		move.w	d0,d1
00002F20 4841                       		swap	d1
00002F22 7000                       		moveq	#0,d0
00002F24 3200                       		move.w	d0,d1
00002F26 7407                       		moveq	#7,d2
00002F28                            
00002F28                            loc_2C80:
00002F28 E599                       		rol.l	#2,d1
00002F2A D040                       		add.w	d0,d0
00002F2C 5240                       		addq.w	#1,d0
00002F2E 9240                       		sub.w	d0,d1
00002F30 6400                       		bcc.s	loc_2C9A
00002F32 D240                       		add.w	d0,d1
00002F34 5340                       		subq.w	#1,d0
00002F36 51CA FFF0                  		dbf	d2,loc_2C80
00002F3A E248                       		lsr.w	#1,d0
00002F3C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F40 4E75                       		rts	
00002F42                            ; ===========================================================================
00002F42                            
00002F42                            loc_2C9A:
00002F42 5240                       		addq.w	#1,d0
00002F44 51CA FFE2                  		dbf	d2,loc_2C80
00002F48 E248                       		lsr.w	#1,d0
00002F4A 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F4E 4E75                       		rts	
00002F50                            
00002F50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F50                            
00002F50                            
00002F50                            CalcAngle:
00002F50 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F54 7600                       		moveq	#0,d3
00002F56 7800                       		moveq	#0,d4
00002F58 3601                       		move.w	d1,d3
00002F5A 3802                       		move.w	d2,d4
00002F5C 8843                       		or.w	d3,d4
00002F5E 6700                       		beq.s	loc_2D04
00002F60 3802                       		move.w	d2,d4
00002F62 4A43                       		tst.w	d3
00002F64 6A00 0000                  		bpl.w	loc_2CC2
00002F68 4443                       		neg.w	d3
00002F6A                            
00002F6A                            loc_2CC2:
00002F6A 4A44                       		tst.w	d4
00002F6C 6A00 0000                  		bpl.w	loc_2CCA
00002F70 4444                       		neg.w	d4
00002F72                            
00002F72                            loc_2CCA:
00002F72 B843                       		cmp.w	d3,d4
00002F74 6400 0000                  		bcc.w	loc_2CDC
00002F78 E18C                       		lsl.l	#8,d4
00002F7A 88C3                       		divu.w	d3,d4
00002F7C 7000                       		moveq	#0,d0
00002F7E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F82 6000                       		bra.s	loc_2CE6
00002F84                            ; ===========================================================================
00002F84                            
00002F84                            loc_2CDC:				; XREF: CalcAngle
00002F84 E18B                       		lsl.l	#8,d3
00002F86 86C4                       		divu.w	d4,d3
00002F88 7040                       		moveq	#$40,d0
00002F8A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F8E                            
00002F8E                            loc_2CE6:
00002F8E 4A41                       		tst.w	d1
00002F90 6A00 0000                  		bpl.w	loc_2CF2
00002F94 4440                       		neg.w	d0
00002F96 0640 0080                  		addi.w	#$80,d0
00002F9A                            
00002F9A                            loc_2CF2:
00002F9A 4A42                       		tst.w	d2
00002F9C 6A00 0000                  		bpl.w	loc_2CFE
00002FA0 4440                       		neg.w	d0
00002FA2 0640 0100                  		addi.w	#$100,d0
00002FA6                            
00002FA6                            loc_2CFE:
00002FA6 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FAA 4E75                       		rts	
00002FAC                            ; ===========================================================================
00002FAC                            
00002FAC                            loc_2D04:				; XREF: CalcAngle
00002FAC 303C 0040                  		move.w	#$40,d0
00002FB0 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FB4 4E75                       		rts	
00002FB6                            ; End of function CalcAngle
00002FB6                            
00002FB6                            ; ===========================================================================
00002FB6                            
00002FB6                            Angle_Data:	incbin	misc\angles.bin
000030B8                            
000030B8                            ; ===========================================================================
000030B8                            
000030B8                            ; ---------------------------------------------------------------------------
000030B8                            ; Sega screen
000030B8                            ; ---------------------------------------------------------------------------
000030B8                            
000030B8                            SegaScreen:				; XREF: GameModeArray
000030B8 103C 00E4                  		move.b	#$E4,d0
000030BC 6100 E4FE                  		bsr.w	PlaySound_Special ; stop music
000030C0 6100 E73C                  		bsr.w	ClearPLC
000030C4 6100 EFAC                  		bsr.w	Pal_FadeFrom
000030C8 4DF9 00C0 0004             		lea	($C00004).l,a6
000030CE 3CBC 8004                  		move.w	#$8004,(a6)
000030D2 3CBC 8230                  		move.w	#$8230,(a6)
000030D6 3CBC 8407                  		move.w	#$8407,(a6)
000030DA 3CBC 8700                  		move.w	#$8700,(a6)
000030DE 3CBC 8B00                  		move.w	#$8B00,(a6)
000030E2 4238 F64E                  		clr.b	($FFFFF64E).w
000030E6 46FC 2700                  		move	#$2700,sr
000030EA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030EE 0200 00BF                  		andi.b	#$BF,d0
000030F2 33C0 00C0 0004             		move.w	d0,($C00004).l
000030F8 6100 E3EA                  		bsr.w	ClearScreen
000030FC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003106 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000310C 6100 E552                  		bsr.w	NemDec
00003110 43F9 00FF 0000             		lea	($FF0000).l,a1
00003116 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000311C 303C 0000                  		move.w	#0,d0
00003120 6100 E81C                  		bsr.w	EniDec
00003124 43F9 00FF 0000             		lea	($FF0000).l,a1
0000312A 203C 6510 0003             		move.l	#$65100003,d0
00003130 7217                       		moveq	#$17,d1
00003132 7407                       		moveq	#7,d2
00003134 6100 E50A                  		bsr.w	ShowVDPGraphics
00003138 43F9 00FF 0180             		lea	($FF0180).l,a1
0000313E 203C 4000 0003             		move.l	#$40000003,d0
00003144 7227                       		moveq	#$27,d1
00003146 741B                       		moveq	#$1B,d2
00003148 6100 E4F6                  		bsr.w	ShowVDPGraphics
0000314C 7000                       		moveq	#0,d0
0000314E 6100 F1E8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003152 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003158 31FC 0000 F634             		move.w	#0,($FFFFF634).w
0000315E 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003164 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178                            
00003178                            Sega_WaitPallet:
00003178 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000317E 6100 FAD0                  		bsr.w	DelayProgram
00003182 6100 F0A6                  		bsr.w	PalCycle_Sega
00003186 66F0                       		bne.s	Sega_WaitPallet
00003188                            
00003188 103C 00E1                  		move.b	#$E1,d0
0000318C 6100 E42E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003190 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003196 6100 FAB8                  		bsr.w	DelayProgram
0000319A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000031A0                            
000031A0                            Sega_WaitEnd:
000031A0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031A6 6100 FAA8                  		bsr.w	DelayProgram
000031AA 4A78 F614                  		tst.w	($FFFFF614).w
000031AE 6700                       		beq.s	Sega_GotoTitle
000031B0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000031B6 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000031B8                            
000031B8                            Sega_GotoTitle:
000031B8 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031BE 4E75                       		rts	
000031C0                            ; ===========================================================================
000031C0                            
000031C0                            ; ---------------------------------------------------------------------------
000031C0                            ; Title	screen
000031C0                            ; ---------------------------------------------------------------------------
000031C0                            
000031C0                            TitleScreen:				; XREF: GameModeArray
000031C0 103C 00E4                  		move.b	#$E4,d0
000031C4 6100 E3F6                  		bsr.w	PlaySound_Special ; stop music
000031C8 6100 E634                  		bsr.w	ClearPLC
000031CC 6100 EEA4                  		bsr.w	Pal_FadeFrom
000031D0 46FC 2700                  		move	#$2700,sr
000031D4 6100 E39C                  		bsr.w	SoundDriverLoad
000031D8 4DF9 00C0 0004             		lea	($C00004).l,a6
000031DE 3CBC 8004                  		move.w	#$8004,(a6)
000031E2 3CBC 8230                  		move.w	#$8230,(a6)
000031E6 3CBC 8407                  		move.w	#$8407,(a6)
000031EA 3CBC 9001                  		move.w	#$9001,(a6)
000031EE 3CBC 9200                  		move.w	#$9200,(a6)
000031F2 3CBC 8B03                  		move.w	#$8B03,(a6)
000031F6 3CBC 8720                  		move.w	#$8720,(a6)
000031FA 4238 F64E                  		clr.b	($FFFFF64E).w
000031FE 6100 E2E4                  		bsr.w	ClearScreen
00003202 43F8 D000                  		lea	($FFFFD000).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 07FF                  		move.w	#$7FF,d1
0000320C                            
0000320C                            Title_ClrObjRam:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003212                            
00003212 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000321C 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003222 6100 E43C                  		bsr.w	NemDec
00003226 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003230 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003236 6100 E428                  		bsr.w	NemDec
0000323A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003240 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003246 303C 0000                  		move.w	#0,d0
0000324A 6100 E6F2                  		bsr.w	EniDec
0000324E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003254 203C 4000 0003             		move.l	#$40000003,d0
0000325A 7227                       		moveq	#$27,d1
0000325C 741B                       		moveq	#$1B,d2
0000325E 6100 E3E0                  		bsr.w	ShowVDPGraphics
00003262 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003266 7000                       		moveq	#0,d0
00003268 323C 001F                  		move.w	#$1F,d1
0000326C                            
0000326C                            Title_ClrPallet:
0000326C 22C0                       		move.l	d0,(a1)+
0000326E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003272                            
00003272 7003                       		moveq	#3,d0		; load Sonic's pallet
00003274 6100 F0A6                  		bsr.w	PalLoad1
00003278 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000327E 4EB9 0000 0000             		jsr	ObjectsLoad
00003284 4EB9 0000 0000             		jsr	BuildSprites
0000328A 6100 ED40                  		bsr.w	Pal_FadeTo
0000328E 46FC 2700                  		move	#$2700,sr
00003292 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000329C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000032A2 6100 E3BC                  		bsr.w	NemDec
000032A6 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000032B0 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000032B6 6100 E3A8                  		bsr.w	NemDec
000032BA 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000032C4 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000032CA 6100 E394                  		bsr.w	NemDec
000032CE 4DF9 00C0 0000             		lea	($C00000).l,a6
000032D4 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000032DC 4BF9 0000 05F0             		lea	(Art_Text).l,a5
000032E2 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000032E6                            
000032E6                            Title_LoadText:
000032E6 2C9D                       		move.l	(a5)+,(a6)
000032E8 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000032EC                            
000032EC 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000032F2 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000032F8 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000032FE 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003304 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000330A 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003310 6100 0000                  		bsr.w	LevelSizeLoad
00003314 6100 0000                  		bsr.w	DeformBgLayer
00003318 43F8 B000                  		lea	($FFFFB000).w,a1
0000331C 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003322 303C 0000                  		move.w	#0,d0
00003326 6100 E616                  		bsr.w	EniDec
0000332A 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003330 43F9 00FF 0000             		lea	($FF0000).l,a1
00003336 6100 E784                  		bsr.w	KosDec
0000333A 6100 0000                  		bsr.w	LevelLayoutLoad
0000333E 6100 ED32                  		bsr.w	Pal_FadeFrom
00003342 46FC 2700                  		move	#$2700,sr
00003346 6100 E19C                  		bsr.w	ClearScreen
0000334A 4BF9 00C0 0004             		lea	($C00004).l,a5
00003350 4DF9 00C0 0000             		lea	($C00000).l,a6
00003356 47F8 F708                  		lea	($FFFFF708).w,a3
0000335A 49F8 A440                  		lea	($FFFFA440).w,a4
0000335E 343C 6000                  		move.w	#$6000,d2
00003362 6100 0000                  		bsr.w	LoadTilesFromStart2
00003366 43F9 00FF 0000             		lea	($FF0000).l,a1
0000336C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003372 303C 0000                  		move.w	#0,d0
00003376 6100 E5C6                  		bsr.w	EniDec
0000337A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003380 203C 4206 0003             		move.l	#$42060003,d0
00003386 7221                       		moveq	#$21,d1
00003388 7415                       		moveq	#$15,d2
0000338A 6100 E2B4                  		bsr.w	ShowVDPGraphics
0000338E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003398 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000339E 6100 E2C0                  		bsr.w	NemDec
000033A2 7001                       		moveq	#1,d0		; load title screen pallet
000033A4 6100 EF76                  		bsr.w	PalLoad1
000033A8 103C 008A                  		move.b	#$8A,d0		; play title screen music
000033AC 6100 E20E                  		bsr.w	PlaySound_Special
000033B0 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000033B6 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000033BC 43F8 D080                  		lea	($FFFFD080).w,a1
000033C0 7000                       		moveq	#0,d0
000033C2 323C 0007                  		move.w	#7,d1
000033C6                            
000033C6                            Title_ClrObjRam2:
000033C6 22C0                       		move.l	d0,(a1)+
000033C8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000033CC                            
000033CC 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000033D2 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000033D8 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000033DE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000033E4 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000033EA 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000033F0 4EB9 0000 0000             		jsr	ObjectsLoad
000033F6 6100 0000                  		bsr.w	DeformBgLayer
000033FA 4EB9 0000 0000             		jsr	BuildSprites
00003400 7000                       		moveq	#0,d0
00003402 6100 E3CE                  		bsr.w	LoadPLC2
00003406 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000340C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003412 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003416 0000 0040                  		ori.b	#$40,d0
0000341A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003420 6100 EBAA                  		bsr.w	Pal_FadeTo
00003424                            
00003424                            loc_317C:
00003424 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000342A 6100 F824                  		bsr.w	DelayProgram
0000342E 4EB9 0000 0000             		jsr	ObjectsLoad
00003434 6100 0000                  		bsr.w	DeformBgLayer
00003438 4EB9 0000 0000             		jsr	BuildSprites
0000343E 6100 E73C                  		bsr.w	PalCycle_Title
00003442 6100 E3C8                  		bsr.w	RunPLC_RAM
00003446 3038 D008                  		move.w	($FFFFD008).w,d0
0000344A 5440                       		addq.w	#2,d0
0000344C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003450 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003454 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003456 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000345C 4E75                       		rts	
0000345E                            ; ===========================================================================
0000345E                            
0000345E                            Title_ChkRegion:
0000345E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003462 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003464 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000346A 6000                       		bra.s	Title_EnterCheat
0000346C                            ; ===========================================================================
0000346C                            
0000346C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000346C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003472                            
00003472                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003472 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003476 D0C0                       		adda.w	d0,a0
00003478 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000347C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003480 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003482 6600                       		bne.s	loc_3210	; if not, branch
00003484 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003488 4A00                       		tst.b	d0
0000348A 6600                       		bne.s	Title_CountC
0000348C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003490 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003494 E249                       		lsr.w	#1,d1
00003496 0241 0003                  		andi.w	#3,d1
0000349A 6700                       		beq.s	Title_PlayRing
0000349C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000034A0 6A00                       		bpl.s	Title_PlayRing
000034A2 7201                       		moveq	#1,d1
000034A4 1181 1001                  		move.b	d1,1(a0,d1.w)
000034A8                            
000034A8                            Title_PlayRing:
000034A8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000034AE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034B2 6100 E108                  		bsr.w	PlaySound_Special
000034B6 6000                       		bra.s	Title_CountC
000034B8                            ; ===========================================================================
000034B8                            
000034B8                            loc_3210:				; XREF: Title_EnterCheat
000034B8 4A00                       		tst.b	d0
000034BA 6700                       		beq.s	Title_CountC
000034BC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034C2 6700                       		beq.s	Title_CountC
000034C4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034CA                            
000034CA                            Title_CountC:
000034CA 1038 F605                  		move.b	($FFFFF605).w,d0
000034CE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000034D2 6700                       		beq.s	loc_3230	; if not, branch
000034D4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000034D8                            
000034D8                            loc_3230:
000034D8 4A78 F614                  		tst.w	($FFFFF614).w
000034DC 6700 0000                  		beq.w	Demo
000034E0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000034E6 6700 FF3C                  		beq.w	loc_317C	; if not, branch
000034EA                            
000034EA                            Title_ChkLevSel:
000034EA 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000034EE 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034F2 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000034F8 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034FC 7002                       		moveq	#2,d0
000034FE 6100 EE38                  		bsr.w	PalLoad2	; load level select pallet
00003502 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003506 7000                       		moveq	#0,d0
00003508 323C 00DF                  		move.w	#$DF,d1
0000350C                            
0000350C                            Title_ClrScroll:
0000350C 22C0                       		move.l	d0,(a1)+
0000350E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003512                            
00003512 21C0 F616                  		move.l	d0,($FFFFF616).w
00003516 46FC 2700                  		move	#$2700,sr
0000351A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003520 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000352A 323C 03FF                  		move.w	#$3FF,d1
0000352E                            
0000352E                            Title_ClrVram:
0000352E 2C80                       		move.l	d0,(a6)
00003530 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003534                            
00003534 6100 0000                  		bsr.w	LevSelTextLoad
00003538                            		
00003538                            		; sound test fix
00003538 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000353C 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003542 363C E65F                  		move.w	#$E680-$21,d3
00003546 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000354A 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000354E 6000 0000                  		bra.w	LevelSelect
00003552                            ; ---------------------------------------------------------------------------
00003552                            ; Level	Select
00003552                            ; ---------------------------------------------------------------------------
00003552                            YouAreAnIdiot:
00003552 6100 DF90                  		bsr.w	ClearScreen
00003556                            		
00003556 4DF9 00C0 0004             		lea	($C00004).l,a6
0000355C 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003560                            		
00003560 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000356A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003570 6100 E0EE                  		bsr.w	NemDec
00003574 43F9 00FF 0000             		lea	($FF0000).l,a1
0000357A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003580 303C 0000                  		move.w	#0,d0
00003584 6100 E3B8                  		bsr.w	EniDec
00003588 43F9 00FF 0000             		lea	($FF0000).l,a1
0000358E 203C 4304 0003             		move.l	#$43040003,d0
00003594 7223                       		moveq	#35,d1
00003596 740D                       		moveq	#13,d2
00003598 6100 E0A6                  		bsr.w	ShowVDPGraphics
0000359C 7014                       		moveq	#20,d0
0000359E 6100 ED98                  		bsr.w	PalLoad2	; load Sega logo pallet
000035A2                            		
000035A2 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
000035A6 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035AA                            	@wait:
000035AA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035B0 6100 F69E                  		bsr.w	DelayProgram
000035B4 60F4                       		bra.s	@wait
000035B6                            LevelSelect:
000035B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035BC 6100 F692                  		bsr.w	DelayProgram
000035C0 6100 0000                  		bsr.w	LevSelControls
000035C4 6100 E246                  		bsr.w	RunPLC_RAM
000035C8 4AB8 F680                  		tst.l	($FFFFF680).w
000035CC 66E8                       		bne.s	LevelSelect
000035CE 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035D4 67E0                       		beq.s	LevelSelect	; if not, branch
000035D6 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035DA 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035DE 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
000035E2                            		
000035E2 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000035E6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000035E8                            		
000035E8 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035EC 0640 0080                  		addi.w	#$80,d0
000035F0 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035F4                            		
000035F4 4EB9 0000 0000             		jsr		ShowNow_Playing
000035FA 60BA                       		bra.s	LevelSelect
000035FC                            ; ===========================================================================
000035FC                            
000035FC                            LevSel_Ending:				; XREF: LevelSelect
000035FC 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003602 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003608 4E75                       		rts	
0000360A                            ; ===========================================================================
0000360A                            
0000360A                            LevSel_Credits:				; XREF: LevelSelect
0000360A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003610 103C 0091                  		move.b	#$91,d0
00003614 6100 DFA6                  		bsr.w	PlaySound_Special ; play credits music
00003618 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000361E 4E75                       		rts	
00003620                            ; ===========================================================================
00003620                            
00003620                            LevSel_Level_SS:			; XREF: LevelSelect
00003620 D040                       		add.w	d0,d0
00003622 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003626 6B00 FF8E                  		bmi.w	LevelSelect
0000362A 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000362E 6600                       		bne.s	LevSel_Level	; if not, branch
00003630 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003636 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000363A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003640 7000                       		moveq	#0,d0
00003642 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003646 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000364A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000364E 4E75                       		rts	
00003650                            ; ===========================================================================
00003650                            
00003650                            LevSel_Level:				; XREF: LevSel_Level_SS
00003650 0240 3FFF                  		andi.w	#$3FFF,d0
00003654 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003658                            
00003658                            PlayLevel:				; XREF: ROM:00003246j ...
00003658 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000365E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003664 7000                       		moveq	#0,d0
00003666 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000366A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000366E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003672 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003676 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000367A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000367E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003682 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003686 103C 00E0                  		move.b	#$E0,d0
0000368A 6100 DF30                  		bsr.w	PlaySound_Special ; fade out music
0000368E 4E75                       		rts	
00003690                            ; ===========================================================================
00003690                            ; ---------------------------------------------------------------------------
00003690                            ; Level	select - level pointers
00003690                            ; ---------------------------------------------------------------------------
00003690                            LSelectPointers:
00003690                            		incbin	misc\ls_point.bin
000036BA                            		even
000036BA                            ; ---------------------------------------------------------------------------
000036BA                            ; Level	select codes
000036BA                            ; ---------------------------------------------------------------------------
000036BA                            LevelSelectCode_J:
000036BA                            		incbin	misc\ls_jcode.bin
000036C0                            		even
000036C0                            
000036C0                            LevelSelectCode_US:
000036C0                            		incbin	misc\ls_ucode.bin
000036C6                            		even
000036C6                            ; ===========================================================================
000036C6                            
000036C6                            ; ---------------------------------------------------------------------------
000036C6                            ; Demo mode
000036C6                            ; ---------------------------------------------------------------------------
000036C6                            
000036C6                            Demo:					; XREF: TitleScreen
000036C6 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000036CC                            
000036CC                            loc_33B6:				; XREF: loc_33E4
000036CC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036D2 6100 F57C                  		bsr.w	DelayProgram
000036D6 6100 0000                  		bsr.w	DeformBgLayer
000036DA 6100 E480                  		bsr.w	PalCycle_Load
000036DE 6100 E12C                  		bsr.w	RunPLC_RAM
000036E2 3038 D008                  		move.w	($FFFFD008).w,d0
000036E6 5440                       		addq.w	#2,d0
000036E8 31C0 D008                  		move.w	d0,($FFFFD008).w
000036EC 0C40 1C00                  		cmpi.w	#$1C00,d0
000036F0 6500                       		bcs.s	loc_33E4
000036F2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000036F8 4E75                       		rts	
000036FA                            ; ===========================================================================
000036FA                            
000036FA                            loc_33E4:				; XREF: Demo
000036FA 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003700 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
00003704 4A78 F614                  		tst.w	($FFFFF614).w
00003708 6600 FFC2                  		bne.w	loc_33B6
0000370C 103C 00E0                  		move.b	#$E0,d0
00003710 6100 DEAA                  		bsr.w	PlaySound_Special ; fade out music
00003714 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003718 0240 0007                  		andi.w	#7,d0
0000371C D040                       		add.w	d0,d0
0000371E 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003722 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003726 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000372A 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003730 6500                       		bcs.s	loc_3422	; if yes, branch
00003732 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003738                            
00003738                            loc_3422:
00003738 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000373E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003744 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003748 6600                       		bne.s	Demo_Level	; if not, branch
0000374A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003750 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003754 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003758                            
00003758                            Demo_Level:
00003758 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000375E 7000                       		moveq	#0,d0
00003760 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003764 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003768 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000376C 4E75                       		rts	
0000376E                            ; ===========================================================================
0000376E                            ; ---------------------------------------------------------------------------
0000376E                            ; Levels used in demos
0000376E                            ; ---------------------------------------------------------------------------
0000376E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003776                            		even
00003776                            
00003776                            ; ---------------------------------------------------------------------------
00003776                            ; Subroutine to	change what you're selecting in the level select
00003776                            ; ---------------------------------------------------------------------------
00003776                            
00003776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003776                            
00003776                            
00003776                            LevSelControls:				; XREF: LevelSelect
00003776 1238 F605                  		move.b	($FFFFF605).w,d1
0000377A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000377E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003780 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003784 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003786                            
00003786                            LevSel_UpDown:
00003786 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000378C 1238 F604                  		move.b	($FFFFF604).w,d1
00003790 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003794 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003796 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000379A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000379E 6700                       		beq.s	LevSel_Down	; if not, branch
000037A0 5346                       		subq.w	#1,d6		; move up 1 selection
000037A2 6400                       		bcc.s	LevSel_Down
000037A4 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000037A6                            
000037A6                            LevSel_Down:
000037A6 0801 0001                  		btst	#1,d1		; is down pressed?
000037AA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037AC 5246                       		addq.w	#1,d6		; move down 1 selection
000037AE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037B2 6500                       		bcs.s	LevSel_Refresh
000037B4 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037B6 6000                       		bra.s	LevSel_Refresh
000037B8                            		
000037B8                            LevSel_GoLR:
000037B8 0801 0002                  		btst	#2,d1		; is left pressed?
000037BC 6700                       		beq.s	LevSel_GoRight	; if not, branch
000037BE 0446 0000                  		sub.w	#lsrow2size,d6
000037C2 64E2                       		bcc.s	LevSel_Down
000037C4 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000037C8 6000                       		bra.s	LevSel_Refresh
000037CA                            LevSel_GoRight:
000037CA 0646 0000                  		add.w	#lsrow1size,d6
000037CE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037D2 6500                       		bcs.s	LevSel_Refresh
000037D4 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000037D8                            ; ===========================================================================
000037D8                            LevSel_Refresh:
000037D8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037DC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037E0 363C C65F                  		move.w	#$C680-$21,d3
000037E4 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000037E8 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037EC 4E75                       		rts	
000037EE                            		
000037EE                            LevSel_SndTest:				; XREF: LevSelControls
000037EE 1238 F605                  		move.b	($FFFFF605).w,d1
000037F2 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000037F6 6700                       		beq.s	LevSel_NoMove	; if not, branch
000037F8 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
000037FE 66B8                       		bne.s	LevSel_GoLR	; if not, branch
00003800                            		
00003800 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003804 0801 0002                  		btst	#2,d1		; is left pressed?
00003808 6700                       		beq.s	LevSel_Right	; if not, branch
0000380A 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000380C 6400                       		bcc.s	LevSel_Right
0000380E 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003810                            
00003810                            LevSel_Right:
00003810 0801 0003                  		btst	#3,d1		; is right pressed?
00003814 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003816 5240                       		addq.w	#1,d0		; add 1	to sound test
00003818 0C40 0050                  		cmpi.w	#$50,d0
0000381C 6500                       		bcs.s	LevSel_Refresh2
0000381E 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003820                            
00003820                            LevSel_Refresh2:
00003820 363C C65F                  		move.w	#$C680-$21,d3
00003824 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003828 6000 0000                  		bra.w	LevSelSndTest	; refresh text
0000382C                            
0000382C                            LevSel_NoMove:
0000382C 4E75                       		rts	
0000382E                            ; End of function LevSelControls
0000382E                            
0000382E                            ; ---------------------------------------------------------------------------
0000382E                            ; Subroutine to load level select text
0000382E                            ; ---------------------------------------------------------------------------
0000382E                            
0000382E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000382E =60860003                  lsscrpos = $60860003
0000382E =00240000                  lsoff = $240000
0000382E =64C00003                  lsstpos = lsscrpos+$43A0000
0000382E                            
0000382E                            LevSelTextLoad_loop:
0000382E 2D44 0004                  		move.l	d4,4(a6)
00003832 6100 0000                  		bsr.w	LevSel_ChgLine
00003836 0684 0080 0000             		addi.l	#$800000,d4
0000383C 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003840 4E75                       		rts
00003842                            LevSelTextLoad:				; XREF: TitleScreen
00003842 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003848 4DF9 00C0 0000             		lea	($C00000).l,a6
0000384E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003852 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003858                            		
00003858 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
0000385C 61D0                       		bsr.s	LevSelTextLoad_loop
0000385E                            		
0000385E                            		
0000385E 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003864 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003868 61C4                       		bsr.s	LevSelTextLoad_loop
0000386A 363C C65F                  		move.w	#$C680-$21,d3
0000386E                            		
0000386E                            LevSelHighlightCode:
0000386E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003874 7000                       		moveq	#0,d0
00003876 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000387A 3200                       		move.w	d0,d1
0000387C 283C 6086 0003             		move.l	#lsscrpos,d4
00003882                            		
00003882 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003886 6D00                       		blt.s	@notsecond
00003888                            		
00003888 0440 0000                  		sub.w	#lsrow1size,d0
0000388C 0684 0024 0000             		addi.l	#lsoff,d4
00003892                            	@notsecond:
00003892 EF48                       		lsl.w	#7,d0
00003894 4840                       		swap	d0
00003896 D880                       		add.l	d0,d4
00003898 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000389E E749                       		lsl.w	#3,d1
000038A0 D241                       		add.w	d1,d1
000038A2 D2C1                       		adda.w	d1,a1
000038A4 2D44 0004                  		move.l	d4,4(a6)
000038A8 6100 0000                  		bsr.w	LevSel_ChgLine
000038AC 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038B2 6700                       		beq.s	LevSelSndTest
000038B4 4E75                       		rts
000038B6                            
000038B6                            LevSelSndTest:
000038B6 0643 0030                  		add.w	#$30,d3
000038BA 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000038C4 3038 FF84                  		move.w	($FFFFFF84).w,d0
000038C8 0640 0080                  		addi.w	#$80,d0
000038CC 1400                       		move.b	d0,d2
000038CE E808                       		lsr.b	#4,d0
000038D0 6100 0000                  		bsr.w	LevSel_ChgSnd
000038D4 1002                       		move.b	d2,d0
000038D6 6100 0000                  		bsr.w	LevSel_ChgSnd
000038DA 4E75                       		rts	
000038DC                            ; End of function LevSelTextLoad
000038DC                            
000038DC                            
000038DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038DC                            
000038DC                            
000038DC                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000038DC 0240 000F                  		andi.w	#$F,d0
000038E0 0C00 000A                  		cmpi.b	#$A,d0
000038E4 6500                       		bcs.s	loc_3580
000038E6 5E00                       		addi.b	#7,d0
000038E8                            
000038E8                            loc_3580:
000038E8 D043                       		add.w	d3,d0
000038EA 3C80                       		move.w	d0,(a6)
000038EC 4E75                       		rts	
000038EE                            ; End of function LevSel_ChgSnd
000038EE                            
000038EE                            
000038EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038EE                            
000038EE                            
000038EE                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000038EE 740F                       		moveq	#$10-1,d2		; number of characters per line
000038F0                            
000038F0                            @loop:
000038F0 7000                       		moveq	#0,d0
000038F2 1019                       		move.b	(a1)+,d0
000038F4 0C00 0020                  		cmpi.b	#$20,d0
000038F8 6E00                       		bgt.s	@draw
000038FA 3CBC 0000                  		move.w	#0,(a6)
000038FE 51CA FFF0                  		dbf	d2,@loop
00003902 4E75                       		rts	
00003904                            ; ===========================================================================
00003904                            
00003904                            @draw:				; XREF: LevSel_ChgLine
00003904 D043                       		add.w	d3,d0
00003906 3C80                       		move.w	d0,(a6)
00003908 51CA FFE6                  		dbf	d2,@loop
0000390C 4E75                       		rts	
0000390E                            ; End of function LevSel_ChgLine
0000390E                            		
0000390E                            CStringSlop_draw:
0000390E D043                       		add.w	d3,d0
00003910 3C80                       		move.w	d0,(a6)
00003912                            CStringSlop:				; XREF: LevSelTextLoad
00003912 7000                       		moveq	#0,d0
00003914 1019                       		move.b	(a1)+,d0
00003916 0C00 0020                  		cmpi.b	#$20,d0
0000391A 6EF2                       		bgt.s	CStringSlop_draw
0000391C 4A00                       		tst.b	d0
0000391E 6700                       		beq.s	@end
00003920 3CBC 0000                  		move.w	#0,(a6)
00003924 60EC                       		bra.s	CStringSlop
00003926                            	@end:
00003926 4E75                       		rts
00003928                            ; End of function LevSel_ChgLine
00003928                            
00003928                            ; ===========================================================================
00003928                            ; ---------------------------------------------------------------------------
00003928                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003928                            ; ---------------------------------------------------------------------------
00003928                            LevelMenuText:	
00003928 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003968 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003998 2020 2020 2020 2020 2020+          dc.b    "               2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
000039C8 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8                            LMTSecondRow:
000039E8 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000039F8 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
00003A08 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A18 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003A28 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A38 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A48 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A58 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A68 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A78 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A88 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A98                            LMTSelectableEnd:
00003A98 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003AA8                            LMTEnd:
00003AA8                            
00003AA8                            
00003AA8 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003AA8 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003AA8 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003AA8                            ; just to not break these
00003AA8 =00000014                  lssndtest = lsrow2size+8
00003AA8 =00000015                  lswifi = lsrow2size+9
00003AA8                            
00003AA8 =6C820003                  nppos = $6C820003
00003AA8                            Now_Playing:
00003AA8 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003AB8                            		even
00003AB8                            NP_Track:
00003AB8 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003AC0                            		even
00003AC0                            NP_SFX:
00003AC0 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003AC8                            		even
00003AC8                            
00003AC8                            ShowNow_Playing:
00003AC8 1C00                       		move.b	d0,d6
00003ACA 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003ACE 43FA FFD8                  		lea	Now_Playing(pc),a1
00003AD2 4DF9 00C0 0000             		lea		($C00000).l,a6
00003AD8 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003AE0 6100 FE30                  		bsr.w	CStringSlop
00003AE4                            		
00003AE4 43FA FFD2                  		lea	NP_Track(pc),a1
00003AE8 0C06 00A0                  		cmpi.b	#$A0,d6
00003AEC 6D00                       		blt.s	@track
00003AEE                            		
00003AEE 43FA FFD0                  		lea	NP_SFX(pc),a1
00003AF2                            	@track:
00003AF2 6100 FE1E                  		bsr.w	CStringSlop
00003AF6                            		
00003AF6 0643 0030                  		add.w	#$30,d3
00003AFA 1006                       		move.b	d6,d0
00003AFC 1400                       		move.b	d0,d2
00003AFE E808                       		lsr.b	#4,d0
00003B00 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003B04 1002                       		move.b	d2,d0
00003B06 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003B0A 4E75                       		rts	
00003B0C                            ; ---------------------------------------------------------------------------
00003B0C                            ; Music	playlist
00003B0C                            ; ---------------------------------------------------------------------------
00003B0C                            MusicList1:	incbin	misc\muslist1.bin
00003B14                            		even
00003B14                            MusicList2:	incbin	misc\muslist2.bin
00003B1A                            		even
00003B1A                            MusicList3:	incbin	misc\muslist3.bin
00003B20                            		even
00003B20                            MusicList4:	incbin	misc\muslist4.bin
00003B26                            		even
00003B26                            ; ===========================================================================
00003B26                            
00003B26                            ; ---------------------------------------------------------------------------
00003B26                            ; Level
00003B26                            ; ---------------------------------------------------------------------------
00003B26                            
00003B26                            Level:					; XREF: GameModeArray
00003B26 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003B2C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B30 6B00                       		bmi.s	loc_37B6
00003B32 103C 00E0                  		move.b	#$E0,d0
00003B36 6100 DA84                  		bsr.w	PlaySound_Special ; fade out music
00003B3A                            
00003B3A                            loc_37B6:
00003B3A 6100 DCC2                  		bsr.w	ClearPLC
00003B3E 6100 E532                  		bsr.w	Pal_FadeFrom
00003B42 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B46 6B00                       		bmi.s	Level_ClrRam
00003B48 46FC 2700                  		move	#$2700,sr
00003B4C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003B56 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003B5C 6100 DB02                  		bsr.w	NemDec
00003B60 46FC 2300                  		move	#$2300,sr
00003B64 7000                       		moveq	#0,d0
00003B66 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B6A E948                       		lsl.w	#4,d0
00003B6C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B72 45F2 0000                  		lea	(a2,d0.w),a2
00003B76 7000                       		moveq	#0,d0
00003B78 1012                       		move.b	(a2),d0
00003B7A 6700                       		beq.s	loc_37FC
00003B7C 6100 DC22                  		bsr.w	LoadPLC		; load level patterns
00003B80                            
00003B80                            loc_37FC:
00003B80 7001                       		moveq	#1,d0
00003B82 6100 DC1C                  		bsr.w	LoadPLC		; load standard	patterns
00003B86                            
00003B86                            Level_ClrRam:
00003B86 43F8 D000                  		lea	($FFFFD000).w,a1
00003B8A 7000                       		moveq	#0,d0
00003B8C 323C 07FF                  		move.w	#$7FF,d1
00003B90                            
00003B90                            Level_ClrObjRam:
00003B90 22C0                       		move.l	d0,(a1)+
00003B92 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B96                            
00003B96 43F8 F628                  		lea	($FFFFF628).w,a1
00003B9A 7000                       		moveq	#0,d0
00003B9C 323C 0015                  		move.w	#$15,d1
00003BA0                            
00003BA0                            Level_ClrVars:
00003BA0 22C0                       		move.l	d0,(a1)+
00003BA2 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003BA6                            
00003BA6 43F8 F700                  		lea	($FFFFF700).w,a1
00003BAA 7000                       		moveq	#0,d0
00003BAC 323C 003F                  		move.w	#$3F,d1
00003BB0                            
00003BB0                            Level_ClrVars2:
00003BB0 22C0                       		move.l	d0,(a1)+
00003BB2 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003BB6                            
00003BB6 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003BBA 7000                       		moveq	#0,d0
00003BBC 323C 0047                  		move.w	#$47,d1
00003BC0                            
00003BC0                            Level_ClrVars3:
00003BC0 22C0                       		move.l	d0,(a1)+
00003BC2 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003BC6                            
00003BC6 46FC 2700                  		move	#$2700,sr
00003BCA 6100 D918                  		bsr.w	ClearScreen
00003BCE 4DF9 00C0 0004             		lea	($C00004).l,a6
00003BD4 3CBC 8B03                  		move.w	#$8B03,(a6)
00003BD8 3CBC 8230                  		move.w	#$8230,(a6)
00003BDC 3CBC 8407                  		move.w	#$8407,(a6)
00003BE0 3CBC 857C                  		move.w	#$857C,(a6)
00003BE4 3CBC 9001                  		move.w	#$9001,(a6)
00003BE8 3CBC 8004                  		move.w	#$8004,(a6)
00003BEC 3CBC 8720                  		move.w	#$8720,(a6)
00003BF0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003BF6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003BFA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C00 6600                       		bne.s	Level_LoadPal	; if not, branch
00003C02 3CBC 8014                  		move.w	#$8014,(a6)
00003C06 7000                       		moveq	#0,d0
00003C08 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C0C D040                       		add.w	d0,d0
00003C0E 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003C14 3031 0000                  		move.w	(a1,d0.w),d0
00003C18 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003C1C 31C0 F648                  		move.w	d0,($FFFFF648).w
00003C20 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003C24 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003C28 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003C2C 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003C32                            
00003C32                            Level_LoadPal:
00003C32 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003C38 46FC 2300                  		move	#$2300,sr
00003C3C 7003                       		moveq	#3,d0
00003C3E 6100 E6F8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003C42 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C48 6600                       		bne.s	Level_GetBgm	; if not, branch
00003C4A 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003C4C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003C52 6600                       		bne.s	Level_WaterPal	; if not, branch
00003C54 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003C56                            
00003C56                            Level_WaterPal:
00003C56 6100 E6F8                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003C5A 4A38 FE30                  		tst.b	($FFFFFE30).w
00003C5E 6700                       		beq.s	Level_GetBgm
00003C60 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C66                            
00003C66                            ; NineKode begins here - How to play different songs on different acts
00003C66                             
00003C66                            Level_GetBgm:
00003C66 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C6A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C6E 7000                       		moveq	#0,d0
00003C70 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C74                             
00003C74 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C7A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C7C 43F9 0000 3B0C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C82 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C84                             
00003C84                            Level_GetBgm2:
00003C84 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C8A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C8C 43F9 0000 3B14             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C92 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C94                             
00003C94                            Level_GetBgm3:
00003C94 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C9A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C9C 43F9 0000 3B1A             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003CA2 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CA4                             
00003CA4                            Level_GetBgm4:
00003CA4 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003CAA 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003CAC 43F9 0000 3B20             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003CB2                             
00003CB2                            Level_PlayBgm:
00003CB2 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003CB6 6100 D8FE                  		bsr.w	PlaySound	; play music
00003CBA 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003CC0                             
00003CC0                            ; NineKode ends here
00003CC0                            
00003CC0                            Level_TtlCard:
00003CC0 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003CC6 6100 EF88                  		bsr.w	DelayProgram
00003CCA 4EB9 0000 0000             		jsr	ObjectsLoad
00003CD0 4EB9 0000 0000             		jsr	BuildSprites
00003CD6 6100 DB34                  		bsr.w	RunPLC_RAM
00003CDA 3038 D108                  		move.w	($FFFFD108).w,d0
00003CDE B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003CE2 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003CE4 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003CE8 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003CEA 4EB9 0000 0000             		jsr	Hud_Base
00003CF0                            
00003CF0                            loc_3946:
00003CF0 7003                       		moveq	#3,d0
00003CF2 6100 E628                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003CF6 6100 0000                  		bsr.w	LevelSizeLoad
00003CFA 6100 0000                  		bsr.w	DeformBgLayer
00003CFE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003D04 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003D08 6100 0000                  		bsr.w	LoadTilesFromStart
00003D0C 4EB9 0000 0000             		jsr	FloorLog_Unk
00003D12 6100 0000                  		bsr.w	ColIndexLoad
00003D16 6100 0000                  		bsr.w	LZWaterEffects
00003D1A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003D20 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D24 6B00                       		bmi.s	Level_ChkDebug
00003D26 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003D2C                            
00003D2C                            Level_ChkDebug:
00003D2C 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003D30 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D32 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003D38 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D3A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003D40                            
00003D40                            Level_ChkWater:
00003D40 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003D46 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003D4C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D52 6600                       		bne.s	Level_LoadObj	; if not, branch
00003D54 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003D5A 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D60 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D66 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D6C                            
00003D6C                            Level_LoadObj:
00003D6C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D72 4EB9 0000 0000             		jsr	ObjectsLoad
00003D78 4EB9 0000 0000             		jsr	BuildSprites
00003D7E 7000                       		moveq	#0,d0
00003D80 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D84 6600                       		bne.s	loc_39E8	; if yes, branch
00003D86 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D8A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D8E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D92                            
00003D92                            loc_39E8:
00003D92 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D96 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D9A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D9E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003DA2                            		; move.b	d0,($FFFFFE2F).w
00003DA2 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003DA8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003DAC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003DB0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003DB4 6100 0000                  		bsr.w	OscillateNumInit
00003DB8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003DBE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003DC4 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003DCA 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003DD0 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003DD6 7000                       		moveq	#0,d0
00003DD8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DDC E548                       		lsl.w	#2,d0
00003DDE 2271 0000                  		movea.l	(a1,d0.w),a1
00003DE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003DE6 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003DE8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003DEE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003DF2 5340                       		subq.w	#1,d0
00003DF4 E548                       		lsl.w	#2,d0
00003DF6 2271 0000                  		movea.l	(a1,d0.w),a1
00003DFA                            
00003DFA                            Level_Demo:
00003DFA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003E00 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003E04 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003E0A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E0E 6A00                       		bpl.s	Level_ChkWaterPal
00003E10 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003E16 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003E1C 6600                       		bne.s	Level_ChkWaterPal
00003E1E 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003E24                            
00003E24                            Level_ChkWaterPal:
00003E24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003E2A 6600                       		bne.s	Level_Delay	; if not, branch
00003E2C 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003E2E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003E34 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003E36 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003E38                            
00003E38                            Level_WaterPal2:
00003E38 6100 E532                  		bsr.w	PalLoad4_Water
00003E3C                            
00003E3C                            Level_Delay:
00003E3C 323C 0003                  		move.w	#3,d1
00003E40                            
00003E40                            Level_DelayLoop:
00003E40 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E46 6100 EE08                  		bsr.w	DelayProgram
00003E4A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003E4E                            
00003E4E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003E54 6100 E17C                  		bsr.w	Pal_FadeTo2
00003E58 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E5C 6B00                       		bmi.s	Level_ClrCardArt
00003E5E 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E62 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E66 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E6A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E6E 6000                       		bra.s	Level_StartGame
00003E70                            ; ===========================================================================
00003E70                            
00003E70                            Level_ClrCardArt:
00003E70 7002                       		moveq	#2,d0
00003E72 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E78 7000                       		moveq	#0,d0
00003E7A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E7E 0640 0015                  		addi.w	#$15,d0
00003E82 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E88                            
00003E88                            Level_StartGame:
00003E88 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E8E                            
00003E8E                            ; ---------------------------------------------------------------------------
00003E8E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E8E                            ; ---------------------------------------------------------------------------
00003E8E                            
00003E8E                            Level_MainLoop:
00003E8E 6100 D738                  		bsr.w	PauseGame
00003E92 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E98 6100 EDB6                  		bsr.w	DelayProgram
00003E9C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003EA0 6100 0000                  		bsr.w	MoveSonicInDemo
00003EA4 6100 0000                  		bsr.w	LZWaterEffects
00003EA8 4EB9 0000 0000             		jsr	ObjectsLoad
00003EAE 4A78 FE08                  		tst.w	($FFFFFE08).w
00003EB2 6600                       		bne.s	loc_3B10
00003EB4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003EBA 6400                       		bcc.s	loc_3B14
00003EBC                            
00003EBC                            loc_3B10:
00003EBC 6100 0000                  		bsr.w	DeformBgLayer
00003EC0                            
00003EC0                            loc_3B14:
00003EC0 4EB9 0000 0000             		jsr	BuildSprites
00003EC6 4EB9 0000 0000             		jsr	ObjPosLoad
00003ECC 6100 DC8E                  		bsr.w	PalCycle_Load
00003ED0 6100 D93A                  		bsr.w	RunPLC_RAM
00003ED4 6100 0000                  		bsr.w	OscillateNumDo
00003ED8 6100 0000                  		bsr.w	ChangeRingFrame
00003EDC 6100 0000                  		bsr.w	SignpostArtLoad
00003EE0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EE6 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003EE8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003EEC 6600 FC38                  		bne.w	Level		; if yes, branch
00003EF0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003EF6 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003EFA 4E75                       		rts	
00003EFC                            ; ===========================================================================
00003EFC                            
00003EFC                            Level_ChkDemo:				; XREF: Level_MainLoop
00003EFC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003F00 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003F02 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003F06 6700                       		beq.s	Level_EndDemo	; if not, branch
00003F08 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F0E 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003F12 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F18 4E75                       		rts	
00003F1A                            ; ===========================================================================
00003F1A                            
00003F1A                            Level_EndDemo:				; XREF: Level_ChkDemo
00003F1A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003F20 6600                       		bne.s	loc_3B88	; if not, branch
00003F22 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F28 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F2C 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003F2E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003F34                            
00003F34                            loc_3B88:
00003F34 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003F3A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003F40 4278 F794                  		clr.w	($FFFFF794).w
00003F44                            
00003F44                            loc_3B98:
00003F44 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F4A 6100 ED04                  		bsr.w	DelayProgram
00003F4E 6100 0000                  		bsr.w	MoveSonicInDemo
00003F52 4EB9 0000 0000             		jsr	ObjectsLoad
00003F58 4EB9 0000 0000             		jsr	BuildSprites
00003F5E 4EB9 0000 0000             		jsr	ObjPosLoad
00003F64 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F68 6A00                       		bpl.s	loc_3BC8
00003F6A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F70 6100 E120                  		bsr.w	Pal_FadeOut
00003F74                            
00003F74                            loc_3BC8:
00003F74 4A78 F614                  		tst.w	($FFFFF614).w
00003F78 66CA                       		bne.s	loc_3B98
00003F7A 4E75                       		rts	
00003F7C                            ; ===========================================================================
00003F7C                            ; ---------------------------------------------------------------------------
00003F7C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F7C                            ; ---------------------------------------------------------------------------
00003F7C                            
00003F7C                            LZWaterEffects:				; XREF: Level
00003F7C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F82 6600                       		bne.s	locret_3C28	; if not, branch
00003F84 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F8A 6400                       		bcc.s	LZMoveWater
00003F8C 6100 0000                  		bsr.w	LZWindTunnels
00003F90 6100 0000                  		bsr.w	LZWaterSlides
00003F94 6100 0000                  		bsr.w	LZDynamicWater
00003F98                            
00003F98                            LZMoveWater:
00003F98 4238 F64E                  		clr.b	($FFFFF64E).w
00003F9C 7000                       		moveq	#0,d0
00003F9E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003FA2 E248                       		lsr.w	#1,d0
00003FA4 D078 F648                  		add.w	($FFFFF648).w,d0
00003FA8 31C0 F646                  		move.w	d0,($FFFFF646).w
00003FAC 3038 F646                  		move.w	($FFFFF646).w,d0
00003FB0 9078 F704                  		sub.w	($FFFFF704).w,d0
00003FB4 6400                       		bcc.s	loc_3C1A
00003FB6 4A40                       		tst.w	d0
00003FB8 6A00                       		bpl.s	loc_3C1A
00003FBA 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003FC0 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003FC6                            
00003FC6                            loc_3C1A:
00003FC6 0C40 00DF                  		cmpi.w	#$DF,d0
00003FCA 6500                       		bcs.s	loc_3C24
00003FCC 303C 00DF                  		move.w	#$DF,d0
00003FD0                            
00003FD0                            loc_3C24:
00003FD0 11C0 F625                  		move.b	d0,($FFFFF625).w
00003FD4                            
00003FD4                            locret_3C28:
00003FD4 4E75                       		rts	
00003FD6                            ; ===========================================================================
00003FD6                            ; ---------------------------------------------------------------------------
00003FD6                            ; Labyrinth default water heights
00003FD6                            ; ---------------------------------------------------------------------------
00003FD6                            WaterHeight:	incbin	misc\lz_heigh.bin
00003FDE                            		even
00003FDE                            ; ===========================================================================
00003FDE                            
00003FDE                            ; ---------------------------------------------------------------------------
00003FDE                            ; Labyrinth dynamic water routines
00003FDE                            ; ---------------------------------------------------------------------------
00003FDE                            
00003FDE                            LZDynamicWater:				; XREF: LZWaterEffects
00003FDE 7000                       		moveq	#0,d0
00003FE0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003FE4 D040                       		add.w	d0,d0
00003FE6 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003FEA 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003FEE 7200                       		moveq	#0,d1
00003FF0 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003FF4 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003FF8 9078 F648                  		sub.w	($FFFFF648).w,d0
00003FFC 6700                       		beq.s	locret_3C5A
00003FFE 6400                       		bcc.s	loc_3C56
00004000 4441                       		neg.w	d1
00004002                            
00004002                            loc_3C56:
00004002 D378 F648                  		add.w	d1,($FFFFF648).w
00004006                            
00004006                            locret_3C5A:
00004006 4E75                       		rts	
00004008                            ; ===========================================================================
00004008 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000400A 0000                       		dc.w DynWater_LZ2-DynWater_Index
0000400C 0000                       		dc.w DynWater_LZ3-DynWater_Index
0000400E 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004010                            ; ===========================================================================
00004010                            
00004010                            DynWater_LZ1:				; XREF: DynWater_Index
00004010 3038 F700                  		move.w	($FFFFF700).w,d0
00004014 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004018 6600                       		bne.s	loc_3CD0
0000401A 323C 00B8                  		move.w	#$B8,d1
0000401E 0C40 0600                  		cmpi.w	#$600,d0
00004022 6500                       		bcs.s	loc_3CB4
00004024 323C 0108                  		move.w	#$108,d1
00004028 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
0000402E 6500                       		bcs.s	loc_3CBA
00004030 0C40 0C00                  		cmpi.w	#$C00,d0
00004034 6500                       		bcs.s	loc_3CB4
00004036 323C 0318                  		move.w	#$318,d1
0000403A 0C40 1080                  		cmpi.w	#$1080,d0
0000403E 6500                       		bcs.s	loc_3CB4
00004040 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004046 323C 05C8                  		move.w	#$5C8,d1
0000404A 0C40 1380                  		cmpi.w	#$1380,d0
0000404E 6500                       		bcs.s	loc_3CB4
00004050 323C 03A8                  		move.w	#$3A8,d1
00004054 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004058 6600                       		bne.s	loc_3CB4
0000405A 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004060                            
00004060                            loc_3CB4:
00004060 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004064 4E75                       		rts	
00004066                            ; ===========================================================================
00004066                            
00004066                            loc_3CBA:				; XREF: DynWater_LZ1
00004066 0C40 0C80                  		cmpi.w	#$C80,d0
0000406A 65F4                       		bcs.s	loc_3CB4
0000406C 323C 00E8                  		move.w	#$E8,d1
00004070 0C40 1500                  		cmpi.w	#$1500,d0
00004074 65EA                       		bcs.s	loc_3CB4
00004076 323C 0108                  		move.w	#$108,d1
0000407A 60E4                       		bra.s	loc_3CB4
0000407C                            ; ===========================================================================
0000407C                            
0000407C                            loc_3CD0:				; XREF: DynWater_LZ1
0000407C 5302                       		subq.b	#1,d2
0000407E 6600                       		bne.s	locret_3CF4
00004080 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004086 6400                       		bcc.s	locret_3CF4
00004088 323C 03A8                  		move.w	#$3A8,d1
0000408C 0C40 1300                  		cmpi.w	#$1300,d0
00004090 6500                       		bcs.s	loc_3CF0
00004092 323C 0108                  		move.w	#$108,d1
00004096 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000409C                            
0000409C                            loc_3CF0:
0000409C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A0                            
000040A0                            locret_3CF4:
000040A0 4E75                       		rts	
000040A2                            ; ===========================================================================
000040A2                            
000040A2                            DynWater_LZ2:				; XREF: DynWater_Index
000040A2 3038 F700                  		move.w	($FFFFF700).w,d0
000040A6 323C 0328                  		move.w	#$328,d1
000040AA 0C40 0500                  		cmpi.w	#$500,d0
000040AE 6500                       		bcs.s	loc_3D12
000040B0 323C 03C8                  		move.w	#$3C8,d1
000040B4 0C40 0B00                  		cmpi.w	#$B00,d0
000040B8 6500                       		bcs.s	loc_3D12
000040BA 323C 0428                  		move.w	#$428,d1
000040BE                            
000040BE                            loc_3D12:
000040BE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040C2 4E75                       		rts	
000040C4                            ; ===========================================================================
000040C4                            
000040C4                            DynWater_LZ3:				; XREF: DynWater_Index
000040C4 3038 F700                  		move.w	($FFFFF700).w,d0
000040C8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000040CC 6600                       		bne.s	loc_3D5E
000040CE 323C 0900                  		move.w	#$900,d1
000040D2 0C40 0600                  		cmpi.w	#$600,d0
000040D6 6500                       		bcs.s	loc_3D54
000040D8 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000040DE 6500                       		bcs.s	loc_3D54
000040E0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040E6 6400                       		bcc.s	loc_3D54
000040E8 323C 04C8                  		move.w	#$4C8,d1
000040EC 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000040F2 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000040F8 303C 00B7                  		move.w	#$B7,d0
000040FC 6100 D4BE                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00004100                            
00004100                            loc_3D54:
00004100 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004104 31C1 F648                  		move.w	d1,($FFFFF648).w
00004108 4E75                       		rts	
0000410A                            ; ===========================================================================
0000410A                            
0000410A                            loc_3D5E:				; XREF: DynWater_LZ3
0000410A 5302                       		subq.b	#1,d2
0000410C 6600                       		bne.s	loc_3DA8
0000410E 323C 04C8                  		move.w	#$4C8,d1
00004112 0C40 0770                  		cmpi.w	#$770,d0
00004116 6500                       		bcs.s	loc_3DA2
00004118 323C 0308                  		move.w	#$308,d1
0000411C 0C40 1400                  		cmpi.w	#$1400,d0
00004120 6500                       		bcs.s	loc_3DA2
00004122 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004128 6700                       		beq.s	loc_3D8E
0000412A 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004130 6400                       		bcc.s	loc_3D8E
00004132 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004138 6400                       		bcc.s	loc_3DA2
0000413A                            
0000413A                            loc_3D8E:
0000413A 323C 0508                  		move.w	#$508,d1
0000413E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004142 0C40 1770                  		cmpi.w	#$1770,d0
00004146 6500                       		bcs.s	loc_3DA2
00004148 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000414E                            
0000414E                            loc_3DA2:
0000414E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004152 4E75                       		rts	
00004154                            ; ===========================================================================
00004154                            
00004154                            loc_3DA8:
00004154 5302                       		subq.b	#1,d2
00004156 6600                       		bne.s	loc_3DD2
00004158 323C 0508                  		move.w	#$508,d1
0000415C 0C40 1860                  		cmpi.w	#$1860,d0
00004160 6500                       		bcs.s	loc_3DCC
00004162 323C 0188                  		move.w	#$188,d1
00004166 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000416A 6400                       		bcc.s	loc_3DC6
0000416C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004170 6600                       		bne.s	loc_3DCC
00004172                            
00004172                            loc_3DC6:
00004172 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004178                            
00004178                            loc_3DCC:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts	
0000417E                            ; ===========================================================================
0000417E                            
0000417E                            loc_3DD2:
0000417E 5302                       		subq.b	#1,d2
00004180 6600                       		bne.s	loc_3E0E
00004182 323C 0188                  		move.w	#$188,d1
00004186 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000418A 6500                       		bcs.s	loc_3E04
0000418C 323C 0900                  		move.w	#$900,d1
00004190 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004194 6500                       		bcs.s	loc_3E04
00004196 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000419C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000041A2 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000041A8 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000041AE 4E75                       		rts	
000041B0                            ; ===========================================================================
000041B0                            
000041B0                            loc_3E04:
000041B0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041B4 31C1 F648                  		move.w	d1,($FFFFF648).w
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA                            
000041BA                            loc_3E0E:
000041BA 0C40 1E00                  		cmpi.w	#$1E00,d0
000041BE 6500                       		bcs.s	locret_3E1A
000041C0 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000041C6                            
000041C6                            locret_3E1A:
000041C6 4E75                       		rts	
000041C8                            ; ===========================================================================
000041C8                            
000041C8                            DynWater_SBZ3:				; XREF: DynWater_Index
000041C8 323C 0228                  		move.w	#$228,d1
000041CC 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000041D2 6500                       		bcs.s	loc_3E2C
000041D4 323C 04C8                  		move.w	#$4C8,d1
000041D8                            
000041D8                            loc_3E2C:
000041D8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041DC 4E75                       		rts
000041DE                            
000041DE                            ; ---------------------------------------------------------------------------
000041DE                            ; Labyrinth Zone "wind tunnels"	subroutine
000041DE                            ; ---------------------------------------------------------------------------
000041DE                            
000041DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041DE                            
000041DE                            
000041DE                            LZWindTunnels:				; XREF: LZWaterEffects
000041DE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000041E2 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000041E6 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000041EC 7000                       		moveq	#0,d0
000041EE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000041F2 E748                       		lsl.w	#3,d0
000041F4 D4C0                       		adda.w	d0,a2
000041F6 7200                       		moveq	#0,d1
000041F8 4A38 FE11                  		tst.b	($FFFFFE11).w
000041FC 6600                       		bne.s	loc_3E56
000041FE 7201                       		moveq	#1,d1
00004200 514A                       		subq.w	#8,a2
00004202                            
00004202                            loc_3E56:
00004202 43F8 D000                  		lea	($FFFFD000).w,a1
00004206                            
00004206                            LZWind_Loop:
00004206 3029 0008                  		move.w	8(a1),d0
0000420A B052                       		cmp.w	(a2),d0
0000420C 6500 0000                  		bcs.w	loc_3EF4
00004210 B06A 0004                  		cmp.w	4(a2),d0
00004214 6400 0000                  		bcc.w	loc_3EF4
00004218 3429 000C                  		move.w	$C(a1),d2
0000421C B46A 0002                  		cmp.w	2(a2),d2
00004220 6500                       		bcs.s	loc_3EF4
00004222 B46A 0006                  		cmp.w	6(a2),d2
00004226 6400                       		bcc.s	loc_3EF4
00004228 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000422C 0200 003F                  		andi.b	#$3F,d0
00004230 6600                       		bne.s	loc_3E90
00004232 303C 00D0                  		move.w	#$D0,d0
00004236 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
0000423C                            
0000423C                            loc_3E90:
0000423C 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004240 6600 0000                  		bne.w	locret_3F0A
00004244 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000424A 6400                       		bcc.s	loc_3F06
0000424C 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004252 0440 0080                  		subi.w	#$80,d0
00004256 B052                       		cmp.w	(a2),d0
00004258 6400                       		bcc.s	LZWind_Move
0000425A 7002                       		moveq	#2,d0
0000425C 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004262 6600                       		bne.s	loc_3EBA
00004264 4440                       		neg.w	d0
00004266                            
00004266                            loc_3EBA:
00004266 D169 000C                  		add.w	d0,$C(a1)
0000426A                            
0000426A                            LZWind_Move:
0000426A 5869 0008                  		addq.w	#4,8(a1)
0000426E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004274 337C 0000 0012             		move.w	#0,$12(a1)
0000427A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004280 08E9 0001 0022             		bset	#1,$22(a1)
00004286 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000428C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000428E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004292                            
00004292                            LZWind_MoveDown:
00004292 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004298 6700                       		beq.s	locret_3EF2	; if not, branch
0000429A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000429E                            
0000429E                            locret_3EF2:
0000429E 4E75                       		rts	
000042A0                            ; ===========================================================================
000042A0                            
000042A0                            loc_3EF4:				; XREF: LZWindTunnels
000042A0 504A                       		addq.w	#8,a2
000042A2 51C9 FF62                  		dbf	d1,LZWind_Loop
000042A6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000042AA 6700                       		beq.s	locret_3F0A
000042AC 137C 0000 001C             		move.b	#0,$1C(a1)
000042B2                            
000042B2                            loc_3F06:
000042B2 4238 F7C7                  		clr.b	($FFFFF7C7).w
000042B6                            
000042B6                            locret_3F0A:
000042B6 4E75                       		rts	
000042B8                            ; End of function LZWindTunnels
000042B8                            
000042B8                            ; ===========================================================================
000042B8 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000042C0 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000042D2 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000042E0                            					; XREF: LZWindTunnels
000042E0                            		even
000042E0                            
000042E0                            ; ---------------------------------------------------------------------------
000042E0                            ; Labyrinth Zone water slide subroutine
000042E0                            ; ---------------------------------------------------------------------------
000042E0                            
000042E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042E0                            
000042E0                            
000042E0                            LZWaterSlides:				; XREF: LZWaterEffects
000042E0 43F8 D000                  		lea	($FFFFD000).w,a1
000042E4 0829 0001 0022             		btst	#1,$22(a1)
000042EA 6600                       		bne.s	loc_3F6A
000042EC 3029 000C                  		move.w	$C(a1),d0
000042F0 E248                       		lsr.w	#1,d0
000042F2 0240 0380                  		andi.w	#$380,d0
000042F6 1229 0008                  		move.b	8(a1),d1
000042FA 0241 007F                  		andi.w	#$7F,d1
000042FE D041                       		add.w	d1,d0
00004300 45F8 A400                  		lea	($FFFFA400).w,a2
00004304 1032 0000                  		move.b	(a2,d0.w),d0
00004308 45FA 0000                  		lea	byte_3FCF(pc),a2
0000430C 7206                       		moveq	#6,d1
0000430E                            
0000430E                            loc_3F62:
0000430E B022                       		cmp.b	-(a2),d0
00004310 57C9 FFFC                  		dbeq	d1,loc_3F62
00004314 6700                       		beq.s	LZSlide_Move
00004316                            
00004316                            loc_3F6A:
00004316 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000431A 6700                       		beq.s	locret_3F7A
0000431C 337C 0005 003E             		move.w	#5,$3E(a1)
00004322 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004326                            
00004326                            locret_3F7A:
00004326 4E75                       		rts	
00004328                            ; ===========================================================================
00004328                            
00004328                            LZSlide_Move:				; XREF: LZWaterSlides
00004328 0C41 0003                  		cmpi.w	#3,d1
0000432C 6400                       		bcc.s	loc_3F84
0000432E 4E71                       		nop	
00004330                            
00004330                            loc_3F84:
00004330 08A9 0000 0022             		bclr	#0,$22(a1)
00004336 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000433A 1340 0014                  		move.b	d0,$14(a1)
0000433E 6A00                       		bpl.s	loc_3F9A
00004340 08E9 0000 0022             		bset	#0,$22(a1)
00004346                            
00004346                            loc_3F9A:
00004346 4229 0015                  		clr.b	$15(a1)
0000434A 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004350 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004356 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000435A 0200 001F                  		andi.b	#$1F,d0
0000435E 6600                       		bne.s	locret_3FBE
00004360 303C 00D0                  		move.w	#$D0,d0
00004364 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000436A                            
0000436A                            locret_3FBE:
0000436A 4E75                       		rts	
0000436C                            ; End of function LZWaterSlides
0000436C                            
0000436C                            ; ===========================================================================
0000436C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000437B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000437C                            		even
0000437C                            
0000437C                            ; ---------------------------------------------------------------------------
0000437C                            ; Subroutine to	move Sonic in demo mode
0000437C                            ; ---------------------------------------------------------------------------
0000437C                            
0000437C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000437C                            
0000437C                            
0000437C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000437C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004380 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004382 4E75                       		rts	
00004384                            ; ===========================================================================
00004384                            
00004384                            ; This is an unused subroutine for recording a demo
00004384                            
00004384                            MoveDemo_Record:
00004384 43F9 0008 0000             		lea	($80000).l,a1
0000438A 3038 F790                  		move.w	($FFFFF790).w,d0
0000438E D2C0                       		adda.w	d0,a1
00004390 1038 F604                  		move.b	($FFFFF604).w,d0
00004394 B011                       		cmp.b	(a1),d0
00004396 6600                       		bne.s	loc_3FFA
00004398 5229 0001                  		addq.b	#1,1(a1)
0000439C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000043A2 6700                       		beq.s	loc_3FFA
000043A4 4E75                       		rts	
000043A6                            ; ===========================================================================
000043A6                            
000043A6                            loc_3FFA:				; XREF: MoveDemo_Record
000043A6 1340 0002                  		move.b	d0,2(a1)
000043AA 137C 0000 0003             		move.b	#0,3(a1)
000043B0 5478 F790                  		addq.w	#2,($FFFFF790).w
000043B4 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000043BA 4E75                       		rts	
000043BC                            ; ===========================================================================
000043BC                            
000043BC                            MoveDemo_On:				; XREF: MoveSonicInDemo
000043BC 4A38 F604                  		tst.b	($FFFFF604).w
000043C0 6A00                       		bpl.s	loc_4022
000043C2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043C6 6B00                       		bmi.s	loc_4022
000043C8 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000043CE                            
000043CE                            loc_4022:
000043CE 43F9 0000 0000             		lea	(Demo_Index).l,a1
000043D4 7000                       		moveq	#0,d0
000043D6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000043DA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000043E0 6600                       		bne.s	loc_4038
000043E2 7006                       		moveq	#6,d0
000043E4                            
000043E4                            loc_4038:
000043E4 E548                       		lsl.w	#2,d0
000043E6 2271 0000                  		movea.l	(a1,d0.w),a1
000043EA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043EE 6A00                       		bpl.s	loc_4056
000043F0 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000043F6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000043FA 5340                       		subq.w	#1,d0
000043FC E548                       		lsl.w	#2,d0
000043FE 2271 0000                  		movea.l	(a1,d0.w),a1
00004402                            
00004402                            loc_4056:
00004402 3038 F790                  		move.w	($FFFFF790).w,d0
00004406 D2C0                       		adda.w	d0,a1
00004408 1011                       		move.b	(a1),d0
0000440A 41F8 F604                  		lea	($FFFFF604).w,a0
0000440E 1200                       		move.b	d0,d1
00004410 1410                       		move.b	(a0),d2
00004412 B500                       		eor.b	d2,d0
00004414 10C1                       		move.b	d1,(a0)+
00004416 C001                       		and.b	d1,d0
00004418 10C0                       		move.b	d0,(a0)+
0000441A 5338 F792                  		subq.b	#1,($FFFFF792).w
0000441E 6400                       		bcc.s	locret_407E
00004420 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004426 5478 F790                  		addq.w	#2,($FFFFF790).w
0000442A                            
0000442A                            locret_407E:
0000442A 4E75                       		rts	
0000442C                            ; End of function MoveSonicInDemo
0000442C                            
0000442C                            ; ===========================================================================
0000442C                            ; ---------------------------------------------------------------------------
0000442C                            ; Demo sequence	pointers
0000442C                            ; ---------------------------------------------------------------------------
0000442C                            Demo_Index:
0000442C                            	include "_inc\Demo pointers for intro.asm"
0000442C                            ; ---------------------------------------------------------------------------
0000442C                            ; Demo sequence	pointers
0000442C                            ; ---------------------------------------------------------------------------
0000442C 0000 0000                  	dc.l Demo_GHZ
00004430 0000 0000                  	dc.l Demo_GHZ
00004434 0000 0000                  	dc.l Demo_MZ
00004438 0000 0000                  	dc.l Demo_MZ
0000443C 0000 0000                  	dc.l Demo_SYZ
00004440 0000 0000                  	dc.l Demo_SYZ
00004444 0000 0000                  	dc.l Demo_SS
00004448 0000 0000                  	dc.l Demo_SS
00004448 0000 0000                  	dc.l Demo_SS
0000444C                            
0000444C                            Demo_EndIndex:
0000444C                            	include "_inc\Demo pointers for ending.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Demo (ending) sequence pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Demo_EndGHZ1
00004450 0000 0000                  	dc.l Demo_EndMZ
00004454 0000 0000                  	dc.l Demo_EndSYZ
00004458 0000 0000                  	dc.l Demo_EndLZ
0000445C 0000 0000                  	dc.l Demo_EndSLZ
00004460 0000 0000                  	dc.l Demo_EndSBZ1
00004464 0000 0000                  	dc.l Demo_EndSBZ2
00004468 0000 0000                  	dc.l Demo_EndGHZ2
00004468 0000 0000                  	dc.l Demo_EndGHZ2
0000446C                            
0000446C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000447C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000448C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000449C                            		even
0000449C                            
0000449C                            ; ---------------------------------------------------------------------------
0000449C                            ; Collision index loading subroutine
0000449C                            ; ---------------------------------------------------------------------------
0000449C                            
0000449C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000449C                            
0000449C                            
0000449C                            ColIndexLoad:				; XREF: Level
0000449C 7000                       		moveq	#0,d0
0000449E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044A2 E548                       		lsl.w	#2,d0
000044A4 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000044AA 4E75                       		rts	
000044AC                            ; End of function ColIndexLoad
000044AC                            
000044AC                            ; ===========================================================================
000044AC                            ; ---------------------------------------------------------------------------
000044AC                            ; Collision index pointers
000044AC                            ; ---------------------------------------------------------------------------
000044AC                            ColPointers:
000044AC                            	include "_inc\Collision index pointers.asm"
000044AC                            ; ---------------------------------------------------------------------------
000044AC                            ; Collision index pointers
000044AC                            ; ---------------------------------------------------------------------------
000044AC 0000 0000                  	dc.l Col_GHZ
000044B0 0000 0000                  	dc.l Col_LZ
000044B4 0000 0000                  	dc.l Col_MZ
000044B8 0000 0000                  	dc.l Col_SLZ
000044BC 0000 0000                  	dc.l Col_SYZ
000044C0 0000 0000                  	dc.l Col_SBZ
000044C0 0000 0000                  	dc.l Col_SBZ
000044C4                            
000044C4                            ; ---------------------------------------------------------------------------
000044C4                            ; Oscillating number subroutine
000044C4                            ; ---------------------------------------------------------------------------
000044C4                            
000044C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044C4                            
000044C4                            
000044C4                            OscillateNumInit:			; XREF: Level
000044C4 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C8 45F9 0000 0000             		lea	(Osc_Data).l,a2
000044CE 7220                       		moveq	#$20,d1
000044D0                            
000044D0                            Osc_Loop:
000044D0 32DA                       		move.w	(a2)+,(a1)+
000044D2 51C9 FFFC                  		dbf	d1,Osc_Loop
000044D6 4E75                       		rts	
000044D8                            ; End of function OscillateNumInit
000044D8                            
000044D8                            ; ===========================================================================
000044D8 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000044DC 0000 0080                  		dc.w 0,	$80
000044E0 0000 0080                  		dc.w 0,	$80
000044E4 0000 0080                  		dc.w 0,	$80
000044E8 0000 0080                  		dc.w 0,	$80
000044EC 0000 0080                  		dc.w 0,	$80
000044F0 0000 0080                  		dc.w 0,	$80
000044F4 0000 0080                  		dc.w 0,	$80
000044F8 0000 0080                  		dc.w 0,	$80
000044FC 0000 50F0                  		dc.w 0,	$50F0
00004500 011E 2080                  		dc.w $11E, $2080
00004504 00B4 3080                  		dc.w $B4, $3080
00004508 010E 5080                  		dc.w $10E, $5080
0000450C 01C2 7080                  		dc.w $1C2, $7080
00004510 0276 0080                  		dc.w $276, $80
00004514 0000 0080                  		dc.w 0,	$80
00004518 0000                       		dc.w 0
0000451A                            		even
0000451A                            
0000451A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000451A                            
0000451A                            
0000451A                            OscillateNumDo:				; XREF: Level
0000451A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004520 6400                       		bcc.s	locret_41C4
00004522 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004526 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000452C 3619                       		move.w	(a1)+,d3
0000452E 720F                       		moveq	#$F,d1
00004530                            
00004530                            loc_4184:
00004530 341A                       		move.w	(a2)+,d2
00004532 381A                       		move.w	(a2)+,d4
00004534 0303                       		btst	d1,d3
00004536 6600                       		bne.s	loc_41A4
00004538 3029 0002                  		move.w	2(a1),d0
0000453C D042                       		add.w	d2,d0
0000453E 3340 0002                  		move.w	d0,2(a1)
00004542 D151                       		add.w	d0,0(a1)
00004544 B811                       		cmp.b	0(a1),d4
00004546 6200                       		bhi.s	loc_41BA
00004548 03C3                       		bset	d1,d3
0000454A 6000                       		bra.s	loc_41BA
0000454C                            ; ===========================================================================
0000454C                            
0000454C                            loc_41A4:				; XREF: OscillateNumDo
0000454C 3029 0002                  		move.w	2(a1),d0
00004550 9042                       		sub.w	d2,d0
00004552 3340 0002                  		move.w	d0,2(a1)
00004556 D151                       		add.w	d0,0(a1)
00004558 B811                       		cmp.b	0(a1),d4
0000455A 6300                       		bls.s	loc_41BA
0000455C 0383                       		bclr	d1,d3
0000455E                            
0000455E                            loc_41BA:
0000455E 5849                       		addq.w	#4,a1
00004560 51C9 FFCE                  		dbf	d1,loc_4184
00004564 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004568                            
00004568                            locret_41C4:
00004568 4E75                       		rts	
0000456A                            ; End of function OscillateNumDo
0000456A                            
0000456A                            ; ===========================================================================
0000456A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000456E 0002 0018                  		dc.w 2,	$18
00004572 0002 0020                  		dc.w 2,	$20
00004576 0002 0030                  		dc.w 2,	$30
0000457A 0004 0020                  		dc.w 4,	$20
0000457E 0008 0008                  		dc.w 8,	8
00004582 0008 0040                  		dc.w 8,	$40
00004586 0004 0040                  		dc.w 4,	$40
0000458A 0002 0050                  		dc.w 2,	$50
0000458E 0002 0050                  		dc.w 2,	$50
00004592 0002 0020                  		dc.w 2,	$20
00004596 0003 0030                  		dc.w 3,	$30
0000459A 0005 0050                  		dc.w 5,	$50
0000459E 0007 0070                  		dc.w 7,	$70
000045A2 0002 0010                  		dc.w 2,	$10
000045A6 0002 0010                  		dc.w 2,	$10
000045AA                            		even
000045AA                            
000045AA                            ; ---------------------------------------------------------------------------
000045AA                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000045AA                            ; ---------------------------------------------------------------------------
000045AA                            
000045AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045AA                            
000045AA                            
000045AA                            ChangeRingFrame:			; XREF: Level
000045AA 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000045AE 6A00                       		bpl.s	loc_421C
000045B0 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000045B6 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000045BA 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000045C0                            
000045C0                            loc_421C:
000045C0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000045C4 6A00                       		bpl.s	loc_4232
000045C6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000045CC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000045D0 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000045D6                            
000045D6                            loc_4232:
000045D6 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000045DA 6A00                       		bpl.s	loc_4250
000045DC 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000045E2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000045E6 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000045EC 6500                       		bcs.s	loc_4250
000045EE 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000045F4                            
000045F4                            loc_4250:
000045F4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000045F8 6700                       		beq.s	locret_4272
000045FA 7000                       		moveq	#0,d0
000045FC 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004600 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004604 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004608 EF58                       		rol.w	#7,d0
0000460A 0240 0003                  		andi.w	#3,d0
0000460E 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004612 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004616                            
00004616                            locret_4272:
00004616 4E75                       		rts	
00004618                            ; End of function ChangeRingFrame
00004618                            
00004618                            ; ---------------------------------------------------------------------------
00004618                            ; End-of-act signpost pattern loading subroutine
00004618                            ; ---------------------------------------------------------------------------
00004618                            
00004618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004618                            
00004618                            
00004618                            SignpostArtLoad:			; XREF: Level
00004618 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000461C 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004620 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004626 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004628 3038 F700                  		move.w	($FFFFF700).w,d0
0000462C 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004630 0441 0100                  		subi.w	#$100,d1
00004634 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004636 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004638 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000463C 6700                       		beq.s	Signpost_Exit
0000463E B278 F728                  		cmp.w	($FFFFF728).w,d1
00004642 6700                       		beq.s	Signpost_Exit
00004644 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004648 7012                       		moveq	#$12,d0
0000464A 6000 D186                  		bra.w	LoadPLC2	; load signpost	patterns
0000464E                            ; ===========================================================================
0000464E                            
0000464E                            Signpost_Exit:
0000464E 4E75                       		rts	
00004650                            ; End of function SignpostArtLoad
00004650                            
00004650                            ; ===========================================================================
00004650                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000046D0                            Demo_MZ:	incbin	demodata\i_mz.bin
00004800                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004880                            Demo_SS:	incbin	demodata\i_ss.bin
00004980                            ; ===========================================================================
00004980                            
00004980                            ; ---------------------------------------------------------------------------
00004980                            ; Special Stage
00004980                            ; ---------------------------------------------------------------------------
00004980                            
00004980                            SpecialStage:				; XREF: GameModeArray
00004980 303C 00CA                  		move.w	#$CA,d0
00004984 6100 CC36                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004988 6100 D812                  		bsr.w	Pal_MakeFlash
0000498C 46FC 2700                  		move	#$2700,sr
00004990 4DF9 00C0 0004             		lea	($C00004).l,a6
00004996 3CBC 8B03                  		move.w	#$8B03,(a6)
0000499A 3CBC 8004                  		move.w	#$8004,(a6)
0000499E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000049A4 3CBC 9011                  		move.w	#$9011,(a6)
000049A8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000049AC 0200 00BF                  		andi.b	#$BF,d0
000049B0 33C0 00C0 0004             		move.w	d0,($C00004).l
000049B6 6100 CB2C                  		bsr.w	ClearScreen
000049BA 46FC 2300                  		move	#$2300,sr
000049BE 4BF9 00C0 0004             		lea	($C00004).l,a5
000049C4 3ABC 8F01                  		move.w	#$8F01,(a5)
000049C8 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000049CE 3ABC 9780                  		move.w	#$9780,(a5)
000049D2 2ABC 5000 0081             		move.l	#$50000081,(a5)
000049D8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000049E0                            
000049E0                            loc_463C:
000049E0 3215                       		move.w	(a5),d1
000049E2 0801 0001                  		btst	#1,d1
000049E6 66F8                       		bne.s	loc_463C
000049E8 3ABC 8F02                  		move.w	#$8F02,(a5)
000049EC 6100 0000                  		bsr.w	SS_BGLoad
000049F0 7014                       		moveq	#$14,d0
000049F2 6100 CF18                  		bsr.w	RunPLC_ROM	; load special stage patterns
000049F6 43F8 D000                  		lea	($FFFFD000).w,a1
000049FA 7000                       		moveq	#0,d0
000049FC 323C 07FF                  		move.w	#$7FF,d1
00004A00                            
00004A00                            SS_ClrObjRam:
00004A00 22C0                       		move.l	d0,(a1)+
00004A02 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004A06                            
00004A06 43F8 F700                  		lea	($FFFFF700).w,a1
00004A0A 7000                       		moveq	#0,d0
00004A0C 323C 003F                  		move.w	#$3F,d1
00004A10                            
00004A10                            SS_ClrRam:
00004A10 22C0                       		move.l	d0,(a1)+
00004A12 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004A16                            
00004A16 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004A1A 7000                       		moveq	#0,d0
00004A1C 323C 0027                  		move.w	#$27,d1
00004A20                            
00004A20                            SS_ClrRam2:
00004A20 22C0                       		move.l	d0,(a1)+
00004A22 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004A26                            
00004A26 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004A2A 7000                       		moveq	#0,d0
00004A2C 323C 007F                  		move.w	#$7F,d1
00004A30                            
00004A30                            SS_ClrNemRam:
00004A30 22C0                       		move.l	d0,(a1)+
00004A32 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004A36                            
00004A36 4238 F64E                  		clr.b	($FFFFF64E).w
00004A3A 4278 FE02                  		clr.w	($FFFFFE02).w
00004A3E 700A                       		moveq	#$A,d0
00004A40 6100 D8DA                  		bsr.w	PalLoad1	; load special stage pallet
00004A44 4EB9 0000 0000             		jsr	SS_Load
00004A4A 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004A52 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004A5A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A60 6100 0000                  		bsr.w	PalCycle_SS
00004A64 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A68 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A6E 303C 0089                  		move.w	#$89,d0
00004A72 6100 CB42                  		bsr.w	PlaySound	; play special stage BG	music
00004A76 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A7C 43F9 0000 442C             		lea	(Demo_Index).l,a1
00004A82 7006                       		moveq	#6,d0
00004A84 E548                       		lsl.w	#2,d0
00004A86 2271 0000                  		movea.l	(a1,d0.w),a1
00004A8A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A90 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A94 4278 FE20                  		clr.w	($FFFFFE20).w
00004A98 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A9C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004AA2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004AA8 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004AAC 6700                       		beq.s	SS_NoDebug	; if not, branch
00004AAE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004AB4 6700                       		beq.s	SS_NoDebug	; if not, branch
00004AB6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004ABC                            
00004ABC                            SS_NoDebug:
00004ABC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004AC0 0000 0040                  		ori.b	#$40,d0
00004AC4 33C0 00C0 0004             		move.w	d0,($C00004).l
00004ACA 6100 D624                  		bsr.w	Pal_MakeWhite
00004ACE                            
00004ACE                            ; ---------------------------------------------------------------------------
00004ACE                            ; Main Special Stage loop
00004ACE                            ; ---------------------------------------------------------------------------
00004ACE                            
00004ACE                            SS_MainLoop:
00004ACE 6100 CAF8                  		bsr.w	PauseGame
00004AD2 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004AD8 6100 E176                  		bsr.w	DelayProgram
00004ADC 6100 F89E                  		bsr.w	MoveSonicInDemo
00004AE0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AE6 4EB9 0000 0000             		jsr	ObjectsLoad
00004AEC 4EB9 0000 0000             		jsr	BuildSprites
00004AF2 4EB9 0000 0000             		jsr	SS_ShowLayout
00004AF8 6100 0000                  		bsr.w	SS_BGAnimate
00004AFC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B00 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004B02 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004B06 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004B0A                            
00004B0A                            SS_ChkEnd:
00004B0A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004B10 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004B14                            
00004B14 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B18 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004B1C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004B22 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004B28 6500                       		bcs.s	SS_End		; if not, branch
00004B2A 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004B2E                            
00004B2E                            SS_End:
00004B2E 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004B34 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004B3A 4278 F794                  		clr.w	($FFFFF794).w
00004B3E                            
00004B3E                            SS_EndLoop:
00004B3E 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004B44 6100 E10A                  		bsr.w	DelayProgram
00004B48 6100 F832                  		bsr.w	MoveSonicInDemo
00004B4C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B52 4EB9 0000 0000             		jsr	ObjectsLoad
00004B58 4EB9 0000 0000             		jsr	BuildSprites
00004B5E 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B64 6100 0000                  		bsr.w	SS_BGAnimate
00004B68 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B6C 6A00                       		bpl.s	loc_47D4
00004B6E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B74 6100 D646                  		bsr.w	Pal_ToWhite
00004B78                            
00004B78                            loc_47D4:
00004B78 4A78 F614                  		tst.w	($FFFFF614).w
00004B7C 66C0                       		bne.s	SS_EndLoop
00004B7E                            
00004B7E 46FC 2700                  		move	#$2700,sr
00004B82 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B88 3CBC 8230                  		move.w	#$8230,(a6)
00004B8C 3CBC 8407                  		move.w	#$8407,(a6)
00004B90 3CBC 9001                  		move.w	#$9001,(a6)
00004B94 6100 C94E                  		bsr.w	ClearScreen
00004B98 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004BA2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004BA8 6100 CAB6                  		bsr.w	NemDec
00004BAC 4EB9 0000 0000             		jsr	Hud_Base
00004BB2 46FC 2300                  		move	#$2300,sr
00004BB6 7011                       		moveq	#$11,d0
00004BB8 6100 D77E                  		bsr.w	PalLoad2	; load results screen pallet
00004BBC 7000                       		moveq	#0,d0
00004BBE 6100 CC12                  		bsr.w	LoadPLC2
00004BC2 701B                       		moveq	#$1B,d0
00004BC4 6100 CBDA                  		bsr.w	LoadPLC		; load results screen patterns
00004BC8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004BCE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004BD4 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004BD8 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004BDC 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004BE0 303C 008E                  		move.w	#$8E,d0
00004BE4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004BEA 43F8 D000                  		lea	($FFFFD000).w,a1
00004BEE 7000                       		moveq	#0,d0
00004BF0 323C 07FF                  		move.w	#$7FF,d1
00004BF4                            
00004BF4                            SS_EndClrObjRam:
00004BF4 22C0                       		move.l	d0,(a1)+
00004BF6 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004BFA                            
00004BFA 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004C00                            
00004C00                            SS_NormalExit:
00004C00 6100 C9C6                  		bsr.w	PauseGame
00004C04 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004C0A 6100 E044                  		bsr.w	DelayProgram
00004C0E 4EB9 0000 0000             		jsr	ObjectsLoad
00004C14 4EB9 0000 0000             		jsr	BuildSprites
00004C1A 6100 CBF0                  		bsr.w	RunPLC_RAM
00004C1E 4A78 FE02                  		tst.w	($FFFFFE02).w
00004C22 67DC                       		beq.s	SS_NormalExit
00004C24 4AB8 F680                  		tst.l	($FFFFF680).w
00004C28 66D6                       		bne.s	SS_NormalExit
00004C2A 303C 00CA                  		move.w	#$CA,d0
00004C2E 6100 C98C                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004C32 6100 D568                  		bsr.w	Pal_MakeFlash
00004C36 4E75                       		rts	
00004C38                            ; ===========================================================================
00004C38                            
00004C38                            SS_ToSegaScreen:
00004C38 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004C3E 4E75                       		rts
00004C40                            
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            ; Special stage	background loading subroutine
00004C40                            ; ---------------------------------------------------------------------------
00004C40                            
00004C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C40                            
00004C40                            
00004C40                            SS_BGLoad:				; XREF: SpecialStage
00004C40 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C46 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004C4C 303C 4051                  		move.w	#$4051,d0
00004C50 6100 CCEC                  		bsr.w	EniDec
00004C54 263C 5000 0001             		move.l	#$50000001,d3
00004C5A 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C60 7E06                       		moveq	#6,d7
00004C62                            
00004C62                            loc_48BE:
00004C62 2003                       		move.l	d3,d0
00004C64 7C03                       		moveq	#3,d6
00004C66 7800                       		moveq	#0,d4
00004C68 0C47 0003                  		cmpi.w	#3,d7
00004C6C 6400                       		bcc.s	loc_48CC
00004C6E 7801                       		moveq	#1,d4
00004C70                            
00004C70                            loc_48CC:
00004C70 7A07                       		moveq	#7,d5
00004C72                            
00004C72                            loc_48CE:
00004C72 224A                       		movea.l	a2,a1
00004C74 0A04 0001                  		eori.b	#1,d4
00004C78 6600                       		bne.s	loc_48E2
00004C7A 0C47 0006                  		cmpi.w	#6,d7
00004C7E 6600                       		bne.s	loc_48F2
00004C80 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C86                            
00004C86                            loc_48E2:
00004C86 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C8A 7207                       		moveq	#7,d1
00004C8C 7407                       		moveq	#7,d2
00004C8E 6100 C9B0                  		bsr.w	ShowVDPGraphics
00004C92 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C96                            
00004C96                            loc_48F2:
00004C96 0680 0010 0000             		addi.l	#$100000,d0
00004C9C 51CD FFD4                  		dbf	d5,loc_48CE
00004CA0 0680 0380 0000             		addi.l	#$3800000,d0
00004CA6 0A04 0001                  		eori.b	#1,d4
00004CAA 51CE FFC4                  		dbf	d6,loc_48CC
00004CAE 0683 1000 0000             		addi.l	#$10000000,d3
00004CB4 6A00                       		bpl.s	loc_491C
00004CB6 4843                       		swap	d3
00004CB8 0683 0000 C000             		addi.l	#$C000,d3
00004CBE 4843                       		swap	d3
00004CC0                            
00004CC0                            loc_491C:
00004CC0 D4FC 0080                  		adda.w	#$80,a2
00004CC4 51CF FF9C                  		dbf	d7,loc_48BE
00004CC8 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CCE 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004CD4 303C 4000                  		move.w	#$4000,d0
00004CD8 6100 CC64                  		bsr.w	EniDec
00004CDC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CE2 203C 4000 0003             		move.l	#$40000003,d0
00004CE8 723F                       		moveq	#$3F,d1
00004CEA 741F                       		moveq	#$1F,d2
00004CEC 6100 C952                  		bsr.w	ShowVDPGraphics
00004CF0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CF6 203C 5000 0003             		move.l	#$50000003,d0
00004CFC 723F                       		moveq	#$3F,d1
00004CFE 743F                       		moveq	#$3F,d2
00004D00 6100 C93E                  		bsr.w	ShowVDPGraphics
00004D04 4E75                       		rts	
00004D06                            ; End of function SS_BGLoad
00004D06                            
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            ; Pallet cycling routine - special stage
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            
00004D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D06                            
00004D06                            
00004D06                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004D06 4A78 F63A                  		tst.w	($FFFFF63A).w
00004D0A 6600                       		bne.s	locret_49E6
00004D0C 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004D10 6A00                       		bpl.s	locret_49E6
00004D12 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D18 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004D1C 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004D20 0240 001F                  		andi.w	#$1F,d0
00004D24 E548                       		lsl.w	#2,d0
00004D26 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004D2C D0C0                       		adda.w	d0,a0
00004D2E 1018                       		move.b	(a0)+,d0
00004D30 6A00                       		bpl.s	loc_4992
00004D32 303C 01FF                  		move.w	#$1FF,d0
00004D36                            
00004D36                            loc_4992:
00004D36 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004D3A 7000                       		moveq	#0,d0
00004D3C 1018                       		move.b	(a0)+,d0
00004D3E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004D42 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004D48 43F1 0000                  		lea	(a1,d0.w),a1
00004D4C 303C 8200                  		move.w	#-$7E00,d0
00004D50 1019                       		move.b	(a1)+,d0
00004D52 3C80                       		move.w	d0,(a6)
00004D54 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004D58 303C 8400                  		move.w	#-$7C00,d0
00004D5C 1018                       		move.b	(a0)+,d0
00004D5E 3C80                       		move.w	d0,(a6)
00004D60 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D6A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D72 7000                       		moveq	#0,d0
00004D74 1018                       		move.b	(a0)+,d0
00004D76 6B00                       		bmi.s	loc_49E8
00004D78 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D7E D2C0                       		adda.w	d0,a1
00004D80 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D84 24D9                       		move.l	(a1)+,(a2)+
00004D86 24D9                       		move.l	(a1)+,(a2)+
00004D88 24D9                       		move.l	(a1)+,(a2)+
00004D8A                            
00004D8A                            locret_49E6:
00004D8A 4E75                       		rts	
00004D8C                            ; ===========================================================================
00004D8C                            
00004D8C                            loc_49E8:				; XREF: PalCycle_SS
00004D8C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D90 0C40 008A                  		cmpi.w	#$8A,d0
00004D94 6500                       		bcs.s	loc_49F4
00004D96 5241                       		addq.w	#1,d1
00004D98                            
00004D98                            loc_49F4:
00004D98 C2FC 002A                  		mulu.w	#$2A,d1
00004D9C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004DA2 D2C1                       		adda.w	d1,a1
00004DA4 0240 007F                  		andi.w	#$7F,d0
00004DA8 0880 0000                  		bclr	#0,d0
00004DAC 6700                       		beq.s	loc_4A18
00004DAE 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004DB2 24D1                       		move.l	(a1),(a2)+
00004DB4 24E9 0004                  		move.l	4(a1),(a2)+
00004DB8 24E9 0008                  		move.l	8(a1),(a2)+
00004DBC                            
00004DBC                            loc_4A18:
00004DBC D2FC 000C                  		adda.w	#$C,a1
00004DC0 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004DC4 0C40 000A                  		cmpi.w	#$A,d0
00004DC8 6500                       		bcs.s	loc_4A2E
00004DCA 0440 000A                  		subi.w	#$A,d0
00004DCE 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004DD2                            
00004DD2                            loc_4A2E:
00004DD2 3200                       		move.w	d0,d1
00004DD4 D040                       		add.w	d0,d0
00004DD6 D041                       		add.w	d1,d0
00004DD8 D2C0                       		adda.w	d0,a1
00004DDA 24D9                       		move.l	(a1)+,(a2)+
00004DDC 34D9                       		move.w	(a1)+,(a2)+
00004DDE 4E75                       		rts	
00004DE0                            ; End of function PalCycle_SS
00004DE0                            
00004DE0                            ; ===========================================================================
00004DE0 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004DF0                            					; XREF: PalCycle_SS
00004DF0 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004E00 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004E10 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004E20 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004E30 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004E40 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004E50 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E60                            		even
00004E60 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E6E                            					; XREF: PalCycle_SS
00004E6E                            		even
00004E6E                            
00004E6E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004EB6                            		even
00004EB6                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F88                            		even
00004F88                            
00004F88                            ; ---------------------------------------------------------------------------
00004F88                            ; Subroutine to	make the special stage background animated
00004F88                            ; ---------------------------------------------------------------------------
00004F88                            
00004F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F88                            
00004F88                            
00004F88                            SS_BGAnimate:				; XREF: SpecialStage
00004F88 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F8C 6600                       		bne.s	loc_4BF6
00004F8E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F94 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F9A                            
00004F9A                            loc_4BF6:
00004F9A 0C40 0008                  		cmpi.w	#8,d0
00004F9E 6400                       		bcc.s	loc_4C4E
00004FA0 0C40 0006                  		cmpi.w	#6,d0
00004FA4 6600                       		bne.s	loc_4C10
00004FA6 5278 F718                  		addq.w	#1,($FFFFF718).w
00004FAA 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004FAE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FB4                            
00004FB4                            loc_4C10:
00004FB4 7000                       		moveq	#0,d0
00004FB6 3038 F708                  		move.w	($FFFFF708).w,d0
00004FBA 4440                       		neg.w	d0
00004FBC 4840                       		swap	d0
00004FBE 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004FC4 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004FC8 7609                       		moveq	#9,d3
00004FCA                            
00004FCA                            loc_4C26:
00004FCA 302B 0002                  		move.w	2(a3),d0
00004FCE 6100 DCB2                  		bsr.w	CalcSine
00004FD2 7400                       		moveq	#0,d2
00004FD4 1419                       		move.b	(a1)+,d2
00004FD6 C1C2                       		muls.w	d2,d0
00004FD8 E080                       		asr.l	#8,d0
00004FDA 36C0                       		move.w	d0,(a3)+
00004FDC 1419                       		move.b	(a1)+,d2
00004FDE 4882                       		ext.w	d2
00004FE0 D55B                       		add.w	d2,(a3)+
00004FE2 51CB FFE6                  		dbf	d3,loc_4C26
00004FE6 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004FEA 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004FF0 6000                       		bra.s	loc_4C7E
00004FF2                            ; ===========================================================================
00004FF2                            
00004FF2                            loc_4C4E:				; XREF: SS_BGAnimate
00004FF2 0C40 000C                  		cmpi.w	#$C,d0
00004FF6 6600                       		bne.s	loc_4C74
00004FF8 5378 F718                  		subq.w	#1,($FFFFF718).w
00004FFC 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005000 243C 0001 8000             		move.l	#$18000,d2
00005006 7206                       		moveq	#6,d1
00005008                            
00005008                            loc_4C64:
00005008 2013                       		move.l	(a3),d0
0000500A 9082                       		sub.l	d2,d0
0000500C 26C0                       		move.l	d0,(a3)+
0000500E 0482 0000 2000             		subi.l	#$2000,d2
00005014 51C9 FFF2                  		dbf	d1,loc_4C64
00005018                            
00005018                            loc_4C74:
00005018 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000501C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005022                            
00005022                            loc_4C7E:
00005022 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005026 3038 F718                  		move.w	($FFFFF718).w,d0
0000502A 4440                       		neg.w	d0
0000502C 4840                       		swap	d0
0000502E 7600                       		moveq	#0,d3
00005030 161A                       		move.b	(a2)+,d3
00005032 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005036 4442                       		neg.w	d2
00005038 0242 00FF                  		andi.w	#$FF,d2
0000503C E54A                       		lsl.w	#2,d2
0000503E                            
0000503E                            loc_4C9A:
0000503E 301B                       		move.w	(a3)+,d0
00005040 544B                       		addq.w	#2,a3
00005042 7200                       		moveq	#0,d1
00005044 121A                       		move.b	(a2)+,d1
00005046 5341                       		subq.w	#1,d1
00005048                            
00005048                            loc_4CA4:
00005048 2380 2000                  		move.l	d0,(a1,d2.w)
0000504C 5842                       		addq.w	#4,d2
0000504E 0242 03FC                  		andi.w	#$3FC,d2
00005052 51C9 FFF4                  		dbf	d1,loc_4CA4
00005056 51CB FFE6                  		dbf	d3,loc_4C9A
0000505A 4E75                       		rts	
0000505C                            ; End of function SS_BGAnimate
0000505C                            
0000505C                            ; ===========================================================================
0000505C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005068                            		even
00005068 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005070                            		even
00005070 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005084                            		even
00005084                            					; XREF: SS_BGAnimate
00005084                            ; ===========================================================================
00005084                            
00005084                            ; ---------------------------------------------------------------------------
00005084                            ; Continue screen
00005084                            ; ---------------------------------------------------------------------------
00005084                            
00005084                            ContinueScreen:				; XREF: GameModeArray
00005084 6100 CFEC                  		bsr.w	Pal_FadeFrom
00005088 46FC 2700                  		move	#$2700,sr
0000508C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005090 0200 00BF                  		andi.b	#$BF,d0
00005094 33C0 00C0 0004             		move.w	d0,($C00004).l
0000509A 4DF9 00C0 0004             		lea	($C00004).l,a6
000050A0 3CBC 8004                  		move.w	#$8004,(a6)
000050A4 3CBC 8700                  		move.w	#$8700,(a6)
000050A8 6100 C43A                  		bsr.w	ClearScreen
000050AC 43F8 D000                  		lea	($FFFFD000).w,a1
000050B0 7000                       		moveq	#0,d0
000050B2 323C 07FF                  		move.w	#$7FF,d1
000050B6                            
000050B6                            Cont_ClrObjRam:
000050B6 22C0                       		move.l	d0,(a1)+
000050B8 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000050BC                            
000050BC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000050C6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000050CC 6100 C592                  		bsr.w	NemDec
000050D0 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000050DA 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000050E0 6100 C57E                  		bsr.w	NemDec
000050E4 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000050EE 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000050F4 6100 C56A                  		bsr.w	NemDec
000050F8 720A                       		moveq	#10,d1
000050FA 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005100 7012                       		moveq	#$12,d0
00005102 6100 D218                  		bsr.w	PalLoad1	; load continue	screen pallet
00005106 103C 0090                  		move.b	#$90,d0
0000510A 6100 C4AA                  		bsr.w	PlaySound	; play continue	music
0000510E 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005114 42B8 F700                  		clr.l	($FFFFF700).w
00005118 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005120 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005126 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
0000512C 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005132 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005138 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
0000513E 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005144 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000514A 4EB9 0000 0000             		jsr	ObjectsLoad
00005150 4EB9 0000 0000             		jsr	BuildSprites
00005156 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000515A 0000 0040                  		ori.b	#$40,d0
0000515E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005164 6100 CE66                  		bsr.w	Pal_FadeTo
00005168                            
00005168                            ; ---------------------------------------------------------------------------
00005168                            ; Continue screen main loop
00005168                            ; ---------------------------------------------------------------------------
00005168                            
00005168                            Cont_MainLoop:
00005168 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000516E 6100 DAE0                  		bsr.w	DelayProgram
00005172 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005178 6400                       		bcc.s	loc_4DF2
0000517A 46FC 2700                  		move	#$2700,sr
0000517E 3238 F614                  		move.w	($FFFFF614).w,d1
00005182 82FC 003C                  		divu.w	#$3C,d1
00005186 0281 0000 000F             		andi.l	#$F,d1
0000518C 4EB9 0000 0000             		jsr	ContScrCounter
00005192 46FC 2300                  		move	#$2300,sr
00005196                            
00005196                            loc_4DF2:
00005196 4EB9 0000 0000             		jsr	ObjectsLoad
0000519C 4EB9 0000 0000             		jsr	BuildSprites
000051A2 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000051A8 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000051AA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000051B0 64B6                       		bcc.s	Cont_MainLoop
000051B2 4A78 F614                  		tst.w	($FFFFF614).w
000051B6 6600 FFB0                  		bne.w	Cont_MainLoop
000051BA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000051C0 4E75                       		rts	
000051C2                            ; ===========================================================================
000051C2                            
000051C2                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000051C2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051C8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000051CE 7000                       		moveq	#0,d0
000051D0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000051D4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000051D8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000051DC 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000051E0 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000051E4 4E75                       		rts	
000051E6                            ; ===========================================================================
000051E6                            
000051E6                            ; ---------------------------------------------------------------------------
000051E6                            ; Object 80 - Continue screen elements
000051E6                            ; ---------------------------------------------------------------------------
000051E6                            
000051E6                            Obj80:					; XREF: Obj_Index
000051E6 7000                       		moveq	#0,d0
000051E8 1028 0024                  		move.b	$24(a0),d0
000051EC 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000051F0 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000051F4                            ; ===========================================================================
000051F4 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000051F6 0000                       		dc.w Obj80_Display-Obj80_Index
000051F8 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000051FA 0000                       		dc.w Obj80_ChkType-Obj80_Index
000051FC                            ; ===========================================================================
000051FC                            
000051FC                            Obj80_Main:				; XREF: Obj80_Index
000051FC 5428 0024                  		addq.b	#2,$24(a0)
00005200 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005208 317C 8500 0002             		move.w	#$8500,2(a0)
0000520E 117C 0000 0001             		move.b	#0,1(a0)
00005214 117C 003C 0019             		move.b	#$3C,$19(a0)
0000521A 317C 0120 0008             		move.w	#$120,8(a0)
00005220 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005226 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
0000522C                            
0000522C                            Obj80_Display:				; XREF: Obj80_Index
0000522C 4EF9 0000 0000             		jmp	DisplaySprite
00005232                            ; ===========================================================================
00005232                            Obj80_MiniSonicPos:
00005232 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005244 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005250                            ; ===========================================================================
00005250                            
00005250                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005250 2248                       		movea.l	a0,a1
00005252 45F9 0000 5232             		lea	(Obj80_MiniSonicPos).l,a2
00005258 7200                       		moveq	#0,d1
0000525A 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000525E 5501                       		subq.b	#2,d1
00005260 6400                       		bcc.s	loc_4EC4
00005262 4EF9 0000 0000             		jmp	DeleteObject
00005268                            ; ===========================================================================
00005268                            
00005268                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005268 7601                       		moveq	#1,d3
0000526A 0C01 000E                  		cmpi.b	#$E,d1
0000526E 6500                       		bcs.s	loc_4ED0
00005270 7600                       		moveq	#0,d3
00005272 720E                       		moveq	#$E,d1
00005274                            
00005274                            loc_4ED0:
00005274 1401                       		move.b	d1,d2
00005276 0202 0001                  		andi.b	#1,d2
0000527A                            
0000527A                            Obj80_MiniSonLoop:
0000527A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000527E 335A 0008                  		move.w	(a2)+,8(a1)
00005282 4A02                       		tst.b	d2
00005284 6700                       		beq.s	loc_4EEA
00005286 0469 000A 0008             		subi.w	#$A,8(a1)
0000528C                            
0000528C                            loc_4EEA:
0000528C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005292 137C 0006 001A             		move.b	#6,$1A(a1)
00005298 137C 0006 0024             		move.b	#6,$24(a1)
0000529E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000052A6 337C 8551 0002             		move.w	#$8551,2(a1)
000052AC 137C 0000 0001             		move.b	#0,1(a1)
000052B2 43E9 0040                  		lea	$40(a1),a1
000052B6 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000052BA 43E9 FFC0                  		lea	-$40(a1),a1
000052BE 1343 0028                  		move.b	d3,$28(a1)
000052C2                            
000052C2                            Obj80_ChkType:				; XREF: Obj80_Index
000052C2 4A28 0028                  		tst.b	$28(a0)
000052C6 6700                       		beq.s	loc_4F40
000052C8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052CE 6500                       		bcs.s	loc_4F40
000052D0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000052D4 0200 0001                  		andi.b	#1,d0
000052D8 6600                       		bne.s	loc_4F40
000052DA 4A78 D010                  		tst.w	($FFFFD010).w
000052DE 6600                       		bne.s	Obj80_Delete
000052E0 4E75                       		rts	
000052E2                            ; ===========================================================================
000052E2                            
000052E2                            loc_4F40:				; XREF: Obj80_ChkType
000052E2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000052E6 0200 000F                  		andi.b	#$F,d0
000052EA 6600                       		bne.s	Obj80_Display2
000052EC 0868 0000 001A             		bchg	#0,$1A(a0)
000052F2                            
000052F2                            Obj80_Display2:
000052F2 4EF9 0000 0000             		jmp	DisplaySprite
000052F8                            ; ===========================================================================
000052F8                            
000052F8                            Obj80_Delete:				; XREF: Obj80_ChkType
000052F8 4EF9 0000 0000             		jmp	DeleteObject
000052FE                            ; ===========================================================================
000052FE                            
000052FE                            ; ---------------------------------------------------------------------------
000052FE                            ; Object 81 - Sonic on the continue screen
000052FE                            ; ---------------------------------------------------------------------------
000052FE                            
000052FE                            Obj81:					; XREF: Obj_Index
000052FE 7000                       		moveq	#0,d0
00005300 1028 0024                  		move.b	$24(a0),d0
00005304 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005308 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000530C 4EF9 0000 0000             		jmp	DisplaySprite
00005312                            ; ===========================================================================
00005312 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005314 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005316 0000                       		dc.w Obj81_Animate-Obj81_Index
00005318 0000                       		dc.w Obj81_Run-Obj81_Index
0000531A                            ; ===========================================================================
0000531A                            
0000531A                            Obj81_Main:				; XREF: Obj81_Index
0000531A 5428 0024                  		addq.b	#2,$24(a0)
0000531E 317C 00A0 0008             		move.w	#$A0,8(a0)
00005324 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000532A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005332 317C 0780 0002             		move.w	#$780,2(a0)
00005338 117C 0004 0001             		move.b	#4,1(a0)
0000533E 117C 0002 0018             		move.b	#2,$18(a0)
00005344 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000534A 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005350                            
00005350                            Obj81_ChkLand:				; XREF: Obj81_Index
00005350 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005356 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005358 5428 0024                  		addq.b	#2,$24(a0)
0000535C 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005360 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005368 317C 8500 0002             		move.w	#$8500,2(a0)
0000536E 117C 0000 001C             		move.b	#0,$1C(a0)
00005374 6000                       		bra.s	Obj81_Animate
00005376                            ; ===========================================================================
00005376                            
00005376                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005376 4EB9 0000 0000             		jsr	SpeedToPos
0000537C 4EB9 0000 0000             		jsr	Sonic_Animate
00005382 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005388                            ; ===========================================================================
00005388                            
00005388                            Obj81_Animate:				; XREF: Obj81_Index
00005388 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000538C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000538E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005394 4EF9 0000 0000             		jmp	AnimateSprite
0000539A                            ; ===========================================================================
0000539A                            
0000539A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000539A 5428 0024                  		addq.b	#2,$24(a0)
0000539E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000053A6 317C 0780 0002             		move.w	#$780,2(a0)
000053AC 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000053B2 4268 0014                  		clr.w	$14(a0)
000053B6 5168 000C                  		subq.w	#8,$C(a0)
000053BA 103C 00E0                  		move.b	#$E0,d0
000053BE 6100 C1FC                  		bsr.w	PlaySound_Special ; fade out music
000053C2                            
000053C2                            Obj81_Run:				; XREF: Obj81_Index
000053C2 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000053C8 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000053CA 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000053D0 6000                       		bra.s	Obj81_ShowRun
000053D2                            ; ===========================================================================
000053D2                            
000053D2                            Obj81_AddSpeed:				; XREF: Obj81_Run
000053D2 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000053D8                            
000053D8                            Obj81_ShowRun:				; XREF: Obj81_Run
000053D8 4EB9 0000 0000             		jsr	SpeedToPos
000053DE 4EB9 0000 0000             		jsr	Sonic_Animate
000053E4 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000053EA                            ; ===========================================================================
000053EA                            Ani_obj81:
000053EA                            	include "_anim\obj81.asm"
000053EA                            ; ---------------------------------------------------------------------------
000053EA                            ; Animation script - Sonic on the continue screen
000053EA                            ; ---------------------------------------------------------------------------
000053EA 0000                       		dc.w byte_504A-Ani_obj81
000053EC 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000053F8 00                         		even
000053F8 00                         		even
000053F8                            
000053F8                            ; ---------------------------------------------------------------------------
000053F8                            ; Sprite mappings - Continue screen
000053F8                            ; ---------------------------------------------------------------------------
000053F8                            Map_obj80:
000053F8                            	include "_maps\obj80.asm"
000053F8                            ; ---------------------------------------------------------------------------
000053F8                            ; Sprite mappings - Continue screen
000053F8                            ; ---------------------------------------------------------------------------
000053F8 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000053FC 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005400 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005404 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005408 0B                         byte_5066:	dc.b $B
00005409 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000540E F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005413 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005418 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000541D F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005422 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005427 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000542C F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005431 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005436 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000543B 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005440 03                         byte_509E:	dc.b 3
00005441 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005446 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000544B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005450 03                         byte_50AE:	dc.b 3
00005451 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005456 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000545B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005460 03                         byte_50BE:	dc.b 3
00005461 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005466 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000546B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005470 02                         byte_50CE:	dc.b 2
00005471 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005476 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000547B 01                         byte_50D9:	dc.b 1
0000547C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005481 01                         byte_50DF:	dc.b 1
00005482 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005488 00                         		even
00005488 00                         		even
00005488                            
00005488                            ; ===========================================================================
00005488                            ; ---------------------------------------------------------------------------
00005488                            ; Ending sequence in Green Hill	Zone
00005488                            ; ---------------------------------------------------------------------------
00005488                            
00005488                            EndingSequence:				; XREF: GameModeArray
00005488 103C 00E4                  		move.b	#$E4,d0
0000548C 6100 C12E                  		bsr.w	PlaySound_Special ; stop music
00005490 6100 CBE0                  		bsr.w	Pal_FadeFrom
00005494 43F8 D000                  		lea	($FFFFD000).w,a1
00005498 7000                       		moveq	#0,d0
0000549A 323C 07FF                  		move.w	#$7FF,d1
0000549E                            
0000549E                            End_ClrObjRam:
0000549E 22C0                       		move.l	d0,(a1)+
000054A0 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000054A4                            
000054A4 43F8 F628                  		lea	($FFFFF628).w,a1
000054A8 7000                       		moveq	#0,d0
000054AA 323C 0015                  		move.w	#$15,d1
000054AE                            
000054AE                            End_ClrRam:
000054AE 22C0                       		move.l	d0,(a1)+
000054B0 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000054B4                            
000054B4 43F8 F700                  		lea	($FFFFF700).w,a1
000054B8 7000                       		moveq	#0,d0
000054BA 323C 003F                  		move.w	#$3F,d1
000054BE                            
000054BE                            End_ClrRam2:
000054BE 22C0                       		move.l	d0,(a1)+
000054C0 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000054C4                            
000054C4 43F8 FE60                  		lea	($FFFFFE60).w,a1
000054C8 7000                       		moveq	#0,d0
000054CA 323C 0047                  		move.w	#$47,d1
000054CE                            
000054CE                            End_ClrRam3:
000054CE 22C0                       		move.l	d0,(a1)+
000054D0 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000054D4                            
000054D4 46FC 2700                  		move	#$2700,sr
000054D8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000054DC 0200 00BF                  		andi.b	#$BF,d0
000054E0 33C0 00C0 0004             		move.w	d0,($C00004).l
000054E6 6100 BFFC                  		bsr.w	ClearScreen
000054EA 4DF9 00C0 0004             		lea	($C00004).l,a6
000054F0 3CBC 8B03                  		move.w	#$8B03,(a6)
000054F4 3CBC 8230                  		move.w	#$8230,(a6)
000054F8 3CBC 8407                  		move.w	#$8407,(a6)
000054FC 3CBC 857C                  		move.w	#$857C,(a6)
00005500 3CBC 9001                  		move.w	#$9001,(a6)
00005504 3CBC 8004                  		move.w	#$8004,(a6)
00005508 3CBC 8720                  		move.w	#$8720,(a6)
0000550C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005512 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005516 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000551C 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005522 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005528 6700                       		beq.s	End_LoadData	; if yes, branch
0000552A 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005530                            
00005530                            End_LoadData:
00005530 701C                       		moveq	#$1C,d0
00005532 6100 C3D8                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005536 4EB9 0000 0000             		jsr	Hud_Base
0000553C 6100 0000                  		bsr.w	LevelSizeLoad
00005540 6100 0000                  		bsr.w	DeformBgLayer
00005544 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000554A 6100 0000                  		bsr.w	MainLoadBlockLoad
0000554E 6100 0000                  		bsr.w	LoadTilesFromStart
00005552 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000555A 46FC 2300                  		move	#$2300,sr
0000555E 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005564 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005568 6100 C552                  		bsr.w	KosDec
0000556C 7003                       		moveq	#3,d0
0000556E 6100 CDAC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005572 303C 008B                  		move.w	#$8B,d0
00005576 6100 C03E                  		bsr.w	PlaySound	; play ending sequence music
0000557A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005580 6700                       		beq.s	End_LoadSonic	; if not, branch
00005582 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005588                            
00005588                            End_LoadSonic:
00005588 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000558E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005594 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000559A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000055A0 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000055A6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000055AC 4EB9 0000 0000             		jsr	ObjPosLoad
000055B2 4EB9 0000 0000             		jsr	ObjectsLoad
000055B8 4EB9 0000 0000             		jsr	BuildSprites
000055BE 7000                       		moveq	#0,d0
000055C0 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000055C4 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000055C8 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000055CC 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000055D0 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000055D4 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000055D8 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000055DC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000055E0 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000055E4 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000055E8 6100 EEDA                  		bsr.w	OscillateNumInit
000055EC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000055F2 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000055F8 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000055FE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005604 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000560A 6100 D644                  		bsr.w	DelayProgram
0000560E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005612 0000 0040                  		ori.b	#$40,d0
00005616 33C0 00C0 0004             		move.w	d0,($C00004).l
0000561C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005622 6100 C9A8                  		bsr.w	Pal_FadeTo
00005626                            
00005626                            ; ---------------------------------------------------------------------------
00005626                            ; Main ending sequence loop
00005626                            ; ---------------------------------------------------------------------------
00005626                            
00005626                            End_MainLoop:
00005626 6100 BFA0                  		bsr.w	PauseGame
0000562A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005630 6100 D61E                  		bsr.w	DelayProgram
00005634 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005638 6100 0000                  		bsr.w	End_MoveSonic
0000563C 4EB9 0000 0000             		jsr	ObjectsLoad
00005642 6100 0000                  		bsr.w	DeformBgLayer
00005646 4EB9 0000 0000             		jsr	BuildSprites
0000564C 4EB9 0000 0000             		jsr	ObjPosLoad
00005652 6100 C508                  		bsr.w	PalCycle_Load
00005656 6100 EEC2                  		bsr.w	OscillateNumDo
0000565A 6100 EF4E                  		bsr.w	ChangeRingFrame
0000565E 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005664 6700                       		beq.s	loc_52DA	; if yes, branch
00005666 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000566C 103C 0091                  		move.b	#$91,d0
00005670 6100 BF4A                  		bsr.w	PlaySound_Special ; play credits music
00005674 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000567A 4E75                       		rts	
0000567C                            ; ===========================================================================
0000567C                            
0000567C                            loc_52DA:
0000567C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005680 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005684                            
00005684 4278 FE02                  		clr.w	($FFFFFE02).w
00005688 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000568E 4278 F794                  		clr.w	($FFFFF794).w
00005692                            
00005692                            End_AllEmlds:				; XREF: loc_5334
00005692 6100 BF34                  		bsr.w	PauseGame
00005696 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000569C 6100 D5B2                  		bsr.w	DelayProgram
000056A0 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000056A4 6100 0000                  		bsr.w	End_MoveSonic
000056A8 4EB9 0000 0000             		jsr	ObjectsLoad
000056AE 6100 0000                  		bsr.w	DeformBgLayer
000056B2 4EB9 0000 0000             		jsr	BuildSprites
000056B8 4EB9 0000 0000             		jsr	ObjPosLoad
000056BE 6100 EE5A                  		bsr.w	OscillateNumDo
000056C2 6100 EEE6                  		bsr.w	ChangeRingFrame
000056C6 5378 F794                  		subq.w	#1,($FFFFF794).w
000056CA 6A00                       		bpl.s	loc_5334
000056CC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000056D2 6100 CAE8                  		bsr.w	Pal_ToWhite
000056D6                            
000056D6                            loc_5334:
000056D6 4A78 FE02                  		tst.w	($FFFFFE02).w
000056DA 6700 FFB6                  		beq.w	End_AllEmlds
000056DE 4278 FE02                  		clr.w	($FFFFFE02).w
000056E2 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000056E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000056EE 4DF9 00C0 0000             		lea	($C00000).l,a6
000056F4 47F8 F700                  		lea	($FFFFF700).w,a3
000056F8 49F8 A400                  		lea	($FFFFA400).w,a4
000056FC 343C 4000                  		move.w	#$4000,d2
00005700 6100 0000                  		bsr.w	LoadTilesFromStart2
00005704 7013                       		moveq	#$13,d0
00005706 6100 CC14                  		bsr.w	PalLoad1	; load ending pallet
0000570A 6100 C9E4                  		bsr.w	Pal_MakeWhite
0000570E 6000 FF16                  		bra.w	End_MainLoop
00005712                            
00005712                            ; ---------------------------------------------------------------------------
00005712                            ; Subroutine controlling Sonic on the ending sequence
00005712                            ; ---------------------------------------------------------------------------
00005712                            
00005712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005712                            
00005712                            
00005712                            End_MoveSonic:				; XREF: End_MainLoop
00005712 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005716 6600                       		bne.s	End_MoveSonic2
00005718 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
0000571E 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005720 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005724 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000572A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005730 4E75                       		rts	
00005732                            ; ===========================================================================
00005732                            
00005732                            End_MoveSonic2:				; XREF: End_MoveSonic
00005732 5500                       		subq.b	#2,d0
00005734 6600                       		bne.s	End_MoveSonic3
00005736 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000573C 6500                       		bcs.s	End_MoveSonExit	; if not, branch
0000573E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005742 7000                       		moveq	#0,d0
00005744 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005748 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000574C 31C0 D014                  		move.w	d0,($FFFFD014).w
00005750 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005756 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
0000575C 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005762 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005768 4E75                       		rts	
0000576A                            ; ===========================================================================
0000576A                            
0000576A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000576A 5500                       		subq.b	#2,d0
0000576C 6600                       		bne.s	End_MoveSonExit
0000576E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005772 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005778 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000577E 4278 D024                  		clr.w	($FFFFD024).w
00005782                            
00005782                            End_MoveSonExit:
00005782 4E75                       		rts	
00005784                            ; End of function End_MoveSonic
00005784                            
00005784                            ; ===========================================================================
00005784                            ; ---------------------------------------------------------------------------
00005784                            ; Object 87 - Sonic on ending sequence
00005784                            ; ---------------------------------------------------------------------------
00005784                            
00005784                            Obj87:					; XREF: Obj_Index
00005784 7000                       		moveq	#0,d0
00005786 1028 0025                  		move.b	$25(a0),d0
0000578A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000578E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005792 4EF9 0000 0000             		jmp	DisplaySprite
00005798                            ; ===========================================================================
00005798 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000579C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000057A0 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000057A4 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000057A8 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000057AC                            ; ===========================================================================
000057AC                            
000057AC                            Obj87_Main:				; XREF: Obj87_Index
000057AC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057B2 6700                       		beq.s	Obj87_Main2	; if yes, branch
000057B4 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000057BA 317C 00D8 0030             		move.w	#$D8,$30(a0)
000057C0 4E75                       		rts	
000057C2                            ; ===========================================================================
000057C2                            
000057C2                            Obj87_Main2:				; XREF: Obj87_Main
000057C2 5428 0025                  		addq.b	#2,$25(a0)
000057C6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000057CE 317C 03E1 0002             		move.w	#$3E1,2(a0)
000057D4 117C 0004 0001             		move.b	#4,1(a0)
000057DA 4228 0022                  		clr.b	$22(a0)
000057DE 117C 0002 0018             		move.b	#2,$18(a0)
000057E4 117C 0000 001A             		move.b	#0,$1A(a0)
000057EA 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000057F0                            
000057F0                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000057F4 6600                       		bne.s	Obj87_Wait
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 0001 001C             		move.w	#1,$1C(a0)
00005800 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005806                            
00005806                            Obj87_Wait:
00005806 4E75                       		rts	
00005808                            ; ===========================================================================
00005808                            
00005808                            Obj87_LookUp:				; XREF: Obj87_Index
00005808 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005810 6600                       		bne.s	locret_5480
00005812 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005818 317C 005A 0030             		move.w	#$5A,$30(a0)
0000581E 5428 0025                  		addq.b	#2,$25(a0)
00005822                            
00005822                            locret_5480:
00005822 4E75                       		rts	
00005824                            ; ===========================================================================
00005824                            
00005824                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005824 5368 0030                  		subq.w	#1,$30(a0)
00005828 6600                       		bne.s	Obj87_Wait2
0000582A 43F8 D400                  		lea	($FFFFD400).w,a1
0000582E 323C 00FF                  		move.w	#$FF,d1
00005832                            
00005832                            Obj87_ClrLoop:
00005832 4299                       		clr.l	(a1)+
00005834 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005838 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
0000583E 5428 0025                  		addq.b	#2,$25(a0)
00005842 117C 0001 001C             		move.b	#1,$1C(a0)
00005848 317C 003C 0030             		move.w	#$3C,$30(a0)
0000584E                            
0000584E                            Obj87_Wait2:
0000584E 4E75                       		rts	
00005850                            ; ===========================================================================
00005850                            
00005850                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005850 5368 0030                  		subq.w	#1,$30(a0)
00005854 6600                       		bne.s	Obj87_Wait3
00005856 5428 0025                  		addq.b	#2,$25(a0)
0000585A 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005860 117C 0002 001C             		move.b	#2,$1C(a0)
00005866 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000586C                            
0000586C                            Obj87_Wait3:
0000586C 4E75                       		rts	
0000586E                            ; ===========================================================================
0000586E                            
0000586E                            Obj87_Animate:				; XREF: Obj87_Index
0000586E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005874 4EF9 0000 0000             		jmp	AnimateSprite
0000587A                            ; ===========================================================================
0000587A                            
0000587A                            Obj87_Leap:				; XREF: Obj87_Index
0000587A 5368 0030                  		subq.w	#1,$30(a0)
0000587E 6600                       		bne.s	Obj87_Wait4
00005880 5428 0025                  		addq.b	#2,$25(a0)
00005884 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000588C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005892 117C 0004 0001             		move.b	#4,1(a0)
00005898 4228 0022                  		clr.b	$22(a0)
0000589C 117C 0002 0018             		move.b	#2,$18(a0)
000058A2 117C 0005 001A             		move.b	#5,$1A(a0)
000058A8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000058AE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000058B4 60B8                       		bra.s	Obj87_Animate
000058B6                            ; ===========================================================================
000058B6                            
000058B6                            Obj87_Wait4:				; XREF: Obj87_Leap
000058B6 4E75                       		rts	
000058B8                            ; ===========================================================================
000058B8                            Ani_obj87:
000058B8                            	include "_anim\obj87.asm"
000058B8                            ; ---------------------------------------------------------------------------
000058B8                            ; Animation script - Sonic on the ending sequence
000058B8                            ; ---------------------------------------------------------------------------
000058B8 0000                       		dc.w byte_551C-Ani_obj87
000058BA 0000                       		dc.w byte_552A-Ani_obj87
000058BC 0000                       		dc.w byte_5534-Ani_obj87
000058BE 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000058CC 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000058D6 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000058DE                            		even
000058DE                            		even
000058DE                            
000058DE                            ; ===========================================================================
000058DE                            ; ---------------------------------------------------------------------------
000058DE                            ; Object 88 - chaos emeralds on	the ending sequence
000058DE                            ; ---------------------------------------------------------------------------
000058DE                            
000058DE                            Obj88:					; XREF: Obj_Index
000058DE 7000                       		moveq	#0,d0
000058E0 1028 0024                  		move.b	$24(a0),d0
000058E4 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000058E8 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000058EC 4EF9 0000 0000             		jmp	DisplaySprite
000058F2                            ; ===========================================================================
000058F2 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000058F4 0000                       		dc.w Obj88_Move-Obj88_Index
000058F6                            ; ===========================================================================
000058F6                            
000058F6                            Obj88_Main:				; XREF: Obj88_Index
000058F6 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000058FC 6700                       		beq.s	Obj88_Main2
000058FE 588F                       		addq.l	#4,sp
00005900 4E75                       		rts	
00005902                            ; ===========================================================================
00005902                            
00005902                            Obj88_Main2:				; XREF: Obj88_Main
00005902 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005908 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000590E 2248                       		movea.l	a0,a1
00005910 7600                       		moveq	#0,d3
00005912 7401                       		moveq	#1,d2
00005914 7205                       		moveq	#5,d1
00005916                            
00005916                            Obj88_MainLoop:
00005916 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000591A 5429 0024                  		addq.b	#2,$24(a1)
0000591E 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005926 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000592C 137C 0004 0001             		move.b	#4,1(a1)
00005932 137C 0001 0018             		move.b	#1,$18(a1)
00005938 3368 0008 0038             		move.w	8(a0),$38(a1)
0000593E 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005944 1342 001C                  		move.b	d2,$1C(a1)
00005948 1342 001A                  		move.b	d2,$1A(a1)
0000594C 5202                       		addq.b	#1,d2
0000594E 1343 0026                  		move.b	d3,$26(a1)
00005952 0603 002A                  		addi.b	#$2A,d3
00005956 43E9 0040                  		lea	$40(a1),a1
0000595A 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000595E                            
0000595E                            Obj88_Move:				; XREF: Obj88_Index
0000595E 3028 003E                  		move.w	$3E(a0),d0
00005962 D168 0026                  		add.w	d0,$26(a0)
00005966 1028 0026                  		move.b	$26(a0),d0
0000596A 4EB9 0000 2C82             		jsr	(CalcSine).l
00005970 7800                       		moveq	#0,d4
00005972 1828 003C                  		move.b	$3C(a0),d4
00005976 C3C4                       		muls.w	d4,d1
00005978 E081                       		asr.l	#8,d1
0000597A C1C4                       		muls.w	d4,d0
0000597C E080                       		asr.l	#8,d0
0000597E D268 0038                  		add.w	$38(a0),d1
00005982 D068 003A                  		add.w	$3A(a0),d0
00005986 3141 0008                  		move.w	d1,8(a0)
0000598A 3140 000C                  		move.w	d0,$C(a0)
0000598E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005994 6700                       		beq.s	loc_55FA
00005996 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000599C                            
0000599C                            loc_55FA:
0000599C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000059A2 6700                       		beq.s	loc_5608
000059A4 0668 0020 003E             		addi.w	#$20,$3E(a0)
000059AA                            
000059AA                            loc_5608:
000059AA 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000059B0 6700                       		beq.s	locret_5614
000059B2 5368 003A                  		subq.w	#1,$3A(a0)
000059B6                            
000059B6                            locret_5614:
000059B6 4E75                       		rts	
000059B8                            ; ===========================================================================
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000059B8                            ; ---------------------------------------------------------------------------
000059B8                            
000059B8                            Obj89:					; XREF: Obj_Index
000059B8 7000                       		moveq	#0,d0
000059BA 1028 0024                  		move.b	$24(a0),d0
000059BE 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000059C2 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000059C6                            ; ===========================================================================
000059C6 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000059C8 0000                       		dc.w Obj89_Move-Obj89_Index
000059CA 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000059CC                            ; ===========================================================================
000059CC                            
000059CC                            Obj89_Main:				; XREF: Obj89_Index
000059CC 5428 0024                  		addq.b	#2,$24(a0)
000059D0 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000059D6 317C 00D8 000A             		move.w	#$D8,$A(a0)
000059DC 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
000059E4 317C 05C5 0002             		move.w	#$5C5,2(a0)
000059EA 117C 0000 0001             		move.b	#0,1(a0)
000059F0 117C 0000 0018             		move.b	#0,$18(a0)
000059F6                            
000059F6                            Obj89_Move:				; XREF: Obj89_Index
000059F6 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000059FC 6700                       		beq.s	Obj89_Delay	; if yes, branch
000059FE 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005A04 4EB9 0000 0000             		jsr	DisplaySprite
00005A0A                            ; ===========================================================================
00005A0A                            
00005A0A                            Obj89_Delay:				; XREF: Obj89_Move
00005A0A 5428 0024                  		addq.b	#2,$24(a0)
00005A0E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005A14                            
00005A14                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005A14 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A18 6A00                       		bpl.s	Obj89_Display
00005A1A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005A20                            
00005A20                            Obj89_Display:
00005A20 4EB9 0000 0000             		jsr	DisplaySprite
00005A26                            ; ===========================================================================
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            ; Sprite mappings - Sonic on the ending	sequence
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            Map_obj87:
00005A26                            	include "_maps\obj87.asm"
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            ; Sprite mappings - Sonic on the ending	sequence
00005A26                            ; ---------------------------------------------------------------------------
00005A26 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005A2A 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005A2E 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005A32 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005A36 02                         byte_5690:	dc.b 2
00005A37 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005A3C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A41 03                         byte_569B:	dc.b 3
00005A42 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005A47 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005A4C 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A51 02                         byte_56AB:	dc.b 2
00005A52 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005A57 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005A5C 02                         byte_56B6:	dc.b 2
00005A5D EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A62 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A67 02                         byte_56C1:	dc.b 2
00005A68 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A6D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A72 03                         byte_56CC:	dc.b 3
00005A73 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A78 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A7D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A82 07                         byte_56DC:	dc.b 7
00005A83 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A88 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A8D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A92 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A97 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A9C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005AA1 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005AA6 18                         byte_5700:	dc.b $18
00005AA7 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005AAC 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005AB1 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005AB6 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005ABB A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005AC0 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005AC5 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005ACA A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005ACF B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005AD4 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005AD9 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005ADE C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005AE3 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005AE8 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005AED B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005AF2 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005AF7 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005AFC D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005B01 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005B06 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005B0B D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005B10 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005B15 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005B1A F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005B20 00                         		even
00005B20 00                         		even
00005B20                            
00005B20                            ; ---------------------------------------------------------------------------
00005B20                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B20                            ; ---------------------------------------------------------------------------
00005B20                            Map_obj88:
00005B20                            	include "_maps\obj88.asm"
00005B20                            ; ---------------------------------------------------------------------------
00005B20                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B20                            ; ---------------------------------------------------------------------------
00005B20 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005B24 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005B28 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005B2C 0000                       		dc.w byte_57AC-Map_obj88
00005B2E 01                         byte_5788:	dc.b 1
00005B2F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005B34 01                         byte_578E:	dc.b 1
00005B35 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005B3A 01                         byte_5794:	dc.b 1
00005B3B F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005B40 01                         byte_579A:	dc.b 1
00005B41 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005B46 01                         byte_57A0:	dc.b 1
00005B47 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005B4C 01                         byte_57A6:	dc.b 1
00005B4D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005B52 01                         byte_57AC:	dc.b 1
00005B53 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005B58                            		even
00005B58                            		even
00005B58                            
00005B58                            ; ---------------------------------------------------------------------------
00005B58                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B58                            ; ---------------------------------------------------------------------------
00005B58                            Map_obj89:
00005B58                            	include "_maps\obj89.asm"
00005B58                            ; ---------------------------------------------------------------------------
00005B58                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B58                            ; ---------------------------------------------------------------------------
00005B58 0000                       		dc.w byte_57B4-Map_obj89
00005B5A 03                         byte_57B4:	dc.b 3
00005B5B F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B60 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B65 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B6A                            		even
00005B6A                            		even
00005B6A                            
00005B6A                            ; ===========================================================================
00005B6A                            ; ---------------------------------------------------------------------------
00005B6A                            ; Credits ending sequence
00005B6A                            ; ---------------------------------------------------------------------------
00005B6A                            
00005B6A                            Credits:				; XREF: GameModeArray
00005B6A 6100 BC92                  		bsr.w	ClearPLC
00005B6E 6100 C502                  		bsr.w	Pal_FadeFrom
00005B72 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B78 3CBC 8004                  		move.w	#$8004,(a6)
00005B7C 3CBC 8230                  		move.w	#$8230,(a6)
00005B80 3CBC 8407                  		move.w	#$8407,(a6)
00005B84 3CBC 9001                  		move.w	#$9001,(a6)
00005B88 3CBC 9200                  		move.w	#$9200,(a6)
00005B8C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B90 3CBC 8720                  		move.w	#$8720,(a6)
00005B94 4238 F64E                  		clr.b	($FFFFF64E).w
00005B98 6100 B94A                  		bsr.w	ClearScreen
00005B9C 43F8 D000                  		lea	($FFFFD000).w,a1
00005BA0 7000                       		moveq	#0,d0
00005BA2 323C 07FF                  		move.w	#$7FF,d1
00005BA6                            
00005BA6                            Cred_ClrObjRam:
00005BA6 22C0                       		move.l	d0,(a1)+
00005BA8 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005BAC                            
00005BAC 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005BB6 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005BBC 6100 BAA2                  		bsr.w	NemDec
00005BC0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005BC4 7000                       		moveq	#0,d0
00005BC6 323C 001F                  		move.w	#$1F,d1
00005BCA                            
00005BCA                            Cred_ClrPallet:
00005BCA 22C0                       		move.l	d0,(a1)+
00005BCC 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005BD0                            
00005BD0 7003                       		moveq	#3,d0
00005BD2 6100 C748                  		bsr.w	PalLoad1	; load Sonic's pallet
00005BD6 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005BDC 4EB9 0000 0000             		jsr	ObjectsLoad
00005BE2 4EB9 0000 0000             		jsr	BuildSprites
00005BE8 6100 0000                  		bsr.w	EndingDemoLoad
00005BEC 7000                       		moveq	#0,d0
00005BEE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005BF2 E948                       		lsl.w	#4,d0
00005BF4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005BFA 45F2 0000                  		lea	(a2,d0.w),a2
00005BFE 7000                       		moveq	#0,d0
00005C00 1012                       		move.b	(a2),d0
00005C02 6700                       		beq.s	loc_5862
00005C04 6100 BB9A                  		bsr.w	LoadPLC		; load level patterns
00005C08                            
00005C08                            loc_5862:
00005C08 7001                       		moveq	#1,d0
00005C0A 6100 BB94                  		bsr.w	LoadPLC		; load standard	level patterns
00005C0E 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005C14 6100 C3B6                  		bsr.w	Pal_FadeTo
00005C18                            
00005C18                            Cred_WaitLoop:
00005C18 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005C1E 6100 D030                  		bsr.w	DelayProgram
00005C22 6100 BBE8                  		bsr.w	RunPLC_RAM
00005C26 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005C2A 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005C2C 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005C30 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005C32 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005C38 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005C3C 4E75                       		rts	
00005C3E                            
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Ending sequence demo loading subroutine
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            
00005C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C3E                            
00005C3E                            
00005C3E                            EndingDemoLoad:				; XREF: Credits
00005C3E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005C42 0240 000F                  		andi.w	#$F,d0
00005C46 D040                       		add.w	d0,d0
00005C48 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005C4C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005C50 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005C54 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005C5A 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005C5C 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C62 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C68 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C6E 7000                       		moveq	#0,d0
00005C70 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C74 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C78 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C7C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C80 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C86 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C88 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C8E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C92 303C 0008                  		move.w	#8,d0
00005C96                            
00005C96                            EndDemo_LampLoad:
00005C96 24D9                       		move.l	(a1)+,(a2)+
00005C98 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C9C                            
00005C9C                            EndDemo_Exit:
00005C9C 4E75                       		rts	
00005C9E                            ; End of function EndingDemoLoad
00005C9E                            
00005C9E                            ; ===========================================================================
00005C9E                            ; ---------------------------------------------------------------------------
00005C9E                            ; Levels used in the end sequence demos
00005C9E                            ; ---------------------------------------------------------------------------
00005C9E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005CAE                            
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            EndDemo_LampVar:
00005CAE 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005CB0 0A00 062C 000D             		dc.w $A00, $62C, $D
00005CB6 0000 0000                  		dc.l 0
00005CBA 0000                       		dc.b 0,	0
00005CBC 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005CD0 0101                       		dc.b 1,	1
00005CD2                            ; ===========================================================================
00005CD2                            ; ---------------------------------------------------------------------------
00005CD2                            ; "TRY AGAIN" and "END"	screens
00005CD2                            ; ---------------------------------------------------------------------------
00005CD2                            
00005CD2                            TryAgainEnd:				; XREF: Credits
00005CD2 6100 BB2A                  		bsr.w	ClearPLC
00005CD6 6100 C39A                  		bsr.w	Pal_FadeFrom
00005CDA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CE0 3CBC 8004                  		move.w	#$8004,(a6)
00005CE4 3CBC 8230                  		move.w	#$8230,(a6)
00005CE8 3CBC 8407                  		move.w	#$8407,(a6)
00005CEC 3CBC 9001                  		move.w	#$9001,(a6)
00005CF0 3CBC 9200                  		move.w	#$9200,(a6)
00005CF4 3CBC 8B03                  		move.w	#$8B03,(a6)
00005CF8 3CBC 8720                  		move.w	#$8720,(a6)
00005CFC 4238 F64E                  		clr.b	($FFFFF64E).w
00005D00 6100 B7E2                  		bsr.w	ClearScreen
00005D04 43F8 D000                  		lea	($FFFFD000).w,a1
00005D08 7000                       		moveq	#0,d0
00005D0A 323C 07FF                  		move.w	#$7FF,d1
00005D0E                            
00005D0E                            TryAg_ClrObjRam:
00005D0E 22C0                       		move.l	d0,(a1)+
00005D10 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005D14                            
00005D14 701D                       		moveq	#$1D,d0
00005D16 6100 BBF4                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005D1A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D1E 7000                       		moveq	#0,d0
00005D20 323C 001F                  		move.w	#$1F,d1
00005D24                            
00005D24                            TryAg_ClrPallet:
00005D24 22C0                       		move.l	d0,(a1)+
00005D26 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005D2A                            
00005D2A 7013                       		moveq	#$13,d0
00005D2C 6100 C5EE                  		bsr.w	PalLoad1	; load ending pallet
00005D30 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005D34 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005D3A 4EB9 0000 0000             		jsr	ObjectsLoad
00005D40 4EB9 0000 0000             		jsr	BuildSprites
00005D46 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005D4C 6100 C27E                  		bsr.w	Pal_FadeTo
00005D50                            
00005D50                            ; ---------------------------------------------------------------------------
00005D50                            ; "TRY AGAIN" and "END"	screen main loop
00005D50                            ; ---------------------------------------------------------------------------
00005D50                            TryAg_MainLoop:
00005D50 6100 B876                  		bsr.w	PauseGame
00005D54 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D5A 6100 CEF4                  		bsr.w	DelayProgram
00005D5E 4EB9 0000 0000             		jsr	ObjectsLoad
00005D64 4EB9 0000 0000             		jsr	BuildSprites
00005D6A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D70 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D72 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D76 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D78 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D7E 67D0                       		beq.s	TryAg_MainLoop
00005D80                            
00005D80                            TryAg_Exit:
00005D80 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D86 4E75                       		rts	
00005D88                            
00005D88                            ; ===========================================================================
00005D88                            ; ---------------------------------------------------------------------------
00005D88                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D88                            ; ---------------------------------------------------------------------------
00005D88                            
00005D88                            Obj8B:					; XREF: Obj_Index
00005D88 7000                       		moveq	#0,d0
00005D8A 1028 0024                  		move.b	$24(a0),d0
00005D8E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D92 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D96 4EF9 0000 0000             		jmp	DisplaySprite
00005D9C                            ; ===========================================================================
00005D9C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D9E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005DA0 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005DA2 0000                       		dc.w loc_5A8E-Obj8B_Index
00005DA4                            ; ===========================================================================
00005DA4                            
00005DA4                            Obj8B_Main:				; XREF: Obj8B_Index
00005DA4 5428 0024                  		addq.b	#2,$24(a0)
00005DA8 317C 0120 0008             		move.w	#$120,8(a0)
00005DAE 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005DB4 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005DBC 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005DC2 117C 0000 0001             		move.b	#0,1(a0)
00005DC8 117C 0002 0018             		move.b	#2,$18(a0)
00005DCE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005DD4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005DDA 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005DDC 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005DE2 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005DE8 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005DEE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005DF4                            
00005DF4                            Obj8B_Animate:				; XREF: Obj8B_Index
00005DF4 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005DFA 4EF9 0000 0000             		jmp	AnimateSprite
00005E00                            ; ===========================================================================
00005E00                            
00005E00                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005E00 5428 0024                  		addq.b	#2,$24(a0)
00005E04 7002                       		moveq	#2,d0
00005E06 0828 0000 001C             		btst	#0,$1C(a0)
00005E0C 6700                       		beq.s	loc_5A6A
00005E0E 4440                       		neg.w	d0
00005E10                            
00005E10                            loc_5A6A:
00005E10 43F8 D800                  		lea	($FFFFD800).w,a1
00005E14 7205                       		moveq	#5,d1
00005E16                            
00005E16                            loc_5A70:
00005E16 1340 003E                  		move.b	d0,$3E(a1)
00005E1A 3400                       		move.w	d0,d2
00005E1C E742                       		asl.w	#3,d2
00005E1E D529 0026                  		add.b	d2,$26(a1)
00005E22 43E9 0040                  		lea	$40(a1),a1
00005E26 51C9 FFEE                  		dbf	d1,loc_5A70
00005E2A 5228 001A                  		addq.b	#1,$1A(a0)
00005E2E 317C 0070 0030             		move.w	#112,$30(a0)
00005E34                            
00005E34                            loc_5A8E:				; XREF: Obj8B_Index
00005E34 5368 0030                  		subq.w	#1,$30(a0)
00005E38 6A00                       		bpl.s	locret_5AA0
00005E3A 0868 0000 001C             		bchg	#0,$1C(a0)
00005E40 117C 0002 0024             		move.b	#2,$24(a0)
00005E46                            
00005E46                            locret_5AA0:
00005E46 4E75                       		rts	
00005E48                            ; ===========================================================================
00005E48                            Ani_obj8B:
00005E48                            	include "_anim\obj8B.asm"
00005E48                            ; ---------------------------------------------------------------------------
00005E48                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005E48                            ; ---------------------------------------------------------------------------
00005E48 0000                       		dc.w byte_5AA8-Ani_obj8B
00005E4A 0000                       		dc.w byte_5AAC-Ani_obj8B
00005E4C 0000                       		dc.w byte_5AB0-Ani_obj8B
00005E4E 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005E52 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005E56 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E68                            		even
00005E68                            		even
00005E68                            
00005E68                            ; ===========================================================================
00005E68                            ; ---------------------------------------------------------------------------
00005E68                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E68                            ; ---------------------------------------------------------------------------
00005E68                            
00005E68                            Obj8C:					; XREF: Obj_Index
00005E68 7000                       		moveq	#0,d0
00005E6A 1028 0024                  		move.b	$24(a0),d0
00005E6E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E72 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E76 4EF9 0000 0000             		jmp	DisplaySprite
00005E7C                            ; ===========================================================================
00005E7C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E7E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E80                            ; ===========================================================================
00005E80                            
00005E80                            Obj8C_Main:				; XREF: Obj8C_Index
00005E80 2248                       		movea.l	a0,a1
00005E82 7400                       		moveq	#0,d2
00005E84 7600                       		moveq	#0,d3
00005E86 7205                       		moveq	#5,d1
00005E88 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E8C                            
00005E8C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E8C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E90 5429 0024                  		addq.b	#2,$24(a1)
00005E94 237C 0000 5B20 0004        		move.l	#Map_obj88,4(a1)
00005E9C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005EA2 137C 0000 0001             		move.b	#0,1(a1)
00005EA8 137C 0001 0018             		move.b	#1,$18(a1)
00005EAE 337C 0104 0008             		move.w	#$104,8(a1)
00005EB4 337C 0120 0038             		move.w	#$120,$38(a1)
00005EBA 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005EC0 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005EC6 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005ECC 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005ED0                            
00005ED0                            Obj8C_ChkEms:
00005ED0 7000                       		moveq	#0,d0
00005ED2 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005ED6 5340                       		subq.w	#1,d0
00005ED8 6500                       		bcs.s	loc_5B42
00005EDA                            
00005EDA                            Obj8C_ChkEmLoop:
00005EDA B433 0000                  		cmp.b	(a3,d0.w),d2
00005EDE 6600                       		bne.s	loc_5B3E
00005EE0 5202                       		addq.b	#1,d2
00005EE2 60EC                       		bra.s	Obj8C_ChkEms
00005EE4                            ; ===========================================================================
00005EE4                            
00005EE4                            loc_5B3E:
00005EE4 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005EE8                            
00005EE8                            loc_5B42:
00005EE8 1342 001A                  		move.b	d2,$1A(a1)
00005EEC 5229 001A                  		addq.b	#1,$1A(a1)
00005EF0 5202                       		addq.b	#1,d2
00005EF2 137C 0080 0026             		move.b	#$80,$26(a1)
00005EF8 1343 001E                  		move.b	d3,$1E(a1)
00005EFC 1343 001F                  		move.b	d3,$1F(a1)
00005F00 0643 000A                  		addi.w	#$A,d3
00005F04 43E9 0040                  		lea	$40(a1),a1
00005F08 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005F0C                            
00005F0C                            Obj8C_Move:				; XREF: Obj8C_Index
00005F0C 4A68 003E                  		tst.w	$3E(a0)
00005F10 6700                       		beq.s	locret_5BBA
00005F12 4A28 001E                  		tst.b	$1E(a0)
00005F16 6700                       		beq.s	loc_5B78
00005F18 5328 001E                  		subq.b	#1,$1E(a0)
00005F1C 6600                       		bne.s	loc_5B80
00005F1E                            
00005F1E                            loc_5B78:
00005F1E 3028 003E                  		move.w	$3E(a0),d0
00005F22 D168 0026                  		add.w	d0,$26(a0)
00005F26                            
00005F26                            loc_5B80:
00005F26 1028 0026                  		move.b	$26(a0),d0
00005F2A 6700                       		beq.s	loc_5B8C
00005F2C 0C00 0080                  		cmpi.b	#$80,d0
00005F30 6600                       		bne.s	loc_5B96
00005F32                            
00005F32                            loc_5B8C:
00005F32 4268 003E                  		clr.w	$3E(a0)
00005F36 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005F3C                            
00005F3C                            loc_5B96:
00005F3C 4EB9 0000 2C82             		jsr	(CalcSine).l
00005F42 7800                       		moveq	#0,d4
00005F44 1828 003C                  		move.b	$3C(a0),d4
00005F48 C3C4                       		muls.w	d4,d1
00005F4A E081                       		asr.l	#8,d1
00005F4C C1C4                       		muls.w	d4,d0
00005F4E E080                       		asr.l	#8,d0
00005F50 D268 0038                  		add.w	$38(a0),d1
00005F54 D068 003A                  		add.w	$3A(a0),d0
00005F58 3141 0008                  		move.w	d1,8(a0)
00005F5C 3140 000A                  		move.w	d0,$A(a0)
00005F60                            
00005F60                            locret_5BBA:
00005F60 4E75                       		rts	
00005F62                            ; ===========================================================================
00005F62                            ; ---------------------------------------------------------------------------
00005F62                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F62                            ; ---------------------------------------------------------------------------
00005F62                            Map_obj8B:
00005F62                            	include "_maps\obj8B.asm"
00005F62                            ; ---------------------------------------------------------------------------
00005F62                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F62                            ; ---------------------------------------------------------------------------
00005F62 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F66 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F6A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F6E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F72 08                         byte_5BCC:	dc.b 8
00005F73 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F78 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F7D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F82 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F87 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F8C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F91 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F96 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F9B 08                         byte_5BF5:	dc.b 8
00005F9C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005FA1 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005FA6 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005FAB F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005FB0 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FB5 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FBA 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FBF 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FC4 08                         byte_5C1E:	dc.b 8
00005FC5 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005FCA F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005FCF E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005FD4 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005FD9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005FDE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005FE3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FE8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FED 08                         byte_5C47:	dc.b 8
00005FEE E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005FF3 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005FF8 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005FFD F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006002 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006007 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000600C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006011 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006016 0C                         byte_5C70:	dc.b $C
00006017 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
0000601C F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006021 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006026 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000602B ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006030 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006035 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000603A 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
0000603F 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006044 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006049 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000604E 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006053 0A                         byte_5CAD:	dc.b $A
00006054 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006059 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
0000605E F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006063 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006068 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000606D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006072 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006077 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000607C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006081 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006086 0A                         byte_5CE0:	dc.b $A
00006087 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000608C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006091 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006096 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000609B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000060A0 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000060A5 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000060AA 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000060AF 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000060B4 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000060B9 0C                         byte_5D13:	dc.b $C
000060BA F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000060BF FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000060C4 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000060C9 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000060CE F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000060D3 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000060D8 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000060DD 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000060E2 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000060E7 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000060EC 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000060F1 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000060F6                            		even
000060F6                            		even
000060F6                            
000060F6                            ; ---------------------------------------------------------------------------
000060F6                            ; Ending sequence demos
000060F6                            ; ---------------------------------------------------------------------------
000060F6                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006124                            		even
00006124                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006164                            		even
00006164                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006194                            		even
00006194                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000061C4                            		even
000061C4                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000061E4                            		even
000061E4                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006204                            		even
00006204                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006234                            		even
00006234                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006264                            		even
00006264                            
00006264                            ; ---------------------------------------------------------------------------
00006264                            ; Subroutine to	load level boundaries and start	locations
00006264                            ; ---------------------------------------------------------------------------
00006264                            
00006264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006264                            
00006264                            
00006264                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006264 7000                       		moveq	#0,d0
00006266 11C0 F740                  		move.b	d0,($FFFFF740).w
0000626A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000626E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006272 11C0 F748                  		move.b	d0,($FFFFF748).w
00006276 11C0 F742                  		move.b	d0,($FFFFF742).w
0000627A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000627E ED08                       		lsl.b	#6,d0
00006280 E848                       		lsr.w	#4,d0
00006282 3200                       		move.w	d0,d1
00006284 D040                       		add.w	d0,d0
00006286 D041                       		add.w	d1,d0
00006288 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000628C 3018                       		move.w	(a0)+,d0
0000628E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006292 2018                       		move.l	(a0)+,d0
00006294 21C0 F728                  		move.l	d0,($FFFFF728).w
00006298 21C0 F720                  		move.l	d0,($FFFFF720).w
0000629C 2018                       		move.l	(a0)+,d0
0000629E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000062A2 21C0 F724                  		move.l	d0,($FFFFF724).w
000062A6 3038 F728                  		move.w	($FFFFF728).w,d0
000062AA 0640 0240                  		addi.w	#$240,d0
000062AE 31C0 F732                  		move.w	d0,($FFFFF732).w
000062B2 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000062B8 3018                       		move.w	(a0)+,d0
000062BA 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000062BE 6000 0000                  		bra.w	LevSz_ChkLamp
000062C2                            ; ===========================================================================
000062C2                            ; ---------------------------------------------------------------------------
000062C2                            ; Level size array and ending start location array
000062C2                            ; ---------------------------------------------------------------------------
000062C2                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006412                            		even
00006412                            
00006412                            EndingStLocArray:
00006412                            		incbin	misc\sloc_end.bin
00006432                            		even
00006432                            
00006432                            ; ===========================================================================
00006432                            
00006432                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006432 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006436 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006438 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000643E 3238 D008                  		move.w	($FFFFD008).w,d1
00006442 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006446 6000                       		bra.s	loc_60D0
00006448                            ; ===========================================================================
00006448                            
00006448                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006448 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000644C ED08                       		lsl.b	#6,d0
0000644E E848                       		lsr.w	#4,d0
00006450 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006454 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006458 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000645A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000645E 5340                       		subq.w	#1,d0
00006460 E548                       		lsl.w	#2,d0
00006462 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006466                            
00006466                            LevSz_SonicPos:
00006466 7200                       		moveq	#0,d1
00006468 3219                       		move.w	(a1)+,d1
0000646A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000646E 7000                       		moveq	#0,d0
00006470 3011                       		move.w	(a1),d0
00006472 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006476                            
00006476                            loc_60D0:				; XREF: LevSz_ChkLamp
00006476 0441 00A0                  		subi.w	#$A0,d1
0000647A 6400                       		bcc.s	loc_60D8
0000647C 7200                       		moveq	#0,d1
0000647E                            
0000647E                            loc_60D8:
0000647E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006482 B242                       		cmp.w	d2,d1
00006484 6500                       		bcs.s	loc_60E2
00006486 3202                       		move.w	d2,d1
00006488                            
00006488                            loc_60E2:
00006488 31C1 F700                  		move.w	d1,($FFFFF700).w
0000648C 0440 0060                  		subi.w	#$60,d0
00006490 6400                       		bcc.s	loc_60EE
00006492 7000                       		moveq	#0,d0
00006494                            
00006494                            loc_60EE:
00006494 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006498 6D00                       		blt.s	loc_60F8
0000649A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000649E                            
0000649E                            loc_60F8:
0000649E 31C0 F704                  		move.w	d0,($FFFFF704).w
000064A2 6100 0000                  		bsr.w	BgScrollSpeed
000064A6 7000                       		moveq	#0,d0
000064A8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064AC E508                       		lsl.b	#2,d0
000064AE 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000064B4 6000 0000                  		bra.w	LevSz_Unk
000064B8                            ; ===========================================================================
000064B8                            ; ---------------------------------------------------------------------------
000064B8                            ; Sonic	start location array
000064B8                            ; ---------------------------------------------------------------------------
000064B8                            StartLocArray:	incbin	misc\sloc_lev.bin
00006528                            		even
00006528                            
00006528                            ; ---------------------------------------------------------------------------
00006528                            ; Which	256x256	tiles contain loops or roll-tunnels
00006528                            ; ---------------------------------------------------------------------------
00006528                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006528                            ; loop,	loop, tunnel, tunnel
00006528                            ; ---------------------------------------------------------------------------
00006528                            LoopTileNums:	incbin	misc\loopnums.bin
00006544                            		even
00006544                            
00006544                            ; ===========================================================================
00006544                            
00006544                            LevSz_Unk:				; XREF: LevelSizeLoad
00006544 7000                       		moveq	#0,d0
00006546 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000654A E748                       		lsl.w	#3,d0
0000654C 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006550 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006554 24D9                       		move.l	(a1)+,(a2)+
00006556 24D9                       		move.l	(a1)+,(a2)+
00006558 4E75                       		rts	
0000655A                            ; End of function LevelSizeLoad
0000655A                            
0000655A                            ; ===========================================================================
0000655A 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006562 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000656A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006572 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000657A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006582 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000658A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006592                            
00006592                            ; ---------------------------------------------------------------------------
00006592                            ; Subroutine to	set scroll speed of some backgrounds
00006592                            ; ---------------------------------------------------------------------------
00006592                            
00006592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006592                            
00006592                            
00006592                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006592 4A38 FE30                  		tst.b	($FFFFFE30).w
00006596 6600                       		bne.s	loc_6206
00006598 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000659C 31C0 F714                  		move.w	d0,($FFFFF714).w
000065A0 31C1 F708                  		move.w	d1,($FFFFF708).w
000065A4 31C1 F710                  		move.w	d1,($FFFFF710).w
000065A8 31C1 F718                  		move.w	d1,($FFFFF718).w
000065AC                            
000065AC                            loc_6206:
000065AC 7400                       		moveq	#0,d2
000065AE 1438 FE10                  		move.b	($FFFFFE10).w,d2
000065B2 D442                       		add.w	d2,d2
000065B4 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000065B8 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000065BC                            ; End of function BgScrollSpeed
000065BC                            
000065BC                            ; ===========================================================================
000065BC 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000065C0 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000065C4 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000065C8 0000                       		dc.w BgScroll_End-BgScroll_Index
000065CA                            ; ===========================================================================
000065CA                            
000065CA                            BgScroll_GHZ:				; XREF: BgScroll_Index
000065CA 6000 0000                  		bra.w	Deform_GHZ
000065CE                            ; ===========================================================================
000065CE                            
000065CE                            BgScroll_LZ:				; XREF: BgScroll_Index
000065CE E280                       		asr.l	#1,d0
000065D0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065D4 4E75                       		rts	
000065D6                            ; ===========================================================================
000065D6                            
000065D6                            BgScroll_MZ:				; XREF: BgScroll_Index
000065D6 4E75                       		rts	
000065D8                            ; ===========================================================================
000065D8                            
000065D8                            BgScroll_SLZ:				; XREF: BgScroll_Index
000065D8 E280                       		asr.l	#1,d0
000065DA 0640 00C0                  		addi.w	#$C0,d0
000065DE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065E2 4E75                       		rts	
000065E4                            ; ===========================================================================
000065E4                            
000065E4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000065E4 E980                       		asl.l	#4,d0
000065E6 2400                       		move.l	d0,d2
000065E8 E380                       		asl.l	#1,d0
000065EA D082                       		add.l	d2,d0
000065EC E080                       		asr.l	#8,d0
000065EE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065F2 31C0 F714                  		move.w	d0,($FFFFF714).w
000065F6 4E75                       		rts	
000065F8                            ; ===========================================================================
000065F8                            
000065F8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000065F8 E980                       		asl.l	#4,d0
000065FA E380                       		asl.l	#1,d0
000065FC E080                       		asr.l	#8,d0
000065FE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006602 4E75                       		rts	
00006604                            ; ===========================================================================
00006604                            
00006604                            BgScroll_End:				; XREF: BgScroll_Index
00006604 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000660A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006610 4E75                       		rts	
00006612                            ; ===========================================================================
00006612 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006618 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000661E 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006624 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000662A 4E75                       		rts
0000662C                            
0000662C                            ; ---------------------------------------------------------------------------
0000662C                            ; Background layer deformation subroutines
0000662C                            ; ---------------------------------------------------------------------------
0000662C                            
0000662C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000662C                            
0000662C                            
0000662C                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000662C 4A38 F744                  		tst.b	($FFFFF744).w
00006630 6700                       		beq.s	loc_628E
00006632 4E75                       		rts	
00006634                            ; ===========================================================================
00006634                            
00006634                            loc_628E:
00006634 4278 F754                  		clr.w	($FFFFF754).w
00006638 4278 F756                  		clr.w	($FFFFF756).w
0000663C 4278 F758                  		clr.w	($FFFFF758).w
00006640 4278 F75A                  		clr.w	($FFFFF75A).w
00006644 6100 0000                  		bsr.w	ScrollHoriz
00006648 6100 0000                  		bsr.w	ScrollVertical
0000664C 6100 0000                  		bsr.w	DynScrResizeLoad
00006650 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006656 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000665C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006662 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006668 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000666E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006674 7000                       		moveq	#0,d0
00006676 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000667A D040                       		add.w	d0,d0
0000667C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006680 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006684                            ; End of function DeformBgLayer
00006684                            
00006684                            ; ===========================================================================
00006684                            ; ---------------------------------------------------------------------------
00006684                            ; Offset index for background layer deformation	code
00006684                            ; ---------------------------------------------------------------------------
00006684 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006688 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000668C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006690 0000                       		dc.w Deform_GHZ-Deform_Index
00006692                            ; ---------------------------------------------------------------------------
00006692                            ; Green	Hill Zone background layer deformation code
00006692                            ; ---------------------------------------------------------------------------
00006692                            
00006692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006692                            
00006692                            
00006692                            Deform_GHZ:				; XREF: Deform_Index
00006692 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006696 48C4                       		ext.l	d4
00006698 EB84                       		asl.l	#5,d4
0000669A 2204                       		move.l	d4,d1
0000669C E384                       		asl.l	#1,d4
0000669E D881                       		add.l	d1,d4
000066A0 7A00                       		moveq	#0,d5
000066A2 6100 0000                  		bsr.w	ScrollBlock1
000066A6 6100 0000                  		bsr.w	ScrollBlock4
000066AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066AE 3038 F704                  		move.w	($FFFFF704).w,d0
000066B2 0240 07FF                  		andi.w	#$7FF,d0
000066B6 EA48                       		lsr.w	#5,d0
000066B8 4440                       		neg.w	d0
000066BA 0640 0026                  		addi.w	#$26,d0
000066BE 31C0 F714                  		move.w	d0,($FFFFF714).w
000066C2 3800                       		move.w	d0,d4
000066C4 6100 0000                  		bsr.w	ScrollBlock3
000066C8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066CE 323C 006F                  		move.w	#$6F,d1
000066D2 9244                       		sub.w	d4,d1
000066D4 3038 F700                  		move.w	($FFFFF700).w,d0
000066D8 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000066DE 6600                       		bne.s	loc_633C
000066E0 7000                       		moveq	#0,d0
000066E2                            
000066E2                            loc_633C:
000066E2 4440                       		neg.w	d0
000066E4 4840                       		swap	d0
000066E6 3038 F708                  		move.w	($FFFFF708).w,d0
000066EA 4440                       		neg.w	d0
000066EC                            
000066EC                            loc_6346:
000066EC 22C0                       		move.l	d0,(a1)+
000066EE 51C9 FFFC                  		dbf	d1,loc_6346
000066F2 323C 0027                  		move.w	#$27,d1
000066F6 3038 F710                  		move.w	($FFFFF710).w,d0
000066FA 4440                       		neg.w	d0
000066FC                            
000066FC                            loc_6356:
000066FC 22C0                       		move.l	d0,(a1)+
000066FE 51C9 FFFC                  		dbf	d1,loc_6356
00006702 3038 F710                  		move.w	($FFFFF710).w,d0
00006706 0640 0000                  		addi.w	#0,d0
0000670A 3438 F700                  		move.w	($FFFFF700).w,d2
0000670E 0642 FE00                  		addi.w	#-$200,d2
00006712 9440                       		sub.w	d0,d2
00006714 48C2                       		ext.l	d2
00006716 E182                       		asl.l	#8,d2
00006718 85FC 0068                  		divs.w	#$68,d2
0000671C 48C2                       		ext.l	d2
0000671E E182                       		asl.l	#8,d2
00006720 7600                       		moveq	#0,d3
00006722 3600                       		move.w	d0,d3
00006724 323C 0047                  		move.w	#$47,d1
00006728 D244                       		add.w	d4,d1
0000672A                            
0000672A                            loc_6384:
0000672A 3003                       		move.w	d3,d0
0000672C 4440                       		neg.w	d0
0000672E 22C0                       		move.l	d0,(a1)+
00006730 4843                       		swap	d3
00006732 D682                       		add.l	d2,d3
00006734 4843                       		swap	d3
00006736 51C9 FFF2                  		dbf	d1,loc_6384
0000673A 4E75                       		rts	
0000673C                            ; End of function Deform_GHZ
0000673C                            
0000673C                            ; ---------------------------------------------------------------------------
0000673C                            ; Labyrinth Zone background layer deformation code
0000673C                            ; ---------------------------------------------------------------------------
0000673C                            
0000673C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000673C                            
0000673C                            
0000673C                            Deform_LZ:				; XREF: Deform_Index
0000673C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006740 48C4                       		ext.l	d4
00006742 EF84                       		asl.l	#7,d4
00006744 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006748 48C5                       		ext.l	d5
0000674A EF85                       		asl.l	#7,d5
0000674C 6100 0000                  		bsr.w	ScrollBlock1
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_63C6:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_63C6
00006772 3038 F646                  		move.w	($FFFFF646).w,d0
00006776 9078 F704                  		sub.w	($FFFFF704).w,d0
0000677A 4E75                       		rts	
0000677C                            ; End of function Deform_LZ
0000677C                            
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            ; Marble Zone background layer deformation code
0000677C                            ; ---------------------------------------------------------------------------
0000677C                            
0000677C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000677C                            
0000677C                            
0000677C                            Deform_MZ:				; XREF: Deform_Index
0000677C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006780 48C4                       		ext.l	d4
00006782 ED84                       		asl.l	#6,d4
00006784 2204                       		move.l	d4,d1
00006786 E384                       		asl.l	#1,d4
00006788 D881                       		add.l	d1,d4
0000678A 7A00                       		moveq	#0,d5
0000678C 6100 0000                  		bsr.w	ScrollBlock1
00006790 303C 0200                  		move.w	#$200,d0
00006794 3238 F704                  		move.w	($FFFFF704).w,d1
00006798 0441 01C8                  		subi.w	#$1C8,d1
0000679C 6500                       		bcs.s	loc_6402
0000679E 3401                       		move.w	d1,d2
000067A0 D241                       		add.w	d1,d1
000067A2 D242                       		add.w	d2,d1
000067A4 E441                       		asr.w	#2,d1
000067A6 D041                       		add.w	d1,d0
000067A8                            
000067A8                            loc_6402:
000067A8 31C0 F714                  		move.w	d0,($FFFFF714).w
000067AC 6100 0000                  		bsr.w	ScrollBlock3
000067B0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067B6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067BA 323C 00DF                  		move.w	#$DF,d1
000067BE 3038 F700                  		move.w	($FFFFF700).w,d0
000067C2 4440                       		neg.w	d0
000067C4 4840                       		swap	d0
000067C6 3038 F708                  		move.w	($FFFFF708).w,d0
000067CA 4440                       		neg.w	d0
000067CC                            
000067CC                            loc_6426:
000067CC 22C0                       		move.l	d0,(a1)+
000067CE 51C9 FFFC                  		dbf	d1,loc_6426
000067D2 4E75                       		rts	
000067D4                            ; End of function Deform_MZ
000067D4                            
000067D4                            ; ---------------------------------------------------------------------------
000067D4                            ; Star Light Zone background layer deformation code
000067D4                            ; ---------------------------------------------------------------------------
000067D4                            
000067D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067D4                            
000067D4                            
000067D4                            Deform_SLZ:				; XREF: Deform_Index
000067D4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067D8 48C4                       		ext.l	d4
000067DA EB84                       		asl.l	#5,d4
000067DC 2204                       		move.l	d4,d1
000067DE E384                       		asl.l	#1,d4
000067E0 D881                       		add.l	d1,d4
000067E2 7A00                       		moveq	#0,d5
000067E4 6100 0000                  		bsr.w	ScrollBlock1
000067E8 6100 0000                  		bsr.w	ScrollBlock3
000067EC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067F0                            	;	move.w	($FFFFF704).w,d0
000067F0                            	;	andi.w	#$7FF,d0
000067F0 EA48                       		lsr.w	#5,d0
000067F2 4440                       		neg.w	d0
000067F4 0640 0026                  		addi.w	#$26,d0
000067F8 31C0 F714                  		move.w	d0,($FFFFF714).w
000067FC 3800                       		move.w	d0,d4
000067FE                            	;	bsr.w	ScrollBlock3
000067FE 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006804 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006808                            
00006808 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000680C 4440                       		neg.w	d0			; negate (positive to negative)
0000680E 4840                       		swap	d0			; send to the left side of d0
00006810 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006814 45F8 A800                  		lea	($FFFFA800).w,a2
00006818 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006824 3038 A800                  		move.w	($FFFFA800).w,d0
00006828 4440                       		neg.w	d0			; negate (positive to negative)
0000682A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000682C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006830                            slz_DeformLoop_1:
00006830 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006832 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006836                            
00006836 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000683A 4440                       		neg.w	d0			; negate (positive to negative)
0000683C 4840                       		swap	d0			; send to the left side of d0
0000683E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006842 45F8 A800                  		lea	($FFFFA800).w,a2
00006846 069A 0000 5000             		addi.l	#$5000,(a2)+
0000684C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006852 3038 A800                  		move.w	($FFFFA800).w,d0
00006856 4440                       		neg.w	d0			; negate (positive to negative)
00006858 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000685A 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685E                            slz_DeformLoop_2:
0000685E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006860 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006864                            
00006864 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006868 4440                       		neg.w	d0			; negate (positive to negative)
0000686A 4840                       		swap	d0			; send to the left side of d0
0000686C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006870 45F8 A800                  		lea	($FFFFA800).w,a2
00006874 069A 0000 5000             		addi.l	#$5000,(a2)+
0000687A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006880 3038 A800                  		move.w	($FFFFA800).w,d0
00006884 4440                       		neg.w	d0			; negate (positive to negative)
00006886 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006888 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000688C                            slz_DeformLoop_3:
0000688C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006892                            
00006892 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006896 4440                       		neg.w	d0			; negate (positive to negative)
00006898 4840                       		swap	d0			; send to the left side of d0
0000689A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689E 45F8 A800                  		lea	($FFFFA800).w,a2
000068A2 069A 0000 5000             		addi.l	#$5000,(a2)+
000068A8 069A 0000 C000             		addi.l	#$C000,(a2)+
000068AE 3038 A800                  		move.w	($FFFFA800).w,d0
000068B2 4440                       		neg.w	d0			; negate (positive to negative)
000068B4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068B6 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BA                            slz_DeformLoop_4:
000068BA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000068C0                            
000068C0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C4 4440                       		neg.w	d0			; negate (positive to negative)
000068C6 4840                       		swap	d0			; send to the left side of d0
000068C8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CC 45F8 A800                  		lea	($FFFFA800).w,a2
000068D0 069A 0000 5000             		addi.l	#$5000,(a2)+
000068D6 069A 0000 C000             		addi.l	#$C000,(a2)+
000068DC 3038 A800                  		move.w	($FFFFA800).w,d0
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000068E4 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068E8                            slz_DeformLoop_5:
000068E8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068EA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000068EE                            
000068EE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068F2 4440                       		neg.w	d0			; negate (positive to negative)
000068F4 4840                       		swap	d0			; send to the left side of d0
000068F6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068FE 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006902                            slz_DeformLoop_6:
00006902 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006904 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006908                            
00006908 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000690C 4440                       		neg.w	d0			; negate (positive to negative)
0000690E 4840                       		swap	d0			; send to the left side of d0
00006910 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006918 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000691C                            slz_DeformLoop_7:
0000691C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000691E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006922                            
00006922 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006926 4440                       		neg.w	d0			; negate (positive to negative)
00006928 4840                       		swap	d0			; send to the left side of d0
0000692A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006932 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006936                            slz_DeformLoop_8:
00006936 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006938 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
0000693C                            
0000693C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006940 4440                       		neg.w	d0			; negate (positive to negative)
00006942 4840                       		swap	d0			; send to the left side of d0
00006944 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000694C 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006950                            slz_DeformLoop_9:
00006950 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006952 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006956                            
00006956 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000695A 4440                       		neg.w	d0			; negate (positive to negative)
0000695C 4840                       		swap	d0			; send to the left side of d0
0000695E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006962 4440                       		neg.w	d0			; negate (positive to negative)
00006964 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006966 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000696A                            slz_DeformLoop_10:
0000696A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000696C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006970                            
00006970 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006974 4440                       		neg.w	d0			; negate (positive to negative)
00006976 4840                       		swap	d0			; send to the left side of d0
00006978 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000697C 4440                       		neg.w	d0			; negate (positive to negative)
0000697E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006980 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006984                            slz_DeformLoop_11:
00006984 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006986 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000698A                            
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000698E 4440                       		neg.w	d0			; negate (positive to negative)
00006990 4840                       		swap	d0			; send to the left side of d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006996 4440                       		neg.w	d0			; negate (positive to negative)
00006998 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000699A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000699E                            slz_DeformLoop_12:
0000699E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069A0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000069A4                            
000069A4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069A8 4440                       		neg.w	d0			; negate (positive to negative)
000069AA 4840                       		swap	d0			; send to the left side of d0
000069AC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069B0 4440                       		neg.w	d0			; negate (positive to negative)
000069B2 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069B4 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069B8                            slz_DeformLoop_13:
000069B8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069BA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000069BE 4E75                       		rts	
000069C0                            ; End of function Deform_SLZ
000069C0 4E75                       		rts	
000069C2                            ; End of function Deform_SLZ_2
000069C2                            
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            ; Spring Yard Zone background layer deformation	code
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            
000069C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C2                            
000069C2                            
000069C2                            Deform_SYZ:				; XREF: Deform_Index
000069C2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069C6 48C4                       		ext.l	d4
000069C8 ED84                       		asl.l	#6,d4
000069CA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069CE 48C5                       		ext.l	d5
000069D0 E985                       		asl.l	#4,d5
000069D2 2205                       		move.l	d5,d1
000069D4 E385                       		asl.l	#1,d5
000069D6 DA81                       		add.l	d1,d5
000069D8 6100 0000                  		bsr.w	ScrollBlock1
000069DC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069E2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069E6 323C 00DF                  		move.w	#$DF,d1
000069EA 3038 F700                  		move.w	($FFFFF700).w,d0
000069EE 4440                       		neg.w	d0
000069F0 4840                       		swap	d0
000069F2 3038 F708                  		move.w	($FFFFF708).w,d0
000069F6 4440                       		neg.w	d0
000069F8                            
000069F8                            loc_653C:
000069F8 22C0                       		move.l	d0,(a1)+
000069FA 51C9 FFFC                  		dbf	d1,loc_653C
000069FE 4E75                       		rts	
00006A00                            ; End of function Deform_SYZ
00006A00                            
00006A00                            ; ---------------------------------------------------------------------------
00006A00                            ; Scrap	Brain Zone background layer deformation	code
00006A00                            ; ---------------------------------------------------------------------------
00006A00                            
00006A00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A00                            
00006A00                            
00006A00                            Deform_SBZ:				; XREF: Deform_Index
00006A00 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A04 48C4                       		ext.l	d4
00006A06 ED84                       		asl.l	#6,d4
00006A08 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A0C 48C5                       		ext.l	d5
00006A0E E985                       		asl.l	#4,d5
00006A10 E385                       		asl.l	#1,d5
00006A12 6100 0000                  		bsr.w	ScrollBlock1
00006A16 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A1C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A20 323C 00DF                  		move.w	#$DF,d1
00006A24 3038 F700                  		move.w	($FFFFF700).w,d0
00006A28 4440                       		neg.w	d0
00006A2A 4840                       		swap	d0
00006A2C 3038 F708                  		move.w	($FFFFF708).w,d0
00006A30 4440                       		neg.w	d0
00006A32                            
00006A32                            loc_6576:
00006A32 22C0                       		move.l	d0,(a1)+
00006A34 51C9 FFFC                  		dbf	d1,loc_6576
00006A38 4E75                       		rts	
00006A3A                            ; End of function Deform_SBZ
00006A3A                            
00006A3A                            ; ---------------------------------------------------------------------------
00006A3A                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006A3A                            ; ---------------------------------------------------------------------------
00006A3A                            
00006A3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A3A                            
00006A3A                            
00006A3A                            ScrollHoriz:				; XREF: DeformBgLayer
00006A3A 3838 F700                  		move.w	($FFFFF700).w,d4
00006A3E 6100                       		bsr.s	ScrollHoriz2
00006A40 3038 F700                  		move.w	($FFFFF700).w,d0
00006A44 0240 0010                  		andi.w	#$10,d0
00006A48 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006A4C B300                       		eor.b	d1,d0
00006A4E 6600                       		bne.s	locret_65B0
00006A50 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006A56 3038 F700                  		move.w	($FFFFF700).w,d0
00006A5A 9044                       		sub.w	d4,d0
00006A5C 6A00                       		bpl.s	loc_65AA
00006A5E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A64 4E75                       		rts	
00006A66                            ; ===========================================================================
00006A66                            
00006A66                            loc_65AA:
00006A66 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A6C                            
00006A6C                            locret_65B0:
00006A6C 4E75                       		rts	
00006A6E                            ; End of function ScrollHoriz
00006A6E                            
00006A6E                            
00006A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A6E                            
00006A6E                            
00006A6E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A6E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A72 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A76 0440 0090                  		subi.w	#$90,d0
00006A7A 6500                       		bcs.s	loc_65F6
00006A7C 0440 0010                  		subi.w	#$10,d0
00006A80 6400                       		bcc.s	loc_65CC
00006A82 4278 F73A                  		clr.w	($FFFFF73A).w
00006A86 4E75                       		rts	
00006A88                            ; ===========================================================================
00006A88                            
00006A88                            loc_65CC:
00006A88 0C40 0010                  		cmpi.w	#$10,d0
00006A8C 6500                       		bcs.s	loc_65D6
00006A8E 303C 0010                  		move.w	#$10,d0
00006A92                            
00006A92                            loc_65D6:
00006A92 D078 F700                  		add.w	($FFFFF700).w,d0
00006A96 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A9A 6D00                       		blt.s	loc_65E4
00006A9C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006AA0                            
00006AA0                            loc_65E4:
00006AA0 3200                       		move.w	d0,d1
00006AA2 9278 F700                  		sub.w	($FFFFF700).w,d1
00006AA6 E141                       		asl.w	#8,d1
00006AA8 31C0 F700                  		move.w	d0,($FFFFF700).w
00006AAC 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006AB0 4E75                       		rts	
00006AB2                            ; ===========================================================================
00006AB2                            
00006AB2                            loc_65F6:				; XREF: ScrollHoriz2
00006AB2 D078 F700                  		add.w	($FFFFF700).w,d0
00006AB6 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006ABA 6EE4                       		bgt.s	loc_65E4
00006ABC 3038 F728                  		move.w	($FFFFF728).w,d0
00006AC0 60DE                       		bra.s	loc_65E4
00006AC2                            ; End of function ScrollHoriz2
00006AC2                            
00006AC2                            ; ===========================================================================
00006AC2 4A40                       		tst.w	d0
00006AC4 6A00                       		bpl.s	loc_6610
00006AC6 303C FFFE                  		move.w	#-2,d0
00006ACA 60E6                       		bra.s	loc_65F6
00006ACC                            ; ===========================================================================
00006ACC                            
00006ACC                            loc_6610:
00006ACC 303C 0002                  		move.w	#2,d0
00006AD0 60B6                       		bra.s	loc_65CC
00006AD2                            
00006AD2                            ; ---------------------------------------------------------------------------
00006AD2                            ; Subroutine to	scroll the level vertically as Sonic moves
00006AD2                            ; ---------------------------------------------------------------------------
00006AD2                            
00006AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD2                            
00006AD2                            
00006AD2                            ScrollVertical:				; XREF: DeformBgLayer
00006AD2 7200                       		moveq	#0,d1
00006AD4 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AD8 9078 F704                  		sub.w	($FFFFF704).w,d0
00006ADC 0838 0002 D022             		btst	#2,($FFFFD022).w
00006AE2 6700                       		beq.s	loc_662A
00006AE4 5B40                       		subq.w	#5,d0
00006AE6                            
00006AE6                            loc_662A:
00006AE6 0838 0001 D022             		btst	#1,($FFFFD022).w
00006AEC 6700                       		beq.s	loc_664A
00006AEE 0640 0020                  		addi.w	#$20,d0
00006AF2 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AF6 6500                       		bcs.s	loc_6696
00006AF8 0440 0040                  		subi.w	#$40,d0
00006AFC 6400                       		bcc.s	loc_6696
00006AFE 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B02 6600                       		bne.s	loc_66A8
00006B04 6000                       		bra.s	loc_6656
00006B06                            ; ===========================================================================
00006B06                            
00006B06                            loc_664A:
00006B06 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B0A 6600                       		bne.s	loc_665C
00006B0C 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B10 6600                       		bne.s	loc_66A8
00006B12                            
00006B12                            loc_6656:
00006B12 4278 F73C                  		clr.w	($FFFFF73C).w
00006B16 4E75                       		rts	
00006B18                            ; ===========================================================================
00006B18                            
00006B18                            loc_665C:
00006B18 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006B1E 6600                       		bne.s	loc_6684
00006B20 3238 D014                  		move.w	($FFFFD014).w,d1
00006B24 6A00                       		bpl.s	loc_666C
00006B26 4441                       		neg.w	d1
00006B28                            
00006B28                            loc_666C:
00006B28 0C41 0800                  		cmpi.w	#$800,d1
00006B2C 6400                       		bcc.s	loc_6696
00006B2E 323C 0600                  		move.w	#$600,d1
00006B32 0C40 0006                  		cmpi.w	#6,d0
00006B36 6E00                       		bgt.s	loc_66F6
00006B38 0C40 FFFA                  		cmpi.w	#-6,d0
00006B3C 6D00                       		blt.s	loc_66C0
00006B3E 6000                       		bra.s	loc_66AE
00006B40                            ; ===========================================================================
00006B40                            
00006B40                            loc_6684:
00006B40 323C 0200                  		move.w	#$200,d1
00006B44 0C40 0002                  		cmpi.w	#2,d0
00006B48 6E00                       		bgt.s	loc_66F6
00006B4A 0C40 FFFE                  		cmpi.w	#-2,d0
00006B4E 6D00                       		blt.s	loc_66C0
00006B50 6000                       		bra.s	loc_66AE
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_6696:
00006B52 323C 1000                  		move.w	#$1000,d1
00006B56 0C40 0010                  		cmpi.w	#$10,d0
00006B5A 6E00                       		bgt.s	loc_66F6
00006B5C 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B60 6D00                       		blt.s	loc_66C0
00006B62 6000                       		bra.s	loc_66AE
00006B64                            ; ===========================================================================
00006B64                            
00006B64                            loc_66A8:
00006B64 7000                       		moveq	#0,d0
00006B66 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B6A                            
00006B6A                            loc_66AE:
00006B6A 7200                       		moveq	#0,d1
00006B6C 3200                       		move.w	d0,d1
00006B6E D278 F704                  		add.w	($FFFFF704).w,d1
00006B72 4A40                       		tst.w	d0
00006B74 6A00 0000                  		bpl.w	loc_6700
00006B78 6000 0000                  		bra.w	loc_66CC
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_66C0:
00006B7C 4441                       		neg.w	d1
00006B7E 48C1                       		ext.l	d1
00006B80 E181                       		asl.l	#8,d1
00006B82 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B86 4841                       		swap	d1
00006B88                            
00006B88                            loc_66CC:
00006B88 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B8C 6E00                       		bgt.s	loc_6724
00006B8E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B92 6E00                       		bgt.s	loc_66F0
00006B94 0241 07FF                  		andi.w	#$7FF,d1
00006B98 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B9E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006BA4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BAA 6000                       		bra.s	loc_6724
00006BAC                            ; ===========================================================================
00006BAC                            
00006BAC                            loc_66F0:
00006BAC 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006BB0 6000                       		bra.s	loc_6724
00006BB2                            ; ===========================================================================
00006BB2                            
00006BB2                            loc_66F6:
00006BB2 48C1                       		ext.l	d1
00006BB4 E181                       		asl.l	#8,d1
00006BB6 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BBA 4841                       		swap	d1
00006BBC                            
00006BBC                            loc_6700:
00006BBC B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006BC0 6D00                       		blt.s	loc_6724
00006BC2 0441 0800                  		subi.w	#$800,d1
00006BC6 6500                       		bcs.s	loc_6720
00006BC8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BCE 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006BD4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BDA 6000                       		bra.s	loc_6724
00006BDC                            ; ===========================================================================
00006BDC                            
00006BDC                            loc_6720:
00006BDC 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006BE0                            
00006BE0                            loc_6724:
00006BE0 3838 F704                  		move.w	($FFFFF704).w,d4
00006BE4 4841                       		swap	d1
00006BE6 2601                       		move.l	d1,d3
00006BE8 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006BEC E09B                       		ror.l	#8,d3
00006BEE 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006BF2 21C1 F704                  		move.l	d1,($FFFFF704).w
00006BF6 3038 F704                  		move.w	($FFFFF704).w,d0
00006BFA 0240 0010                  		andi.w	#$10,d0
00006BFE 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006C02 B300                       		eor.b	d1,d0
00006C04 6600                       		bne.s	locret_6766
00006C06 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006C0C 3038 F704                  		move.w	($FFFFF704).w,d0
00006C10 9044                       		sub.w	d4,d0
00006C12 6A00                       		bpl.s	loc_6760
00006C14 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006C1A 4E75                       		rts	
00006C1C                            ; ===========================================================================
00006C1C                            
00006C1C                            loc_6760:
00006C1C 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006C22                            
00006C22                            locret_6766:
00006C22 4E75                       		rts	
00006C24                            ; End of function ScrollVertical
00006C24                            
00006C24                            
00006C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C24                            
00006C24                            
00006C24                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006C24 2438 F708                  		move.l	($FFFFF708).w,d2
00006C28 2002                       		move.l	d2,d0
00006C2A D084                       		add.l	d4,d0
00006C2C 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C30 2200                       		move.l	d0,d1
00006C32 4841                       		swap	d1
00006C34 0241 0010                  		andi.w	#$10,d1
00006C38 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006C3C B701                       		eor.b	d3,d1
00006C3E 6600                       		bne.s	loc_679C
00006C40 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006C46 9082                       		sub.l	d2,d0
00006C48 6A00                       		bpl.s	loc_6796
00006C4A 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006C50 6000                       		bra.s	loc_679C
00006C52                            ; ===========================================================================
00006C52                            
00006C52                            loc_6796:
00006C52 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006C58                            
00006C58                            loc_679C:
00006C58 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C5C 2003                       		move.l	d3,d0
00006C5E D085                       		add.l	d5,d0
00006C60 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C64 2200                       		move.l	d0,d1
00006C66 4841                       		swap	d1
00006C68 0241 0010                  		andi.w	#$10,d1
00006C6C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C70 B501                       		eor.b	d2,d1
00006C72 6600                       		bne.s	locret_67D0
00006C74 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C7A 9083                       		sub.l	d3,d0
00006C7C 6A00                       		bpl.s	loc_67CA
00006C7E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C84 4E75                       		rts	
00006C86                            ; ===========================================================================
00006C86                            
00006C86                            loc_67CA:
00006C86 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C8C                            
00006C8C                            locret_67D0:
00006C8C 4E75                       		rts	
00006C8E                            ; End of function ScrollBlock1
00006C8E                            
00006C8E                            
00006C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C8E                            
00006C8E                            
00006C8E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C8E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C92 2002                       		move.l	d2,d0
00006C94 D084                       		add.l	d4,d0
00006C96 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C9A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C9E 2003                       		move.l	d3,d0
00006CA0 D085                       		add.l	d5,d0
00006CA2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006CA6 2200                       		move.l	d0,d1
00006CA8 4841                       		swap	d1
00006CAA 0241 0010                  		andi.w	#$10,d1
00006CAE 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006CB2 B501                       		eor.b	d2,d1
00006CB4 6600                       		bne.s	locret_6812
00006CB6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006CBC 9083                       		sub.l	d3,d0
00006CBE 6A00                       		bpl.s	loc_680C
00006CC0 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CC6 4E75                       		rts	
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            loc_680C:
00006CC8 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CCE                            
00006CCE                            locret_6812:
00006CCE 4E75                       		rts	
00006CD0                            ; End of function ScrollBlock2
00006CD0                            
00006CD0                            
00006CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CD0                            
00006CD0                            
00006CD0                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006CD0 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006CD4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CD8 3200                       		move.w	d0,d1
00006CDA 0241 0010                  		andi.w	#$10,d1
00006CDE 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006CE2 B501                       		eor.b	d2,d1
00006CE4 6600                       		bne.s	locret_6842
00006CE6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006CEC 9043                       		sub.w	d3,d0
00006CEE 6A00                       		bpl.s	loc_683C
00006CF0 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CF6 4E75                       		rts	
00006CF8                            ; ===========================================================================
00006CF8                            
00006CF8                            loc_683C:
00006CF8 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CFE                            
00006CFE                            locret_6842:
00006CFE 4E75                       		rts	
00006D00                            ; End of function ScrollBlock3
00006D00                            
00006D00                            
00006D00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D00                            
00006D00                            
00006D00                            ScrollBlock4:				; XREF: Deform_GHZ
00006D00 3438 F710                  		move.w	($FFFFF710).w,d2
00006D04 3638 F714                  		move.w	($FFFFF714).w,d3
00006D08 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006D0C 48C0                       		ext.l	d0
00006D0E EF80                       		asl.l	#7,d0
00006D10 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006D14 3038 F710                  		move.w	($FFFFF710).w,d0
00006D18 0240 0010                  		andi.w	#$10,d0
00006D1C 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006D20 B300                       		eor.b	d1,d0
00006D22 6600                       		bne.s	locret_6884
00006D24 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006D2A 3038 F710                  		move.w	($FFFFF710).w,d0
00006D2E 9042                       		sub.w	d2,d0
00006D30 6A00                       		bpl.s	loc_687E
00006D32 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006D38 6000                       		bra.s	locret_6884
00006D3A                            ; ===========================================================================
00006D3A                            
00006D3A                            loc_687E:
00006D3A 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006D40                            
00006D40                            locret_6884:
00006D40 4E75                       		rts	
00006D42                            ; End of function ScrollBlock4
00006D42                            
00006D42                            
00006D42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D42                            
00006D42                            
00006D42                            sub_6886:				; XREF: loc_C44
00006D42 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D48 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D4E 45F8 F756                  		lea	($FFFFF756).w,a2
00006D52 47F8 F708                  		lea	($FFFFF708).w,a3
00006D56 49F8 A440                  		lea	($FFFFA440).w,a4
00006D5A 343C 6000                  		move.w	#$6000,d2
00006D5E 6100 0000                  		bsr.w	sub_6954
00006D62 45F8 F758                  		lea	($FFFFF758).w,a2
00006D66 47F8 F710                  		lea	($FFFFF710).w,a3
00006D6A 6000 0000                  		bra.w	sub_69F4
00006D6E                            ; End of function sub_6886
00006D6E                            
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            ; Subroutine to	display	correct	tiles as you move
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            
00006D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6E                            
00006D6E                            
00006D6E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D6E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D74 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D7A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D7E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D82 49F8 A440                  		lea	($FFFFA440).w,a4
00006D86 343C 6000                  		move.w	#$6000,d2
00006D8A 6100 0000                  		bsr.w	sub_6954
00006D8E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D92 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D96 6100 0000                  		bsr.w	sub_69F4
00006D9A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D9E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006DA2 49F8 A400                  		lea	($FFFFA400).w,a4
00006DA6 343C 4000                  		move.w	#$4000,d2
00006DAA 4A12                       		tst.b	(a2)
00006DAC 6700                       		beq.s	locret_6952
00006DAE 0892 0000                  		bclr	#0,(a2)
00006DB2 6700                       		beq.s	loc_6908
00006DB4 78F0                       		moveq	#-$10,d4
00006DB6 7AF0                       		moveq	#-$10,d5
00006DB8 6100 0000                  		bsr.w	sub_6C20
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6AD8
00006DC4                            
00006DC4                            loc_6908:
00006DC4 0892 0001                  		bclr	#1,(a2)
00006DC8 6700                       		beq.s	loc_6922
00006DCA 383C 00E0                  		move.w	#$E0,d4
00006DCE 7AF0                       		moveq	#-$10,d5
00006DD0 6100 0000                  		bsr.w	sub_6C20
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6AD8
00006DDE                            
00006DDE                            loc_6922:
00006DDE 0892 0002                  		bclr	#2,(a2)
00006DE2 6700                       		beq.s	loc_6938
00006DE4 78F0                       		moveq	#-$10,d4
00006DE6 7AF0                       		moveq	#-$10,d5
00006DE8 6100 0000                  		bsr.w	sub_6C20
00006DEC 78F0                       		moveq	#-$10,d4
00006DEE 7AF0                       		moveq	#-$10,d5
00006DF0 6100 0000                  		bsr.w	sub_6B04
00006DF4                            
00006DF4                            loc_6938:
00006DF4 0892 0003                  		bclr	#3,(a2)
00006DF8 6700                       		beq.s	locret_6952
00006DFA 78F0                       		moveq	#-$10,d4
00006DFC 3A3C 0140                  		move.w	#$140,d5
00006E00 6100 0000                  		bsr.w	sub_6C20
00006E04 78F0                       		moveq	#-$10,d4
00006E06 3A3C 0140                  		move.w	#$140,d5
00006E0A 6100 0000                  		bsr.w	sub_6B04
00006E0E                            
00006E0E                            locret_6952:
00006E0E 4E75                       		rts	
00006E10                            ; End of function LoadTilesAsYouMove
00006E10                            
00006E10                            
00006E10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E10                            
00006E10                            
00006E10                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006E10 4A12                       		tst.b	(a2)
00006E12 6700 0000                  		beq.w	locret_69F2
00006E16 0892 0000                  		bclr	#0,(a2)
00006E1A 6700                       		beq.s	loc_6972
00006E1C 78F0                       		moveq	#-$10,d4
00006E1E 7AF0                       		moveq	#-$10,d5
00006E20 6100 0000                  		bsr.w	sub_6C20
00006E24 78F0                       		moveq	#-$10,d4
00006E26 7AF0                       		moveq	#-$10,d5
00006E28 7C1F                       		moveq	#$1F,d6
00006E2A 6100 0000                  		bsr.w	sub_6ADA
00006E2E                            
00006E2E                            loc_6972:
00006E2E 0892 0001                  		bclr	#1,(a2)
00006E32 6700                       		beq.s	loc_698E
00006E34 383C 00E0                  		move.w	#$E0,d4
00006E38 7AF0                       		moveq	#-$10,d5
00006E3A 6100 0000                  		bsr.w	sub_6C20
00006E3E 383C 00E0                  		move.w	#$E0,d4
00006E42 7AF0                       		moveq	#-$10,d5
00006E44 7C1F                       		moveq	#$1F,d6
00006E46 6100 0000                  		bsr.w	sub_6ADA
00006E4A                            
00006E4A                            loc_698E:
00006E4A 0892 0002                  		bclr	#2,(a2)
00006E4E 6700                       		beq.s	loc_69BE
00006E50 78F0                       		moveq	#-$10,d4
00006E52 7AF0                       		moveq	#-$10,d5
00006E54 6100 0000                  		bsr.w	sub_6C20
00006E58 78F0                       		moveq	#-$10,d4
00006E5A 7AF0                       		moveq	#-$10,d5
00006E5C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E60 322B 0004                  		move.w	4(a3),d1
00006E64 0241 FFF0                  		andi.w	#-$10,d1
00006E68 9C41                       		sub.w	d1,d6
00006E6A 6D00                       		blt.s	loc_69BE
00006E6C E84E                       		lsr.w	#4,d6
00006E6E 0C46 000F                  		cmpi.w	#$F,d6
00006E72 6500                       		bcs.s	loc_69BA
00006E74 7C0F                       		moveq	#$F,d6
00006E76                            
00006E76                            loc_69BA:
00006E76 6100 0000                  		bsr.w	sub_6B06
00006E7A                            
00006E7A                            loc_69BE:
00006E7A 0892 0003                  		bclr	#3,(a2)
00006E7E 6700                       		beq.s	locret_69F2
00006E80 78F0                       		moveq	#-$10,d4
00006E82 3A3C 0140                  		move.w	#$140,d5
00006E86 6100 0000                  		bsr.w	sub_6C20
00006E8A 78F0                       		moveq	#-$10,d4
00006E8C 3A3C 0140                  		move.w	#$140,d5
00006E90 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E94 322B 0004                  		move.w	4(a3),d1
00006E98 0241 FFF0                  		andi.w	#-$10,d1
00006E9C 9C41                       		sub.w	d1,d6
00006E9E 6D00                       		blt.s	locret_69F2
00006EA0 E84E                       		lsr.w	#4,d6
00006EA2 0C46 000F                  		cmpi.w	#$F,d6
00006EA6 6500                       		bcs.s	loc_69EE
00006EA8 7C0F                       		moveq	#$F,d6
00006EAA                            
00006EAA                            loc_69EE:
00006EAA 6100 0000                  		bsr.w	sub_6B06
00006EAE                            
00006EAE                            locret_69F2:
00006EAE 4E75                       		rts	
00006EB0                            ; End of function sub_6954
00006EB0                            
00006EB0                            
00006EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB0                            
00006EB0                            
00006EB0                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006EB0 4A12                       		tst.b	(a2)
00006EB2 6700 0000                  		beq.w	locret_6A80
00006EB6 0892 0002                  		bclr	#2,(a2)
00006EBA 6700                       		beq.s	loc_6A3E
00006EBC 0C53 0010                  		cmpi.w	#$10,(a3)
00006EC0 6500                       		bcs.s	loc_6A3E
00006EC2 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EC6 322B 0004                  		move.w	4(a3),d1
00006ECA 0241 FFF0                  		andi.w	#-$10,d1
00006ECE 9841                       		sub.w	d1,d4
00006ED0 3F04                       		move.w	d4,-(sp)
00006ED2 7AF0                       		moveq	#-$10,d5
00006ED4 6100 0000                  		bsr.w	sub_6C20
00006ED8 381F                       		move.w	(sp)+,d4
00006EDA 7AF0                       		moveq	#-$10,d5
00006EDC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EE0 322B 0004                  		move.w	4(a3),d1
00006EE4 0241 FFF0                  		andi.w	#-$10,d1
00006EE8 9C41                       		sub.w	d1,d6
00006EEA 6D00                       		blt.s	loc_6A3E
00006EEC E84E                       		lsr.w	#4,d6
00006EEE 0446 000E                  		subi.w	#$E,d6
00006EF2 6400                       		bcc.s	loc_6A3E
00006EF4 4446                       		neg.w	d6
00006EF6 6100 0000                  		bsr.w	sub_6B06
00006EFA                            
00006EFA                            loc_6A3E:
00006EFA 0892 0003                  		bclr	#3,(a2)
00006EFE 6700                       		beq.s	locret_6A80
00006F00 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F04 322B 0004                  		move.w	4(a3),d1
00006F08 0241 FFF0                  		andi.w	#-$10,d1
00006F0C 9841                       		sub.w	d1,d4
00006F0E 3F04                       		move.w	d4,-(sp)
00006F10 3A3C 0140                  		move.w	#$140,d5
00006F14 6100 0000                  		bsr.w	sub_6C20
00006F18 381F                       		move.w	(sp)+,d4
00006F1A 3A3C 0140                  		move.w	#$140,d5
00006F1E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F22 322B 0004                  		move.w	4(a3),d1
00006F26 0241 FFF0                  		andi.w	#-$10,d1
00006F2A 9C41                       		sub.w	d1,d6
00006F2C 6D00                       		blt.s	locret_6A80
00006F2E E84E                       		lsr.w	#4,d6
00006F30 0446 000E                  		subi.w	#$E,d6
00006F34 6400                       		bcc.s	locret_6A80
00006F36 4446                       		neg.w	d6
00006F38 6100 0000                  		bsr.w	sub_6B06
00006F3C                            
00006F3C                            locret_6A80:
00006F3C 4E75                       		rts	
00006F3E                            ; End of function sub_69F4
00006F3E                            
00006F3E                            ; ===========================================================================
00006F3E 4A12                       		tst.b	(a2)
00006F40 6700                       		beq.s	locret_6AD6
00006F42 0892 0002                  		bclr	#2,(a2)
00006F46 6700                       		beq.s	loc_6AAC
00006F48 383C 00D0                  		move.w	#$D0,d4
00006F4C 322B 0004                  		move.w	4(a3),d1
00006F50 0241 FFF0                  		andi.w	#-$10,d1
00006F54 9841                       		sub.w	d1,d4
00006F56 3F04                       		move.w	d4,-(sp)
00006F58 7AF0                       		moveq	#-$10,d5
00006F5A 6100 0000                  		bsr.w	sub_6C3C
00006F5E 381F                       		move.w	(sp)+,d4
00006F60 7AF0                       		moveq	#-$10,d5
00006F62 7C02                       		moveq	#2,d6
00006F64 6100 0000                  		bsr.w	sub_6B06
00006F68                            
00006F68                            loc_6AAC:
00006F68 0892 0003                  		bclr	#3,(a2)
00006F6C 6700                       		beq.s	locret_6AD6
00006F6E 383C 00D0                  		move.w	#$D0,d4
00006F72 322B 0004                  		move.w	4(a3),d1
00006F76 0241 FFF0                  		andi.w	#-$10,d1
00006F7A 9841                       		sub.w	d1,d4
00006F7C 3F04                       		move.w	d4,-(sp)
00006F7E 3A3C 0140                  		move.w	#$140,d5
00006F82 6100 0000                  		bsr.w	sub_6C3C
00006F86 381F                       		move.w	(sp)+,d4
00006F88 3A3C 0140                  		move.w	#$140,d5
00006F8C 7C02                       		moveq	#2,d6
00006F8E 6100 0000                  		bsr.w	sub_6B06
00006F92                            
00006F92                            locret_6AD6:
00006F92 4E75                       		rts	
00006F94                            
00006F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F94                            
00006F94                            
00006F94                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F94 7C15                       		moveq	#$15,d6
00006F96                            ; End of function sub_6AD8
00006F96                            
00006F96                            
00006F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F96                            
00006F96                            
00006F96                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F96 2E3C 0080 0000             		move.l	#$800000,d7
00006F9C 2200                       		move.l	d0,d1
00006F9E                            
00006F9E                            loc_6AE2:
00006F9E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FA2 6100 0000                  		bsr.w	sub_6BD6
00006FA6 2001                       		move.l	d1,d0
00006FA8 6100 0000                  		bsr.w	sub_6B32
00006FAC 5801                       		addq.b	#4,d1
00006FAE 0201 007F                  		andi.b	#$7F,d1
00006FB2 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006FB6 0645 0010                  		addi.w	#$10,d5
00006FBA 51CE FFE2                  		dbf	d6,loc_6AE2
00006FBE 4E75                       		rts	
00006FC0                            ; End of function sub_6ADA
00006FC0                            
00006FC0                            
00006FC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC0                            
00006FC0                            
00006FC0                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006FC0 7C0F                       		moveq	#$F,d6
00006FC2                            ; End of function sub_6B04
00006FC2                            
00006FC2                            
00006FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC2                            
00006FC2                            
00006FC2                            sub_6B06:				; XREF: sub_6954
00006FC2 2E3C 0080 0000             		move.l	#$800000,d7
00006FC8 2200                       		move.l	d0,d1
00006FCA                            
00006FCA                            loc_6B0E:
00006FCA 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FCE 6100 0000                  		bsr.w	sub_6BD6
00006FD2 2001                       		move.l	d1,d0
00006FD4 6100 0000                  		bsr.w	sub_6B32
00006FD8 0641 0100                  		addi.w	#$100,d1
00006FDC 0241 0FFF                  		andi.w	#$FFF,d1
00006FE0 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006FE4 0644 0010                  		addi.w	#$10,d4
00006FE8 51CE FFE0                  		dbf	d6,loc_6B0E
00006FEC 4E75                       		rts	
00006FEE                            ; End of function sub_6B06
00006FEE                            
00006FEE                            
00006FEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FEE                            
00006FEE                            
00006FEE                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006FEE 8042                       		or.w	d2,d0
00006FF0 4840                       		swap	d0
00006FF2 0810 0004                  		btst	#4,(a0)
00006FF6 6600                       		bne.s	loc_6B6E
00006FF8 0810 0003                  		btst	#3,(a0)
00006FFC 6600                       		bne.s	loc_6B4E
00006FFE 2A80                       		move.l	d0,(a5)
00007000 2C99                       		move.l	(a1)+,(a6)
00007002 D087                       		add.l	d7,d0
00007004 2A80                       		move.l	d0,(a5)
00007006 2C99                       		move.l	(a1)+,(a6)
00007008 4E75                       		rts	
0000700A                            ; ===========================================================================
0000700A                            
0000700A                            loc_6B4E:
0000700A 2A80                       		move.l	d0,(a5)
0000700C 2819                       		move.l	(a1)+,d4
0000700E 0A84 0800 0800             		eori.l	#$8000800,d4
00007014 4844                       		swap	d4
00007016 2C84                       		move.l	d4,(a6)
00007018 D087                       		add.l	d7,d0
0000701A 2A80                       		move.l	d0,(a5)
0000701C 2819                       		move.l	(a1)+,d4
0000701E 0A84 0800 0800             		eori.l	#$8000800,d4
00007024 4844                       		swap	d4
00007026 2C84                       		move.l	d4,(a6)
00007028 4E75                       		rts	
0000702A                            ; ===========================================================================
0000702A                            
0000702A                            loc_6B6E:
0000702A 0810 0003                  		btst	#3,(a0)
0000702E 6600                       		bne.s	loc_6B90
00007030 2A80                       		move.l	d0,(a5)
00007032 2A19                       		move.l	(a1)+,d5
00007034 2819                       		move.l	(a1)+,d4
00007036 0A84 1000 1000             		eori.l	#$10001000,d4
0000703C 2C84                       		move.l	d4,(a6)
0000703E D087                       		add.l	d7,d0
00007040 2A80                       		move.l	d0,(a5)
00007042 0A85 1000 1000             		eori.l	#$10001000,d5
00007048 2C85                       		move.l	d5,(a6)
0000704A 4E75                       		rts	
0000704C                            ; ===========================================================================
0000704C                            
0000704C                            loc_6B90:
0000704C 2A80                       		move.l	d0,(a5)
0000704E 2A19                       		move.l	(a1)+,d5
00007050 2819                       		move.l	(a1)+,d4
00007052 0A84 1800 1800             		eori.l	#$18001800,d4
00007058 4844                       		swap	d4
0000705A 2C84                       		move.l	d4,(a6)
0000705C D087                       		add.l	d7,d0
0000705E 2A80                       		move.l	d0,(a5)
00007060 0A85 1800 1800             		eori.l	#$18001800,d5
00007066 4845                       		swap	d5
00007068 2C85                       		move.l	d5,(a6)
0000706A 4E75                       		rts	
0000706C                            ; End of function sub_6B32
0000706C                            
0000706C                            ; ===========================================================================
0000706C 4E75                       		rts	
0000706E                            ; ===========================================================================
0000706E 2A80                       		move.l	d0,(a5)
00007070 3A3C 2000                  		move.w	#$2000,d5
00007074 3819                       		move.w	(a1)+,d4
00007076 D845                       		add.w	d5,d4
00007078 3C84                       		move.w	d4,(a6)
0000707A 3819                       		move.w	(a1)+,d4
0000707C D845                       		add.w	d5,d4
0000707E 3C84                       		move.w	d4,(a6)
00007080 D087                       		add.l	d7,d0
00007082 2A80                       		move.l	d0,(a5)
00007084 3819                       		move.w	(a1)+,d4
00007086 D845                       		add.w	d5,d4
00007088 3C84                       		move.w	d4,(a6)
0000708A 3819                       		move.w	(a1)+,d4
0000708C D845                       		add.w	d5,d4
0000708E 3C84                       		move.w	d4,(a6)
00007090 4E75                       		rts	
00007092                            
00007092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007092                            
00007092                            
00007092                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007092 43F8 B000                  		lea	($FFFFB000).w,a1
00007096 D86B 0004                  		add.w	4(a3),d4
0000709A DA53                       		add.w	(a3),d5
0000709C 3604                       		move.w	d4,d3
0000709E E24B                       		lsr.w	#1,d3
000070A0 0243 0380                  		andi.w	#$380,d3
000070A4 E64D                       		lsr.w	#3,d5
000070A6 3005                       		move.w	d5,d0
000070A8 EA48                       		lsr.w	#5,d0
000070AA 0240 007F                  		andi.w	#$7F,d0
000070AE D043                       		add.w	d3,d0
000070B0 76FF                       		moveq	#-1,d3
000070B2 1634 0000                  		move.b	(a4,d0.w),d3
000070B6 6700                       		beq.s	locret_6C1E
000070B8 5303                       		subq.b	#1,d3
000070BA 0243 007F                  		andi.w	#$7F,d3
000070BE EE5B                       		ror.w	#7,d3
000070C0 D844                       		add.w	d4,d4
000070C2 0244 01E0                  		andi.w	#$1E0,d4
000070C6 0245 001E                  		andi.w	#$1E,d5
000070CA D644                       		add.w	d4,d3
000070CC D645                       		add.w	d5,d3
000070CE 2043                       		movea.l	d3,a0
000070D0 3610                       		move.w	(a0),d3
000070D2 0243 03FF                  		andi.w	#$3FF,d3
000070D6 E74B                       		lsl.w	#3,d3
000070D8 D2C3                       		adda.w	d3,a1
000070DA                            
000070DA                            locret_6C1E:
000070DA 4E75                       		rts	
000070DC                            ; End of function sub_6BD6
000070DC                            
000070DC                            
000070DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DC                            
000070DC                            
000070DC                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000070DC D86B 0004                  		add.w	4(a3),d4
000070E0 DA53                       		add.w	(a3),d5
000070E2 0244 00F0                  		andi.w	#$F0,d4
000070E6 0245 01F0                  		andi.w	#$1F0,d5
000070EA E94C                       		lsl.w	#4,d4
000070EC E44D                       		lsr.w	#2,d5
000070EE D845                       		add.w	d5,d4
000070F0 7003                       		moveq	#3,d0
000070F2 4840                       		swap	d0
000070F4 3004                       		move.w	d4,d0
000070F6 4E75                       		rts	
000070F8                            ; End of function sub_6C20
000070F8                            
000070F8                            
000070F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070F8                            ; not used
000070F8                            
000070F8                            
000070F8                            sub_6C3C:
000070F8 D86B 0004                  		add.w	4(a3),d4
000070FC DA53                       		add.w	(a3),d5
000070FE 0244 00F0                  		andi.w	#$F0,d4
00007102 0245 01F0                  		andi.w	#$1F0,d5
00007106 E94C                       		lsl.w	#4,d4
00007108 E44D                       		lsr.w	#2,d5
0000710A D845                       		add.w	d5,d4
0000710C 7002                       		moveq	#2,d0
0000710E 4840                       		swap	d0
00007110 3004                       		move.w	d4,d0
00007112 4E75                       		rts	
00007114                            ; End of function sub_6C3C
00007114                            
00007114                            ; ---------------------------------------------------------------------------
00007114                            ; Subroutine to	load tiles as soon as the level	appears
00007114                            ; ---------------------------------------------------------------------------
00007114                            
00007114                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007114                            
00007114                            
00007114                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007114 4BF9 00C0 0004             		lea	($C00004).l,a5
0000711A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007120 47F8 F700                  		lea	($FFFFF700).w,a3
00007124 49F8 A400                  		lea	($FFFFA400).w,a4
00007128 343C 4000                  		move.w	#$4000,d2
0000712C 6100                       		bsr.s	LoadTilesFromStart2
0000712E 47F8 F708                  		lea	($FFFFF708).w,a3
00007132 49F8 A440                  		lea	($FFFFA440).w,a4
00007136 343C 6000                  		move.w	#$6000,d2
0000713A                            ; End of function LoadTilesFromStart
0000713A                            
0000713A                            
0000713A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000713A                            
0000713A                            
0000713A                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000713A 78F0                       		moveq	#-$10,d4
0000713C 7C0F                       		moveq	#$F,d6
0000713E                            
0000713E                            loc_6C82:
0000713E 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007142 7A00                       		moveq	#0,d5
00007144 3204                       		move.w	d4,d1
00007146 6100 FF94                  		bsr.w	sub_6C20
0000714A 3801                       		move.w	d1,d4
0000714C 7A00                       		moveq	#0,d5
0000714E 7C1F                       		moveq	#$1F,d6
00007150 6100 FE44                  		bsr.w	sub_6ADA
00007154 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007158 0644 0010                  		addi.w	#$10,d4
0000715C 51CE FFE0                  		dbf	d6,loc_6C82
00007160 4E75                       		rts	
00007162                            ; End of function LoadTilesFromStart2
00007162                            
00007162                            ; ---------------------------------------------------------------------------
00007162                            ; Main Load Block loading subroutine
00007162                            ; ---------------------------------------------------------------------------
00007162                            
00007162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007162                            
00007162                            
00007162                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007162 7000                       		moveq	#0,d0
00007164 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007168 E948                       		lsl.w	#4,d0
0000716A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007170 45F2 0000                  		lea	(a2,d0.w),a2
00007174 2F0A                       		move.l	a2,-(sp)
00007176 588A                       		addq.l	#4,a2
00007178 205A                       		movea.l	(a2)+,a0
0000717A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000717E 303C 0000                  		move.w	#0,d0
00007182 6100 A7BA                  		bsr.w	EniDec
00007186 205A                       		movea.l	(a2)+,a0
00007188 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000718E 6100 A92C                  		bsr.w	KosDec
00007192 6100 0000                  		bsr.w	LevelLayoutLoad
00007196 301A                       		move.w	(a2)+,d0
00007198 3012                       		move.w	(a2),d0
0000719A 0240 00FF                  		andi.w	#$FF,d0
0000719E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000071A4 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000071A6 700C                       		moveq	#$C,d0		; use SB3 pallet
000071A8                            
000071A8                            MLB_ChkSBZPal:
000071A8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000071AE 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000071B0 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000071B6 6600                       		bne.s	MLB_NormalPal	; if not, branch
000071B8                            
000071B8                            MLB_UsePal0E:
000071B8 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000071BA                            
000071BA                            MLB_NormalPal:
000071BA 6100 B160                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000071BE 245F                       		movea.l	(sp)+,a2
000071C0 584A                       		addq.w	#4,a2
000071C2 7000                       		moveq	#0,d0
000071C4 1012                       		move.b	(a2),d0
000071C6 6700                       		beq.s	locret_6D10
000071C8 6100 A5D6                  		bsr.w	LoadPLC		; load pattern load cues
000071CC                            
000071CC                            locret_6D10:
000071CC 4E75                       		rts	
000071CE                            ; End of function MainLoadBlockLoad
000071CE                            
000071CE                            ; ---------------------------------------------------------------------------
000071CE                            ; Level	layout loading subroutine
000071CE                            ; ---------------------------------------------------------------------------
000071CE                            
000071CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071CE                            
000071CE                            
000071CE                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000071CE 47F8 A400                  		lea	($FFFFA400).w,a3
000071D2 323C 01FF                  		move.w	#$1FF,d1
000071D6 7000                       		moveq	#0,d0
000071D8                            
000071D8                            LevLoad_ClrRam:
000071D8 26C0                       		move.l	d0,(a3)+
000071DA 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000071DE                            
000071DE 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000071E2 7200                       		moveq	#0,d1
000071E4 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000071E8 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000071EC 7202                       		moveq	#2,d1
000071EE                            ; End of function LevelLayoutLoad
000071EE                            
000071EE                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000071EE                            
000071EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071EE                            
000071EE                            
000071EE                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000071EE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000071F2 ED08                       		lsl.b	#6,d0
000071F4 EA48                       		lsr.w	#5,d0
000071F6 3400                       		move.w	d0,d2
000071F8 D040                       		add.w	d0,d0
000071FA D042                       		add.w	d2,d0
000071FC D041                       		add.w	d1,d0
000071FE 43F9 0000 0000             		lea	(Level_Index).l,a1
00007204 3031 0000                  		move.w	(a1,d0.w),d0
00007208 43F1 0000                  		lea	(a1,d0.w),a1
0000720C 7200                       		moveq	#0,d1
0000720E 3401                       		move.w	d1,d2
00007210 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007212 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007214                            
00007214                            LevLoad_NumRows:
00007214 3001                       		move.w	d1,d0
00007216 204B                       		movea.l	a3,a0
00007218                            
00007218                            LevLoad_Row:
00007218 10D9                       		move.b	(a1)+,(a0)+
0000721A 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000721E 47EB 0080                  		lea	$80(a3),a3	; do next row
00007222 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007226 4E75                       		rts	
00007228                            ; End of function LevelLayoutLoad2
00007228                            
00007228                            ; ---------------------------------------------------------------------------
00007228                            ; Dynamic screen resize	loading	subroutine
00007228                            ; ---------------------------------------------------------------------------
00007228                            
00007228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007228                            
00007228                            
00007228                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007228 7000                       		moveq	#0,d0
0000722A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000722E D040                       		add.w	d0,d0
00007230 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007234 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007238 7202                       		moveq	#2,d1
0000723A 3038 F726                  		move.w	($FFFFF726).w,d0
0000723E 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007242 6700                       		beq.s	locret_6DAA
00007244 6400                       		bcc.s	loc_6DAC
00007246 4441                       		neg.w	d1
00007248 3038 F704                  		move.w	($FFFFF704).w,d0
0000724C B078 F726                  		cmp.w	($FFFFF726).w,d0
00007250 6300                       		bls.s	loc_6DA0
00007252 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007256 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000725C                            
0000725C                            loc_6DA0:
0000725C D378 F72E                  		add.w	d1,($FFFFF72E).w
00007260 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007266                            
00007266                            locret_6DAA:
00007266 4E75                       		rts	
00007268                            ; ===========================================================================
00007268                            
00007268                            loc_6DAC:				; XREF: DynScrResizeLoad
00007268 3038 F704                  		move.w	($FFFFF704).w,d0
0000726C 5040                       		addq.w	#8,d0
0000726E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007272 6500                       		bcs.s	loc_6DC4
00007274 0838 0001 D022             		btst	#1,($FFFFD022).w
0000727A 6700                       		beq.s	loc_6DC4
0000727C D241                       		add.w	d1,d1
0000727E D241                       		add.w	d1,d1
00007280                            
00007280                            loc_6DC4:
00007280 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007284 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000728A 4E75                       		rts	
0000728C                            ; End of function DynScrResizeLoad
0000728C                            
0000728C                            ; ===========================================================================
0000728C                            ; ---------------------------------------------------------------------------
0000728C                            ; Offset index for dynamic screen resizing
0000728C                            ; ---------------------------------------------------------------------------
0000728C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007290 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007294 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007298 0000                       		dc.w Resize_Ending-Resize_Index
0000729A                            ; ===========================================================================
0000729A                            ; ---------------------------------------------------------------------------
0000729A                            ; Green	Hill Zone dynamic screen resizing
0000729A                            ; ---------------------------------------------------------------------------
0000729A                            
0000729A                            Resize_GHZ:				; XREF: Resize_Index
0000729A 7000                       		moveq	#0,d0
0000729C 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072A0 D040                       		add.w	d0,d0
000072A2 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000072A6 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000072AA                            ; ===========================================================================
000072AA 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000072AC 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000072AE 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000072B0                            ; ===========================================================================
000072B0                            
000072B0                            Resize_GHZ1:
000072B0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000072B6 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000072BC 6500                       		bcs.s	locret_6E08	; if not, branch
000072BE 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000072C4                            
000072C4                            locret_6E08:
000072C4 4E75                       		rts	
000072C6                            ; ===========================================================================
000072C6                            
000072C6                            Resize_GHZ2:
000072C6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072CC 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000072D2 6500                       		bcs.s	locret_6E3A
000072D4 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000072DA 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000072E0 6500                       		bcs.s	locret_6E3A
000072E2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072E8 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000072EE 6500                       		bcs.s	locret_6E3A
000072F0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072F6                            
000072F6                            locret_6E3A:
000072F6 4E75                       		rts	
000072F8                            ; ===========================================================================
000072F8                            
000072F8                            Resize_GHZ3:
000072F8 7000                       		moveq	#0,d0
000072FA 1038 F742                  		move.b	($FFFFF742).w,d0
000072FE 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007302 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007306                            ; ===========================================================================
00007306 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007308 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000730A 0000                       		dc.w Resize_GHZ3end-off_6E4A
0000730C                            ; ===========================================================================
0000730C                            
0000730C                            Resize_GHZ3main:
0000730C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007312 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007318 6500                       		bcs.s	locret_6E96
0000731A 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007320 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007326 6500                       		bcs.s	locret_6E96
00007328 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
0000732E 6500                       		bcs.s	loc_6E98
00007330 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007336 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000733C 6400                       		bcc.s	loc_6E8E
0000733E 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007344 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000734A                            
0000734A                            loc_6E8E:
0000734A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007350 6400                       		bcc.s	loc_6E98
00007352                            
00007352                            locret_6E96:
00007352 4E75                       		rts	
00007354                            ; ===========================================================================
00007354                            
00007354                            loc_6E98:
00007354 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000735A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000735E 4E75                       		rts	
00007360                            ; ===========================================================================
00007360                            
00007360                            Resize_GHZ3boss:
00007360 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007366 6400                       		bcc.s	loc_6EB0
00007368 5538 F742                  		subq.b	#2,($FFFFF742).w
0000736C                            
0000736C                            loc_6EB0:
0000736C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007372 6500                       		bcs.s	locret_6EE8
00007374 6100 0000                  		bsr.w	SingleObjLoad
00007378 6600                       		bne.s	loc_6ED0
0000737A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000737E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007384 337C 0280 000C             		move.w	#$280,$C(a1)
0000738A                            
0000738A                            loc_6ED0:
0000738A 303C 008C                  		move.w	#$8C,d0
0000738E 6100 A226                  		bsr.w	PlaySound	; play boss music
00007392 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000739C 7011                       		moveq	#$11,d0
0000739E 6000 A400                  		bra.w	LoadPLC		; load boss patterns
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            locret_6EE8:
000073A2 4E75                       		rts	
000073A4                            ; ===========================================================================
000073A4                            
000073A4                            Resize_GHZ3end:
000073A4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073AA 4E75                       		rts	
000073AC                            ; ===========================================================================
000073AC                            ; ---------------------------------------------------------------------------
000073AC                            ; Labyrinth Zone dynamic screen	resizing
000073AC                            ; ---------------------------------------------------------------------------
000073AC                            
000073AC                            Resize_LZ:				; XREF: Resize_Index
000073AC 7000                       		moveq	#0,d0
000073AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073B2 D040                       		add.w	d0,d0
000073B4 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000073B8 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000073BC                            ; ===========================================================================
000073BC 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000073BE 0000                       		dc.w Resize_LZ12-Resize_LZx
000073C0 0000                       		dc.w Resize_LZ3-Resize_LZx
000073C2 0000                       		dc.w Resize_SBZ3-Resize_LZx
000073C4                            ; ===========================================================================
000073C4                            
000073C4                            Resize_LZ12:
000073C4 4E75                       		rts	
000073C6                            ; ===========================================================================
000073C6                            
000073C6                            Resize_LZ3:
000073C6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000073CA 6700                       		beq.s	loc_6F28	; if not, branch
000073CC 43F8 A506                  		lea	($FFFFA506).w,a1
000073D0 0C11 0007                  		cmpi.b	#7,(a1)
000073D4 6700                       		beq.s	loc_6F28
000073D6 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000073DA 303C 00B7                  		move.w	#$B7,d0
000073DE 6100 A1DC                  		bsr.w	PlaySound_Special ; play rumbling sound
000073E2                            
000073E2                            loc_6F28:
000073E2 4A38 F742                  		tst.b	($FFFFF742).w
000073E6 6600                       		bne.s	locret_6F64
000073E8 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000073EE 6500                       		bcs.s	locret_6F62
000073F0 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000073F6 6400                       		bcc.s	locret_6F62
000073F8 6100 0000                  		bsr.w	SingleObjLoad
000073FC 6600                       		bne.s	loc_6F4A
000073FE 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007402                            
00007402                            loc_6F4A:
00007402 303C 008C                  		move.w	#$8C,d0
00007406 6100 A1AE                  		bsr.w	PlaySound	; play boss music
0000740A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007410 5438 F742                  		addq.b	#2,($FFFFF742).w
00007414 7011                       		moveq	#$11,d0
00007416 6000 A388                  		bra.w	LoadPLC		; load boss patterns
0000741A                            ; ===========================================================================
0000741A                            
0000741A                            locret_6F62:
0000741A 4E75                       		rts	
0000741C                            ; ===========================================================================
0000741C                            
0000741C                            locret_6F64:
0000741C 4E75                       		rts	
0000741E                            ; ===========================================================================
0000741E                            
0000741E                            Resize_SBZ3:
0000741E 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007424 6500                       		bcs.s	locret_6F8C
00007426 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000742C 6400                       		bcc.s	locret_6F8C	; if not, branch
0000742E 4238 FE30                  		clr.b	($FFFFFE30).w
00007432 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007438 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000743E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007444                            
00007444                            locret_6F8C:
00007444 4E75                       		rts	
00007446                            ; ===========================================================================
00007446                            ; ---------------------------------------------------------------------------
00007446                            ; Marble Zone dynamic screen resizing
00007446                            ; ---------------------------------------------------------------------------
00007446                            
00007446                            Resize_MZ:				; XREF: Resize_Index
00007446 7000                       		moveq	#0,d0
00007448 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000744C D040                       		add.w	d0,d0
0000744E 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007452 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007456                            ; ===========================================================================
00007456 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007458 0000                       		dc.w Resize_MZ2-Resize_MZx
0000745A 0000                       		dc.w Resize_MZ3-Resize_MZx
0000745C                            ; ===========================================================================
0000745C                            
0000745C                            Resize_MZ1:
0000745C 7000                       		moveq	#0,d0
0000745E 1038 F742                  		move.b	($FFFFF742).w,d0
00007462 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007466 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000746A                            ; ===========================================================================
0000746A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000746C 0000                       		dc.w loc_6FEA-off_6FB2
0000746E 0000                       		dc.w loc_702E-off_6FB2
00007470 0000                       		dc.w loc_7050-off_6FB2
00007472                            ; ===========================================================================
00007472                            
00007472                            loc_6FBA:
00007472 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007478 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000747E 6500                       		bcs.s	locret_6FE8
00007480 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007486 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000748C 6500                       		bcs.s	locret_6FE8
0000748E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007494 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_6FE8
0000749C 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A0                            
000074A0                            locret_6FE8:
000074A0 4E75                       		rts	
000074A2                            ; ===========================================================================
000074A2                            
000074A2                            loc_6FEA:
000074A2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074A8 6400                       		bcc.s	loc_6FF8
000074AA 5538 F742                  		subq.b	#2,($FFFFF742).w
000074AE 4E75                       		rts	
000074B0                            ; ===========================================================================
000074B0                            
000074B0                            loc_6FF8:
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000074BC 6400                       		bcc.s	locret_702C
000074BE 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000074C4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074CA 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000074D0 6400                       		bcc.s	locret_702C
000074D2 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074D8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000074DE 6500                       		bcs.s	locret_702C
000074E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000074E4                            
000074E4                            locret_702C:
000074E4 4E75                       		rts	
000074E6                            ; ===========================================================================
000074E6                            
000074E6                            loc_702E:
000074E6 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000074EC 6400                       		bcc.s	loc_703C
000074EE 5538 F742                  		subq.b	#2,($FFFFF742).w
000074F2 4E75                       		rts	
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            loc_703C:
000074F4 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000074FA 6500                       		bcs.s	locret_704E
000074FC 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007502 5438 F742                  		addq.b	#2,($FFFFF742).w
00007506                            
00007506                            locret_704E:
00007506 4E75                       		rts	
00007508                            ; ===========================================================================
00007508                            
00007508                            loc_7050:
00007508 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_7072
00007510 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007516 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000751C 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007522 6500                       		bcs.s	locret_7072
00007524 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000752A                            
0000752A                            locret_7072:
0000752A 4E75                       		rts	
0000752C                            ; ===========================================================================
0000752C                            
0000752C                            Resize_MZ2:
0000752C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007532 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007538 6500                       		bcs.s	locret_7088
0000753A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007540                            
00007540                            locret_7088:
00007540 4E75                       		rts	
00007542                            ; ===========================================================================
00007542                            
00007542                            Resize_MZ3:
00007542 7000                       		moveq	#0,d0
00007544 1038 F742                  		move.b	($FFFFF742).w,d0
00007548 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000754C 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007550                            ; ===========================================================================
00007550 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007552 0000                       		dc.w Resize_MZ3end-off_7098
00007554                            ; ===========================================================================
00007554                            
00007554                            Resize_MZ3boss:
00007554 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000755A 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007560 6500                       		bcs.s	locret_70E8
00007562 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007568 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000756E 6500                       		bcs.s	locret_70E8
00007570 6100 0000                  		bsr.w	SingleObjLoad
00007574 6600                       		bne.s	loc_70D0
00007576 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000757A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007580 337C 022C 000C             		move.w	#$22C,$C(a1)
00007586                            
00007586                            loc_70D0:
00007586 303C 008C                  		move.w	#$8C,d0
0000758A 6100 A02A                  		bsr.w	PlaySound	; play boss music
0000758E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007594 5438 F742                  		addq.b	#2,($FFFFF742).w
00007598 7011                       		moveq	#$11,d0
0000759A 6000 A204                  		bra.w	LoadPLC		; load boss patterns
0000759E                            ; ===========================================================================
0000759E                            
0000759E                            locret_70E8:
0000759E 4E75                       		rts	
000075A0                            ; ===========================================================================
000075A0                            
000075A0                            Resize_MZ3end:
000075A0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075A6 4E75                       		rts	
000075A8                            ; ===========================================================================
000075A8                            ; ---------------------------------------------------------------------------
000075A8                            ; Star Light Zone dynamic screen resizing
000075A8                            ; ---------------------------------------------------------------------------
000075A8                            
000075A8                            Resize_SLZ:				; XREF: Resize_Index
000075A8 7000                       		moveq	#0,d0
000075AA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075AE D040                       		add.w	d0,d0
000075B0 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000075B4 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000075B8                            ; ===========================================================================
000075B8 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000075BA 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000075BC 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000075BE                            ; ===========================================================================
000075BE                            
000075BE                            Resize_SLZ12:
000075BE 4E75                       		rts	
000075C0                            ; ===========================================================================
000075C0                            
000075C0                            Resize_SLZ3:
000075C0 7000                       		moveq	#0,d0
000075C2 1038 F742                  		move.b	($FFFFF742).w,d0
000075C6 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000075D0 0000                       		dc.w Resize_SLZ3boss-off_7118
000075D2 0000                       		dc.w Resize_SLZ3end-off_7118
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SLZ3main:
000075D4 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000075DA 6500                       		bcs.s	locret_7130
000075DC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000075E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075E6                            
000075E6                            locret_7130:
000075E6 4E75                       		rts	
000075E8                            ; ===========================================================================
000075E8                            
000075E8                            Resize_SLZ3boss:
000075E8 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000075EE 6500                       		bcs.s	locret_715C
000075F0 6100 0000                  		bsr.w	SingleObjLoad
000075F4 6600                       		bne.s	loc_7144
000075F6 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000075FA                            
000075FA                            loc_7144:
000075FA 303C 008C                  		move.w	#$8C,d0
000075FE 6100 9FB6                  		bsr.w	PlaySound	; play boss music
00007602 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007608 5438 F742                  		addq.b	#2,($FFFFF742).w
0000760C 7011                       		moveq	#$11,d0
0000760E 6000 A190                  		bra.w	LoadPLC		; load boss patterns
00007612                            ; ===========================================================================
00007612                            
00007612                            locret_715C:
00007612 4E75                       		rts	
00007614                            ; ===========================================================================
00007614                            
00007614                            Resize_SLZ3end:
00007614 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000761A 4E75                       		rts
0000761C 4E75                       		rts
0000761E                            ; ===========================================================================
0000761E                            ; ---------------------------------------------------------------------------
0000761E                            ; Spring Yard Zone dynamic screen resizing
0000761E                            ; ---------------------------------------------------------------------------
0000761E                            
0000761E                            Resize_SYZ:				; XREF: Resize_Index
0000761E 7000                       		moveq	#0,d0
00007620 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007624 D040                       		add.w	d0,d0
00007626 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000762A 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000762E                            ; ===========================================================================
0000762E 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007630 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007632 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007634                            ; ===========================================================================
00007634                            
00007634                            Resize_SYZ1:
00007634 4E75                       		rts	
00007636                            ; ===========================================================================
00007636                            
00007636                            Resize_SYZ2:
00007636 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000763C 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007642 6500                       		bcs.s	locret_71A2
00007644 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000764A 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007650 6500                       		bcs.s	locret_71A2
00007652 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007658                            
00007658                            locret_71A2:
00007658 4E75                       		rts	
0000765A                            ; ===========================================================================
0000765A                            
0000765A                            Resize_SYZ3:
0000765A 7000                       		moveq	#0,d0
0000765C 1038 F742                  		move.b	($FFFFF742).w,d0
00007660 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007664 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007668                            ; ===========================================================================
00007668 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000766A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000766C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000766E                            ; ===========================================================================
0000766E                            
0000766E                            Resize_SYZ3main:
0000766E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007674 6500                       		bcs.s	locret_71CE
00007676 6100 0000                  		bsr.w	SingleObjLoad
0000767A 6600                       		bne.s	locret_71CE
0000767C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007680 5438 F742                  		addq.b	#2,($FFFFF742).w
00007684                            
00007684                            locret_71CE:
00007684 4E75                       		rts	
00007686                            ; ===========================================================================
00007686                            
00007686                            Resize_SYZ3boss:
00007686 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000768C 6500                       		bcs.s	locret_7200
0000768E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007694 6100 0000                  		bsr.w	SingleObjLoad
00007698 6600                       		bne.s	loc_71EC
0000769A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000769E 5438 F742                  		addq.b	#2,($FFFFF742).w
000076A2                            
000076A2                            loc_71EC:
000076A2 303C 008C                  		move.w	#$8C,d0
000076A6 6100 9F0E                  		bsr.w	PlaySound	; play boss music
000076AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076B0 7011                       		moveq	#$11,d0
000076B2 6000 A0EC                  		bra.w	LoadPLC		; load boss patterns
000076B6                            ; ===========================================================================
000076B6                            
000076B6                            locret_7200:
000076B6 4E75                       		rts	
000076B8                            ; ===========================================================================
000076B8                            
000076B8                            Resize_SYZ3end:
000076B8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076BE 4E75                       		rts	
000076C0                            ; ===========================================================================
000076C0                            ; ---------------------------------------------------------------------------
000076C0                            ; Scrap	Brain Zone dynamic screen resizing
000076C0                            ; ---------------------------------------------------------------------------
000076C0                            
000076C0                            Resize_SBZ:				; XREF: Resize_Index
000076C0 7000                       		moveq	#0,d0
000076C2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076C6 D040                       		add.w	d0,d0
000076C8 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000076CC 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000076D0                            ; ===========================================================================
000076D0 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000076D2 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000076D4 0000                       		dc.w Resize_FZ-Resize_SBZx
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_SBZ1:
000076D6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076DC 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000076E2 6500                       		bcs.s	locret_7242
000076E4 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000076EA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000076F0 6500                       		bcs.s	locret_7242
000076F2 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000076F8                            
000076F8                            locret_7242:
000076F8 4E75                       		rts	
000076FA                            ; ===========================================================================
000076FA                            
000076FA                            Resize_SBZ2:
000076FA 7000                       		moveq	#0,d0
000076FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007700 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007704 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007708                            ; ===========================================================================
00007708 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000770A 0000                       		dc.w Resize_SBZ2boss-off_7252
0000770C 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000770E 0000                       		dc.w Resize_SBZ2end-off_7252
00007710                            ; ===========================================================================
00007710                            
00007710                            Resize_SBZ2main:
00007710 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007716 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000771C 6500                       		bcs.s	locret_727A
0000771E 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007724 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000772A 6500                       		bcs.s	locret_727A
0000772C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007730                            
00007730                            locret_727A:
00007730 4E75                       		rts	
00007732                            ; ===========================================================================
00007732                            
00007732                            Resize_SBZ2boss:
00007732 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007738 6500                       		bcs.s	locret_7298
0000773A 6100 0000                  		bsr.w	SingleObjLoad
0000773E 6600                       		bne.s	locret_7298
00007740 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007744 5438 F742                  		addq.b	#2,($FFFFF742).w
00007748 701E                       		moveq	#$1E,d0
0000774A 6000 A054                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000774E                            ; ===========================================================================
0000774E                            
0000774E                            locret_7298:
0000774E 4E75                       		rts	
00007750                            ; ===========================================================================
00007750                            
00007750                            Resize_SBZ2boss2:
00007750 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007756 6500                       		bcs.s	loc_72B6
00007758 6100 0000                  		bsr.w	SingleObjLoad
0000775C 6600                       		bne.s	loc_72B0
0000775E 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007762 5438 F742                  		addq.b	#2,($FFFFF742).w
00007766                            
00007766                            loc_72B0:
00007766 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000776C                            
0000776C                            loc_72B6:
0000776C 6000                       		bra.s	loc_72C2
0000776E                            ; ===========================================================================
0000776E                            
0000776E                            Resize_SBZ2end:
0000776E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007774 6500                       		bcs.s	loc_72C2
00007776 4E75                       		rts	
00007778                            ; ===========================================================================
00007778                            
00007778                            loc_72C2:
00007778 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000777E 4E75                       		rts	
00007780                            ; ===========================================================================
00007780                            
00007780                            Resize_FZ:
00007780 7000                       		moveq	#0,d0
00007782 1038 F742                  		move.b	($FFFFF742).w,d0
00007786 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000778A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000778E                            ; ===========================================================================
0000778E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007792 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007796 0000                       		dc.w Resize_FZend2-off_72D8
00007798                            ; ===========================================================================
00007798                            
00007798                            Resize_FZmain:
00007798 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000779E 6500                       		bcs.s	loc_72F4
000077A0 5438 F742                  		addq.b	#2,($FFFFF742).w
000077A4 701F                       		moveq	#$1F,d0
000077A6 6100 9FF8                  		bsr.w	LoadPLC		; load FZ boss patterns
000077AA                            
000077AA                            loc_72F4:
000077AA 60CC                       		bra.s	loc_72C2
000077AC                            ; ===========================================================================
000077AC                            
000077AC                            Resize_FZboss:
000077AC 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000077B2 6500                       		bcs.s	loc_7312
000077B4 6100 0000                  		bsr.w	SingleObjLoad
000077B8 6600                       		bne.s	loc_7312
000077BA 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000077BE 5438 F742                  		addq.b	#2,($FFFFF742).w
000077C2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077C8                            
000077C8                            loc_7312:
000077C8 60AE                       		bra.s	loc_72C2
000077CA                            ; ===========================================================================
000077CA                            
000077CA                            Resize_FZend:
000077CA 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000077D0 6500                       		bcs.s	loc_7320
000077D2 5438 F742                  		addq.b	#2,($FFFFF742).w
000077D6                            
000077D6                            loc_7320:
000077D6 60A0                       		bra.s	loc_72C2
000077D8                            ; ===========================================================================
000077D8                            
000077D8                            locret_7322:
000077D8 4E75                       		rts	
000077DA                            ; ===========================================================================
000077DA                            
000077DA                            Resize_FZend2:
000077DA 609C                       		bra.s	loc_72C2
000077DC                            ; ===========================================================================
000077DC                            ; ---------------------------------------------------------------------------
000077DC                            ; Ending sequence dynamic screen resizing (empty)
000077DC                            ; ---------------------------------------------------------------------------
000077DC                            
000077DC                            Resize_Ending:				; XREF: Resize_Index
000077DC 4E75                       		rts	
000077DE                            ; ===========================================================================
000077DE                            ; ---------------------------------------------------------------------------
000077DE                            ; Object 11 - GHZ bridge
000077DE                            ; ---------------------------------------------------------------------------
000077DE                            
000077DE                            Obj11:					; XREF: Obj_Index
000077DE 7000                       		moveq	#0,d0
000077E0 1028 0024                  		move.b	$24(a0),d0
000077E4 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000077E8 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000077EC                            ; ===========================================================================
000077EC 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000077F0 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000077F4 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000077F8                            ; ===========================================================================
000077F8                            
000077F8                            Obj11_Main:				; XREF: Obj11_Index
000077F8 5428 0024                  		addq.b	#2,$24(a0)
000077FC 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007804 317C 438E 0002             		move.w	#$438E,2(a0)
0000780A 117C 0004 0001             		move.b	#4,1(a0)
00007810 117C 0003 0018             		move.b	#3,$18(a0)
00007816 117C 0080 0019             		move.b	#$80,$19(a0)
0000781C 3428 000C                  		move.w	$C(a0),d2
00007820 3628 0008                  		move.w	8(a0),d3
00007824 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007826 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000782A 7200                       		moveq	#0,d1
0000782C 1212                       		move.b	(a2),d1		; copy a2 to d1
0000782E 14FC 0000                  		move.b	#0,(a2)+
00007832 3001                       		move.w	d1,d0
00007834 E248                       		lsr.w	#1,d0
00007836 E948                       		lsl.w	#4,d0
00007838 9640                       		sub.w	d0,d3
0000783A 5501                       		subq.b	#2,d1
0000783C 6500                       		bcs.s	Obj11_Action
0000783E                            
0000783E                            Obj11_MakeBdg:
0000783E 6100 0000                  		bsr.w	SingleObjLoad
00007842 6600                       		bne.s	Obj11_Action
00007844 5228 0028                  		addq.b	#1,$28(a0)
00007848 B668 0008                  		cmp.w	8(a0),d3
0000784C 6600                       		bne.s	loc_73B8
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 3142 000C                  		move.w	d2,$C(a0)
00007856 3142 003C                  		move.w	d2,$3C(a0)
0000785A 3A08                       		move.w	a0,d5
0000785C 0445 D000                  		subi.w	#-$3000,d5
00007860 EC4D                       		lsr.w	#6,d5
00007862 0245 007F                  		andi.w	#$7F,d5
00007866 14C5                       		move.b	d5,(a2)+
00007868 5228 0028                  		addq.b	#1,$28(a0)
0000786C                            
0000786C                            loc_73B8:				; XREF: ROM:00007398j
0000786C 3A09                       		move.w	a1,d5
0000786E 0445 D000                  		subi.w	#-$3000,d5
00007872 EC4D                       		lsr.w	#6,d5
00007874 0245 007F                  		andi.w	#$7F,d5
00007878 14C5                       		move.b	d5,(a2)+
0000787A 137C 000A 0024             		move.b	#$A,$24(a1)
00007880 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007882 3342 000C                  		move.w	d2,$C(a1)
00007886 3342 003C                  		move.w	d2,$3C(a1)
0000788A 3343 0008                  		move.w	d3,8(a1)
0000788E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007896 337C 438E 0002             		move.w	#$438E,2(a1)
0000789C 137C 0004 0001             		move.b	#4,1(a1)
000078A2 137C 0003 0018             		move.b	#3,$18(a1)
000078A8 137C 0008 0019             		move.b	#8,$19(a1)
000078AE 0643 0010                  		addi.w	#$10,d3
000078B2 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000078B6                            
000078B6                            Obj11_Action:				; XREF: Obj11_Index
000078B6 6100                       		bsr.s	Obj11_Solid
000078B8 4A28 003E                  		tst.b	$3E(a0)
000078BC 6700                       		beq.s	Obj11_Display
000078BE 5928 003E                  		subq.b	#4,$3E(a0)
000078C2 6100 0000                  		bsr.w	Obj11_Bend
000078C6                            
000078C6                            Obj11_Display:
000078C6 6100 0000                  		bsr.w	DisplaySprite
000078CA 6000 0000                  		bra.w	Obj11_ChkDel
000078CE                            
000078CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078CE                            
000078CE                            
000078CE                            Obj11_Solid:				; XREF: Obj11_Action
000078CE 7200                       		moveq	#0,d1
000078D0 1228 0028                  		move.b	$28(a0),d1
000078D4 E749                       		lsl.w	#3,d1
000078D6 3401                       		move.w	d1,d2
000078D8 5041                       		addq.w	#8,d1
000078DA D442                       		add.w	d2,d2
000078DC 43F8 D000                  		lea	($FFFFD000).w,a1
000078E0 4A69 0012                  		tst.w	$12(a1)
000078E4 6B00 0000                  		bmi.w	locret_751E
000078E8 3029 0008                  		move.w	8(a1),d0
000078EC 9068 0008                  		sub.w	8(a0),d0
000078F0 D041                       		add.w	d1,d0
000078F2 6B00 0000                  		bmi.w	locret_751E
000078F6 B042                       		cmp.w	d2,d0
000078F8 6400 0000                  		bcc.w	locret_751E
000078FC 6000                       		bra.s	Platform2
000078FE                            ; End of function Obj11_Solid
000078FE                            
000078FE                            ; ---------------------------------------------------------------------------
000078FE                            ; Platform subroutine
000078FE                            ; ---------------------------------------------------------------------------
000078FE                            
000078FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078FE                            
000078FE                            
000078FE                            PlatformObject:
000078FE 43F8 D000                  		lea	($FFFFD000).w,a1
00007902 4A69 0012                  		tst.w	$12(a1)
00007906 6B00 0000                  		bmi.w	locret_751E
0000790A 3029 0008                  		move.w	8(a1),d0
0000790E 9068 0008                  		sub.w	8(a0),d0
00007912 D041                       		add.w	d1,d0
00007914 6B00 0000                  		bmi.w	locret_751E
00007918 D241                       		add.w	d1,d1
0000791A B041                       		cmp.w	d1,d0
0000791C 6400 0000                  		bcc.w	locret_751E
00007920                            
00007920                            Platform2:
00007920 3028 000C                  		move.w	$C(a0),d0
00007924 5140                       		subq.w	#8,d0
00007926                            
00007926                            Platform3:
00007926 3429 000C                  		move.w	$C(a1),d2
0000792A 1229 0016                  		move.b	$16(a1),d1
0000792E 4881                       		ext.w	d1
00007930 D242                       		add.w	d2,d1
00007932 5841                       		addq.w	#4,d1
00007934 9041                       		sub.w	d1,d0
00007936 6200 0000                  		bhi.w	locret_751E
0000793A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000793E 6500 0000                  		bcs.w	locret_751E
00007942 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007946 6B00 0000                  		bmi.w	locret_751E
0000794A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007950 6400 0000                  		bcc.w	locret_751E
00007954 D440                       		add.w	d0,d2
00007956 5642                       		addq.w	#3,d2
00007958 3342 000C                  		move.w	d2,$C(a1)
0000795C 5428 0024                  		addq.b	#2,$24(a0)
00007960                            
00007960                            loc_74AE:
00007960 0829 0003 0022             		btst	#3,$22(a1)
00007966 6700                       		beq.s	loc_74DC
00007968 7000                       		moveq	#0,d0
0000796A 1029 003D                  		move.b	$3D(a1),d0
0000796E ED48                       		lsl.w	#6,d0
00007970 0680 00FF D000             		addi.l	#$FFD000,d0
00007976 2440                       		movea.l	d0,a2
00007978 08AA 0003 0022             		bclr	#3,$22(a2)
0000797E 422A 0025                  		clr.b	$25(a2)
00007982 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007988 6600                       		bne.s	loc_74DC
0000798A 552A 0024                  		subq.b	#2,$24(a2)
0000798E                            
0000798E                            loc_74DC:
0000798E 3008                       		move.w	a0,d0
00007990 0440 D000                  		subi.w	#-$3000,d0
00007994 EC48                       		lsr.w	#6,d0
00007996 0240 007F                  		andi.w	#$7F,d0
0000799A 1340 003D                  		move.b	d0,$3D(a1)
0000799E 137C 0000 0026             		move.b	#0,$26(a1)
000079A4 337C 0000 0012             		move.w	#0,$12(a1)
000079AA 3369 0010 0014             		move.w	$10(a1),$14(a1)
000079B0 0829 0001 0022             		btst	#1,$22(a1)
000079B6 6700                       		beq.s	loc_7512
000079B8 2F08                       		move.l	a0,-(sp)
000079BA 2049                       		movea.l	a1,a0
000079BC 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000079C2 205F                       		movea.l	(sp)+,a0
000079C4                            
000079C4                            loc_7512:
000079C4 08E9 0003 0022             		bset	#3,$22(a1)
000079CA 08E8 0003 0022             		bset	#3,$22(a0)
000079D0                            
000079D0                            locret_751E:
000079D0 4E75                       		rts	
000079D2                            ; End of function PlatformObject
000079D2                            
000079D2                            ; ---------------------------------------------------------------------------
000079D2                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000079D2                            ; ---------------------------------------------------------------------------
000079D2                            
000079D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079D2                            
000079D2                            
000079D2                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000079D2 43F8 D000                  		lea	($FFFFD000).w,a1
000079D6 4A69 0012                  		tst.w	$12(a1)
000079DA 6B00 FFF4                  		bmi.w	locret_751E
000079DE 3029 0008                  		move.w	8(a1),d0
000079E2 9068 0008                  		sub.w	8(a0),d0
000079E6 D041                       		add.w	d1,d0
000079E8 6BE6                       		bmi.s	locret_751E
000079EA D241                       		add.w	d1,d1
000079EC B041                       		cmp.w	d1,d0
000079EE 64E0                       		bcc.s	locret_751E
000079F0 0828 0000 0001             		btst	#0,1(a0)
000079F6 6700                       		beq.s	loc_754A
000079F8 4640                       		not.w	d0
000079FA D041                       		add.w	d1,d0
000079FC                            
000079FC                            loc_754A:
000079FC E248                       		lsr.w	#1,d0
000079FE 7600                       		moveq	#0,d3
00007A00 1632 0000                  		move.b	(a2,d0.w),d3
00007A04 3028 000C                  		move.w	$C(a0),d0
00007A08 9043                       		sub.w	d3,d0
00007A0A 6000 FF1A                  		bra.w	Platform3
00007A0E                            ; End of function SlopeObject
00007A0E                            
00007A0E                            
00007A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A0E                            
00007A0E                            
00007A0E                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007A0E 43F8 D000                  		lea	($FFFFD000).w,a1
00007A12 4A69 0012                  		tst.w	$12(a1)
00007A16 6B00 FFB8                  		bmi.w	locret_751E
00007A1A 3029 0008                  		move.w	8(a1),d0
00007A1E 9068 0008                  		sub.w	8(a0),d0
00007A22 D041                       		add.w	d1,d0
00007A24 6B00 FFAA                  		bmi.w	locret_751E
00007A28 D241                       		add.w	d1,d1
00007A2A B041                       		cmp.w	d1,d0
00007A2C 6400 FFA2                  		bcc.w	locret_751E
00007A30 3028 000C                  		move.w	$C(a0),d0
00007A34 9043                       		sub.w	d3,d0
00007A36 6000 FEEE                  		bra.w	Platform3
00007A3A                            ; End of function Obj15_Solid
00007A3A                            
00007A3A                            ; ===========================================================================
00007A3A                            
00007A3A                            Obj11_Action2:				; XREF: Obj11_Index
00007A3A 6100                       		bsr.s	Obj11_WalkOff
00007A3C 6100 0000                  		bsr.w	DisplaySprite
00007A40 6000 0000                  		bra.w	Obj11_ChkDel
00007A44                            
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            ; Subroutine allowing Sonic to walk off a bridge
00007A44                            ; ---------------------------------------------------------------------------
00007A44                            
00007A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A44                            
00007A44                            
00007A44                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007A44 7200                       		moveq	#0,d1
00007A46 1228 0028                  		move.b	$28(a0),d1
00007A4A E749                       		lsl.w	#3,d1
00007A4C 3401                       		move.w	d1,d2
00007A4E 5041                       		addq.w	#8,d1
00007A50 6100                       		bsr.s	ExitPlatform2
00007A52 6400                       		bcc.s	locret_75BE
00007A54 E848                       		lsr.w	#4,d0
00007A56 1140 003F                  		move.b	d0,$3F(a0)
00007A5A 1028 003E                  		move.b	$3E(a0),d0
00007A5E 0C00 0040                  		cmpi.b	#$40,d0
00007A62 6700                       		beq.s	loc_75B6
00007A64 5828 003E                  		addq.b	#4,$3E(a0)
00007A68                            
00007A68                            loc_75B6:
00007A68 6100 0000                  		bsr.w	Obj11_Bend
00007A6C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A70                            
00007A70                            locret_75BE:
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_WalkOff
00007A72                            
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A72                            ; ---------------------------------------------------------------------------
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            ExitPlatform:
00007A72 3401                       		move.w	d1,d2
00007A74                            
00007A74                            ExitPlatform2:
00007A74 D442                       		add.w	d2,d2
00007A76 43F8 D000                  		lea	($FFFFD000).w,a1
00007A7A 0829 0001 0022             		btst	#1,$22(a1)
00007A80 6600                       		bne.s	loc_75E0
00007A82 3029 0008                  		move.w	8(a1),d0
00007A86 9068 0008                  		sub.w	8(a0),d0
00007A8A D041                       		add.w	d1,d0
00007A8C 6B00                       		bmi.s	loc_75E0
00007A8E B042                       		cmp.w	d2,d0
00007A90 6500                       		bcs.s	locret_75F2
00007A92                            
00007A92                            loc_75E0:
00007A92 08A9 0003 0022             		bclr	#3,$22(a1)
00007A98 117C 0002 0024             		move.b	#2,$24(a0)
00007A9E 08A8 0003 0022             		bclr	#3,$22(a0)
00007AA4                            
00007AA4                            locret_75F2:
00007AA4 4E75                       		rts	
00007AA6                            ; End of function ExitPlatform
00007AA6                            
00007AA6                            
00007AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AA6                            
00007AA6                            
00007AA6                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007AA6 7000                       		moveq	#0,d0
00007AA8 1028 003F                  		move.b	$3F(a0),d0
00007AAC 1030 0029                  		move.b	$29(a0,d0.w),d0
00007AB0 ED48                       		lsl.w	#6,d0
00007AB2 0680 00FF D000             		addi.l	#$FFD000,d0
00007AB8 2440                       		movea.l	d0,a2
00007ABA 43F8 D000                  		lea	($FFFFD000).w,a1
00007ABE 302A 000C                  		move.w	$C(a2),d0
00007AC2 5140                       		subq.w	#8,d0
00007AC4 7200                       		moveq	#0,d1
00007AC6 1229 0016                  		move.b	$16(a1),d1
00007ACA 9041                       		sub.w	d1,d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007AD0 4E75                       		rts	
00007AD2                            ; End of function Obj11_MoveSonic
00007AD2                            
00007AD2                            
00007AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AD2                            
00007AD2                            
00007AD2                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007AD2 1028 003E                  		move.b	$3E(a0),d0
00007AD6 6100 B1AA                  		bsr.w	CalcSine
00007ADA 3800                       		move.w	d0,d4
00007ADC 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007AE2 7000                       		moveq	#0,d0
00007AE4 1028 0028                  		move.b	$28(a0),d0
00007AE8 E948                       		lsl.w	#4,d0
00007AEA 7600                       		moveq	#0,d3
00007AEC 1628 003F                  		move.b	$3F(a0),d3
00007AF0 3403                       		move.w	d3,d2
00007AF2 D640                       		add.w	d0,d3
00007AF4 7A00                       		moveq	#0,d5
00007AF6 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007AFC 1A35 3000                  		move.b	(a5,d3.w),d5
00007B00 0243 000F                  		andi.w	#$F,d3
00007B04 E94B                       		lsl.w	#4,d3
00007B06 47F4 3000                  		lea	(a4,d3.w),a3
00007B0A 45E8 0029                  		lea	$29(a0),a2
00007B0E                            
00007B0E                            loc_765C:
00007B0E 7000                       		moveq	#0,d0
00007B10 101A                       		move.b	(a2)+,d0
00007B12 ED48                       		lsl.w	#6,d0
00007B14 0680 00FF D000             		addi.l	#$FFD000,d0
00007B1A 2240                       		movea.l	d0,a1
00007B1C 7000                       		moveq	#0,d0
00007B1E 101B                       		move.b	(a3)+,d0
00007B20 5240                       		addq.w	#1,d0
00007B22 C0C5                       		mulu.w	d5,d0
00007B24 C0C4                       		mulu.w	d4,d0
00007B26 4840                       		swap	d0
00007B28 D069 003C                  		add.w	$3C(a1),d0
00007B2C 3340 000C                  		move.w	d0,$C(a1)
00007B30 51CA FFDC                  		dbf	d2,loc_765C
00007B34 7000                       		moveq	#0,d0
00007B36 1028 0028                  		move.b	$28(a0),d0
00007B3A 7600                       		moveq	#0,d3
00007B3C 1628 003F                  		move.b	$3F(a0),d3
00007B40 5203                       		addq.b	#1,d3
00007B42 9600                       		sub.b	d0,d3
00007B44 4403                       		neg.b	d3
00007B46 6B00                       		bmi.s	locret_76CA
00007B48 3403                       		move.w	d3,d2
00007B4A E94B                       		lsl.w	#4,d3
00007B4C 47F4 3000                  		lea	(a4,d3.w),a3
00007B50 D6C2                       		adda.w	d2,a3
00007B52 5342                       		subq.w	#1,d2
00007B54 6500                       		bcs.s	locret_76CA
00007B56                            
00007B56                            loc_76A4:
00007B56 7000                       		moveq	#0,d0
00007B58 101A                       		move.b	(a2)+,d0
00007B5A ED48                       		lsl.w	#6,d0
00007B5C 0680 00FF D000             		addi.l	#$FFD000,d0
00007B62 2240                       		movea.l	d0,a1
00007B64 7000                       		moveq	#0,d0
00007B66 1023                       		move.b	-(a3),d0
00007B68 5240                       		addq.w	#1,d0
00007B6A C0C5                       		mulu.w	d5,d0
00007B6C C0C4                       		mulu.w	d4,d0
00007B6E 4840                       		swap	d0
00007B70 D069 003C                  		add.w	$3C(a1),d0
00007B74 3340 000C                  		move.w	d0,$C(a1)
00007B78 51CA FFDC                  		dbf	d2,loc_76A4
00007B7C                            
00007B7C                            locret_76CA:
00007B7C 4E75                       		rts	
00007B7E                            ; End of function Obj11_Bend
00007B7E                            
00007B7E                            ; ===========================================================================
00007B7E                            ; ---------------------------------------------------------------------------
00007B7E                            ; GHZ bridge-bending data
00007B7E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B7E                            ; ---------------------------------------------------------------------------
00007B7E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C8E                            		even
00007C8E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D8E                            		even
00007D8E                            
00007D8E                            ; ===========================================================================
00007D8E                            
00007D8E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D8E 3028 0008                  		move.w	8(a0),d0
00007D92 0240 FF80                  		andi.w	#$FF80,d0
00007D96 3238 F700                  		move.w	($FFFFF700).w,d1
00007D9A 0441 0080                  		subi.w	#$80,d1
00007D9E 0241 FF80                  		andi.w	#$FF80,d1
00007DA2 9041                       		sub.w	d1,d0
00007DA4 0C40 0280                  		cmpi.w	#$280,d0
00007DA8 6200 0000                  		bhi.w	Obj11_DelAll
00007DAC 4E75                       		rts	
00007DAE                            ; ===========================================================================
00007DAE                            
00007DAE                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007DAE 7400                       		moveq	#0,d2
00007DB0 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007DB4 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007DB6 5302                       		subq.b	#1,d2		; subtract 1
00007DB8 6500                       		bcs.s	Obj11_Delete
00007DBA                            
00007DBA                            Obj11_DelLoop:
00007DBA 7000                       		moveq	#0,d0
00007DBC 101A                       		move.b	(a2)+,d0
00007DBE ED48                       		lsl.w	#6,d0
00007DC0 0680 00FF D000             		addi.l	#$FFD000,d0
00007DC6 2240                       		movea.l	d0,a1
00007DC8 B048                       		cmp.w	a0,d0
00007DCA 6700                       		beq.s	loc_791E
00007DCC 6100 0000                  		bsr.w	DeleteObject2
00007DD0                            
00007DD0                            loc_791E:
00007DD0 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007DD4                            
00007DD4                            Obj11_Delete:
00007DD4 6100 0000                  		bsr.w	DeleteObject
00007DD8 4E75                       		rts	
00007DDA                            ; ===========================================================================
00007DDA                            
00007DDA                            Obj11_Delete2:				; XREF: Obj11_Index
00007DDA 6100 0000                  		bsr.w	DeleteObject
00007DDE 4E75                       		rts	
00007DE0                            ; ===========================================================================
00007DE0                            
00007DE0                            Obj11_Display2:				; XREF: Obj11_Index
00007DE0 6100 0000                  		bsr.w	DisplaySprite
00007DE4 4E75                       		rts	
00007DE6                            ; ===========================================================================
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            ; Sprite mappings - GHZ	bridge
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            Map_obj11:
00007DE6                            	include "_maps\obj11.asm"
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            ; Sprite mappings - GHZ	bridge
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007DEA 0000                       		dc.w byte_794B-Map_obj11
00007DEC 01                         byte_793A:	dc.b 1
00007DED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007DF2 02                         byte_7940:	dc.b 2
00007DF3 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007DF8 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007DFD 01                         byte_794B:	dc.b 1
00007DFE FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007E04 00                         		even
00007E04 00                         		even
00007E04                            
00007E04                            ; ===========================================================================
00007E04                            ; ---------------------------------------------------------------------------
00007E04                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007E04                            ;	    - spiked ball on a chain (SBZ)
00007E04                            ; ---------------------------------------------------------------------------
00007E04                            
00007E04                            Obj15:					; XREF: Obj_Index
00007E04 7000                       		moveq	#0,d0
00007E06 1028 0024                  		move.b	$24(a0),d0
00007E0A 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007E0E 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007E12                            ; ===========================================================================
00007E12 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007E16 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007E1A 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007E1E 0000                       		dc.w Obj15_Action-Obj15_Index
00007E20                            ; ===========================================================================
00007E20                            
00007E20                            Obj15_Main:				; XREF: Obj15_Index
00007E20 5428 0024                  		addq.b	#2,$24(a0)
00007E24 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007E2C 317C 4380 0002             		move.w	#$4380,2(a0)
00007E32 117C 0004 0001             		move.b	#4,1(a0)
00007E38 117C 0003 0018             		move.b	#3,$18(a0)
00007E3E 117C 0018 0019             		move.b	#$18,$19(a0)
00007E44 117C 0008 0016             		move.b	#8,$16(a0)
00007E4A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007E50 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007E56 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E5C 6600                       		bne.s	Obj15_NotSLZ
00007E5E 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E66 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E6C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E72 117C 0010 0016             		move.b	#$10,$16(a0)
00007E78 117C 0099 0020             		move.b	#$99,$20(a0)
00007E7E                            
00007E7E                            Obj15_NotSLZ:
00007E7E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E84 6600                       		bne.s	Obj15_SetLength
00007E86 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E8E 317C 0391 0002             		move.w	#$391,2(a0)
00007E94 117C 0018 0019             		move.b	#$18,$19(a0)
00007E9A 117C 0018 0016             		move.b	#$18,$16(a0)
00007EA0 117C 0086 0020             		move.b	#$86,$20(a0)
00007EA6 117C 000C 0024             		move.b	#$C,$24(a0)
00007EAC                            
00007EAC                            Obj15_SetLength:
00007EAC 1810                       		move.b	0(a0),d4
00007EAE 7200                       		moveq	#0,d1
00007EB0 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007EB4 1212                       		move.b	(a2),d1		; move a2 to d1
00007EB6 3F01                       		move.w	d1,-(sp)
00007EB8 0241 000F                  		andi.w	#$F,d1
00007EBC 14FC 0000                  		move.b	#0,(a2)+
00007EC0 3601                       		move.w	d1,d3
00007EC2 E94B                       		lsl.w	#4,d3
00007EC4 5003                       		addq.b	#8,d3
00007EC6 1143 003C                  		move.b	d3,$3C(a0)
00007ECA 5103                       		subq.b	#8,d3
00007ECC 4A28 001A                  		tst.b	$1A(a0)
00007ED0 6700                       		beq.s	Obj15_MakeChain
00007ED2 5003                       		addq.b	#8,d3
00007ED4 5341                       		subq.w	#1,d1
00007ED6                            
00007ED6                            Obj15_MakeChain:
00007ED6 6100 0000                  		bsr.w	SingleObjLoad
00007EDA 6600                       		bne.s	loc_7A92
00007EDC 5228 0028                  		addq.b	#1,$28(a0)
00007EE0 3A09                       		move.w	a1,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 137C 000A 0024             		move.b	#$A,$24(a1)
00007EF4 1284                       		move.b	d4,0(a1)	; load swinging	object
00007EF6 2368 0004 0004             		move.l	4(a0),4(a1)
00007EFC 3368 0002 0002             		move.w	2(a0),2(a1)
00007F02 08A9 0006 0002             		bclr	#6,2(a1)
00007F08 137C 0004 0001             		move.b	#4,1(a1)
00007F0E 137C 0004 0018             		move.b	#4,$18(a1)
00007F14 137C 0008 0019             		move.b	#8,$19(a1)
00007F1A 137C 0001 001A             		move.b	#1,$1A(a1)
00007F20 1343 003C                  		move.b	d3,$3C(a1)
00007F24 0403 0010                  		subi.b	#$10,d3
00007F28 6400                       		bcc.s	loc_7A8E
00007F2A 137C 0002 001A             		move.b	#2,$1A(a1)
00007F30 137C 0003 0018             		move.b	#3,$18(a1)
00007F36 08E9 0006 0002             		bset	#6,2(a1)
00007F3C                            
00007F3C                            loc_7A8E:
00007F3C 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007F40                            
00007F40                            loc_7A92:
00007F40 3A08                       		move.w	a0,d5
00007F42 0445 D000                  		subi.w	#-$3000,d5
00007F46 EC4D                       		lsr.w	#6,d5
00007F48 0245 007F                  		andi.w	#$7F,d5
00007F4C 14C5                       		move.b	d5,(a2)+
00007F4E 317C 4080 0026             		move.w	#$4080,$26(a0)
00007F54 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007F5A 321F                       		move.w	(sp)+,d1
00007F5C 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F60 6700                       		beq.s	loc_7AD4	; if not, branch
00007F62 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F6A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F70 117C 0001 001A             		move.b	#1,$1A(a0)
00007F76 117C 0002 0018             		move.b	#2,$18(a0)
00007F7C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F82                            
00007F82                            loc_7AD4:
00007F82 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F88 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F8A                            
00007F8A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F8A 7200                       		moveq	#0,d1
00007F8C 1228 0019                  		move.b	$19(a0),d1
00007F90 7600                       		moveq	#0,d3
00007F92 1628 0016                  		move.b	$16(a0),d3
00007F96 6100 FA76                  		bsr.w	Obj15_Solid
00007F9A                            
00007F9A                            Obj15_Action:				; XREF: Obj15_Index
00007F9A 6100 0000                  		bsr.w	Obj15_Move
00007F9E 6100 0000                  		bsr.w	DisplaySprite
00007FA2 6000 0000                  		bra.w	Obj15_ChkDel
00007FA6                            ; ===========================================================================
00007FA6                            
00007FA6                            Obj15_Action2:				; XREF: Obj15_Index
00007FA6 7200                       		moveq	#0,d1
00007FA8 1228 0019                  		move.b	$19(a0),d1
00007FAC 6100 FAC4                  		bsr.w	ExitPlatform
00007FB0 3F28 0008                  		move.w	8(a0),-(sp)
00007FB4 6100 0000                  		bsr.w	Obj15_Move
00007FB8 341F                       		move.w	(sp)+,d2
00007FBA 7600                       		moveq	#0,d3
00007FBC 1628 0016                  		move.b	$16(a0),d3
00007FC0 5203                       		addq.b	#1,d3
00007FC2 6100 0000                  		bsr.w	MvSonicOnPtfm
00007FC6 6100 0000                  		bsr.w	DisplaySprite
00007FCA 6000 0000                  		bra.w	Obj15_ChkDel
00007FCE                            
00007FCE 4E75                       		rts
00007FD0                            
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            ; Subroutine to	change Sonic's position with a platform
00007FD0                            ; ---------------------------------------------------------------------------
00007FD0                            
00007FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD0                            
00007FD0                            
00007FD0                            MvSonicOnPtfm:
00007FD0 43F8 D000                  		lea	($FFFFD000).w,a1
00007FD4 3028 000C                  		move.w	$C(a0),d0
00007FD8 9043                       		sub.w	d3,d0
00007FDA 6000                       		bra.s	MvSonic2
00007FDC                            ; End of function MvSonicOnPtfm
00007FDC                            
00007FDC                            ; ---------------------------------------------------------------------------
00007FDC                            ; Subroutine to	change Sonic's position with a platform
00007FDC                            ; ---------------------------------------------------------------------------
00007FDC                            
00007FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FDC                            
00007FDC                            
00007FDC                            MvSonicOnPtfm2:
00007FDC 43F8 D000                  		lea	($FFFFD000).w,a1
00007FE0 3028 000C                  		move.w	$C(a0),d0
00007FE4 0440 0009                  		subi.w	#9,d0
00007FE8                            
00007FE8                            MvSonic2:
00007FE8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007FEC 6B00                       		bmi.s	locret_7B62
00007FEE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007FF4 6400                       		bcc.s	locret_7B62
00007FF6 4A78 FE08                  		tst.w	($FFFFFE08).w
00007FFA 6600                       		bne.s	locret_7B62
00007FFC 7200                       		moveq	#0,d1
00007FFE 1229 0016                  		move.b	$16(a1),d1
00008002 9041                       		sub.w	d1,d0
00008004 3340 000C                  		move.w	d0,$C(a1)
00008008 9468 0008                  		sub.w	8(a0),d2
0000800C 9569 0008                  		sub.w	d2,8(a1)
00008010                            
00008010                            locret_7B62:
00008010 4E75                       		rts	
00008012                            ; End of function MvSonicOnPtfm2
00008012                            
00008012                            
00008012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008012                            
00008012                            
00008012                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008012 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008016 323C 0080                  		move.w	#$80,d1
0000801A 0828 0000 0022             		btst	#0,$22(a0)
00008020 6700                       		beq.s	loc_7B78
00008022 4440                       		neg.w	d0
00008024 D041                       		add.w	d1,d0
00008026                            
00008026                            loc_7B78:
00008026 6000                       		bra.s	Obj15_Move2
00008028                            ; End of function Obj15_Move
00008028                            
00008028                            
00008028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008028                            
00008028                            
00008028                            Obj48_Move:				; XREF: Obj48_Display2
00008028 4A28 003D                  		tst.b	$3D(a0)
0000802C 6600                       		bne.s	loc_7B9C
0000802E 3028 003E                  		move.w	$3E(a0),d0
00008032 5040                       		addq.w	#8,d0
00008034 3140 003E                  		move.w	d0,$3E(a0)
00008038 D168 0026                  		add.w	d0,$26(a0)
0000803C 0C40 0200                  		cmpi.w	#$200,d0
00008040 6600                       		bne.s	loc_7BB6
00008042 117C 0001 003D             		move.b	#1,$3D(a0)
00008048 6000                       		bra.s	loc_7BB6
0000804A                            ; ===========================================================================
0000804A                            
0000804A                            loc_7B9C:
0000804A 3028 003E                  		move.w	$3E(a0),d0
0000804E 5140                       		subq.w	#8,d0
00008050 3140 003E                  		move.w	d0,$3E(a0)
00008054 D168 0026                  		add.w	d0,$26(a0)
00008058 0C40 FE00                  		cmpi.w	#-$200,d0
0000805C 6600                       		bne.s	loc_7BB6
0000805E 117C 0000 003D             		move.b	#0,$3D(a0)
00008064                            
00008064                            loc_7BB6:
00008064 1028 0026                  		move.b	$26(a0),d0
00008068                            ; End of function Obj48_Move
00008068                            
00008068                            
00008068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008068                            
00008068                            
00008068                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008068 6100 AC18                  		bsr.w	CalcSine
0000806C 3428 0038                  		move.w	$38(a0),d2
00008070 3628 003A                  		move.w	$3A(a0),d3
00008074 45E8 0028                  		lea	$28(a0),a2
00008078 7C00                       		moveq	#0,d6
0000807A 1C1A                       		move.b	(a2)+,d6
0000807C                            
0000807C                            loc_7BCE:
0000807C 7800                       		moveq	#0,d4
0000807E 181A                       		move.b	(a2)+,d4
00008080 ED4C                       		lsl.w	#6,d4
00008082 0684 00FF D000             		addi.l	#$FFD000,d4
00008088 2244                       		movea.l	d4,a1
0000808A 7800                       		moveq	#0,d4
0000808C 1829 003C                  		move.b	$3C(a1),d4
00008090 2A04                       		move.l	d4,d5
00008092 C9C0                       		muls.w	d0,d4
00008094 E084                       		asr.l	#8,d4
00008096 CBC1                       		muls.w	d1,d5
00008098 E085                       		asr.l	#8,d5
0000809A D842                       		add.w	d2,d4
0000809C DA43                       		add.w	d3,d5
0000809E 3344 000C                  		move.w	d4,$C(a1)
000080A2 3345 0008                  		move.w	d5,8(a1)
000080A6 51CE FFD4                  		dbf	d6,loc_7BCE
000080AA 4E75                       		rts	
000080AC                            ; End of function Obj15_Move2
000080AC                            
000080AC                            ; ===========================================================================
000080AC                            
000080AC                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000080AC 3028 003A                  		move.w	$3A(a0),d0
000080B0 0240 FF80                  		andi.w	#$FF80,d0
000080B4 3238 F700                  		move.w	($FFFFF700).w,d1
000080B8 0441 0080                  		subi.w	#$80,d1
000080BC 0241 FF80                  		andi.w	#$FF80,d1
000080C0 9041                       		sub.w	d1,d0
000080C2 0C40 0280                  		cmpi.w	#$280,d0
000080C6 6200 0000                  		bhi.w	Obj15_DelAll
000080CA 4E75                       		rts	
000080CC                            ; ===========================================================================
000080CC                            
000080CC                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000080CC 7400                       		moveq	#0,d2
000080CE 45E8 0028                  		lea	$28(a0),a2
000080D2 141A                       		move.b	(a2)+,d2
000080D4                            
000080D4                            Obj15_DelLoop:
000080D4 7000                       		moveq	#0,d0
000080D6 101A                       		move.b	(a2)+,d0
000080D8 ED48                       		lsl.w	#6,d0
000080DA 0680 00FF D000             		addi.l	#$FFD000,d0
000080E0 2240                       		movea.l	d0,a1
000080E2 6100 0000                  		bsr.w	DeleteObject2
000080E6 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000080EA 4E75                       		rts	
000080EC                            ; ===========================================================================
000080EC                            
000080EC                            Obj15_Delete:				; XREF: Obj15_Index
000080EC 6100 0000                  		bsr.w	DeleteObject
000080F0 4E75                       		rts	
000080F2                            ; ===========================================================================
000080F2                            
000080F2                            Obj15_Display:				; XREF: Obj15_Index
000080F2 6000 0000                  		bra.w	DisplaySprite
000080F6                            ; ===========================================================================
000080F6                            ; ---------------------------------------------------------------------------
000080F6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000080F6                            ; ---------------------------------------------------------------------------
000080F6                            Map_obj15:
000080F6                            	include "_maps\obj15ghz.asm"
000080F6                            ; ---------------------------------------------------------------------------
000080F6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000080F6                            ; ---------------------------------------------------------------------------
000080F6 0000                       		dc.w byte_7C4E-Map_obj15
000080F8 0000                       		dc.w byte_7C59-Map_obj15
000080FA 0000                       		dc.w byte_7C5F-Map_obj15
000080FC 02                         byte_7C4E:	dc.b 2
000080FD F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008102 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008107 01                         byte_7C59:	dc.b 1
00008108 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000810D 01                         byte_7C5F:	dc.b 1
0000810E F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008114 00                         		even
00008114 00                         		even
00008114                            
00008114                            ; ---------------------------------------------------------------------------
00008114                            ; Sprite mappings - SLZ	swinging platforms
00008114                            ; ---------------------------------------------------------------------------
00008114                            Map_obj15a:
00008114                            	include "_maps\obj15slz.asm"
00008114                            ; ---------------------------------------------------------------------------
00008114                            ; Sprite mappings - SLZ	swinging platforms
00008114                            ; ---------------------------------------------------------------------------
00008114 0000                       		dc.w byte_7C6C-Map_obj15a
00008116 0000                       		dc.w byte_7C95-Map_obj15a
00008118 0000                       		dc.w byte_7C9B-Map_obj15a
0000811A 08                         byte_7C6C:	dc.b 8
0000811B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008120 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008125 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000812A F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000812F 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008134 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008139 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000813E 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008143 01                         byte_7C95:	dc.b 1
00008144 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008149 01                         byte_7C9B:	dc.b 1
0000814A F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008150 00                         		even
00008150 00                         		even
00008150                            
00008150                            ; ===========================================================================
00008150                            ; ---------------------------------------------------------------------------
00008150                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008150                            ; ---------------------------------------------------------------------------
00008150                            
00008150                            Obj17:					; XREF: Obj_Index
00008150 7000                       		moveq	#0,d0
00008152 1028 0024                  		move.b	$24(a0),d0
00008156 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000815A 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000815E                            ; ===========================================================================
0000815E 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008160 0000                       		dc.w Obj17_Action-Obj17_Index
00008162 0000                       		dc.w Obj17_Action-Obj17_Index
00008164 0000                       		dc.w Obj17_Delete-Obj17_Index
00008166 0000                       		dc.w Obj17_Display-Obj17_Index
00008168                            ; ===========================================================================
00008168                            
00008168                            Obj17_Main:				; XREF: Obj17_Index
00008168 5428 0024                  		addq.b	#2,$24(a0)
0000816C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008174 317C 4398 0002             		move.w	#$4398,2(a0)
0000817A 117C 0007 0022             		move.b	#7,$22(a0)
00008180 117C 0004 0001             		move.b	#4,1(a0)
00008186 117C 0003 0018             		move.b	#3,$18(a0)
0000818C 117C 0008 0019             		move.b	#8,$19(a0)
00008192 3428 000C                  		move.w	$C(a0),d2
00008196 3628 0008                  		move.w	8(a0),d3
0000819A 1810                       		move.b	0(a0),d4
0000819C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000081A0 7200                       		moveq	#0,d1
000081A2 1212                       		move.b	(a2),d1		; move a2 to d1
000081A4 14FC 0000                  		move.b	#0,(a2)+
000081A8 3001                       		move.w	d1,d0
000081AA E248                       		lsr.w	#1,d0
000081AC E948                       		lsl.w	#4,d0
000081AE 9640                       		sub.w	d0,d3
000081B0 5501                       		subq.b	#2,d1
000081B2 6500                       		bcs.s	Obj17_Action
000081B4 7C00                       		moveq	#0,d6
000081B6                            
000081B6                            Obj17_MakeHelix:
000081B6 6100 0000                  		bsr.w	SingleObjLoad
000081BA 6600                       		bne.s	Obj17_Action
000081BC 5228 0028                  		addq.b	#1,$28(a0)
000081C0 3A09                       		move.w	a1,d5
000081C2 0445 D000                  		subi.w	#$D000,d5
000081C6 EC4D                       		lsr.w	#6,d5
000081C8 0245 007F                  		andi.w	#$7F,d5
000081CC 14C5                       		move.b	d5,(a2)+
000081CE 137C 0008 0024             		move.b	#8,$24(a1)
000081D4 1284                       		move.b	d4,0(a1)
000081D6 3342 000C                  		move.w	d2,$C(a1)
000081DA 3343 0008                  		move.w	d3,8(a1)
000081DE 2368 0004 0004             		move.l	4(a0),4(a1)
000081E4 337C 4398 0002             		move.w	#$4398,2(a1)
000081EA 137C 0004 0001             		move.b	#4,1(a1)
000081F0 137C 0003 0018             		move.b	#3,$18(a1)
000081F6 137C 0008 0019             		move.b	#8,$19(a1)
000081FC 1346 003E                  		move.b	d6,$3E(a1)
00008200 5206                       		addq.b	#1,d6
00008202 0206 0007                  		andi.b	#7,d6
00008206 0643 0010                  		addi.w	#$10,d3
0000820A B668 0008                  		cmp.w	8(a0),d3
0000820E 6600                       		bne.s	loc_7D78
00008210 1146 003E                  		move.b	d6,$3E(a0)
00008214 5206                       		addq.b	#1,d6
00008216 0206 0007                  		andi.b	#7,d6
0000821A 0643 0010                  		addi.w	#$10,d3
0000821E 5228 0028                  		addq.b	#1,$28(a0)
00008222                            
00008222                            loc_7D78:
00008222 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008226                            
00008226                            Obj17_Action:				; XREF: Obj17_Index
00008226 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000822A 6100 0000                  		bsr.w	DisplaySprite
0000822E 6000 0000                  		bra.w	Obj17_ChkDel
00008232                            
00008232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008232                            
00008232                            
00008232                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008232 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008236 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000823C D028 003E                  		add.b	$3E(a0),d0
00008240 0200 0007                  		andi.b	#7,d0
00008244 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008248 6600                       		bne.s	locret_7DA6
0000824A 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008250                            
00008250                            locret_7DA6:
00008250 4E75                       		rts	
00008252                            ; End of function Obj17_RotateSpikes
00008252                            
00008252                            ; ===========================================================================
00008252                            
00008252                            Obj17_ChkDel:				; XREF: Obj17_Action
00008252 3028 0008                  		move.w	8(a0),d0
00008256 0240 FF80                  		andi.w	#$FF80,d0
0000825A 3238 F700                  		move.w	($FFFFF700).w,d1
0000825E 0441 0080                  		subi.w	#$80,d1
00008262 0241 FF80                  		andi.w	#$FF80,d1
00008266 9041                       		sub.w	d1,d0
00008268 0C40 0280                  		cmpi.w	#$280,d0
0000826C 6200 0000                  		bhi.w	Obj17_DelAll
00008270 4E75                       		rts	
00008272                            ; ===========================================================================
00008272                            
00008272                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008272 7400                       		moveq	#0,d2
00008274 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008278 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000827A 5502                       		subq.b	#2,d2
0000827C 6500                       		bcs.s	Obj17_Delete
0000827E                            
0000827E                            Obj17_DelLoop:
0000827E 7000                       		moveq	#0,d0
00008280 101A                       		move.b	(a2)+,d0
00008282 ED48                       		lsl.w	#6,d0
00008284 0680 00FF D000             		addi.l	#$FFD000,d0
0000828A 2240                       		movea.l	d0,a1
0000828C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008290 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008294                            
00008294                            Obj17_Delete:				; XREF: Obj17_Index
00008294 6100 0000                  		bsr.w	DeleteObject
00008298 4E75                       		rts	
0000829A                            ; ===========================================================================
0000829A                            
0000829A                            Obj17_Display:				; XREF: Obj17_Index
0000829A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000829E 6000 0000                  		bra.w	DisplaySprite
000082A2                            ; ===========================================================================
000082A2                            ; ---------------------------------------------------------------------------
000082A2                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082A2                            ; ---------------------------------------------------------------------------
000082A2                            Map_obj17:
000082A2                            	include "_maps\obj17.asm"
000082A2                            ; ---------------------------------------------------------------------------
000082A2                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082A2                            ; ---------------------------------------------------------------------------
000082A2 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000082A6 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000082AA 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000082AE 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000082B2 01                         byte_7E08:	dc.b 1
000082B3 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000082B8 01                         byte_7E0E:	dc.b 1
000082B9 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000082BE 01                         byte_7E14:	dc.b 1
000082BF F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000082C4 01                         byte_7E1A:	dc.b 1
000082C5 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000082CA 01                         byte_7E20:	dc.b 1
000082CB 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000082D0 01                         byte_7E26:	dc.b 1
000082D1 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000082D6 01                         byte_7E2C:	dc.b 1
000082D7 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000082DC                            		even
000082DC                            		even
000082DC                            
000082DC                            ; ===========================================================================
000082DC                            ; ---------------------------------------------------------------------------
000082DC                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000082DC                            ; ---------------------------------------------------------------------------
000082DC                            
000082DC                            Obj18:					; XREF: Obj_Index
000082DC 7000                       		moveq	#0,d0
000082DE 1028 0024                  		move.b	$24(a0),d0
000082E2 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000082E6 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000082EA                            ; ===========================================================================
000082EA 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000082EC 0000                       		dc.w Obj18_Solid-Obj18_Index
000082EE 0000                       		dc.w Obj18_Action2-Obj18_Index
000082F0 0000                       		dc.w Obj18_Delete-Obj18_Index
000082F2 0000                       		dc.w Obj18_Action-Obj18_Index
000082F4                            ; ===========================================================================
000082F4                            
000082F4                            Obj18_Main:				; XREF: Obj18_Index
000082F4 5428 0024                  		addq.b	#2,$24(a0)
000082F8 317C 4000 0002             		move.w	#$4000,2(a0)
000082FE 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008306 117C 0020 0019             		move.b	#$20,$19(a0)
0000830C 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008312 6600                       		bne.s	Obj18_NotSYZ
00008314 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000831C 117C 0020 0019             		move.b	#$20,$19(a0)
00008322                            
00008322                            Obj18_NotSYZ:
00008322 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008328 6600                       		bne.s	Obj18_NotSLZ
0000832A 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008332 117C 0020 0019             		move.b	#$20,$19(a0)
00008338 317C 4000 0002             		move.w	#$4000,2(a0)
0000833E 117C 0003 0028             		move.b	#3,$28(a0)
00008344                            
00008344                            Obj18_NotSLZ:
00008344 117C 0004 0001             		move.b	#4,1(a0)
0000834A 117C 0004 0018             		move.b	#4,$18(a0)
00008350 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008356 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000835C 3168 0008 0032             		move.w	8(a0),$32(a0)
00008362 317C 0080 0026             		move.w	#$80,$26(a0)
00008368 7200                       		moveq	#0,d1
0000836A 1028 0028                  		move.b	$28(a0),d0
0000836E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008372 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008374 5201                       		addq.b	#1,d1		; use frame #1
00008376 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000837C                            
0000837C                            Obj18_SetFrame:
0000837C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008380                            
00008380                            Obj18_Solid:				; XREF: Obj18_Index
00008380 4A28 0038                  		tst.b	$38(a0)
00008384 6700                       		beq.s	loc_7EE0
00008386 5928 0038                  		subq.b	#4,$38(a0)
0000838A                            
0000838A                            loc_7EE0:
0000838A 7200                       		moveq	#0,d1
0000838C 1228 0019                  		move.b	$19(a0),d1
00008390 6100 F56C                  		bsr.w	PlatformObject
00008394                            
00008394                            Obj18_Action:				; XREF: Obj18_Index
00008394 6100 0000                  		bsr.w	Obj18_Move
00008398 6100 0000                  		bsr.w	Obj18_Nudge
0000839C 6100 0000                  		bsr.w	DisplaySprite
000083A0 6000 0000                  		bra.w	Obj18_ChkDel
000083A4                            ; ===========================================================================
000083A4                            
000083A4                            Obj18_Action2:				; XREF: Obj18_Index
000083A4 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000083AA 6700                       		beq.s	loc_7F06
000083AC 5828 0038                  		addq.b	#4,$38(a0)
000083B0                            
000083B0                            loc_7F06:
000083B0 7200                       		moveq	#0,d1
000083B2 1228 0019                  		move.b	$19(a0),d1
000083B6 6100 F6BA                  		bsr.w	ExitPlatform
000083BA 3F28 0008                  		move.w	8(a0),-(sp)
000083BE 6100 0000                  		bsr.w	Obj18_Move
000083C2 6100 0000                  		bsr.w	Obj18_Nudge
000083C6 341F                       		move.w	(sp)+,d2
000083C8 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000083CC 6100 0000                  		bsr.w	DisplaySprite
000083D0 6000 0000                  		bra.w	Obj18_ChkDel
000083D4                            
000083D4 4E75                       		rts
000083D6                            
000083D6                            ; ---------------------------------------------------------------------------
000083D6                            ; Subroutine to	move platform slightly when you	stand on it
000083D6                            ; ---------------------------------------------------------------------------
000083D6                            
000083D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083D6                            
000083D6                            
000083D6                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000083D6 1028 0038                  		move.b	$38(a0),d0
000083DA 6100 A8A6                  		bsr.w	CalcSine
000083DE 323C 0400                  		move.w	#$400,d1
000083E2 C1C1                       		muls.w	d1,d0
000083E4 4840                       		swap	d0
000083E6 D068 002C                  		add.w	$2C(a0),d0
000083EA 3140 000C                  		move.w	d0,$C(a0)
000083EE 4E75                       		rts	
000083F0                            ; End of function Obj18_Nudge
000083F0                            
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            ; Subroutine to	move platforms
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            
000083F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083F0                            
000083F0                            
000083F0                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000083F0 7000                       		moveq	#0,d0
000083F2 1028 0028                  		move.b	$28(a0),d0
000083F6 0240 000F                  		andi.w	#$F,d0
000083FA D040                       		add.w	d0,d0
000083FC 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008400 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008404                            ; End of function Obj18_Move
00008404                            
00008404                            ; ===========================================================================
00008404 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008408 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000840C 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008410 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008414 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008418 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000841C 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000841E                            ; ===========================================================================
0000841E                            
0000841E                            Obj18_Type00:
0000841E 4E75                       		rts			; platform 00 doesn't move
00008420                            ; ===========================================================================
00008420                            
00008420                            Obj18_Type05:
00008420 3028 0032                  		move.w	$32(a0),d0
00008424 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008428 4401                       		neg.b	d1		; reverse platform-motion
0000842A 0601 0040                  		addi.b	#$40,d1
0000842E 6000                       		bra.s	Obj18_01_Move
00008430                            ; ===========================================================================
00008430                            
00008430                            Obj18_Type01:
00008430 3028 0032                  		move.w	$32(a0),d0
00008434 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008438 0401 0040                  		subi.b	#$40,d1
0000843C                            
0000843C                            Obj18_01_Move:
0000843C 4881                       		ext.w	d1
0000843E D041                       		add.w	d1,d0
00008440 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008444 6000 0000                  		bra.w	Obj18_ChgMotion
00008448                            ; ===========================================================================
00008448                            
00008448                            Obj18_Type0C:
00008448 3028 0034                  		move.w	$34(a0),d0
0000844C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008450 4401                       		neg.b	d1		; reverse platform-motion
00008452 0601 0030                  		addi.b	#$30,d1
00008456 6000                       		bra.s	Obj18_02_Move
00008458                            ; ===========================================================================
00008458                            
00008458                            Obj18_Type0B:
00008458 3028 0034                  		move.w	$34(a0),d0
0000845C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008460 0401 0030                  		subi.b	#$30,d1
00008464 6000                       		bra.s	Obj18_02_Move
00008466                            ; ===========================================================================
00008466                            
00008466                            Obj18_Type06:
00008466 3028 0034                  		move.w	$34(a0),d0
0000846A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000846E 4401                       		neg.b	d1		; reverse platform-motion
00008470 0601 0040                  		addi.b	#$40,d1
00008474 6000                       		bra.s	Obj18_02_Move
00008476                            ; ===========================================================================
00008476                            
00008476                            Obj18_Type02:
00008476 3028 0034                  		move.w	$34(a0),d0
0000847A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000847E 0401 0040                  		subi.b	#$40,d1
00008482                            
00008482                            Obj18_02_Move:
00008482 4881                       		ext.w	d1
00008484 D041                       		add.w	d1,d0
00008486 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000848A 6000 0000                  		bra.w	Obj18_ChgMotion
0000848E                            ; ===========================================================================
0000848E                            
0000848E                            Obj18_Type03:
0000848E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008492 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008494 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000849A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000849C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000084A2                            
000084A2                            Obj18_03_NoMove:
000084A2 4E75                       		rts	
000084A4                            ; ===========================================================================
000084A4                            
000084A4                            Obj18_03_Wait:
000084A4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000084A8 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000084AA 317C 0020 003A             		move.w	#32,$3A(a0)
000084B0 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000084B4 4E75                       		rts	
000084B6                            ; ===========================================================================
000084B6                            
000084B6                            Obj18_Type04:
000084B6 4A68 003A                  		tst.w	$3A(a0)
000084BA 6700                       		beq.s	loc_8048
000084BC 5368 003A                  		subq.w	#1,$3A(a0)
000084C0 6600                       		bne.s	loc_8048
000084C2 0828 0003 0022             		btst	#3,$22(a0)
000084C8 6700                       		beq.s	loc_8042
000084CA 08E9 0001 0022             		bset	#1,$22(a1)
000084D0 08A9 0003 0022             		bclr	#3,$22(a1)
000084D6 137C 0002 0024             		move.b	#2,$24(a1)
000084DC 08A8 0003 0022             		bclr	#3,$22(a0)
000084E2 4228 0025                  		clr.b	$25(a0)
000084E6 3368 0012 0012             		move.w	$12(a0),$12(a1)
000084EC                            
000084EC                            loc_8042:
000084EC 117C 0008 0024             		move.b	#8,$24(a0)
000084F2                            
000084F2                            loc_8048:
000084F2 2628 002C                  		move.l	$2C(a0),d3
000084F6 3028 0012                  		move.w	$12(a0),d0
000084FA 48C0                       		ext.l	d0
000084FC E180                       		asl.l	#8,d0
000084FE D680                       		add.l	d0,d3
00008500 2143 002C                  		move.l	d3,$2C(a0)
00008504 0668 0038 0012             		addi.w	#$38,$12(a0)
0000850A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000850E 0640 00E0                  		addi.w	#$E0,d0
00008512 B068 002C                  		cmp.w	$2C(a0),d0
00008516 6400                       		bcc.s	locret_8074
00008518 117C 0006 0024             		move.b	#6,$24(a0)
0000851E                            
0000851E                            locret_8074:
0000851E 4E75                       		rts	
00008520                            ; ===========================================================================
00008520                            
00008520                            Obj18_Type07:
00008520 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008524 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008526 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000852A 7000                       		moveq	#0,d0
0000852C 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008530 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008532 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008536 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008538 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000853E                            
0000853E                            Obj18_07_NoMove:
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_07_Wait:
00008540 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008544 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008546 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000854A 4E75                       		rts	
0000854C                            ; ===========================================================================
0000854C                            
0000854C                            Obj18_Type08:
0000854C 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008550 3028 0034                  		move.w	$34(a0),d0
00008554 0440 0200                  		subi.w	#$200,d0
00008558 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000855C 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000855E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008562                            
00008562                            Obj18_08_NoStop:
00008562 4E75                       		rts	
00008564                            ; ===========================================================================
00008564                            
00008564                            Obj18_Type0A:
00008564 3028 0034                  		move.w	$34(a0),d0
00008568 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000856C 0401 0040                  		subi.b	#$40,d1
00008570 4881                       		ext.w	d1
00008572 E241                       		asr.w	#1,d1
00008574 D041                       		add.w	d1,d0
00008576 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000857A                            
0000857A                            Obj18_ChgMotion:
0000857A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008580 4E75                       		rts	
00008582                            ; ===========================================================================
00008582                            
00008582                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008582 3028 0032                  		move.w	$32(a0),d0
00008586 0240 FF80                  		andi.w	#$FF80,d0
0000858A 3238 F700                  		move.w	($FFFFF700).w,d1
0000858E 0441 0080                  		subi.w	#$80,d1
00008592 0241 FF80                  		andi.w	#$FF80,d1
00008596 9041                       		sub.w	d1,d0
00008598 0C40 0280                  		cmpi.w	#$280,d0
0000859C 6200                       		bhi.s	Obj18_Delete
0000859E 4E75                       		rts	
000085A0                            ; ===========================================================================
000085A0                            
000085A0                            Obj18_Delete:				; XREF: Obj18_Index
000085A0 6000 0000                  		bra.w	DeleteObject
000085A4                            ; ===========================================================================
000085A4                            ; ---------------------------------------------------------------------------
000085A4                            ; Sprite mappings - unused
000085A4                            ; ---------------------------------------------------------------------------
000085A4                            Map_obj18x:
000085A4                            	include "_maps\obj18x.asm"
000085A4                            ; ---------------------------------------------------------------------------
000085A4                            ; Sprite mappings - unused
000085A4                            ; ---------------------------------------------------------------------------
000085A4 0000                       		dc.w byte_80FE-Map_obj18x
000085A6 0000                       		dc.w byte_8109-Map_obj18x
000085A8 02                         byte_80FE:	dc.b 2
000085A9 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000085AE F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000085B3 0A                         byte_8109:	dc.b $A
000085B4 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000085B9 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000085BE 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000085C3 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000085C8 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000085CD F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000085D2 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000085D7 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000085DC 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000085E1 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000085E6                            		even
000085E6                            		even
000085E6                            
000085E6                            ; ---------------------------------------------------------------------------
000085E6                            ; Sprite mappings - GHZ	platforms
000085E6                            ; ---------------------------------------------------------------------------
000085E6                            Map_obj18:
000085E6                            	include "_maps\obj18ghz.asm"
000085E6                            ; ---------------------------------------------------------------------------
000085E6                            ; Sprite mappings - GHZ	platforms
000085E6                            ; ---------------------------------------------------------------------------
000085E6 0000                       		dc.w byte_8140-Map_obj18
000085E8 0000                       		dc.w byte_8155-Map_obj18
000085EA 04                         byte_8140:	dc.b 4
000085EB F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000085F0 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000085F5 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000085FA F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000085FF 0A                         byte_8155:	dc.b $A
00008600 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008605 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000860A 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000860F 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008614 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008619 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000861E 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008623 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008628 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000862D 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008632                            		even
00008632                            		even
00008632                            
00008632                            ; ---------------------------------------------------------------------------
00008632                            ; Sprite mappings - SYZ	platforms
00008632                            ; ---------------------------------------------------------------------------
00008632                            Map_obj18a:
00008632                            	include "_maps\obj18syz.asm"
00008632                            ; ---------------------------------------------------------------------------
00008632                            ; Sprite mappings - SYZ	platforms
00008632                            ; ---------------------------------------------------------------------------
00008632 0000                       		dc.w byte_818A-Map_obj18a
00008634 03                         byte_818A:	dc.b 3
00008635 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000863A F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000863F F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008644                            		even
00008644                            		even
00008644                            
00008644                            ; ---------------------------------------------------------------------------
00008644                            ; Sprite mappings - SLZ	platforms
00008644                            ; ---------------------------------------------------------------------------
00008644                            Map_obj18b:
00008644                            	include "_maps\obj18slz.asm"
00008644                            ; ---------------------------------------------------------------------------
00008644                            ; Sprite mappings - SLZ	platforms
00008644                            ; ---------------------------------------------------------------------------
00008644 0000                       		dc.w byte_819C-Map_obj18b
00008646 02                         byte_819C:	dc.b 2
00008647 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000864C F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008652 00                         		even
00008652 00                         		even
00008652                            
00008652                            ; ===========================================================================
00008652                            ; ---------------------------------------------------------------------------
00008652                            ; Object 19 - blank
00008652                            ; ---------------------------------------------------------------------------
00008652                            
00008652                            Obj19:					; XREF: Obj_Index
00008652 4E75                       		rts	
00008654                            ; ===========================================================================
00008654                            ; ---------------------------------------------------------------------------
00008654                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008654                            ; ---------------------------------------------------------------------------
00008654                            Map_obj48:
00008654                            	include "_maps\obj48.asm"
00008654                            ; ---------------------------------------------------------------------------
00008654                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008654                            ; ---------------------------------------------------------------------------
00008654 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008658 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000865C 06                         byte_81B2:	dc.b 6
0000865D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008662 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008667 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000866C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008671 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008676 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000867B 04                         byte_81D1:	dc.b 4
0000867C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008681 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008686 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000868B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008690 04                         byte_81E6:	dc.b 4
00008691 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008696 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000869B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000086A0 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000086A5 04                         byte_81FB:	dc.b 4
000086A6 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000086AB E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000086B0 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000086B5 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000086BA                            		even
000086BA                            		even
000086BA                            
000086BA                            ; ===========================================================================
000086BA                            ; ---------------------------------------------------------------------------
000086BA                            ; Object 1A - GHZ collapsing ledge
000086BA                            ; ---------------------------------------------------------------------------
000086BA                            
000086BA                            Obj1A:					; XREF: Obj_Index
000086BA 7000                       		moveq	#0,d0
000086BC 1028 0024                  		move.b	$24(a0),d0
000086C0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000086C4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000086C8                            ; ===========================================================================
000086C8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000086CC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000086D0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Main:				; XREF: Obj1A_Index
000086D4 5428 0024                  		addq.b	#2,$24(a0)
000086D8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000086E0 317C 4000 0002             		move.w	#$4000,2(a0)
000086E6 0028 0004 0001             		ori.b	#4,1(a0)
000086EC 117C 0004 0018             		move.b	#4,$18(a0)
000086F2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000086F8 117C 0064 0019             		move.b	#$64,$19(a0)
000086FE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008704 117C 0038 0016             		move.b	#$38,$16(a0)
0000870A 08E8 0004 0001             		bset	#4,1(a0)
00008710                            
00008710                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008710 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008714 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008716 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000871A 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000871E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008722                            
00008722                            Obj1A_Slope:
00008722 323C 0030                  		move.w	#$30,d1
00008726 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000872C 6100 F2A4                  		bsr.w	SlopeObject
00008730 6000 0000                  		bra.w	MarkObjGone
00008734                            ; ===========================================================================
00008734                            
00008734                            Obj1A_Touch:				; XREF: Obj1A_Index
00008734 4A28 0038                  		tst.b	$38(a0)
00008738 6700 0000                  		beq.w	loc_847A
0000873C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008742 5328 0038                  		subq.b	#1,$38(a0)
00008746                            
00008746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008746                            
00008746                            
00008746                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008746 323C 0030                  		move.w	#$30,d1
0000874A 6100 F326                  		bsr.w	ExitPlatform
0000874E 323C 0030                  		move.w	#$30,d1
00008752 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008758 3428 0008                  		move.w	8(a0),d2
0000875C 6100 0000                  		bsr.w	SlopeObject2
00008760 6000 0000                  		bra.w	MarkObjGone
00008764                            ; End of function Obj1A_WalkOff
00008764                            
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Display:				; XREF: Obj1A_Index
00008764 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008768 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000876A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000876E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008772 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008776 6000 0000                  		bra.w	DisplaySprite
0000877A                            ; ===========================================================================
0000877A                            
0000877A                            loc_82D0:				; XREF: Obj1A_Display
0000877A 5328 0038                  		subq.b	#1,$38(a0)
0000877E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008782 43F8 D000                  		lea	($FFFFD000).w,a1
00008786 0829 0003 0022             		btst	#3,$22(a1)
0000878C 6700                       		beq.s	loc_82FC
0000878E 4A28 0038                  		tst.b	$38(a0)
00008792 6600                       		bne.s	locret_8308
00008794 08A9 0003 0022             		bclr	#3,$22(a1)
0000879A 08A9 0005 0022             		bclr	#5,$22(a1)
000087A0 137C 0001 001D             		move.b	#1,$1D(a1)
000087A6                            
000087A6                            loc_82FC:
000087A6 117C 0000 003A             		move.b	#0,$3A(a0)
000087AC 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000087B2                            
000087B2                            locret_8308:
000087B2 4E75                       		rts	
000087B4                            ; ===========================================================================
000087B4                            
000087B4                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000087B4 6100 0000                  		bsr.w	ObjectFall
000087B8 6100 0000                  		bsr.w	DisplaySprite
000087BC 4A28 0001                  		tst.b	1(a0)
000087C0 6A00                       		bpl.s	Obj1A_Delete
000087C2 4E75                       		rts	
000087C4                            ; ===========================================================================
000087C4                            
000087C4                            Obj1A_Delete:				; XREF: Obj1A_Index
000087C4 6100 0000                  		bsr.w	DeleteObject
000087C8 4E75                       		rts	
000087CA                            ; ===========================================================================
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000087CA                            ; ---------------------------------------------------------------------------
000087CA                            
000087CA                            Obj53:					; XREF: Obj_Index
000087CA 7000                       		moveq	#0,d0
000087CC 1028 0024                  		move.b	$24(a0),d0
000087D0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000087D4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000087D8                            ; ===========================================================================
000087D8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000087DC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000087E0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000087E4                            ; ===========================================================================
000087E4                            
000087E4                            Obj53_Main:				; XREF: Obj53_Index
000087E4 5428 0024                  		addq.b	#2,$24(a0)
000087E8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000087F0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000087F6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000087FC 6600                       		bne.s	Obj53_NotSLZ
000087FE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008804 5428 001A                  		addq.b	#2,$1A(a0)
00008808                            
00008808                            Obj53_NotSLZ:
00008808 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000880E 6600                       		bne.s	Obj53_NotSBZ
00008810 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008816                            
00008816                            Obj53_NotSBZ:
00008816 0028 0004 0001             		ori.b	#4,1(a0)
0000881C 117C 0004 0018             		move.b	#4,$18(a0)
00008822 117C 0007 0038             		move.b	#7,$38(a0)
00008828 117C 0044 0019             		move.b	#$44,$19(a0)
0000882E                            
0000882E                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000882E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008832 6700                       		beq.s	Obj53_Solid	; if not, branch
00008834 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008838 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000883C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008840                            
00008840                            Obj53_Solid:
00008840 323C 0020                  		move.w	#$20,d1
00008844 6100 F0B8                  		bsr.w	PlatformObject
00008848 4A28 0028                  		tst.b	$28(a0)
0000884C 6A00                       		bpl.s	Obj53_MarkAsGone
0000884E 0829 0003 0022             		btst	#3,$22(a1)
00008854 6700                       		beq.s	Obj53_MarkAsGone
00008856 08A8 0000 0001             		bclr	#0,1(a0)
0000885C 3029 0008                  		move.w	8(a1),d0
00008860 9068 0008                  		sub.w	8(a0),d0
00008864 6400                       		bcc.s	Obj53_MarkAsGone
00008866 08E8 0000 0001             		bset	#0,1(a0)
0000886C                            
0000886C                            Obj53_MarkAsGone:
0000886C 6000 0000                  		bra.w	MarkObjGone
00008870                            ; ===========================================================================
00008870                            
00008870                            Obj53_Touch:				; XREF: Obj53_Index
00008870 4A28 0038                  		tst.b	$38(a0)
00008874 6700 0000                  		beq.w	loc_8458
00008878 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000887E 5328 0038                  		subq.b	#1,$38(a0)
00008882                            
00008882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008882                            
00008882                            
00008882                            Obj53_WalkOff:				; XREF: Obj53_Index
00008882 323C 0020                  		move.w	#$20,d1
00008886 6100 F1EA                  		bsr.w	ExitPlatform
0000888A 3428 0008                  		move.w	8(a0),d2
0000888E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008892 6000 0000                  		bra.w	MarkObjGone
00008896                            ; End of function Obj53_WalkOff
00008896                            
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Display:				; XREF: Obj53_Index
00008896 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000889A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000889C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088A0 6600 0000                  		bne.w	loc_8402	; if yes, branch
000088A4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088A8 6000 0000                  		bra.w	DisplaySprite
000088AC                            ; ===========================================================================
000088AC                            
000088AC                            loc_8402:
000088AC 5328 0038                  		subq.b	#1,$38(a0)
000088B0 6100 FFD0                  		bsr.w	Obj53_WalkOff
000088B4 43F8 D000                  		lea	($FFFFD000).w,a1
000088B8 0829 0003 0022             		btst	#3,$22(a1)
000088BE 6700                       		beq.s	loc_842E
000088C0 4A28 0038                  		tst.b	$38(a0)
000088C4 6600                       		bne.s	locret_843A
000088C6 08A9 0003 0022             		bclr	#3,$22(a1)
000088CC 08A9 0005 0022             		bclr	#5,$22(a1)
000088D2 137C 0001 001D             		move.b	#1,$1D(a1)
000088D8                            
000088D8                            loc_842E:
000088D8 117C 0000 003A             		move.b	#0,$3A(a0)
000088DE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000088E4                            
000088E4                            locret_843A:
000088E4 4E75                       		rts	
000088E6                            ; ===========================================================================
000088E6                            
000088E6                            Obj53_TimeZero:				; XREF: Obj53_Display
000088E6 6100 0000                  		bsr.w	ObjectFall
000088EA 6100 0000                  		bsr.w	DisplaySprite
000088EE 4A28 0001                  		tst.b	1(a0)
000088F2 6A00                       		bpl.s	Obj53_Delete
000088F4 4E75                       		rts	
000088F6                            ; ===========================================================================
000088F6                            
000088F6                            Obj53_Delete:				; XREF: Obj53_Index
000088F6 6100 0000                  		bsr.w	DeleteObject
000088FA 4E75                       		rts	
000088FC                            ; ===========================================================================
000088FC                            
000088FC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000088FC 117C 0000 003A             		move.b	#0,$3A(a0)
00008902                            
00008902                            loc_8458:				; XREF: Obj53_Touch
00008902 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008908 0828 0000 0028             		btst	#0,$28(a0)
0000890E 6700                       		beq.s	loc_846C
00008910 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008916                            
00008916                            loc_846C:
00008916 7207                       		moveq	#7,d1
00008918 5228 001A                  		addq.b	#1,$1A(a0)
0000891C 6000                       		bra.s	loc_8486
0000891E                            ; ===========================================================================
0000891E                            
0000891E                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000891E 117C 0000 003A             		move.b	#0,$3A(a0)
00008924                            
00008924                            loc_847A:				; XREF: Obj1A_Touch
00008924 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000892A 7218                       		moveq	#$18,d1
0000892C 5428 001A                  		addq.b	#2,$1A(a0)
00008930                            
00008930                            loc_8486:				; XREF: Obj53_Collapse
00008930 7000                       		moveq	#0,d0
00008932 1028 001A                  		move.b	$1A(a0),d0
00008936 D040                       		add.w	d0,d0
00008938 2668 0004                  		movea.l	4(a0),a3
0000893C D6F3 0000                  		adda.w	(a3,d0.w),a3
00008940 524B                       		addq.w	#1,a3
00008942 08E8 0005 0001             		bset	#5,1(a0)
00008948 1810                       		move.b	0(a0),d4
0000894A 1A28 0001                  		move.b	1(a0),d5
0000894E 2248                       		movea.l	a0,a1
00008950 6000                       		bra.s	loc_84B2
00008952                            ; ===========================================================================
00008952                            
00008952                            loc_84AA:
00008952 6100 0000                  		bsr.w	SingleObjLoad
00008956 6600                       		bne.s	loc_84F2
00008958 5A4B                       		addq.w	#5,a3
0000895A                            
0000895A                            loc_84B2:
0000895A 137C 0006 0024             		move.b	#6,$24(a1)
00008960 1284                       		move.b	d4,0(a1)
00008962 234B 0004                  		move.l	a3,4(a1)
00008966 1345 0001                  		move.b	d5,1(a1)
0000896A 3368 0008 0008             		move.w	8(a0),8(a1)
00008970 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008976 3368 0002 0002             		move.w	2(a0),2(a1)
0000897C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008982 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008988 135C 0038                  		move.b	(a4)+,$38(a1)
0000898C B3C8                       		cmpa.l	a0,a1
0000898E 6400                       		bcc.s	loc_84EE
00008990 6100 0000                  		bsr.w	DisplaySprite2
00008994                            
00008994                            loc_84EE:
00008994 51C9 FFBC                  		dbf	d1,loc_84AA
00008998                            
00008998                            loc_84F2:
00008998 6100 0000                  		bsr.w	DisplaySprite
0000899C 303C 00B9                  		move.w	#$B9,d0
000089A0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000089A6                            ; ===========================================================================
000089A6                            ; ---------------------------------------------------------------------------
000089A6                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000089A6                            ; ---------------------------------------------------------------------------
000089A6 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000089B6 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000089C0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000089C8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000089D0                            
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            
000089D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089D0                            
000089D0                            
000089D0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000089D0 43F8 D000                  		lea	($FFFFD000).w,a1
000089D4 0829 0003 0022             		btst	#3,$22(a1)
000089DA 6700                       		beq.s	locret_856E
000089DC 3029 0008                  		move.w	8(a1),d0
000089E0 9068 0008                  		sub.w	8(a0),d0
000089E4 D041                       		add.w	d1,d0
000089E6 E248                       		lsr.w	#1,d0
000089E8 0828 0000 0001             		btst	#0,1(a0)
000089EE 6700                       		beq.s	loc_854E
000089F0 4640                       		not.w	d0
000089F2 D041                       		add.w	d1,d0
000089F4                            
000089F4                            loc_854E:
000089F4 7200                       		moveq	#0,d1
000089F6 1232 0000                  		move.b	(a2,d0.w),d1
000089FA 3028 000C                  		move.w	$C(a0),d0
000089FE 9041                       		sub.w	d1,d0
00008A00 7200                       		moveq	#0,d1
00008A02 1229 0016                  		move.b	$16(a1),d1
00008A06 9041                       		sub.w	d1,d0
00008A08 3340 000C                  		move.w	d0,$C(a1)
00008A0C 9468 0008                  		sub.w	8(a0),d2
00008A10 9569 0008                  		sub.w	d2,8(a1)
00008A14                            
00008A14                            locret_856E:
00008A14 4E75                       		rts	
00008A16                            ; End of function SlopeObject2
00008A16                            
00008A16                            ; ===========================================================================
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Collision data for GHZ collapsing ledge
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            Obj1A_SlopeData:
00008A16                            		incbin	misc\ghzledge.bin
00008A46                            		even
00008A46                            
00008A46                            ; ---------------------------------------------------------------------------
00008A46                            ; Sprite mappings - GHZ	collapsing ledge
00008A46                            ; ---------------------------------------------------------------------------
00008A46                            Map_obj1A:
00008A46                            	include "_maps\obj1A.asm"
00008A46                            ; ---------------------------------------------------------------------------
00008A46                            ; Sprite mappings - GHZ	collapsing ledge
00008A46                            ; ---------------------------------------------------------------------------
00008A46 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008A4A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008A4E 10                         byte_85A8:	dc.b $10
00008A4F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008A54 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A59 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A5E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A63 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A68 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A6D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A72 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A77 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A7C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A81 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A86 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A8B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A90 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A95 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A9A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A9F 10                         byte_85F9:	dc.b $10
00008AA0 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008AA5 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008AAA E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008AAF E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008AB4 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008AB9 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008ABE F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008AC3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008AC8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ACD F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008AD2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008AD7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008ADC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008AE1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008AE6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008AEB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008AF0 19                         byte_864A:	dc.b $19
00008AF1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008AF6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008AFB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B00 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B05 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B0A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B0F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B14 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B19 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B1E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008B23 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B28 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B2D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B32 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B37 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B3C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008B41 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B46 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B4B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B50 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B55 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B5A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B5F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B64 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B69 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B6E 19                         byte_86C8:	dc.b $19
00008B6F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B74 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B79 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B7E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B83 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B88 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B8D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B92 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B97 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B9C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008BA1 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008BA6 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008BAB F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008BB0 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008BB5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BBA F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008BBF 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008BC4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008BC9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008BCE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008BD3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008BD8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008BDD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008BE2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008BE7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008BEC                            		even
00008BEC                            		even
00008BEC                            
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            Map_obj53:
00008BEC                            	include "_maps\obj53.asm"
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008BEC                            ; ---------------------------------------------------------------------------
00008BEC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008BF0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008BF4 04                         byte_874E:	dc.b 4
00008BF5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008BFA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008BFF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C04 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008C09 08                         byte_8763:	dc.b 8
00008C0A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C0F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008C14 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C19 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008C1E 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008C23 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008C28 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008C2D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008C32 04                         byte_878C:	dc.b 4
00008C33 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008C38 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008C3D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C42 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008C47 08                         byte_87A1:	dc.b 8
00008C48 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C4D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008C52 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C57 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008C5C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C61 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C66 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C6B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C70                            		even
00008C70                            		even
00008C70                            
00008C70                            ; ===========================================================================
00008C70                            ; ---------------------------------------------------------------------------
00008C70                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C70                            ; ---------------------------------------------------------------------------
00008C70                            
00008C70                            Obj1C:					; XREF: Obj_Index
00008C70 7000                       		moveq	#0,d0
00008C72 1028 0024                  		move.b	$24(a0),d0
00008C76 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C7A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C7E                            ; ===========================================================================
00008C7E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C80 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C82                            ; ===========================================================================
00008C82                            
00008C82                            Obj1C_Main:				; XREF: Obj1C_Index
00008C82 5428 0024                  		addq.b	#2,$24(a0)
00008C86 7000                       		moveq	#0,d0
00008C88 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C8C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C90 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C94 2159 0004                  		move.l	(a1)+,4(a0)
00008C98 3159 0002                  		move.w	(a1)+,2(a0)
00008C9C 0028 0004 0001             		ori.b	#4,1(a0)
00008CA2 1159 001A                  		move.b	(a1)+,$1A(a0)
00008CA6 1159 0019                  		move.b	(a1)+,$19(a0)
00008CAA 1159 0018                  		move.b	(a1)+,$18(a0)
00008CAE 1159 0020                  		move.b	(a1)+,$20(a0)
00008CB2                            
00008CB2                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008CB2 3028 0008                  		move.w	8(a0),d0
00008CB6 0240 FF80                  		andi.w	#$FF80,d0
00008CBA 3238 F700                  		move.w	($FFFFF700).w,d1
00008CBE 0441 0080                  		subi.w	#$80,d1
00008CC2 0241 FF80                  		andi.w	#$FF80,d1
00008CC6 9041                       		sub.w	d1,d0
00008CC8 0C40 0280                  		cmpi.w	#$280,d0
00008CCC 6200 0000                  		bhi.w	DeleteObject
00008CD0 6000 0000                  		bra.w	DisplaySprite
00008CD4                            ; ===========================================================================
00008CD4                            ; ---------------------------------------------------------------------------
00008CD4                            ; Variables for	object $1C are stored in an array
00008CD4                            ; ---------------------------------------------------------------------------
00008CD4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008CD8 44D8                       		dc.w $44D8		; VRAM setting
00008CDA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008CDE 0000 0000                  		dc.l Map_obj1C
00008CE2 44D8                       		dc.w $44D8
00008CE4 0008 0200                  		dc.b 0,	8, 2, 0
00008CE8 0000 0000                  		dc.l Map_obj1C
00008CEC 44D8                       		dc.w $44D8
00008CEE 0008 0200                  		dc.b 0,	8, 2, 0
00008CF2 0000 7DE6                  		dc.l Map_obj11
00008CF6 438E                       		dc.w $438E
00008CF8 0110 0100                  		dc.b 1,	$10, 1,	0
00008CFC                            ; ---------------------------------------------------------------------------
00008CFC                            ; Sprite mappings - SLZ	lava thrower
00008CFC                            ; ---------------------------------------------------------------------------
00008CFC                            Map_obj1C:
00008CFC                            	include "_maps\obj1C.asm"
00008CFC                            ; ---------------------------------------------------------------------------
00008CFC                            ; Sprite mappings - SLZ	lava thrower
00008CFC                            ; ---------------------------------------------------------------------------
00008CFC 0000                       		dc.w byte_8858-Map_obj1C
00008CFE 01                         byte_8858:	dc.b 1
00008CFF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008D04                            		even
00008D04                            		even
00008D04                            
00008D04                            ; ===========================================================================
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            ; Object 1D - switch that activates when Sonic touches it
00008D04                            ; (this	is not used anywhere in	the game)
00008D04                            ; ---------------------------------------------------------------------------
00008D04                            
00008D04                            Obj1D:					; XREF: Obj_Index
00008D04 7000                       		moveq	#0,d0
00008D06 1028 0024                  		move.b	$24(a0),d0
00008D0A 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008D0E 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008D12                            ; ===========================================================================
00008D12 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008D14 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008D16 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008D18                            ; ===========================================================================
00008D18                            
00008D18                            Obj1D_Main:				; XREF: Obj1D_Index
00008D18 5428 0024                  		addq.b	#2,$24(a0)
00008D1C 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008D24 317C 4000 0002             		move.w	#$4000,2(a0)
00008D2A 117C 0004 0001             		move.b	#4,1(a0)
00008D30 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008D36 117C 0010 0019             		move.b	#$10,$19(a0)
00008D3C 117C 0005 0018             		move.b	#5,$18(a0)
00008D42                            
00008D42                            Obj1D_Action:				; XREF: Obj1D_Index
00008D42 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008D48 323C 0010                  		move.w	#$10,d1
00008D4C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008D50 6700                       		beq.s	Obj1D_ChkDel
00008D52 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008D56 7001                       		moveq	#1,d0
00008D58 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008D5C                            
00008D5C                            Obj1D_ChkDel:
00008D5C 6100 0000                  		bsr.w	DisplaySprite
00008D60 3028 0008                  		move.w	8(a0),d0
00008D64 0240 FF80                  		andi.w	#$FF80,d0
00008D68 3238 F700                  		move.w	($FFFFF700).w,d1
00008D6C 0441 0080                  		subi.w	#$80,d1
00008D70 0241 FF80                  		andi.w	#$FF80,d1
00008D74 9041                       		sub.w	d1,d0
00008D76 0C40 0280                  		cmpi.w	#$280,d0
00008D7A 6200 0000                  		bhi.w	Obj1D_Delete
00008D7E 4E75                       		rts	
00008D80                            ; ===========================================================================
00008D80                            
00008D80                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D80 6100 0000                  		bsr.w	DeleteObject
00008D84 4E75                       		rts	
00008D86                            ; ---------------------------------------------------------------------------
00008D86                            ; Subroutine to	check if Sonic touches the object
00008D86                            ; ---------------------------------------------------------------------------
00008D86                            
00008D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D86                            
00008D86                            
00008D86                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D86 43F8 D000                  		lea	($FFFFD000).w,a1
00008D8A 3029 0008                  		move.w	8(a1),d0
00008D8E 9068 0008                  		sub.w	8(a0),d0
00008D92 D041                       		add.w	d1,d0
00008D94 6B00                       		bmi.s	loc_8918
00008D96 D241                       		add.w	d1,d1
00008D98 B041                       		cmp.w	d1,d0
00008D9A 6400                       		bcc.s	loc_8918
00008D9C 3429 000C                  		move.w	$C(a1),d2
00008DA0 1229 0016                  		move.b	$16(a1),d1
00008DA4 4881                       		ext.w	d1
00008DA6 D242                       		add.w	d2,d1
00008DA8 3028 000C                  		move.w	$C(a0),d0
00008DAC 0440 0010                  		subi.w	#$10,d0
00008DB0 9041                       		sub.w	d1,d0
00008DB2 6200                       		bhi.s	loc_8918
00008DB4 0C40 FFF0                  		cmpi.w	#-$10,d0
00008DB8 6500                       		bcs.s	loc_8918
00008DBA 70FF                       		moveq	#-1,d0
00008DBC 4E75                       		rts	
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            loc_8918:
00008DBE 7000                       		moveq	#0,d0
00008DC0 4E75                       		rts	
00008DC2                            ; End of function Obj1D_ChkTouch
00008DC2                            
00008DC2                            ; ===========================================================================
00008DC2                            ; ---------------------------------------------------------------------------
00008DC2                            ; Sprite mappings - object 1D
00008DC2                            ; ---------------------------------------------------------------------------
00008DC2                            Map_obj1D:
00008DC2                            	include "_maps\obj1D.asm"
00008DC2                            ; ---------------------------------------------------------------------------
00008DC2                            ; Sprite mappings - object 1D
00008DC2                            ; ---------------------------------------------------------------------------
00008DC2 0000                       		dc.w byte_891E-Map_obj1D
00008DC4 04                         byte_891E:	dc.b 4
00008DC5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008DCA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008DCF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008DD4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008DDA 00                         		even
00008DDA 00                         		even
00008DDA                            
00008DDA                            ; ===========================================================================
00008DDA                            ; ---------------------------------------------------------------------------
00008DDA                            ; Object 2A - doors (SBZ)
00008DDA                            ; ---------------------------------------------------------------------------
00008DDA                            
00008DDA                            Obj2A:					; XREF: Obj_Index
00008DDA 7000                       		moveq	#0,d0
00008DDC 1028 0024                  		move.b	$24(a0),d0
00008DE0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008DE4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008DE8                            ; ===========================================================================
00008DE8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008DEA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008DEC                            ; ===========================================================================
00008DEC                            
00008DEC                            Obj2A_Main:				; XREF: Obj2A_Index
00008DEC 5428 0024                  		addq.b	#2,$24(a0)
00008DF0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008DF8 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008DFE 0028 0004 0001             		ori.b	#4,1(a0)
00008E04 117C 0008 0019             		move.b	#8,$19(a0)
00008E0A 117C 0004 0018             		move.b	#4,$18(a0)
00008E10                            
00008E10                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008E10 323C 0040                  		move.w	#$40,d1
00008E14 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008E18 3038 D008                  		move.w	($FFFFD008).w,d0
00008E1C D041                       		add.w	d1,d0
00008E1E B068 0008                  		cmp.w	8(a0),d0
00008E22 6500                       		bcs.s	Obj2A_Animate
00008E24 9041                       		sub.w	d1,d0
00008E26 9041                       		sub.w	d1,d0
00008E28 B068 0008                  		cmp.w	8(a0),d0
00008E2C 6400                       		bcc.s	Obj2A_Animate
00008E2E D041                       		add.w	d1,d0
00008E30 B068 0008                  		cmp.w	8(a0),d0
00008E34 6400                       		bcc.s	loc_899A
00008E36 0828 0000 0022             		btst	#0,$22(a0)
00008E3C 6600                       		bne.s	Obj2A_Animate
00008E3E 6000                       		bra.s	Obj2A_Open
00008E40                            ; ===========================================================================
00008E40                            
00008E40                            loc_899A:				; XREF: Obj2A_OpenShut
00008E40 0828 0000 0022             		btst	#0,$22(a0)
00008E46 6700                       		beq.s	Obj2A_Animate
00008E48                            
00008E48                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008E48 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008E4E                            
00008E4E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008E4E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008E54 6100 0000                  		bsr.w	AnimateSprite
00008E58 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008E5C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008E5E 323C 0011                  		move.w	#$11,d1
00008E62 343C 0020                  		move.w	#$20,d2
00008E66 3602                       		move.w	d2,d3
00008E68 5243                       		addq.w	#1,d3
00008E6A 3828 0008                  		move.w	8(a0),d4
00008E6E 6100 0000                  		bsr.w	SolidObject
00008E72                            
00008E72                            Obj2A_MarkAsUsed:
00008E72 6000 0000                  		bra.w	MarkObjGone
00008E76                            ; ===========================================================================
00008E76                            Ani_obj2A:
00008E76                            	include "_anim\obj2A.asm"
00008E76                            ; ---------------------------------------------------------------------------
00008E76                            ; Animation script - doors (SBZ)
00008E76                            ; ---------------------------------------------------------------------------
00008E76 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E78 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E7A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E86 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E92                            		even
00008E92                            		even
00008E92                            
00008E92                            ; ---------------------------------------------------------------------------
00008E92                            ; Sprite mappings - doors (SBZ)
00008E92                            ; ---------------------------------------------------------------------------
00008E92                            Map_obj2A:
00008E92                            	include "_maps\obj2A.asm"
00008E92                            ; ---------------------------------------------------------------------------
00008E92                            ; Sprite mappings - doors (SBZ)
00008E92                            ; ---------------------------------------------------------------------------
00008E92 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E96 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E9A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E9E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008EA2 0000                       		dc.w byte_8A56-Map_obj2A
00008EA4 02                         byte_89FE:	dc.b 2
00008EA5 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008EAA 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008EAF 02                         byte_8A09:	dc.b 2
00008EB0 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008EB5 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008EBA 02                         byte_8A14:	dc.b 2
00008EBB D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008EC0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008EC5 02                         byte_8A1F:	dc.b 2
00008EC6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008ECB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008ED0 02                         byte_8A2A:	dc.b 2
00008ED1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008ED6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008EDB 02                         byte_8A35:	dc.b 2
00008EDC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008EE1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008EE6 02                         byte_8A40:	dc.b 2
00008EE7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008EEC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008EF1 02                         byte_8A4B:	dc.b 2
00008EF2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008EF7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008EFC 02                         byte_8A56:	dc.b 2
00008EFD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008F02 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008F08 00                         		even
00008F08 00                         		even
00008F08                            
00008F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F08                            
00008F08                            
00008F08                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008F08 6100 0000                  		bsr.w	Obj44_SolidWall2
00008F0C 6700                       		beq.s	loc_8AA8
00008F0E 6B00 0000                  		bmi.w	loc_8AC4
00008F12 4A40                       		tst.w	d0
00008F14 6700 0000                  		beq.w	loc_8A92
00008F18 6B00                       		bmi.s	loc_8A7C
00008F1A 4A69 0010                  		tst.w	$10(a1)
00008F1E 6B00                       		bmi.s	loc_8A92
00008F20 6000                       		bra.s	loc_8A82
00008F22                            ; ===========================================================================
00008F22                            
00008F22                            loc_8A7C:
00008F22 4A69 0010                  		tst.w	$10(a1)
00008F26 6A00                       		bpl.s	loc_8A92
00008F28                            
00008F28                            loc_8A82:
00008F28 9169 0008                  		sub.w	d0,8(a1)
00008F2C 337C 0000 0014             		move.w	#0,$14(a1)
00008F32 337C 0000 0010             		move.w	#0,$10(a1)
00008F38                            
00008F38                            loc_8A92:
00008F38 0829 0001 0022             		btst	#1,$22(a1)
00008F3E 6600                       		bne.s	loc_8AB6
00008F40 08E9 0005 0022             		bset	#5,$22(a1)
00008F46 08E8 0005 0022             		bset	#5,$22(a0)
00008F4C 4E75                       		rts	
00008F4E                            ; ===========================================================================
00008F4E                            
00008F4E                            loc_8AA8:
00008F4E 0828 0005 0022             		btst	#5,$22(a0)
00008F54 6700                       		beq.s	locret_8AC2
00008F56 337C 0001 001C             		move.w	#1,$1C(a1)
00008F5C                            
00008F5C                            loc_8AB6:
00008F5C 08A8 0005 0022             		bclr	#5,$22(a0)
00008F62 08A9 0005 0022             		bclr	#5,$22(a1)
00008F68                            
00008F68                            locret_8AC2:
00008F68 4E75                       		rts	
00008F6A                            ; ===========================================================================
00008F6A                            
00008F6A                            loc_8AC4:
00008F6A 4A69 0012                  		tst.w	$12(a1)
00008F6E 6A00                       		bpl.s	locret_8AD8
00008F70 4A43                       		tst.w	d3
00008F72 6A00                       		bpl.s	locret_8AD8
00008F74 9769 000C                  		sub.w	d3,$C(a1)
00008F78 337C 0000 0012             		move.w	#0,$12(a1)
00008F7E                            
00008F7E                            locret_8AD8:
00008F7E 4E75                       		rts	
00008F80                            ; End of function Obj44_SolidWall
00008F80                            
00008F80                            
00008F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F80                            
00008F80                            
00008F80                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F80 43F8 D000                  		lea	($FFFFD000).w,a1
00008F84 3029 0008                  		move.w	8(a1),d0
00008F88 9068 0008                  		sub.w	8(a0),d0
00008F8C D041                       		add.w	d1,d0
00008F8E 6B00                       		bmi.s	loc_8B48
00008F90 3601                       		move.w	d1,d3
00008F92 D643                       		add.w	d3,d3
00008F94 B043                       		cmp.w	d3,d0
00008F96 6200                       		bhi.s	loc_8B48
00008F98 1629 0016                  		move.b	$16(a1),d3
00008F9C 4883                       		ext.w	d3
00008F9E D443                       		add.w	d3,d2
00008FA0 3629 000C                  		move.w	$C(a1),d3
00008FA4 9668 000C                  		sub.w	$C(a0),d3
00008FA8 D642                       		add.w	d2,d3
00008FAA 6B00                       		bmi.s	loc_8B48
00008FAC 3802                       		move.w	d2,d4
00008FAE D844                       		add.w	d4,d4
00008FB0 B644                       		cmp.w	d4,d3
00008FB2 6400                       		bcc.s	loc_8B48
00008FB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008FB8 6B00                       		bmi.s	loc_8B48
00008FBA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008FC0 6400                       		bcc.s	loc_8B48
00008FC2 4A78 FE08                  		tst.w	($FFFFFE08).w
00008FC6 6600                       		bne.s	loc_8B48
00008FC8 3A00                       		move.w	d0,d5
00008FCA B240                       		cmp.w	d0,d1
00008FCC 6400                       		bcc.s	loc_8B30
00008FCE D241                       		add.w	d1,d1
00008FD0 9041                       		sub.w	d1,d0
00008FD2 3A00                       		move.w	d0,d5
00008FD4 4445                       		neg.w	d5
00008FD6                            
00008FD6                            loc_8B30:
00008FD6 3203                       		move.w	d3,d1
00008FD8 B443                       		cmp.w	d3,d2
00008FDA 6400                       		bcc.s	loc_8B3C
00008FDC 9644                       		sub.w	d4,d3
00008FDE 3203                       		move.w	d3,d1
00008FE0 4441                       		neg.w	d1
00008FE2                            
00008FE2                            loc_8B3C:
00008FE2 BA41                       		cmp.w	d1,d5
00008FE4 6200                       		bhi.s	loc_8B44
00008FE6 7801                       		moveq	#1,d4
00008FE8 4E75                       		rts	
00008FEA                            ; ===========================================================================
00008FEA                            
00008FEA                            loc_8B44:
00008FEA 78FF                       		moveq	#-1,d4
00008FEC 4E75                       		rts	
00008FEE                            ; ===========================================================================
00008FEE                            
00008FEE                            loc_8B48:
00008FEE 7800                       		moveq	#0,d4
00008FF0 4E75                       		rts	
00008FF2                            ; End of function Obj44_SolidWall2
00008FF2                            
00008FF2                            ; ===========================================================================
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2                            ; Object 1E - Ball Hog enemy (SBZ)
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2                            
00008FF2                            Obj1E:					; XREF: Obj_Index
00008FF2 7000                       		moveq	#0,d0
00008FF4 1028 0024                  		move.b	$24(a0),d0
00008FF8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008FFC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009000                            ; ===========================================================================
00009000 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009002 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009004                            ; ===========================================================================
00009004                            
00009004                            Obj1E_Main:				; XREF: Obj1E_Index
00009004 117C 0013 0016             		move.b	#$13,$16(a0)
0000900A 117C 0008 0017             		move.b	#8,$17(a0)
00009010 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009018 317C 2302 0002             		move.w	#$2302,2(a0)
0000901E 117C 0004 0001             		move.b	#4,1(a0)
00009024 117C 0004 0018             		move.b	#4,$18(a0)
0000902A 117C 0005 0020             		move.b	#5,$20(a0)
00009030 117C 000C 0019             		move.b	#$C,$19(a0)
00009036 6100 0000                  		bsr.w	ObjectFall
0000903A 4EB9 0000 0000             		jsr	ObjHitFloor
00009040 4A41                       		tst.w	d1
00009042 6A00                       		bpl.s	locret_8BAC
00009044 D368 000C                  		add.w	d1,$C(a0)
00009048 317C 0000 0012             		move.w	#0,$12(a0)
0000904E 5428 0024                  		addq.b	#2,$24(a0)
00009052                            
00009052                            locret_8BAC:
00009052 4E75                       		rts	
00009054                            ; ===========================================================================
00009054                            
00009054                            Obj1E_Action:				; XREF: Obj1E_Index
00009054 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000905A 6100 0000                  		bsr.w	AnimateSprite
0000905E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009064 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009066 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000906A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000906C 6000                       		bra.s	Obj1E_MarkAsGone
0000906E                            ; ===========================================================================
0000906E                            
0000906E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000906E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009072                            
00009072                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009072 6000 0000                  		bra.w	MarkObjGone
00009076                            ; ===========================================================================
00009076                            
00009076                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009076 117C 0001 0032             		move.b	#1,$32(a0)
0000907C 6100 0000                  		bsr.w	SingleObjLoad
00009080 6600                       		bne.s	loc_8C1A
00009082 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009086 3368 0008 0008             		move.w	8(a0),8(a1)
0000908C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009092 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009098 337C 0000 0012             		move.w	#0,$12(a1)
0000909E 70FC                       		moveq	#-4,d0
000090A0 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000090A6 6700                       		beq.s	loc_8C0A	; if not, branch
000090A8 4440                       		neg.w	d0
000090AA 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000090AE                            
000090AE                            loc_8C0A:
000090AE D169 0008                  		add.w	d0,8(a1)
000090B2 0669 000C 000C             		addi.w	#$C,$C(a1)
000090B8 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000090BE                            
000090BE                            loc_8C1A:
000090BE 60B2                       		bra.s	Obj1E_MarkAsGone
000090C0                            ; ===========================================================================
000090C0                            ; ---------------------------------------------------------------------------
000090C0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000090C0                            ; ---------------------------------------------------------------------------
000090C0                            
000090C0                            Obj20:					; XREF: Obj_Index
000090C0 7000                       		moveq	#0,d0
000090C2 1028 0024                  		move.b	$24(a0),d0
000090C6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000090CA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000090CE                            ; ===========================================================================
000090CE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000090D0 0000                       		dc.w Obj20_Bounce-Obj20_Index
000090D2                            ; ===========================================================================
000090D2                            
000090D2                            Obj20_Main:				; XREF: Obj20_Index
000090D2 5428 0024                  		addq.b	#2,$24(a0)
000090D6 117C 0007 0016             		move.b	#7,$16(a0)
000090DC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000090E4 317C 2302 0002             		move.w	#$2302,2(a0)
000090EA 117C 0004 0001             		move.b	#4,1(a0)
000090F0 117C 0003 0018             		move.b	#3,$18(a0)
000090F6 117C 0087 0020             		move.b	#$87,$20(a0)
000090FC 117C 0008 0019             		move.b	#8,$19(a0)
00009102 7000                       		moveq	#0,d0
00009104 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009108 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000910C 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009110 117C 0004 001A             		move.b	#4,$1A(a0)
00009116                            
00009116                            Obj20_Bounce:				; XREF: Obj20_Index
00009116 4EB9 0000 0000             		jsr	ObjectFall
0000911C 4A68 0012                  		tst.w	$12(a0)
00009120 6B00                       		bmi.s	Obj20_ChkExplode
00009122 4EB9 0000 0000             		jsr	ObjHitFloor
00009128 4A41                       		tst.w	d1
0000912A 6A00                       		bpl.s	Obj20_ChkExplode
0000912C D368 000C                  		add.w	d1,$C(a0)
00009130 317C FD00 0012             		move.w	#-$300,$12(a0)
00009136 4A03                       		tst.b	d3
00009138 6700                       		beq.s	Obj20_ChkExplode
0000913A 6B00                       		bmi.s	loc_8CA4
0000913C 4A68 0010                  		tst.w	$10(a0)
00009140 6A00                       		bpl.s	Obj20_ChkExplode
00009142 4468 0010                  		neg.w	$10(a0)
00009146 6000                       		bra.s	Obj20_ChkExplode
00009148                            ; ===========================================================================
00009148                            
00009148                            loc_8CA4:				; XREF: Obj20_Bounce
00009148 4A68 0010                  		tst.w	$10(a0)
0000914C 6B00                       		bmi.s	Obj20_ChkExplode
0000914E 4468 0010                  		neg.w	$10(a0)
00009152                            
00009152                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009152 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009156 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009158 10BC 0024                  		move.b	#$24,0(a0)
0000915C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009160 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009166 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000916A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000916E 6A00                       		bpl.s	Obj20_Display
00009170 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009176 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000917C                            
0000917C                            Obj20_Display:
0000917C 6100 0000                  		bsr.w	DisplaySprite
00009180 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009184 0640 00E0                  		addi.w	#$E0,d0
00009188 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000918C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009190 4E75                       		rts	
00009192                            ; ===========================================================================
00009192                            ; ---------------------------------------------------------------------------
00009192                            ; Object 24 - explosion	from a destroyed monitor
00009192                            ; ---------------------------------------------------------------------------
00009192                            
00009192                            Obj24:					; XREF: Obj_Index
00009192 7000                       		moveq	#0,d0
00009194 1028 0024                  		move.b	$24(a0),d0
00009198 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000919C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000091A0                            ; ===========================================================================
000091A0 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000091A2 0000                       		dc.w Obj24_Animate-Obj24_Index
000091A4                            ; ===========================================================================
000091A4                            
000091A4                            Obj24_Main:				; XREF: Obj24_Index
000091A4 5428 0024                  		addq.b	#2,$24(a0)
000091A8 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000091B0 317C 041C 0002             		move.w	#$41C,2(a0)
000091B6 117C 0004 0001             		move.b	#4,1(a0)
000091BC 117C 0001 0018             		move.b	#1,$18(a0)
000091C2 117C 0000 0020             		move.b	#0,$20(a0)
000091C8 117C 000C 0019             		move.b	#$C,$19(a0)
000091CE 117C 0009 001E             		move.b	#9,$1E(a0)
000091D4 117C 0000 001A             		move.b	#0,$1A(a0)
000091DA 303C 00A5                  		move.w	#$A5,d0
000091DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
000091E4                            
000091E4                            Obj24_Animate:				; XREF: Obj24_Index
000091E4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000091E8 6A00                       		bpl.s	Obj24_Display
000091EA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000091F0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000091F4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000091FA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000091FE                            
000091FE                            Obj24_Display:
000091FE 6000 0000                  		bra.w	DisplaySprite
00009202                            ; ===========================================================================
00009202                            ; ---------------------------------------------------------------------------
00009202                            ; Object 27 - explosion	from a destroyed enemy
00009202                            ; ---------------------------------------------------------------------------
00009202                            
00009202                            Obj27:					; XREF: Obj_Index
00009202 7000                       		moveq	#0,d0
00009204 1028 0024                  		move.b	$24(a0),d0
00009208 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000920C 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009210                            ; ===========================================================================
00009210 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009212 0000                       		dc.w Obj27_Main-Obj27_Index
00009214 0000                       		dc.w Obj27_Animate-Obj27_Index
00009216                            ; ===========================================================================
00009216                            
00009216                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009216 5428 0024                  		addq.b	#2,$24(a0)
0000921A 6100 0000                  		bsr.w	SingleObjLoad
0000921E 6600                       		bne.s	Obj27_Main
00009220 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009224 3368 0008 0008             		move.w	8(a0),8(a1)
0000922A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009230 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009236                            
00009236                            Obj27_Main:				; XREF: Obj27_Index
00009236 5428 0024                  		addq.b	#2,$24(a0)
0000923A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009242 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009248 117C 0004 0001             		move.b	#4,1(a0)
0000924E 117C 0001 0018             		move.b	#1,$18(a0)
00009254 117C 0000 0020             		move.b	#0,$20(a0)
0000925A 117C 000C 0019             		move.b	#$C,$19(a0)
00009260                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009260 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009266 117C 0000 001A             		move.b	#0,$1A(a0)
0000926C 303C 00C1                  		move.w	#$C1,d0
00009270 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009276                            
00009276 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000927C 1028 0028                  		move.b	$28(a0),d0
00009280 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009286 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000928C                            
0000928C                            Obj27_Animate:				; XREF: Obj27_Index
0000928C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009290 6A00                       		bpl.s	Obj27_Display
00009292                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009292 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009298 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000929C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000092A2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000092A6                            
000092A6                            Obj27_Display:
000092A6 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000092AC 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000092B2 6000 0000                  		bra.w	DisplaySprite
000092B6                            ; ===========================================================================
000092B6                            ; ---------------------------------------------------------------------------
000092B6                            Obj27_ExplosionXYSpd:
000092B6                            		; dc.w	-$350, -$300	; Left
000092B6                            		; dc.w	-$200, -$450	; Near middle (left)
000092B6                            		; dc.w	0, -$500	; Middle
000092B6                            		; dc.w	$200, -$450	; Near middle (right)
000092B6                            		; dc.w	$350, -$300	; Right
000092B6                            
000092B6 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000092BA FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000092BE 0000 FA00                  		dc.w	0, -$600	; Middle
000092C2 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000092C6 0150 FC00                  		dc.w	$150, -$400	; Right
000092CA                            
000092CA 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000092E4                            ; ---------------------------------------------------------------------------
000092E4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000092E4                            ; ---------------------------------------------------------------------------
000092E4                            
000092E4                            Obj3F:					; XREF: Obj_Index
000092E4 7000                       		moveq	#0,d0
000092E6 1028 0024                  		move.b	$24(a0),d0
000092EA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000092EE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000092F2                            ; ===========================================================================
000092F2 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000092F4 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000092F6                            ; ===========================================================================
000092F6                            
000092F6                            Obj3F_Main:				; XREF: Obj3F_Index
000092F6 5428 0024                  		addq.b	#2,$24(a0)
000092FA 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009302 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009308 117C 0004 0001             		move.b	#4,1(a0)
0000930E 117C 0001 0018             		move.b	#1,$18(a0)
00009314 117C 0000 0020             		move.b	#0,$20(a0)
0000931A 117C 000C 0019             		move.b	#$C,$19(a0)
00009320 117C 0007 001E             		move.b	#7,$1E(a0)
00009326 117C 0000 001A             		move.b	#0,$1A(a0)
0000932C 303C 00C4                  		move.w	#$C4,d0
00009330 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009336                            ; ===========================================================================
00009336                            Ani_obj1E:
00009336                            	include "_anim\obj1E.asm"
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Animation script - doors (SBZ)
00009336                            ; ---------------------------------------------------------------------------
00009336 0000                       		dc.w byte_8E4A-Ani_obj1E
00009338 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009350 00                         		even
00009350 00                         		even
00009350                            
00009350                            ; ---------------------------------------------------------------------------
00009350                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009350                            ; ---------------------------------------------------------------------------
00009350                            Map_obj1E:
00009350                            	include "_maps\obj1E.asm"
00009350                            ; ---------------------------------------------------------------------------
00009350                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009350                            ; ---------------------------------------------------------------------------
00009350 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009354 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009358 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000935C 02                         byte_8E6E:	dc.b 2
0000935D EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009362 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009367 02                         byte_8E79:	dc.b 2
00009368 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000936D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009372 02                         byte_8E84:	dc.b 2
00009373 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009378 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000937D 02                         byte_8E8F:	dc.b 2
0000937E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009383 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009388 01                         byte_8E9A:	dc.b 1
00009389 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000938E 01                         byte_8EA0:	dc.b 1
0000938F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009394                            		even
00009394                            		even
00009394                            
00009394                            ; ---------------------------------------------------------------------------
00009394                            ; Sprite mappings - explosion
00009394                            ; ---------------------------------------------------------------------------
00009394                            Map_obj24:
00009394                            	include "_maps\obj24.asm"
00009394                            ; ---------------------------------------------------------------------------
00009394                            ; Sprite mappings - explosion
00009394                            ; ---------------------------------------------------------------------------
00009394 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009398 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000939C 01                         byte_8EAE:	dc.b 1
0000939D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000093A2 01                         byte_8EB4:	dc.b 1
000093A3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000093A8 01                         byte_8EBA:	dc.b 1
000093A9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000093AE 01                         byte_8EC0:	dc.b 1
000093AF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000093B4                            		even
000093B4                            		even
000093B4                            
000093B4                            ; ---------------------------------------------------------------------------
000093B4                            ; Sprite mappings - explosion
000093B4                            ; ---------------------------------------------------------------------------
000093B4 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000093B8 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000093BC 0000                       		dc.w byte_8EF7-Map_obj27
000093BE 01                         byte_8ED0:	dc.b 1
000093BF F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000093C4 01                         byte_8ED6:	dc.b 1
000093C5 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000093CA 01                         byte_8EDC:	dc.b 1
000093CB F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000093D0 04                         byte_8EE2:	dc.b 4
000093D1 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000093D6 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000093DB 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000093E0 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000093E5 04                         byte_8EF7:	dc.b 4
000093E6 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000093EB EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000093F0 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000093F5 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000093FA                            		even
000093FA                            ; ---------------------------------------------------------------------------
000093FA                            ; Sprite mappings - explosion from when	a boss is destroyed
000093FA                            ; ---------------------------------------------------------------------------
000093FA FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000093FC 0000                       		dc.w byte_8F16-Map_obj3F
000093FE 0000                       		dc.w byte_8F1C-Map_obj3F
00009400 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009402 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009404 01                         byte_8F16:	dc.b 1
00009405 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000940A 01                         byte_8F1C:	dc.b 1
0000940B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009410                            		even
00009410                            ; ===========================================================================
00009410                            ; ---------------------------------------------------------------------------
00009410                            ; Object 28 - animals
00009410                            ; ---------------------------------------------------------------------------
00009410                            
00009410                            Obj28:					; XREF: Obj_Index
00009410 7000                       		moveq	#0,d0
00009412 1028 0024                  		move.b	$24(a0),d0
00009416 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000941A 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000941E                            ; ===========================================================================
0000941E 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009422 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009426 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000942A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000942E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009432 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009436 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000943A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000943E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009442 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009446 0000                       		dc.w loc_92D6-Obj28_Index
00009448                            
00009448 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009454                            
00009454 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009458 0000 0000                  		dc.l Map_obj28
0000945C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009460 0000 0000                  		dc.l Map_obj28a		; mappings address
00009464 FE80 FD00                  		dc.w $FE80, $FD00
00009468 0000 0000                  		dc.l Map_obj28
0000946C FEC0 FE80                  		dc.w $FEC0, $FE80
00009470 0000 0000                  		dc.l Map_obj28a
00009474 FE40 FD00                  		dc.w $FE40, $FD00
00009478 0000 0000                  		dc.l Map_obj28b
0000947C FD00 FC00                  		dc.w $FD00, $FC00
00009480 0000 0000                  		dc.l Map_obj28a
00009484 FD80 FC80                  		dc.w $FD80, $FC80
00009488 0000 0000                  		dc.l Map_obj28b
0000948C                            
0000948C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000949C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000094AC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000094B8                            
000094B8 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000094CC 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000094E0 0000 0000                  		dc.l Map_obj28b
000094E4                            
000094E4 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000094F6 0565 05B3                  		dc.w $565, $5B3
000094FA                            ; ===========================================================================
000094FA                            
000094FA                            Obj28_Ending:				; XREF: Obj28_Index
000094FA 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000094FE 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009502 7000                       		moveq	#0,d0
00009504 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009508 D040                       		add.w	d0,d0		; multiply d0 by 2
0000950A 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000950E 0440 0014                  		subi.w	#$14,d0
00009512 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009518 D040                       		add.w	d0,d0
0000951A 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009520 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009524 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000952A 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009530 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009536 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000953C 117C 000C 0016             		move.b	#$C,$16(a0)
00009542 117C 0004 0001             		move.b	#4,1(a0)
00009548 08E8 0000 0001             		bset	#0,1(a0)
0000954E 117C 0006 0018             		move.b	#6,$18(a0)
00009554 117C 0008 0019             		move.b	#8,$19(a0)
0000955A 117C 0007 001E             		move.b	#7,$1E(a0)
00009560 6000 0000                  		bra.w	DisplaySprite
00009564                            ; ===========================================================================
00009564                            
00009564                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009564 5428 0024                  		addq.b	#2,$24(a0)
00009568 6100 96F2                  		bsr.w	RandomNumber
0000956C 0240 0001                  		andi.w	#1,d0
00009570 7200                       		moveq	#0,d1
00009572 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009576 D241                       		add.w	d1,d1
00009578 D240                       		add.w	d0,d1
0000957A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000957E 1031 1000                  		move.b	(a1,d1.w),d0
00009582 1140 0030                  		move.b	d0,$30(a0)
00009586 E748                       		lsl.w	#3,d0
00009588 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000958C D2C0                       		adda.w	d0,a1
0000958E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009592 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009596 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000959A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000095A0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000095A6 6700                       		beq.s	loc_90C0	; if yes, branch
000095A8 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000095AE                            
000095AE                            loc_90C0:
000095AE 117C 000C 0016             		move.b	#$C,$16(a0)
000095B4 117C 0004 0001             		move.b	#4,1(a0)
000095BA 08E8 0000 0001             		bset	#0,1(a0)
000095C0 117C 0006 0018             		move.b	#6,$18(a0)
000095C6 117C 0008 0019             		move.b	#8,$19(a0)
000095CC 117C 0007 001E             		move.b	#7,$1E(a0)
000095D2 117C 0002 001A             		move.b	#2,$1A(a0)
000095D8 317C FC00 0012             		move.w	#-$400,$12(a0)
000095DE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095E2 6600                       		bne.s	loc_911C
000095E4 6100 0000                  		bsr.w	SingleObjLoad
000095E8 6600                       		bne.s	Obj28_Display
000095EA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000095EE 3368 0008 0008             		move.w	8(a0),8(a1)
000095F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095FA 3028 003E                  		move.w	$3E(a0),d0
000095FE E248                       		lsr.w	#1,d0
00009600 1340 001A                  		move.b	d0,$1A(a1)
00009604                            
00009604                            Obj28_Display:
00009604 6000 0000                  		bra.w	DisplaySprite
00009608                            ; ===========================================================================
00009608                            
00009608                            loc_911C:
00009608 117C 0012 0024             		move.b	#$12,$24(a0)
0000960E 4268 0010                  		clr.w	$10(a0)
00009612 6000 0000                  		bra.w	DisplaySprite
00009616                            ; ===========================================================================
00009616                            
00009616                            loc_912A:				; XREF: Obj28_Index
00009616 4A28 0001                  		tst.b	1(a0)
0000961A 6A00 0000                  		bpl.w	DeleteObject
0000961E 6100 0000                  		bsr.w	ObjectFall
00009622 4A68 0012                  		tst.w	$12(a0)
00009626 6B00                       		bmi.s	loc_9180
00009628 4EB9 0000 0000             		jsr	ObjHitFloor
0000962E 4A41                       		tst.w	d1
00009630 6A00                       		bpl.s	loc_9180
00009632 D368 000C                  		add.w	d1,$C(a0)
00009636 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000963C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009642 117C 0001 001A             		move.b	#1,$1A(a0)
00009648 1028 0030                  		move.b	$30(a0),d0
0000964C D000                       		add.b	d0,d0
0000964E 5800                       		addq.b	#4,d0
00009650 1140 0024                  		move.b	d0,$24(a0)
00009654 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009658 6700                       		beq.s	loc_9180
0000965A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009660 6700                       		beq.s	loc_9180
00009662 4468 0010                  		neg.w	$10(a0)
00009666 0868 0000 0001             		bchg	#0,1(a0)
0000966C                            
0000966C                            loc_9180:
0000966C 6000 0000                  		bra.w	DisplaySprite
00009670                            ; ===========================================================================
00009670                            
00009670                            loc_9184:				; XREF: Obj28_Index
00009670 6100 0000                  		bsr.w	ObjectFall
00009674 117C 0001 001A             		move.b	#1,$1A(a0)
0000967A 4A68 0012                  		tst.w	$12(a0)
0000967E 6B00                       		bmi.s	loc_91AE
00009680 117C 0000 001A             		move.b	#0,$1A(a0)
00009686 4EB9 0000 0000             		jsr	ObjHitFloor
0000968C 4A41                       		tst.w	d1
0000968E 6A00                       		bpl.s	loc_91AE
00009690 D368 000C                  		add.w	d1,$C(a0)
00009694 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000969A                            
0000969A                            loc_91AE:
0000969A 4A28 0028                  		tst.b	$28(a0)
0000969E 6600                       		bne.s	loc_9224
000096A0 4A28 0001                  		tst.b	1(a0)
000096A4 6A00 0000                  		bpl.w	DeleteObject
000096A8 6000 0000                  		bra.w	DisplaySprite
000096AC                            ; ===========================================================================
000096AC                            
000096AC                            loc_91C0:				; XREF: Obj28_Index
000096AC 6100 0000                  		bsr.w	SpeedToPos
000096B0 0668 0018 0012             		addi.w	#$18,$12(a0)
000096B6 4A68 0012                  		tst.w	$12(a0)
000096BA 6B00                       		bmi.s	loc_91FC
000096BC 4EB9 0000 0000             		jsr	ObjHitFloor
000096C2 4A41                       		tst.w	d1
000096C4 6A00                       		bpl.s	loc_91FC
000096C6 D368 000C                  		add.w	d1,$C(a0)
000096CA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096D0 4A28 0028                  		tst.b	$28(a0)
000096D4 6700                       		beq.s	loc_91FC
000096D6 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000096DC 6700                       		beq.s	loc_91FC
000096DE 4468 0010                  		neg.w	$10(a0)
000096E2 0868 0000 0001             		bchg	#0,1(a0)
000096E8                            
000096E8                            loc_91FC:
000096E8 5328 001E                  		subq.b	#1,$1E(a0)
000096EC 6A00                       		bpl.s	loc_9212
000096EE 117C 0001 001E             		move.b	#1,$1E(a0)
000096F4 5228 001A                  		addq.b	#1,$1A(a0)
000096F8 0228 0001 001A             		andi.b	#1,$1A(a0)
000096FE                            
000096FE                            loc_9212:
000096FE 4A28 0028                  		tst.b	$28(a0)
00009702 6600                       		bne.s	loc_9224
00009704 4A28 0001                  		tst.b	1(a0)
00009708 6A00 0000                  		bpl.w	DeleteObject
0000970C 6000 0000                  		bra.w	DisplaySprite
00009710                            ; ===========================================================================
00009710                            
00009710                            loc_9224:				; XREF: Obj28_Index
00009710 3028 0008                  		move.w	8(a0),d0
00009714 9078 D008                  		sub.w	($FFFFD008).w,d0
00009718 6500                       		bcs.s	loc_923C
0000971A 0440 0180                  		subi.w	#$180,d0
0000971E 6A00                       		bpl.s	loc_923C
00009720 4A28 0001                  		tst.b	1(a0)
00009724 6A00 0000                  		bpl.w	DeleteObject
00009728                            
00009728                            loc_923C:
00009728 6000 0000                  		bra.w	DisplaySprite
0000972C                            ; ===========================================================================
0000972C                            
0000972C                            loc_9240:				; XREF: Obj28_Index
0000972C 4A28 0001                  		tst.b	1(a0)
00009730 6A00 0000                  		bpl.w	DeleteObject
00009734 5368 0036                  		subq.w	#1,$36(a0)
00009738 6600 0000                  		bne.w	loc_925C
0000973C 117C 0002 0024             		move.b	#2,$24(a0)
00009742 117C 0003 0018             		move.b	#3,$18(a0)
00009748                            
00009748                            loc_925C:
00009748 6000 0000                  		bra.w	DisplaySprite
0000974C                            ; ===========================================================================
0000974C                            
0000974C                            loc_9260:				; XREF: Obj28_Index
0000974C 6100 0000                  		bsr.w	sub_9404
00009750 6400                       		bcc.s	loc_927C
00009752 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009758 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000975E 117C 000E 0024             		move.b	#$E,$24(a0)
00009764 6000 FF46                  		bra.w	loc_91C0
00009768                            ; ===========================================================================
00009768                            
00009768                            loc_927C:
00009768 6000 FFA6                  		bra.w	loc_9224
0000976C                            ; ===========================================================================
0000976C                            
0000976C                            loc_9280:				; XREF: Obj28_Index
0000976C 6100 0000                  		bsr.w	sub_9404
00009770 6A00                       		bpl.s	loc_92B6
00009772 4268 0010                  		clr.w	$10(a0)
00009776 4268 0032                  		clr.w	$32(a0)
0000977A 6100 0000                  		bsr.w	SpeedToPos
0000977E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009784 6100 0000                  		bsr.w	loc_93C4
00009788 6100 0000                  		bsr.w	loc_93EC
0000978C 5328 001E                  		subq.b	#1,$1E(a0)
00009790 6A00                       		bpl.s	loc_92B6
00009792 117C 0001 001E             		move.b	#1,$1E(a0)
00009798 5228 001A                  		addq.b	#1,$1A(a0)
0000979C 0228 0001 001A             		andi.b	#1,$1A(a0)
000097A2                            
000097A2                            loc_92B6:
000097A2 6000 FF6C                  		bra.w	loc_9224
000097A6                            ; ===========================================================================
000097A6                            
000097A6                            loc_92BA:				; XREF: Obj28_Index
000097A6 6100 0000                  		bsr.w	sub_9404
000097AA 6A00                       		bpl.s	loc_9310
000097AC 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097B2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097B8 117C 0004 0024             		move.b	#4,$24(a0)
000097BE 6000 FEB0                  		bra.w	loc_9184
000097C2                            ; ===========================================================================
000097C2                            
000097C2                            loc_92D6:				; XREF: Obj28_Index
000097C2 6100 0000                  		bsr.w	ObjectFall
000097C6 117C 0001 001A             		move.b	#1,$1A(a0)
000097CC 4A68 0012                  		tst.w	$12(a0)
000097D0 6B00                       		bmi.s	loc_9310
000097D2 117C 0000 001A             		move.b	#0,$1A(a0)
000097D8 4EB9 0000 0000             		jsr	ObjHitFloor
000097DE 4A41                       		tst.w	d1
000097E0 6A00                       		bpl.s	loc_9310
000097E2 4628 0029                  		not.b	$29(a0)
000097E6 6600                       		bne.s	loc_9306
000097E8 4468 0010                  		neg.w	$10(a0)
000097EC 0868 0000 0001             		bchg	#0,1(a0)
000097F2                            
000097F2                            loc_9306:
000097F2 D368 000C                  		add.w	d1,$C(a0)
000097F6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097FC                            
000097FC                            loc_9310:
000097FC 6000 FF12                  		bra.w	loc_9224
00009800                            ; ===========================================================================
00009800                            
00009800                            loc_9314:				; XREF: Obj28_Index
00009800 6100 0000                  		bsr.w	sub_9404
00009804 6A00                       		bpl.s	loc_932E
00009806 4268 0010                  		clr.w	$10(a0)
0000980A 4268 0032                  		clr.w	$32(a0)
0000980E 6100 0000                  		bsr.w	ObjectFall
00009812 6100 0000                  		bsr.w	loc_93C4
00009816 6100 0000                  		bsr.w	loc_93EC
0000981A                            
0000981A                            loc_932E:
0000981A 6000 FEF4                  		bra.w	loc_9224
0000981E                            ; ===========================================================================
0000981E                            
0000981E                            loc_9332:				; XREF: Obj28_Index
0000981E 6100 0000                  		bsr.w	sub_9404
00009822 6A00                       		bpl.s	loc_936C
00009824 6100 0000                  		bsr.w	ObjectFall
00009828 117C 0001 001A             		move.b	#1,$1A(a0)
0000982E 4A68 0012                  		tst.w	$12(a0)
00009832 6B00                       		bmi.s	loc_936C
00009834 117C 0000 001A             		move.b	#0,$1A(a0)
0000983A 4EB9 0000 0000             		jsr	ObjHitFloor
00009840 4A41                       		tst.w	d1
00009842 6A00                       		bpl.s	loc_936C
00009844 4468 0010                  		neg.w	$10(a0)
00009848 0868 0000 0001             		bchg	#0,1(a0)
0000984E D368 000C                  		add.w	d1,$C(a0)
00009852 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009858                            
00009858                            loc_936C:
00009858 6000 FEB6                  		bra.w	loc_9224
0000985C                            ; ===========================================================================
0000985C                            
0000985C                            loc_9370:				; XREF: Obj28_Index
0000985C 6100 0000                  		bsr.w	sub_9404
00009860 6A00                       		bpl.s	loc_93C0
00009862 6100 0000                  		bsr.w	SpeedToPos
00009866 0668 0018 0012             		addi.w	#$18,$12(a0)
0000986C 4A68 0012                  		tst.w	$12(a0)
00009870 6B00                       		bmi.s	loc_93AA
00009872 4EB9 0000 0000             		jsr	ObjHitFloor
00009878 4A41                       		tst.w	d1
0000987A 6A00                       		bpl.s	loc_93AA
0000987C 4628 0029                  		not.b	$29(a0)
00009880 6600                       		bne.s	loc_93A0
00009882 4468 0010                  		neg.w	$10(a0)
00009886 0868 0000 0001             		bchg	#0,1(a0)
0000988C                            
0000988C                            loc_93A0:
0000988C D368 000C                  		add.w	d1,$C(a0)
00009890 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009896                            
00009896                            loc_93AA:
00009896 5328 001E                  		subq.b	#1,$1E(a0)
0000989A 6A00                       		bpl.s	loc_93C0
0000989C 117C 0001 001E             		move.b	#1,$1E(a0)
000098A2 5228 001A                  		addq.b	#1,$1A(a0)
000098A6 0228 0001 001A             		andi.b	#1,$1A(a0)
000098AC                            
000098AC                            loc_93C0:
000098AC 6000 FE62                  		bra.w	loc_9224
000098B0                            ; ===========================================================================
000098B0                            
000098B0                            loc_93C4:
000098B0 117C 0001 001A             		move.b	#1,$1A(a0)
000098B6 4A68 0012                  		tst.w	$12(a0)
000098BA 6B00                       		bmi.s	locret_93EA
000098BC 117C 0000 001A             		move.b	#0,$1A(a0)
000098C2 4EB9 0000 0000             		jsr	ObjHitFloor
000098C8 4A41                       		tst.w	d1
000098CA 6A00                       		bpl.s	locret_93EA
000098CC D368 000C                  		add.w	d1,$C(a0)
000098D0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098D6                            
000098D6                            locret_93EA:
000098D6 4E75                       		rts	
000098D8                            ; ===========================================================================
000098D8                            
000098D8                            loc_93EC:
000098D8 08E8 0000 0001             		bset	#0,1(a0)
000098DE 3028 0008                  		move.w	8(a0),d0
000098E2 9078 D008                  		sub.w	($FFFFD008).w,d0
000098E6 6400                       		bcc.s	locret_9402
000098E8 08A8 0000 0001             		bclr	#0,1(a0)
000098EE                            
000098EE                            locret_9402:
000098EE 4E75                       		rts	
000098F0                            
000098F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098F0                            
000098F0                            
000098F0                            sub_9404:
000098F0 3038 D008                  		move.w	($FFFFD008).w,d0
000098F4 9068 0008                  		sub.w	8(a0),d0
000098F8 0440 00B8                  		subi.w	#$B8,d0
000098FC 4E75                       		rts	
000098FE                            ; End of function sub_9404
000098FE                            
000098FE                            ; ===========================================================================
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            ; Object 29 - points that appear when you destroy something
000098FE                            ; ---------------------------------------------------------------------------
000098FE                            
000098FE                            Obj29:					; XREF: Obj_Index
000098FE 7000                       		moveq	#0,d0
00009900 1028 0024                  		move.b	$24(a0),d0
00009904 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009908 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000990C 6000 0000                  		bra.w	DisplaySprite
00009910                            ; ===========================================================================
00009910 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009912 0000                       		dc.w Obj29_Slower-Obj29_Index
00009914                            ; ===========================================================================
00009914                            
00009914                            Obj29_Main:				; XREF: Obj29_Index
00009914 5428 0024                  		addq.b	#2,$24(a0)
00009918 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009920 317C 2797 0002             		move.w	#$2797,2(a0)
00009926 117C 0004 0001             		move.b	#4,1(a0)
0000992C 117C 0001 0018             		move.b	#1,$18(a0)
00009932 117C 0008 0019             		move.b	#8,$19(a0)
00009938 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000993E                            
0000993E                            Obj29_Slower:				; XREF: Obj29_Index
0000993E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009942 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009946 6100 0000                  		bsr.w	SpeedToPos
0000994A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009950 4E75                       		rts	
00009952                            ; ===========================================================================
00009952                            ; ---------------------------------------------------------------------------
00009952                            ; Sprite mappings - animals
00009952                            ; ---------------------------------------------------------------------------
00009952                            Map_obj28:
00009952                            	include "_maps\obj28.asm"
00009952                            ; ---------------------------------------------------------------------------
00009952                            ; Sprite mappings - animals
00009952                            ; ---------------------------------------------------------------------------
00009952 0000                       		dc.w byte_9472-Map_obj28
00009954 0000                       		dc.w byte_9478-Map_obj28
00009956 0000                       		dc.w byte_946C-Map_obj28
00009958 01                         byte_946C:	dc.b 1
00009959 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000995E 01                         byte_9472:	dc.b 1
0000995F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009964 01                         byte_9478:	dc.b 1
00009965 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000996A                            		even
0000996A                            		even
0000996A                            
0000996A                            Map_obj28a:
0000996A                            	include "_maps\obj28a.asm"
0000996A                            ; ---------------------------------------------------------------------------
0000996A                            ; Sprite mappings - animals
0000996A                            ; ---------------------------------------------------------------------------
0000996A 0000                       		dc.w byte_948A-Map_obj28a
0000996C 0000                       		dc.w byte_9490-Map_obj28a
0000996E 0000                       		dc.w byte_9484-Map_obj28a
00009970 01                         byte_9484:	dc.b 1
00009971 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009976 01                         byte_948A:	dc.b 1
00009977 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000997C 01                         byte_9490:	dc.b 1
0000997D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009982                            		even
00009982                            		even
00009982                            
00009982                            Map_obj28b:
00009982                            	include "_maps\obj28b.asm"
00009982                            ; ---------------------------------------------------------------------------
00009982                            ; Sprite mappings - animals
00009982                            ; ---------------------------------------------------------------------------
00009982 0000                       		dc.w byte_94A2-Map_obj28b
00009984 0000                       		dc.w byte_94A8-Map_obj28b
00009986 0000                       		dc.w byte_949C-Map_obj28b
00009988 01                         byte_949C:	dc.b 1
00009989 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000998E 01                         byte_94A2:	dc.b 1
0000998F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009994 01                         byte_94A8:	dc.b 1
00009995 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000999A                            		even
0000999A                            		even
0000999A                            
0000999A                            ; ---------------------------------------------------------------------------
0000999A                            ; Sprite mappings - points that	appear when you	destroy	something
0000999A                            ; ---------------------------------------------------------------------------
0000999A                            Map_obj29:
0000999A                            	include "_maps\obj29.asm"
0000999A                            ; ---------------------------------------------------------------------------
0000999A                            ; Sprite mappings - points that	appear when you	destroy	something
0000999A                            ; ---------------------------------------------------------------------------
0000999A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000999E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000099A2 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000099A6 0000                       		dc.w byte_94E5-Map_obj29
000099A8 01                         byte_94BC:	dc.b 1
000099A9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000099AE 01                         byte_94C2:	dc.b 1
000099AF FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000099B4 01                         byte_94C8:	dc.b 1
000099B5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000099BA 01                         byte_94CE:	dc.b 1
000099BB FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000099C0 01                         byte_94D4:	dc.b 1
000099C1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000099C6 02                         byte_94DA:	dc.b 2
000099C7 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000099CC FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000099D1 02                         byte_94E5:	dc.b 2
000099D2 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000099D7 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000099DC                            		even
000099DC                            		even
000099DC                            
000099DC                            ; ===========================================================================
000099DC                            ; ---------------------------------------------------------------------------
000099DC                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000099DC                            ; ---------------------------------------------------------------------------
000099DC                            
000099DC                            Obj1F:					; XREF: Obj_Index
000099DC 7000                       		moveq	#0,d0
000099DE 1028 0024                  		move.b	$24(a0),d0
000099E2 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000099E6 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000099EA                            ; ===========================================================================
000099EA 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000099EC 0000                       		dc.w Obj1F_Action-Obj1F_Index
000099EE 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000099F0 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000099F2 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000099F4                            ; ===========================================================================
000099F4                            
000099F4                            Obj1F_Main:				; XREF: Obj1F_Index
000099F4 117C 0010 0016             		move.b	#$10,$16(a0)
000099FA 117C 0008 0017             		move.b	#8,$17(a0)
00009A00 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009A08 317C 0400 0002             		move.w	#$400,2(a0)
00009A0E 117C 0004 0001             		move.b	#4,1(a0)
00009A14 117C 0003 0018             		move.b	#3,$18(a0)
00009A1A 117C 0006 0020             		move.b	#6,$20(a0)
00009A20 117C 0015 0019             		move.b	#$15,$19(a0)
00009A26 6100 0000                  		bsr.w	ObjectFall
00009A2A 4EB9 0000 0000             		jsr	ObjHitFloor
00009A30 4A41                       		tst.w	d1
00009A32 6A00                       		bpl.s	locret_955A
00009A34 D368 000C                  		add.w	d1,$C(a0)
00009A38 1143 0026                  		move.b	d3,$26(a0)
00009A3C 317C 0000 0012             		move.w	#0,$12(a0)
00009A42 5428 0024                  		addq.b	#2,$24(a0)
00009A46                            
00009A46                            locret_955A:
00009A46 4E75                       		rts	
00009A48                            ; ===========================================================================
00009A48                            
00009A48                            Obj1F_Action:				; XREF: Obj1F_Index
00009A48 7000                       		moveq	#0,d0
00009A4A 1028 0025                  		move.b	$25(a0),d0
00009A4E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009A52 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009A56 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009A5C 6100 0000                  		bsr.w	AnimateSprite
00009A60 6000 0000                  		bra.w	MarkObjGone
00009A64                            ; ===========================================================================
00009A64 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A66 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A68 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A6C 6A00                       		bpl.s	locret_95B6
00009A6E 4A28 0001                  		tst.b	1(a0)
00009A72 6A00                       		bpl.s	Obj1F_Move
00009A74 0868 0001 0032             		bchg	#1,$32(a0)
00009A7A 6600                       		bne.s	Obj1F_MakeFire
00009A7C                            
00009A7C                            Obj1F_Move:
00009A7C 5428 0025                  		addq.b	#2,$25(a0)
00009A80 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A86 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A8C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A90 5600                       		addq.b	#3,d0
00009A92 1140 001C                  		move.b	d0,$1C(a0)
00009A96 0868 0000 0022             		bchg	#0,$22(a0)
00009A9C 6600                       		bne.s	locret_95B6
00009A9E 4468 0010                  		neg.w	$10(a0)		; change direction
00009AA2                            
00009AA2                            locret_95B6:
00009AA2 4E75                       		rts	
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009AA4 317C 003B 0030             		move.w	#$3B,$30(a0)
00009AAA 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009AB0 6100 0000                  		bsr.w	SingleObjLoad
00009AB4 6600                       		bne.s	Obj1F_MakeFire2
00009AB6 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009ABA 137C 0006 0024             		move.b	#6,$24(a1)
00009AC0 3368 0008 0008             		move.w	8(a0),8(a1)
00009AC6 0469 0010 0008             		subi.w	#$10,8(a1)
00009ACC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009AD2 337C FF00 0010             		move.w	#-$100,$10(a1)
00009AD8                            
00009AD8                            Obj1F_MakeFire2:
00009AD8 6100 0000                  		bsr.w	SingleObjLoad
00009ADC 6600                       		bne.s	locret_9618
00009ADE 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009AE2 137C 0006 0024             		move.b	#6,$24(a1)
00009AE8 3368 0008 0008             		move.w	8(a0),8(a1)
00009AEE 0669 0010 0008             		addi.w	#$10,8(a1)
00009AF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009AFA 337C 0100 0010             		move.w	#$100,$10(a1)
00009B00                            
00009B00                            locret_9618:
00009B00 4E75                       		rts	
00009B02                            ; ===========================================================================
00009B02                            
00009B02                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009B02 5368 0030                  		subq.w	#1,$30(a0)
00009B06 6B00                       		bmi.s	loc_966E
00009B08 6100 0000                  		bsr.w	SpeedToPos
00009B0C 0868 0000 0032             		bchg	#0,$32(a0)
00009B12 6600                       		bne.s	loc_9654
00009B14 3628 0008                  		move.w	8(a0),d3
00009B18 0643 0010                  		addi.w	#$10,d3
00009B1C 0828 0000 0022             		btst	#0,$22(a0)
00009B22 6700                       		beq.s	loc_9640
00009B24 0443 0020                  		subi.w	#$20,d3
00009B28                            
00009B28                            loc_9640:
00009B28 4EB9 0000 0000             		jsr	ObjHitFloor2
00009B2E 0C41 FFF8                  		cmpi.w	#-8,d1
00009B32 6D00                       		blt.s	loc_966E
00009B34 0C41 000C                  		cmpi.w	#$C,d1
00009B38 6C00                       		bge.s	loc_966E
00009B3A 4E75                       		rts	
00009B3C                            ; ===========================================================================
00009B3C                            
00009B3C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009B3C 4EB9 0000 0000             		jsr	ObjHitFloor
00009B42 D368 000C                  		add.w	d1,$C(a0)
00009B46 1143 0026                  		move.b	d3,$26(a0)
00009B4A 6100 0000                  		bsr.w	Obj1F_SetAni
00009B4E 5600                       		addq.b	#3,d0
00009B50 1140 001C                  		move.b	d0,$1C(a0)
00009B54 4E75                       		rts	
00009B56                            ; ===========================================================================
00009B56                            
00009B56                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009B56 5528 0025                  		subq.b	#2,$25(a0)
00009B5A 317C 003B 0030             		move.w	#59,$30(a0)
00009B60 317C 0000 0010             		move.w	#0,$10(a0)
00009B66 6100 0000                  		bsr.w	Obj1F_SetAni
00009B6A 1140 001C                  		move.b	d0,$1C(a0)
00009B6E 4E75                       		rts	
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            
00009B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B70                            
00009B70                            
00009B70                            Obj1F_SetAni:				; XREF: loc_966E
00009B70 7000                       		moveq	#0,d0
00009B72 1628 0026                  		move.b	$26(a0),d3
00009B76 6B00                       		bmi.s	loc_96A4
00009B78 0C03 0006                  		cmpi.b	#6,d3
00009B7C 6500                       		bcs.s	locret_96A2
00009B7E 7001                       		moveq	#1,d0
00009B80 0828 0000 0022             		btst	#0,$22(a0)
00009B86 6600                       		bne.s	locret_96A2
00009B88 7002                       		moveq	#2,d0
00009B8A                            
00009B8A                            locret_96A2:
00009B8A 4E75                       		rts	
00009B8C                            ; ===========================================================================
00009B8C                            
00009B8C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B8C 0C03 00FA                  		cmpi.b	#-6,d3
00009B90 6200                       		bhi.s	locret_96B6
00009B92 7002                       		moveq	#2,d0
00009B94 0828 0000 0022             		btst	#0,$22(a0)
00009B9A 6600                       		bne.s	locret_96B6
00009B9C 7001                       		moveq	#1,d0
00009B9E                            
00009B9E                            locret_96B6:
00009B9E 4E75                       		rts	
00009BA0                            ; End of function Obj1F_SetAni
00009BA0                            
00009BA0                            ; ===========================================================================
00009BA0                            
00009BA0                            Obj1F_Delete:				; XREF: Obj1F_Index
00009BA0 6100 0000                  		bsr.w	DeleteObject
00009BA4 4E75                       		rts	
00009BA6                            ; ===========================================================================
00009BA6                            ; ---------------------------------------------------------------------------
00009BA6                            ; Sub-object - missile that the	Crabmeat throws
00009BA6                            ; ---------------------------------------------------------------------------
00009BA6                            
00009BA6                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009BA6 5428 0024                  		addq.b	#2,$24(a0)
00009BAA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009BB2 317C 0400 0002             		move.w	#$400,2(a0)
00009BB8 117C 0004 0001             		move.b	#4,1(a0)
00009BBE 117C 0003 0018             		move.b	#3,$18(a0)
00009BC4 117C 0087 0020             		move.b	#$87,$20(a0)
00009BCA 117C 0008 0019             		move.b	#8,$19(a0)
00009BD0 317C FC00 0012             		move.w	#-$400,$12(a0)
00009BD6 117C 0007 001C             		move.b	#7,$1C(a0)
00009BDC                            
00009BDC                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009BDC 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009BE2 6100 0000                  		bsr.w	AnimateSprite
00009BE6 6100 0000                  		bsr.w	ObjectFall
00009BEA 6100 0000                  		bsr.w	DisplaySprite
00009BEE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009BF2 0640 00E0                  		addi.w	#$E0,d0
00009BF6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009BFA 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009BFC 4E75                       		rts	
00009BFE                            ; ===========================================================================
00009BFE                            
00009BFE                            Obj1F_Delete2:
00009BFE 6000 0000                  		bra.w	DeleteObject
00009C02                            ; ===========================================================================
00009C02                            Ani_obj1F:
00009C02                            	include "_anim\obj1F.asm"
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Animation script - Crabmeat enemy
00009C02                            ; ---------------------------------------------------------------------------
00009C02 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009C08 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009C0E 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009C12 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009C16 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009C1A 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009C1E 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009C24 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009C2A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009C30 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009C34 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009C38                            		even
00009C38                            		even
00009C38                            
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            Map_obj1F:
00009C38                            	include "_maps\obj1F.asm"
00009C38                            Map_1514:
00009C38 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009C3A 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009C3C 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009C3E 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009C40 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009C42 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009C44 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009C46 03                         Map_1514_E: 	dc.b $3
00009C47 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C4C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C51 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C56 03                         Map_1514_1E: 	dc.b $3
00009C57 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C5C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C61 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C66 03                         Map_1514_2E: 	dc.b $3
00009C67 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C6C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C71 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C76 03                         Map_1514_3E: 	dc.b $3
00009C77 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C7C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C81 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C86 03                         Map_1514_4E: 	dc.b $3
00009C87 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C8C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C91 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C96 01                         Map_1514_5E: 	dc.b $1
00009C97 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C9C 01                         Map_1514_64: 	dc.b $1
00009C9D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009CA2                            	even
00009CA2                            	even
00009CA2                            
00009CA2                            ; ===========================================================================
00009CA2                            ; ---------------------------------------------------------------------------
00009CA2                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009CA2                            ; ---------------------------------------------------------------------------
00009CA2                            
00009CA2                            Obj22:					; XREF: Obj_Index
00009CA2 7000                       		moveq	#0,d0
00009CA4 1028 0024                  		move.b	$24(a0),d0
00009CA8 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009CAC 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009CB0                            ; ===========================================================================
00009CB0 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009CB2 0000                       		dc.w Obj22_Action-Obj22_Index
00009CB4 0000                       		dc.w Obj22_Delete-Obj22_Index
00009CB6                            ; ===========================================================================
00009CB6                            
00009CB6                            Obj22_Main:				; XREF: Obj22_Index
00009CB6 5428 0024                  		addq.b	#2,$24(a0)
00009CBA 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009CC2 317C 0444 0002             		move.w	#$444,2(a0)
00009CC8 117C 0004 0001             		move.b	#4,1(a0)
00009CCE 117C 0003 0018             		move.b	#3,$18(a0)
00009CD4 117C 0008 0020             		move.b	#8,$20(a0)
00009CDA 117C 0018 0019             		move.b	#$18,$19(a0)
00009CE0                            
00009CE0                            Obj22_Action:				; XREF: Obj22_Index
00009CE0 7000                       		moveq	#0,d0
00009CE2 1028 0025                  		move.b	$25(a0),d0
00009CE6 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009CEA 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009CEE 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009CF4 6100 0000                  		bsr.w	AnimateSprite
00009CF8 6000 0000                  		bra.w	MarkObjGone
00009CFC                            ; ===========================================================================
00009CFC 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009CFE 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009D00                            ; ===========================================================================
00009D00                            
00009D00                            Obj22_Move:				; XREF: Obj22_Index2
00009D00 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D04 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009D06 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009D0C 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009D0E 5428 0025                  		addq.b	#2,$25(a0)
00009D12 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009D18 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009D1E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009D24 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D2A 6600                       		bne.s	locret_986C	; if not, branch
00009D2C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009D30                            
00009D30                            locret_986C:
00009D30 4E75                       		rts	
00009D32                            ; ===========================================================================
00009D32                            
00009D32                            Obj22_Fire:				; XREF: Obj22_Move
00009D32 6100 0000                  		bsr.w	SingleObjLoad
00009D36 6600                       		bne.s	locret_98D0
00009D38 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009D3C 3368 0008 0008             		move.w	8(a0),8(a1)
00009D42 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D48 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009D4E 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009D54 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D5A 303C 0018                  		move.w	#$18,d0
00009D5E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D64 6600                       		bne.s	loc_98AA	; if not, branch
00009D66 4440                       		neg.w	d0
00009D68 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D6C                            
00009D6C                            loc_98AA:
00009D6C D169 0008                  		add.w	d0,8(a1)
00009D70 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D76 337C 000E 0032             		move.w	#$E,$32(a1)
00009D7C 2348 003C                  		move.l	a0,$3C(a1)
00009D80 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D86 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D8C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D92                            
00009D92                            locret_98D0:
00009D92 4E75                       		rts	
00009D94                            ; ===========================================================================
00009D94                            
00009D94                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D94 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D98 6B00                       		bmi.s	Obj22_ChgDir
00009D9A 6100 0000                  		bsr.w	SpeedToPos
00009D9E 4A28 0034                  		tst.b	$34(a0)
00009DA2 6600                       		bne.s	locret_992A
00009DA4 3038 D008                  		move.w	($FFFFD008).w,d0
00009DA8 9068 0008                  		sub.w	8(a0),d0
00009DAC 6A00                       		bpl.s	Obj22_SetNrSonic
00009DAE 4440                       		neg.w	d0
00009DB0                            
00009DB0                            Obj22_SetNrSonic:
00009DB0 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009DB4 6400                       		bcc.s	locret_992A	; if not, branch
00009DB6 4A28 0001                  		tst.b	1(a0)
00009DBA 6A00                       		bpl.s	locret_992A
00009DBC 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009DC2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009DC8 6000                       		bra.s	Obj22_Stop
00009DCA                            ; ===========================================================================
00009DCA                            
00009DCA                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009DCA 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009DD0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009DD6 317C 003B 0032             		move.w	#59,$32(a0)
00009DDC                            
00009DDC                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009DDC 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009DE0 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009DE6 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009DEC                            
00009DEC                            locret_992A:
00009DEC 4E75                       		rts	
00009DEE                            ; ===========================================================================
00009DEE                            
00009DEE                            Obj22_Delete:				; XREF: Obj22_Index
00009DEE 6100 0000                  		bsr.w	DeleteObject
00009DF2 4E75                       		rts	
00009DF4                            ; ===========================================================================
00009DF4                            ; ---------------------------------------------------------------------------
00009DF4                            ; Object 23 - missile that Buzz	Bomber throws
00009DF4                            ; ---------------------------------------------------------------------------
00009DF4                            
00009DF4                            Obj23:					; XREF: Obj_Index
00009DF4 7000                       		moveq	#0,d0
00009DF6 1028 0024                  		move.b	$24(a0),d0
00009DFA 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009DFE 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009E02                            ; ===========================================================================
00009E02 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009E04 0000                       		dc.w Obj23_Animate-Obj23_Index
00009E06 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009E08 0000                       		dc.w Obj23_Delete-Obj23_Index
00009E0A 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009E0C                            ; ===========================================================================
00009E0C                            
00009E0C                            Obj23_Main:				; XREF: Obj23_Index
00009E0C 5368 0032                  		subq.w	#1,$32(a0)
00009E10 6A00                       		bpl.s	Obj23_ChkCancel
00009E12 5428 0024                  		addq.b	#2,$24(a0)
00009E16 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009E1E 317C 2444 0002             		move.w	#$2444,2(a0)
00009E24 117C 0004 0001             		move.b	#4,1(a0)
00009E2A 117C 0003 0018             		move.b	#3,$18(a0)
00009E30 117C 0008 0019             		move.b	#8,$19(a0)
00009E36 0228 0003 0022             		andi.b	#3,$22(a0)
00009E3C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009E40 6700                       		beq.s	Obj23_Animate	; if not, branch
00009E42 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009E48 117C 0087 0020             		move.b	#$87,$20(a0)
00009E4E 117C 0001 001C             		move.b	#1,$1C(a0)
00009E54 6000                       		bra.s	Obj23_Animate2
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            Obj23_Animate:				; XREF: Obj23_Index
00009E56 6100                       		bsr.s	Obj23_ChkCancel
00009E58 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E5E 6100 0000                  		bsr.w	AnimateSprite
00009E62 6000 0000                  		bra.w	DisplaySprite
00009E66                            ; ---------------------------------------------------------------------------
00009E66                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E66                            ; destroyed, and if it has, then cancel	the missile
00009E66                            ; ---------------------------------------------------------------------------
00009E66                            
00009E66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E66                            
00009E66                            
00009E66                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E66 2268 003C                  		movea.l	$3C(a0),a1
00009E6A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E6E 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E70 4E75                       		rts	
00009E72                            ; End of function Obj23_ChkCancel
00009E72                            
00009E72                            ; ===========================================================================
00009E72                            
00009E72                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E72 0828 0007 0022             		btst	#7,$22(a0)
00009E78 6600                       		bne.s	Obj23_Explode
00009E7A 117C 0087 0020             		move.b	#$87,$20(a0)
00009E80 117C 0001 001C             		move.b	#1,$1C(a0)
00009E86 6100 0000                  		bsr.w	SpeedToPos
00009E8A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E90 6100 0000                  		bsr.w	AnimateSprite
00009E94 6100 0000                  		bsr.w	DisplaySprite
00009E98 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E9C 0640 00E0                  		addi.w	#$E0,d0
00009EA0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009EA4 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009EA6 4E75                       		rts	
00009EA8                            ; ===========================================================================
00009EA8                            
00009EA8                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009EA8 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009EAC 117C 0000 0024             		move.b	#0,$24(a0)
00009EB2 6000 F2DE                  		bra.w	Obj24
00009EB6                            ; ===========================================================================
00009EB6                            
00009EB6                            Obj23_Delete:				; XREF: Obj23_Index
00009EB6 6100 0000                  		bsr.w	DeleteObject
00009EBA 4E75                       		rts	
00009EBC                            ; ===========================================================================
00009EBC                            
00009EBC                            Obj23_FromNewt:				; XREF: Obj23_Index
00009EBC 4A28 0001                  		tst.b	1(a0)
00009EC0 6AF4                       		bpl.s	Obj23_Delete
00009EC2 6100 0000                  		bsr.w	SpeedToPos
00009EC6                            
00009EC6                            Obj23_Animate2:				; XREF: Obj23_Main
00009EC6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009ECC 6100 0000                  		bsr.w	AnimateSprite
00009ED0 6100 0000                  		bsr.w	DisplaySprite
00009ED4 4E75                       		rts	
00009ED6                            ; ===========================================================================
00009ED6                            Ani_obj22:
00009ED6                            	include "_anim\obj22.asm"
00009ED6                            ; ---------------------------------------------------------------------------
00009ED6                            ; Animation script - Buzz Bomber enemy
00009ED6                            ; ---------------------------------------------------------------------------
00009ED6 0000                       		dc.w byte_9A1E-Ani_obj22
00009ED8 0000                       		dc.w byte_9A22-Ani_obj22
00009EDA 0000                       		dc.w byte_9A26-Ani_obj22
00009EDC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009EE0 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009EE4 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009EE8                            		even
00009EE8                            		even
00009EE8                            
00009EE8                            Ani_obj23:
00009EE8                            	include "_anim\obj23.asm"
00009EE8                            ; ---------------------------------------------------------------------------
00009EE8                            ; Animation script - missile that Buzz Bomber throws
00009EE8                            ; ---------------------------------------------------------------------------
00009EE8 0000                       		dc.w byte_9A2E-Ani_obj23
00009EEA 0000                       		dc.w byte_9A32-Ani_obj23
00009EEC 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009EF0 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009EF4                            		even
00009EF4                            		even
00009EF4                            
00009EF4                            ; ---------------------------------------------------------------------------
00009EF4                            ; Sprite mappings - Buzz Bomber	enemy
00009EF4                            ; ---------------------------------------------------------------------------
00009EF4                            Map_obj22:
00009EF4                            	include "_maps\obj22.asm"
00009EF4                            Map_e97a:
00009EF4 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009EF6 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009EF8 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009EFA 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009EFC 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009EFE 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009F00 06                         Map_e97a_C: 	dc.b $6
00009F01 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F06 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F0B 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F10 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F15 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F1A F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F1F 06                         Map_e97a_2B: 	dc.b $6
00009F20 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F25 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F2A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F2F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F34 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F39 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F3E 07                         Map_e97a_4A: 	dc.b $7
00009F3F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009F44 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F49 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F4E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F53 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F58 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F5D F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F62 07                         Map_e97a_6E: 	dc.b $7
00009F63 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F68 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F6D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F72 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F77 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F7C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F81 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F86 06                         Map_e97a_92: 	dc.b $6
00009F87 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F8C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F91 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F96 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F9B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009FA0 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009FA5 04                         Map_e97a_B1: 	dc.b $4
00009FA6 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FAB 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FB0 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FB5 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FBA                            	even
00009FBA                            	even
00009FBA                            
00009FBA                            ; ---------------------------------------------------------------------------
00009FBA                            ; Sprite mappings - missile that Buzz Bomber throws
00009FBA                            ; ---------------------------------------------------------------------------
00009FBA                            Map_obj23:
00009FBA                            	include "_maps\obj23.asm"
00009FBA                            ; ---------------------------------------------------------------------------
00009FBA                            ; Sprite mappings - missile that Buzz Bomber throws
00009FBA                            ; ---------------------------------------------------------------------------
00009FBA 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009FBE 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009FC2 01                         byte_9B0E:	dc.b 1
00009FC3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009FC8 01                         byte_9B14:	dc.b 1
00009FC9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009FCE 01                         byte_9B1A:	dc.b 1
00009FCF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009FD4 01                         byte_9B20:	dc.b 1
00009FD5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009FDA                            		even
00009FDA                            		even
00009FDA                            
00009FDA                            ; ===========================================================================
00009FDA                            ; ---------------------------------------------------------------------------
00009FDA                            ; Object 25 - rings
00009FDA                            ; ---------------------------------------------------------------------------
00009FDA                            
00009FDA                            Obj25:					; XREF: Obj_Index
00009FDA 7000                       		moveq	#0,d0
00009FDC 1028 0024                  		move.b	$24(a0),d0
00009FE0 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009FE4 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009FE8                            ; ===========================================================================
00009FE8 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009FEA 0000                       		dc.w Obj25_Animate-Obj25_Index
00009FEC 0000                       		dc.w Obj25_Collect-Obj25_Index
00009FEE 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009FF0 0000                       		dc.w Obj25_Delete-Obj25_Index
00009FF2                            ; ---------------------------------------------------------------------------
00009FF2                            ; Distances between rings (format: horizontal, vertical)
00009FF2                            ; ---------------------------------------------------------------------------
00009FF2 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009FF4 1800                       		dc.b $18, 0		; horizontal normal
00009FF6 2000                       		dc.b $20, 0		; horizontal wide
00009FF8 0010                       		dc.b 0,	$10		; vertical tight
00009FFA 0018                       		dc.b 0,	$18		; vertical normal
00009FFC 0020                       		dc.b 0,	$20		; vertical wide
00009FFE 1010                       		dc.b $10, $10		; diagonal
0000A000 1818                       		dc.b $18, $18
0000A002 2020                       		dc.b $20, $20
0000A004 F010                       		dc.b $F0, $10
0000A006 E818                       		dc.b $E8, $18
0000A008 E020                       		dc.b $E0, $20
0000A00A 1008                       		dc.b $10, 8
0000A00C 1810                       		dc.b $18, $10
0000A00E F008                       		dc.b $F0, 8
0000A010 E810                       		dc.b $E8, $10
0000A012                            ; ===========================================================================
0000A012                            
0000A012                            Obj25_Main:				; XREF: Obj25_Index
0000A012 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A016 7000                       		moveq	#0,d0
0000A018 1028 0023                  		move.b	$23(a0),d0
0000A01C 45F2 0002                  		lea	2(a2,d0.w),a2
0000A020 1812                       		move.b	(a2),d4
0000A022 1228 0028                  		move.b	$28(a0),d1
0000A026 1001                       		move.b	d1,d0
0000A028 0241 0007                  		andi.w	#7,d1
0000A02C 0C41 0007                  		cmpi.w	#7,d1
0000A030 6600                       		bne.s	loc_9B80
0000A032 7206                       		moveq	#6,d1
0000A034                            
0000A034                            loc_9B80:
0000A034 4841                       		swap	d1
0000A036 323C 0000                  		move.w	#0,d1
0000A03A E808                       		lsr.b	#4,d0
0000A03C D040                       		add.w	d0,d0
0000A03E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A042 4885                       		ext.w	d5
0000A044 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A048 4886                       		ext.w	d6
0000A04A 2248                       		movea.l	a0,a1
0000A04C 3428 0008                  		move.w	8(a0),d2
0000A050 3628 000C                  		move.w	$C(a0),d3
0000A054 E20C                       		lsr.b	#1,d4
0000A056 6500                       		bcs.s	loc_9C02
0000A058 0892 0007                  		bclr	#7,(a2)
0000A05C 6000                       		bra.s	loc_9BBA
0000A05E                            ; ===========================================================================
0000A05E                            
0000A05E                            Obj25_MakeRings:
0000A05E 4841                       		swap	d1
0000A060 E20C                       		lsr.b	#1,d4
0000A062 6500                       		bcs.s	loc_9C02
0000A064 0892 0007                  		bclr	#7,(a2)
0000A068 6100 0000                  		bsr.w	SingleObjLoad
0000A06C 6600                       		bne.s	loc_9C0E
0000A06E                            
0000A06E                            loc_9BBA:				; XREF: Obj25_Main
0000A06E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A072 5429 0024                  		addq.b	#2,$24(a1)
0000A076 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A07A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A080 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A084 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A08C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A092 137C 0004 0001             		move.b	#4,1(a1)
0000A098 137C 0002 0018             		move.b	#2,$18(a1)
0000A09E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A0A4 137C 0008 0019             		move.b	#8,$19(a1)
0000A0AA 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A0B0 1341 0034                  		move.b	d1,$34(a1)
0000A0B4                            
0000A0B4                            loc_9C02:
0000A0B4 5241                       		addq.w	#1,d1
0000A0B6 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A0B8 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A0BA 4841                       		swap	d1
0000A0BC 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A0C0                            
0000A0C0                            loc_9C0E:
0000A0C0 0812 0000                  		btst	#0,(a2)
0000A0C4 6600 0000                  		bne.w	DeleteObject
0000A0C8                            
0000A0C8                            Obj25_Animate:				; XREF: Obj25_Index
0000A0C8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A0CE 6100 0000                  		bsr.w	DisplaySprite
0000A0D2 3028 0032                  		move.w	$32(a0),d0
0000A0D6 0240 FF80                  		andi.w	#$FF80,d0
0000A0DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A0DE 0441 0080                  		subi.w	#$80,d1
0000A0E2 0241 FF80                  		andi.w	#$FF80,d1
0000A0E6 9041                       		sub.w	d1,d0
0000A0E8 0C40 0280                  		cmpi.w	#$280,d0
0000A0EC 6200                       		bhi.s	Obj25_Delete
0000A0EE 4E75                       		rts	
0000A0F0                            ; ===========================================================================
0000A0F0                            
0000A0F0                            Obj25_Collect:				; XREF: Obj25_Index
0000A0F0 5428 0024                  		addq.b	#2,$24(a0)
0000A0F4 117C 0000 0020             		move.b	#0,$20(a0)
0000A0FA 117C 0001 0018             		move.b	#1,$18(a0)
0000A100 6100 0000                  		bsr.w	CollectRing
0000A104 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A108 7000                       		moveq	#0,d0
0000A10A 1028 0023                  		move.b	$23(a0),d0
0000A10E 1228 0034                  		move.b	$34(a0),d1
0000A112 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A116                            
0000A116                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A116 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A11C 6100 0000                  		bsr.w	AnimateSprite
0000A120 6000 0000                  		bra.w	DisplaySprite
0000A124                            ; ===========================================================================
0000A124                            
0000A124                            Obj25_Delete:				; XREF: Obj25_Index
0000A124 6000 0000                  		bra.w	DeleteObject
0000A128                            
0000A128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A128                            
0000A128                            
0000A128                            CollectRing:				; XREF: Obj25_Collect
0000A128 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A12C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A132 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A136 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A13C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A13E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A144 6700                       		beq.s	loc_9CA4
0000A146 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A14C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A14E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A154 6600                       		bne.s	Obj25_PlaySnd
0000A156                            
0000A156                            loc_9CA4:
0000A156 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A15A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A15E 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A162                            
0000A162                            Obj25_PlaySnd:
0000A162 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A168                            ; End of function CollectRing
0000A168                            
0000A168                            ; ===========================================================================
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A168                            ; ---------------------------------------------------------------------------
0000A168                            
0000A168                            Obj37:					; XREF: Obj_Index
0000A168 7000                       		moveq	#0,d0
0000A16A 1028 0024                  		move.b	$24(a0),d0
0000A16E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A172 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A176                            ; ===========================================================================
0000A176 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A178 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A17A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A17C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A17E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A180                            ; ===========================================================================
0000A180                            
0000A180                            Obj37_CountRings:			; XREF: Obj37_Index
0000A180 2248                       		movea.l	a0,a1
0000A182 7A00                       		moveq	#0,d5
0000A184 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A188 7020                       		moveq	#32,d0
0000A18A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A18C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A18E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A190                            
0000A190                            loc_9CDE:
0000A190 5345                       		subq.w	#1,d5
0000A192 383C 0288                  		move.w	#$288,d4
0000A196 6000                       		bra.s	Obj37_MakeRings
0000A198                            ; ===========================================================================
0000A198                            
0000A198                            Obj37_Loop:
0000A198 6100 0000                  		bsr.w	SingleObjLoad
0000A19C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A1A0                            
0000A1A0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A1A0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A1A4 5429 0024                  		addq.b	#2,$24(a1)
0000A1A8 137C 0008 0016             		move.b	#8,$16(a1)
0000A1AE 137C 0008 0017             		move.b	#8,$17(a1)
0000A1B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A1BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A1C0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A1C8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A1CE 137C 0004 0001             		move.b	#4,1(a1)
0000A1D4 137C 0003 0018             		move.b	#3,$18(a1)
0000A1DA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A1E0 137C 0008 0019             		move.b	#8,$19(a1)
0000A1E6 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A1EC 4A44                       		tst.w	d4
0000A1EE 6B00                       		bmi.s	loc_9D62
0000A1F0 3004                       		move.w	d4,d0
0000A1F2 6100 8A8E                  		bsr.w	CalcSine
0000A1F6 3404                       		move.w	d4,d2
0000A1F8 E04A                       		lsr.w	#8,d2
0000A1FA E560                       		asl.w	d2,d0
0000A1FC E561                       		asl.w	d2,d1
0000A1FE 3400                       		move.w	d0,d2
0000A200 3601                       		move.w	d1,d3
0000A202 0604 0010                  		addi.b	#$10,d4
0000A206 6400                       		bcc.s	loc_9D62
0000A208 0444 0080                  		subi.w	#$80,d4
0000A20C 6400                       		bcc.s	loc_9D62
0000A20E 383C 0288                  		move.w	#$288,d4
0000A212                            
0000A212                            loc_9D62:
0000A212 3342 0010                  		move.w	d2,$10(a1)
0000A216 3343 0012                  		move.w	d3,$12(a1)
0000A21A 4442                       		neg.w	d2
0000A21C 4444                       		neg.w	d4
0000A21E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A222                            
0000A222                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A222 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A228 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A22E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A234 303C 00C6                  		move.w	#$C6,d0
0000A238 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A23E                            
0000A23E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A23E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A244 6100 0000                  		bsr.w	SpeedToPos
0000A248 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A24E 6B00                       		bmi.s	Obj37_ChkDel
0000A250 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A254 D007                       		add.b	d7,d0
0000A256 0200 0003                  		andi.b	#3,d0
0000A25A 6600                       		bne.s	Obj37_ChkDel
0000A25C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A262 4A41                       		tst.w	d1
0000A264 6A00                       		bpl.s	Obj37_ChkDel
0000A266 D368 000C                  		add.w	d1,$C(a0)
0000A26A 3028 0012                  		move.w	$12(a0),d0
0000A26E E440                       		asr.w	#2,d0
0000A270 9168 0012                  		sub.w	d0,$12(a0)
0000A274 4468 0012                  		neg.w	$12(a0)
0000A278                            
0000A278                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A278 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A27C 6700                       		beq.s	Obj37_Delete
0000A27E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A282 0640 00E0                  		addi.w	#$E0,d0
0000A286 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A28A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A28C 6000 0000                  		bra.w	DisplaySprite
0000A290                            ; ===========================================================================
0000A290                            
0000A290                            Obj37_Collect:				; XREF: Obj37_Index
0000A290 5428 0024                  		addq.b	#2,$24(a0)
0000A294 117C 0000 0020             		move.b	#0,$20(a0)
0000A29A 117C 0001 0018             		move.b	#1,$18(a0)
0000A2A0 6100 FE86                  		bsr.w	CollectRing
0000A2A4                            
0000A2A4                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A2A4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A2AA 6100 0000                  		bsr.w	AnimateSprite
0000A2AE 6000 0000                  		bra.w	DisplaySprite
0000A2B2                            ; ===========================================================================
0000A2B2                            
0000A2B2                            Obj37_Delete:				; XREF: Obj37_Index
0000A2B2 6000 0000                  		bra.w	DeleteObject
0000A2B6                            ; ===========================================================================
0000A2B6                            ; ---------------------------------------------------------------------------
0000A2B6                            ; Object 4B - giant ring for entry to special stage
0000A2B6                            ; ---------------------------------------------------------------------------
0000A2B6                            
0000A2B6                            Obj4B:					; XREF: Obj_Index
0000A2B6 7000                       		moveq	#0,d0
0000A2B8 1028 0024                  		move.b	$24(a0),d0
0000A2BC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A2C0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A2C4                            ; ===========================================================================
0000A2C4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A2C6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A2C8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A2CA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A2CC                            ; ===========================================================================
0000A2CC                            
0000A2CC                            Obj4B_Main:				; XREF: Obj4B_Index
0000A2CC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A2D4 317C 2400 0002             		move.w	#$2400,2(a0)
0000A2DA 0028 0004 0001             		ori.b	#4,1(a0)
0000A2E0 117C 0040 0019             		move.b	#$40,$19(a0)
0000A2E6 4A28 0001                  		tst.b	1(a0)
0000A2EA 6A00                       		bpl.s	Obj4B_Animate
0000A2EC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A2F2 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A2F6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A2FC 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A2FE 4E75                       		rts	
0000A300                            ; ===========================================================================
0000A300                            
0000A300                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A300 5428 0024                  		addq.b	#2,$24(a0)
0000A304 117C 0002 0018             		move.b	#2,$18(a0)
0000A30A 117C 0052 0020             		move.b	#$52,$20(a0)
0000A310 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A316                            
0000A316                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A316 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A31C 3028 0008                  		move.w	8(a0),d0
0000A320 0240 FF80                  		andi.w	#$FF80,d0
0000A324 3238 F700                  		move.w	($FFFFF700).w,d1
0000A328 0441 0080                  		subi.w	#$80,d1
0000A32C 0241 FF80                  		andi.w	#$FF80,d1
0000A330 9041                       		sub.w	d1,d0
0000A332 0C40 0280                  		cmpi.w	#$280,d0
0000A336 6200 0000                  		bhi.w	DeleteObject
0000A33A 6000 0000                  		bra.w	DisplaySprite
0000A33E                            ; ===========================================================================
0000A33E                            
0000A33E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A33E 5528 0024                  		subq.b	#2,$24(a0)
0000A342 117C 0000 0020             		move.b	#0,$20(a0)
0000A348 6100 0000                  		bsr.w	SingleObjLoad
0000A34C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A350 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A354 3368 0008 0008             		move.w	8(a0),8(a1)
0000A35A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A360 2348 003C                  		move.l	a0,$3C(a1)
0000A364 3038 D008                  		move.w	($FFFFD008).w,d0
0000A368 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A36C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A36E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A374                            
0000A374                            Obj4B_PlaySnd:
0000A374 303C 00C3                  		move.w	#$C3,d0
0000A378 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A37E 6096                       		bra.s	Obj4B_Animate
0000A380                            ; ===========================================================================
0000A380                            
0000A380                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A380 6000 0000                  		bra.w	DeleteObject
0000A384                            ; ===========================================================================
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            ; Object 7C - flash effect when	you collect the	giant ring
0000A384                            ; ---------------------------------------------------------------------------
0000A384                            
0000A384                            Obj7C:					; XREF: Obj_Index
0000A384 7000                       		moveq	#0,d0
0000A386 1028 0024                  		move.b	$24(a0),d0
0000A38A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A38E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A392                            ; ===========================================================================
0000A392 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A394 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A396 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A398                            ; ===========================================================================
0000A398                            
0000A398                            Obj7C_Main:				; XREF: Obj7C_Index
0000A398 5428 0024                  		addq.b	#2,$24(a0)
0000A39C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A3A4 317C 2462 0002             		move.w	#$2462,2(a0)
0000A3AA 0028 0004 0001             		ori.b	#4,1(a0)
0000A3B0 117C 0000 0018             		move.b	#0,$18(a0)
0000A3B6 117C 0020 0019             		move.b	#$20,$19(a0)
0000A3BC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A3C2                            
0000A3C2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A3C2 6100                       		bsr.s	Obj7C_Collect
0000A3C4 3028 0008                  		move.w	8(a0),d0
0000A3C8 0240 FF80                  		andi.w	#$FF80,d0
0000A3CC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A3D0 0441 0080                  		subi.w	#$80,d1
0000A3D4 0241 FF80                  		andi.w	#$FF80,d1
0000A3D8 9041                       		sub.w	d1,d0
0000A3DA 0C40 0280                  		cmpi.w	#$280,d0
0000A3DE 6200 0000                  		bhi.w	DeleteObject
0000A3E2 6000 0000                  		bra.w	DisplaySprite
0000A3E6                            
0000A3E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3E6                            
0000A3E6                            
0000A3E6                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A3E6 5328 001E                  		subq.b	#1,$1E(a0)
0000A3EA 6A00                       		bpl.s	locret_9F76
0000A3EC 117C 0001 001E             		move.b	#1,$1E(a0)
0000A3F2 5228 001A                  		addq.b	#1,$1A(a0)
0000A3F6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A3FC 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A3FE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A404 6600                       		bne.s	locret_9F76	; if not, branch
0000A406 2268 003C                  		movea.l	$3C(a0),a1
0000A40A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A410 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A416 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A41C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A420 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A424                            
0000A424                            locret_9F76:
0000A424 4E75                       		rts	
0000A426                            ; ===========================================================================
0000A426                            
0000A426                            Obj7C_End:				; XREF: Obj7C_Collect
0000A426 5428 0024                  		addq.b	#2,$24(a0)
0000A42A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A430 588F                       		addq.l	#4,sp
0000A432 4E75                       		rts	
0000A434                            ; End of function Obj7C_Collect
0000A434                            
0000A434                            ; ===========================================================================
0000A434                            
0000A434                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A434 6000 0000                  		bra.w	DeleteObject
0000A438                            ; ===========================================================================
0000A438                            Ani_obj25:
0000A438                            	include "_anim\obj25.asm"
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            ; Animation script - ring
0000A438                            ; ---------------------------------------------------------------------------
0000A438 0000                       		dc.w byte_9F8C-Ani_obj25
0000A43A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A440                            		even
0000A440                            		even
0000A440                            
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            ; Sprite mappings - rings
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            Map_obj25:
0000A440                            	include "_maps\obj25.asm"
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            ; Sprite mappings - rings
0000A440                            ; ---------------------------------------------------------------------------
0000A440 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A444 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A448 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A44C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A450 01                         byte_9FA2:	dc.b 1
0000A451 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A456 01                         byte_9FA8:	dc.b 1
0000A457 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A45C 01                         byte_9FAE:	dc.b 1
0000A45D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A462 01                         byte_9FB4:	dc.b 1
0000A463 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A468 01                         byte_9FBA:	dc.b 1
0000A469 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A46E 01                         byte_9FC0:	dc.b 1
0000A46F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A474 01                         byte_9FC6:	dc.b 1
0000A475 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A47A 01                         byte_9FCC:	dc.b 1
0000A47B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A480                            		even
0000A480                            		even
0000A480                            
0000A480                            ; ---------------------------------------------------------------------------
0000A480                            ; Sprite mappings - giant ring
0000A480                            ; ---------------------------------------------------------------------------
0000A480                            Map_obj4B:
0000A480                            	include "_maps\obj4B.asm"
0000A480                            ; ---------------------------------------------------------------------------
0000A480                            ; Sprite mappings - giant ring
0000A480                            ; ---------------------------------------------------------------------------
0000A480 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A484 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A488 0A                         byte_9FDA:	dc.b $A
0000A489 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A48E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A493 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A498 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A49D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A4A2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A4A7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A4AC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A4B1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A4B6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A4BB 08                         byte_A00D:	dc.b 8
0000A4BC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A4C1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A4C6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A4CB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A4D0 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A4D5 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A4DA 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A4DF 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A4E4 04                         byte_A036:	dc.b 4
0000A4E5 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A4EA E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A4EF 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A4F4 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A4F9 08                         byte_A04B:	dc.b 8
0000A4FA E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A4FF E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A504 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A509 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A50E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A513 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A518 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A51D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A522                            		even
0000A522                            		even
0000A522                            
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            ; Sprite mappings - flash effect when you collect the giant ring
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            Map_obj7C:
0000A522                            	include "_maps\obj7C.asm"
0000A522                            ; ---------------------------------------------------------------------------
0000A522                            ; Sprite mappings - flash effect when you collect the giant ring
0000A522                            ; ---------------------------------------------------------------------------
0000A522 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A526 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A52A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A52E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A532 02                         byte_A084:	dc.b 2
0000A533 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A538 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A53D 04                         byte_A08F:	dc.b 4
0000A53E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A543 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A548 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A54D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A552 04                         byte_A0A4:	dc.b 4
0000A553 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A558 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A55D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A562 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A567 04                         byte_A0B9:	dc.b 4
0000A568 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A56D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A572 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A577 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A57C 04                         byte_A0CE:	dc.b 4
0000A57D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A582 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A587 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A58C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A591 04                         byte_A0E3:	dc.b 4
0000A592 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A597 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A59C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A5A1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A5A6 02                         byte_A0F8:	dc.b 2
0000A5A7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A5AC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A5B1 04                         byte_A103:	dc.b 4
0000A5B2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A5B7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A5BC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A5C1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A5C6                            		even
0000A5C6                            		even
0000A5C6                            
0000A5C6                            ; ===========================================================================
0000A5C6                            ; ---------------------------------------------------------------------------
0000A5C6                            ; Object 26 - monitors
0000A5C6                            ; ---------------------------------------------------------------------------
0000A5C6                            
0000A5C6                            Obj26:					; XREF: Obj_Index
0000A5C6 7000                       		moveq	#0,d0
0000A5C8 1028 0024                  		move.b	$24(a0),d0
0000A5CC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A5D0 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A5D4                            ; ===========================================================================
0000A5D4 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A5D6 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A5D8 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A5DA 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A5DC 0000                       		dc.w Obj26_Display-Obj26_Index
0000A5DE                            ; ===========================================================================
0000A5DE                            
0000A5DE                            Obj26_Main:				; XREF: Obj26_Index
0000A5DE 5428 0024                  		addq.b	#2,$24(a0)
0000A5E2 117C 000E 0016             		move.b	#$E,$16(a0)
0000A5E8 117C 000E 0017             		move.b	#$E,$17(a0)
0000A5EE 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A5F6 317C 0680 0002             		move.w	#$680,2(a0)
0000A5FC 117C 0004 0001             		move.b	#4,1(a0)
0000A602 117C 0003 0018             		move.b	#3,$18(a0)
0000A608 117C 000F 0019             		move.b	#$F,$19(a0)
0000A60E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A612 7000                       		moveq	#0,d0
0000A614 1028 0023                  		move.b	$23(a0),d0
0000A618 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A61E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A624 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A626 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A62C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A632 4E75                       		rts	
0000A634                            ; ===========================================================================
0000A634                            
0000A634                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A634 117C 0046 0020             		move.b	#$46,$20(a0)
0000A63A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A640                            
0000A640                            Obj26_Solid:				; XREF: Obj26_Index
0000A640 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A644 6700                       		beq.s	loc_A1EC	; if not, branch
0000A646 5500                       		subq.b	#2,d0
0000A648 6600                       		bne.s	Obj26_Fall
0000A64A 7200                       		moveq	#0,d1
0000A64C 1228 0019                  		move.b	$19(a0),d1
0000A650 0641 000B                  		addi.w	#$B,d1
0000A654 6100 D41C                  		bsr.w	ExitPlatform
0000A658 0829 0003 0022             		btst	#3,$22(a1)
0000A65E 6600 0000                  		bne.w	loc_A1BC
0000A662 4228 0025                  		clr.b	$25(a0)
0000A666 6000 0000                  		bra.w	Obj26_Animate
0000A66A                            ; ===========================================================================
0000A66A                            
0000A66A                            loc_A1BC:				; XREF: Obj26_Solid
0000A66A 363C 0010                  		move.w	#$10,d3
0000A66E 3428 0008                  		move.w	8(a0),d2
0000A672 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A676 6000 0000                  		bra.w	Obj26_Animate
0000A67A                            ; ===========================================================================
0000A67A                            
0000A67A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A67A 6100 0000                  		bsr.w	ObjectFall
0000A67E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A684 4A41                       		tst.w	d1
0000A686 6A00 0000                  		bpl.w	Obj26_Animate
0000A68A D368 000C                  		add.w	d1,$C(a0)
0000A68E 4268 0012                  		clr.w	$12(a0)
0000A692 4228 0025                  		clr.b	$25(a0)
0000A696 6000 0000                  		bra.w	Obj26_Animate
0000A69A                            ; ===========================================================================
0000A69A                            
0000A69A                            loc_A1EC:				; XREF: Obj26_Solid
0000A69A 323C 001A                  		move.w	#$1A,d1
0000A69E 343C 000F                  		move.w	#$F,d2
0000A6A2 6100 0000                  		bsr.w	Obj26_SolidSides
0000A6A6 6700 0000                  		beq.w	loc_A25C
0000A6AA 4A69 0012                  		tst.w	$12(a1)
0000A6AE 6B00                       		bmi.s	loc_A20A
0000A6B0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A6B6 6700                       		beq.s	loc_A25C	; if yes, branch
0000A6B8                            
0000A6B8                            loc_A20A:
0000A6B8 4A41                       		tst.w	d1
0000A6BA 6A00                       		bpl.s	loc_A220
0000A6BC 9769 000C                  		sub.w	d3,$C(a1)
0000A6C0 6100 D29E                  		bsr.w	loc_74AE
0000A6C4 117C 0002 0025             		move.b	#2,$25(a0)
0000A6CA 6000 0000                  		bra.w	Obj26_Animate
0000A6CE                            ; ===========================================================================
0000A6CE                            
0000A6CE                            loc_A220:
0000A6CE 4A40                       		tst.w	d0
0000A6D0 6700 0000                  		beq.w	loc_A246
0000A6D4 6B00                       		bmi.s	loc_A230
0000A6D6 4A69 0010                  		tst.w	$10(a1)
0000A6DA 6B00                       		bmi.s	loc_A246
0000A6DC 6000                       		bra.s	loc_A236
0000A6DE                            ; ===========================================================================
0000A6DE                            
0000A6DE                            loc_A230:
0000A6DE 4A69 0010                  		tst.w	$10(a1)
0000A6E2 6A00                       		bpl.s	loc_A246
0000A6E4                            
0000A6E4                            loc_A236:
0000A6E4 9169 0008                  		sub.w	d0,8(a1)
0000A6E8 337C 0000 0014             		move.w	#0,$14(a1)
0000A6EE 337C 0000 0010             		move.w	#0,$10(a1)
0000A6F4                            
0000A6F4                            loc_A246:
0000A6F4 0829 0001 0022             		btst	#1,$22(a1)
0000A6FA 6600                       		bne.s	loc_A26A
0000A6FC 08E9 0005 0022             		bset	#5,$22(a1)
0000A702 08E8 0005 0022             		bset	#5,$22(a0)
0000A708 6000                       		bra.s	Obj26_Animate
0000A70A                            ; ===========================================================================
0000A70A                            
0000A70A                            loc_A25C:
0000A70A 0828 0005 0022             		btst	#5,$22(a0)
0000A710 6700                       		beq.s	Obj26_Animate
0000A712 337C 0001 001C             		move.w	#1,$1C(a1)
0000A718                            
0000A718                            loc_A26A:
0000A718 08A8 0005 0022             		bclr	#5,$22(a0)
0000A71E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A724                            
0000A724                            Obj26_Animate:				; XREF: Obj26_Index
0000A724 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A72A 6100 0000                  		bsr.w	AnimateSprite
0000A72E                            
0000A72E                            Obj26_Display:				; XREF: Obj26_Index
0000A72E 6100 0000                  		bsr.w	DisplaySprite
0000A732 3028 0008                  		move.w	8(a0),d0
0000A736 0240 FF80                  		andi.w	#$FF80,d0
0000A73A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A73E 0441 0080                  		subi.w	#$80,d1
0000A742 0241 FF80                  		andi.w	#$FF80,d1
0000A746 9041                       		sub.w	d1,d0
0000A748 0C40 0280                  		cmpi.w	#$280,d0
0000A74C 6200 0000                  		bhi.w	DeleteObject
0000A750 4E75                       		rts	
0000A752                            ; ===========================================================================
0000A752                            
0000A752                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A752 5428 0024                  		addq.b	#2,$24(a0)
0000A756 117C 0000 0020             		move.b	#0,$20(a0)
0000A75C 6100 0000                  		bsr.w	SingleObjLoad
0000A760 6600                       		bne.s	Obj26_Explode
0000A762 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A766 3368 0008 0008             		move.w	8(a0),8(a1)
0000A76C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A772 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A778 7400                       		moveq	#0,d2	; GMZ
0000A77A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A77C                            
0000A77C                            Obj26_Explode:
0000A77C 6100 0000                  		bsr.w	SingleObjLoad
0000A780 6600                       		bne.s	Obj26_SetBroken
0000A782 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A786 5429 0024                  		addq.b	#2,$24(a1)
0000A78A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A78E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A794 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A79A                            
0000A79A                            Obj26_NextExplosion:
0000A79A 5802                       		addq.b	#4,d2
0000A79C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A7A0                            
0000A7A0                            Obj26_SetBroken:
0000A7A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7A4 7000                       		moveq	#0,d0
0000A7A6 1028 0023                  		move.b	$23(a0),d0
0000A7AA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A7B0 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A7B6 6000 0000                  		bra.w	DisplaySprite
0000A7BA                            ; ===========================================================================
0000A7BA                            ; ---------------------------------------------------------------------------
0000A7BA                            ; Object 2E - contents of monitors
0000A7BA                            ; ---------------------------------------------------------------------------
0000A7BA                            
0000A7BA                            Obj2E:					; XREF: Obj_Index
0000A7BA 7000                       		moveq	#0,d0
0000A7BC 1028 0024                  		move.b	$24(a0),d0
0000A7C0 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A7C4 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A7C8 6000 0000                  		bra.w	DisplaySprite
0000A7CC                            ; ===========================================================================
0000A7CC 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A7CE 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A7D0 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A7D2                            ; ===========================================================================
0000A7D2                            
0000A7D2                            Obj2E_Main:				; XREF: Obj2E_Index
0000A7D2 5428 0024                  		addq.b	#2,$24(a0)
0000A7D6 317C 0680 0002             		move.w	#$680,2(a0)
0000A7DC 117C 0024 0001             		move.b	#$24,1(a0)
0000A7E2 117C 0003 0018             		move.b	#3,$18(a0)
0000A7E8 117C 0008 0019             		move.b	#8,$19(a0)
0000A7EE 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A7F4 7000                       		moveq	#0,d0
0000A7F6 1028 001C                  		move.b	$1C(a0),d0
0000A7FA 5400                       		addq.b	#2,d0
0000A7FC 1140 001A                  		move.b	d0,$1A(a0)
0000A800 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A806 D000                       		add.b	d0,d0
0000A808 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A80C 5249                       		addq.w	#1,a1
0000A80E 2149 0004                  		move.l	a1,4(a0)
0000A812                            
0000A812                            Obj2E_Move:				; XREF: Obj2E_Index
0000A812 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A816 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A81A 6100 0000                  		bsr.w	SpeedToPos
0000A81E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A824 4E75                       		rts	
0000A826                            ; ===========================================================================
0000A826                            
0000A826                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A826 5428 0024                  		addq.b	#2,$24(a0)
0000A82A 317C 001D 001E             		move.w	#29,$1E(a0)
0000A830 1028 001C                  		move.b	$1C(a0),d0
0000A834 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A838 6600                       		bne.s	Obj2E_ChkSonic
0000A83A 4E75                       		rts			; Eggman monitor does nothing
0000A83C                            ; ===========================================================================
0000A83C                            
0000A83C                            Obj2E_ChkSonic:
0000A83C 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A840 6600                       		bne.s	Obj2E_ChkShoes
0000A842                            
0000A842                            ExtraLife:
0000A842 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A846 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A84A 303C 0088                  		move.w	#$88,d0
0000A84E 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A854                            ; ===========================================================================
0000A854                            
0000A854                            Obj2E_ChkShoes:
0000A854 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A858 6600                       		bne.s	Obj2E_ChkShield
0000A85A 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A860 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A866 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A86C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A872 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A878 303C 00E2                  		move.w	#$E2,d0
0000A87C 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A882                            ; ===========================================================================
0000A882                            
0000A882                            Obj2E_ChkShield:
0000A882 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A886 6600                       		bne.s	Obj2E_ChkInvinc
0000A888 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A88E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A894 303C 00AF                  		move.w	#$AF,d0
0000A898 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A89E                            ; ===========================================================================
0000A89E                            
0000A89E                            Obj2E_ChkInvinc:
0000A89E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A8A2 6600                       		bne.s	Obj2E_ChkRings
0000A8A4 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A8AA 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A8B0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A8B6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A8BC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A8C2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A8C8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A8CE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A8D4 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A8DA 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A8E0 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A8E4 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A8E6 303C 0087                  		move.w	#$87,d0
0000A8EA 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A8F0                            ; ===========================================================================
0000A8F0                            
0000A8F0                            Obj2E_NoMusic:
0000A8F0 4E75                       		rts	
0000A8F2                            ; ===========================================================================
0000A8F2                            
0000A8F2                            Obj2E_ChkRings:
0000A8F2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A8F6 6600                       		bne.s	Obj2E_ChkS
0000A8F8 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A8FE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A904 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A90A 6500                       		bcs.s	Obj2E_RingSound
0000A90C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A912 6700 FF2E                  		beq.w	ExtraLife
0000A916 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A91C 6500                       		bcs.s	Obj2E_RingSound
0000A91E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A924 6700 FF1C                  		beq.w	ExtraLife
0000A928                            
0000A928                            Obj2E_RingSound:
0000A928 303C 00B5                  		move.w	#$B5,d0
0000A92C 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A932                            ; ===========================================================================
0000A932                            
0000A932                            Obj2E_ChkS:
0000A932 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A936 6600                       		bne.s	Obj2E_ChkEnd
0000A938                            		; nop	
0000A938 7201                       		moveq	#1,d1
0000A93A B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A93E                            
0000A93E                            Obj2E_ChkEnd:
0000A93E 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A940                            ; ===========================================================================
0000A940                            
0000A940                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A940 5368 001E                  		subq.w	#1,$1E(a0)
0000A944 6B00 0000                  		bmi.w	DeleteObject
0000A948 4E75                       		rts	
0000A94A                            ; ---------------------------------------------------------------------------
0000A94A                            ; Subroutine to	make the sides of a monitor solid
0000A94A                            ; ---------------------------------------------------------------------------
0000A94A                            
0000A94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A94A                            
0000A94A                            
0000A94A                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A94A 43F8 D000                  		lea	($FFFFD000).w,a1
0000A94E 3029 0008                  		move.w	8(a1),d0
0000A952 9068 0008                  		sub.w	8(a0),d0
0000A956 D041                       		add.w	d1,d0
0000A958 6B00                       		bmi.s	loc_A4E6
0000A95A 3601                       		move.w	d1,d3
0000A95C D643                       		add.w	d3,d3
0000A95E B043                       		cmp.w	d3,d0
0000A960 6200                       		bhi.s	loc_A4E6
0000A962 1629 0016                  		move.b	$16(a1),d3
0000A966 4883                       		ext.w	d3
0000A968 D443                       		add.w	d3,d2
0000A96A 3629 000C                  		move.w	$C(a1),d3
0000A96E 9668 000C                  		sub.w	$C(a0),d3
0000A972 D642                       		add.w	d2,d3
0000A974 6B00                       		bmi.s	loc_A4E6
0000A976 D442                       		add.w	d2,d2
0000A978 B642                       		cmp.w	d2,d3
0000A97A 6400                       		bcc.s	loc_A4E6
0000A97C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A980 6B00                       		bmi.s	loc_A4E6
0000A982 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A988 6400                       		bcc.s	loc_A4E6
0000A98A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A98E 6600                       		bne.s	loc_A4E6
0000A990 B240                       		cmp.w	d0,d1
0000A992 6400                       		bcc.s	loc_A4DC
0000A994 D241                       		add.w	d1,d1
0000A996 9041                       		sub.w	d1,d0
0000A998                            
0000A998                            loc_A4DC:
0000A998 0C43 0010                  		cmpi.w	#$10,d3
0000A99C 6500                       		bcs.s	loc_A4EA
0000A99E                            
0000A99E                            loc_A4E2:
0000A99E 7201                       		moveq	#1,d1
0000A9A0 4E75                       		rts	
0000A9A2                            ; ===========================================================================
0000A9A2                            
0000A9A2                            loc_A4E6:
0000A9A2 7200                       		moveq	#0,d1
0000A9A4 4E75                       		rts	
0000A9A6                            ; ===========================================================================
0000A9A6                            
0000A9A6                            loc_A4EA:
0000A9A6 7200                       		moveq	#0,d1
0000A9A8 1228 0019                  		move.b	$19(a0),d1
0000A9AC 5841                       		addq.w	#4,d1
0000A9AE 3401                       		move.w	d1,d2
0000A9B0 D442                       		add.w	d2,d2
0000A9B2 D269 0008                  		add.w	8(a1),d1
0000A9B6 9268 0008                  		sub.w	8(a0),d1
0000A9BA 6BE2                       		bmi.s	loc_A4E2
0000A9BC B242                       		cmp.w	d2,d1
0000A9BE 64DE                       		bcc.s	loc_A4E2
0000A9C0 72FF                       		moveq	#-1,d1
0000A9C2 4E75                       		rts	
0000A9C4                            ; End of function Obj26_SolidSides
0000A9C4                            
0000A9C4                            ; ===========================================================================
0000A9C4                            Ani_obj26:
0000A9C4                            	include "_anim\obj26.asm"
0000A9C4                            ; ---------------------------------------------------------------------------
0000A9C4                            ; Animation script - monitors
0000A9C4                            ; ---------------------------------------------------------------------------
0000A9C4 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A9CA 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A9D0 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A9D6 0000                       		dc.w byte_A582-Ani_obj26
0000A9D8 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A9DE 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A9EA 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A9F6 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AA02 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AA0E 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AA1A 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AA26 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AA32 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AA3E 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AA46                            		even
0000AA46                            		even
0000AA46                            
0000AA46                            ; ---------------------------------------------------------------------------
0000AA46                            ; Sprite mappings - monitors
0000AA46                            ; ---------------------------------------------------------------------------
0000AA46                            Map_obj26:
0000AA46                            	include "_maps\obj26.asm"
0000AA46                            ; ================================================================================
0000AA46                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AA46                            ; ================================================================================
0000AA46                            
0000AA46                            DATAY1U343IF3L:
0000AA46 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AA4A 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AA4E 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AA52 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AA56 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA5A 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA5E 05                         DATAY1U343IF3L_0: dc.b $5
0000AA5F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA64 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA69 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA6E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA73 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA78 06                         DATAY1U343IF3L_1: dc.b $6
0000AA79 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA7E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA83 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA88 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA8D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA92 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA97 05                         DATAY1U343IF3L_2: dc.b $5
0000AA98 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA9D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAA2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAA7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAAC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAB1 05                         DATAY1U343IF3L_3: dc.b $5
0000AAB2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AABC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAC1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AACB 06                         DATAY1U343IF3L_4: dc.b $6
0000AACC F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AAD1 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD6 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AADB E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE0 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE5 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAEA 06                         DATAY1U343IF3L_5: dc.b $6
0000AAEB F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AAF0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAFA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAFF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB04 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB09 06                         DATAY1U343IF3L_6: dc.b $6
0000AB0A F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AB0F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB14 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB19 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB1E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB23 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB28 06                         DATAY1U343IF3L_7: dc.b $6
0000AB29 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AB2E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB33 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB38 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB3D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB42 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB47 06                         DATAY1U343IF3L_8: dc.b $6
0000AB48 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AB4D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB52 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB57 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB5C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB61 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB66 06                         DATAY1U343IF3L_9: dc.b $6
0000AB67 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB6C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB71 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB76 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB7B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB80 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB85 05                         DATAY1U343IF3L_A: dc.b $5
0000AB86 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB8B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB90 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB95 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB9A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB9F 01                         DATAY1U343IF3L_B: dc.b $1
0000ABA0 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ABA6 00                         	even
0000ABA6 00                         	even
0000ABA6                            
0000ABA6                            ; ===========================================================================
0000ABA6                            ; ---------------------------------------------------------------------------
0000ABA6                            ; Object 0E - Sonic on the title screen
0000ABA6                            ; ---------------------------------------------------------------------------
0000ABA6                            
0000ABA6                            Obj0E:					; XREF: Obj_Index
0000ABA6 7000                       		moveq	#0,d0
0000ABA8 1028 0024                  		move.b	$24(a0),d0
0000ABAC 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ABB0 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ABB4                            ; ===========================================================================
0000ABB4 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ABB6 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ABB8 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ABBA 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ABBC                            ; ===========================================================================
0000ABBC                            
0000ABBC                            Obj0E_Main:				; XREF: Obj0E_Index
0000ABBC 5428 0024                  		addq.b	#2,$24(a0)
0000ABC0 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ABC6 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ABCC 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ABD4 317C 2300 0002             		move.w	#$2300,2(a0)
0000ABDA 117C 0001 0018             		move.b	#1,$18(a0)
0000ABE0 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ABE6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABEC 6100 0000                  		bsr.w	AnimateSprite
0000ABF0                            
0000ABF0                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ABF0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ABF4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ABF6 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ABFA 6000 0000                  		bra.w	DisplaySprite
0000ABFE                            ; ===========================================================================
0000ABFE                            
0000ABFE                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ABFE 4E75                       		rts	
0000AC00                            ; ===========================================================================
0000AC00                            
0000AC00                            Obj0E_Move:				; XREF: Obj0E_Index
0000AC00 5168 000A                  		subq.w	#8,$A(a0)
0000AC04 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AC0A 6600                       		bne.s	Obj0E_Display
0000AC0C 5428 0024                  		addq.b	#2,$24(a0)
0000AC10                            
0000AC10                            Obj0E_Display:
0000AC10 6000 0000                  		bra.w	DisplaySprite
0000AC14                            ; ===========================================================================
0000AC14 4E75                       		rts	
0000AC16                            ; ===========================================================================
0000AC16                            
0000AC16                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AC16 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC1C 6100 0000                  		bsr.w	AnimateSprite
0000AC20 6000 0000                  		bra.w	DisplaySprite
0000AC24                            ; ===========================================================================
0000AC24 4E75                       		rts	
0000AC26                            ; ===========================================================================
0000AC26                            ; ---------------------------------------------------------------------------
0000AC26                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AC26                            ; ---------------------------------------------------------------------------
0000AC26                            
0000AC26                            Obj0F:					; XREF: Obj_Index
0000AC26 7000                       		moveq	#0,d0
0000AC28 1028 0024                  		move.b	$24(a0),d0
0000AC2C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AC30 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AC34 6000 0000                  		bra.w	DisplaySprite
0000AC38                            ; ===========================================================================
0000AC38 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AC3A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AC3C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AC3E                            ; ===========================================================================
0000AC3E                            
0000AC3E                            Obj0F_Main:				; XREF: Obj0F_Index
0000AC3E 5428 0024                  		addq.b	#2,$24(a0)
0000AC42 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AC48 317C 0130 000A             		move.w	#$130,$A(a0)
0000AC4E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AC56 317C 0200 0002             		move.w	#$200,2(a0)
0000AC5C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC62 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC64 5428 0024                  		addq.b	#2,$24(a0)
0000AC68 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC6E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC70 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC76 317C 0170 0008             		move.w	#$170,8(a0)
0000AC7C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC82                            
0000AC82                            locret_A6F8:				; XREF: Obj0F_Index
0000AC82 4E75                       		rts	
0000AC84                            ; ===========================================================================
0000AC84                            
0000AC84                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC84 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC8A 6000 0000                  		bra.w	AnimateSprite
0000AC8E                            ; ===========================================================================
0000AC8E                            Ani_obj0E:
0000AC8E                            	include "_anim\obj0E.asm"
0000AC8E                            ; ---------------------------------------------------------------------------
0000AC8E                            ; Animation script - Sonic on the title screen
0000AC8E                            ; ---------------------------------------------------------------------------
0000AC8E 0000                       		dc.w byte_A706-Ani_obj0E
0000AC90 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC9C                            		even
0000AC9C                            		even
0000AC9C                            
0000AC9C                            Ani_obj0F:
0000AC9C                            	include "_anim\obj0F.asm"
0000AC9C                            ; ---------------------------------------------------------------------------
0000AC9C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC9C                            ; ---------------------------------------------------------------------------
0000AC9C 0000                       		dc.w byte_A714-Ani_obj0F
0000AC9E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000ACA2                            		even
0000ACA2                            		even
0000ACA2                            
0000ACA2                            ; ---------------------------------------------------------------------------
0000ACA2                            ; Subroutine to	animate	a sprite using an animation script
0000ACA2                            ; ---------------------------------------------------------------------------
0000ACA2                            
0000ACA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACA2                            
0000ACA2                            
0000ACA2                            AnimateSprite:
0000ACA2 7000                       		moveq	#0,d0
0000ACA4 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000ACA8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000ACAC 6700                       		beq.s	Anim_Run	; if not, branch
0000ACAE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000ACB2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACB8 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000ACBE                            
0000ACBE                            Anim_Run:
0000ACBE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000ACC2 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000ACC4 D040                       		add.w	d0,d0
0000ACC6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000ACCA 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000ACCE 7200                       		moveq	#0,d1
0000ACD0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000ACD4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000ACD8 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000ACDA                            
0000ACDA                            Anim_Next:
0000ACDA 1200                       		move.b	d0,d1
0000ACDC 0200 001F                  		andi.b	#$1F,d0
0000ACE0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000ACE4 1028 0022                  		move.b	$22(a0),d0
0000ACE8 E719                       		rol.b	#3,d1
0000ACEA B101                       		eor.b	d0,d1
0000ACEC 0201 0003                  		andi.b	#3,d1
0000ACF0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000ACF6 8328 0001                  		or.b	d1,1(a0)
0000ACFA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000ACFE                            
0000ACFE                            Anim_Wait:
0000ACFE 4E75                       		rts	
0000AD00                            ; ===========================================================================
0000AD00                            
0000AD00                            Anim_End_FF:
0000AD00 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AD02 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AD04 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AD0A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AD0E 60CA                       		bra.s	Anim_Next
0000AD10                            ; ===========================================================================
0000AD10                            
0000AD10                            Anim_End_FE:
0000AD10 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AD12 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AD14 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AD18 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AD1C 9200                       		sub.b	d0,d1
0000AD1E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AD22 60B6                       		bra.s	Anim_Next
0000AD24                            ; ===========================================================================
0000AD24                            
0000AD24                            Anim_End_FD:
0000AD24 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AD26 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AD28 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AD2E                            
0000AD2E                            Anim_End_FC:
0000AD2E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AD30 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AD32 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AD36                            
0000AD36                            Anim_End_FB:
0000AD36 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AD38 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AD3A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD40 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AD44                            
0000AD44                            Anim_End_FA:
0000AD44 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AD46 6600                       		bne.s	Anim_End	; if not, branch
0000AD48 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AD4C                            
0000AD4C                            Anim_End:
0000AD4C 4E75                       		rts	
0000AD4E                            ; End of function AnimateSprite
0000AD4E                            
0000AD4E                            ; ===========================================================================
0000AD4E                            ; ---------------------------------------------------------------------------
0000AD4E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD4E                            ; ---------------------------------------------------------------------------
0000AD4E                            Map_obj0F:
0000AD4E                            	include "_maps\obj0F.asm"
0000AD4E                            ; ---------------------------------------------------------------------------
0000AD4E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD4E                            ; ---------------------------------------------------------------------------
0000AD4E 0000                       		dc.w byte_A7CD-Map_obj0F
0000AD50 0000                       		dc.w byte_A7CC-Map_obj0F
0000AD52 0000                       		dc.w byte_A7EB-Map_obj0F
0000AD54 0000                       		dc.w byte_A882-Map_obj0F
0000AD56 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AD57 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD5C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD61 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD66 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD6B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD70 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD75 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD76 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD7B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD80 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD85 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD8A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD8F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD94 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD99 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD9E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADAD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADB2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADB7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADBC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADC1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADC6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADCB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADDA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADDF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADE4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADE9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADEE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADF3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADF8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADFD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE02 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE07 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE0C 01                         byte_A882:	dc.b 1			; "TM"
0000AE0D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AE12                            		even
0000AE12                            		even
0000AE12                            
0000AE12                            ; ---------------------------------------------------------------------------
0000AE12                            ; Sprite mappings - Sonic on the title screen
0000AE12                            ; ---------------------------------------------------------------------------
0000AE12                            Map_obj0E:
0000AE12                            	include "_maps\obj0E.asm"
0000AE12                            ; ================================================================================
0000AE12                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 12:11:33 GMT-0500 (Central Daylight Time)
0000AE12                            ; ================================================================================
0000AE12                            
0000AE12                            DATAV21JFHJ5PUP:
0000AE12 0000 0000                  	dc.w DATAV21JFHJ5PUP_0-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_1-DATAV21JFHJ5PUP
0000AE16 0000 0000                  	dc.w DATAV21JFHJ5PUP_2-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_3-DATAV21JFHJ5PUP
0000AE1A 0000 0000                  	dc.w DATAV21JFHJ5PUP_4-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_5-DATAV21JFHJ5PUP
0000AE1E 0000 0000                  	dc.w DATAV21JFHJ5PUP_6-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_7-DATAV21JFHJ5PUP
0000AE22 08                         DATAV21JFHJ5PUP_0: dc.b $8
0000AE23 0C0F 019F 08               	dc.b $C, $F, $1, $9F, $8
0000AE28 2C0F 01AF 08               	dc.b $2C, $F, $1, $AF, $8
0000AE2D 4C0D 01BF 08               	dc.b $4C, $D, $1, $BF, $8
0000AE32 0408 01C7 20               	dc.b $4, $8, $1, $C7, $20
0000AE37 0C0B 01CA 28               	dc.b $C, $B, $1, $CA, $28
0000AE3C 2C0B 01D6 28               	dc.b $2C, $B, $1, $D6, $28
0000AE41 4C05 01E2 28               	dc.b $4C, $5, $1, $E2, $28
0000AE46 1407 01E6 40               	dc.b $14, $7, $1, $E6, $40
0000AE4B 0B                         DATAV21JFHJ5PUP_1: dc.b $B
0000AE4C 060F 01EE 01               	dc.b $6, $F, $1, $EE, $1
0000AE51 060F 01FE 21               	dc.b $6, $F, $1, $FE, $21
0000AE56 0607 020E 41               	dc.b $6, $7, $2, $E, $41
0000AE5B 260F 0216 01               	dc.b $26, $F, $2, $16, $1
0000AE60 260F 0226 21               	dc.b $26, $F, $2, $26, $21
0000AE65 2607 0236 41               	dc.b $26, $7, $2, $36, $41
0000AE6A 460C 023E 01               	dc.b $46, $C, $2, $3E, $1
0000AE6F 460E 0242 21               	dc.b $46, $E, $2, $42, $21
0000AE74 4606 024E 41               	dc.b $46, $6, $2, $4E, $41
0000AE79 4E08 0254 09               	dc.b $4E, $8, $2, $54, $9
0000AE7E 5604 0257 11               	dc.b $56, $4, $2, $57, $11
0000AE83 0B                         DATAV21JFHJ5PUP_2: dc.b $B
0000AE84 F20F 01EE 01               	dc.b $F2, $F, $1, $EE, $1
0000AE89 F20F 01FE 21               	dc.b $F2, $F, $1, $FE, $21
0000AE8E F207 020E 41               	dc.b $F2, $7, $2, $E, $41
0000AE93 120F 0216 01               	dc.b $12, $F, $2, $16, $1
0000AE98 120F 0226 21               	dc.b $12, $F, $2, $26, $21
0000AE9D 1207 0236 41               	dc.b $12, $7, $2, $36, $41
0000AEA2 320C 023E 01               	dc.b $32, $C, $2, $3E, $1
0000AEA7 320E 0242 21               	dc.b $32, $E, $2, $42, $21
0000AEAC 3206 024E 41               	dc.b $32, $6, $2, $4E, $41
0000AEB1 3A08 0254 09               	dc.b $3A, $8, $2, $54, $9
0000AEB6 4204 0257 11               	dc.b $42, $4, $2, $57, $11
0000AEBB 0D                         DATAV21JFHJ5PUP_3: dc.b $D
0000AEBC FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AEC1 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AEC6 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AECB 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AED0 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AED5 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AEDA 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AEDF 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AEE4 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AEE9 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AEEE 3C01 004E 08               	dc.b $3C, $1, $0, $4E, $8
0000AEF3 3C04 0050 28               	dc.b $3C, $4, $0, $50, $28
0000AEF8 4400 0052 28               	dc.b $44, $0, $0, $52, $28
0000AEFD 10                         DATAV21JFHJ5PUP_4: dc.b $10
0000AEFE F80F 0259 09               	dc.b $F8, $F, $2, $59, $9
0000AF03 F807 0269 29               	dc.b $F8, $7, $2, $69, $29
0000AF08 0003 0271 01               	dc.b $0, $3, $2, $71, $1
0000AF0D 0003 0275 39               	dc.b $0, $3, $2, $75, $39
0000AF12 1001 0279 F9               	dc.b $10, $1, $2, $79, $F9
0000AF17 180D 027B 09               	dc.b $18, $D, $2, $7B, $9
0000AF1C 1807 0283 29               	dc.b $18, $7, $2, $83, $29
0000AF21 1803 028B 41               	dc.b $18, $3, $2, $8B, $41
0000AF26 2001 028F 01               	dc.b $20, $1, $2, $8F, $1
0000AF2B 2003 0291 39               	dc.b $20, $3, $2, $91, $39
0000AF30 2808 0295 11               	dc.b $28, $8, $2, $95, $11
0000AF35 3007 0298 19               	dc.b $30, $7, $2, $98, $19
0000AF3A 3801 02A0 11               	dc.b $38, $1, $2, $A0, $11
0000AF3F 3806 02A2 29               	dc.b $38, $6, $2, $A2, $29
0000AF44 3801 02A8 41               	dc.b $38, $1, $2, $A8, $41
0000AF49 4001 02AA 39               	dc.b $40, $1, $2, $AA, $39
0000AF4E 13                         DATAV21JFHJ5PUP_5: dc.b $13
0000AF4F 280E 00B2 38               	dc.b $28, $E, $0, $B2, $38
0000AF54 1805 00BE 48               	dc.b $18, $5, $0, $BE, $48
0000AF59 4008 00C2 38               	dc.b $40, $8, $0, $C2, $38
0000AF5E 4804 00C5 38               	dc.b $48, $4, $0, $C5, $38
0000AF63 100F 0053 10               	dc.b $10, $F, $0, $53, $10
0000AF68 0804 0063 20               	dc.b $8, $4, $0, $63, $20
0000AF6D 000B 0065 30               	dc.b $0, $B, $0, $65, $30
0000AF72 0800 0071 48               	dc.b $8, $0, $0, $71, $48
0000AF77 1800 0072 48               	dc.b $18, $0, $0, $72, $48
0000AF7C 1805 0073 00               	dc.b $18, $5, $0, $73, $0
0000AF81 2802 0077 08               	dc.b $28, $2, $0, $77, $8
0000AF86 300F 007A 10               	dc.b $30, $F, $0, $7A, $10
0000AF8B 200D 008A 30               	dc.b $20, $D, $0, $8A, $30
0000AF90 2001 0092 50               	dc.b $20, $1, $0, $92, $50
0000AF95 3008 0094 30               	dc.b $30, $8, $0, $94, $30
0000AF9A 380E 0097 30               	dc.b $38, $E, $0, $97, $30
0000AF9F 500D 00A3 08               	dc.b $50, $D, $0, $A3, $8
0000AFA4 500C 00AB 28               	dc.b $50, $C, $0, $AB, $28
0000AFA9 5808 00AF 28               	dc.b $58, $8, $0, $AF, $28
0000AFAE 0F                         DATAV21JFHJ5PUP_6: dc.b $F
0000AFAF EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AFB4 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AFB9 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AFBE EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AFC3 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AFC8 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AFCD EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AFD2 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AFD7 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AFDC EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AFE1 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AFE6 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AFEB EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AFF0 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AFF5 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AFFA 0F                         DATAV21JFHJ5PUP_7: dc.b $F
0000AFFB EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000B000 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000B005 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000B00A EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000B00F 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000B014 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000B019 EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000B01E 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000B023 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000B028 EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000B02D 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000B032 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000B037 EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000B03C 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000B041 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000B046                            	even
0000B046                            	even
0000B046                            
0000B046                            ; ===========================================================================
0000B046                            ; ---------------------------------------------------------------------------
0000B046                            ; Object 2B - Chopper enemy (GHZ)
0000B046                            ; ---------------------------------------------------------------------------
0000B046                            
0000B046                            Obj2B:					; XREF: Obj_Index
0000B046 7000                       		moveq	#0,d0
0000B048 1028 0024                  		move.b	$24(a0),d0
0000B04C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B050 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B054 6000 0000                  		bra.w	MarkObjGone
0000B058                            ; ===========================================================================
0000B058 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B05A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B05C                            ; ===========================================================================
0000B05C                            
0000B05C                            Obj2B_Main:				; XREF: Obj2B_Index
0000B05C 5428 0024                  		addq.b	#2,$24(a0)
0000B060 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B068 317C 047B 0002             		move.w	#$47B,2(a0)
0000B06E 117C 0004 0001             		move.b	#4,1(a0)
0000B074 117C 0004 0018             		move.b	#4,$18(a0)
0000B07A 117C 0009 0020             		move.b	#9,$20(a0)
0000B080 117C 0010 0019             		move.b	#$10,$19(a0)
0000B086 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B08C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B092                            
0000B092                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B092 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B098 6100 FC08                  		bsr.w	AnimateSprite
0000B09C 6100 0000                  		bsr.w	SpeedToPos
0000B0A0 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B0A6 3028 0030                  		move.w	$30(a0),d0
0000B0AA B068 000C                  		cmp.w	$C(a0),d0
0000B0AE 6400                       		bcc.s	Obj2B_ChgAni
0000B0B0 3140 000C                  		move.w	d0,$C(a0)
0000B0B4 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B0BA                            
0000B0BA                            Obj2B_ChgAni:
0000B0BA 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B0C0 0440 00C0                  		subi.w	#$C0,d0
0000B0C4 B068 000C                  		cmp.w	$C(a0),d0
0000B0C8 6400                       		bcc.s	locret_ABB6
0000B0CA 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B0D0 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B0D4 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B0D6 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B0DC                            
0000B0DC                            locret_ABB6:
0000B0DC 4E75                       		rts	
0000B0DE                            ; ===========================================================================
0000B0DE                            Ani_obj2B:
0000B0DE                            	include "_anim\obj2B.asm"
0000B0DE                            ; ---------------------------------------------------------------------------
0000B0DE                            ; Animation script - Chopper enemy
0000B0DE                            ; ---------------------------------------------------------------------------
0000B0DE 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B0E0 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B0E2 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B0E4 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B0E8 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B0EC 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B0F0 00                         		even
0000B0F0 00                         		even
0000B0F0                            
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0                            Map_obj2B:
0000B0F0                            	include "_maps\obj2B.asm"
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0F0                            ; ---------------------------------------------------------------------------
0000B0F0 0000                       		dc.w byte_ABCE-Map_obj2B
0000B0F2 0000                       		dc.w byte_ABD4-Map_obj2B
0000B0F4 01                         byte_ABCE:	dc.b 1
0000B0F5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B0FA 01                         byte_ABD4:	dc.b 1
0000B0FB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B100                            		even
0000B100                            		even
0000B100                            
0000B100                            ; ===========================================================================
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            ; Object 2C - Jaws enemy (LZ)
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            
0000B100                            Obj2C:					; XREF: Obj_Index
0000B100 7000                       		moveq	#0,d0
0000B102 1028 0024                  		move.b	$24(a0),d0
0000B106 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B10A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B10E                            ; ===========================================================================
0000B10E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B110 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B112                            ; ===========================================================================
0000B112                            
0000B112                            Obj2C_Main:				; XREF: Obj2C_Index
0000B112 5428 0024                  		addq.b	#2,$24(a0)
0000B116 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B11E 317C 2486 0002             		move.w	#$2486,2(a0)
0000B124 0028 0004 0001             		ori.b	#4,1(a0)
0000B12A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B130 117C 0004 0018             		move.b	#4,$18(a0)
0000B136 117C 0010 0019             		move.b	#$10,$19(a0)
0000B13C 7000                       		moveq	#0,d0
0000B13E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B142 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B144 5340                       		subq.w	#1,d0
0000B146 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B14A 3140 0032                  		move.w	d0,$32(a0)
0000B14E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B154 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B15A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B15C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B160                            
0000B160                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B160 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B164 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B166 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B16C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B170 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B176 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B17C                            
0000B17C                            Obj2C_Animate:
0000B17C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B182 6100 FB1E                  		bsr.w	AnimateSprite
0000B186 6100 0000                  		bsr.w	SpeedToPos
0000B18A 6000 0000                  		bra.w	MarkObjGone
0000B18E                            ; ===========================================================================
0000B18E                            Ani_obj2C:
0000B18E                            	include "_anim\obj2C.asm"
0000B18E                            ; ---------------------------------------------------------------------------
0000B18E                            ; Animation script - Jaws enemy
0000B18E                            ; ---------------------------------------------------------------------------
0000B18E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B190 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B196                            		even
0000B196                            		even
0000B196                            
0000B196                            ; ---------------------------------------------------------------------------
0000B196                            ; Sprite mappings - Jaws enemy (LZ)
0000B196                            ; ---------------------------------------------------------------------------
0000B196                            Map_obj2C:
0000B196                            	include "_maps\obj2C.asm"
0000B196                            ; ---------------------------------------------------------------------------
0000B196                            ; Sprite mappings - Jaws enemy (LZ)
0000B196                            ; ---------------------------------------------------------------------------
0000B196 0000                       		dc.w byte_AC78-Map_obj2C
0000B198 0000                       		dc.w byte_AC83-Map_obj2C
0000B19A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B19C 0000                       		dc.w byte_AC99-Map_obj2C
0000B19E 02                         byte_AC78:	dc.b 2
0000B19F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B1A4 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B1A9 02                         byte_AC83:	dc.b 2
0000B1AA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1AF F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B1B4 02                         byte_AC8E:	dc.b 2
0000B1B5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B1BA F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B1BF 02                         byte_AC99:	dc.b 2
0000B1C0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1C5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B1CA                            		even
0000B1CA                            		even
0000B1CA                            
0000B1CA                            ; ===========================================================================
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA                            ; Object 2D - Burrobot enemy (LZ)
0000B1CA                            ; ---------------------------------------------------------------------------
0000B1CA                            
0000B1CA                            Obj2D:					; XREF: Obj_Index
0000B1CA 7000                       		moveq	#0,d0
0000B1CC 1028 0024                  		move.b	$24(a0),d0
0000B1D0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B1D4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B1D8                            ; ===========================================================================
0000B1D8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B1DA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B1DC                            ; ===========================================================================
0000B1DC                            
0000B1DC                            Obj2D_Main:				; XREF: Obj2D_Index
0000B1DC 5428 0024                  		addq.b	#2,$24(a0)
0000B1E0 117C 0013 0016             		move.b	#$13,$16(a0)
0000B1E6 117C 0008 0017             		move.b	#8,$17(a0)
0000B1EC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B1F4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B1FA 0028 0004 0001             		ori.b	#4,1(a0)
0000B200 117C 0004 0018             		move.b	#4,$18(a0)
0000B206 117C 0005 0020             		move.b	#5,$20(a0)
0000B20C 117C 000C 0019             		move.b	#$C,$19(a0)
0000B212 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B216 117C 0002 001C             		move.b	#2,$1C(a0)
0000B21C                            
0000B21C                            Obj2D_Action:				; XREF: Obj2D_Index
0000B21C 7000                       		moveq	#0,d0
0000B21E 1028 0025                  		move.b	$25(a0),d0
0000B222 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B226 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B22A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B230 6100 FA70                  		bsr.w	AnimateSprite
0000B234 6000 0000                  		bra.w	MarkObjGone
0000B238                            ; ===========================================================================
0000B238 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B23A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B23C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B23E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B240                            ; ===========================================================================
0000B240                            
0000B240                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B240 5368 0030                  		subq.w	#1,$30(a0)
0000B244 6A00                       		bpl.s	locret_AD42
0000B246 5428 0025                  		addq.b	#2,$25(a0)
0000B24A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B250 317C 0080 0010             		move.w	#$80,$10(a0)
0000B256 117C 0001 001C             		move.b	#1,$1C(a0)
0000B25C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B262 6700                       		beq.s	locret_AD42
0000B264 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B268                            
0000B268                            locret_AD42:
0000B268 4E75                       		rts	
0000B26A                            ; ===========================================================================
0000B26A                            
0000B26A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B26A 5368 0030                  		subq.w	#1,$30(a0)
0000B26E 6B00                       		bmi.s	loc_AD84
0000B270 6100 0000                  		bsr.w	SpeedToPos
0000B274 0868 0000 0032             		bchg	#0,$32(a0)
0000B27A 6600                       		bne.s	loc_AD78
0000B27C 3628 0008                  		move.w	8(a0),d3
0000B280 0643 000C                  		addi.w	#$C,d3
0000B284 0828 0000 0022             		btst	#0,$22(a0)
0000B28A 6600                       		bne.s	loc_AD6A
0000B28C 0443 0018                  		subi.w	#$18,d3
0000B290                            
0000B290                            loc_AD6A:
0000B290 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B296 0C41 000C                  		cmpi.w	#$C,d1
0000B29A 6C00                       		bge.s	loc_AD84
0000B29C 4E75                       		rts	
0000B29E                            ; ===========================================================================
0000B29E                            
0000B29E                            loc_AD78:				; XREF: Obj2D_Move
0000B29E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2A4 D368 000C                  		add.w	d1,$C(a0)
0000B2A8 4E75                       		rts	
0000B2AA                            ; ===========================================================================
0000B2AA                            
0000B2AA                            loc_AD84:				; XREF: Obj2D_Move
0000B2AA 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B2B0 6700                       		beq.s	loc_ADA4
0000B2B2 5528 0025                  		subq.b	#2,$25(a0)
0000B2B6 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B2BC 317C 0000 0010             		move.w	#0,$10(a0)
0000B2C2 117C 0000 001C             		move.b	#0,$1C(a0)
0000B2C8 4E75                       		rts	
0000B2CA                            ; ===========================================================================
0000B2CA                            
0000B2CA                            loc_ADA4:
0000B2CA 5428 0025                  		addq.b	#2,$25(a0)
0000B2CE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2D4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B2DA 4E75                       		rts	
0000B2DC                            ; ===========================================================================
0000B2DC                            
0000B2DC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B2DC 6100 0000                  		bsr.w	SpeedToPos
0000B2E0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B2E6 6B00                       		bmi.s	locret_ADF0
0000B2E8 117C 0003 001C             		move.b	#3,$1C(a0)
0000B2EE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2F4 4A41                       		tst.w	d1
0000B2F6 6A00                       		bpl.s	locret_ADF0
0000B2F8 D368 000C                  		add.w	d1,$C(a0)
0000B2FC 317C 0000 0012             		move.w	#0,$12(a0)
0000B302 117C 0001 001C             		move.b	#1,$1C(a0)
0000B308 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B30E 5528 0025                  		subq.b	#2,$25(a0)
0000B312 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B316                            
0000B316                            locret_ADF0:
0000B316 4E75                       		rts	
0000B318                            ; ===========================================================================
0000B318                            
0000B318                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B318 343C 0060                  		move.w	#$60,d2
0000B31C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B320 6400                       		bcc.s	locret_AE20
0000B322 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B326 9068 000C                  		sub.w	$C(a0),d0
0000B32A 6400                       		bcc.s	locret_AE20
0000B32C 0C40 FF80                  		cmpi.w	#-$80,d0
0000B330 6500                       		bcs.s	locret_AE20
0000B332 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B336 6600                       		bne.s	locret_AE20
0000B338 5528 0025                  		subq.b	#2,$25(a0)
0000B33C 3141 0010                  		move.w	d1,$10(a0)
0000B340 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B346                            
0000B346                            locret_AE20:
0000B346 4E75                       		rts	
0000B348                            
0000B348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B348                            
0000B348                            
0000B348                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B348 323C 0080                  		move.w	#$80,d1
0000B34C 08E8 0000 0022             		bset	#0,$22(a0)
0000B352 3038 D008                  		move.w	($FFFFD008).w,d0
0000B356 9068 0008                  		sub.w	8(a0),d0
0000B35A 6400                       		bcc.s	loc_AE40
0000B35C 4440                       		neg.w	d0
0000B35E 4441                       		neg.w	d1
0000B360 08A8 0000 0022             		bclr	#0,$22(a0)
0000B366                            
0000B366                            loc_AE40:
0000B366 B042                       		cmp.w	d2,d0
0000B368 4E75                       		rts	
0000B36A                            ; End of function Obj2D_ChkSonic2
0000B36A                            
0000B36A                            ; ===========================================================================
0000B36A                            Ani_obj2D:
0000B36A                            	include "_anim\obj2D.asm"
0000B36A                            ; ---------------------------------------------------------------------------
0000B36A                            ; Animation script - Burrobot enemy
0000B36A                            ; ---------------------------------------------------------------------------
0000B36A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B36C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B36E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B370 0000                       		dc.w byte_AE58-Ani_obj2D
0000B372 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B376 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B37A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B37E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B382 00                         		even
0000B382 00                         		even
0000B382                            
0000B382                            ; ---------------------------------------------------------------------------
0000B382                            ; Sprite mappings - Burrobot enemy (LZ)
0000B382                            ; ---------------------------------------------------------------------------
0000B382                            Map_obj2D:
0000B382                            	include "_maps\obj2D.asm"
0000B382                            ; ---------------------------------------------------------------------------
0000B382                            ; Sprite mappings - Burrobot enemy (LZ)
0000B382                            ; ---------------------------------------------------------------------------
0000B382 0000                       		dc.w byte_AE6A-Map_obj2D
0000B384 0000                       		dc.w byte_AE75-Map_obj2D
0000B386 0000                       		dc.w byte_AE80-Map_obj2D
0000B388 0000                       		dc.w byte_AE8B-Map_obj2D
0000B38A 0000                       		dc.w byte_AE96-Map_obj2D
0000B38C 0000                       		dc.w byte_AEA1-Map_obj2D
0000B38E 0000                       		dc.w byte_AEAC-Map_obj2D
0000B390 02                         byte_AE6A:	dc.b 2
0000B391 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B396 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B39B 02                         byte_AE75:	dc.b 2
0000B39C EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B3A1 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B3A6 02                         byte_AE80:	dc.b 2
0000B3A7 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B3AC 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B3B1 02                         byte_AE8B:	dc.b 2
0000B3B2 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B3B7 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B3BC 02                         byte_AE96:	dc.b 2
0000B3BD E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B3C2 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B3C7 02                         byte_AEA1:	dc.b 2
0000B3C8 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B3CD F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B3D2 02                         byte_AEAC:	dc.b 2
0000B3D3 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B3D8 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B3DE 00                         		even
0000B3DE 00                         		even
0000B3DE                            
0000B3DE                            ; ===========================================================================
0000B3DE                            ; ---------------------------------------------------------------------------
0000B3DE                            ; Object 2F - large moving platforms (MZ)
0000B3DE                            ; ---------------------------------------------------------------------------
0000B3DE                            
0000B3DE                            Obj2F:					; XREF: Obj_Index
0000B3DE 7000                       		moveq	#0,d0
0000B3E0 1028 0024                  		move.b	$24(a0),d0
0000B3E4 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B3E8 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B3EC                            ; ===========================================================================
0000B3EC 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B3EE 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B3F0                            
0000B3F0 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B3F2 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B3F4 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B3F6 0140                       		dc.b 1,	$40
0000B3F8 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3FA 0220                       		dc.b 2,	$20
0000B3FC                            ; ===========================================================================
0000B3FC                            
0000B3FC                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3FC 5428 0024                  		addq.b	#2,$24(a0)
0000B400 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B408 317C C000 0002             		move.w	#$C000,2(a0)
0000B40E 117C 0004 0001             		move.b	#4,1(a0)
0000B414 117C 0005 0018             		move.b	#5,$18(a0)
0000B41A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B420 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B426 7000                       		moveq	#0,d0
0000B428 1028 0028                  		move.b	$28(a0),d0
0000B42C E448                       		lsr.w	#2,d0
0000B42E 0240 001C                  		andi.w	#$1C,d0
0000B432 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B436 3019                       		move.w	(a1)+,d0
0000B438 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B43C 214A 0030                  		move.l	a2,$30(a0)
0000B440 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B444 1151 0019                  		move.b	(a1),$19(a0)
0000B448 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B44E 117C 0040 0016             		move.b	#$40,$16(a0)
0000B454 08E8 0004 0001             		bset	#4,1(a0)
0000B45A                            
0000B45A                            Obj2F_Action:				; XREF: Obj2F_Index
0000B45A 6100 0000                  		bsr.w	Obj2F_Types
0000B45E 4A28 0025                  		tst.b	$25(a0)
0000B462 6700                       		beq.s	Obj2F_Solid
0000B464 7200                       		moveq	#0,d1
0000B466 1228 0019                  		move.b	$19(a0),d1
0000B46A 0641 000B                  		addi.w	#$B,d1
0000B46E 6100 C602                  		bsr.w	ExitPlatform
0000B472 0829 0003 0022             		btst	#3,$22(a1)
0000B478 6600 0000                  		bne.w	Obj2F_Slope
0000B47C 4228 0025                  		clr.b	$25(a0)
0000B480 6000                       		bra.s	Obj2F_Display
0000B482                            ; ===========================================================================
0000B482                            
0000B482                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B482 7200                       		moveq	#0,d1
0000B484 1228 0019                  		move.b	$19(a0),d1
0000B488 0641 000B                  		addi.w	#$B,d1
0000B48C 2468 0030                  		movea.l	$30(a0),a2
0000B490 3428 0008                  		move.w	8(a0),d2
0000B494 6100 D53A                  		bsr.w	SlopeObject2
0000B498 6000                       		bra.s	Obj2F_Display
0000B49A                            ; ===========================================================================
0000B49A                            
0000B49A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B49A 7200                       		moveq	#0,d1
0000B49C 1228 0019                  		move.b	$19(a0),d1
0000B4A0 0641 000B                  		addi.w	#$B,d1
0000B4A4 343C 0020                  		move.w	#$20,d2
0000B4A8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B4AE 6600                       		bne.s	loc_AF8E
0000B4B0 343C 0030                  		move.w	#$30,d2
0000B4B4                            
0000B4B4                            loc_AF8E:
0000B4B4 2468 0030                  		movea.l	$30(a0),a2
0000B4B8 6100 0000                  		bsr.w	SolidObject2F
0000B4BC                            
0000B4BC                            Obj2F_Display:				; XREF: Obj2F_Action
0000B4BC 6100 0000                  		bsr.w	DisplaySprite
0000B4C0 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4C4                            
0000B4C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4C4                            
0000B4C4                            
0000B4C4                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4C4 7000                       		moveq	#0,d0
0000B4C6 1028 0028                  		move.b	$28(a0),d0
0000B4CA 0240 0007                  		andi.w	#7,d0
0000B4CE D040                       		add.w	d0,d0
0000B4D0 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B4D4 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B4D8                            ; End of function Obj2F_Types
0000B4D8                            
0000B4D8                            ; ===========================================================================
0000B4D8 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B4DA 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B4DC 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B4DE 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B4E0 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B4E2 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B4E4                            ; ===========================================================================
0000B4E4                            
0000B4E4                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B4E4 4E75                       		rts			; type 00 platform doesn't move
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B4E6 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B4EA 323C 0020                  		move.w	#$20,d1
0000B4EE 6000                       		bra.s	Obj2F_Move
0000B4F0                            ; ===========================================================================
0000B4F0                            
0000B4F0                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B4F0 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B4F4 323C 0030                  		move.w	#$30,d1
0000B4F8 6000                       		bra.s	Obj2F_Move
0000B4FA                            ; ===========================================================================
0000B4FA                            
0000B4FA                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4FA 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4FE 323C 0040                  		move.w	#$40,d1
0000B502 6000                       		bra.s	Obj2F_Move
0000B504                            ; ===========================================================================
0000B504                            
0000B504                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B504 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B508 323C 0060                  		move.w	#$60,d1
0000B50C                            
0000B50C                            Obj2F_Move:
0000B50C 0828 0003 0028             		btst	#3,$28(a0)
0000B512 6700                       		beq.s	loc_AFF2
0000B514 4440                       		neg.w	d0
0000B516 D041                       		add.w	d1,d0
0000B518                            
0000B518                            loc_AFF2:
0000B518 3228 002C                  		move.w	$2C(a0),d1
0000B51C 9240                       		sub.w	d0,d1
0000B51E 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B522 4E75                       		rts	
0000B524                            ; ===========================================================================
0000B524                            
0000B524                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B524 1028 0034                  		move.b	$34(a0),d0
0000B528 4A28 0025                  		tst.b	$25(a0)
0000B52C 6600                       		bne.s	loc_B010
0000B52E 5500                       		subq.b	#2,d0
0000B530 6400                       		bcc.s	loc_B01C
0000B532 7000                       		moveq	#0,d0
0000B534 6000                       		bra.s	loc_B01C
0000B536                            ; ===========================================================================
0000B536                            
0000B536                            loc_B010:
0000B536 5800                       		addq.b	#4,d0
0000B538 0C00 0040                  		cmpi.b	#$40,d0
0000B53C 6500                       		bcs.s	loc_B01C
0000B53E 103C 0040                  		move.b	#$40,d0
0000B542                            
0000B542                            loc_B01C:
0000B542 1140 0034                  		move.b	d0,$34(a0)
0000B546 4EB9 0000 2C82             		jsr	(CalcSine).l
0000B54C E848                       		lsr.w	#4,d0
0000B54E 3200                       		move.w	d0,d1
0000B550 D068 002C                  		add.w	$2C(a0),d0
0000B554 3140 000C                  		move.w	d0,$C(a0)
0000B558 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B55E 6600                       		bne.s	loc_B07A
0000B560 4A28 0035                  		tst.b	$35(a0)
0000B564 6600                       		bne.s	loc_B07A
0000B566 117C 0001 0035             		move.b	#1,$35(a0)
0000B56C 6100 0000                  		bsr.w	SingleObjLoad2
0000B570 6600                       		bne.s	loc_B07A
0000B572 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B576 3368 0008 0008             		move.w	8(a0),8(a1)
0000B57C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B582 5069 002C                  		addq.w	#8,$2C(a1)
0000B586 5769 002C                  		subq.w	#3,$2C(a1)
0000B58A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B590 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B596 2348 0038                  		move.l	a0,$38(a1)
0000B59A 2448                       		movea.l	a0,a2
0000B59C 6100                       		bsr.s	sub_B09C
0000B59E                            
0000B59E                            loc_B07A:
0000B59E 7400                       		moveq	#0,d2
0000B5A0 45E8 0036                  		lea	$36(a0),a2
0000B5A4 141A                       		move.b	(a2)+,d2
0000B5A6 5302                       		subq.b	#1,d2
0000B5A8 6500                       		bcs.s	locret_B09A
0000B5AA                            
0000B5AA                            loc_B086:
0000B5AA 7000                       		moveq	#0,d0
0000B5AC 101A                       		move.b	(a2)+,d0
0000B5AE ED48                       		lsl.w	#6,d0
0000B5B0 0640 D000                  		addi.w	#-$3000,d0
0000B5B4 3240                       		movea.w	d0,a1
0000B5B6 3341 003C                  		move.w	d1,$3C(a1)
0000B5BA 51CA FFEE                  		dbf	d2,loc_B086
0000B5BE                            
0000B5BE                            locret_B09A:
0000B5BE 4E75                       		rts	
0000B5C0                            
0000B5C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5C0                            
0000B5C0                            
0000B5C0                            sub_B09C:
0000B5C0 45EA 0036                  		lea	$36(a2),a2
0000B5C4 7000                       		moveq	#0,d0
0000B5C6 1012                       		move.b	(a2),d0
0000B5C8 5212                       		addq.b	#1,(a2)
0000B5CA 45F2 0001                  		lea	1(a2,d0.w),a2
0000B5CE 3009                       		move.w	a1,d0
0000B5D0 0440 D000                  		subi.w	#-$3000,d0
0000B5D4 EC48                       		lsr.w	#6,d0
0000B5D6 0240 007F                  		andi.w	#$7F,d0
0000B5DA 1480                       		move.b	d0,(a2)
0000B5DC 4E75                       		rts	
0000B5DE                            ; End of function sub_B09C
0000B5DE                            
0000B5DE                            ; ===========================================================================
0000B5DE                            
0000B5DE                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B5DE 4A28 0035                  		tst.b	$35(a0)
0000B5E2 6700                       		beq.s	loc_B0C6
0000B5E4 4A28 0001                  		tst.b	1(a0)
0000B5E8 6A00                       		bpl.s	Obj2F_DelFlames
0000B5EA                            
0000B5EA                            loc_B0C6:
0000B5EA 3028 002A                  		move.w	$2A(a0),d0
0000B5EE 0240 FF80                  		andi.w	#$FF80,d0
0000B5F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5F6 0441 0080                  		subi.w	#$80,d1
0000B5FA 0241 FF80                  		andi.w	#$FF80,d1
0000B5FE 9041                       		sub.w	d1,d0
0000B600 0C40 0280                  		cmpi.w	#$280,d0
0000B604 6200 0000                  		bhi.w	DeleteObject
0000B608 4E75                       		rts	
0000B60A                            ; ===========================================================================
0000B60A                            
0000B60A                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B60A 7400                       		moveq	#0,d2
0000B60C                            
0000B60C                            loc_B0E8:
0000B60C 45E8 0036                  		lea	$36(a0),a2
0000B610 1412                       		move.b	(a2),d2
0000B612 421A                       		clr.b	(a2)+
0000B614 5302                       		subq.b	#1,d2
0000B616 6500                       		bcs.s	locret_B116
0000B618                            
0000B618                            loc_B0F4:
0000B618 7000                       		moveq	#0,d0
0000B61A 1012                       		move.b	(a2),d0
0000B61C 421A                       		clr.b	(a2)+
0000B61E ED48                       		lsl.w	#6,d0
0000B620 0640 D000                  		addi.w	#-$3000,d0
0000B624 3240                       		movea.w	d0,a1
0000B626 6100 0000                  		bsr.w	DeleteObject2
0000B62A 51CA FFEC                  		dbf	d2,loc_B0F4
0000B62E 117C 0000 0035             		move.b	#0,$35(a0)
0000B634 117C 0000 0034             		move.b	#0,$34(a0)
0000B63A                            
0000B63A                            locret_B116:
0000B63A 4E75                       		rts	
0000B63C                            ; ===========================================================================
0000B63C                            ; ---------------------------------------------------------------------------
0000B63C                            ; Collision data for large moving platforms (MZ)
0000B63C                            ; ---------------------------------------------------------------------------
0000B63C                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B688                            		even
0000B688                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B6B4                            		even
0000B6B4                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B700                            		even
0000B700                            ; ===========================================================================
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B700                            ; (appears when	you walk on sinking platforms)
0000B700                            ; ---------------------------------------------------------------------------
0000B700                            
0000B700                            Obj35:					; XREF: Obj_Index
0000B700 7000                       		moveq	#0,d0
0000B702 1028 0024                  		move.b	$24(a0),d0
0000B706 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B70A 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B70E                            ; ===========================================================================
0000B70E 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B710 0000                       		dc.w loc_B238-Obj35_Index
0000B712 0000                       		dc.w Obj35_Move-Obj35_Index
0000B714                            ; ===========================================================================
0000B714                            
0000B714                            Obj35_Main:				; XREF: Obj35_Index
0000B714 5428 0024                  		addq.b	#2,$24(a0)
0000B718 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B720 317C 0345 0002             		move.w	#$345,2(a0)
0000B726 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B72C 117C 0004 0001             		move.b	#4,1(a0)
0000B732 117C 0001 0018             		move.b	#1,$18(a0)
0000B738 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B73E 117C 0008 0019             		move.b	#8,$19(a0)
0000B744 303C 00C8                  		move.w	#$C8,d0
0000B748 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B74E 4A28 0028                  		tst.b	$28(a0)
0000B752 6700                       		beq.s	loc_B238
0000B754 5428 0024                  		addq.b	#2,$24(a0)
0000B758 6000 0000                  		bra.w	Obj35_Move
0000B75C                            ; ===========================================================================
0000B75C                            
0000B75C                            loc_B238:				; XREF: Obj35_Index
0000B75C 2268 0030                  		movea.l	$30(a0),a1
0000B760 3228 0008                  		move.w	8(a0),d1
0000B764 9268 002A                  		sub.w	$2A(a0),d1
0000B768 0641 000C                  		addi.w	#$C,d1
0000B76C 3001                       		move.w	d1,d0
0000B76E E248                       		lsr.w	#1,d0
0000B770 1031 0000                  		move.b	(a1,d0.w),d0
0000B774 4440                       		neg.w	d0
0000B776 D068 002C                  		add.w	$2C(a0),d0
0000B77A 3400                       		move.w	d0,d2
0000B77C D068 003C                  		add.w	$3C(a0),d0
0000B780 3140 000C                  		move.w	d0,$C(a0)
0000B784 0C41 0084                  		cmpi.w	#$84,d1
0000B788 6400                       		bcc.s	loc_B2B0
0000B78A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B792 0C41 0080                  		cmpi.w	#$80,d1
0000B796 6400                       		bcc.s	loc_B2B0
0000B798 2028 0008                  		move.l	8(a0),d0
0000B79C 0680 0008 0000             		addi.l	#$80000,d0
0000B7A2 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B7A8 6600                       		bne.s	loc_B2B0
0000B7AA 6100 0000                  		bsr.w	SingleObjLoad2
0000B7AE 6600                       		bne.s	loc_B2B0
0000B7B0 12BC 0035                  		move.b	#$35,0(a1)
0000B7B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7BA 3342 002C                  		move.w	d2,$2C(a1)
0000B7BE 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7C4 137C 0001 0028             		move.b	#1,$28(a1)
0000B7CA 2468 0038                  		movea.l	$38(a0),a2
0000B7CE 6100 FDF0                  		bsr.w	sub_B09C
0000B7D2                            
0000B7D2                            loc_B2B0:
0000B7D2 6000                       		bra.s	Obj35_Animate
0000B7D4                            ; ===========================================================================
0000B7D4                            
0000B7D4                            Obj35_Move:				; XREF: Obj35_Index
0000B7D4 3028 002C                  		move.w	$2C(a0),d0
0000B7D8 D068 003C                  		add.w	$3C(a0),d0
0000B7DC 3140 000C                  		move.w	d0,$C(a0)
0000B7E0                            
0000B7E0                            Obj35_Animate:				; XREF: loc_B238
0000B7E0 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B7E6 6100 F4BA                  		bsr.w	AnimateSprite
0000B7EA 6000 0000                  		bra.w	DisplaySprite
0000B7EE                            ; ===========================================================================
0000B7EE                            Ani_obj35:
0000B7EE                            	include "_anim\obj35.asm"
0000B7EE                            ; ---------------------------------------------------------------------------
0000B7EE                            ; Animation script - fireball that sits on the	floor (MZ)
0000B7EE                            ; ---------------------------------------------------------------------------
0000B7EE 0000                       		dc.w byte_B2CE-Ani_obj35
0000B7F0 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B7F6                            		even
0000B7F6                            		even
0000B7F6                            
0000B7F6                            ; ---------------------------------------------------------------------------
0000B7F6                            ; Sprite mappings - large moving platforms (MZ)
0000B7F6                            ; ---------------------------------------------------------------------------
0000B7F6                            Map_obj2F:
0000B7F6                            	include "_maps\obj2F.asm"
0000B7F6                            ; ---------------------------------------------------------------------------
0000B7F6                            ; Sprite mappings - large moving platforms (MZ)
0000B7F6                            ; ---------------------------------------------------------------------------
0000B7F6 0000                       		dc.w byte_B2DA-Map_obj2F
0000B7F8 0000                       		dc.w byte_B31C-Map_obj2F
0000B7FA 0000                       		dc.w byte_B34F-Map_obj2F
0000B7FC 0D                         byte_B2DA:	dc.b $D
0000B7FD D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B802 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B807 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B80C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B811 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B816 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B81B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B820 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B825 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B82A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B82F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B834 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B839 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B83E 0A                         byte_B31C:	dc.b $A
0000B83F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B844 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B849 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B84E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B853 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B858 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B85D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B862 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B867 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B86C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B871 06                         byte_B34F:	dc.b 6
0000B872 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B877 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B87C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B881 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B886 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B88B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B890                            		even
0000B890                            		even
0000B890                            
0000B890                            ; ---------------------------------------------------------------------------
0000B890                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B890                            ; ---------------------------------------------------------------------------
0000B890                            Map_obj14:
0000B890                            	include "_maps\obj14.asm"
0000B890                            ; ---------------------------------------------------------------------------
0000B890                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B890                            ; ---------------------------------------------------------------------------
0000B890 0000                       		dc.w byte_B37A-Map_obj14
0000B892 0000                       		dc.w byte_B380-Map_obj14
0000B894 0000                       		dc.w byte_B386-Map_obj14
0000B896 0000                       		dc.w byte_B38C-Map_obj14
0000B898 0000                       		dc.w byte_B392-Map_obj14
0000B89A 0000                       		dc.w byte_B398-Map_obj14
0000B89C 01                         byte_B37A:	dc.b 1
0000B89D E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B8A2 01                         byte_B380:	dc.b 1
0000B8A3 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B8A8 01                         byte_B386:	dc.b 1
0000B8A9 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B8AE 01                         byte_B38C:	dc.b 1
0000B8AF F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B8B4 01                         byte_B392:	dc.b 1
0000B8B5 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B8BA 01                         byte_B398:	dc.b 1
0000B8BB F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B8C0                            		even
0000B8C0                            		even
0000B8C0                            
0000B8C0                            ; ===========================================================================
0000B8C0                            ; ---------------------------------------------------------------------------
0000B8C0                            ; Object 30 - large green glassy blocks	(MZ)
0000B8C0                            ; ---------------------------------------------------------------------------
0000B8C0                            
0000B8C0                            Obj30:					; XREF: Obj_Index
0000B8C0 7000                       		moveq	#0,d0
0000B8C2 1028 0024                  		move.b	$24(a0),d0
0000B8C6 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B8CA 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B8CE 3028 0008                  		move.w	8(a0),d0
0000B8D2 0240 FF80                  		andi.w	#$FF80,d0
0000B8D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8DA 0441 0080                  		subi.w	#$80,d1
0000B8DE 0241 FF80                  		andi.w	#$FF80,d1
0000B8E2 9041                       		sub.w	d1,d0
0000B8E4 0C40 0280                  		cmpi.w	#$280,d0
0000B8E8 6200 0000                  		bhi.w	Obj30_Delete
0000B8EC 6000 0000                  		bra.w	DisplaySprite
0000B8F0                            ; ===========================================================================
0000B8F0                            
0000B8F0                            Obj30_Delete:
0000B8F0 6000 0000                  		bra.w	DeleteObject
0000B8F4                            ; ===========================================================================
0000B8F4 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B8F6 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B8F8 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8FA 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8FC 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8FE                            
0000B8FE 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B901 0400 01                    		dc.b 4,	0, 1
0000B904 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B907 0800 01                    		dc.b 8,	0, 1
0000B90A                            ; ===========================================================================
0000B90A                            
0000B90A                            Obj30_Main:				; XREF: Obj30_Index
0000B90A 45F9 0000 B8FE             		lea	(Obj30_Vars1).l,a2
0000B910 7201                       		moveq	#1,d1
0000B912 117C 0048 0016             		move.b	#$48,$16(a0)
0000B918 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B91E 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B920 45F9 0000 B904             		lea	(Obj30_Vars2).l,a2
0000B926 7201                       		moveq	#1,d1
0000B928 117C 0038 0016             		move.b	#$38,$16(a0)
0000B92E                            
0000B92E                            loc_B40C:
0000B92E 2248                       		movea.l	a0,a1
0000B930 6000                       		bra.s	Obj30_Load	; load main object
0000B932                            ; ===========================================================================
0000B932                            
0000B932                            Obj30_Loop:
0000B932 6100 0000                  		bsr.w	SingleObjLoad2
0000B936 6600                       		bne.s	loc_B480
0000B938                            
0000B938                            Obj30_Load:				; XREF: Obj30_Main
0000B938 135A 0024                  		move.b	(a2)+,$24(a1)
0000B93C 12BC 0030                  		move.b	#$30,0(a1)
0000B940 3368 0008 0008             		move.w	8(a0),8(a1)
0000B946 101A                       		move.b	(a2)+,d0
0000B948 4880                       		ext.w	d0
0000B94A D068 000C                  		add.w	$C(a0),d0
0000B94E 3340 000C                  		move.w	d0,$C(a1)
0000B952 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B95A 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B960 137C 0004 0001             		move.b	#4,1(a1)
0000B966 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B96C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B972 137C 0020 0019             		move.b	#$20,$19(a1)
0000B978 137C 0004 0018             		move.b	#4,$18(a1)
0000B97E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B982 2348 003C                  		move.l	a0,$3C(a1)
0000B986 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B98A                            
0000B98A 137C 0010 0019             		move.b	#$10,$19(a1)
0000B990 137C 0003 0018             		move.b	#3,$18(a1)
0000B996 5029 0028                  		addq.b	#8,$28(a1)
0000B99A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B9A0                            
0000B9A0                            loc_B480:
0000B9A0 317C 0090 0032             		move.w	#$90,$32(a0)
0000B9A6 08E8 0004 0001             		bset	#4,1(a0)
0000B9AC                            
0000B9AC                            Obj30_Block012:				; XREF: Obj30_Index
0000B9AC 6100 0000                  		bsr.w	Obj30_Types
0000B9B0 323C 002B                  		move.w	#$2B,d1
0000B9B4 343C 0048                  		move.w	#$48,d2
0000B9B8 363C 0049                  		move.w	#$49,d3
0000B9BC 3828 0008                  		move.w	8(a0),d4
0000B9C0 6000 0000                  		bra.w	SolidObject
0000B9C4                            ; ===========================================================================
0000B9C4                            
0000B9C4                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9C4 2268 003C                  		movea.l	$3C(a0),a1
0000B9C8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9CE 6000 0000                  		bra.w	Obj30_Types
0000B9D2                            ; ===========================================================================
0000B9D2                            
0000B9D2                            Obj30_Block34:				; XREF: Obj30_Index
0000B9D2 6100 0000                  		bsr.w	Obj30_Types
0000B9D6 323C 002B                  		move.w	#$2B,d1
0000B9DA 343C 0038                  		move.w	#$38,d2
0000B9DE 363C 0039                  		move.w	#$39,d3
0000B9E2 3828 0008                  		move.w	8(a0),d4
0000B9E6 6000 0000                  		bra.w	SolidObject
0000B9EA                            ; ===========================================================================
0000B9EA                            
0000B9EA                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B9EA 2268 003C                  		movea.l	$3C(a0),a1
0000B9EE 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9F4 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9FA 6000 0002                  		bra.w	*+4
0000B9FE                            
0000B9FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9FE                            
0000B9FE                            
0000B9FE                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9FE 7000                       		moveq	#0,d0
0000BA00 1028 0028                  		move.b	$28(a0),d0
0000BA04 0240 0007                  		andi.w	#7,d0
0000BA08 D040                       		add.w	d0,d0
0000BA0A 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BA0E 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BA12                            ; End of function Obj30_Types
0000BA12                            
0000BA12                            ; ===========================================================================
0000BA12 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BA14 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BA16 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BA18 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BA1A 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BA1C                            ; ===========================================================================
0000BA1C                            
0000BA1C                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BA1C 4E75                       		rts	
0000BA1E                            ; ===========================================================================
0000BA1E                            
0000BA1E                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BA1E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA22 323C 0040                  		move.w	#$40,d1
0000BA26 6000                       		bra.s	loc_B514
0000BA28                            ; ===========================================================================
0000BA28                            
0000BA28                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA28 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA2C 323C 0040                  		move.w	#$40,d1
0000BA30 4440                       		neg.w	d0
0000BA32 D041                       		add.w	d1,d0
0000BA34                            
0000BA34                            loc_B514:				; XREF: Obj30_Type01
0000BA34 0828 0003 0028             		btst	#3,$28(a0)
0000BA3A 6700                       		beq.s	loc_B526
0000BA3C 4440                       		neg.w	d0
0000BA3E D041                       		add.w	d1,d0
0000BA40 E208                       		lsr.b	#1,d0
0000BA42 0640 0020                  		addi.w	#$20,d0
0000BA46                            
0000BA46                            loc_B526:
0000BA46 6000 0000                  		bra.w	loc_B5EE
0000BA4A                            ; ===========================================================================
0000BA4A                            
0000BA4A                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA4A 0828 0003 0028             		btst	#3,$28(a0)
0000BA50 6700                       		beq.s	loc_B53E
0000BA52 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA56 0440 0010                  		subi.w	#$10,d0
0000BA5A 6000 0000                  		bra.w	loc_B5EE
0000BA5E                            ; ===========================================================================
0000BA5E                            
0000BA5E                            loc_B53E:
0000BA5E 0828 0003 0022             		btst	#3,$22(a0)
0000BA64 6600                       		bne.s	loc_B54E
0000BA66 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA6C 6000                       		bra.s	loc_B582
0000BA6E                            ; ===========================================================================
0000BA6E                            
0000BA6E                            loc_B54E:
0000BA6E 4A28 0034                  		tst.b	$34(a0)
0000BA72 6600                       		bne.s	loc_B582
0000BA74 117C 0001 0034             		move.b	#1,$34(a0)
0000BA7A 08E8 0000 0035             		bset	#0,$35(a0)
0000BA80 6700                       		beq.s	loc_B582
0000BA82 08E8 0007 0034             		bset	#7,$34(a0)
0000BA88 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA8E 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA94 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA9A 6600                       		bne.s	loc_B582
0000BA9C 317C 0040 0036             		move.w	#$40,$36(a0)
0000BAA2                            
0000BAA2                            loc_B582:
0000BAA2 4A28 0034                  		tst.b	$34(a0)
0000BAA6 6A00                       		bpl.s	loc_B5AA
0000BAA8 4A28 0038                  		tst.b	$38(a0)
0000BAAC 6700                       		beq.s	loc_B594
0000BAAE 5328 0038                  		subq.b	#1,$38(a0)
0000BAB2 6600                       		bne.s	loc_B5AA
0000BAB4                            
0000BAB4                            loc_B594:
0000BAB4 4A68 0032                  		tst.w	$32(a0)
0000BAB8 6700                       		beq.s	loc_B5A4
0000BABA 5368 0032                  		subq.w	#1,$32(a0)
0000BABE 5368 0036                  		subq.w	#1,$36(a0)
0000BAC2 6600                       		bne.s	loc_B5AA
0000BAC4                            
0000BAC4                            loc_B5A4:
0000BAC4 08A8 0007 0034             		bclr	#7,$34(a0)
0000BACA                            
0000BACA                            loc_B5AA:
0000BACA 3028 0032                  		move.w	$32(a0),d0
0000BACE 6000                       		bra.s	loc_B5EE
0000BAD0                            ; ===========================================================================
0000BAD0                            
0000BAD0                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BAD0 0828 0003 0028             		btst	#3,$28(a0)
0000BAD6 6700                       		beq.s	Obj30_ChkSwitch
0000BAD8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BADC 0440 0010                  		subi.w	#$10,d0
0000BAE0 6000                       		bra.s	loc_B5EE
0000BAE2                            ; ===========================================================================
0000BAE2                            
0000BAE2                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BAE2 4A28 0034                  		tst.b	$34(a0)
0000BAE6 6600                       		bne.s	loc_B5E0
0000BAE8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BAEC 7000                       		moveq	#0,d0
0000BAEE 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BAF2 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BAF4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BAF8 6700                       		beq.s	loc_B5EA	; if not, branch
0000BAFA 117C 0001 0034             		move.b	#1,$34(a0)
0000BB00                            
0000BB00                            loc_B5E0:
0000BB00 4A68 0032                  		tst.w	$32(a0)
0000BB04 6700                       		beq.s	loc_B5EA
0000BB06 5568 0032                  		subq.w	#2,$32(a0)
0000BB0A                            
0000BB0A                            loc_B5EA:
0000BB0A 3028 0032                  		move.w	$32(a0),d0
0000BB0E                            
0000BB0E                            loc_B5EE:
0000BB0E 3228 0030                  		move.w	$30(a0),d1
0000BB12 9240                       		sub.w	d0,d1
0000BB14 3141 000C                  		move.w	d1,$C(a0)
0000BB18 4E75                       		rts	
0000BB1A                            ; ===========================================================================
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A                            Map_obj30:
0000BB1A                            	include "_maps\obj30.asm"
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB1A                            ; ---------------------------------------------------------------------------
0000BB1A 0000                       		dc.w byte_B600-Map_obj30
0000BB1C 0000                       		dc.w byte_B63D-Map_obj30
0000BB1E 0000                       		dc.w byte_B648-Map_obj30
0000BB20 0C                         byte_B600:	dc.b $C
0000BB21 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB26 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB2B C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB30 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB35 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB3A E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB3F 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB44 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB49 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB4E 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB53 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB58 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB5D 02                         byte_B63D:	dc.b 2
0000BB5E 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB63 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB68 0A                         byte_B648:	dc.b $A
0000BB69 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB6E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB73 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB78 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB7D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB82 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB87 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB8C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB91 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB96 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB9C 00                         		even
0000BB9C 00                         		even
0000BB9C                            
0000BB9C                            ; ===========================================================================
0000BB9C                            ; ---------------------------------------------------------------------------
0000BB9C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB9C                            ; ---------------------------------------------------------------------------
0000BB9C                            
0000BB9C                            Obj31:					; XREF: Obj_Index
0000BB9C 7000                       		moveq	#0,d0
0000BB9E 1028 0024                  		move.b	$24(a0),d0
0000BBA2 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BBA6 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BBAA                            ; ===========================================================================
0000BBAA 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BBAC 0000                       		dc.w loc_B798-Obj31_Index
0000BBAE 0000                       		dc.w loc_B7FE-Obj31_Index
0000BBB0 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BBB2 0000                       		dc.w loc_B7E2-Obj31_Index
0000BBB4                            
0000BBB4 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BBB6 0100                       		dc.b 1,	0
0000BBB8                            
0000BBB8 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BBBB 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BBBE 08CC 03                    		dc.b 8,	$CC, 3
0000BBC1 06F0 02                    		dc.b 6,	$F0, 2
0000BBC4                            
0000BBC4 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BBC8 5000 7800                  		dc.w $5000, $7800
0000BBCC 3800 5800                  		dc.w $3800, $5800
0000BBD0 B800                       		dc.w $B800
0000BBD2                            ; ===========================================================================
0000BBD2                            
0000BBD2                            Obj31_Main:				; XREF: Obj31_Index
0000BBD2 7000                       		moveq	#0,d0
0000BBD4 1028 0028                  		move.b	$28(a0),d0
0000BBD8 6A00                       		bpl.s	loc_B6CE
0000BBDA 0240 007F                  		andi.w	#$7F,d0
0000BBDE D040                       		add.w	d0,d0
0000BBE0 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BBE4 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BBE8 101A                       		move.b	(a2)+,d0
0000BBEA 1140 0028                  		move.b	d0,$28(a0)
0000BBEE                            
0000BBEE                            loc_B6CE:
0000BBEE 0200 000F                  		andi.b	#$F,d0
0000BBF2 D040                       		add.w	d0,d0
0000BBF4 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BBF8 4A40                       		tst.w	d0
0000BBFA 6600                       		bne.s	loc_B6E0
0000BBFC 3142 0032                  		move.w	d2,$32(a0)
0000BC00                            
0000BC00                            loc_B6E0:
0000BC00 45F9 0000 BBB8             		lea	(Obj31_Var).l,a2
0000BC06 2248                       		movea.l	a0,a1
0000BC08 7203                       		moveq	#3,d1
0000BC0A 6000                       		bra.s	Obj31_MakeStomper
0000BC0C                            ; ===========================================================================
0000BC0C                            
0000BC0C                            Obj31_Loop:
0000BC0C 6100 0000                  		bsr.w	SingleObjLoad2
0000BC10 6600 0000                  		bne.w	Obj31_SetSize
0000BC14                            
0000BC14                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BC14 135A 0024                  		move.b	(a2)+,$24(a1)
0000BC18 12BC 0031                  		move.b	#$31,0(a1)
0000BC1C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BC22 101A                       		move.b	(a2)+,d0
0000BC24 4880                       		ext.w	d0
0000BC26 D068 000C                  		add.w	$C(a0),d0
0000BC2A 3340 000C                  		move.w	d0,$C(a1)
0000BC2E 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC36 337C 0300 0002             		move.w	#$300,2(a1)
0000BC3C 137C 0004 0001             		move.b	#4,1(a1)
0000BC42 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC48 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC4E 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC54 3342 0034                  		move.w	d2,$34(a1)
0000BC58 137C 0004 0018             		move.b	#4,$18(a1)
0000BC5E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC62 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC68 6600                       		bne.s	loc_B76A
0000BC6A 5341                       		subq.w	#1,d1
0000BC6C 1028 0028                  		move.b	$28(a0),d0
0000BC70 0240 00F0                  		andi.w	#$F0,d0
0000BC74 0C40 0020                  		cmpi.w	#$20,d0
0000BC78 679A                       		beq.s	Obj31_MakeStomper
0000BC7A 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC80 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC86 5241                       		addq.w	#1,d1
0000BC88                            
0000BC88                            loc_B76A:
0000BC88 2348 003C                  		move.l	a0,$3C(a1)
0000BC8C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC90                            
0000BC90 137C 0003 0018             		move.b	#3,$18(a1)
0000BC96                            
0000BC96                            Obj31_SetSize:
0000BC96 7000                       		moveq	#0,d0
0000BC98 1028 0028                  		move.b	$28(a0),d0
0000BC9C E648                       		lsr.w	#3,d0
0000BC9E 0200 000E                  		andi.b	#$E,d0
0000BCA2 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BCA6 115A 0019                  		move.b	(a2)+,$19(a0)
0000BCAA 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BCAE 6000                       		bra.s	loc_B798
0000BCB0                            ; ===========================================================================
0000BCB0 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BCB2 3009                       		dc.b $30, 9
0000BCB4 100A                       		dc.b $10, $A
0000BCB6                            ; ===========================================================================
0000BCB6                            
0000BCB6                            loc_B798:				; XREF: Obj31_Index
0000BCB6 6100 0000                  		bsr.w	Obj31_Types
0000BCBA 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BCC0 7200                       		moveq	#0,d1
0000BCC2 1228 0019                  		move.b	$19(a0),d1
0000BCC6 0641 000B                  		addi.w	#$B,d1
0000BCCA 343C 000C                  		move.w	#$C,d2
0000BCCE 363C 000D                  		move.w	#$D,d3
0000BCD2 3828 0008                  		move.w	8(a0),d4
0000BCD6 6100 0000                  		bsr.w	SolidObject
0000BCDA 0828 0003 0022             		btst	#3,$22(a0)
0000BCE0 6700                       		beq.s	Obj31_Display
0000BCE2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BCE8 6400                       		bcc.s	Obj31_Display
0000BCEA 2448                       		movea.l	a0,a2
0000BCEC 41F8 D000                  		lea	($FFFFD000).w,a0
0000BCF0 4EB9 0000 0000             		jsr	KillSonic
0000BCF6 204A                       		movea.l	a2,a0
0000BCF8                            
0000BCF8                            Obj31_Display:
0000BCF8 6100 0000                  		bsr.w	DisplaySprite
0000BCFC 6000 0000                  		bra.w	Obj31_ChkDel
0000BD00                            ; ===========================================================================
0000BD00                            
0000BD00                            loc_B7E2:				; XREF: Obj31_Index
0000BD00 117C 0080 0016             		move.b	#$80,$16(a0)
0000BD06 08E8 0004 0001             		bset	#4,1(a0)
0000BD0C 2268 003C                  		movea.l	$3C(a0),a1
0000BD10 1029 0032                  		move.b	$32(a1),d0
0000BD14 EA08                       		lsr.b	#5,d0
0000BD16 5600                       		addq.b	#3,d0
0000BD18 1140 001A                  		move.b	d0,$1A(a0)
0000BD1C                            
0000BD1C                            loc_B7FE:				; XREF: Obj31_Index
0000BD1C 2268 003C                  		movea.l	$3C(a0),a1
0000BD20 7000                       		moveq	#0,d0
0000BD22 1029 0032                  		move.b	$32(a1),d0
0000BD26 D068 0030                  		add.w	$30(a0),d0
0000BD2A 3140 000C                  		move.w	d0,$C(a0)
0000BD2E                            
0000BD2E                            Obj31_Display2:				; XREF: Obj31_Index
0000BD2E 6100 0000                  		bsr.w	DisplaySprite
0000BD32                            
0000BD32                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD32 3028 0008                  		move.w	8(a0),d0
0000BD36 0240 FF80                  		andi.w	#$FF80,d0
0000BD3A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD3E 0441 0080                  		subi.w	#$80,d1
0000BD42 0241 FF80                  		andi.w	#$FF80,d1
0000BD46 9041                       		sub.w	d1,d0
0000BD48 0C40 0280                  		cmpi.w	#$280,d0
0000BD4C 6200 0000                  		bhi.w	DeleteObject
0000BD50 4E75                       		rts	
0000BD52                            ; ===========================================================================
0000BD52                            
0000BD52                            Obj31_Types:				; XREF: loc_B798
0000BD52 1028 0028                  		move.b	$28(a0),d0
0000BD56 0240 000F                  		andi.w	#$F,d0
0000BD5A D040                       		add.w	d0,d0
0000BD5C 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD60 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD64                            ; ===========================================================================
0000BD64 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD66 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD68 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD6A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD6C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD6E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD70 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD72                            ; ===========================================================================
0000BD72                            
0000BD72                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD72 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD76 7000                       		moveq	#0,d0
0000BD78 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD7C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD80 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD82 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD86 6A00                       		bpl.s	loc_B872
0000BD88 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD8E 6700                       		beq.s	loc_B8A0
0000BD90                            
0000BD90                            loc_B872:
0000BD90 4A68 0032                  		tst.w	$32(a0)
0000BD94 6700                       		beq.s	loc_B8A0
0000BD96 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD9A 0200 000F                  		andi.b	#$F,d0
0000BD9E 6600                       		bne.s	loc_B892
0000BDA0 4A28 0001                  		tst.b	1(a0)
0000BDA4 6A00                       		bpl.s	loc_B892
0000BDA6 303C 00C7                  		move.w	#$C7,d0
0000BDAA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDB0                            
0000BDB0                            loc_B892:
0000BDB0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDB6 6400                       		bcc.s	Obj31_Restart
0000BDB8 317C 0000 0032             		move.w	#0,$32(a0)
0000BDBE                            
0000BDBE                            loc_B8A0:
0000BDBE 317C 0000 0012             		move.w	#0,$12(a0)
0000BDC4 6000                       		bra.s	Obj31_Restart
0000BDC6                            ; ===========================================================================
0000BDC6                            
0000BDC6                            loc_B8A8:				; XREF: Obj31_Type00
0000BDC6 3228 0034                  		move.w	$34(a0),d1
0000BDCA B268 0032                  		cmp.w	$32(a0),d1
0000BDCE 6700                       		beq.s	Obj31_Restart
0000BDD0 3028 0012                  		move.w	$12(a0),d0
0000BDD4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BDDA D168 0032                  		add.w	d0,$32(a0)
0000BDDE B268 0032                  		cmp.w	$32(a0),d1
0000BDE2 6200                       		bhi.s	Obj31_Restart
0000BDE4 3141 0032                  		move.w	d1,$32(a0)
0000BDE8 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BDEE 4A28 0001                  		tst.b	1(a0)
0000BDF2 6A00                       		bpl.s	Obj31_Restart
0000BDF4 303C 00BD                  		move.w	#$BD,d0
0000BDF8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDFE                            
0000BDFE                            Obj31_Restart:
0000BDFE 7000                       		moveq	#0,d0
0000BE00 1028 0032                  		move.b	$32(a0),d0
0000BE04 D068 0030                  		add.w	$30(a0),d0
0000BE08 3140 000C                  		move.w	d0,$C(a0)
0000BE0C 4E75                       		rts	
0000BE0E                            ; ===========================================================================
0000BE0E                            
0000BE0E                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BE0E 4A68 0036                  		tst.w	$36(a0)
0000BE12 6700                       		beq.s	loc_B938
0000BE14 4A68 0038                  		tst.w	$38(a0)
0000BE18 6700                       		beq.s	loc_B902
0000BE1A 5368 0038                  		subq.w	#1,$38(a0)
0000BE1E 6000                       		bra.s	loc_B97C
0000BE20                            ; ===========================================================================
0000BE20                            
0000BE20                            loc_B902:
0000BE20 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE24 0200 000F                  		andi.b	#$F,d0
0000BE28 6600                       		bne.s	loc_B91C
0000BE2A 4A28 0001                  		tst.b	1(a0)
0000BE2E 6A00                       		bpl.s	loc_B91C
0000BE30 303C 00C7                  		move.w	#$C7,d0
0000BE34 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE3A                            
0000BE3A                            loc_B91C:
0000BE3A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE40 6400                       		bcc.s	loc_B97C
0000BE42 317C 0000 0032             		move.w	#0,$32(a0)
0000BE48 317C 0000 0012             		move.w	#0,$12(a0)
0000BE4E 317C 0000 0036             		move.w	#0,$36(a0)
0000BE54 6000                       		bra.s	loc_B97C
0000BE56                            ; ===========================================================================
0000BE56                            
0000BE56                            loc_B938:				; XREF: Obj31_Type01
0000BE56 3228 0034                  		move.w	$34(a0),d1
0000BE5A B268 0032                  		cmp.w	$32(a0),d1
0000BE5E 6700                       		beq.s	loc_B97C
0000BE60 3028 0012                  		move.w	$12(a0),d0
0000BE64 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE6A D168 0032                  		add.w	d0,$32(a0)
0000BE6E B268 0032                  		cmp.w	$32(a0),d1
0000BE72 6200                       		bhi.s	loc_B97C
0000BE74 3141 0032                  		move.w	d1,$32(a0)
0000BE78 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE7E 317C 0001 0036             		move.w	#1,$36(a0)
0000BE84 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE8A 4A28 0001                  		tst.b	1(a0)
0000BE8E 6A00                       		bpl.s	loc_B97C
0000BE90 303C 00BD                  		move.w	#$BD,d0
0000BE94 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE9A                            
0000BE9A                            loc_B97C:
0000BE9A 6000 FF62                  		bra.w	Obj31_Restart
0000BE9E                            ; ===========================================================================
0000BE9E                            
0000BE9E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE9E 3038 D008                  		move.w	($FFFFD008).w,d0
0000BEA2 9068 0008                  		sub.w	8(a0),d0
0000BEA6 6400                       		bcc.s	loc_B98C
0000BEA8 4440                       		neg.w	d0
0000BEAA                            
0000BEAA                            loc_B98C:
0000BEAA 0C40 0090                  		cmpi.w	#$90,d0
0000BEAE 6400                       		bcc.s	loc_B996
0000BEB0 5228 0028                  		addq.b	#1,$28(a0)
0000BEB4                            
0000BEB4                            loc_B996:
0000BEB4 6000 FF48                  		bra.w	Obj31_Restart
0000BEB8                            ; ===========================================================================
0000BEB8                            ; ---------------------------------------------------------------------------
0000BEB8                            ; Object 45 - spiked metal block from beta version (MZ)
0000BEB8                            ; ---------------------------------------------------------------------------
0000BEB8                            
0000BEB8                            Obj45:					; XREF: Obj_Index
0000BEB8 7000                       		moveq	#0,d0
0000BEBA 1028 0024                  		move.b	$24(a0),d0
0000BEBE 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BEC2 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEC6                            ; ===========================================================================
0000BEC6 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BEC8 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BECA 0000                       		dc.w loc_BA8E-Obj45_Index
0000BECC 0000                       		dc.w Obj45_Display-Obj45_Index
0000BECE 0000                       		dc.w loc_BA7A-Obj45_Index
0000BED0                            
0000BED0 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BED3 04E4 01                    		dc.b	4, $E4,	  1
0000BED6 0834 03                    		dc.b	8, $34,	  3
0000BED9 0628 02                    		dc.b	6, $28,	  2
0000BEDC                            
0000BEDC 3800                       word_B9BE:	dc.w $3800
0000BEDE A000                       		dc.w -$6000
0000BEE0 5000                       		dc.w $5000
0000BEE2                            ; ===========================================================================
0000BEE2                            
0000BEE2                            Obj45_Main:				; XREF: Obj45_Index
0000BEE2 7000                       		moveq	#0,d0
0000BEE4 1028 0028                  		move.b	$28(a0),d0
0000BEE8 D040                       		add.w	d0,d0
0000BEEA 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BEEE 45F9 0000 BED0             		lea	(Obj45_Var).l,a2
0000BEF4 2248                       		movea.l	a0,a1
0000BEF6 7203                       		moveq	#3,d1
0000BEF8 6000                       		bra.s	Obj45_Load
0000BEFA                            ; ===========================================================================
0000BEFA                            
0000BEFA                            Obj45_Loop:
0000BEFA 6100 0000                  		bsr.w	SingleObjLoad2
0000BEFE 6600                       		bne.s	loc_BA52
0000BF00                            
0000BF00                            Obj45_Load:				; XREF: Obj45_Main
0000BF00 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF04 12BC 0045                  		move.b	#$45,0(a1)
0000BF08 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BF0E 101A                       		move.b	(a2)+,d0
0000BF10 4880                       		ext.w	d0
0000BF12 D068 0008                  		add.w	8(a0),d0
0000BF16 3340 0008                  		move.w	d0,8(a1)
0000BF1A 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BF22 337C 0300 0002             		move.w	#$300,2(a1)
0000BF28 137C 0004 0001             		move.b	#4,1(a1)
0000BF2E 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF34 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF3A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF40 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF46 3342 0034                  		move.w	d2,$34(a1)
0000BF4A 137C 0004 0018             		move.b	#4,$18(a1)
0000BF50 0C12 0001                  		cmpi.b	#1,(a2)
0000BF54 6600                       		bne.s	loc_BA40
0000BF56 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF5C                            
0000BF5C                            loc_BA40:
0000BF5C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF60 2348 003C                  		move.l	a0,$3C(a1)
0000BF64 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF68                            
0000BF68 137C 0003 0018             		move.b	#3,$18(a1)
0000BF6E                            
0000BF6E                            loc_BA52:
0000BF6E 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF74                            
0000BF74                            Obj45_Solid:				; XREF: Obj45_Index
0000BF74 3F28 0008                  		move.w	8(a0),-(sp)
0000BF78 6100 0000                  		bsr.w	Obj45_Move
0000BF7C 323C 0017                  		move.w	#$17,d1
0000BF80 343C 0020                  		move.w	#$20,d2
0000BF84 363C 0020                  		move.w	#$20,d3
0000BF88 381F                       		move.w	(sp)+,d4
0000BF8A 6100 0000                  		bsr.w	SolidObject
0000BF8E 6100 0000                  		bsr.w	DisplaySprite
0000BF92 6000 0000                  		bra.w	Obj45_ChkDel
0000BF96                            ; ===========================================================================
0000BF96                            
0000BF96                            loc_BA7A:				; XREF: Obj45_Index
0000BF96 2268 003C                  		movea.l	$3C(a0),a1
0000BF9A 1029 0032                  		move.b	$32(a1),d0
0000BF9E 0600 0010                  		addi.b	#$10,d0
0000BFA2 EA08                       		lsr.b	#5,d0
0000BFA4 5600                       		addq.b	#3,d0
0000BFA6 1140 001A                  		move.b	d0,$1A(a0)
0000BFAA                            
0000BFAA                            loc_BA8E:				; XREF: Obj45_Index
0000BFAA 2268 003C                  		movea.l	$3C(a0),a1
0000BFAE 7000                       		moveq	#0,d0
0000BFB0 1029 0032                  		move.b	$32(a1),d0
0000BFB4 4440                       		neg.w	d0
0000BFB6 D068 0030                  		add.w	$30(a0),d0
0000BFBA 3140 0008                  		move.w	d0,8(a0)
0000BFBE                            
0000BFBE                            Obj45_Display:				; XREF: Obj45_Index
0000BFBE 6100 0000                  		bsr.w	DisplaySprite
0000BFC2                            
0000BFC2                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BFC2 3028 003A                  		move.w	$3A(a0),d0
0000BFC6 0240 FF80                  		andi.w	#$FF80,d0
0000BFCA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFCE 0441 0080                  		subi.w	#$80,d1
0000BFD2 0241 FF80                  		andi.w	#$FF80,d1
0000BFD6 9041                       		sub.w	d1,d0
0000BFD8 0C40 0280                  		cmpi.w	#$280,d0
0000BFDC 6200 0000                  		bhi.w	DeleteObject
0000BFE0 4E75                       		rts	
0000BFE2                            
0000BFE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFE2                            
0000BFE2                            
0000BFE2                            Obj45_Move:				; XREF: Obj45_Solid
0000BFE2 7000                       		moveq	#0,d0
0000BFE4 1028 0028                  		move.b	$28(a0),d0
0000BFE8 D040                       		add.w	d0,d0
0000BFEA 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BFEE 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BFF2                            ; End of function Obj45_Move
0000BFF2                            
0000BFF2                            ; ===========================================================================
0000BFF2 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BFF4 0000                       		dc.w loc_BADA-off_BAD6
0000BFF6                            ; ===========================================================================
0000BFF6                            
0000BFF6                            loc_BADA:				; XREF: off_BAD6
0000BFF6 4A68 0036                  		tst.w	$36(a0)
0000BFFA 6700                       		beq.s	loc_BB08
0000BFFC 4A68 0038                  		tst.w	$38(a0)
0000C000 6700                       		beq.s	loc_BAEC
0000C002 5368 0038                  		subq.w	#1,$38(a0)
0000C006 6000                       		bra.s	loc_BB3C
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            loc_BAEC:
0000C008 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C00E 6400                       		bcc.s	loc_BB3C
0000C010 317C 0000 0032             		move.w	#0,$32(a0)
0000C016 317C 0000 0010             		move.w	#0,$10(a0)
0000C01C 317C 0000 0036             		move.w	#0,$36(a0)
0000C022 6000                       		bra.s	loc_BB3C
0000C024                            ; ===========================================================================
0000C024                            
0000C024                            loc_BB08:				; XREF: loc_BADA
0000C024 3228 0034                  		move.w	$34(a0),d1
0000C028 B268 0032                  		cmp.w	$32(a0),d1
0000C02C 6700                       		beq.s	loc_BB3C
0000C02E 3028 0010                  		move.w	$10(a0),d0
0000C032 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C038 D168 0032                  		add.w	d0,$32(a0)
0000C03C B268 0032                  		cmp.w	$32(a0),d1
0000C040 6200                       		bhi.s	loc_BB3C
0000C042 3141 0032                  		move.w	d1,$32(a0)
0000C046 317C 0000 0010             		move.w	#0,$10(a0)
0000C04C 317C 0001 0036             		move.w	#1,$36(a0)
0000C052 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C058                            
0000C058                            loc_BB3C:
0000C058 7000                       		moveq	#0,d0
0000C05A 1028 0032                  		move.b	$32(a0),d0
0000C05E 4440                       		neg.w	d0
0000C060 D068 0030                  		add.w	$30(a0),d0
0000C064 3140 0008                  		move.w	d0,8(a0)
0000C068 4E75                       		rts	
0000C06A                            ; ===========================================================================
0000C06A                            ; ---------------------------------------------------------------------------
0000C06A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C06A                            ; ---------------------------------------------------------------------------
0000C06A                            Map_obj31:
0000C06A                            	include "_maps\obj31.asm"
0000C06A                            ; ---------------------------------------------------------------------------
0000C06A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C06A                            ; ---------------------------------------------------------------------------
0000C06A 0000                       		dc.w byte_BB64-Map_obj31
0000C06C 0000                       		dc.w byte_BB7E-Map_obj31
0000C06E 0000                       		dc.w byte_BB98-Map_obj31
0000C070 0000                       		dc.w byte_BB9E-Map_obj31
0000C072 0000                       		dc.w byte_BBA9-Map_obj31
0000C074 0000                       		dc.w byte_BBBE-Map_obj31
0000C076 0000                       		dc.w byte_BBDD-Map_obj31
0000C078 0000                       		dc.w byte_BC06-Map_obj31
0000C07A 0000                       		dc.w byte_BC06-Map_obj31
0000C07C 0000                       		dc.w byte_BC39-Map_obj31
0000C07E 0000                       		dc.w byte_BC53-Map_obj31
0000C080 05                         byte_BB64:	dc.b 5
0000C081 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C086 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C08B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C090 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C095 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C09A 05                         byte_BB7E:	dc.b 5
0000C09B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C0A0 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C0A5 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C0AA F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C0AF F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C0B4 01                         byte_BB98:	dc.b 1
0000C0B5 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C0BA 02                         byte_BB9E:	dc.b 2
0000C0BB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0C0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0C5 04                         byte_BBA9:	dc.b 4
0000C0C6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0CB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0D0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0D5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0DA 06                         byte_BBBE:	dc.b 6
0000C0DB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0E0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0E5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0EA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0EF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0F9 08                         byte_BBDD:	dc.b 8
0000C0FA A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0FF B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C104 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C109 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C10E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C113 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C118 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C11D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C122 0A                         byte_BC06:	dc.b $A
0000C123 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C128 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C12D A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C132 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C137 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C13C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C141 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C146 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C14B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C150 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C155 05                         byte_BC39:	dc.b 5
0000C156 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C15B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C160 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C165 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C16A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C16F 01                         byte_BC53:	dc.b 1
0000C170 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C176 00                         		even
0000C176 00                         		even
0000C176                            
0000C176                            ; ---------------------------------------------------------------------------
0000C176                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C176                            ; ---------------------------------------------------------------------------
0000C176                            Map_obj45:
0000C176                            	include "_maps\obj45.asm"
0000C176                            ; ---------------------------------------------------------------------------
0000C176                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C176                            ; ---------------------------------------------------------------------------
0000C176 0000                       		dc.w byte_BC6C-Map_obj45
0000C178 0000                       		dc.w byte_BC7C-Map_obj45
0000C17A 0000                       		dc.w byte_BC8C-Map_obj45
0000C17C 0000                       		dc.w byte_BC92-Map_obj45
0000C17E 0000                       		dc.w byte_BC9D-Map_obj45
0000C180 0000                       		dc.w byte_BCB2-Map_obj45
0000C182 0000                       		dc.w byte_BCD1-Map_obj45
0000C184 0000                       		dc.w byte_BCFA-Map_obj45
0000C186 0000                       		dc.w byte_BCFA-Map_obj45
0000C188 03                         byte_BC6C:	dc.b 3
0000C189 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C18E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C193 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C198 03                         byte_BC7C:	dc.b 3
0000C199 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C19E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C1A3 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C1A8 01                         byte_BC8C:	dc.b 1
0000C1A9 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C1AE 02                         byte_BC92:	dc.b 2
0000C1AF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1B4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1B9 04                         byte_BC9D:	dc.b 4
0000C1BA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1BF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1C4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1C9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1CE 06                         byte_BCB2:	dc.b 6
0000C1CF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1D4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1D9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1DE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1E3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1E8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1ED 08                         byte_BCD1:	dc.b 8
0000C1EE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1F3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1F8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1FD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C202 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C207 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C20C F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C211 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C216 08                         byte_BCFA:	dc.b 8
0000C217 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C21C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C221 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C226 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C22B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C230 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C235 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C23A F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C23F F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C244 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C24A 00                         		even
0000C24A 00                         		even
0000C24A                            
0000C24A                            ; ===========================================================================
0000C24A                            ; ---------------------------------------------------------------------------
0000C24A                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C24A                            ; ---------------------------------------------------------------------------
0000C24A                            
0000C24A                            Obj32:					; XREF: Obj_Index
0000C24A 7000                       		moveq	#0,d0
0000C24C 1028 0024                  		move.b	$24(a0),d0
0000C250 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C254 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C258                            ; ===========================================================================
0000C258 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C25A 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C25C                            ; ===========================================================================
0000C25C                            
0000C25C                            Obj32_Main:				; XREF: Obj32_Index
0000C25C 5428 0024                  		addq.b	#2,$24(a0)
0000C260 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C268 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C26E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C274 6700                       		beq.s	loc_BD60
0000C276 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C27C                            
0000C27C                            loc_BD60:
0000C27C 117C 0004 0001             		move.b	#4,1(a0)
0000C282 117C 0010 0019             		move.b	#$10,$19(a0)
0000C288 117C 0004 0018             		move.b	#4,$18(a0)
0000C28E 5668 000C                  		addq.w	#3,$C(a0)
0000C292                            
0000C292                            Obj32_Pressed:				; XREF: Obj32_Index
0000C292 4A28 0001                  		tst.b	1(a0)
0000C296 6A00                       		bpl.s	Obj32_Display
0000C298 323C 001B                  		move.w	#$1B,d1
0000C29C 343C 0005                  		move.w	#5,d2
0000C2A0 363C 0005                  		move.w	#5,d3
0000C2A4 3828 0008                  		move.w	8(a0),d4
0000C2A8 6100 0000                  		bsr.w	SolidObject
0000C2AC 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C2B2 1028 0028                  		move.b	$28(a0),d0
0000C2B6 0240 000F                  		andi.w	#$F,d0
0000C2BA 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C2BE 47F3 0000                  		lea	(a3,d0.w),a3
0000C2C2 7600                       		moveq	#0,d3
0000C2C4 0828 0006 0028             		btst	#6,$28(a0)
0000C2CA 6700                       		beq.s	loc_BDB2
0000C2CC 7607                       		moveq	#7,d3
0000C2CE                            
0000C2CE                            loc_BDB2:
0000C2CE 4A28 0028                  		tst.b	$28(a0)
0000C2D2 6A00                       		bpl.s	loc_BDBE
0000C2D4 6100 0000                  		bsr.w	Obj32_MZBlock
0000C2D8 6600                       		bne.s	loc_BDC8
0000C2DA                            
0000C2DA                            loc_BDBE:
0000C2DA 4A28 0025                  		tst.b	$25(a0)
0000C2DE 6600                       		bne.s	loc_BDC8
0000C2E0 0793                       		bclr	d3,(a3)
0000C2E2 6000                       		bra.s	loc_BDDE
0000C2E4                            ; ===========================================================================
0000C2E4                            
0000C2E4                            loc_BDC8:
0000C2E4 4A13                       		tst.b	(a3)
0000C2E6 6600                       		bne.s	loc_BDD6
0000C2E8 303C 00CD                  		move.w	#$CD,d0
0000C2EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C2F2                            
0000C2F2                            loc_BDD6:
0000C2F2 07D3                       		bset	d3,(a3)
0000C2F4 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2FA                            
0000C2FA                            loc_BDDE:
0000C2FA 0828 0005 0028             		btst	#5,$28(a0)
0000C300 6700                       		beq.s	Obj32_Display
0000C302 5328 001E                  		subq.b	#1,$1E(a0)
0000C306 6A00                       		bpl.s	Obj32_Display
0000C308 117C 0007 001E             		move.b	#7,$1E(a0)
0000C30E 0868 0001 001A             		bchg	#1,$1A(a0)
0000C314                            
0000C314                            Obj32_Display:
0000C314 6100 0000                  		bsr.w	DisplaySprite
0000C318 3028 0008                  		move.w	8(a0),d0
0000C31C 0240 FF80                  		andi.w	#$FF80,d0
0000C320 3238 F700                  		move.w	($FFFFF700).w,d1
0000C324 0441 0080                  		subi.w	#$80,d1
0000C328 0241 FF80                  		andi.w	#$FF80,d1
0000C32C 9041                       		sub.w	d1,d0
0000C32E 0C40 0280                  		cmpi.w	#$280,d0
0000C332 6200 0000                  		bhi.w	Obj32_Delete
0000C336 4E75                       		rts	
0000C338                            ; ===========================================================================
0000C338                            
0000C338                            Obj32_Delete:
0000C338 6100 0000                  		bsr.w	DeleteObject
0000C33C 4E75                       		rts	
0000C33E                            
0000C33E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C33E                            
0000C33E                            
0000C33E                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C33E 3F03                       		move.w	d3,-(sp)
0000C340 3428 0008                  		move.w	8(a0),d2
0000C344 3628 000C                  		move.w	$C(a0),d3
0000C348 0442 0010                  		subi.w	#$10,d2
0000C34C 5143                       		subq.w	#8,d3
0000C34E 383C 0020                  		move.w	#$20,d4
0000C352 3A3C 0010                  		move.w	#$10,d5
0000C356 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C35A 3C3C 005F                  		move.w	#$5F,d6
0000C35E                            
0000C35E                            Obj32_MZLoop:
0000C35E 4A29 0001                  		tst.b	1(a1)
0000C362 6A00                       		bpl.s	loc_BE4E
0000C364 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C368 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C36A                            
0000C36A                            loc_BE4E:
0000C36A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C36E 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C372                            
0000C372 361F                       		move.w	(sp)+,d3
0000C374 7000                       		moveq	#0,d0
0000C376                            
0000C376                            locret_BE5A:
0000C376 4E75                       		rts	
0000C378                            ; ===========================================================================
0000C378 1010                       Obj32_MZData:	dc.b $10, $10
0000C37A                            ; ===========================================================================
0000C37A                            
0000C37A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C37A 7001                       		moveq	#1,d0
0000C37C 0240 003F                  		andi.w	#$3F,d0
0000C380 D040                       		add.w	d0,d0
0000C382 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C386 121A                       		move.b	(a2)+,d1
0000C388 4881                       		ext.w	d1
0000C38A 3029 0008                  		move.w	8(a1),d0
0000C38E 9041                       		sub.w	d1,d0
0000C390 9042                       		sub.w	d2,d0
0000C392 6400                       		bcc.s	loc_BE80
0000C394 D241                       		add.w	d1,d1
0000C396 D041                       		add.w	d1,d0
0000C398 6500                       		bcs.s	loc_BE84
0000C39A 60CE                       		bra.s	loc_BE4E
0000C39C                            ; ===========================================================================
0000C39C                            
0000C39C                            loc_BE80:
0000C39C B044                       		cmp.w	d4,d0
0000C39E 62CA                       		bhi.s	loc_BE4E
0000C3A0                            
0000C3A0                            loc_BE84:
0000C3A0 121A                       		move.b	(a2)+,d1
0000C3A2 4881                       		ext.w	d1
0000C3A4 3029 000C                  		move.w	$C(a1),d0
0000C3A8 9041                       		sub.w	d1,d0
0000C3AA 9043                       		sub.w	d3,d0
0000C3AC 6400                       		bcc.s	loc_BE9A
0000C3AE D241                       		add.w	d1,d1
0000C3B0 D041                       		add.w	d1,d0
0000C3B2 6500                       		bcs.s	loc_BE9E
0000C3B4 60B4                       		bra.s	loc_BE4E
0000C3B6                            ; ===========================================================================
0000C3B6                            
0000C3B6                            loc_BE9A:
0000C3B6 B045                       		cmp.w	d5,d0
0000C3B8 62B0                       		bhi.s	loc_BE4E
0000C3BA                            
0000C3BA                            loc_BE9E:
0000C3BA 361F                       		move.w	(sp)+,d3
0000C3BC 7001                       		moveq	#1,d0
0000C3BE 4E75                       		rts	
0000C3C0                            ; End of function Obj32_MZBlock
0000C3C0                            
0000C3C0                            ; ===========================================================================
0000C3C0                            ; ---------------------------------------------------------------------------
0000C3C0                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3C0                            ; ---------------------------------------------------------------------------
0000C3C0                            Map_obj32:
0000C3C0                            	include "_maps\obj32.asm"
0000C3C0                            ; ---------------------------------------------------------------------------
0000C3C0                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3C0                            ; ---------------------------------------------------------------------------
0000C3C0 0000                       		dc.w byte_BEAC-Map_obj32
0000C3C2 0000                       		dc.w byte_BEB7-Map_obj32
0000C3C4 0000                       		dc.w byte_BEC2-Map_obj32
0000C3C6 0000                       		dc.w byte_BEB7-Map_obj32
0000C3C8 02                         byte_BEAC:	dc.b 2
0000C3C9 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C3CE F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C3D3 02                         byte_BEB7:	dc.b 2
0000C3D4 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C3D9 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C3DE 02                         byte_BEC2:	dc.b 2
0000C3DF F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C3E4 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C3E9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C3EE                            		even
0000C3EE                            		even
0000C3EE                            
0000C3EE                            ; ===========================================================================
0000C3EE                            ; ---------------------------------------------------------------------------
0000C3EE                            ; Object 33 - pushable blocks (MZ, LZ)
0000C3EE                            ; ---------------------------------------------------------------------------
0000C3EE                            
0000C3EE                            Obj33:					; XREF: Obj_Index
0000C3EE 7000                       		moveq	#0,d0
0000C3F0 1028 0024                  		move.b	$24(a0),d0
0000C3F4 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C3F8 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3FC                            ; ===========================================================================
0000C3FC 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3FE 0000                       		dc.w loc_BF6E-Obj33_Index
0000C400 0000                       		dc.w loc_C02C-Obj33_Index
0000C402                            
0000C402 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C404 4001                       		dc.b $40, 1
0000C406                            ; ===========================================================================
0000C406                            
0000C406                            Obj33_Main:				; XREF: Obj33_Index
0000C406 5428 0024                  		addq.b	#2,$24(a0)
0000C40A 117C 000F 0016             		move.b	#$F,$16(a0)
0000C410 117C 000F 0017             		move.b	#$F,$17(a0)
0000C416 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C41E 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C424 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C42A 6600                       		bne.s	loc_BF16
0000C42C 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C432                            
0000C432                            loc_BF16:
0000C432 117C 0004 0001             		move.b	#4,1(a0)
0000C438 117C 0003 0018             		move.b	#3,$18(a0)
0000C43E 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C444 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C44A 7000                       		moveq	#0,d0
0000C44C 1028 0028                  		move.b	$28(a0),d0
0000C450 D040                       		add.w	d0,d0
0000C452 0240 000E                  		andi.w	#$E,d0
0000C456 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C45A 115A 0019                  		move.b	(a2)+,$19(a0)
0000C45E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C462 4A28 0028                  		tst.b	$28(a0)
0000C466 6700                       		beq.s	Obj33_ChkGone
0000C468 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C46E                            
0000C46E                            Obj33_ChkGone:
0000C46E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C472 7000                       		moveq	#0,d0
0000C474 1028 0023                  		move.b	$23(a0),d0
0000C478 6700                       		beq.s	loc_BF6E
0000C47A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C480 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C486 6600 0000                  		bne.w	DeleteObject
0000C48A                            
0000C48A                            loc_BF6E:				; XREF: Obj33_Index
0000C48A 4A28 0032                  		tst.b	$32(a0)
0000C48E 6600 0000                  		bne.w	loc_C046
0000C492 7200                       		moveq	#0,d1
0000C494 1228 0019                  		move.b	$19(a0),d1
0000C498 0641 000B                  		addi.w	#$B,d1
0000C49C 343C 0010                  		move.w	#$10,d2
0000C4A0 363C 0011                  		move.w	#$11,d3
0000C4A4 3828 0008                  		move.w	8(a0),d4
0000C4A8 6100 0000                  		bsr.w	loc_C186
0000C4AC 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C4B2 6600                       		bne.s	loc_BFC6	; if not, branch
0000C4B4 08A8 0007 0028             		bclr	#7,$28(a0)
0000C4BA 3028 0008                  		move.w	8(a0),d0
0000C4BE 0C40 0A20                  		cmpi.w	#$A20,d0
0000C4C2 6500                       		bcs.s	loc_BFC6
0000C4C4 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C4C8 6400                       		bcc.s	loc_BFC6
0000C4CA 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C4CE 0440 001C                  		subi.w	#$1C,d0
0000C4D2 3140 000C                  		move.w	d0,$C(a0)
0000C4D6 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C4DC 08E8 0007 0028             		bset	#7,$28(a0)
0000C4E2                            
0000C4E2                            loc_BFC6:
0000C4E2 3028 0008                  		move.w	8(a0),d0
0000C4E6 0240 FF80                  		andi.w	#$FF80,d0
0000C4EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4EE 0441 0080                  		subi.w	#$80,d1
0000C4F2 0241 FF80                  		andi.w	#$FF80,d1
0000C4F6 9041                       		sub.w	d1,d0
0000C4F8 0C40 0280                  		cmpi.w	#$280,d0
0000C4FC 6200                       		bhi.s	loc_BFE6
0000C4FE 6000 0000                  		bra.w	DisplaySprite
0000C502                            ; ===========================================================================
0000C502                            
0000C502                            loc_BFE6:
0000C502 3028 0034                  		move.w	$34(a0),d0
0000C506 0240 FF80                  		andi.w	#$FF80,d0
0000C50A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C50E 0441 0080                  		subi.w	#$80,d1
0000C512 0241 FF80                  		andi.w	#$FF80,d1
0000C516 9041                       		sub.w	d1,d0
0000C518 0C40 0280                  		cmpi.w	#$280,d0
0000C51C 6200                       		bhi.s	loc_C016
0000C51E 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C524 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C52A 117C 0004 0024             		move.b	#4,$24(a0)
0000C530 6000                       		bra.s	loc_C02C
0000C532                            ; ===========================================================================
0000C532                            
0000C532                            loc_C016:
0000C532 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C536 7000                       		moveq	#0,d0
0000C538 1028 0023                  		move.b	$23(a0),d0
0000C53C 6700                       		beq.s	loc_C028
0000C53E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C544                            
0000C544                            loc_C028:
0000C544 6000 0000                  		bra.w	DeleteObject
0000C548                            ; ===========================================================================
0000C548                            
0000C548                            loc_C02C:				; XREF: Obj33_Index
0000C548 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C54C 6700                       		beq.s	locret_C044
0000C54E 117C 0002 0024             		move.b	#2,$24(a0)
0000C554 4228 0032                  		clr.b	$32(a0)
0000C558 4268 0010                  		clr.w	$10(a0)
0000C55C 4268 0012                  		clr.w	$12(a0)
0000C560                            
0000C560                            locret_C044:
0000C560 4E75                       		rts	
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            loc_C046:				; XREF: loc_BF6E
0000C562 3F28 0008                  		move.w	8(a0),-(sp)
0000C566 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C56C 6400                       		bcc.s	loc_C056
0000C56E 6100 0000                  		bsr.w	SpeedToPos
0000C572                            
0000C572                            loc_C056:
0000C572 0828 0001 0022             		btst	#1,$22(a0)
0000C578 6700                       		beq.s	loc_C0A0
0000C57A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C580 4EB9 0000 0000             		jsr	ObjHitFloor
0000C586 4A41                       		tst.w	d1
0000C588 6A00 0000                  		bpl.w	loc_C09E
0000C58C D368 000C                  		add.w	d1,$C(a0)
0000C590 4268 0012                  		clr.w	$12(a0)
0000C594 08A8 0001 0022             		bclr	#1,$22(a0)
0000C59A 3011                       		move.w	(a1),d0
0000C59C 0240 03FF                  		andi.w	#$3FF,d0
0000C5A0 0C40 016A                  		cmpi.w	#$16A,d0
0000C5A4 6500                       		bcs.s	loc_C09E
0000C5A6 3028 0030                  		move.w	$30(a0),d0
0000C5AA E640                       		asr.w	#3,d0
0000C5AC 3140 0010                  		move.w	d0,$10(a0)
0000C5B0 117C 0001 0032             		move.b	#1,$32(a0)
0000C5B6 4268 000E                  		clr.w	$E(a0)
0000C5BA                            
0000C5BA                            loc_C09E:
0000C5BA 6000                       		bra.s	loc_C0E6
0000C5BC                            ; ===========================================================================
0000C5BC                            
0000C5BC                            loc_C0A0:
0000C5BC 4A68 0010                  		tst.w	$10(a0)
0000C5C0 6700 0000                  		beq.w	loc_C0D6
0000C5C4 6B00                       		bmi.s	loc_C0BC
0000C5C6 7600                       		moveq	#0,d3
0000C5C8 1628 0019                  		move.b	$19(a0),d3
0000C5CC 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C5D2 4A41                       		tst.w	d1		; has block touched a wall?
0000C5D4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5D6 6000                       		bra.s	loc_C0E6
0000C5D8                            ; ===========================================================================
0000C5D8                            
0000C5D8                            loc_C0BC:
0000C5D8 7600                       		moveq	#0,d3
0000C5DA 1628 0019                  		move.b	$19(a0),d3
0000C5DE 4643                       		not.w	d3
0000C5E0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C5E6 4A41                       		tst.w	d1		; has block touched a wall?
0000C5E8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5EA 6000                       		bra.s	loc_C0E6
0000C5EC                            ; ===========================================================================
0000C5EC                            
0000C5EC                            Obj33_StopPush:
0000C5EC 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C5F0 6000                       		bra.s	loc_C0E6
0000C5F2                            ; ===========================================================================
0000C5F2                            
0000C5F2                            loc_C0D6:
0000C5F2 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5FA 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C600 6400                       		bcc.s	loc_C104
0000C602                            
0000C602                            loc_C0E6:
0000C602 7200                       		moveq	#0,d1
0000C604 1228 0019                  		move.b	$19(a0),d1
0000C608 0641 000B                  		addi.w	#$B,d1
0000C60C 343C 0010                  		move.w	#$10,d2
0000C610 363C 0011                  		move.w	#$11,d3
0000C614 381F                       		move.w	(sp)+,d4
0000C616 6100 0000                  		bsr.w	loc_C186
0000C61A 6100                       		bsr.s	Obj33_ChkLava
0000C61C 6000 FEC4                  		bra.w	loc_BFC6
0000C620                            ; ===========================================================================
0000C620                            
0000C620                            loc_C104:
0000C620 381F                       		move.w	(sp)+,d4
0000C622 43F8 D000                  		lea	($FFFFD000).w,a1
0000C626 08A9 0003 0022             		bclr	#3,$22(a1)
0000C62C 08A8 0003 0022             		bclr	#3,$22(a0)
0000C632 6000 FECE                  		bra.w	loc_BFE6
0000C636                            ; ===========================================================================
0000C636                            
0000C636                            Obj33_ChkLava:
0000C636 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C63C 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C63E 343C FFE0                  		move.w	#-$20,d2
0000C642 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C648 6700                       		beq.s	Obj33_LoadLava
0000C64A 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C650 6700                       		beq.s	Obj33_LoadLava
0000C652 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C658 6700                       		beq.s	Obj33_LoadLava
0000C65A 4E75                       		rts	
0000C65C                            ; ===========================================================================
0000C65C                            
0000C65C                            Obj33_ChkLava2:
0000C65C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C662 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C664 343C 0020                  		move.w	#$20,d2
0000C668 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C66E 6700                       		beq.s	Obj33_LoadLava
0000C670 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C676 6700                       		beq.s	Obj33_LoadLava
0000C678                            
0000C678                            Obj33_NoLava:
0000C678 4E75                       		rts	
0000C67A                            ; ===========================================================================
0000C67A                            
0000C67A                            Obj33_LoadLava:
0000C67A 6100 0000                  		bsr.w	SingleObjLoad
0000C67E 6600                       		bne.s	locret_C184
0000C680 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C684 3368 0008 0008             		move.w	8(a0),8(a1)
0000C68A D569 0008                  		add.w	d2,8(a1)
0000C68E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C694 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C69A 2348 003C                  		move.l	a0,$3C(a1)
0000C69E                            
0000C69E                            locret_C184:
0000C69E 4E75                       		rts	
0000C6A0                            ; ===========================================================================
0000C6A0                            
0000C6A0                            loc_C186:				; XREF: loc_BF6E
0000C6A0 1028 0025                  		move.b	$25(a0),d0
0000C6A4 6700 0000                  		beq.w	loc_C218
0000C6A8 5500                       		subq.b	#2,d0
0000C6AA 6600                       		bne.s	loc_C1AA
0000C6AC 6100 B3C4                  		bsr.w	ExitPlatform
0000C6B0 0829 0003 0022             		btst	#3,$22(a1)
0000C6B6 6600                       		bne.s	loc_C1A4
0000C6B8 4228 0025                  		clr.b	$25(a0)
0000C6BC 4E75                       		rts	
0000C6BE                            ; ===========================================================================
0000C6BE                            
0000C6BE                            loc_C1A4:
0000C6BE 3404                       		move.w	d4,d2
0000C6C0 6000 B90E                  		bra.w	MvSonicOnPtfm
0000C6C4                            ; ===========================================================================
0000C6C4                            
0000C6C4                            loc_C1AA:
0000C6C4 5500                       		subq.b	#2,d0
0000C6C6 6600                       		bne.s	loc_C1F2
0000C6C8 6100 0000                  		bsr.w	SpeedToPos
0000C6CC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C6D2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C6D8 4A41                       		tst.w	d1
0000C6DA 6A00 0000                  		bpl.w	locret_C1F0
0000C6DE D368 000C                  		add.w	d1,$C(a0)
0000C6E2 4268 0012                  		clr.w	$12(a0)
0000C6E6 4228 0025                  		clr.b	$25(a0)
0000C6EA 3011                       		move.w	(a1),d0
0000C6EC 0240 03FF                  		andi.w	#$3FF,d0
0000C6F0 0C40 016A                  		cmpi.w	#$16A,d0
0000C6F4 6500                       		bcs.s	locret_C1F0
0000C6F6 3028 0030                  		move.w	$30(a0),d0
0000C6FA E640                       		asr.w	#3,d0
0000C6FC 3140 0010                  		move.w	d0,$10(a0)
0000C700 117C 0001 0032             		move.b	#1,$32(a0)
0000C706 4268 000E                  		clr.w	$E(a0)
0000C70A                            
0000C70A                            locret_C1F0:
0000C70A 4E75                       		rts	
0000C70C                            ; ===========================================================================
0000C70C                            
0000C70C                            loc_C1F2:
0000C70C 6100 0000                  		bsr.w	SpeedToPos
0000C710 3028 0008                  		move.w	8(a0),d0
0000C714 0240 000C                  		andi.w	#$C,d0
0000C718 6600 0000                  		bne.w	locret_C2E4
0000C71C 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C722 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C728 4268 0010                  		clr.w	$10(a0)
0000C72C 5528 0025                  		subq.b	#2,$25(a0)
0000C730 4E75                       		rts	
0000C732                            ; ===========================================================================
0000C732                            
0000C732                            loc_C218:
0000C732 6100 0000                  		bsr.w	loc_FAC8
0000C736 4A44                       		tst.w	d4
0000C738 6700 0000                  		beq.w	locret_C2E4
0000C73C 6B00 0000                  		bmi.w	locret_C2E4
0000C740 4A28 0032                  		tst.b	$32(a0)
0000C744 6700                       		beq.s	loc_C230
0000C746 6000 0000                  		bra.w	locret_C2E4
0000C74A                            ; ===========================================================================
0000C74A                            
0000C74A                            loc_C230:
0000C74A 4A40                       		tst.w	d0
0000C74C 6700 0000                  		beq.w	locret_C2E4
0000C750 6B00                       		bmi.s	loc_C268
0000C752 0829 0000 0022             		btst	#0,$22(a1)
0000C758 6600 0000                  		bne.w	locret_C2E4
0000C75C 3F00                       		move.w	d0,-(sp)
0000C75E 7600                       		moveq	#0,d3
0000C760 1628 0019                  		move.b	$19(a0),d3
0000C764 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C76A 301F                       		move.w	(sp)+,d0
0000C76C 4A41                       		tst.w	d1
0000C76E 6B00 0000                  		bmi.w	locret_C2E4
0000C772 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C77A 7001                       		moveq	#1,d0
0000C77C 323C 0040                  		move.w	#$40,d1
0000C780 6000                       		bra.s	loc_C294
0000C782                            ; ===========================================================================
0000C782                            
0000C782                            loc_C268:
0000C782 0829 0000 0022             		btst	#0,$22(a1)
0000C788 6700                       		beq.s	locret_C2E4
0000C78A 3F00                       		move.w	d0,-(sp)
0000C78C 7600                       		moveq	#0,d3
0000C78E 1628 0019                  		move.b	$19(a0),d3
0000C792 4643                       		not.w	d3
0000C794 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C79A 301F                       		move.w	(sp)+,d0
0000C79C 4A41                       		tst.w	d1
0000C79E 6B00                       		bmi.s	locret_C2E4
0000C7A0 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C7A8 70FF                       		moveq	#-1,d0
0000C7AA 323C FFC0                  		move.w	#-$40,d1
0000C7AE                            
0000C7AE                            loc_C294:
0000C7AE 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7B2 D169 0008                  		add.w	d0,8(a1)
0000C7B6 3341 0014                  		move.w	d1,$14(a1)
0000C7BA 337C 0000 0010             		move.w	#0,$10(a1)
0000C7C0 3F00                       		move.w	d0,-(sp)
0000C7C2 303C 00A7                  		move.w	#$A7,d0
0000C7C6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C7CC 301F                       		move.w	(sp)+,d0
0000C7CE 4A28 0028                  		tst.b	$28(a0)
0000C7D2 6B00                       		bmi.s	locret_C2E4
0000C7D4 3F00                       		move.w	d0,-(sp)
0000C7D6 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7DC 301F                       		move.w	(sp)+,d0
0000C7DE 0C41 0004                  		cmpi.w	#4,d1
0000C7E2 6F00                       		ble.s	loc_C2E0
0000C7E4 317C 0400 0010             		move.w	#$400,$10(a0)
0000C7EA 4A40                       		tst.w	d0
0000C7EC 6A00                       		bpl.s	loc_C2D8
0000C7EE 4468 0010                  		neg.w	$10(a0)
0000C7F2                            
0000C7F2                            loc_C2D8:
0000C7F2 117C 0006 0025             		move.b	#6,$25(a0)
0000C7F8 6000                       		bra.s	locret_C2E4
0000C7FA                            ; ===========================================================================
0000C7FA                            
0000C7FA                            loc_C2E0:
0000C7FA D368 000C                  		add.w	d1,$C(a0)
0000C7FE                            
0000C7FE                            locret_C2E4:
0000C7FE 4E75                       		rts	
0000C800                            ; ===========================================================================
0000C800                            ; ---------------------------------------------------------------------------
0000C800                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C800                            ; ---------------------------------------------------------------------------
0000C800                            Map_obj33:
0000C800                            	include "_maps\obj33.asm"
0000C800                            ; ---------------------------------------------------------------------------
0000C800                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C800                            ; ---------------------------------------------------------------------------
0000C800 0000                       		dc.w byte_C2EA-Map_obj33
0000C802 0000                       		dc.w byte_C2F0-Map_obj33
0000C804 01                         byte_C2EA:	dc.b 1
0000C805 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C80A 04                         byte_C2F0:	dc.b 4
0000C80B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C810 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C815 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C81A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C820 00                         		even
0000C820 00                         		even
0000C820                            
0000C820                            ; ===========================================================================
0000C820                            ; ---------------------------------------------------------------------------
0000C820                            ; Object 34 - zone title cards
0000C820                            ; ---------------------------------------------------------------------------
0000C820                            
0000C820                            Obj34:					; XREF: Obj_Index
0000C820 7000                       		moveq	#0,d0
0000C822 1028 0024                  		move.b	$24(a0),d0
0000C826 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C82A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C82E                            ; ===========================================================================
0000C82E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C830 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C832 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C834 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C836                            ; ===========================================================================
0000C836                            
0000C836                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C836 2248                       		movea.l	a0,a1
0000C838 7000                       		moveq	#0,d0
0000C83A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C83E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C844 6600                       		bne.s	Obj34_CheckFZ
0000C846 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C848                            
0000C848                            Obj34_CheckFZ:
0000C848 3400                       		move.w	d0,d2
0000C84A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C850 6600                       		bne.s	Obj34_LoadConfig
0000C852 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C854 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C856                            
0000C856                            Obj34_LoadConfig:
0000C856 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C85C E948                       		lsl.w	#4,d0
0000C85E D6C0                       		adda.w	d0,a3
0000C860 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C866 7203                       		moveq	#3,d1
0000C868                            
0000C868                            Obj34_Loop:
0000C868 12BC 0034                  		move.b	#$34,0(a1)
0000C86C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C870 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C874 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C878 335A 000A                  		move.w	(a2)+,$A(a1)
0000C87C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C880 101A                       		move.b	(a2)+,d0
0000C882 6600                       		bne.s	Obj34_ActNumber
0000C884 1002                       		move.b	d2,d0
0000C886                            
0000C886                            Obj34_ActNumber:
0000C886 0C00 0007                  		cmpi.b	#7,d0
0000C88A 6600                       		bne.s	Obj34_MakeSprite
0000C88C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C890 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C896 6600                       		bne.s	Obj34_MakeSprite
0000C898 5300                       		subq.b	#1,d0
0000C89A                            
0000C89A                            Obj34_MakeSprite:
0000C89A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C89E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C8A6 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8AC 137C 0078 0019             		move.b	#$78,$19(a1)
0000C8B2 137C 0000 0001             		move.b	#0,1(a1)
0000C8B8 137C 0000 0018             		move.b	#0,$18(a1)
0000C8BE 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8C4 43E9 0040                  		lea	$40(a1),a1	; next object
0000C8C8 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C8CC                            
0000C8CC                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C8CC 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8CE 3028 0030                  		move.w	$30(a0),d0
0000C8D2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C8D6 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C8D8 6C00                       		bge.s	Obj34_Move
0000C8DA 4441                       		neg.w	d1
0000C8DC                            
0000C8DC                            Obj34_Move:
0000C8DC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8E0                            
0000C8E0                            loc_C3C8:
0000C8E0 3028 0008                  		move.w	8(a0),d0
0000C8E4 6B00                       		bmi.s	locret_C3D8
0000C8E6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8EA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C8EC 6000 0000                  		bra.w	DisplaySprite
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            locret_C3D8:
0000C8F0 4E75                       		rts	
0000C8F2                            ; ===========================================================================
0000C8F2                            
0000C8F2                            Obj34_Wait:				; XREF: Obj34_Index
0000C8F2 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C8F6 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C8F8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8FC 6000 0000                  		bra.w	DisplaySprite
0000C900                            ; ===========================================================================
0000C900                            
0000C900                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C900 4A28 0001                  		tst.b	1(a0)
0000C904 6A00                       		bpl.s	Obj34_ChangeArt
0000C906 7220                       		moveq	#$20,d1
0000C908 3028 0032                  		move.w	$32(a0),d0
0000C90C B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C910 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C912 6C00                       		bge.s	Obj34_Move2
0000C914 4441                       		neg.w	d1
0000C916                            
0000C916                            Obj34_Move2:
0000C916 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C91A 3028 0008                  		move.w	8(a0),d0
0000C91E 6B00                       		bmi.s	locret_C412
0000C920 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C924 6400                       		bcc.s	locret_C412	; if yes, branch
0000C926 6000 0000                  		bra.w	DisplaySprite
0000C92A                            ; ===========================================================================
0000C92A                            
0000C92A                            locret_C412:
0000C92A 4E75                       		rts	
0000C92C                            ; ===========================================================================
0000C92C                            
0000C92C                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C92C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C932 6600                       		bne.s	Obj34_Delete
0000C934 7002                       		moveq	#2,d0
0000C936 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C93C 7000                       		moveq	#0,d0
0000C93E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C942 0640 0015                  		addi.w	#$15,d0
0000C946 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C94C                            
0000C94C                            Obj34_Delete:
0000C94C 6000 0000                  		bra.w	DeleteObject
0000C950                            ; ===========================================================================
0000C950 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C952 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C954 00E4                       		dc.w $E4
0000C956 0206                       		dc.b 2,	6
0000C958 00EA                       		dc.w $EA
0000C95A 0207                       		dc.b 2,	7
0000C95C 00E0                       		dc.w $E0
0000C95E 020A                       		dc.b 2,	$A
0000C960                            ; ---------------------------------------------------------------------------
0000C960                            ; Title	card configuration data
0000C960                            ; Format:
0000C960                            ; 4 bytes per item (YYYY XXXX)
0000C960                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C960                            ; ---------------------------------------------------------------------------
0000C960 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C970 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C980 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C990 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C9A0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C9B0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C9C0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C9D0                            ; ===========================================================================
0000C9D0                            ; ---------------------------------------------------------------------------
0000C9D0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C9D0                            ; ---------------------------------------------------------------------------
0000C9D0                            
0000C9D0                            Obj39:					; XREF: Obj_Index
0000C9D0 7000                       		moveq	#0,d0
0000C9D2 1028 0024                  		move.b	$24(a0),d0
0000C9D6 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C9DA 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C9DE                            ; ===========================================================================
0000C9DE 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C9E0 0000                       		dc.w loc_C50C-Obj39_Index
0000C9E2 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C9E4                            ; ===========================================================================
0000C9E4                            
0000C9E4                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C9E4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C9E8 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C9EA 4E75                       		rts	
0000C9EC                            ; ===========================================================================
0000C9EC                            
0000C9EC                            Obj39_Main:
0000C9EC 5428 0024                  		addq.b	#2,$24(a0)
0000C9F0 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C9F6 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9FC 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9FE 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CA04                            
0000CA04                            loc_C4EC:
0000CA04 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CA0A 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CA12 317C 855E 0002             		move.w	#$855E,2(a0)
0000CA18 117C 0000 0001             		move.b	#0,1(a0)
0000CA1E 117C 0000 0018             		move.b	#0,$18(a0)
0000CA24                            
0000CA24                            loc_C50C:				; XREF: Obj39_Index
0000CA24 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA26 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA2C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA2E 6500                       		bcs.s	Obj39_Move
0000CA30 4441                       		neg.w	d1
0000CA32                            
0000CA32                            Obj39_Move:
0000CA32 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA36 6000 0000                  		bra.w	DisplaySprite
0000CA3A                            ; ===========================================================================
0000CA3A                            
0000CA3A                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA3A 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA40 5428 0024                  		addq.b	#2,$24(a0)
0000CA44 4E75                       		rts	
0000CA46                            ; ===========================================================================
0000CA46                            
0000CA46                            Obj39_Wait:				; XREF: Obj39_Index
0000CA46 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA4A 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA4E 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA50 0828 0000 001A             		btst	#0,$1A(a0)
0000CA56 6600                       		bne.s	Obj39_Display
0000CA58 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA5C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA5E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA62 6000 0000                  		bra.w	DisplaySprite
0000CA66                            ; ===========================================================================
0000CA66                            
0000CA66                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA66 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA6A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA6C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA72 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA76 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA78 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA7E 6000                       		bra.s	Obj39_Display
0000CA80                            ; ===========================================================================
0000CA80                            
0000CA80                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA80 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA86                            
0000CA86                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA86 6000 0000                  		bra.w	DisplaySprite
0000CA8A                            ; ===========================================================================
0000CA8A                            ; ---------------------------------------------------------------------------
0000CA8A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA8A                            ; ---------------------------------------------------------------------------
0000CA8A                            
0000CA8A                            Obj3A:					; XREF: Obj_Index
0000CA8A 7000                       		moveq	#0,d0
0000CA8C 1028 0024                  		move.b	$24(a0),d0
0000CA90 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA94 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA98                            ; ===========================================================================
0000CA98 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA9A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA9C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA9E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CAA0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAA2 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CAA4 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAA6 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CAA8 0000                       		dc.w loc_C766-Obj3A_Index
0000CAAA                            ; ===========================================================================
0000CAAA                            
0000CAAA                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CAAA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CAAE 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CAB0 4E75                       		rts	
0000CAB2                            ; ===========================================================================
0000CAB2                            
0000CAB2                            Obj3A_Main:
0000CAB2 2248                       		movea.l	a0,a1
0000CAB4 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CABA 7206                       		moveq	#6,d1
0000CABC                            
0000CABC                            Obj3A_Loop:
0000CABC 12BC 003A                  		move.b	#$3A,0(a1)
0000CAC0 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAC4 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CAC8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CACC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CAD0 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAD4 101A                       		move.b	(a2)+,d0
0000CAD6 0C00 0006                  		cmpi.b	#6,d0
0000CADA 6600                       		bne.s	loc_C5CA
0000CADC D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CAE0                            
0000CAE0                            loc_C5CA:
0000CAE0 1340 001A                  		move.b	d0,$1A(a1)
0000CAE4 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CAEC 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAF2 137C 0000 0001             		move.b	#0,1(a1)
0000CAF8 43E9 0040                  		lea	$40(a1),a1
0000CAFC 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CB00                            
0000CB00                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CB00 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB02 3028 0030                  		move.w	$30(a0),d0
0000CB06 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CB0A 6700                       		beq.s	loc_C61A	; if yes, branch
0000CB0C 6C00                       		bge.s	Obj3A_Move
0000CB0E 4441                       		neg.w	d1
0000CB10                            
0000CB10                            Obj3A_Move:
0000CB10 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB14                            
0000CB14                            loc_C5FE:				; XREF: loc_C61A
0000CB14 3028 0008                  		move.w	8(a0),d0
0000CB18 6B00                       		bmi.s	locret_C60E
0000CB1A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB1E 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CB20 6000 0000                  		bra.w	DisplaySprite
0000CB24                            ; ===========================================================================
0000CB24                            
0000CB24                            locret_C60E:
0000CB24 4E75                       		rts	
0000CB26                            ; ===========================================================================
0000CB26                            
0000CB26                            loc_C610:				; XREF: loc_C61A
0000CB26 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB2C 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB30                            ; ===========================================================================
0000CB30                            
0000CB30                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB30 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB36 67EE                       		beq.s	loc_C610
0000CB38 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB3E 66D4                       		bne.s	loc_C5FE
0000CB40 5428 0024                  		addq.b	#2,$24(a0)
0000CB44 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB4A                            
0000CB4A                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB4A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB4E 6600                       		bne.s	Obj3A_Display
0000CB50 5428 0024                  		addq.b	#2,$24(a0)
0000CB54                            
0000CB54                            Obj3A_Display:
0000CB54 6000 0000                  		bra.w	DisplaySprite
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB58 6100 0000                  		bsr.w	DisplaySprite
0000CB5C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB62 7000                       		moveq	#0,d0
0000CB64 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB68 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB6A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB6E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB74                            
0000CB74                            Obj3A_RingBonus:
0000CB74 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB78 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB7A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB7E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB84                            
0000CB84                            Obj3A_ChkBonus:
0000CB84 4A40                       		tst.w	d0		; is there any bonus?
0000CB86 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB88 303C 00C5                  		move.w	#$C5,d0
0000CB8C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB92 5428 0024                  		addq.b	#2,$24(a0)
0000CB96 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB9C 6600                       		bne.s	Obj3A_SetDelay
0000CB9E 5828 0024                  		addq.b	#4,$24(a0)
0000CBA2                            
0000CBA2                            Obj3A_SetDelay:
0000CBA2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CBA8                            
0000CBA8                            locret_C692:
0000CBA8 4E75                       		rts	
0000CBAA                            ; ===========================================================================
0000CBAA                            
0000CBAA                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CBAA 4EB9 0000 0000             		jsr	AddPoints
0000CBB0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBB4 0200 0003                  		andi.b	#3,d0
0000CBB8 66EE                       		bne.s	locret_C692
0000CBBA 303C 00CD                  		move.w	#$CD,d0
0000CBBE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBC4                            ; ===========================================================================
0000CBC4                            
0000CBC4                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBC4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBC8 0240 0007                  		andi.w	#7,d0
0000CBCC E748                       		lsl.w	#3,d0
0000CBCE 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CBD2 0241 0003                  		andi.w	#3,d1
0000CBD6 D241                       		add.w	d1,d1
0000CBD8 D041                       		add.w	d1,d0
0000CBDA 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CBDE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CBE2 4A40                       		tst.w	d0
0000CBE4 6600                       		bne.s	Obj3A_ChkSS
0000CBE6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CBEC 6000                       		bra.s	Obj3A_Display2
0000CBEE                            ; ===========================================================================
0000CBEE                            
0000CBEE                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CBEE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CBF2 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CBF6 6700                       		beq.s	loc_C6EA	; if not, branch
0000CBF8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBFE 6000                       		bra.s	Obj3A_Display2
0000CC00                            ; ===========================================================================
0000CC00                            
0000CC00                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CC00 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC06                            
0000CC06                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CC06 6000 0000                  		bra.w	DisplaySprite
0000CC0A                            ; ===========================================================================
0000CC0A                            ; ---------------------------------------------------------------------------
0000CC0A                            ; Level	order array
0000CC0A                            ; ---------------------------------------------------------------------------
0000CC0A                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC3A                            		even
0000CC3A                            ; ===========================================================================
0000CC3A                            
0000CC3A                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC3A 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC3C 3028 0032                  		move.w	$32(a0),d0
0000CC40 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC44 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC46 6C00                       		bge.s	Obj3A_Move2
0000CC48 4441                       		neg.w	d1
0000CC4A                            
0000CC4A                            Obj3A_Move2:
0000CC4A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC4E 3028 0008                  		move.w	8(a0),d0
0000CC52 6B00                       		bmi.s	locret_C748
0000CC54 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC58 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC5A 6000 0000                  		bra.w	DisplaySprite
0000CC5E                            ; ===========================================================================
0000CC5E                            
0000CC5E                            locret_C748:
0000CC5E 4E75                       		rts	
0000CC60                            ; ===========================================================================
0000CC60                            
0000CC60                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC60 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC66 6600 0000                  		bne.w	DeleteObject
0000CC6A 5428 0024                  		addq.b	#2,$24(a0)
0000CC6E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC72 303C 008D                  		move.w	#$8D,d0
0000CC76 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            loc_C766:				; XREF: Obj3A_Index
0000CC7C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC80 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC86 6700 0000                  		beq.w	DeleteObject
0000CC8A 4E75                       		rts	
0000CC8C                            ; ===========================================================================
0000CC8C 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC92 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC94 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC9A 0201                       		dc.b 2,	1
0000CC9C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CCA2 0206                       		dc.b 2,	6
0000CCA4 0520 0120 00EC             		dc.w $520, $120, $EC
0000CCAA 0202                       		dc.b 2,	2
0000CCAC 0540 0120 00FC             		dc.w $540, $120, $FC
0000CCB2 0203                       		dc.b 2,	3
0000CCB4 0560 0120 010C             		dc.w $560, $120, $10C
0000CCBA 0204                       		dc.b 2,	4
0000CCBC 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CCC2 0205                       		dc.b 2,	5
0000CCC4                            ; ===========================================================================
0000CCC4                            ; ---------------------------------------------------------------------------
0000CCC4                            ; Object 7E - special stage results screen
0000CCC4                            ; ---------------------------------------------------------------------------
0000CCC4                            
0000CCC4                            Obj7E:					; XREF: Obj_Index
0000CCC4 7000                       		moveq	#0,d0
0000CCC6 1028 0024                  		move.b	$24(a0),d0
0000CCCA 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CCCE 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CCD2                            ; ===========================================================================
0000CCD2 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CCD4 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CCD6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCD8 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CCDA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCDC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCDE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCE0 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CCE2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCE4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCE6 0000                       		dc.w loc_C91A-Obj7E_Index
0000CCE8                            ; ===========================================================================
0000CCE8                            
0000CCE8                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CCE8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCEC 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CCEE 4E75                       		rts	
0000CCF0                            ; ===========================================================================
0000CCF0                            
0000CCF0                            Obj7E_Main:
0000CCF0 2248                       		movea.l	a0,a1
0000CCF2 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CCF8 7203                       		moveq	#3,d1
0000CCFA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CD00 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CD02 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CD04                            
0000CD04                            Obj7E_Loop:
0000CD04 12BC 007E                  		move.b	#$7E,0(a1)
0000CD08 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CD0C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD10 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD14 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD18 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD1C 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD24 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD2A 137C 0000 0001             		move.b	#0,1(a1)
0000CD30 43E9 0040                  		lea	$40(a1),a1
0000CD34 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD38                            
0000CD38 7007                       		moveq	#7,d0
0000CD3A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD3E 6700                       		beq.s	loc_C842
0000CD40 7000                       		moveq	#0,d0
0000CD42 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD46 6600                       		bne.s	loc_C842	; if not, branch
0000CD48 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD4A 317C 0018 0008             		move.w	#$18,8(a0)
0000CD50 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD56                            
0000CD56                            loc_C842:
0000CD56 1140 001A                  		move.b	d0,$1A(a0)
0000CD5A                            
0000CD5A                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD5A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD5C 3028 0030                  		move.w	$30(a0),d0
0000CD60 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD64 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD66 6C00                       		bge.s	Obj7E_Move
0000CD68 4441                       		neg.w	d1
0000CD6A                            
0000CD6A                            Obj7E_Move:
0000CD6A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD6E                            
0000CD6E                            loc_C85A:				; XREF: loc_C86C
0000CD6E 3028 0008                  		move.w	8(a0),d0
0000CD72 6B00                       		bmi.s	locret_C86A
0000CD74 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD78 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD7A 6000 0000                  		bra.w	DisplaySprite
0000CD7E                            ; ===========================================================================
0000CD7E                            
0000CD7E                            locret_C86A:
0000CD7E 4E75                       		rts	
0000CD80                            ; ===========================================================================
0000CD80                            
0000CD80                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD80 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD86 66E6                       		bne.s	loc_C85A
0000CD88 5428 0024                  		addq.b	#2,$24(a0)
0000CD8C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD92 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD98                            
0000CD98                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD98 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD9C 6600                       		bne.s	Obj7E_Display
0000CD9E 5428 0024                  		addq.b	#2,$24(a0)
0000CDA2                            
0000CDA2                            Obj7E_Display:
0000CDA2 6000 0000                  		bra.w	DisplaySprite
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CDA6 6100 0000                  		bsr.w	DisplaySprite
0000CDAA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CDB0 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDB4 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CDB6 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDBC 700A                       		moveq	#10,d0		; add 10 to score
0000CDBE 4EB9 0000 0000             		jsr	AddPoints
0000CDC4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDC8 0200 0003                  		andi.b	#3,d0
0000CDCC 6600                       		bne.s	locret_C8EA
0000CDCE 303C 00CD                  		move.w	#$CD,d0
0000CDD2 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDD8                            ; ===========================================================================
0000CDD8                            
0000CDD8                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CDD8 303C 00C5                  		move.w	#$C5,d0
0000CDDC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDE2 5428 0024                  		addq.b	#2,$24(a0)
0000CDE6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDEC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CDF2 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CDF4 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDFA 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDFE                            
0000CDFE                            locret_C8EA:
0000CDFE 4E75                       		rts	
0000CE00                            ; ===========================================================================
0000CE00                            
0000CE00                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CE00 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE06 6000 0000                  		bra.w	DisplaySprite
0000CE0A                            ; ===========================================================================
0000CE0A                            
0000CE0A                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CE0A 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CE10 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CE16 303C 00BF                  		move.w	#$BF,d0
0000CE1A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CE20 5428 0024                  		addq.b	#2,$24(a0)
0000CE24 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE2A 6000 0000                  		bra.w	DisplaySprite
0000CE2E                            ; ===========================================================================
0000CE2E                            
0000CE2E                            loc_C91A:				; XREF: Obj7E_Index
0000CE2E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE32 0200 000F                  		andi.b	#$F,d0
0000CE36 6600                       		bne.s	Obj7E_Display2
0000CE38 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE3E                            
0000CE3E                            Obj7E_Display2:
0000CE3E 6000 0000                  		bra.w	DisplaySprite
0000CE42                            ; ===========================================================================
0000CE42 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE48 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE4A 0320 0120 0118             		dc.w $320, $120, $118
0000CE50 0201                       		dc.b 2,	1
0000CE52 0360 0120 0128             		dc.w $360, $120, $128
0000CE58 0202                       		dc.b 2,	2
0000CE5A 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE60 0203                       		dc.b 2,	3
0000CE62 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE68 0206                       		dc.b 2,	6
0000CE6A                            ; ===========================================================================
0000CE6A                            ; ---------------------------------------------------------------------------
0000CE6A                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE6A                            ; ---------------------------------------------------------------------------
0000CE6A                            
0000CE6A                            Obj7F:					; XREF: Obj_Index
0000CE6A 7000                       		moveq	#0,d0
0000CE6C 1028 0024                  		move.b	$24(a0),d0
0000CE70 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE74 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE78                            ; ===========================================================================
0000CE78 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE7A 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE7C                            
0000CE7C                            ; ---------------------------------------------------------------------------
0000CE7C                            ; X-axis positions for chaos emeralds
0000CE7C                            ; ---------------------------------------------------------------------------
0000CE7C 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE88                            ; ===========================================================================
0000CE88                            
0000CE88                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE88 2248                       		movea.l	a0,a1
0000CE8A 45F9 0000 CE7C             		lea	(Obj7F_PosData).l,a2
0000CE90 7400                       		moveq	#0,d2
0000CE92 7200                       		moveq	#0,d1
0000CE94 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE98 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE9A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE9E                            
0000CE9E                            Obj7F_Loop:
0000CE9E 12BC 007F                  		move.b	#$7F,0(a1)
0000CEA2 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CEA6 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CEAC 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CEB0 1633 2000                  		move.b	(a3,d2.w),d3
0000CEB4 1343 001A                  		move.b	d3,$1A(a1)
0000CEB8 1343 001C                  		move.b	d3,$1C(a1)
0000CEBC 5202                       		addq.b	#1,d2
0000CEBE 5429 0024                  		addq.b	#2,$24(a1)
0000CEC2 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CECA 337C 8541 0002             		move.w	#$8541,2(a1)
0000CED0 137C 0000 0001             		move.b	#0,1(a1)
0000CED6 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEDA 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CEDE                            
0000CEDE                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CEDE 1028 001A                  		move.b	$1A(a0),d0
0000CEE2 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CEE8 0C00 0006                  		cmpi.b	#6,d0
0000CEEC 6600                       		bne.s	Obj7F_Display
0000CEEE 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CEF4                            
0000CEF4                            Obj7F_Display:
0000CEF4 6000 0000                  		bra.w	DisplaySprite
0000CEF8                            ; ===========================================================================
0000CEF8                            ; ---------------------------------------------------------------------------
0000CEF8                            ; Sprite mappings - zone title cards
0000CEF8                            ; ---------------------------------------------------------------------------
0000CEF8 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CEFA 0000                       		dc.w byte_CA2C-Map_obj34
0000CEFC 0000                       		dc.w byte_CA5A-Map_obj34
0000CEFE 0000                       		dc.w byte_CA7A-Map_obj34
0000CF00 0000                       		dc.w byte_CAA8-Map_obj34
0000CF02 0000                       		dc.w byte_CADC-Map_obj34
0000CF04 0000                       		dc.w byte_CB10-Map_obj34
0000CF06 0000                       		dc.w byte_CB26-Map_obj34
0000CF08 0000                       		dc.w byte_CB31-Map_obj34
0000CF0A 0000                       		dc.w byte_CB3C-Map_obj34
0000CF0C 0000                       		dc.w byte_CB47-Map_obj34
0000CF0E 0000                       		dc.w byte_CB8A-Map_obj34
0000CF10 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CF11 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CF16 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CF1B F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CF20 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF25 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF2A F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF2F F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF34 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF39 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF3E F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF43 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF48 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF4D 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF4E F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF53 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF58 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF5D F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF62 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF67 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF6C F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF71 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF76 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF7B F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF80 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF85 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF8A F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF8F F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF94 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF99 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF9E F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CFA3 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CFA8 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CFAD F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CFB2 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CFB7 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CFBC 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CFBD F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CFC2 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFC7 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CFCC F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CFD1 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CFD6 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CFD7 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CFDC F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CFE1 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CFE6 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CFEB F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CFF0 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CFF5 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFFA F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFFF F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D004 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D009 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D00E F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D013 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D018 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D01D F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D022 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D027 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D02C 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D02D F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D032 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D037 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D03C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D041 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D046 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D04B F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D050 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D055 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D05A F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D05F F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D064 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D069 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D06E F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D073 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D078 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D07D F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D082 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D087 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D08C F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D091 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D096 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D097 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D09C F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D0A1 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D0A6 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D0AB F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D0B0 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D0B5 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D0BA 04                         byte_CB10:	dc.b 4			; ZONE
0000D0BB F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D0C0 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0C5 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D0CA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D0CF 00                         		dc.b 0
0000D0D0 02                         byte_CB26:	dc.b 2			; ACT 1
0000D0D1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0D6 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D0DB 02                         byte_CB31:	dc.b 2			; ACT 2
0000D0DC 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0E1 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D0E6 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D0E7 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0EC F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D0F1 0D                         byte_CB47:	dc.b $D			; Oval
0000D0F2 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D0F7 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0FC EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D101 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D106 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D10B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D110 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D115 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D11A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D11F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D124 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D129 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D12E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D133 00                         		dc.b 0
0000D134 05                         byte_CB8A:	dc.b 5			; FINAL
0000D135 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D13A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D13F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D144 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D149 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D14E                            		even
0000D14E                            ; ---------------------------------------------------------------------------
0000D14E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D14E                            ; ---------------------------------------------------------------------------
0000D14E                            Map_obj39:
0000D14E                            	include "_maps\obj39.asm"
0000D14E                            ; ---------------------------------------------------------------------------
0000D14E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D14E                            ; ---------------------------------------------------------------------------
0000D14E 0000                       		dc.w byte_CBAC-Map_obj39
0000D150 0000                       		dc.w byte_CBB7-Map_obj39
0000D152 0000                       		dc.w byte_CBC2-Map_obj39
0000D154 0000                       		dc.w byte_CBCD-Map_obj39
0000D156 02                         byte_CBAC:	dc.b 2
0000D157 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D15C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D161 02                         byte_CBB7:	dc.b 2
0000D162 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D167 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D16C 02                         byte_CBC2:	dc.b 2
0000D16D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D172 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D177 02                         byte_CBCD:	dc.b 2
0000D178 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D17D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D182                            		even
0000D182                            		even
0000D182                            
0000D182                            ; ---------------------------------------------------------------------------
0000D182                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D182                            ; ---------------------------------------------------------------------------
0000D182 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D184 0000                       		dc.w byte_CC13-Map_obj3A
0000D186 0000                       		dc.w byte_CC32-Map_obj3A
0000D188 0000                       		dc.w byte_CC51-Map_obj3A
0000D18A 0000                       		dc.w byte_CC75-Map_obj3A
0000D18C FF6F                       		dc.w byte_CB47-Map_obj3A
0000D18E FF4E                       		dc.w byte_CB26-Map_obj3A
0000D190 FF59                       		dc.w byte_CB31-Map_obj3A
0000D192 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D194 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D195 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D19A F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D19F F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D1A4 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D1A9 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D1AE F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D1B3 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D1B8 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D1BD F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D1C2 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1C7 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D1CC F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D1D1 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D1D6 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D1DB F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D1E0 06                         byte_CC13:	dc.b 6			; PASSED
0000D1E1 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D1E6 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D1EB F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D1F0 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D1F5 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1FA F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1FF 06                         byte_CC32:	dc.b 6			; SCORE
0000D200 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D205 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D20A F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D20F F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D214 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D219 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D21E 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D21F F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D224 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D229 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D22E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D233 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D238 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D23D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D242 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D243 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D248 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D24D F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D252 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D257 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D25C F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D261 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D266                            		even
0000D266                            ; ---------------------------------------------------------------------------
0000D266                            ; Sprite mappings - special stage results screen
0000D266                            ; ---------------------------------------------------------------------------
0000D266 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D268 0000                       		dc.w byte_CCEE-Map_obj7E
0000D26A 0000                       		dc.w byte_CD0D-Map_obj7E
0000D26C FE8B                       		dc.w byte_CB47-Map_obj7E
0000D26E 0000                       		dc.w byte_CD31-Map_obj7E
0000D270 0000                       		dc.w byte_CD46-Map_obj7E
0000D272 0000                       		dc.w byte_CD5B-Map_obj7E
0000D274 0000                       		dc.w byte_CD6B-Map_obj7E
0000D276 0000                       		dc.w byte_CDA8-Map_obj7E
0000D278 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D279 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D27E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D283 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D288 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D28D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D292 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D297 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D29C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2A1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D2A6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D2AB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D2B0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D2B5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D2BA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D2BB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2C0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2C5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2CA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2CF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D2D4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D2D9 07                         byte_CD0D:	dc.b 7
0000D2DA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D2DF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2E4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2E9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D2EE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2F3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D2F8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2FD 04                         byte_CD31:	dc.b 4
0000D2FE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D303 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D308 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D30D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D312 04                         byte_CD46:	dc.b 4
0000D313 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D318 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D31D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D322 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D327 03                         byte_CD5B:	dc.b 3
0000D328 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D32D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D332 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D337 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D338 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D33D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D342 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D347 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D34C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D351 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D356 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D35B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D360 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D365 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D36A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D36F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D374 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D375 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D37A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D37F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D384 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D389 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D38E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D393 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D398 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D39D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D3A2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D3A7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D3AC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D3B1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D3B6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D3BB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D3C0                            		even
0000D3C0                            ; ---------------------------------------------------------------------------
0000D3C0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3C0                            ; ---------------------------------------------------------------------------
0000D3C0                            Map_obj7F:
0000D3C0                            	include "_maps\obj7F.asm"
0000D3C0                            ; ---------------------------------------------------------------------------
0000D3C0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3C0                            ; ---------------------------------------------------------------------------
0000D3C0 0000                       		dc.w byte_CE02-Map_obj7F
0000D3C2 0000                       		dc.w byte_CE08-Map_obj7F
0000D3C4 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3C6 0000                       		dc.w byte_CE14-Map_obj7F
0000D3C8 0000                       		dc.w byte_CE1A-Map_obj7F
0000D3CA 0000                       		dc.w byte_CE20-Map_obj7F
0000D3CC 0000                       		dc.w byte_CE26-Map_obj7F
0000D3CE 01                         byte_CE02:	dc.b 1
0000D3CF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D3D4 01                         byte_CE08:	dc.b 1
0000D3D5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D3DA 01                         byte_CE0E:	dc.b 1
0000D3DB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D3E0 01                         byte_CE14:	dc.b 1
0000D3E1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D3E6 01                         byte_CE1A:	dc.b 1
0000D3E7 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D3EC 01                         byte_CE20:	dc.b 1
0000D3ED F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D3F2 00                         byte_CE26:	dc.b 0			; Blank frame
0000D3F4 00                         		even
0000D3F4 00                         		even
0000D3F4                            
0000D3F4                            ; ===========================================================================
0000D3F4                            ; ---------------------------------------------------------------------------
0000D3F4                            ; Object 36 - spikes
0000D3F4                            ; ---------------------------------------------------------------------------
0000D3F4                            
0000D3F4                            Obj36:					; XREF: Obj_Index
0000D3F4 7000                       		moveq	#0,d0
0000D3F6 1028 0024                  		move.b	$24(a0),d0
0000D3FA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3FE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D402                            ; ===========================================================================
0000D402 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D404 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D406                            
0000D406 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D408 0110                       		dc.b 1,	$10
0000D40A 0204                       		dc.b 2,	4
0000D40C 031C                       		dc.b 3,	$1C
0000D40E 0440                       		dc.b 4,	$40
0000D410 0510                       		dc.b 5,	$10
0000D412                            ; ===========================================================================
0000D412                            
0000D412                            Obj36_Main:				; XREF: Obj36_Index
0000D412 5428 0024                  		addq.b	#2,$24(a0)
0000D416 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D41E 317C 051B 0002             		move.w	#$51B,2(a0)
0000D424 0028 0004 0001             		ori.b	#4,1(a0)
0000D42A 117C 0004 0018             		move.b	#4,$18(a0)
0000D430 1028 0028                  		move.b	$28(a0),d0
0000D434 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D43A 0240 00F0                  		andi.w	#$F0,d0
0000D43E 43F9 0000 D406             		lea	(Obj36_Var).l,a1
0000D444 E648                       		lsr.w	#3,d0
0000D446 D2C0                       		adda.w	d0,a1
0000D448 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D44C 1159 0019                  		move.b	(a1)+,$19(a0)
0000D450 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D456 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D45C                            
0000D45C                            Obj36_Solid:				; XREF: Obj36_Index
0000D45C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D460 343C 0004                  		move.w	#4,d2
0000D464 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D46A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D46C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D472 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D474 343C 0014                  		move.w	#$14,d2
0000D478                            
0000D478                            ; Spikes types $1x and $5x face	sideways
0000D478                            
0000D478                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D478 323C 001B                  		move.w	#$1B,d1
0000D47C 3602                       		move.w	d2,d3
0000D47E 5243                       		addq.w	#1,d3
0000D480 3828 0008                  		move.w	8(a0),d4
0000D484 6100 0000                  		bsr.w	SolidObject
0000D488 0828 0003 0022             		btst	#3,$22(a0)
0000D48E 6600                       		bne.s	Obj36_Display
0000D490 0C44 0001                  		cmpi.w	#1,d4
0000D494 6700                       		beq.s	Obj36_Hurt
0000D496 6000                       		bra.s	Obj36_Display
0000D498                            ; ===========================================================================
0000D498                            
0000D498                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D498                            
0000D498                            Obj36_Upright:				; XREF: Obj36_Solid
0000D498 7200                       		moveq	#0,d1
0000D49A 1228 0019                  		move.b	$19(a0),d1
0000D49E 0641 000B                  		addi.w	#$B,d1
0000D4A2 343C 0010                  		move.w	#$10,d2
0000D4A6 363C 0011                  		move.w	#$11,d3
0000D4AA 3828 0008                  		move.w	8(a0),d4
0000D4AE 6100 0000                  		bsr.w	SolidObject
0000D4B2 0828 0003 0022             		btst	#3,$22(a0)
0000D4B8 6600                       		bne.s	Obj36_Hurt
0000D4BA 4A44                       		tst.w	d4
0000D4BC 6A00                       		bpl.s	Obj36_Display
0000D4BE                            
0000D4BE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D4BE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D4C2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4C4 2F08                       		move.l	a0,-(sp)
0000D4C6 2448                       		movea.l	a0,a2
0000D4C8 41F8 D000                  		lea	($FFFFD000).w,a0
0000D4CC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D4D2 6400                       		bcc.s	loc_CF20
0000D4D4 2628 000C                  		move.l	$C(a0),d3
0000D4D8 3028 0012                  		move.w	$12(a0),d0
0000D4DC 48C0                       		ext.l	d0
0000D4DE E180                       		asl.l	#8,d0
0000D4E0 9680                       		sub.l	d0,d3
0000D4E2 2143 000C                  		move.l	d3,$C(a0)
0000D4E6 4EB9 0000 0000             		jsr	HurtSonic
0000D4EC                            
0000D4EC                            loc_CF20:
0000D4EC 205F                       		movea.l	(sp)+,a0
0000D4EE                            
0000D4EE                            Obj36_Display:
0000D4EE 6100 0000                  		bsr.w	DisplaySprite
0000D4F2 3028 0030                  		move.w	$30(a0),d0
0000D4F6 0240 FF80                  		andi.w	#$FF80,d0
0000D4FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4FE 0441 0080                  		subi.w	#$80,d1
0000D502 0241 FF80                  		andi.w	#$FF80,d1
0000D506 9041                       		sub.w	d1,d0
0000D508 0C40 0280                  		cmpi.w	#$280,d0
0000D50C 6200 0000                  		bhi.w	DeleteObject
0000D510 4E75                       		rts	
0000D512                            ; ===========================================================================
0000D512                            
0000D512                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D512 7000                       		moveq	#0,d0
0000D514 1028 0028                  		move.b	$28(a0),d0
0000D518 D040                       		add.w	d0,d0
0000D51A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D51E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D522                            ; ===========================================================================
0000D522 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D524 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D526 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D528                            ; ===========================================================================
0000D528                            
0000D528                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D528 4E75                       		rts			; don't move the object
0000D52A                            ; ===========================================================================
0000D52A                            
0000D52A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D52A 6100 0000                  		bsr.w	Obj36_Wait
0000D52E 7000                       		moveq	#0,d0
0000D530 1028 0034                  		move.b	$34(a0),d0
0000D534 D068 0032                  		add.w	$32(a0),d0
0000D538 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D53C 4E75                       		rts	
0000D53E                            ; ===========================================================================
0000D53E                            
0000D53E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D53E 6100 0000                  		bsr.w	Obj36_Wait
0000D542 7000                       		moveq	#0,d0
0000D544 1028 0034                  		move.b	$34(a0),d0
0000D548 D068 0030                  		add.w	$30(a0),d0
0000D54C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D550 4E75                       		rts	
0000D552                            ; ===========================================================================
0000D552                            
0000D552                            Obj36_Wait:
0000D552 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D556 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D558 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D55C 6600                       		bne.s	locret_CFE6
0000D55E 4A28 0001                  		tst.b	1(a0)
0000D562 6A00                       		bpl.s	locret_CFE6
0000D564 303C 00B6                  		move.w	#$B6,d0
0000D568 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D56E 6000                       		bra.s	locret_CFE6
0000D570                            ; ===========================================================================
0000D570                            
0000D570                            loc_CFA4:
0000D570 4A68 0036                  		tst.w	$36(a0)
0000D574 6700                       		beq.s	loc_CFC6
0000D576 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D57C 6400                       		bcc.s	locret_CFE6
0000D57E 317C 0000 0034             		move.w	#0,$34(a0)
0000D584 317C 0000 0036             		move.w	#0,$36(a0)
0000D58A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D590 6000                       		bra.s	locret_CFE6
0000D592                            ; ===========================================================================
0000D592                            
0000D592                            loc_CFC6:
0000D592 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D598 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D59E 6500                       		bcs.s	locret_CFE6
0000D5A0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D5A6 317C 0001 0036             		move.w	#1,$36(a0)
0000D5AC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5B2                            
0000D5B2                            locret_CFE6:
0000D5B2 4E75                       		rts	
0000D5B4                            ; ===========================================================================
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4                            ; Sprite mappings - spikes
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4                            Map_obj36:
0000D5B4                            	include "_maps\obj36.asm"
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4                            ; Sprite mappings - spikes
0000D5B4                            ; ---------------------------------------------------------------------------
0000D5B4 0000                       		dc.w byte_CFF4-Map_obj36
0000D5B6 0000                       		dc.w byte_D004-Map_obj36
0000D5B8 0000                       		dc.w byte_D014-Map_obj36
0000D5BA 0000                       		dc.w byte_D01A-Map_obj36
0000D5BC 0000                       		dc.w byte_D02A-Map_obj36
0000D5BE 0000                       		dc.w byte_D049-Map_obj36
0000D5C0 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D5C1 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5C6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5CB F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D5D0 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D5D1 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D5D6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5DB 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D5E0 01                         byte_D014:	dc.b 1			; 1 spike
0000D5E1 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5E6 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D5E7 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D5EC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5F1 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D5F6 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D5F7 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5FC F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D601 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D606 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D60B F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D610 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D615 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D616 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D61C 00                         		even
0000D61C 00                         		even
0000D61C                            
0000D61C                            ; ===========================================================================
0000D61C                            ; ---------------------------------------------------------------------------
0000D61C                            ; Object 3B - purple rock (GHZ)
0000D61C                            ; ---------------------------------------------------------------------------
0000D61C                            
0000D61C                            Obj3B:					; XREF: Obj_Index
0000D61C 7000                       		moveq	#0,d0
0000D61E 1028 0024                  		move.b	$24(a0),d0
0000D622 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D626 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D62A                            ; ===========================================================================
0000D62A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D62C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D62E                            ; ===========================================================================
0000D62E                            
0000D62E                            Obj3B_Main:				; XREF: Obj3B_Index
0000D62E 5428 0024                  		addq.b	#2,$24(a0)
0000D632 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D63A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D640 117C 0004 0001             		move.b	#4,1(a0)
0000D646 117C 0013 0019             		move.b	#$13,$19(a0)
0000D64C 117C 0004 0018             		move.b	#4,$18(a0)
0000D652                            
0000D652                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D652 323C 001B                  		move.w	#$1B,d1
0000D656 343C 0010                  		move.w	#$10,d2
0000D65A 363C 0010                  		move.w	#$10,d3
0000D65E 3828 0008                  		move.w	8(a0),d4
0000D662 6100 0000                  		bsr.w	SolidObject
0000D666 6100 0000                  		bsr.w	DisplaySprite
0000D66A 3028 0008                  		move.w	8(a0),d0
0000D66E 0240 FF80                  		andi.w	#$FF80,d0
0000D672 3238 F700                  		move.w	($FFFFF700).w,d1
0000D676 0441 0080                  		subi.w	#$80,d1
0000D67A 0241 FF80                  		andi.w	#$FF80,d1
0000D67E 9041                       		sub.w	d1,d0
0000D680 0C40 0280                  		cmpi.w	#$280,d0
0000D684 6200 0000                  		bhi.w	DeleteObject
0000D688 4E75                       		rts	
0000D68A                            ; ===========================================================================
0000D68A                            ; ---------------------------------------------------------------------------
0000D68A                            ; Object 49 - waterfall	sound effect (GHZ)
0000D68A                            ; ---------------------------------------------------------------------------
0000D68A                            
0000D68A                            Obj49:					; XREF: Obj_Index
0000D68A 7000                       		moveq	#0,d0
0000D68C 1028 0024                  		move.b	$24(a0),d0
0000D690 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D694 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D698                            ; ===========================================================================
0000D698 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D69A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D69C                            ; ===========================================================================
0000D69C                            
0000D69C                            Obj49_Main:				; XREF: Obj49_Index
0000D69C 5428 0024                  		addq.b	#2,$24(a0)
0000D6A0 117C 0004 0001             		move.b	#4,1(a0)
0000D6A6                            
0000D6A6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D6A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6AA 0200 003F                  		andi.b	#$3F,d0
0000D6AE 6600                       		bne.s	Obj49_ChkDel
0000D6B0 303C 00D0                  		move.w	#$D0,d0
0000D6B4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D6BA                            
0000D6BA                            Obj49_ChkDel:
0000D6BA 3028 0008                  		move.w	8(a0),d0
0000D6BE 0240 FF80                  		andi.w	#$FF80,d0
0000D6C2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6C6 0441 0080                  		subi.w	#$80,d1
0000D6CA 0241 FF80                  		andi.w	#$FF80,d1
0000D6CE 9041                       		sub.w	d1,d0
0000D6D0 0C40 0280                  		cmpi.w	#$280,d0
0000D6D4 6200 0000                  		bhi.w	DeleteObject
0000D6D8 4E75                       		rts	
0000D6DA                            ; ===========================================================================
0000D6DA                            ; ---------------------------------------------------------------------------
0000D6DA                            ; Sprite mappings - purple rock	(GHZ)
0000D6DA                            ; ---------------------------------------------------------------------------
0000D6DA                            Map_obj3B:
0000D6DA                            	include "_maps\obj3B.asm"
0000D6DA                            ; ---------------------------------------------------------------------------
0000D6DA                            ; Sprite mappings - purple rock	(GHZ)
0000D6DA                            ; ---------------------------------------------------------------------------
0000D6DA 0000                       		dc.w byte_D110-Map_obj3B
0000D6DC 02                         byte_D110:	dc.b 2
0000D6DD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D6E2 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D6E8 00                         		even
0000D6E8 00                         		even
0000D6E8                            
0000D6E8                            ; ===========================================================================
0000D6E8                            ; ---------------------------------------------------------------------------
0000D6E8                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D6E8                            ; ---------------------------------------------------------------------------
0000D6E8                            
0000D6E8                            Obj3C:					; XREF: Obj_Index
0000D6E8 7000                       		moveq	#0,d0
0000D6EA 1028 0024                  		move.b	$24(a0),d0
0000D6EE 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D6F2 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D6F6 6000 0000                  		bra.w	MarkObjGone
0000D6FA                            ; ===========================================================================
0000D6FA 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6FC 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6FE 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D700                            ; ===========================================================================
0000D700                            
0000D700                            Obj3C_Main:				; XREF: Obj3C_Index
0000D700 5428 0024                  		addq.b	#2,$24(a0)
0000D704 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D70C 317C 450F 0002             		move.w	#$450F,2(a0)
0000D712 117C 0004 0001             		move.b	#4,1(a0)
0000D718 117C 0010 0019             		move.b	#$10,$19(a0)
0000D71E 117C 0004 0018             		move.b	#4,$18(a0)
0000D724 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D72A                            
0000D72A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D72A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D730 323C 001B                  		move.w	#$1B,d1
0000D734 343C 0020                  		move.w	#$20,d2
0000D738 363C 0020                  		move.w	#$20,d3
0000D73C 3828 0008                  		move.w	8(a0),d4
0000D740 6100 0000                  		bsr.w	SolidObject
0000D744 0828 0005 0022             		btst	#5,$22(a0)
0000D74A 6600                       		bne.s	Obj3C_ChkRoll
0000D74C                            
0000D74C                            locret_D180:
0000D74C 4E75                       		rts	
0000D74E                            ; ===========================================================================
0000D74E                            
0000D74E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D74E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D754 66F6                       		bne.s	locret_D180	; if not, branch
0000D756 3028 0030                  		move.w	$30(a0),d0
0000D75A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D75C 4440                       		neg.w	d0
0000D75E                            
0000D75E                            Obj3C_ChkSpeed:
0000D75E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D762 65E8                       		bcs.s	locret_D180	; if not, branch
0000D764 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D76A 5869 0008                  		addq.w	#4,8(a1)
0000D76E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D774 3028 0008                  		move.w	8(a0),d0
0000D778 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D77C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D77E 5169 0008                  		subq.w	#8,8(a1)
0000D782 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D788                            
0000D788                            Obj3C_Smash:
0000D788 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D78E 08A8 0005 0022             		bclr	#5,$22(a0)
0000D794 08A9 0005 0022             		bclr	#5,$22(a1)
0000D79A 7207                       		moveq	#7,d1		; load 8 fragments
0000D79C 343C 0070                  		move.w	#$70,d2
0000D7A0 6100                       		bsr.s	SmashObject
0000D7A2                            
0000D7A2                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D7A2 6100 0000                  		bsr.w	SpeedToPos
0000D7A6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D7AC 6100 0000                  		bsr.w	DisplaySprite
0000D7B0 4A28 0001                  		tst.b	1(a0)
0000D7B4 6A00 0000                  		bpl.w	DeleteObject
0000D7B8 4E75                       		rts	
0000D7BA                            
0000D7BA                            ; ---------------------------------------------------------------------------
0000D7BA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D7BA                            ; ---------------------------------------------------------------------------
0000D7BA                            
0000D7BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7BA                            
0000D7BA                            
0000D7BA                            SmashObject:				; XREF: Obj3C_Smash
0000D7BA 7000                       		moveq	#0,d0
0000D7BC 1028 001A                  		move.b	$1A(a0),d0
0000D7C0 D040                       		add.w	d0,d0
0000D7C2 2668 0004                  		movea.l	4(a0),a3
0000D7C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D7CA 524B                       		addq.w	#1,a3
0000D7CC 08E8 0005 0001             		bset	#5,1(a0)
0000D7D2 1810                       		move.b	0(a0),d4
0000D7D4 1A28 0001                  		move.b	1(a0),d5
0000D7D8 2248                       		movea.l	a0,a1
0000D7DA 6000                       		bra.s	Smash_LoadFrag
0000D7DC                            ; ===========================================================================
0000D7DC                            
0000D7DC                            Smash_Loop:
0000D7DC 6100 0000                  		bsr.w	SingleObjLoad
0000D7E0 6600                       		bne.s	Smash_PlaySnd
0000D7E2 5A4B                       		addq.w	#5,a3
0000D7E4                            
0000D7E4                            Smash_LoadFrag:				; XREF: SmashObject
0000D7E4 137C 0004 0024             		move.b	#4,$24(a1)
0000D7EA 1284                       		move.b	d4,0(a1)
0000D7EC 234B 0004                  		move.l	a3,4(a1)
0000D7F0 1345 0001                  		move.b	d5,1(a1)
0000D7F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D800 3368 0002 0002             		move.w	2(a0),2(a1)
0000D806 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D80C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D812 335C 0010                  		move.w	(a4)+,$10(a1)
0000D816 335C 0012                  		move.w	(a4)+,$12(a1)
0000D81A B3C8                       		cmpa.l	a0,a1
0000D81C 6400                       		bcc.s	loc_D268
0000D81E 2F08                       		move.l	a0,-(sp)
0000D820 2049                       		movea.l	a1,a0
0000D822 6100 0000                  		bsr.w	SpeedToPos
0000D826 D568 0012                  		add.w	d2,$12(a0)
0000D82A 205F                       		movea.l	(sp)+,a0
0000D82C 6100 0000                  		bsr.w	DisplaySprite2
0000D830                            
0000D830                            loc_D268:
0000D830 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D834                            
0000D834                            Smash_PlaySnd:
0000D834 303C 00CB                  		move.w	#$CB,d0
0000D838 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D83E                            ; End of function SmashObject
0000D83E                            
0000D83E                            ; ===========================================================================
0000D83E                            ; Smashed block	fragment speeds
0000D83E                            ;
0000D83E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D842 0600 FF00                  		dc.w $600, $FF00
0000D846 0600 0100                  		dc.w $600, $100
0000D84A 0400 0500                  		dc.w $400, $500
0000D84E 0600 FA00                  		dc.w $600, $FA00
0000D852 0800 FE00                  		dc.w $800, $FE00
0000D856 0800 0200                  		dc.w $800, $200
0000D85A 0600 0600                  		dc.w $600, $600
0000D85E                            
0000D85E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D862 F800 FE00                  		dc.w $F800, $FE00
0000D866 F800 0200                  		dc.w $F800, $200
0000D86A FA00 0600                  		dc.w $FA00, $600
0000D86E FC00 FB00                  		dc.w $FC00, $FB00
0000D872 FA00 FF00                  		dc.w $FA00, $FF00
0000D876 FA00 0100                  		dc.w $FA00, $100
0000D87A FC00 0500                  		dc.w $FC00, $500
0000D87E                            ; ---------------------------------------------------------------------------
0000D87E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D87E                            ; ---------------------------------------------------------------------------
0000D87E                            Map_obj3C:
0000D87E                            	include "_maps\obj3C.asm"
0000D87E                            ; ---------------------------------------------------------------------------
0000D87E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D87E                            ; ---------------------------------------------------------------------------
0000D87E 0000                       		dc.w byte_D2BC-Map_obj3C
0000D880 0000                       		dc.w byte_D2E5-Map_obj3C
0000D882 0000                       		dc.w byte_D30E-Map_obj3C
0000D884 08                         byte_D2BC:	dc.b 8
0000D885 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D88A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D88F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D894 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D899 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D89E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8A3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8A8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8AD 08                         byte_D2E5:	dc.b 8
0000D8AE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8B3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8B8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8BD 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8C2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8C7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8CC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8D1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8D6 08                         byte_D30E:	dc.b 8
0000D8D7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8DC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8E1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8E6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8EB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D8F0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D8F5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8FA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D900 00                         		even
0000D900 00                         		even
0000D900                            
0000D900                            ; ---------------------------------------------------------------------------
0000D900                            ; Object code loading subroutine
0000D900                            ; ---------------------------------------------------------------------------
0000D900                            
0000D900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D900                            
0000D900                            
0000D900                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D900 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D904 7E7F                       		moveq	#$7F,d7
0000D906 7000                       		moveq	#0,d0
0000D908 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D90E 6400                       		bcc.s	loc_D362
0000D910                            
0000D910                            loc_D348:
0000D910 1010                       		move.b	(a0),d0		; load object number from RAM
0000D912 6700                       		beq.s	loc_D358
0000D914 D040                       		add.w	d0,d0
0000D916 D040                       		add.w	d0,d0
0000D918 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D91C 4E91                       		jsr	(a1)		; run the object's code
0000D91E 7000                       		moveq	#0,d0
0000D920                            
0000D920                            loc_D358:
0000D920 41E8 0040                  		lea	$40(a0),a0	; next object
0000D924 51CF FFEA                  		dbf	d7,loc_D348
0000D928 4E75                       		rts	
0000D92A                            ; ===========================================================================
0000D92A                            
0000D92A                            loc_D362:
0000D92A 7E1F                       		moveq	#$1F,d7
0000D92C 61E2                       		bsr.s	loc_D348
0000D92E 7E5F                       		moveq	#$5F,d7
0000D930                            
0000D930                            loc_D368:
0000D930 7000                       		moveq	#0,d0
0000D932 1010                       		move.b	(a0),d0
0000D934 6700                       		beq.s	loc_D378
0000D936 4A28 0001                  		tst.b	1(a0)
0000D93A 6A00                       		bpl.s	loc_D378
0000D93C 6100 0000                  		bsr.w	DisplaySprite
0000D940                            
0000D940                            loc_D378:
0000D940 41E8 0040                  		lea	$40(a0),a0
0000D944                            
0000D944                            loc_D37C:
0000D944 51CF FFEA                  		dbf	d7,loc_D368
0000D948 4E75                       		rts	
0000D94A                            ; End of function ObjectsLoad
0000D94A                            
0000D94A                            ; ===========================================================================
0000D94A                            ; ---------------------------------------------------------------------------
0000D94A                            ; Object pointers
0000D94A                            ; ---------------------------------------------------------------------------
0000D94A                            Obj_Index:
0000D94A                            	include "_inc\Object pointers.asm"
0000D94A                            ; ---------------------------------------------------------------------------
0000D94A                            ; Object pointers
0000D94A                            ; ---------------------------------------------------------------------------
0000D94A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D95A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D96A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D97A 0000 0000 0000 ABA6 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D98A 0000 77DE 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D99A 0000 7E04 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D9AA 0000 8652 0000 86BA 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D9BA 0000 8D04 0000 8FF2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D9CA 0000 0000 0000 9CA2 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D9DA 0000 9FDA 0000 A5C6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D9EA 0000 98FE 0000 8DDA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9FA 0000 B1CA 0000 A7BA 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DA0A 0000 BB9C 0000 C24A 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DA1A 0000 B700 0000 D3F4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA2A 0000 C9D0 0000 CA8A 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA3A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA4A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA5A 0000 BEB8 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA6A 0000 D68A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA7A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA8A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA9A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DAAA 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DABA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DACA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DADA 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DAEA 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DAFA 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DB0A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DB1A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB2A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB3A 0000 0000 0000 CCC4 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB4A 0000 52FE 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB5A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB6A 0000 59B8 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB6A 0000 59B8 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB7A                            
0000DB7A                            ; ---------------------------------------------------------------------------
0000DB7A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB7A                            ; ---------------------------------------------------------------------------
0000DB7A                            
0000DB7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB7A                            
0000DB7A                            
0000DB7A                            ObjectFall:
0000DB7A 2428 0008                  		move.l	8(a0),d2
0000DB7E 2628 000C                  		move.l	$C(a0),d3
0000DB82 3028 0010                  		move.w	$10(a0),d0
0000DB86 48C0                       		ext.l	d0
0000DB88 E180                       		asl.l	#8,d0
0000DB8A D480                       		add.l	d0,d2
0000DB8C 3028 0012                  		move.w	$12(a0),d0
0000DB90 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB96 48C0                       		ext.l	d0
0000DB98 E180                       		asl.l	#8,d0
0000DB9A D680                       		add.l	d0,d3
0000DB9C 2142 0008                  		move.l	d2,8(a0)
0000DBA0 2143 000C                  		move.l	d3,$C(a0)
0000DBA4 4E75                       		rts	
0000DBA6                            ; End of function ObjectFall
0000DBA6                            
0000DBA6                            ; ---------------------------------------------------------------------------
0000DBA6                            ; Subroutine translating object	speed to update	object position
0000DBA6                            ; ---------------------------------------------------------------------------
0000DBA6                            
0000DBA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA6                            
0000DBA6                            
0000DBA6                            SpeedToPos:
0000DBA6 2428 0008                  		move.l	8(a0),d2
0000DBAA 2628 000C                  		move.l	$C(a0),d3
0000DBAE 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DBB2 48C0                       		ext.l	d0
0000DBB4 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DBB6 D480                       		add.l	d0,d2		; add to x-axis	position
0000DBB8 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DBBC 48C0                       		ext.l	d0
0000DBBE E180                       		asl.l	#8,d0		; multiply by $100
0000DBC0 D680                       		add.l	d0,d3		; add to y-axis	position
0000DBC2 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBC6 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DBCA 4E75                       		rts	
0000DBCC                            ; End of function SpeedToPos
0000DBCC                            
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DBCC                            ; ---------------------------------------------------------------------------
0000DBCC                            
0000DBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBCC                            
0000DBCC                            
0000DBCC                            DisplaySprite:
0000DBCC 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DBD0 3028 0018                  		move.w	$18(a0),d0
0000DBD4 E248                       		lsr.w	#1,d0
0000DBD6 0240 0380                  		andi.w	#$380,d0
0000DBDA D2C0                       		adda.w	d0,a1
0000DBDC 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DBE0 6400                       		bcc.s	locret_D620
0000DBE2 5451                       		addq.w	#2,(a1)
0000DBE4 D2D1                       		adda.w	(a1),a1
0000DBE6 3288                       		move.w	a0,(a1)
0000DBE8                            
0000DBE8                            locret_D620:
0000DBE8 4E75                       		rts	
0000DBEA                            ; End of function DisplaySprite
0000DBEA                            
0000DBEA                            ; ---------------------------------------------------------------------------
0000DBEA                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DBEA                            ; ---------------------------------------------------------------------------
0000DBEA                            
0000DBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBEA                            
0000DBEA                            
0000DBEA                            DisplaySprite2:
0000DBEA 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DBEE 3029 0018                  		move.w	$18(a1),d0
0000DBF2 E248                       		lsr.w	#1,d0
0000DBF4 0240 0380                  		andi.w	#$380,d0
0000DBF8 D4C0                       		adda.w	d0,a2
0000DBFA 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBFE 6400                       		bcc.s	locret_D63E
0000DC00 5452                       		addq.w	#2,(a2)
0000DC02 D4D2                       		adda.w	(a2),a2
0000DC04 3489                       		move.w	a1,(a2)
0000DC06                            
0000DC06                            locret_D63E:
0000DC06 4E75                       		rts	
0000DC08                            ; End of function DisplaySprite2
0000DC08                            
0000DC08                            ; ---------------------------------------------------------------------------
0000DC08                            ; Subroutine to	delete an object
0000DC08                            ; ---------------------------------------------------------------------------
0000DC08                            
0000DC08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC08                            
0000DC08                            
0000DC08                            DeleteObject:
0000DC08 2248                       		movea.l	a0,a1
0000DC0A                            
0000DC0A                            DeleteObject2:
0000DC0A 7200                       		moveq	#0,d1
0000DC0C 700F                       		moveq	#$F,d0
0000DC0E                            
0000DC0E                            loc_D646:
0000DC0E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DC10 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DC14 4E75                       		rts	
0000DC16                            ; End of function DeleteObject
0000DC16                            
0000DC16                            ; ===========================================================================
0000DC16 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DC1A 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DC1E 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DC22 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC26                            ; ---------------------------------------------------------------------------
0000DC26                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC26                            ; ---------------------------------------------------------------------------
0000DC26                            
0000DC26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC26                            
0000DC26                            
0000DC26                            BuildSprites:				; XREF: TitleScreen; et al
0000DC26 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC2A 7A00                       		moveq	#0,d5
0000DC2C 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC30 7E07                       		moveq	#7,d7
0000DC32                            
0000DC32                            loc_D66A:
0000DC32 4A54                       		tst.w	(a4)
0000DC34 6700 0000                  		beq.w	loc_D72E
0000DC38 7C02                       		moveq	#2,d6
0000DC3A                            
0000DC3A                            loc_D672:
0000DC3A 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC3E 4A10                       		tst.b	(a0)
0000DC40 6700 0000                  		beq.w	loc_D726
0000DC44 08A8 0007 0001             		bclr	#7,1(a0)
0000DC4A 1028 0001                  		move.b	1(a0),d0
0000DC4E 1800                       		move.b	d0,d4
0000DC50 0240 000C                  		andi.w	#$C,d0
0000DC54 6700                       		beq.s	loc_D6DE
0000DC56 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC5A 7000                       		moveq	#0,d0
0000DC5C 1028 0019                  		move.b	$19(a0),d0
0000DC60 3628 0008                  		move.w	8(a0),d3
0000DC64 9651                       		sub.w	(a1),d3
0000DC66 3203                       		move.w	d3,d1
0000DC68 D240                       		add.w	d0,d1
0000DC6A 6B00 0000                  		bmi.w	loc_D726
0000DC6E 3203                       		move.w	d3,d1
0000DC70 9240                       		sub.w	d0,d1
0000DC72 0C41 0140                  		cmpi.w	#$140,d1
0000DC76 6C00                       		bge.s	loc_D726
0000DC78 0643 0080                  		addi.w	#$80,d3
0000DC7C 0804 0004                  		btst	#4,d4
0000DC80 6700                       		beq.s	loc_D6E8
0000DC82 7000                       		moveq	#0,d0
0000DC84 1028 0016                  		move.b	$16(a0),d0
0000DC88 3428 000C                  		move.w	$C(a0),d2
0000DC8C 9469 0004                  		sub.w	4(a1),d2
0000DC90 3202                       		move.w	d2,d1
0000DC92 D240                       		add.w	d0,d1
0000DC94 6B00                       		bmi.s	loc_D726
0000DC96 3202                       		move.w	d2,d1
0000DC98 9240                       		sub.w	d0,d1
0000DC9A 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC9E 6C00                       		bge.s	loc_D726
0000DCA0 0642 0080                  		addi.w	#$80,d2
0000DCA4 6000                       		bra.s	loc_D700
0000DCA6                            ; ===========================================================================
0000DCA6                            
0000DCA6                            loc_D6DE:
0000DCA6 3428 000A                  		move.w	$A(a0),d2
0000DCAA 3628 0008                  		move.w	8(a0),d3
0000DCAE 6000                       		bra.s	loc_D700
0000DCB0                            ; ===========================================================================
0000DCB0                            
0000DCB0                            loc_D6E8:
0000DCB0 3428 000C                  		move.w	$C(a0),d2
0000DCB4 9469 0004                  		sub.w	4(a1),d2
0000DCB8 0642 0080                  		addi.w	#$80,d2
0000DCBC 0C42 0060                  		cmpi.w	#$60,d2
0000DCC0 6500                       		bcs.s	loc_D726
0000DCC2 0C42 0180                  		cmpi.w	#$180,d2
0000DCC6 6400                       		bcc.s	loc_D726
0000DCC8                            
0000DCC8                            loc_D700:
0000DCC8 2268 0004                  		movea.l	4(a0),a1
0000DCCC 7200                       		moveq	#0,d1
0000DCCE 0804 0005                  		btst	#5,d4
0000DCD2 6600                       		bne.s	loc_D71C
0000DCD4 1228 001A                  		move.b	$1A(a0),d1
0000DCD8 D201                       		add.b	d1,d1
0000DCDA D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DCDE 1219                       		move.b	(a1)+,d1
0000DCE0 5301                       		subq.b	#1,d1
0000DCE2 6B00                       		bmi.s	loc_D720
0000DCE4                            
0000DCE4                            loc_D71C:
0000DCE4 6100 0000                  		bsr.w	sub_D750
0000DCE8                            
0000DCE8                            loc_D720:
0000DCE8 08E8 0007 0001             		bset	#7,1(a0)
0000DCEE                            
0000DCEE                            loc_D726:
0000DCEE 5446                       		addq.w	#2,d6
0000DCF0 5554                       		subq.w	#2,(a4)
0000DCF2 6600 FF46                  		bne.w	loc_D672
0000DCF6                            
0000DCF6                            loc_D72E:
0000DCF6 49EC 0080                  		lea	$80(a4),a4
0000DCFA 51CF FF36                  		dbf	d7,loc_D66A
0000DCFE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DD02 0C05 0050                  		cmpi.b	#$50,d5
0000DD06 6700                       		beq.s	loc_D748
0000DD08 24BC 0000 0000             		move.l	#0,(a2)
0000DD0E 4E75                       		rts	
0000DD10                            ; ===========================================================================
0000DD10                            
0000DD10                            loc_D748:
0000DD10 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DD16 4E75                       		rts	
0000DD18                            ; End of function BuildSprites
0000DD18                            
0000DD18                            
0000DD18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD18                            
0000DD18                            
0000DD18                            sub_D750:				; XREF: BuildSprites
0000DD18 3668 0002                  		movea.w	2(a0),a3
0000DD1C 0804 0000                  		btst	#0,d4
0000DD20 6600                       		bne.s	loc_D796
0000DD22 0804 0001                  		btst	#1,d4
0000DD26 6600 0000                  		bne.w	loc_D7E4
0000DD2A                            ; End of function sub_D750
0000DD2A                            
0000DD2A                            
0000DD2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD2A                            
0000DD2A                            
0000DD2A                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD2A 0C05 0050                  		cmpi.b	#$50,d5
0000DD2E 6700                       		beq.s	locret_D794
0000DD30 1019                       		move.b	(a1)+,d0
0000DD32 4880                       		ext.w	d0
0000DD34 D042                       		add.w	d2,d0
0000DD36 34C0                       		move.w	d0,(a2)+
0000DD38 14D9                       		move.b	(a1)+,(a2)+
0000DD3A 5205                       		addq.b	#1,d5
0000DD3C 14C5                       		move.b	d5,(a2)+
0000DD3E 1019                       		move.b	(a1)+,d0
0000DD40 E148                       		lsl.w	#8,d0
0000DD42 1019                       		move.b	(a1)+,d0
0000DD44 D04B                       		add.w	a3,d0
0000DD46 34C0                       		move.w	d0,(a2)+
0000DD48 1019                       		move.b	(a1)+,d0
0000DD4A 4880                       		ext.w	d0
0000DD4C D043                       		add.w	d3,d0
0000DD4E 0240 01FF                  		andi.w	#$1FF,d0
0000DD52 6600                       		bne.s	loc_D78E
0000DD54 5240                       		addq.w	#1,d0
0000DD56                            
0000DD56                            loc_D78E:
0000DD56 34C0                       		move.w	d0,(a2)+
0000DD58 51C9 FFD0                  		dbf	d1,sub_D762
0000DD5C                            
0000DD5C                            locret_D794:
0000DD5C 4E75                       		rts	
0000DD5E                            ; End of function sub_D762
0000DD5E                            
0000DD5E                            ; ===========================================================================
0000DD5E                            
0000DD5E                            loc_D796:
0000DD5E 0804 0001                  		btst	#1,d4
0000DD62 6600 0000                  		bne.w	loc_D82A
0000DD66                            
0000DD66                            loc_D79E:
0000DD66 0C05 0050                  		cmpi.b	#$50,d5
0000DD6A 6700                       		beq.s	locret_D7E2
0000DD6C 1019                       		move.b	(a1)+,d0
0000DD6E 4880                       		ext.w	d0
0000DD70 D042                       		add.w	d2,d0
0000DD72 34C0                       		move.w	d0,(a2)+
0000DD74 1819                       		move.b	(a1)+,d4
0000DD76 14C4                       		move.b	d4,(a2)+
0000DD78 5205                       		addq.b	#1,d5
0000DD7A 14C5                       		move.b	d5,(a2)+
0000DD7C 1019                       		move.b	(a1)+,d0
0000DD7E E148                       		lsl.w	#8,d0
0000DD80 1019                       		move.b	(a1)+,d0
0000DD82 D04B                       		add.w	a3,d0
0000DD84 0A40 0800                  		eori.w	#$800,d0
0000DD88 34C0                       		move.w	d0,(a2)+
0000DD8A 1019                       		move.b	(a1)+,d0
0000DD8C 4880                       		ext.w	d0
0000DD8E 4440                       		neg.w	d0
0000DD90 D804                       		add.b	d4,d4
0000DD92 0244 0018                  		andi.w	#$18,d4
0000DD96 5044                       		addq.w	#8,d4
0000DD98 9044                       		sub.w	d4,d0
0000DD9A D043                       		add.w	d3,d0
0000DD9C 0240 01FF                  		andi.w	#$1FF,d0
0000DDA0 6600                       		bne.s	loc_D7DC
0000DDA2 5240                       		addq.w	#1,d0
0000DDA4                            
0000DDA4                            loc_D7DC:
0000DDA4 34C0                       		move.w	d0,(a2)+
0000DDA6 51C9 FFBE                  		dbf	d1,loc_D79E
0000DDAA                            
0000DDAA                            locret_D7E2:
0000DDAA 4E75                       		rts	
0000DDAC                            ; ===========================================================================
0000DDAC                            
0000DDAC                            loc_D7E4:				; XREF: sub_D750
0000DDAC 0C05 0050                  		cmpi.b	#$50,d5
0000DDB0 6700                       		beq.s	locret_D828
0000DDB2 1019                       		move.b	(a1)+,d0
0000DDB4 1811                       		move.b	(a1),d4
0000DDB6 4880                       		ext.w	d0
0000DDB8 4440                       		neg.w	d0
0000DDBA E70C                       		lsl.b	#3,d4
0000DDBC 0244 0018                  		andi.w	#$18,d4
0000DDC0 5044                       		addq.w	#8,d4
0000DDC2 9044                       		sub.w	d4,d0
0000DDC4 D042                       		add.w	d2,d0
0000DDC6 34C0                       		move.w	d0,(a2)+
0000DDC8 14D9                       		move.b	(a1)+,(a2)+
0000DDCA 5205                       		addq.b	#1,d5
0000DDCC 14C5                       		move.b	d5,(a2)+
0000DDCE 1019                       		move.b	(a1)+,d0
0000DDD0 E148                       		lsl.w	#8,d0
0000DDD2 1019                       		move.b	(a1)+,d0
0000DDD4 D04B                       		add.w	a3,d0
0000DDD6 0A40 1000                  		eori.w	#$1000,d0
0000DDDA 34C0                       		move.w	d0,(a2)+
0000DDDC 1019                       		move.b	(a1)+,d0
0000DDDE 4880                       		ext.w	d0
0000DDE0 D043                       		add.w	d3,d0
0000DDE2 0240 01FF                  		andi.w	#$1FF,d0
0000DDE6 6600                       		bne.s	loc_D822
0000DDE8 5240                       		addq.w	#1,d0
0000DDEA                            
0000DDEA                            loc_D822:
0000DDEA 34C0                       		move.w	d0,(a2)+
0000DDEC 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DDF0                            
0000DDF0                            locret_D828:
0000DDF0 4E75                       		rts	
0000DDF2                            ; ===========================================================================
0000DDF2                            
0000DDF2                            loc_D82A:
0000DDF2 0C05 0050                  		cmpi.b	#$50,d5
0000DDF6 6700                       		beq.s	locret_D87C
0000DDF8 1019                       		move.b	(a1)+,d0
0000DDFA 1811                       		move.b	(a1),d4
0000DDFC 4880                       		ext.w	d0
0000DDFE 4440                       		neg.w	d0
0000DE00 E70C                       		lsl.b	#3,d4
0000DE02 0244 0018                  		andi.w	#$18,d4
0000DE06 5044                       		addq.w	#8,d4
0000DE08 9044                       		sub.w	d4,d0
0000DE0A D042                       		add.w	d2,d0
0000DE0C 34C0                       		move.w	d0,(a2)+
0000DE0E 1819                       		move.b	(a1)+,d4
0000DE10 14C4                       		move.b	d4,(a2)+
0000DE12 5205                       		addq.b	#1,d5
0000DE14 14C5                       		move.b	d5,(a2)+
0000DE16 1019                       		move.b	(a1)+,d0
0000DE18 E148                       		lsl.w	#8,d0
0000DE1A 1019                       		move.b	(a1)+,d0
0000DE1C D04B                       		add.w	a3,d0
0000DE1E 0A40 1800                  		eori.w	#$1800,d0
0000DE22 34C0                       		move.w	d0,(a2)+
0000DE24 1019                       		move.b	(a1)+,d0
0000DE26 4880                       		ext.w	d0
0000DE28 4440                       		neg.w	d0
0000DE2A D804                       		add.b	d4,d4
0000DE2C 0244 0018                  		andi.w	#$18,d4
0000DE30 5044                       		addq.w	#8,d4
0000DE32 9044                       		sub.w	d4,d0
0000DE34 D043                       		add.w	d3,d0
0000DE36 0240 01FF                  		andi.w	#$1FF,d0
0000DE3A 6600                       		bne.s	loc_D876
0000DE3C 5240                       		addq.w	#1,d0
0000DE3E                            
0000DE3E                            loc_D876:
0000DE3E 34C0                       		move.w	d0,(a2)+
0000DE40 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE44                            
0000DE44                            locret_D87C:
0000DE44 4E75                       		rts	
0000DE46                            ; ---------------------------------------------------------------------------
0000DE46                            ; Subroutine to	check if an object is on the screen
0000DE46                            ; ---------------------------------------------------------------------------
0000DE46                            
0000DE46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE46                            
0000DE46                            
0000DE46                            ChkObjOnScreen:
0000DE46 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE4A 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE4E 6B00                       		bmi.s	NotOnScreen
0000DE50 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE54 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE56                            
0000DE56 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE5A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE5E 6B00                       		bmi.s	NotOnScreen
0000DE60 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE64 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE66                            
0000DE66 7000                       		moveq	#0,d0		; set flag to 0
0000DE68 4E75                       		rts	
0000DE6A                            ; ===========================================================================
0000DE6A                            
0000DE6A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE6A 7001                       		moveq	#1,d0		; set flag to 1
0000DE6C 4E75                       		rts	
0000DE6E                            ; End of function ChkObjOnScreen
0000DE6E                            
0000DE6E                            
0000DE6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE6E                            
0000DE6E                            
0000DE6E                            ChkObjOnScreen2:
0000DE6E 7200                       		moveq	#0,d1
0000DE70 1228 0019                  		move.b	$19(a0),d1
0000DE74 3028 0008                  		move.w	8(a0),d0
0000DE78 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE7C D041                       		add.w	d1,d0
0000DE7E 6B00                       		bmi.s	NotOnScreen2
0000DE80 D241                       		add.w	d1,d1
0000DE82 9041                       		sub.w	d1,d0
0000DE84 0C40 0140                  		cmpi.w	#320,d0
0000DE88 6C00                       		bge.s	NotOnScreen2
0000DE8A                            
0000DE8A 3228 000C                  		move.w	$C(a0),d1
0000DE8E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE92 6B00                       		bmi.s	NotOnScreen2
0000DE94 0C41 00E0                  		cmpi.w	#224,d1
0000DE98 6C00                       		bge.s	NotOnScreen2
0000DE9A                            
0000DE9A 7000                       		moveq	#0,d0
0000DE9C 4E75                       		rts	
0000DE9E                            ; ===========================================================================
0000DE9E                            
0000DE9E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE9E 7001                       		moveq	#1,d0
0000DEA0 4E75                       		rts	
0000DEA2                            ; End of function ChkObjOnScreen2
0000DEA2                            
0000DEA2                            ; ---------------------------------------------------------------------------
0000DEA2                            ; Subroutine to	load a level's objects
0000DEA2                            ; ---------------------------------------------------------------------------
0000DEA2                            
0000DEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA2                            
0000DEA2                            
0000DEA2                            ObjPosLoad:				; XREF: Level; et al
0000DEA2 7000                       		moveq	#0,d0
0000DEA4 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DEA8 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DEAC 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DEB0                            ; End of function ObjPosLoad
0000DEB0                            
0000DEB0                            ; ===========================================================================
0000DEB0 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DEB2 0000                       		dc.w OPL_Next-OPL_Index
0000DEB4                            ; ===========================================================================
0000DEB4                            
0000DEB4                            OPL_Main:				; XREF: OPL_Index
0000DEB4 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DEB8 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DEBC ED08                       		lsl.b	#6,d0
0000DEBE E848                       		lsr.w	#4,d0
0000DEC0 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEC6 2248                       		movea.l	a0,a1
0000DEC8 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DECC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DED0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DED4 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DED8 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DEDC 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DEE0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEE4 34FC 0101                  		move.w	#$101,(a2)+
0000DEE8 303C 005E                  		move.w	#$5E,d0
0000DEEC                            
0000DEEC                            OPL_ClrList:
0000DEEC 429A                       		clr.l	(a2)+
0000DEEE 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DEF2                            
0000DEF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEF6 7400                       		moveq	#0,d2
0000DEF8 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEFC 0446 0080                  		subi.w	#$80,d6
0000DF00 6400                       		bcc.s	loc_D93C
0000DF02 7C00                       		moveq	#0,d6
0000DF04                            
0000DF04                            loc_D93C:
0000DF04 0246 FF80                  		andi.w	#$FF80,d6
0000DF08 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF0C                            
0000DF0C                            loc_D944:
0000DF0C BC50                       		cmp.w	(a0),d6
0000DF0E 6300                       		bls.s	loc_D956
0000DF10 4A28 0004                  		tst.b	4(a0)
0000DF14 6A00                       		bpl.s	loc_D952
0000DF16 1412                       		move.b	(a2),d2
0000DF18 5212                       		addq.b	#1,(a2)
0000DF1A                            
0000DF1A                            loc_D952:
0000DF1A 5C48                       		addq.w	#6,a0
0000DF1C 60EE                       		bra.s	loc_D944
0000DF1E                            ; ===========================================================================
0000DF1E                            
0000DF1E                            loc_D956:
0000DF1E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF22 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF26 0446 0080                  		subi.w	#$80,d6
0000DF2A 6500                       		bcs.s	loc_D976
0000DF2C                            
0000DF2C                            loc_D964:
0000DF2C BC50                       		cmp.w	(a0),d6
0000DF2E 6300                       		bls.s	loc_D976
0000DF30 4A28 0004                  		tst.b	4(a0)
0000DF34 6A00                       		bpl.s	loc_D972
0000DF36 522A 0001                  		addq.b	#1,1(a2)
0000DF3A                            
0000DF3A                            loc_D972:
0000DF3A 5C48                       		addq.w	#6,a0
0000DF3C 60EE                       		bra.s	loc_D964
0000DF3E                            ; ===========================================================================
0000DF3E                            
0000DF3E                            loc_D976:
0000DF3E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF42 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF48                            
0000DF48                            OPL_Next:				; XREF: OPL_Index
0000DF48 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF4C 7400                       		moveq	#0,d2
0000DF4E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF52 0246 FF80                  		andi.w	#$FF80,d6
0000DF56 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF5A 6700 0000                  		beq.w	locret_DA3A
0000DF5E 6C00                       		bge.s	loc_D9F6
0000DF60 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF64 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF68 0446 0080                  		subi.w	#$80,d6
0000DF6C 6500                       		bcs.s	loc_D9D2
0000DF6E                            
0000DF6E                            loc_D9A6:
0000DF6E BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF72 6C00                       		bge.s	loc_D9D2
0000DF74 5D48                       		subq.w	#6,a0
0000DF76 4A28 0004                  		tst.b	4(a0)
0000DF7A 6A00                       		bpl.s	loc_D9BC
0000DF7C 532A 0001                  		subq.b	#1,1(a2)
0000DF80 142A 0001                  		move.b	1(a2),d2
0000DF84                            
0000DF84                            loc_D9BC:
0000DF84 6100 0000                  		bsr.w	loc_DA3C
0000DF88 6600                       		bne.s	loc_D9C6
0000DF8A 5D48                       		subq.w	#6,a0
0000DF8C 60E0                       		bra.s	loc_D9A6
0000DF8E                            ; ===========================================================================
0000DF8E                            
0000DF8E                            loc_D9C6:
0000DF8E 4A28 0004                  		tst.b	4(a0)
0000DF92 6A00                       		bpl.s	loc_D9D0
0000DF94 522A 0001                  		addq.b	#1,1(a2)
0000DF98                            
0000DF98                            loc_D9D0:
0000DF98 5C48                       		addq.w	#6,a0
0000DF9A                            
0000DF9A                            loc_D9D2:
0000DF9A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF9E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFA2 0646 0300                  		addi.w	#$300,d6
0000DFA6                            
0000DFA6                            loc_D9DE:
0000DFA6 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFAA 6E00                       		bgt.s	loc_D9F0
0000DFAC 4A28 FFFE                  		tst.b	-2(a0)
0000DFB0 6A00                       		bpl.s	loc_D9EC
0000DFB2 5312                       		subq.b	#1,(a2)
0000DFB4                            
0000DFB4                            loc_D9EC:
0000DFB4 5D48                       		subq.w	#6,a0
0000DFB6 60EE                       		bra.s	loc_D9DE
0000DFB8                            ; ===========================================================================
0000DFB8                            
0000DFB8                            loc_D9F0:
0000DFB8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFBC 4E75                       		rts	
0000DFBE                            ; ===========================================================================
0000DFBE                            
0000DFBE                            loc_D9F6:
0000DFBE 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DFC2 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFC6 0646 0280                  		addi.w	#$280,d6
0000DFCA                            
0000DFCA                            loc_DA02:
0000DFCA BC50                       		cmp.w	(a0),d6
0000DFCC 6300                       		bls.s	loc_DA16
0000DFCE 4A28 0004                  		tst.b	4(a0)
0000DFD2 6A00                       		bpl.s	loc_DA10
0000DFD4 1412                       		move.b	(a2),d2
0000DFD6 5212                       		addq.b	#1,(a2)
0000DFD8                            
0000DFD8                            loc_DA10:
0000DFD8 6100 0000                  		bsr.w	loc_DA3C
0000DFDC 67EC                       		beq.s	loc_DA02
0000DFDE                            
0000DFDE                            loc_DA16:
0000DFDE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFE2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFE6 0446 0300                  		subi.w	#$300,d6
0000DFEA 6500                       		bcs.s	loc_DA36
0000DFEC                            
0000DFEC                            loc_DA24:
0000DFEC BC50                       		cmp.w	(a0),d6
0000DFEE 6300                       		bls.s	loc_DA36
0000DFF0 4A28 0004                  		tst.b	4(a0)
0000DFF4 6A00                       		bpl.s	loc_DA32
0000DFF6 522A 0001                  		addq.b	#1,1(a2)
0000DFFA                            
0000DFFA                            loc_DA32:
0000DFFA 5C48                       		addq.w	#6,a0
0000DFFC 60EE                       		bra.s	loc_DA24
0000DFFE                            ; ===========================================================================
0000DFFE                            
0000DFFE                            loc_DA36:
0000DFFE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E002                            
0000E002                            locret_DA3A:
0000E002 4E75                       		rts	
0000E004                            ; ===========================================================================
0000E004                            
0000E004                            loc_DA3C:
0000E004 4A28 0004                  		tst.b	4(a0)
0000E008 6A00                       		bpl.s	OPL_MakeItem
0000E00A 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E010 6700                       		beq.s	OPL_MakeItem
0000E012 5C48                       		addq.w	#6,a0
0000E014 7000                       		moveq	#0,d0
0000E016 4E75                       		rts	
0000E018                            ; ===========================================================================
0000E018                            
0000E018                            OPL_MakeItem:
0000E018 6100 0000                  		bsr.w	SingleObjLoad
0000E01C 6600                       		bne.s	locret_DA8A
0000E01E 3358 0008                  		move.w	(a0)+,8(a1)
0000E022 3018                       		move.w	(a0)+,d0
0000E024 3200                       		move.w	d0,d1
0000E026 0240 0FFF                  		andi.w	#$FFF,d0
0000E02A 3340 000C                  		move.w	d0,$C(a1)
0000E02E E559                       		rol.w	#2,d1
0000E030 0201 0003                  		andi.b	#3,d1
0000E034 1341 0001                  		move.b	d1,1(a1)
0000E038 1341 0022                  		move.b	d1,$22(a1)
0000E03C 1018                       		move.b	(a0)+,d0
0000E03E 6A00                       		bpl.s	loc_DA80
0000E040 0200 007F                  		andi.b	#$7F,d0
0000E044 1342 0023                  		move.b	d2,$23(a1)
0000E048                            
0000E048                            loc_DA80:
0000E048 1280                       		move.b	d0,0(a1)
0000E04A 1358 0028                  		move.b	(a0)+,$28(a1)
0000E04E 7000                       		moveq	#0,d0
0000E050                            
0000E050                            locret_DA8A:
0000E050 4E75                       		rts	
0000E052                            ; ---------------------------------------------------------------------------
0000E052                            ; Single object	loading	subroutine
0000E052                            ; ---------------------------------------------------------------------------
0000E052                            
0000E052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E052                            
0000E052                            
0000E052                            SingleObjLoad:
0000E052 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E056 303C 005F                  		move.w	#$5F,d0
0000E05A                            
0000E05A                            loc_DA94:
0000E05A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E05C 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E05E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E062 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E066                            
0000E066                            locret_DAA0:
0000E066 4E75                       		rts	
0000E068                            ; End of function SingleObjLoad
0000E068                            
0000E068                            
0000E068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E068                            
0000E068                            
0000E068                            SingleObjLoad2:
0000E068 2248                       		movea.l	a0,a1
0000E06A 303C F000                  		move.w	#-$1000,d0
0000E06E 9048                       		sub.w	a0,d0
0000E070 EC48                       		lsr.w	#6,d0
0000E072 5340                       		subq.w	#1,d0
0000E074 6500                       		bcs.s	locret_DABC
0000E076                            
0000E076                            loc_DAB0:
0000E076 4A11                       		tst.b	(a1)
0000E078 6700                       		beq.s	locret_DABC
0000E07A 43E9 0040                  		lea	$40(a1),a1
0000E07E 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E082                            
0000E082                            locret_DABC:
0000E082 4E75                       		rts	
0000E084                            ; End of function SingleObjLoad2
0000E084                            
0000E084                            ; ===========================================================================
0000E084                            ; ---------------------------------------------------------------------------
0000E084                            ; Object 41 - springs
0000E084                            ; ---------------------------------------------------------------------------
0000E084                            
0000E084                            Obj41:					; XREF: Obj_Index
0000E084 7000                       		moveq	#0,d0
0000E086 1028 0024                  		move.b	$24(a0),d0
0000E08A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E08E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E092 6100 FB38                  		bsr.w	DisplaySprite
0000E096 3028 0008                  		move.w	8(a0),d0
0000E09A 0240 FF80                  		andi.w	#$FF80,d0
0000E09E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E0A2 0441 0080                  		subi.w	#$80,d1
0000E0A6 0241 FF80                  		andi.w	#$FF80,d1
0000E0AA 9041                       		sub.w	d1,d0
0000E0AC 0C40 0280                  		cmpi.w	#$280,d0
0000E0B0 6200 FB56                  		bhi.w	DeleteObject
0000E0B4 4E75                       		rts	
0000E0B6                            ; ===========================================================================
0000E0B6 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E0B8 0000                       		dc.w Obj41_Up-Obj41_Index
0000E0BA 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E0BC 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E0BE 0000                       		dc.w Obj41_LR-Obj41_Index
0000E0C0 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E0C2 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0C4 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0C6 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E0C8 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E0CA                            
0000E0CA F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E0CC F600                       		dc.w -$A00		; power	of yellow spring
0000E0CE                            ; ===========================================================================
0000E0CE                            
0000E0CE                            Obj41_Main:				; XREF: Obj41_Index
0000E0CE 5428 0024                  		addq.b	#2,$24(a0)
0000E0D2 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E0DA 317C 0523 0002             		move.w	#$523,2(a0)
0000E0E0 0028 0004 0001             		ori.b	#4,1(a0)
0000E0E6 117C 0010 0019             		move.b	#$10,$19(a0)
0000E0EC 117C 0004 0018             		move.b	#4,$18(a0)
0000E0F2 1028 0028                  		move.b	$28(a0),d0
0000E0F6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0FA 6700                       		beq.s	loc_DB54	; if not, branch
0000E0FC 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E102 117C 0001 001C             		move.b	#1,$1C(a0)
0000E108 117C 0003 001A             		move.b	#3,$1A(a0)
0000E10E 317C 0533 0002             		move.w	#$533,2(a0)
0000E114 117C 0008 0019             		move.b	#8,$19(a0)
0000E11A                            
0000E11A                            loc_DB54:
0000E11A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E11E 6700                       		beq.s	loc_DB66	; if not, branch
0000E120 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E126 08E8 0001 0022             		bset	#1,$22(a0)
0000E12C                            
0000E12C                            loc_DB66:
0000E12C 0800 0001                  		btst	#1,d0
0000E130 6700                       		beq.s	loc_DB72
0000E132 08E8 0005 0002             		bset	#5,2(a0)
0000E138                            
0000E138                            loc_DB72:
0000E138 0240 000F                  		andi.w	#$F,d0
0000E13C 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E142 4E75                       		rts	
0000E144                            ; ===========================================================================
0000E144                            
0000E144                            Obj41_Up:				; XREF: Obj41_Index
0000E144 323C 001B                  		move.w	#$1B,d1
0000E148 343C 0008                  		move.w	#8,d2
0000E14C 363C 0010                  		move.w	#$10,d3
0000E150 3828 0008                  		move.w	8(a0),d4
0000E154 6100 0000                  		bsr.w	SolidObject
0000E158 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E15C 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E15E 4E75                       		rts	
0000E160                            ; ===========================================================================
0000E160                            
0000E160                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E160 5428 0024                  		addq.b	#2,$24(a0)
0000E164 5069 000C                  		addq.w	#8,$C(a1)
0000E168 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E16E 08E9 0001 0022             		bset	#1,$22(a1)
0000E174 08A9 0003 0022             		bclr	#3,$22(a1)
0000E17A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E180 137C 0002 0024             		move.b	#2,$24(a1)
0000E186 08A8 0003 0022             		bclr	#3,$22(a0)
0000E18C 4228 0025                  		clr.b	$25(a0)
0000E190 303C 00CC                  		move.w	#$CC,d0
0000E194 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E19A                            
0000E19A                            Obj41_AniUp:				; XREF: Obj41_Index
0000E19A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1A0 6000 CB00                  		bra.w	AnimateSprite
0000E1A4                            ; ===========================================================================
0000E1A4                            
0000E1A4                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E1A4 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E1AA 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E1AE 4E75                       		rts	
0000E1B0                            ; ===========================================================================
0000E1B0                            
0000E1B0                            Obj41_LR:				; XREF: Obj41_Index
0000E1B0 323C 0013                  		move.w	#$13,d1
0000E1B4 343C 000E                  		move.w	#$E,d2
0000E1B8 363C 000F                  		move.w	#$F,d3
0000E1BC 3828 0008                  		move.w	8(a0),d4
0000E1C0 6100 0000                  		bsr.w	SolidObject
0000E1C4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1CA 6600                       		bne.s	loc_DC0C
0000E1CC 117C 0008 0024             		move.b	#8,$24(a0)
0000E1D2                            
0000E1D2                            loc_DC0C:
0000E1D2 0828 0005 0022             		btst	#5,$22(a0)
0000E1D8 6600                       		bne.s	Obj41_BounceLR
0000E1DA 4E75                       		rts	
0000E1DC                            ; ===========================================================================
0000E1DC                            
0000E1DC                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E1DC 5428 0024                  		addq.b	#2,$24(a0)
0000E1E0 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E1E6 5069 0008                  		addq.w	#8,8(a1)
0000E1EA 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E1F0 6600                       		bne.s	loc_DC36	; if yes, branch
0000E1F2 0469 0010 0008             		subi.w	#$10,8(a1)
0000E1F8 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1FC                            
0000E1FC                            loc_DC36:
0000E1FC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E202 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E208 0869 0000 0022             		bchg	#0,$22(a1)
0000E20E 0829 0002 0022             		btst	#2,$22(a1)
0000E214 6600                       		bne.s	loc_DC56
0000E216 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E21C                            
0000E21C                            loc_DC56:
0000E21C 08A8 0005 0022             		bclr	#5,$22(a0)
0000E222 08A9 0005 0022             		bclr	#5,$22(a1)
0000E228 303C 00CC                  		move.w	#$CC,d0
0000E22C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E232                            
0000E232                            Obj41_AniLR:				; XREF: Obj41_Index
0000E232 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E238 6000 CA68                  		bra.w	AnimateSprite
0000E23C                            ; ===========================================================================
0000E23C                            
0000E23C                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E23C 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E242 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E246 4E75                       		rts	
0000E248                            ; ===========================================================================
0000E248                            
0000E248                            Obj41_Dwn:				; XREF: Obj41_Index
0000E248 323C 001B                  		move.w	#$1B,d1
0000E24C 343C 0008                  		move.w	#8,d2
0000E250 363C 0010                  		move.w	#$10,d3
0000E254 3828 0008                  		move.w	8(a0),d4
0000E258 6100 0000                  		bsr.w	SolidObject
0000E25C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E262 6600                       		bne.s	loc_DCA4
0000E264 117C 000E 0024             		move.b	#$E,$24(a0)
0000E26A                            
0000E26A                            loc_DCA4:
0000E26A 4A28 0025                  		tst.b	$25(a0)
0000E26E 6600                       		bne.s	locret_DCAE
0000E270 4A44                       		tst.w	d4
0000E272 6B00                       		bmi.s	Obj41_BounceDwn
0000E274                            
0000E274                            locret_DCAE:
0000E274 4E75                       		rts	
0000E276                            ; ===========================================================================
0000E276                            
0000E276                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E276 5428 0024                  		addq.b	#2,$24(a0)
0000E27A 5169 000C                  		subq.w	#8,$C(a1)
0000E27E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E284 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E288 08E9 0001 0022             		bset	#1,$22(a1)
0000E28E 08A9 0003 0022             		bclr	#3,$22(a1)
0000E294 137C 0002 0024             		move.b	#2,$24(a1)
0000E29A 08A8 0003 0022             		bclr	#3,$22(a0)
0000E2A0 4228 0025                  		clr.b	$25(a0)
0000E2A4 303C 00CC                  		move.w	#$CC,d0
0000E2A8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E2AE                            
0000E2AE                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E2AE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E2B4 6000 C9EC                  		bra.w	AnimateSprite
0000E2B8                            ; ===========================================================================
0000E2B8                            
0000E2B8                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E2B8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E2BE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E2C2 4E75                       		rts	
0000E2C4                            ; ===========================================================================
0000E2C4                            Ani_obj41:
0000E2C4                            	include "_anim\obj41.asm"
0000E2C4                            ; ---------------------------------------------------------------------------
0000E2C4                            ; Animation script - springs
0000E2C4                            ; ---------------------------------------------------------------------------
0000E2C4 0000                       		dc.w byte_DD02-Ani_obj41
0000E2C6 0000                       		dc.w byte_DD0E-Ani_obj41
0000E2C8 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E2D4 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E2E0                            		even
0000E2E0                            		even
0000E2E0                            
0000E2E0                            ; ---------------------------------------------------------------------------
0000E2E0                            ; Sprite mappings - springs
0000E2E0                            ; ---------------------------------------------------------------------------
0000E2E0                            Map_obj41:
0000E2E0                            	include "_maps\obj41.asm"
0000E2E0                            ; ---------------------------------------------------------------------------
0000E2E0                            ; Sprite mappings - springs
0000E2E0                            ; ---------------------------------------------------------------------------
0000E2E0 0000                       		dc.w byte_DD26-Map_obj41
0000E2E2 0000                       		dc.w byte_DD31-Map_obj41
0000E2E4 0000                       		dc.w byte_DD37-Map_obj41
0000E2E6 0000                       		dc.w byte_DD47-Map_obj41
0000E2E8 0000                       		dc.w byte_DD4D-Map_obj41
0000E2EA 0000                       		dc.w byte_DD53-Map_obj41
0000E2EC 02                         byte_DD26:	dc.b 2
0000E2ED F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E2F2 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E2F7 01                         byte_DD31:	dc.b 1
0000E2F8 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2FD 03                         byte_DD37:	dc.b 3
0000E2FE E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E303 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E308 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E30D 01                         byte_DD47:	dc.b 1
0000E30E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E313 01                         byte_DD4D:	dc.b 1
0000E314 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E319 04                         byte_DD53:	dc.b 4
0000E31A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E31F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E324 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E329 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E32E                            		even
0000E32E                            		even
0000E32E                            
0000E32E                            ; ===========================================================================
0000E32E                            ; ---------------------------------------------------------------------------
0000E32E                            ; Object 42 - Newtron enemy (GHZ)
0000E32E                            ; ---------------------------------------------------------------------------
0000E32E                            
0000E32E                            Obj42:					; XREF: Obj_Index
0000E32E 7000                       		moveq	#0,d0
0000E330 1028 0024                  		move.b	$24(a0),d0
0000E334 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E338 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E33C                            ; ===========================================================================
0000E33C 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E33E 0000                       		dc.w Obj42_Action-Obj42_Index
0000E340 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E342                            ; ===========================================================================
0000E342                            
0000E342                            Obj42_Main:				; XREF: Obj42_Index
0000E342 5428 0024                  		addq.b	#2,$24(a0)
0000E346 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E34E 317C 049B 0002             		move.w	#$49B,2(a0)
0000E354 117C 0004 0001             		move.b	#4,1(a0)
0000E35A 117C 0004 0018             		move.b	#4,$18(a0)
0000E360 117C 0014 0019             		move.b	#$14,$19(a0)
0000E366 117C 0010 0016             		move.b	#$10,$16(a0)
0000E36C 117C 0008 0017             		move.b	#8,$17(a0)
0000E372                            
0000E372                            Obj42_Action:				; XREF: Obj42_Index
0000E372 7000                       		moveq	#0,d0
0000E374 1028 0025                  		move.b	$25(a0),d0
0000E378 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E37C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E380 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E386 6100 C91A                  		bsr.w	AnimateSprite
0000E38A 6000 0000                  		bra.w	MarkObjGone
0000E38E                            ; ===========================================================================
0000E38E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E390 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E392 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E394 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E396 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E398                            ; ===========================================================================
0000E398                            
0000E398                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E398 08E8 0000 0022             		bset	#0,$22(a0)
0000E39E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3A2 9068 0008                  		sub.w	8(a0),d0
0000E3A6 6400                       		bcc.s	loc_DDEA
0000E3A8 4440                       		neg.w	d0
0000E3AA 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3B0                            
0000E3B0                            loc_DDEA:
0000E3B0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E3B4 6400                       		bcc.s	locret_DE12	; if not, branch
0000E3B6 5428 0025                  		addq.b	#2,$25(a0)
0000E3BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3C0 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3C4 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3C6 317C 249B 0002             		move.w	#$249B,2(a0)
0000E3CC 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E3D2 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E3D8                            
0000E3D8                            locret_DE12:
0000E3D8 4E75                       		rts	
0000E3DA                            ; ===========================================================================
0000E3DA                            
0000E3DA                            Obj42_Type00:				; XREF: Obj42_Index2
0000E3DA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E3E0 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E3E2 08E8 0000 0022             		bset	#0,$22(a0)
0000E3E8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3EC 9068 0008                  		sub.w	8(a0),d0
0000E3F0 6400                       		bcc.s	locret_DE32
0000E3F2 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3F8                            
0000E3F8                            locret_DE32:
0000E3F8 4E75                       		rts	
0000E3FA                            ; ===========================================================================
0000E3FA                            
0000E3FA                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3FA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E400 6600                       		bne.s	loc_DE42
0000E402 117C 000C 0020             		move.b	#$C,$20(a0)
0000E408                            
0000E408                            loc_DE42:
0000E408 6100 F770                  		bsr.w	ObjectFall
0000E40C 6100 0000                  		bsr.w	ObjHitFloor
0000E410 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E412 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E414 D368 000C                  		add.w	d1,$C(a0)
0000E418 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E41E 5428 0025                  		addq.b	#2,$25(a0)
0000E422 117C 0002 001C             		move.b	#2,$1C(a0)
0000E428 0828 0005 0002             		btst	#5,2(a0)
0000E42E 6700                       		beq.s	Obj42_Move
0000E430 5228 001C                  		addq.b	#1,$1C(a0)
0000E434                            
0000E434                            Obj42_Move:
0000E434 117C 000D 0020             		move.b	#$D,$20(a0)
0000E43A 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E440 0828 0000 0022             		btst	#0,$22(a0)
0000E446 6600                       		bne.s	locret_DE86
0000E448 4468 0010                  		neg.w	$10(a0)
0000E44C                            
0000E44C                            locret_DE86:
0000E44C 4E75                       		rts	
0000E44E                            ; ===========================================================================
0000E44E                            
0000E44E                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E44E 6100 F756                  		bsr.w	SpeedToPos
0000E452 6100 0000                  		bsr.w	ObjHitFloor
0000E456 0C41 FFF8                  		cmpi.w	#-8,d1
0000E45A 6D00                       		blt.s	loc_DEA2
0000E45C 0C41 000C                  		cmpi.w	#$C,d1
0000E460 6C00                       		bge.s	loc_DEA2
0000E462 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E466 4E75                       		rts	
0000E468                            ; ===========================================================================
0000E468                            
0000E468                            loc_DEA2:
0000E468 5428 0025                  		addq.b	#2,$25(a0)
0000E46C 4E75                       		rts	
0000E46E                            ; ===========================================================================
0000E46E                            
0000E46E                            Obj42_Speed:				; XREF: Obj42_Index2
0000E46E 6100 F736                  		bsr.w	SpeedToPos
0000E472 4E75                       		rts	
0000E474                            ; ===========================================================================
0000E474                            
0000E474                            Obj42_Type01:				; XREF: Obj42_Index2
0000E474 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E47A 6600                       		bne.s	Obj42_FireMissile
0000E47C 117C 000C 0020             		move.b	#$C,$20(a0)
0000E482                            
0000E482                            Obj42_FireMissile:
0000E482 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E488 6600                       		bne.s	locret_DF14
0000E48A 4A28 0032                  		tst.b	$32(a0)
0000E48E 6600                       		bne.s	locret_DF14
0000E490 117C 0001 0032             		move.b	#1,$32(a0)
0000E496 6100 FBBA                  		bsr.w	SingleObjLoad
0000E49A 6600                       		bne.s	locret_DF14
0000E49C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E4A0 3368 0008 0008             		move.w	8(a0),8(a1)
0000E4A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E4AC 5169 000C                  		subq.w	#8,$C(a1)
0000E4B0 337C 0200 0010             		move.w	#$200,$10(a1)
0000E4B6 303C 0014                  		move.w	#$14,d0
0000E4BA 0828 0000 0022             		btst	#0,$22(a0)
0000E4C0 6600                       		bne.s	loc_DF04
0000E4C2 4440                       		neg.w	d0
0000E4C4 4469 0010                  		neg.w	$10(a1)
0000E4C8                            
0000E4C8                            loc_DF04:
0000E4C8 D169 0008                  		add.w	d0,8(a1)
0000E4CC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E4D2 137C 0001 0028             		move.b	#1,$28(a1)
0000E4D8                            
0000E4D8                            locret_DF14:
0000E4D8 4E75                       		rts	
0000E4DA                            ; ===========================================================================
0000E4DA                            
0000E4DA                            Obj42_Delete:				; XREF: Obj42_Index
0000E4DA 6000 F72C                  		bra.w	DeleteObject
0000E4DE                            ; ===========================================================================
0000E4DE                            Ani_obj42:
0000E4DE                            	include "_anim\obj42.asm"
0000E4DE                            ; ---------------------------------------------------------------------------
0000E4DE                            ; Animation script - Newtron enemy
0000E4DE                            ; ---------------------------------------------------------------------------
0000E4DE 0000                       		dc.w byte_DF24-Ani_obj42
0000E4E0 0000                       		dc.w byte_DF28-Ani_obj42
0000E4E2 0000                       		dc.w byte_DF30-Ani_obj42
0000E4E4 0000                       		dc.w byte_DF34-Ani_obj42
0000E4E6 0000                       		dc.w byte_DF38-Ani_obj42
0000E4E8 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E4EC 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E4F4 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E4F8 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4FC 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E506                            		even
0000E506                            		even
0000E506                            
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            ; Sprite mappings - Newtron enemy (GHZ)
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            Map_obj42:
0000E506                            	include "_maps\obj42.asm"
0000E506                            ; ---------------------------------------------------------------------------
0000E506                            ; Sprite mappings - Newtron enemy (GHZ)
0000E506                            ; ---------------------------------------------------------------------------
0000E506 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E50A 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E50E 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E512 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E516 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E51A 0000                       		dc.w byte_DFF8-Map_obj42
0000E51C 03                         byte_DF58:	dc.b 3
0000E51D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E522 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E527 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E52C 03                         byte_DF68:	dc.b 3
0000E52D EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E532 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E537 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E53C 03                         byte_DF78:	dc.b 3
0000E53D EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E542 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E547 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E54C 04                         byte_DF88:	dc.b 4
0000E54D EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E552 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E557 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E55C 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E561 03                         byte_DF9D:	dc.b 3
0000E562 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E567 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E56C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E571 02                         byte_DFAD:	dc.b 2
0000E572 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E577 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E57C 03                         byte_DFB8:	dc.b 3
0000E57D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E582 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E587 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E58C 03                         byte_DFC8:	dc.b 3
0000E58D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E592 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E597 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E59C 03                         byte_DFD8:	dc.b 3
0000E59D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5A2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5A7 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E5AC 03                         byte_DFE8:	dc.b 3
0000E5AD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5B2 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5B7 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E5BC 00                         byte_DFF8:	dc.b 0
0000E5BE 00                         		even
0000E5BE 00                         		even
0000E5BE                            
0000E5BE                            ; ===========================================================================
0000E5BE                            ; ---------------------------------------------------------------------------
0000E5BE                            ; Object 43 - Roller enemy (SYZ)
0000E5BE                            ; ---------------------------------------------------------------------------
0000E5BE                            
0000E5BE                            Obj43:					; XREF: Obj_Index
0000E5BE 7000                       		moveq	#0,d0
0000E5C0 1028 0024                  		move.b	$24(a0),d0
0000E5C4 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E5C8 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E5CC                            ; ===========================================================================
0000E5CC 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E5CE 0000                       		dc.w Obj43_Action-Obj43_Index
0000E5D0                            ; ===========================================================================
0000E5D0                            
0000E5D0                            Obj43_Main:				; XREF: Obj43_Index
0000E5D0 117C 000E 0016             		move.b	#$E,$16(a0)
0000E5D6 117C 0008 0017             		move.b	#8,$17(a0)
0000E5DC 6100 F59C                  		bsr.w	ObjectFall
0000E5E0 6100 0000                  		bsr.w	ObjHitFloor
0000E5E4 4A41                       		tst.w	d1
0000E5E6 6A00                       		bpl.s	locret_E052
0000E5E8 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E5EC 317C 0000 0012             		move.w	#0,$12(a0)
0000E5F2 5428 0024                  		addq.b	#2,$24(a0)
0000E5F6 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5FE 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E604 117C 0004 0001             		move.b	#4,1(a0)
0000E60A 117C 0004 0018             		move.b	#4,$18(a0)
0000E610 117C 0010 0019             		move.b	#$10,$19(a0)
0000E616                            
0000E616                            locret_E052:
0000E616 4E75                       		rts	
0000E618                            ; ===========================================================================
0000E618                            
0000E618                            Obj43_Action:				; XREF: Obj43_Index
0000E618 7000                       		moveq	#0,d0
0000E61A 1028 0025                  		move.b	$25(a0),d0
0000E61E 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E622 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E626 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E62C 6100 C674                  		bsr.w	AnimateSprite
0000E630 3028 0008                  		move.w	8(a0),d0
0000E634 0240 FF80                  		andi.w	#$FF80,d0
0000E638 3238 F700                  		move.w	($FFFFF700).w,d1
0000E63C 0441 0080                  		subi.w	#$80,d1
0000E640 0241 FF80                  		andi.w	#$FF80,d1
0000E644 9041                       		sub.w	d1,d0
0000E646 0C40 0280                  		cmpi.w	#$280,d0
0000E64A 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E64E 6000 F57C                  		bra.w	DisplaySprite
0000E652                            ; ===========================================================================
0000E652                            
0000E652                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E652 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E656 7000                       		moveq	#0,d0
0000E658 1028 0023                  		move.b	$23(a0),d0
0000E65C 6700                       		beq.s	Obj43_Delete
0000E65E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E664                            
0000E664                            Obj43_Delete:
0000E664 6000 F5A2                  		bra.w	DeleteObject
0000E668                            ; ===========================================================================
0000E668 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E66A 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E66C 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E66E 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E670 3038 D008                  		move.w	($FFFFD008).w,d0
0000E674 0440 0100                  		subi.w	#$100,d0
0000E678 6500                       		bcs.s	loc_E0D2
0000E67A 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E67E 6500                       		bcs.s	loc_E0D2
0000E680 5828 0025                  		addq.b	#4,$25(a0)
0000E684 117C 0002 001C             		move.b	#2,$1C(a0)
0000E68A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E690 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E696                            
0000E696                            loc_E0D2:
0000E696 588F                       		addq.l	#4,sp
0000E698 4E75                       		rts	
0000E69A                            ; ===========================================================================
0000E69A                            
0000E69A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E69A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E6A0 6700                       		beq.s	loc_E0F8
0000E6A2 5368 0030                  		subq.w	#1,$30(a0)
0000E6A6 6A00                       		bpl.s	locret_E0F6
0000E6A8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E6AE 317C 0700 0010             		move.w	#$700,$10(a0)
0000E6B4 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E6BA                            
0000E6BA                            locret_E0F6:
0000E6BA 4E75                       		rts	
0000E6BC                            ; ===========================================================================
0000E6BC                            
0000E6BC                            loc_E0F8:
0000E6BC 5428 0025                  		addq.b	#2,$25(a0)
0000E6C0 4E75                       		rts	
0000E6C2                            ; ===========================================================================
0000E6C2                            
0000E6C2                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E6C2 6100 0000                  		bsr.w	Obj43_Stop
0000E6C6 6100 F4DE                  		bsr.w	SpeedToPos
0000E6CA 6100 0000                  		bsr.w	ObjHitFloor
0000E6CE 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6D2 6D00                       		blt.s	Obj43_Jump
0000E6D4 0C41 000C                  		cmpi.w	#$C,d1
0000E6D8 6C00                       		bge.s	Obj43_Jump
0000E6DA D368 000C                  		add.w	d1,$C(a0)
0000E6DE 4E75                       		rts	
0000E6E0                            ; ===========================================================================
0000E6E0                            
0000E6E0                            Obj43_Jump:
0000E6E0 5428 0025                  		addq.b	#2,$25(a0)
0000E6E4 08E8 0000 0032             		bset	#0,$32(a0)
0000E6EA 6700                       		beq.s	locret_E12E
0000E6EC 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E6F2                            
0000E6F2                            locret_E12E:
0000E6F2 4E75                       		rts	
0000E6F4                            ; ===========================================================================
0000E6F4                            
0000E6F4                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E6F4 6100 F484                  		bsr.w	ObjectFall
0000E6F8 4A68 0012                  		tst.w	$12(a0)
0000E6FC 6B00                       		bmi.s	locret_E150
0000E6FE 6100 0000                  		bsr.w	ObjHitFloor
0000E702 4A41                       		tst.w	d1
0000E704 6A00                       		bpl.s	locret_E150
0000E706 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E70A 5528 0025                  		subq.b	#2,$25(a0)
0000E70E 317C 0000 0012             		move.w	#0,$12(a0)
0000E714                            
0000E714                            locret_E150:
0000E714 4E75                       		rts	
0000E716                            
0000E716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E716                            
0000E716                            
0000E716                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E716 4A28 0032                  		tst.b	$32(a0)
0000E71A 6B00                       		bmi.s	locret_E188
0000E71C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E720 0440 0030                  		subi.w	#$30,d0
0000E724 9068 0008                  		sub.w	8(a0),d0
0000E728 6400                       		bcc.s	locret_E188
0000E72A 117C 0000 001C             		move.b	#0,$1C(a0)
0000E730 117C 000E 0020             		move.b	#$E,$20(a0)
0000E736 4268 0010                  		clr.w	$10(a0)
0000E73A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E740 117C 0002 0025             		move.b	#2,$25(a0)
0000E746 08E8 0007 0032             		bset	#7,$32(a0)
0000E74C                            
0000E74C                            locret_E188:
0000E74C 4E75                       		rts	
0000E74E                            ; End of function Obj43_Stop
0000E74E                            
0000E74E                            ; ===========================================================================
0000E74E                            Ani_obj43:
0000E74E                            	include "_anim\obj43.asm"
0000E74E                            ; ---------------------------------------------------------------------------
0000E74E                            ; Animation script - Roller enemy
0000E74E                            ; ---------------------------------------------------------------------------
0000E74E 0000                       		dc.w byte_E190-Ani_obj43
0000E750 0000                       		dc.w byte_E196-Ani_obj43
0000E752 0000                       		dc.w byte_E19C-Ani_obj43
0000E754 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E75A 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E760 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E766 00                         		even
0000E766 00                         		even
0000E766                            
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            ; Sprite mappings - Roller enemy (SYZ)
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            Map_obj43:
0000E766                            	include "_maps\obj43.asm"
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            ; Sprite mappings - Roller enemy (SYZ)
0000E766                            ; ---------------------------------------------------------------------------
0000E766 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E76A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E76E 0000                       		dc.w byte_E1CE-Map_obj43
0000E770 02                         byte_E1AC:	dc.b 2
0000E771 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E776 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E77B 02                         byte_E1B7:	dc.b 2
0000E77C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E781 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E786 01                         byte_E1C2:	dc.b 1
0000E787 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E78C 01                         byte_E1C8:	dc.b 1
0000E78D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E792 01                         byte_E1CE:	dc.b 1
0000E793 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E798                            		even
0000E798                            		even
0000E798                            
0000E798                            ; ===========================================================================
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            ; Object 44 - walls (GHZ)
0000E798                            ; ---------------------------------------------------------------------------
0000E798                            
0000E798                            Obj44:					; XREF: Obj_Index
0000E798 7000                       		moveq	#0,d0
0000E79A 1028 0024                  		move.b	$24(a0),d0
0000E79E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E7A2 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E7A6                            ; ===========================================================================
0000E7A6 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E7A8 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E7AA 0000                       		dc.w Obj44_Display-Obj44_Index
0000E7AC                            ; ===========================================================================
0000E7AC                            
0000E7AC                            Obj44_Main:				; XREF: Obj44_Index
0000E7AC 5428 0024                  		addq.b	#2,$24(a0)
0000E7B0 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E7B8 317C 434C 0002             		move.w	#$434C,2(a0)
0000E7BE 0028 0004 0001             		ori.b	#4,1(a0)
0000E7C4 117C 0008 0019             		move.b	#8,$19(a0)
0000E7CA 117C 0006 0018             		move.b	#6,$18(a0)
0000E7D0 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E7D6 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E7DC 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E7DE 5428 0024                  		addq.b	#2,$24(a0)
0000E7E2 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            Obj44_Solid:				; XREF: Obj44_Index
0000E7E4 323C 0013                  		move.w	#$13,d1
0000E7E8 343C 0028                  		move.w	#$28,d2
0000E7EC 6100 A71A                  		bsr.w	Obj44_SolidWall
0000E7F0                            
0000E7F0                            Obj44_Display:				; XREF: Obj44_Index
0000E7F0 6100 F3DA                  		bsr.w	DisplaySprite
0000E7F4 3028 0008                  		move.w	8(a0),d0
0000E7F8 0240 FF80                  		andi.w	#$FF80,d0
0000E7FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E800 0441 0080                  		subi.w	#$80,d1
0000E804 0241 FF80                  		andi.w	#$FF80,d1
0000E808 9041                       		sub.w	d1,d0
0000E80A 0C40 0280                  		cmpi.w	#$280,d0
0000E80E 6200 F3F8                  		bhi.w	DeleteObject
0000E812 4E75                       		rts	
0000E814                            ; ===========================================================================
0000E814                            ; ---------------------------------------------------------------------------
0000E814                            ; Sprite mappings - walls (GHZ)
0000E814                            ; ---------------------------------------------------------------------------
0000E814                            Map_obj44:
0000E814                            	include "_maps\obj44.asm"
0000E814                            ; ---------------------------------------------------------------------------
0000E814                            ; Sprite mappings - walls (GHZ)
0000E814                            ; ---------------------------------------------------------------------------
0000E814 0000                       		dc.w byte_E256-Map_obj44
0000E816 0000                       		dc.w byte_E26B-Map_obj44
0000E818 0000                       		dc.w byte_E280-Map_obj44
0000E81A 04                         byte_E256:	dc.b 4
0000E81B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E820 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E825 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E82A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E82F 04                         byte_E26B:	dc.b 4
0000E830 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E835 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E83A 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E83F 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E844 04                         byte_E280:	dc.b 4
0000E845 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E84A F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E84F 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E854 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E85A 00                         		even
0000E85A 00                         		even
0000E85A                            
0000E85A                            ; ===========================================================================
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            
0000E85A                            Obj13:					; XREF: Obj_Index
0000E85A 7000                       		moveq	#0,d0
0000E85C 1028 0024                  		move.b	$24(a0),d0
0000E860 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E864 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E868 6000 0000                  		bra.w	Obj14_ChkDel
0000E86C                            ; ===========================================================================
0000E86C 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E86E 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E870                            ; ---------------------------------------------------------------------------
0000E870                            ;
0000E870                            ; Lava ball production rates
0000E870                            ;
0000E870 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E876                            ; ===========================================================================
0000E876                            
0000E876                            Obj13_Main:				; XREF: Obj13_Index
0000E876 5428 0024                  		addq.b	#2,$24(a0)
0000E87A 1028 0028                  		move.b	$28(a0),d0
0000E87E E848                       		lsr.w	#4,d0
0000E880 0240 000F                  		andi.w	#$F,d0
0000E884 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E88A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E890 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E896                            
0000E896                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E896 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E89A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E89C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E8A2 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E8A6 6600                       		bne.s	locret_E302
0000E8A8 6100 F7A8                  		bsr.w	SingleObjLoad
0000E8AC 6600                       		bne.s	locret_E302
0000E8AE 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E8B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8BE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8C4                            
0000E8C4                            locret_E302:
0000E8C4 4E75                       		rts	
0000E8C6                            ; ===========================================================================
0000E8C6                            ; ---------------------------------------------------------------------------
0000E8C6                            ; Object 14 - lava balls (MZ, SLZ)
0000E8C6                            ; ---------------------------------------------------------------------------
0000E8C6                            
0000E8C6                            Obj14:					; XREF: Obj_Index
0000E8C6 7000                       		moveq	#0,d0
0000E8C8 1028 0024                  		move.b	$24(a0),d0
0000E8CC 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E8D0 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E8D4 6000 F2F6                  		bra.w	DisplaySprite
0000E8D8                            ; ===========================================================================
0000E8D8 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E8DA 0000                       		dc.w Obj14_Action-Obj14_Index
0000E8DC 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E8DE                            
0000E8DE FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E8E8 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E8F0                            ; ===========================================================================
0000E8F0                            
0000E8F0                            Obj14_Main:				; XREF: Obj14_Index
0000E8F0 5428 0024                  		addq.b	#2,$24(a0)
0000E8F4 117C 0008 0016             		move.b	#8,$16(a0)
0000E8FA 117C 0008 0017             		move.b	#8,$17(a0)
0000E900 217C 0000 B890 0004        		move.l	#Map_obj14,4(a0)
0000E908 317C 0345 0002             		move.w	#$345,2(a0)
0000E90E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E914 6600                       		bne.s	loc_E35A
0000E916 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E91C                            
0000E91C                            loc_E35A:
0000E91C 117C 0004 0001             		move.b	#4,1(a0)
0000E922 117C 0003 0018             		move.b	#3,$18(a0)
0000E928 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E92E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E934 4A28 0029                  		tst.b	$29(a0)
0000E938 6700                       		beq.s	Obj14_SetSpeed
0000E93A 5428 0018                  		addq.b	#2,$18(a0)
0000E93E                            
0000E93E                            Obj14_SetSpeed:
0000E93E 7000                       		moveq	#0,d0
0000E940 1028 0028                  		move.b	$28(a0),d0
0000E944 D040                       		add.w	d0,d0
0000E946 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E94C 117C 0008 0019             		move.b	#8,$19(a0)
0000E952 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E958 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E95A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E960 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E966 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E96C 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E972                            
0000E972                            Obj14_PlaySnd:
0000E972 303C 00AE                  		move.w	#$AE,d0
0000E976 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E97C                            
0000E97C                            Obj14_Action:				; XREF: Obj14_Index
0000E97C 7000                       		moveq	#0,d0
0000E97E 1028 0028                  		move.b	$28(a0),d0
0000E982 D040                       		add.w	d0,d0
0000E984 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E988 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E98C 6100 F218                  		bsr.w	SpeedToPos
0000E990 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E996 6100 C30A                  		bsr.w	AnimateSprite
0000E99A                            
0000E99A                            Obj14_ChkDel:				; XREF: Obj13
0000E99A 3028 0008                  		move.w	8(a0),d0
0000E99E 0240 FF80                  		andi.w	#$FF80,d0
0000E9A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9A6 0441 0080                  		subi.w	#$80,d1
0000E9AA 0241 FF80                  		andi.w	#$FF80,d1
0000E9AE 9041                       		sub.w	d1,d0
0000E9B0 0C40 0280                  		cmpi.w	#$280,d0
0000E9B4 6200 F252                  		bhi.w	DeleteObject
0000E9B8 4E75                       		rts	
0000E9BA                            ; ===========================================================================
0000E9BA 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9BE 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9C2 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9C6 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E9CA 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E9CC                            ; ===========================================================================
0000E9CC                            ; lavaball types 00-03 fly up and fall back down
0000E9CC                            
0000E9CC                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E9CC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E9D2 3028 0030                  		move.w	$30(a0),d0
0000E9D6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E9DA 6400                       		bcc.s	loc_E41E	; if not, branch
0000E9DC 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E9E0                            
0000E9E0                            loc_E41E:
0000E9E0 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9E6 4A68 0012                  		tst.w	$12(a0)
0000E9EA 6A00                       		bpl.s	locret_E430
0000E9EC 08E8 0001 0022             		bset	#1,$22(a0)
0000E9F2                            
0000E9F2                            locret_E430:
0000E9F2 4E75                       		rts	
0000E9F4                            ; ===========================================================================
0000E9F4                            ; lavaball type	04 flies up until it hits the ceiling
0000E9F4                            
0000E9F4                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E9F4 08E8 0001 0022             		bset	#1,$22(a0)
0000E9FA 6100 0000                  		bsr.w	ObjHitCeiling
0000E9FE 4A41                       		tst.w	d1
0000EA00 6A00                       		bpl.s	locret_E452
0000EA02 117C 0008 0028             		move.b	#8,$28(a0)
0000EA08 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA0E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EA14                            
0000EA14                            locret_E452:
0000EA14 4E75                       		rts	
0000EA16                            ; ===========================================================================
0000EA16                            ; lavaball type	05 falls down until it hits the	floor
0000EA16                            
0000EA16                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EA16 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA1C 6100 0000                  		bsr.w	ObjHitFloor
0000EA20 4A41                       		tst.w	d1
0000EA22 6A00                       		bpl.s	locret_E474
0000EA24 117C 0008 0028             		move.b	#8,$28(a0)
0000EA2A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA30 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA36                            
0000EA36                            locret_E474:
0000EA36 4E75                       		rts	
0000EA38                            ; ===========================================================================
0000EA38                            ; lavaball types 06-07 move sideways
0000EA38                            
0000EA38                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA38 08E8 0000 0022             		bset	#0,$22(a0)
0000EA3E 76F8                       		moveq	#-8,d3
0000EA40 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA44 4A41                       		tst.w	d1
0000EA46 6A00                       		bpl.s	locret_E498
0000EA48 117C 0008 0028             		move.b	#8,$28(a0)
0000EA4E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA54 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA5A                            
0000EA5A                            locret_E498:
0000EA5A 4E75                       		rts	
0000EA5C                            ; ===========================================================================
0000EA5C                            
0000EA5C                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA5C 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA62 7608                       		moveq	#8,d3
0000EA64 6100 0000                  		bsr.w	ObjHitWallRight
0000EA68 4A41                       		tst.w	d1
0000EA6A 6A00                       		bpl.s	locret_E4BC
0000EA6C 117C 0008 0028             		move.b	#8,$28(a0)
0000EA72 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA78 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA7E                            
0000EA7E                            locret_E4BC:
0000EA7E 4E75                       		rts	
0000EA80                            ; ===========================================================================
0000EA80                            
0000EA80                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA80 4E75                       		rts	
0000EA82                            ; ===========================================================================
0000EA82                            
0000EA82                            Obj14_Delete:				; XREF: Obj14_Index
0000EA82 6000 F184                  		bra.w	DeleteObject
0000EA86                            ; ===========================================================================
0000EA86                            Ani_obj14:
0000EA86                            	include "_anim\obj14.asm"
0000EA86                            ; ---------------------------------------------------------------------------
0000EA86                            ; Animation script - lava balls
0000EA86                            ; ---------------------------------------------------------------------------
0000EA86 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA88 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA8A 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA8C 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA8E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA94 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA98 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA9E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EAA2                            		even
0000EAA2                            		even
0000EAA2                            
0000EAA2                            ; ===========================================================================
0000EAA2                            ; ---------------------------------------------------------------------------
0000EAA2                            ; Object 6D - flame thrower (SBZ)
0000EAA2                            ; ---------------------------------------------------------------------------
0000EAA2                            
0000EAA2                            Obj6D:					; XREF: Obj_Index
0000EAA2 7000                       		moveq	#0,d0
0000EAA4 1028 0024                  		move.b	$24(a0),d0
0000EAA8 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EAAC 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EAB0                            ; ===========================================================================
0000EAB0 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EAB2 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EAB4                            ; ===========================================================================
0000EAB4                            
0000EAB4                            Obj6D_Main:				; XREF: Obj6D_Index
0000EAB4 5428 0024                  		addq.b	#2,$24(a0)
0000EAB8 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EAC0 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAC6 0028 0004 0001             		ori.b	#4,1(a0)
0000EACC 117C 0001 0018             		move.b	#1,$18(a0)
0000EAD2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAD8 117C 000C 0019             		move.b	#$C,$19(a0)
0000EADE 1028 0028                  		move.b	$28(a0),d0
0000EAE2 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EAE6 D040                       		add.w	d0,d0		; multiply by 2
0000EAE8 3140 0030                  		move.w	d0,$30(a0)
0000EAEC 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EAF0 1028 0028                  		move.b	$28(a0),d0
0000EAF4 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EAF8 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EAFA 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EAFE 117C 000A 0036             		move.b	#$A,$36(a0)
0000EB04 0828 0001 0022             		btst	#1,$22(a0)
0000EB0A 6700                       		beq.s	Obj6D_Action
0000EB0C 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB12 117C 0015 0036             		move.b	#$15,$36(a0)
0000EB18                            
0000EB18                            Obj6D_Action:				; XREF: Obj6D_Index
0000EB18 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EB1C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EB1E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB24 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB2A 6700                       		beq.s	loc_E57A
0000EB2C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB32 303C 00B3                  		move.w	#$B3,d0
0000EB36 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB3C                            
0000EB3C                            loc_E57A:
0000EB3C 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB42 6100 C15E                  		bsr.w	AnimateSprite
0000EB46 117C 0000 0020             		move.b	#0,$20(a0)
0000EB4C 1028 0036                  		move.b	$36(a0),d0
0000EB50 B028 001A                  		cmp.b	$1A(a0),d0
0000EB54 6600                       		bne.s	Obj6D_ChkDel
0000EB56 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB5C                            
0000EB5C                            Obj6D_ChkDel:
0000EB5C 3028 0008                  		move.w	8(a0),d0
0000EB60 0240 FF80                  		andi.w	#$FF80,d0
0000EB64 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB68 0441 0080                  		subi.w	#$80,d1
0000EB6C 0241 FF80                  		andi.w	#$FF80,d1
0000EB70 9041                       		sub.w	d1,d0
0000EB72 0C40 0280                  		cmpi.w	#$280,d0
0000EB76 6200 F090                  		bhi.w	DeleteObject
0000EB7A 6000 F050                  		bra.w	DisplaySprite
0000EB7E                            ; ===========================================================================
0000EB7E                            Ani_obj6D:
0000EB7E                            	include "_anim\obj6D.asm"
0000EB7E                            ; ---------------------------------------------------------------------------
0000EB7E                            ; Animation script - flamethrower (SBZ)
0000EB7E                            ; ---------------------------------------------------------------------------
0000EB7E 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB80 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB82 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB84 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB86 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB94 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB9E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EBAC 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EBB6                            		even
0000EBB6                            		even
0000EBB6                            
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6                            ; Sprite mappings - flame thrower (SBZ)
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6                            Map_obj6D:
0000EBB6                            	include "_maps\obj6D.asm"
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6                            ; Sprite mappings - flame thrower (SBZ)
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EBBA 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EBBE 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EBC2 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBC6 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EBCA 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EBCE 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EBD2 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EBD6 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EBDA 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EBDE 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EBE2 01                         byte_E620:	dc.b 1
0000EBE3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBE8 02                         byte_E626:	dc.b 2
0000EBE9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBEE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBF3 02                         byte_E631:	dc.b 2
0000EBF4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBF9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBFE 03                         byte_E63C:	dc.b 3
0000EBFF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC04 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC09 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC0E 03                         byte_E64C:	dc.b 3
0000EC0F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC14 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC19 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC1E 04                         byte_E65C:	dc.b 4
0000EC1F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC24 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC29 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC2E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC33 04                         byte_E671:	dc.b 4
0000EC34 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC39 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC3E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC43 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC48 05                         byte_E686:	dc.b 5
0000EC49 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC4E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC53 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC58 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC5D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC62 05                         byte_E6A0:	dc.b 5
0000EC63 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC68 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC6D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC72 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC77 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC7C 06                         byte_E6BA:	dc.b 6
0000EC7D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC82 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC87 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC8C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC91 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC96 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC9B 06                         byte_E6D9:	dc.b 6
0000EC9C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ECA1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECA6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ECAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECB0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECB5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECBA 01                         byte_E6F8:	dc.b 1
0000ECBB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECC0 02                         byte_E6FE:	dc.b 2
0000ECC1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECC6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECCB 02                         byte_E709:	dc.b 2
0000ECCC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECD1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECD6 03                         byte_E714:	dc.b 3
0000ECD7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECDC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECE1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE6 03                         byte_E724:	dc.b 3
0000ECE7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECEC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECF6 04                         byte_E734:	dc.b 4
0000ECF7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECFC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED01 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED06 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED0B 04                         byte_E749:	dc.b 4
0000ED0C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED11 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED16 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED1B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED20 05                         byte_E75E:	dc.b 5
0000ED21 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED26 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED2B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED30 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED35 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED3A 05                         byte_E778:	dc.b 5
0000ED3B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED40 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED45 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED4A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED4F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED54 06                         byte_E792:	dc.b 6
0000ED55 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED5A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED5F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED64 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED69 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED6E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED73 06                         byte_E7B1:	dc.b 6
0000ED74 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED79 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED7E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED83 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED88 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED8D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED92                            		even
0000ED92                            		even
0000ED92                            
0000ED92                            ; ===========================================================================
0000ED92                            ; ---------------------------------------------------------------------------
0000ED92                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED92                            ; ---------------------------------------------------------------------------
0000ED92                            
0000ED92                            Obj46:					; XREF: Obj_Index
0000ED92 7000                       		moveq	#0,d0
0000ED94 1028 0024                  		move.b	$24(a0),d0
0000ED98 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED9C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EDA0                            ; ===========================================================================
0000EDA0 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EDA2 0000                       		dc.w Obj46_Action-Obj46_Index
0000EDA4                            ; ===========================================================================
0000EDA4                            
0000EDA4                            Obj46_Main:				; XREF: Obj46_Index
0000EDA4 5428 0024                  		addq.b	#2,$24(a0)
0000EDA8 117C 000F 0016             		move.b	#$F,$16(a0)
0000EDAE 117C 000F 0017             		move.b	#$F,$17(a0)
0000EDB4 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EDBC 317C 4000 0002             		move.w	#$4000,2(a0)
0000EDC2 117C 0004 0001             		move.b	#4,1(a0)
0000EDC8 117C 0003 0018             		move.b	#3,$18(a0)
0000EDCE 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDD4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDDA 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EDE0                            
0000EDE0                            Obj46_Action:				; XREF: Obj46_Index
0000EDE0 4A28 0001                  		tst.b	1(a0)
0000EDE4 6A00                       		bpl.s	Obj46_ChkDel
0000EDE6 7000                       		moveq	#0,d0
0000EDE8 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EDEC 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EDF0 D040                       		add.w	d0,d0
0000EDF2 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EDF6 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDFA 323C 001B                  		move.w	#$1B,d1
0000EDFE 343C 0010                  		move.w	#$10,d2
0000EE02 363C 0011                  		move.w	#$11,d3
0000EE06 3828 0008                  		move.w	8(a0),d4
0000EE0A 6100 0000                  		bsr.w	SolidObject
0000EE0E                            
0000EE0E                            Obj46_ChkDel:
0000EE0E 6100 EDBC                  		bsr.w	DisplaySprite
0000EE12 3028 0008                  		move.w	8(a0),d0
0000EE16 0240 FF80                  		andi.w	#$FF80,d0
0000EE1A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE1E 0441 0080                  		subi.w	#$80,d1
0000EE22 0241 FF80                  		andi.w	#$FF80,d1
0000EE26 9041                       		sub.w	d1,d0
0000EE28 0C40 0280                  		cmpi.w	#$280,d0
0000EE2C 6200 EDDA                  		bhi.w	DeleteObject
0000EE30 4E75                       		rts	
0000EE32                            ; ===========================================================================
0000EE32 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE34 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE36 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE38 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE3A 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE3C                            ; ===========================================================================
0000EE3C                            
0000EE3C                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE3C 4E75                       		rts	
0000EE3E                            ; ===========================================================================
0000EE3E                            
0000EE3E                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE3E 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE42 9068 0008                  		sub.w	8(a0),d0
0000EE46 6400                       		bcc.s	loc_E888
0000EE48 4440                       		neg.w	d0
0000EE4A                            
0000EE4A                            loc_E888:
0000EE4A 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE4E 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE50 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE56                            
0000EE56                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE56 7000                       		moveq	#0,d0
0000EE58 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE5C 0828 0003 0028             		btst	#3,$28(a0)
0000EE62 6700                       		beq.s	loc_E8A8
0000EE64 4440                       		neg.w	d0
0000EE66 0640 0010                  		addi.w	#$10,d0
0000EE6A                            
0000EE6A                            loc_E8A8:
0000EE6A 3228 0030                  		move.w	$30(a0),d1
0000EE6E 9240                       		sub.w	d0,d1
0000EE70 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE74 4E75                       		rts	
0000EE76                            ; ===========================================================================
0000EE76                            
0000EE76                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE76 6100 ED2E                  		bsr.w	SpeedToPos
0000EE7A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE80 6100 0000                  		bsr.w	ObjHitFloor
0000EE84 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE86 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE8A D368 000C                  		add.w	d1,$C(a0)
0000EE8E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE92 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE98 117C 0004 0028             		move.b	#4,$28(a0)
0000EE9E 3011                       		move.w	(a1),d0
0000EEA0 0240 03FF                  		andi.w	#$3FF,d0
0000EEA4 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EEA8 6400                       		bcc.s	locret_E8EE
0000EEAA 117C 0000 0028             		move.b	#0,$28(a0)
0000EEB0                            
0000EEB0                            locret_E8EE:
0000EEB0 4E75                       		rts	
0000EEB2                            ; ===========================================================================
0000EEB2                            
0000EEB2                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EEB2 7000                       		moveq	#0,d0
0000EEB4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EEB8 E648                       		lsr.w	#3,d0
0000EEBA 3228 0030                  		move.w	$30(a0),d1
0000EEBE 9240                       		sub.w	d0,d1
0000EEC0 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEC4 4E75                       		rts	
0000EEC6                            ; ===========================================================================
0000EEC6                            ; ---------------------------------------------------------------------------
0000EEC6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEC6                            ; ---------------------------------------------------------------------------
0000EEC6                            Map_obj46:
0000EEC6                            	include "_maps\obj46.asm"
0000EEC6                            ; ---------------------------------------------------------------------------
0000EEC6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEC6                            ; ---------------------------------------------------------------------------
0000EEC6 0000                       		dc.w byte_E906-Map_obj46
0000EEC8 01                         byte_E906:	dc.b 1
0000EEC9 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EECE                            		even
0000EECE                            		even
0000EECE                            
0000EECE                            ; ===========================================================================
0000EECE                            ; ---------------------------------------------------------------------------
0000EECE                            ; Object 12 - lamp (SYZ)
0000EECE                            ; ---------------------------------------------------------------------------
0000EECE                            
0000EECE                            Obj12:					; XREF: Obj_Index
0000EECE 7000                       		moveq	#0,d0
0000EED0 1028 0024                  		move.b	$24(a0),d0
0000EED4 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EED8 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EEDC                            ; ===========================================================================
0000EEDC 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EEDE 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EEE0                            ; ===========================================================================
0000EEE0                            
0000EEE0                            Obj12_Main:				; XREF: Obj12_Index
0000EEE0 5428 0024                  		addq.b	#2,$24(a0)
0000EEE4 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EEEC 317C 0000 0002             		move.w	#0,2(a0)
0000EEF2 117C 0004 0001             		move.b	#4,1(a0)
0000EEF8 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEFE 117C 0006 0018             		move.b	#6,$18(a0)
0000EF04                            
0000EF04                            Obj12_Animate:				; XREF: Obj12_Index
0000EF04 5328 001E                  		subq.b	#1,$1E(a0)
0000EF08 6A00                       		bpl.s	Obj12_ChkDel
0000EF0A 117C 0007 001E             		move.b	#7,$1E(a0)
0000EF10 5228 001A                  		addq.b	#1,$1A(a0)
0000EF14 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EF1A 6500                       		bcs.s	Obj12_ChkDel
0000EF1C 117C 0000 001A             		move.b	#0,$1A(a0)
0000EF22                            
0000EF22                            Obj12_ChkDel:
0000EF22 3028 0008                  		move.w	8(a0),d0
0000EF26 0240 FF80                  		andi.w	#$FF80,d0
0000EF2A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF2E 0441 0080                  		subi.w	#$80,d1
0000EF32 0241 FF80                  		andi.w	#$FF80,d1
0000EF36 9041                       		sub.w	d1,d0
0000EF38 0C40 0280                  		cmpi.w	#$280,d0
0000EF3C 6200 ECCA                  		bhi.w	DeleteObject
0000EF40 6000 EC8A                  		bra.w	DisplaySprite
0000EF44                            ; ===========================================================================
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44                            ; Sprite mappings - lamp (SYZ)
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44                            Map_obj12:
0000EF44                            	include "_maps\obj12.asm"
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44                            ; Sprite mappings - lamp (SYZ)
0000EF44                            ; ---------------------------------------------------------------------------
0000EF44 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF48 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF4C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF50 02                         byte_E98E:	dc.b 2
0000EF51 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF56 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF5B 02                         byte_E999:	dc.b 2
0000EF5C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF61 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF66 02                         byte_E9A4:	dc.b 2
0000EF67 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF6C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF71 02                         byte_E9AF:	dc.b 2
0000EF72 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF77 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF7C 02                         byte_E9BA:	dc.b 2
0000EF7D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF82 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF87 02                         byte_E9C5:	dc.b 2
0000EF88 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF8D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF92                            		even
0000EF92                            		even
0000EF92                            
0000EF92                            ; ===========================================================================
0000EF92                            ; ---------------------------------------------------------------------------
0000EF92                            ; Object 47 - pinball bumper (SYZ)
0000EF92                            ; ---------------------------------------------------------------------------
0000EF92                            
0000EF92                            Obj47:					; XREF: Obj_Index
0000EF92 7000                       		moveq	#0,d0
0000EF94 1028 0024                  		move.b	$24(a0),d0
0000EF98 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF9C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EFA0                            ; ===========================================================================
0000EFA0 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EFA2 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EFA4                            ; ===========================================================================
0000EFA4                            
0000EFA4                            Obj47_Main:				; XREF: Obj47_Index
0000EFA4 5428 0024                  		addq.b	#2,$24(a0)
0000EFA8 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EFB0 317C 0380 0002             		move.w	#$380,2(a0)
0000EFB6 117C 0004 0001             		move.b	#4,1(a0)
0000EFBC 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFC2 117C 0001 0018             		move.b	#1,$18(a0)
0000EFC8 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EFCE                            
0000EFCE                            Obj47_Hit:				; XREF: Obj47_Index
0000EFCE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EFD2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EFD6 4228 0021                  		clr.b	$21(a0)
0000EFDA 43F8 D000                  		lea	($FFFFD000).w,a1
0000EFDE 3228 0008                  		move.w	8(a0),d1
0000EFE2 3428 000C                  		move.w	$C(a0),d2
0000EFE6 9269 0008                  		sub.w	8(a1),d1
0000EFEA 9469 000C                  		sub.w	$C(a1),d2
0000EFEE 4EB9 0000 2F50             		jsr	(CalcAngle).l
0000EFF4 4EB9 0000 2C82             		jsr	(CalcSine).l
0000EFFA C3FC F900                  		muls.w	#-$700,d1
0000EFFE E081                       		asr.l	#8,d1
0000F000 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F004 C1FC F900                  		muls.w	#-$700,d0
0000F008 E080                       		asr.l	#8,d0
0000F00A 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F00E 08E9 0001 0022             		bset	#1,$22(a1)
0000F014 08A9 0004 0022             		bclr	#4,$22(a1)
0000F01A 08A9 0005 0022             		bclr	#5,$22(a1)
0000F020 4229 003C                  		clr.b	$3C(a1)
0000F024 117C 0001 001C             		move.b	#1,$1C(a0)
0000F02A 303C 00B4                  		move.w	#$B4,d0
0000F02E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F034 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F038 7000                       		moveq	#0,d0
0000F03A 1028 0023                  		move.b	$23(a0),d0
0000F03E 6700                       		beq.s	Obj47_Score
0000F040 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F046 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F048 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F04C                            
0000F04C                            Obj47_Score:
0000F04C 7001                       		moveq	#1,d0
0000F04E 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F054 6100 EFFC                  		bsr.w	SingleObjLoad
0000F058 6600                       		bne.s	Obj47_Display
0000F05A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F05E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F064 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F06A 137C 0004 001A             		move.b	#4,$1A(a1)
0000F070                            
0000F070                            Obj47_Display:
0000F070 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F076 6100 BC2A                  		bsr.w	AnimateSprite
0000F07A 3028 0008                  		move.w	8(a0),d0
0000F07E 0240 FF80                  		andi.w	#$FF80,d0
0000F082 3238 F700                  		move.w	($FFFFF700).w,d1
0000F086 0441 0080                  		subi.w	#$80,d1
0000F08A 0241 FF80                  		andi.w	#$FF80,d1
0000F08E 9041                       		sub.w	d1,d0
0000F090 0C40 0280                  		cmpi.w	#$280,d0
0000F094 6200                       		bhi.s	Obj47_ChkHit
0000F096 6000 EB34                  		bra.w	DisplaySprite
0000F09A                            ; ===========================================================================
0000F09A                            
0000F09A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F09A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F09E 7000                       		moveq	#0,d0
0000F0A0 1028 0023                  		move.b	$23(a0),d0
0000F0A4 6700                       		beq.s	Obj47_Delete
0000F0A6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F0AC                            
0000F0AC                            Obj47_Delete:
0000F0AC 6000 EB5A                  		bra.w	DeleteObject
0000F0B0                            ; ===========================================================================
0000F0B0                            Ani_obj47:
0000F0B0                            	include "_anim\obj47.asm"
0000F0B0                            ; ---------------------------------------------------------------------------
0000F0B0                            ; Animation script - flamethrower (SBZ)
0000F0B0                            ; ---------------------------------------------------------------------------
0000F0B0 0000                       		dc.w byte_EAF4-Ani_obj47
0000F0B2 0000                       		dc.w byte_EAF8-Ani_obj47
0000F0B4 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F0B8 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F0C0                            		even
0000F0C0                            		even
0000F0C0                            
0000F0C0                            ; ---------------------------------------------------------------------------
0000F0C0                            ; Sprite mappings - pinball bumper (SYZ)
0000F0C0                            ; ---------------------------------------------------------------------------
0000F0C0                            Map_obj47:
0000F0C0                            	include "_maps\obj47.asm"
0000F0C0                            ; ---------------------------------------------------------------------------
0000F0C0                            ; Sprite mappings - pinball bumper (SYZ)
0000F0C0                            ; ---------------------------------------------------------------------------
0000F0C0 0000                       		dc.w byte_EB06-Map_obj47
0000F0C2 0000                       		dc.w byte_EB11-Map_obj47
0000F0C4 0000                       		dc.w byte_EB1C-Map_obj47
0000F0C6 02                         byte_EB06:	dc.b 2
0000F0C7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F0CC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F0D1 02                         byte_EB11:	dc.b 2
0000F0D2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F0D7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F0DC 02                         byte_EB1C:	dc.b 2
0000F0DD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F0E2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F0E8 00                         		even
0000F0E8 00                         		even
0000F0E8                            
0000F0E8                            ; ===========================================================================
0000F0E8                            ; ---------------------------------------------------------------------------
0000F0E8                            ; Object 0D - signpost at the end of a level
0000F0E8                            ; ---------------------------------------------------------------------------
0000F0E8                            
0000F0E8                            Obj0D:					; XREF: Obj_Index
0000F0E8 7000                       		moveq	#0,d0
0000F0EA 1028 0024                  		move.b	$24(a0),d0
0000F0EE 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F0F2 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F0F6 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0FC 6100 BBA4                  		bsr.w	AnimateSprite
0000F100 6100 EACA                  		bsr.w	DisplaySprite
0000F104 3028 0008                  		move.w	8(a0),d0
0000F108 0240 FF80                  		andi.w	#$FF80,d0
0000F10C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F110 0441 0080                  		subi.w	#$80,d1
0000F114 0241 FF80                  		andi.w	#$FF80,d1
0000F118 9041                       		sub.w	d1,d0
0000F11A 0C40 0280                  		cmpi.w	#$280,d0
0000F11E 6200 EAE8                  		bhi.w	DeleteObject
0000F122 4E75                       		rts	
0000F124                            ; ===========================================================================
0000F124 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F126 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F128 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F12A 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F12C 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F12E                            ; ===========================================================================
0000F12E                            
0000F12E                            Obj0D_Main:				; XREF: Obj0D_Index
0000F12E 5428 0024                  		addq.b	#2,$24(a0)
0000F132 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F13A 317C 0680 0002             		move.w	#$680,2(a0)
0000F140 117C 0004 0001             		move.b	#4,1(a0)
0000F146 117C 0018 0019             		move.b	#$18,$19(a0)
0000F14C 117C 0004 0018             		move.b	#4,$18(a0)
0000F152                            
0000F152                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F152 3038 D008                  		move.w	($FFFFD008).w,d0
0000F156 9068 0008                  		sub.w	8(a0),d0
0000F15A 6500                       		bcs.s	locret_EBBA
0000F15C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F160 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F162 303C 00CF                  		move.w	#$CF,d0
0000F166 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F16C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F170 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F176 5428 0024                  		addq.b	#2,$24(a0)
0000F17A                            
0000F17A                            locret_EBBA:
0000F17A 4E75                       		rts	
0000F17C                            ; ===========================================================================
0000F17C                            
0000F17C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F17C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F180 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F182 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F188 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F18C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F192 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F194 5428 0024                  		addq.b	#2,$24(a0)
0000F198                            
0000F198                            Obj0D_Sparkle:
0000F198 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F19C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F19E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F1A4 7000                       		moveq	#0,d0
0000F1A6 1028 0034                  		move.b	$34(a0),d0
0000F1AA 5428 0034                  		addq.b	#2,$34(a0)
0000F1AE 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F1B4 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F1B8 6100 EE98                  		bsr.w	SingleObjLoad
0000F1BC 6600                       		bne.s	locret_EC42
0000F1BE 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F1C2 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F1C8 101A                       		move.b	(a2)+,d0
0000F1CA 4880                       		ext.w	d0
0000F1CC D068 0008                  		add.w	8(a0),d0
0000F1D0 3340 0008                  		move.w	d0,8(a1)
0000F1D4 101A                       		move.b	(a2)+,d0
0000F1D6 4880                       		ext.w	d0
0000F1D8 D068 000C                  		add.w	$C(a0),d0
0000F1DC 3340 000C                  		move.w	d0,$C(a1)
0000F1E0 237C 0000 A440 0004        		move.l	#Map_obj25,4(a1)
0000F1E8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F1EE 137C 0004 0001             		move.b	#4,1(a1)
0000F1F4 137C 0002 0018             		move.b	#2,$18(a1)
0000F1FA 137C 0008 0019             		move.b	#8,$19(a1)
0000F200                            
0000F200                            locret_EC42:
0000F200 4E75                       		rts	
0000F202                            ; ===========================================================================
0000F202 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F204 0808                       		dc.b	8,   8
0000F206 F000                       		dc.b -$10,   0
0000F208 18F8                       		dc.b  $18,  -8
0000F20A 00F8                       		dc.b	0,  -8
0000F20C 1000                       		dc.b  $10,   0
0000F20E E808                       		dc.b -$18,   8
0000F210 1810                       		dc.b  $18, $10
0000F212                            ; ===========================================================================
0000F212                            
0000F212                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F212 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F216 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F21A 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F220 6600                       		bne.s	loc_EC70
0000F222 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F228 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F22E 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F230 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F236 6000                       		bra.s	loc_EC70
0000F238                            
0000F238                            Obj0D_MoveLeft:
0000F238 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F23E                            
0000F23E                            loc_EC70:
0000F23E 4A38 D000                  		tst.b	($FFFFD000).w
0000F242 6700                       		beq.s	loc_EC86
0000F244 3038 D008                  		move.w	($FFFFD008).w,d0
0000F248 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F24C 0641 0128                  		addi.w	#$128,d1
0000F250 B041                       		cmp.w	d1,d0
0000F252 6500                       		bcs.s	locret_ECEE
0000F254                            
0000F254                            loc_EC86:
0000F254 5428 0024                  		addq.b	#2,$24(a0)
0000F258                            
0000F258                            ; ---------------------------------------------------------------------------
0000F258                            ; Subroutine to	set up bonuses at the end of an	act
0000F258                            ; ---------------------------------------------------------------------------
0000F258                            
0000F258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F258                            
0000F258                            
0000F258                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F258 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F25C 6600                       		bne.s	locret_ECEE
0000F25E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F264 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F268 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F26C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F272 7010                       		moveq	#$10,d0
0000F274 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F27A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F280 7000                       		moveq	#0,d0
0000F282 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F286 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F28A 7200                       		moveq	#0,d1
0000F28C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F290 D041                       		add.w	d1,d0		; add up your time
0000F292 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F296 7214                       		moveq	#$14,d1
0000F298 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F29A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F29C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F29E                            
0000F29E                            loc_ECD0:
0000F29E D040                       		add.w	d0,d0
0000F2A0 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F2A6 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F2AA C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F2AE 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F2B2 303C 008E                  		move.w	#$8E,d0
0000F2B6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F2BC                            
0000F2BC                            locret_ECEE:
0000F2BC 4E75                       		rts	
0000F2BE                            ; End of function GotThroughAct
0000F2BE                            
0000F2BE                            ; ===========================================================================
0000F2BE 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F2D2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F2E8                            ; ===========================================================================
0000F2E8                            
0000F2E8                            locret_ED1A:				; XREF: Obj0D_Index
0000F2E8 4E75                       		rts	
0000F2EA                            ; ===========================================================================
0000F2EA                            Ani_obj0D:
0000F2EA                            	include "_anim\obj0D.asm"
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA                            ; Animation script - signpost
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA 0000                       		dc.w byte_ED24-Ani_obj0D
0000F2EC 0000                       		dc.w byte_ED28-Ani_obj0D
0000F2EE 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F2F0 0000                       		dc.w byte_ED34-Ani_obj0D
0000F2F2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F2F6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2FC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F302 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F306 00                         		even
0000F306 00                         		even
0000F306                            
0000F306                            ; ---------------------------------------------------------------------------
0000F306                            ; Sprite mappings - signpost
0000F306                            ; ---------------------------------------------------------------------------
0000F306                            Map_obj0D:
0000F306                            	include "_maps\obj0D.asm"
0000F306                            ; ---------------------------------------------------------------------------
0000F306                            ; Sprite mappings - signpost
0000F306                            ; ---------------------------------------------------------------------------
0000F306 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F30A 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F30E 0000                       		dc.w byte_ED73-Map_obj0D
0000F310 03                         byte_ED42:	dc.b 3
0000F311 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F316 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F31B 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F320 02                         byte_ED52:	dc.b 2
0000F321 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F326 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F32B 02                         byte_ED5D:	dc.b 2
0000F32C F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F331 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F336 02                         byte_ED68:	dc.b 2
0000F337 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F33C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F341 03                         byte_ED73:	dc.b 3
0000F342 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F347 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F34C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F352 00                         		even
0000F352 00                         		even
0000F352                            
0000F352                            ; ===========================================================================
0000F352                            ; ---------------------------------------------------------------------------
0000F352                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F352                            ; ---------------------------------------------------------------------------
0000F352                            
0000F352                            Obj4C:					; XREF: Obj_Index
0000F352 7000                       		moveq	#0,d0
0000F354 1028 0024                  		move.b	$24(a0),d0
0000F358 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F35C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F360 6000 0000                  		bra.w	Obj4D_ChkDel
0000F364                            ; ===========================================================================
0000F364 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F366 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F368 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F36A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F36C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F36E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F370                            ; ===========================================================================
0000F370                            
0000F370                            Obj4C_Main:				; XREF: Obj4C_Index
0000F370 5428 0024                  		addq.b	#2,$24(a0)
0000F374 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F37C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F382 117C 0004 0001             		move.b	#4,1(a0)
0000F388 117C 0001 0018             		move.b	#1,$18(a0)
0000F38E 117C 0038 0019             		move.b	#$38,$19(a0)
0000F394 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F39A                            
0000F39A                            loc_EDCC:				; XREF: Obj4C_Index
0000F39A 5368 0032                  		subq.w	#1,$32(a0)
0000F39E 6A00                       		bpl.s	locret_EDF0
0000F3A0 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F3A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F3AA 3228 000C                  		move.w	$C(a0),d1
0000F3AE B041                       		cmp.w	d1,d0
0000F3B0 6400                       		bcc.s	locret_EDF0
0000F3B2 0441 0170                  		subi.w	#$170,d1
0000F3B6 B041                       		cmp.w	d1,d0
0000F3B8 6500                       		bcs.s	locret_EDF0
0000F3BA 5428 0024                  		addq.b	#2,$24(a0)
0000F3BE                            
0000F3BE                            locret_EDF0:
0000F3BE 4E75                       		rts	
0000F3C0                            ; ===========================================================================
0000F3C0                            
0000F3C0                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F3C0 5428 0024                  		addq.b	#2,$24(a0)
0000F3C4 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F3C8 6600                       		bne.s	loc_EE18
0000F3CA 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F3CE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F3D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F3DA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F3E0 2348 003C                  		move.l	a0,$3C(a1)
0000F3E4                            
0000F3E4                            loc_EE18:
0000F3E4 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3EA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3EE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F3F0 117C 0004 001C             		move.b	#4,$1C(a0)
0000F3F6 6000                       		bra.s	Obj4C_Display
0000F3F8                            ; ===========================================================================
0000F3F8                            
0000F3F8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F3F8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3FC 08E9 0001 0022             		bset	#1,$22(a1)
0000F402 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F408 6000                       		bra.s	Obj4C_Display
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            loc_EE3E:				; XREF: Obj4C_Index
0000F40A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F40E 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F410 5428 0024                  		addq.b	#2,$24(a0)
0000F414 4E75                       		rts	
0000F416                            ; ===========================================================================
0000F416                            
0000F416                            Obj4C_Display:				; XREF: Obj4C_Index
0000F416 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F41C 6100 B884                  		bsr.w	AnimateSprite
0000F420 6100 E7AA                  		bsr.w	DisplaySprite
0000F424 4E75                       		rts	
0000F426                            ; ===========================================================================
0000F426                            
0000F426                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F426 117C 0000 001C             		move.b	#0,$1C(a0)
0000F42C 117C 0002 0024             		move.b	#2,$24(a0)
0000F432 4A28 0028                  		tst.b	$28(a0)
0000F436 6700 E7D0                  		beq.w	DeleteObject
0000F43A 4E75                       		rts	
0000F43C                            ; ===========================================================================
0000F43C                            ; ---------------------------------------------------------------------------
0000F43C                            ; Object 4D - lava geyser / lavafall (MZ)
0000F43C                            ; ---------------------------------------------------------------------------
0000F43C                            
0000F43C                            Obj4D:					; XREF: Obj_Index
0000F43C 7000                       		moveq	#0,d0
0000F43E 1028 0024                  		move.b	$24(a0),d0
0000F442 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F446 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F44A 6000 E780                  		bra.w	DisplaySprite
0000F44E                            ; ===========================================================================
0000F44E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F450 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F452 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F454 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F456                            
0000F456 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F45A                            ; ===========================================================================
0000F45A                            
0000F45A                            Obj4D_Main:				; XREF: Obj4D_Index
0000F45A 5428 0024                  		addq.b	#2,$24(a0)
0000F45E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F464 4A28 0028                  		tst.b	$28(a0)
0000F468 6700                       		beq.s	loc_EEA4
0000F46A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F470                            
0000F470                            loc_EEA4:
0000F470 7000                       		moveq	#0,d0
0000F472 1028 0028                  		move.b	$28(a0),d0
0000F476 D040                       		add.w	d0,d0
0000F478 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F47E 2248                       		movea.l	a0,a1
0000F480 7201                       		moveq	#1,d1
0000F482 6100                       		bsr.s	Obj4D_MakeLava
0000F484 6000                       		bra.s	loc_EF10
0000F486                            ; ===========================================================================
0000F486                            
0000F486                            Obj4D_Loop:
0000F486 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F48A 6600                       		bne.s	loc_EF0A
0000F48C                            
0000F48C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F48C 12BC 004D                  		move.b	#$4D,0(a1)
0000F490 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F498 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F49E 137C 0004 0001             		move.b	#4,1(a1)
0000F4A4 137C 0020 0019             		move.b	#$20,$19(a1)
0000F4AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4B6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4BC 137C 0001 0018             		move.b	#1,$18(a1)
0000F4C2 137C 0005 001C             		move.b	#5,$1C(a1)
0000F4C8 4A28 0028                  		tst.b	$28(a0)
0000F4CC 6700                       		beq.s	loc_EF0A
0000F4CE 137C 0002 001C             		move.b	#2,$1C(a1)
0000F4D4                            
0000F4D4                            loc_EF0A:
0000F4D4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F4D8 4E75                       		rts	
0000F4DA                            ; ===========================================================================
0000F4DA                            
0000F4DA                            loc_EF10:				; XREF: Obj4D_Main
0000F4DA 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F4E0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4E6 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F4EC 137C 0093 0020             		move.b	#$93,$20(a1)
0000F4F2 137C 0080 0016             		move.b	#$80,$16(a1)
0000F4F8 08E9 0004 0001             		bset	#4,1(a1)
0000F4FE 5829 0024                  		addq.b	#4,$24(a1)
0000F502 2348 003C                  		move.l	a0,$3C(a1)
0000F506 4A28 0028                  		tst.b	$28(a0)
0000F50A 6700                       		beq.s	Obj4D_PlaySnd
0000F50C 7200                       		moveq	#0,d1
0000F50E 6100 FF76                  		bsr.w	Obj4D_Loop
0000F512 5429 0024                  		addq.b	#2,$24(a1)
0000F516 08E9 0004 0002             		bset	#4,2(a1)
0000F51C 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F522 137C 0000 0018             		move.b	#0,$18(a1)
0000F528 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F52E 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F534 117C 0000 0028             		move.b	#0,$28(a0)
0000F53A                            
0000F53A                            Obj4D_PlaySnd:
0000F53A 303C 00C8                  		move.w	#$C8,d0
0000F53E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F544                            
0000F544                            Obj4D_Action:				; XREF: Obj4D_Index
0000F544 7000                       		moveq	#0,d0
0000F546 1028 0028                  		move.b	$28(a0),d0
0000F54A D040                       		add.w	d0,d0
0000F54C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F550 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F554 6100 E650                  		bsr.w	SpeedToPos
0000F558 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F55E 6100 B742                  		bsr.w	AnimateSprite
0000F562                            
0000F562                            Obj4D_ChkDel:				; XREF: Obj4C
0000F562 3028 0008                  		move.w	8(a0),d0
0000F566 0240 FF80                  		andi.w	#$FF80,d0
0000F56A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F56E 0441 0080                  		subi.w	#$80,d1
0000F572 0241 FF80                  		andi.w	#$FF80,d1
0000F576 9041                       		sub.w	d1,d0
0000F578 0C40 0280                  		cmpi.w	#$280,d0
0000F57C 6200 E68A                  		bhi.w	DeleteObject
0000F580 4E75                       		rts	
0000F582                            ; ===========================================================================
0000F582 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F584 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F586                            ; ===========================================================================
0000F586                            
0000F586                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F586 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F58C 3028 0030                  		move.w	$30(a0),d0
0000F590 B068 000C                  		cmp.w	$C(a0),d0
0000F594 6400                       		bcc.s	locret_EFDA
0000F596 5828 0024                  		addq.b	#4,$24(a0)
0000F59A 2268 003C                  		movea.l	$3C(a0),a1
0000F59E 137C 0003 001C             		move.b	#3,$1C(a1)
0000F5A4                            
0000F5A4                            locret_EFDA:
0000F5A4 4E75                       		rts	
0000F5A6                            ; ===========================================================================
0000F5A6                            
0000F5A6                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F5A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5AC 3028 0030                  		move.w	$30(a0),d0
0000F5B0 B068 000C                  		cmp.w	$C(a0),d0
0000F5B4 6400                       		bcc.s	locret_EFFA
0000F5B6 5828 0024                  		addq.b	#4,$24(a0)
0000F5BA 2268 003C                  		movea.l	$3C(a0),a1
0000F5BE 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5C4                            
0000F5C4                            locret_EFFA:
0000F5C4 4E75                       		rts	
0000F5C6                            ; ===========================================================================
0000F5C6                            
0000F5C6                            loc_EFFC:				; XREF: Obj4D_Index
0000F5C6 2268 003C                  		movea.l	$3C(a0),a1
0000F5CA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F5D0 6700 0000                  		beq.w	Obj4D_Delete
0000F5D4 3029 000C                  		move.w	$C(a1),d0
0000F5D8 0640 0060                  		addi.w	#$60,d0
0000F5DC 3140 000C                  		move.w	d0,$C(a0)
0000F5E0 9068 0030                  		sub.w	$30(a0),d0
0000F5E4 4440                       		neg.w	d0
0000F5E6 7208                       		moveq	#8,d1
0000F5E8 0C40 0040                  		cmpi.w	#$40,d0
0000F5EC 6C00                       		bge.s	loc_F026
0000F5EE 720B                       		moveq	#$B,d1
0000F5F0                            
0000F5F0                            loc_F026:
0000F5F0 0C40 0080                  		cmpi.w	#$80,d0
0000F5F4 6F00                       		ble.s	loc_F02E
0000F5F6 720E                       		moveq	#$E,d1
0000F5F8                            
0000F5F8                            loc_F02E:
0000F5F8 5328 001E                  		subq.b	#1,$1E(a0)
0000F5FC 6A00                       		bpl.s	loc_F04C
0000F5FE 117C 0007 001E             		move.b	#7,$1E(a0)
0000F604 5228 001B                  		addq.b	#1,$1B(a0)
0000F608 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F60E 6500                       		bcs.s	loc_F04C
0000F610 117C 0000 001B             		move.b	#0,$1B(a0)
0000F616                            
0000F616                            loc_F04C:
0000F616 1028 001B                  		move.b	$1B(a0),d0
0000F61A D001                       		add.b	d1,d0
0000F61C 1140 001A                  		move.b	d0,$1A(a0)
0000F620 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F624                            ; ===========================================================================
0000F624                            
0000F624                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F624 6000 E5E2                  		bra.w	DeleteObject
0000F628                            ; ===========================================================================
0000F628                            ; ---------------------------------------------------------------------------
0000F628                            ; Object 4E - advancing	wall of	lava (MZ)
0000F628                            ; ---------------------------------------------------------------------------
0000F628                            
0000F628                            Obj4E:					; XREF: Obj_Index
0000F628 7000                       		moveq	#0,d0
0000F62A 1028 0024                  		move.b	$24(a0),d0
0000F62E 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F632 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F636                            ; ===========================================================================
0000F636 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F638 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F63A 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F63C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F63E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F640                            ; ===========================================================================
0000F640                            
0000F640                            Obj4E_Main:				; XREF: Obj4E_Index
0000F640 5828 0024                  		addq.b	#4,$24(a0)
0000F644 2248                       		movea.l	a0,a1
0000F646 7201                       		moveq	#1,d1
0000F648 6000                       		bra.s	Obj4E_Main2
0000F64A                            ; ===========================================================================
0000F64A                            
0000F64A                            Obj4E_Loop:
0000F64A 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F64E 6600                       		bne.s	loc_F0C8
0000F650                            
0000F650                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F650 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F654 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F65C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F662 137C 0004 0001             		move.b	#4,1(a1)
0000F668 137C 0050 0019             		move.b	#$50,$19(a1)
0000F66E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F674 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F67A 137C 0001 0018             		move.b	#1,$18(a1)
0000F680 137C 0000 001C             		move.b	#0,$1C(a1)
0000F686 137C 0094 0020             		move.b	#$94,$20(a1)
0000F68C 2348 003C                  		move.l	a0,$3C(a1)
0000F690                            
0000F690                            loc_F0C8:
0000F690 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F694                            
0000F694 5C29 0024                  		addq.b	#6,$24(a1)
0000F698 137C 0004 001A             		move.b	#4,$1A(a1)
0000F69E                            
0000F69E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F69E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6A2 9068 0008                  		sub.w	8(a0),d0
0000F6A6 6400                       		bcc.s	Obj4E_ChkSonic
0000F6A8 4440                       		neg.w	d0
0000F6AA                            
0000F6AA                            Obj4E_ChkSonic:
0000F6AA 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F6AE 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F6B4 9068 000C                  		sub.w	$C(a0),d0
0000F6B8 6400                       		bcc.s	loc_F0F4
0000F6BA 4440                       		neg.w	d0
0000F6BC                            
0000F6BC                            loc_F0F4:
0000F6BC 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F6C0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6C2 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F6C8 6000                       		bra.s	Obj4E_Solid
0000F6CA                            ; ===========================================================================
0000F6CA                            
0000F6CA                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F6CA 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F6CE 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F6D0 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F6D6 5528 0024                  		subq.b	#2,$24(a0)
0000F6DA                            
0000F6DA                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F6DA 323C 002B                  		move.w	#$2B,d1
0000F6DE 343C 0018                  		move.w	#$18,d2
0000F6E2 3602                       		move.w	d2,d3
0000F6E4 5243                       		addq.w	#1,d3
0000F6E6 3828 0008                  		move.w	8(a0),d4
0000F6EA 1028 0024                  		move.b	$24(a0),d0
0000F6EE 3F00                       		move.w	d0,-(sp)
0000F6F0 6100 0000                  		bsr.w	SolidObject
0000F6F4 301F                       		move.w	(sp)+,d0
0000F6F6 1140 0024                  		move.b	d0,$24(a0)
0000F6FA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F700 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F702 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F706 4228 0036                  		clr.b	$36(a0)
0000F70A                            
0000F70A                            Obj4E_Animate:
0000F70A 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F710 6100 B590                  		bsr.w	AnimateSprite
0000F714 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F71A 6400                       		bcc.s	Obj4E_ChkDel
0000F71C 6100 E488                  		bsr.w	SpeedToPos
0000F720                            
0000F720                            Obj4E_ChkDel:
0000F720 6100 E4AA                  		bsr.w	DisplaySprite
0000F724 4A28 0036                  		tst.b	$36(a0)
0000F728 6600                       		bne.s	locret_F17E
0000F72A 3028 0008                  		move.w	8(a0),d0
0000F72E 0240 FF80                  		andi.w	#$FF80,d0
0000F732 3238 F700                  		move.w	($FFFFF700).w,d1
0000F736 0441 0080                  		subi.w	#$80,d1
0000F73A 0241 FF80                  		andi.w	#$FF80,d1
0000F73E 9041                       		sub.w	d1,d0
0000F740 0C40 0280                  		cmpi.w	#$280,d0
0000F744 6200                       		bhi.s	Obj4E_ChkGone
0000F746                            
0000F746                            locret_F17E:
0000F746 4E75                       		rts	
0000F748                            ; ===========================================================================
0000F748                            
0000F748                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F748 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F74C 7000                       		moveq	#0,d0
0000F74E 1028 0023                  		move.b	$23(a0),d0
0000F752 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F758 117C 0008 0024             		move.b	#8,$24(a0)
0000F75E 4E75                       		rts	
0000F760                            ; ===========================================================================
0000F760                            
0000F760                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F760 2268 003C                  		movea.l	$3C(a0),a1
0000F764 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F76A 6700                       		beq.s	Obj4E_Delete
0000F76C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F772 0468 0080 0008             		subi.w	#$80,8(a0)
0000F778 6000 E452                  		bra.w	DisplaySprite
0000F77C                            ; ===========================================================================
0000F77C                            
0000F77C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F77C 6000 E48A                  		bra.w	DeleteObject
0000F780                            ; ===========================================================================
0000F780                            ; ---------------------------------------------------------------------------
0000F780                            ; Object 54 - invisible	lava tag (MZ)
0000F780                            ; ---------------------------------------------------------------------------
0000F780                            
0000F780                            Obj54:					; XREF: Obj_Index
0000F780 7000                       		moveq	#0,d0
0000F782 1028 0024                  		move.b	$24(a0),d0
0000F786 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F78A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F78E                            ; ===========================================================================
0000F78E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F790 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F792                            
0000F792 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F796                            ; ===========================================================================
0000F796                            
0000F796                            Obj54_Main:				; XREF: Obj54_Index
0000F796 5428 0024                  		addq.b	#2,$24(a0)
0000F79A 7000                       		moveq	#0,d0
0000F79C 1028 0028                  		move.b	$28(a0),d0
0000F7A0 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F7A6 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F7AE 117C 0084 0001             		move.b	#$84,1(a0)
0000F7B4                            
0000F7B4                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F7B4 3028 0008                  		move.w	8(a0),d0
0000F7B8 0240 FF80                  		andi.w	#$FF80,d0
0000F7BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7C0 0441 0080                  		subi.w	#$80,d1
0000F7C4 0241 FF80                  		andi.w	#$FF80,d1
0000F7C8 9041                       		sub.w	d1,d0
0000F7CA 6B00 E43C                  		bmi.w	DeleteObject
0000F7CE 0C40 0280                  		cmpi.w	#$280,d0
0000F7D2 6200 E434                  		bhi.w	DeleteObject
0000F7D6 4E75                       		rts	
0000F7D8                            ; ===========================================================================
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            ; Sprite mappings - invisible lava tag (MZ)
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            Map_obj54:
0000F7D8                            	include "_maps\obj54.asm"
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8                            ; Sprite mappings - invisible lava tag (MZ)
0000F7D8                            ; ---------------------------------------------------------------------------
0000F7D8 0000                       		dc.w byte_F212-Map_obj54
0000F7DA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F7DC 00                         		even
0000F7DC 00                         		even
0000F7DC                            
0000F7DC                            Ani_obj4C:
0000F7DC                            	include "_anim\obj4C.asm"
0000F7DC                            ; ---------------------------------------------------------------------------
0000F7DC                            ; Animation script - geyser of lava (MZ)
0000F7DC                            ; ---------------------------------------------------------------------------
0000F7DC 0000                       		dc.w byte_F220-Ani_obj4C
0000F7DE 0000                       		dc.w byte_F22A-Ani_obj4C
0000F7E0 0000                       		dc.w byte_F22E-Ani_obj4C
0000F7E2 0000                       		dc.w byte_F232-Ani_obj4C
0000F7E4 0000                       		dc.w byte_F23A-Ani_obj4C
0000F7E6 0000                       		dc.w byte_F23E-Ani_obj4C
0000F7E8 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F7F2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F7F6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7FA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F802 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F806 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F80A                            		even
0000F80A                            		even
0000F80A                            
0000F80A                            Ani_obj4E:
0000F80A                            	include "_anim\obj4E.asm"
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A                            ; Animation script - advancing wall of lava (MZ)
0000F80A                            ; ---------------------------------------------------------------------------
0000F80A 0000                       		dc.w byte_F244-Ani_obj4E
0000F80C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F812                            		even
0000F812                            		even
0000F812                            
0000F812                            ; ---------------------------------------------------------------------------
0000F812                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F812                            ; ---------------------------------------------------------------------------
0000F812                            Map_obj4C:
0000F812                            	include "_maps\obj4C.asm"
0000F812                            ; ---------------------------------------------------------------------------
0000F812                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F812                            ; ---------------------------------------------------------------------------
0000F812 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F816 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F81A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F81E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F822 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F826 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F82A 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F82E 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F832 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F836 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F83A 02                         byte_F272:	dc.b 2
0000F83B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F840 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F845 02                         byte_F27D:	dc.b 2
0000F846 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F84B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F850 04                         byte_F288:	dc.b 4
0000F851 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F856 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F85B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F860 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F865 04                         byte_F29D:	dc.b 4
0000F866 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F86B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F870 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F875 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F87A 06                         byte_F2B2:	dc.b 6
0000F87B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F880 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F885 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F88A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F88F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F894 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F899 06                         byte_F2D1:	dc.b 6
0000F89A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F89F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F8A4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8A9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8AE E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F8B3 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F8B8 02                         byte_F2F0:	dc.b 2
0000F8B9 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F8BE E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F8C3 02                         byte_F2FB:	dc.b 2
0000F8C4 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F8C9 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F8CE 0A                         byte_F306:	dc.b $A
0000F8CF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F8D4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F8D9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F8DE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F8E3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F8E8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F8ED F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F8F2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F8F7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8FC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F901 0A                         byte_F339:	dc.b $A
0000F902 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F907 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F90C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F911 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F916 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F91B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F920 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F925 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F92A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F92F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F934 0A                         byte_F36C:	dc.b $A
0000F935 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F93A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F93F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F944 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F949 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F94E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F953 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F958 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F95D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F962 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F967 06                         byte_F39F:	dc.b 6
0000F968 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F96D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F972 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F977 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F97C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F981 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F986 06                         byte_F3BE:	dc.b 6
0000F987 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F98C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F991 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F996 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F99B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9A0 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9A5 06                         byte_F3DD:	dc.b 6
0000F9A6 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F9AB 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F9B0 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F9B5 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F9BA D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F9BF D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9C4 10                         byte_F3FC:	dc.b $10
0000F9C5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9CA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9CF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9D4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9D9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9DE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9E3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9E8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9ED 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9F2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9F7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9FC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FA01 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FA06 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FA0B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FA10 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FA15 10                         byte_F44D:	dc.b $10
0000FA16 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA1B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA20 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA25 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA2A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA2F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA34 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA39 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA3E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA43 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA48 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA4D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA52 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA57 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA5C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA61 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA66 10                         byte_F49E:	dc.b $10
0000FA67 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA6C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA71 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA76 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA7B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA80 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA85 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA8A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA8F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA94 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA99 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA9E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FAA3 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FAA8 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FAAD 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FAB2 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FAB7 06                         byte_F4EF:	dc.b 6
0000FAB8 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FABD E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FAC2 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAC7 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FACC D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FAD1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FAD6 06                         byte_F50E:	dc.b 6
0000FAD7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FADC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FAE1 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FAE6 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FAEB D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FAF0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FAF5 00                         byte_F52D:	dc.b 0
0000FAF6                            		even
0000FAF6                            		even
0000FAF6                            
0000FAF6                            ; ---------------------------------------------------------------------------
0000FAF6                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAF6                            ; ---------------------------------------------------------------------------
0000FAF6                            Map_obj4E:
0000FAF6                            	include "_maps\obj4E.asm"
0000FAF6                            ; ---------------------------------------------------------------------------
0000FAF6                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAF6                            ; ---------------------------------------------------------------------------
0000FAF6 0000                       		dc.w byte_F538-Map_obj4E
0000FAF8 0000                       		dc.w byte_F566-Map_obj4E
0000FAFA 0000                       		dc.w byte_F594-Map_obj4E
0000FAFC 0000                       		dc.w byte_F5C2-Map_obj4E
0000FAFE 0000                       		dc.w byte_F5F0-Map_obj4E
0000FB00 09                         byte_F538:	dc.b 9
0000FB01 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FB06 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB0B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB10 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB15 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB1A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB1F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB24 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB29 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB2E 09                         byte_F566:	dc.b 9
0000FB2F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB34 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB39 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB3E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB43 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB48 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB4D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB52 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB57 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB5C 09                         byte_F594:	dc.b 9
0000FB5D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB62 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB67 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB6C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB71 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB76 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB7B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB80 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB85 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB8A 09                         byte_F5C2:	dc.b 9
0000FB8B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB90 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB95 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB9A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB9F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBA4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBA9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBAE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBB3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBB8 08                         byte_F5F0:	dc.b 8
0000FBB9 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FBBE 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBC3 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBC8 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBCD E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBD2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBD7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBDC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBE2 00                         		even
0000FBE2 00                         		even
0000FBE2                            
0000FBE2                            ; ===========================================================================
0000FBE2                            ; ---------------------------------------------------------------------------
0000FBE2                            ; Object 40 - Moto Bug enemy (GHZ)
0000FBE2                            ; ---------------------------------------------------------------------------
0000FBE2                            
0000FBE2                            Obj40:					; XREF: Obj_Index
0000FBE2 7000                       		moveq	#0,d0
0000FBE4 1028 0024                  		move.b	$24(a0),d0
0000FBE8 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FBEC 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FBF0                            ; ===========================================================================
0000FBF0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FBF2 0000                       		dc.w Obj40_Action-Obj40_Index
0000FBF4 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FBF6 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FBF8                            ; ===========================================================================
0000FBF8                            
0000FBF8                            Obj40_Main:				; XREF: Obj40_Index
0000FBF8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FC00 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FC06 117C 0004 0001             		move.b	#4,1(a0)
0000FC0C 117C 0004 0018             		move.b	#4,$18(a0)
0000FC12 117C 0014 0019             		move.b	#$14,$19(a0)
0000FC18 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FC1C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FC1E 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC24 117C 0008 0017             		move.b	#8,$17(a0)
0000FC2A 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC30 6100 DF48                  		bsr.w	ObjectFall
0000FC34 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC3A 4A41                       		tst.w	d1
0000FC3C 6A00                       		bpl.s	locret_F68A
0000FC3E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC42 317C 0000 0012             		move.w	#0,$12(a0)
0000FC48 5428 0024                  		addq.b	#2,$24(a0)
0000FC4C 0868 0000 0022             		bchg	#0,$22(a0)
0000FC52                            
0000FC52                            locret_F68A:
0000FC52 4E75                       		rts	
0000FC54                            ; ===========================================================================
0000FC54                            
0000FC54                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC54 5828 0024                  		addq.b	#4,$24(a0)
0000FC58 6000 0000                  		bra.w	Obj40_Animate
0000FC5C                            ; ===========================================================================
0000FC5C                            
0000FC5C                            Obj40_Action:				; XREF: Obj40_Index
0000FC5C 7000                       		moveq	#0,d0
0000FC5E 1028 0025                  		move.b	$25(a0),d0
0000FC62 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC66 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC6A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC70 6100 B030                  		bsr.w	AnimateSprite
0000FC74                            
0000FC74                            ; ---------------------------------------------------------------------------
0000FC74                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC74                            ; ---------------------------------------------------------------------------
0000FC74                            
0000FC74                            MarkObjGone:
0000FC74 3028 0008                  		move.w	8(a0),d0
0000FC78 0240 FF80                  		andi.w	#$FF80,d0
0000FC7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC80 0441 0080                  		subi.w	#$80,d1
0000FC84 0241 FF80                  		andi.w	#$FF80,d1
0000FC88 9041                       		sub.w	d1,d0
0000FC8A 0C40 0280                  		cmpi.w	#$280,d0
0000FC8E 6200 0000                  		bhi.w	Mark_ChkGone
0000FC92 6000 DF38                  		bra.w	DisplaySprite
0000FC96                            ; ===========================================================================
0000FC96                            
0000FC96                            Mark_ChkGone:
0000FC96 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC9A 7000                       		moveq	#0,d0
0000FC9C 1028 0023                  		move.b	$23(a0),d0
0000FCA0 6700                       		beq.s	Mark_Delete
0000FCA2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCA8                            
0000FCA8                            Mark_Delete:
0000FCA8 6000 DF5E                  		bra.w	DeleteObject
0000FCAC                            
0000FCAC                            ; ===========================================================================
0000FCAC 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FCAE 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FCB0                            ; ===========================================================================
0000FCB0                            
0000FCB0                            Obj40_Move:				; XREF: Obj40_Index2
0000FCB0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FCB4 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FCB6 5428 0025                  		addq.b	#2,$25(a0)
0000FCBA 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FCC0 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCC6 0868 0000 0022             		bchg	#0,$22(a0)
0000FCCC 6600                       		bne.s	locret_F70A
0000FCCE 4468 0010                  		neg.w	$10(a0)		; change direction
0000FCD2                            
0000FCD2                            locret_F70A:
0000FCD2 4E75                       		rts	
0000FCD4                            ; ===========================================================================
0000FCD4                            
0000FCD4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FCD4 6100 DED0                  		bsr.w	SpeedToPos
0000FCD8 4EB9 0000 0000             		jsr	ObjHitFloor
0000FCDE 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCE2 6D00                       		blt.s	Obj40_Pause
0000FCE4 0C41 000C                  		cmpi.w	#$C,d1
0000FCE8 6C00                       		bge.s	Obj40_Pause
0000FCEA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCEE 5328 0033                  		subq.b	#1,$33(a0)
0000FCF2 6A00                       		bpl.s	locret_F756
0000FCF4 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCFA 6100 E356                  		bsr.w	SingleObjLoad
0000FCFE 6600                       		bne.s	locret_F756
0000FD00 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FD04 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD10 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FD16 137C 0002 001C             		move.b	#2,$1C(a1)
0000FD1C                            
0000FD1C                            locret_F756:
0000FD1C 4E75                       		rts	
0000FD1E                            ; ===========================================================================
0000FD1E                            
0000FD1E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FD1E 5528 0025                  		subq.b	#2,$25(a0)
0000FD22 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD28 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD2E 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD34 4E75                       		rts	
0000FD36                            ; ===========================================================================
0000FD36                            
0000FD36                            Obj40_Animate:				; XREF: Obj40_Index
0000FD36 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD3C 6100 AF64                  		bsr.w	AnimateSprite
0000FD40 6000 DE8A                  		bra.w	DisplaySprite
0000FD44                            ; ===========================================================================
0000FD44                            
0000FD44                            Obj40_Delete:				; XREF: Obj40_Index
0000FD44 6000 DEC2                  		bra.w	DeleteObject
0000FD48                            ; ===========================================================================
0000FD48                            Ani_obj40:
0000FD48                            	include "_anim\obj40.asm"
0000FD48                            ; ---------------------------------------------------------------------------
0000FD48                            ; Animation script - Motobug enemy
0000FD48                            ; ---------------------------------------------------------------------------
0000FD48 0000                       		dc.w byte_F788-Ani_obj40
0000FD4A 0000                       		dc.w byte_F78C-Ani_obj40
0000FD4C 0000                       		dc.w byte_F792-Ani_obj40
0000FD4E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD52 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD58 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD66                            		even
0000FD66                            		even
0000FD66                            
0000FD66                            ; ---------------------------------------------------------------------------
0000FD66                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD66                            ; ---------------------------------------------------------------------------
0000FD66                            Map_obj40:
0000FD66                            	include "_maps\obj40.asm"
0000FD66                            Map_cedc:
0000FD66 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD68 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD6A 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD6C 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD6E 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD70 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD72 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD74 04                         Map_cedc_E: 	dc.b $4
0000FD75 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD7A 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD7F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD84 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD89 04                         Map_cedc_23: 	dc.b $4
0000FD8A F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD8F 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD94 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD99 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD9E 05                         Map_cedc_38: 	dc.b $5
0000FD9F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDA4 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FDA9 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDAE 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FDB3 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FDB8 01                         Map_cedc_52: 	dc.b $1
0000FDB9 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FDBE 01                         Map_cedc_58: 	dc.b $1
0000FDBF FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDC4 01                         Map_cedc_5E: 	dc.b $1
0000FDC5 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FDCA 00                         Map_cedc_64: 	dc.b $0
0000FDCC 00                         	even
0000FDCC 00                         	even
0000FDCC                            
0000FDCC                            ; ===========================================================================
0000FDCC                            ; ---------------------------------------------------------------------------
0000FDCC                            ; Object 4F - blank
0000FDCC                            ; ---------------------------------------------------------------------------
0000FDCC                            
0000FDCC                            Obj4F:					; XREF: Obj_Index
0000FDCC 4E75                       		rts	
0000FDCE                            
0000FDCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDCE                            
0000FDCE                            
0000FDCE                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FDCE 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FDD2 D047                       		add.w	d7,d0
0000FDD4 0240 0003                  		andi.w	#3,d0
0000FDD8 6600                       		bne.s	loc_F836
0000FDDA 7600                       		moveq	#0,d3
0000FDDC 1628 0019                  		move.b	$19(a0),d3
0000FDE0 4A68 0010                  		tst.w	$10(a0)
0000FDE4 6B00                       		bmi.s	loc_F82C
0000FDE6 6100 0000                  		bsr.w	ObjHitWallRight
0000FDEA 4A41                       		tst.w	d1
0000FDEC 6A00                       		bpl.s	loc_F836
0000FDEE                            
0000FDEE                            loc_F828:
0000FDEE 7001                       		moveq	#1,d0
0000FDF0 4E75                       		rts	
0000FDF2                            ; ===========================================================================
0000FDF2                            
0000FDF2                            loc_F82C:
0000FDF2 4643                       		not.w	d3
0000FDF4 6100 0000                  		bsr.w	ObjHitWallLeft
0000FDF8 4A41                       		tst.w	d1
0000FDFA 6BF2                       		bmi.s	loc_F828
0000FDFC                            
0000FDFC                            loc_F836:
0000FDFC 7000                       		moveq	#0,d0
0000FDFE 4E75                       		rts	
0000FE00                            ; End of function Obj50_ChkWall
0000FE00                            
0000FE00                            ; ===========================================================================
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00                            ; Object 50 - Yadrin enemy (SYZ)
0000FE00                            ; ---------------------------------------------------------------------------
0000FE00                            
0000FE00                            Obj50:					; XREF: Obj_Index
0000FE00 7000                       		moveq	#0,d0
0000FE02 1028 0024                  		move.b	$24(a0),d0
0000FE06 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FE0A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FE0E                            ; ===========================================================================
0000FE0E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FE10 0000                       		dc.w Obj50_Action-Obj50_Index
0000FE12                            ; ===========================================================================
0000FE12                            
0000FE12                            Obj50_Main:				; XREF: Obj50_Index
0000FE12 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FE1A 317C 247B 0002             		move.w	#$247B,2(a0)
0000FE20 117C 0004 0001             		move.b	#4,1(a0)
0000FE26 117C 0004 0018             		move.b	#4,$18(a0)
0000FE2C 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE32 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE38 117C 0008 0017             		move.b	#8,$17(a0)
0000FE3E 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE44 6100 DD34                  		bsr.w	ObjectFall
0000FE48 6100 0000                  		bsr.w	ObjHitFloor
0000FE4C 4A41                       		tst.w	d1
0000FE4E 6A00                       		bpl.s	locret_F89E
0000FE50 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE54 317C 0000 0012             		move.w	#0,$12(a0)
0000FE5A 5428 0024                  		addq.b	#2,$24(a0)
0000FE5E 0868 0000 0022             		bchg	#0,$22(a0)
0000FE64                            
0000FE64                            locret_F89E:
0000FE64 4E75                       		rts	
0000FE66                            ; ===========================================================================
0000FE66                            
0000FE66                            Obj50_Action:				; XREF: Obj50_Index
0000FE66 7000                       		moveq	#0,d0
0000FE68 1028 0025                  		move.b	$25(a0),d0
0000FE6C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE70 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE74 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE7A 6100 AE26                  		bsr.w	AnimateSprite
0000FE7E 6000 FDF4                  		bra.w	MarkObjGone
0000FE82                            ; ===========================================================================
0000FE82 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE84 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE86                            ; ===========================================================================
0000FE86                            
0000FE86                            Obj50_Move:				; XREF: Obj50_Index2
0000FE86 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE8A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE8C 5428 0025                  		addq.b	#2,$25(a0)
0000FE90 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE96 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE9C 0868 0000 0022             		bchg	#0,$22(a0)
0000FEA2 6600                       		bne.s	locret_F8E2
0000FEA4 4468 0010                  		neg.w	$10(a0)		; change direction
0000FEA8                            
0000FEA8                            locret_F8E2:
0000FEA8 4E75                       		rts	
0000FEAA                            ; ===========================================================================
0000FEAA                            
0000FEAA                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FEAA 6100 DCFA                  		bsr.w	SpeedToPos
0000FEAE 6100 0000                  		bsr.w	ObjHitFloor
0000FEB2 0C41 FFF8                  		cmpi.w	#-8,d1
0000FEB6 6D00                       		blt.s	Obj50_Pause
0000FEB8 0C41 000C                  		cmpi.w	#$C,d1
0000FEBC 6C00                       		bge.s	Obj50_Pause
0000FEBE D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FEC2 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEC6 6600                       		bne.s	Obj50_Pause
0000FEC8 4E75                       		rts	
0000FECA                            ; ===========================================================================
0000FECA                            
0000FECA                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FECA 5528 0025                  		subq.b	#2,$25(a0)
0000FECE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FED4 317C 0000 0010             		move.w	#0,$10(a0)
0000FEDA 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEE0 4E75                       		rts	
0000FEE2                            ; ===========================================================================
0000FEE2                            Ani_obj50:
0000FEE2                            	include "_anim\obj50.asm"
0000FEE2                            ; ---------------------------------------------------------------------------
0000FEE2                            ; Animation script - Yadrin enemy
0000FEE2                            ; ---------------------------------------------------------------------------
0000FEE2 0000                       		dc.w byte_F920-Ani_obj50
0000FEE4 0000                       		dc.w byte_F924-Ani_obj50
0000FEE6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FEEA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FEF4                            		even
0000FEF4                            		even
0000FEF4                            
0000FEF4                            ; ---------------------------------------------------------------------------
0000FEF4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEF4                            ; ---------------------------------------------------------------------------
0000FEF4                            Map_obj50:
0000FEF4                            	include "_maps\obj50.asm"
0000FEF4                            ; ---------------------------------------------------------------------------
0000FEF4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEF4                            ; ---------------------------------------------------------------------------
0000FEF4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FEF8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FEFC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FF00 05                         byte_F93A:	dc.b 5
0000FF01 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF06 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF0B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF10 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF15 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF1A 05                         byte_F954:	dc.b 5
0000FF1B F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF20 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF25 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF2A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF2F 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF34 05                         byte_F96E:	dc.b 5
0000FF35 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF3A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF3F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF44 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF49 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF4E 05                         byte_F988:	dc.b 5
0000FF4F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF54 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF59 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF5E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF63 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF68 05                         byte_F9A2:	dc.b 5
0000FF69 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF6E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF73 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF78 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF7D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF82 05                         byte_F9BC:	dc.b 5
0000FF83 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF88 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF8D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF92 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF97 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF9C                            		even
0000FF9C                            		even
0000FF9C                            
0000FF9C                            ; ---------------------------------------------------------------------------
0000FF9C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF9C                            ;
0000FF9C                            ; variables:
0000FF9C                            ; d1 = width
0000FF9C                            ; d2 = height /	2 (when	jumping)
0000FF9C                            ; d3 = height /	2 (when	walking)
0000FF9C                            ; d4 = x-axis position
0000FF9C                            ; ---------------------------------------------------------------------------
0000FF9C                            
0000FF9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF9C                            
0000FF9C                            
0000FF9C                            SolidObject:
0000FF9C 4A28 0025                  		tst.b	$25(a0)
0000FFA0 6700 0000                  		beq.w	loc_FAC8
0000FFA4 3401                       		move.w	d1,d2
0000FFA6 D442                       		add.w	d2,d2
0000FFA8 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFAC 0829 0001 0022             		btst	#1,$22(a1)
0000FFB2 6600                       		bne.s	loc_F9FE
0000FFB4 3029 0008                  		move.w	8(a1),d0
0000FFB8 9068 0008                  		sub.w	8(a0),d0
0000FFBC D041                       		add.w	d1,d0
0000FFBE 6B00                       		bmi.s	loc_F9FE
0000FFC0 B042                       		cmp.w	d2,d0
0000FFC2 6500                       		bcs.s	loc_FA12
0000FFC4                            
0000FFC4                            loc_F9FE:
0000FFC4 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFCA 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFD0 4228 0025                  		clr.b	$25(a0)
0000FFD4 7800                       		moveq	#0,d4
0000FFD6 4E75                       		rts	
0000FFD8                            ; ===========================================================================
0000FFD8                            
0000FFD8                            loc_FA12:
0000FFD8 3404                       		move.w	d4,d2
0000FFDA                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FFDA 7800                       		moveq	#0,d4
0000FFDC 4E75                       		rts	
0000FFDE                            ; ===========================================================================
0000FFDE                            
0000FFDE                            SolidObject71:				; XREF: Obj71_Solid
0000FFDE 4A28 0025                  		tst.b	$25(a0)
0000FFE2 6700 0000                  		beq.w	loc_FAD0
0000FFE6 3401                       		move.w	d1,d2
0000FFE8 D442                       		add.w	d2,d2
0000FFEA 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFEE 0829 0001 0022             		btst	#1,$22(a1)
0000FFF4 6600                       		bne.s	loc_FA44
0000FFF6 3029 0008                  		move.w	8(a1),d0
0000FFFA 9068 0008                  		sub.w	8(a0),d0
0000FFFE D041                       		add.w	d1,d0
00010000 6B00                       		bmi.s	loc_FA44
00010002 B042                       		cmp.w	d2,d0
00010004 6500                       		bcs.s	loc_FA58
00010006                            
00010006                            loc_FA44:
00010006 08A9 0003 0022             		bclr	#3,$22(a1)
0001000C 08A8 0003 0022             		bclr	#3,$22(a0)
00010012 4228 0025                  		clr.b	$25(a0)
00010016 7800                       		moveq	#0,d4
00010018 4E75                       		rts	
0001001A                            ; ===========================================================================
0001001A                            
0001001A                            loc_FA58:
0001001A 3404                       		move.w	d4,d2
0001001C                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001001C 7800                       		moveq	#0,d4
0001001E 4E75                       		rts	
00010020                            ; ===========================================================================
00010020                            
00010020                            SolidObject2F:				; XREF: Obj2F_Solid
00010020 43F8 D000                  		lea	($FFFFD000).w,a1
00010024 4A28 0001                  		tst.b	1(a0)
00010028 6A00 0000                  		bpl.w	loc_FB92
0001002C 3029 0008                  		move.w	8(a1),d0
00010030 9068 0008                  		sub.w	8(a0),d0
00010034 D041                       		add.w	d1,d0
00010036 6B00 0000                  		bmi.w	loc_FB92
0001003A 3601                       		move.w	d1,d3
0001003C D643                       		add.w	d3,d3
0001003E B043                       		cmp.w	d3,d0
00010040 6200 0000                  		bhi.w	loc_FB92
00010044 3A00                       		move.w	d0,d5
00010046 0828 0000 0001             		btst	#0,1(a0)
0001004C 6700                       		beq.s	loc_FA94
0001004E 4645                       		not.w	d5
00010050 DA43                       		add.w	d3,d5
00010052                            
00010052                            loc_FA94:
00010052 E24D                       		lsr.w	#1,d5
00010054 7600                       		moveq	#0,d3
00010056 1632 5000                  		move.b	(a2,d5.w),d3
0001005A 9612                       		sub.b	(a2),d3
0001005C 3A28 000C                  		move.w	$C(a0),d5
00010060 9A43                       		sub.w	d3,d5
00010062 1629 0016                  		move.b	$16(a1),d3
00010066 4883                       		ext.w	d3
00010068 D443                       		add.w	d3,d2
0001006A 3629 000C                  		move.w	$C(a1),d3
0001006E 9645                       		sub.w	d5,d3
00010070 5843                       		addq.w	#4,d3
00010072 D642                       		add.w	d2,d3
00010074 6B00 0000                  		bmi.w	loc_FB92
00010078 3802                       		move.w	d2,d4
0001007A D844                       		add.w	d4,d4
0001007C B644                       		cmp.w	d4,d3
0001007E 6400 0000                  		bcc.w	loc_FB92
00010082 6000 0000                  		bra.w	loc_FB0E
00010086                            ; ===========================================================================
00010086                            
00010086                            loc_FAC8:
00010086 4A28 0001                  		tst.b	1(a0)
0001008A 6A00 0000                  		bpl.w	loc_FB92
0001008E                            
0001008E                            loc_FAD0:
0001008E 43F8 D000                  		lea	($FFFFD000).w,a1
00010092 3029 0008                  		move.w	8(a1),d0
00010096 9068 0008                  		sub.w	8(a0),d0
0001009A D041                       		add.w	d1,d0
0001009C 6B00 0000                  		bmi.w	loc_FB92
000100A0 3601                       		move.w	d1,d3
000100A2 D643                       		add.w	d3,d3
000100A4 B043                       		cmp.w	d3,d0
000100A6 6200 0000                  		bhi.w	loc_FB92
000100AA 1629 0016                  		move.b	$16(a1),d3
000100AE 4883                       		ext.w	d3
000100B0 D443                       		add.w	d3,d2
000100B2 3629 000C                  		move.w	$C(a1),d3
000100B6 9668 000C                  		sub.w	$C(a0),d3
000100BA 5843                       		addq.w	#4,d3
000100BC D642                       		add.w	d2,d3
000100BE 6B00 0000                  		bmi.w	loc_FB92
000100C2 3802                       		move.w	d2,d4
000100C4 D844                       		add.w	d4,d4
000100C6 B644                       		cmp.w	d4,d3
000100C8 6400 0000                  		bcc.w	loc_FB92
000100CC                            
000100CC                            loc_FB0E:
000100CC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000100D0 6B00 0000                  		bmi.w	loc_FB92
000100D4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000100DA 6400 0000                  		bcc.w	loc_FB92
000100DE 4A78 FE08                  		tst.w	($FFFFFE08).w
000100E2 6600 0000                  		bne.w	loc_FBAC
000100E6 3A00                       		move.w	d0,d5
000100E8 B240                       		cmp.w	d0,d1
000100EA 6400                       		bcc.s	loc_FB36
000100EC D241                       		add.w	d1,d1
000100EE 9041                       		sub.w	d1,d0
000100F0 3A00                       		move.w	d0,d5
000100F2 4445                       		neg.w	d5
000100F4                            
000100F4                            loc_FB36:
000100F4 3203                       		move.w	d3,d1
000100F6 B443                       		cmp.w	d3,d2
000100F8 6400                       		bcc.s	loc_FB44
000100FA 5943                       		subq.w	#4,d3
000100FC 9644                       		sub.w	d4,d3
000100FE 3203                       		move.w	d3,d1
00010100 4441                       		neg.w	d1
00010102                            
00010102                            loc_FB44:
00010102 BA41                       		cmp.w	d1,d5
00010104 6200 0000                  		bhi.w	loc_FBB0
00010108 0C41 0004                  		cmpi.w	#4,d1
0001010C 6300                       		bls.s	loc_FB8C
0001010E 4A40                       		tst.w	d0
00010110 6700                       		beq.s	loc_FB70
00010112 6B00                       		bmi.s	loc_FB5E
00010114 4A69 0010                  		tst.w	$10(a1)
00010118 6B00                       		bmi.s	loc_FB70
0001011A 6000                       		bra.s	loc_FB64
0001011C                            ; ===========================================================================
0001011C                            
0001011C                            loc_FB5E:
0001011C 4A69 0010                  		tst.w	$10(a1)
00010120 6A00                       		bpl.s	loc_FB70
00010122                            
00010122                            loc_FB64:
00010122 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010128 337C 0000 0010             		move.w	#0,$10(a1)
0001012E                            
0001012E                            loc_FB70:
0001012E 9169 0008                  		sub.w	d0,8(a1)
00010132 0829 0001 0022             		btst	#1,$22(a1)
00010138 6600                       		bne.s	loc_FB8C
0001013A 08E9 0005 0022             		bset	#5,$22(a1)
00010140 08E8 0005 0022             		bset	#5,$22(a0)
00010146 7801                       		moveq	#1,d4
00010148 4E75                       		rts	
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            loc_FB8C:
0001014A 6100                       		bsr.s	loc_FBA0
0001014C 7801                       		moveq	#1,d4
0001014E 4E75                       		rts	
00010150                            ; ===========================================================================
00010150                            
00010150                            loc_FB92:
00010150 0828 0005 0022             		btst	#5,$22(a0)
00010156 6700                       		beq.s	loc_FBAC
00010158 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001015E                            
0001015E                            loc_FBA0:
0001015E 08A8 0005 0022             		bclr	#5,$22(a0)
00010164 08A9 0005 0022             		bclr	#5,$22(a1)
0001016A                            
0001016A                            loc_FBAC:
0001016A 7800                       		moveq	#0,d4
0001016C 4E75                       		rts	
0001016E                            ; ===========================================================================
0001016E                            
0001016E                            loc_FBB0:
0001016E 4A43                       		tst.w	d3
00010170 6B00                       		bmi.s	loc_FBBC
00010172 0C43 0010                  		cmpi.w	#$10,d3
00010176 6500                       		bcs.s	loc_FBEE
00010178 60D6                       		bra.s	loc_FB92
0001017A                            ; ===========================================================================
0001017A                            
0001017A                            loc_FBBC:
0001017A 4A69 0012                  		tst.w	$12(a1)
0001017E 6700                       		beq.s	loc_FBD6
00010180 6A00                       		bpl.s	loc_FBD2
00010182 4A43                       		tst.w	d3
00010184 6A00                       		bpl.s	loc_FBD2
00010186 9769 000C                  		sub.w	d3,$C(a1)
0001018A 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010190                            
00010190                            loc_FBD2:
00010190 78FF                       		moveq	#-1,d4
00010192 4E75                       		rts	
00010194                            ; ===========================================================================
00010194                            
00010194                            loc_FBD6:
00010194 0829 0001 0022             		btst	#1,$22(a1)
0001019A 66F4                       		bne.s	loc_FBD2
0001019C 2F08                       		move.l	a0,-(sp)
0001019E 2049                       		movea.l	a1,a0
000101A0 4EB9 0000 0000             		jsr	KillSonic
000101A6 205F                       		movea.l	(sp)+,a0
000101A8 78FF                       		moveq	#-1,d4
000101AA 4E75                       		rts	
000101AC                            ; ===========================================================================
000101AC                            
000101AC                            loc_FBEE:
000101AC 5943                       		subq.w	#4,d3
000101AE 7200                       		moveq	#0,d1
000101B0 1228 0019                  		move.b	$19(a0),d1
000101B4 3401                       		move.w	d1,d2
000101B6 D442                       		add.w	d2,d2
000101B8 D269 0008                  		add.w	8(a1),d1
000101BC 9268 0008                  		sub.w	8(a0),d1
000101C0 6B00                       		bmi.s	loc_FC28
000101C2 B242                       		cmp.w	d2,d1
000101C4 6400                       		bcc.s	loc_FC28
000101C6 4A69 0012                  		tst.w	$12(a1)
000101CA 6B00                       		bmi.s	loc_FC28
000101CC 9769 000C                  		sub.w	d3,$C(a1)
000101D0 5369 000C                  		subq.w	#1,$C(a1)
000101D4 6100                       		bsr.s	sub_FC2C
000101D6 117C 0002 0025             		move.b	#2,$25(a0)
000101DC 08E8 0003 0022             		bset	#3,$22(a0)
000101E2 78FF                       		moveq	#-1,d4
000101E4 4E75                       		rts	
000101E6                            ; ===========================================================================
000101E6                            
000101E6                            loc_FC28:
000101E6 7800                       		moveq	#0,d4
000101E8 4E75                       		rts	
000101EA                            ; End of function SolidObject
000101EA                            
000101EA                            
000101EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101EA                            
000101EA                            
000101EA                            sub_FC2C:				; XREF: SolidObject
000101EA 0829 0003 0022             		btst	#3,$22(a1)
000101F0 6700                       		beq.s	loc_FC4E
000101F2 7000                       		moveq	#0,d0
000101F4 1029 003D                  		move.b	$3D(a1),d0
000101F8 ED48                       		lsl.w	#6,d0
000101FA 0680 00FF D000             		addi.l	#$FFD000,d0
00010200 2440                       		movea.l	d0,a2
00010202 08AA 0003 0022             		bclr	#3,$22(a2)
00010208 422A 0025                  		clr.b	$25(a2)
0001020C                            
0001020C                            loc_FC4E:
0001020C 3008                       		move.w	a0,d0
0001020E 0440 D000                  		subi.w	#-$3000,d0
00010212 EC48                       		lsr.w	#6,d0
00010214 0240 007F                  		andi.w	#$7F,d0
00010218 1340 003D                  		move.b	d0,$3D(a1)
0001021C 137C 0000 0026             		move.b	#0,$26(a1)
00010222 337C 0000 0012             		move.w	#0,$12(a1)
00010228 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001022E 0829 0001 0022             		btst	#1,$22(a1)
00010234 6700                       		beq.s	loc_FC84
00010236 2F08                       		move.l	a0,-(sp)
00010238 2049                       		movea.l	a1,a0
0001023A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010240 205F                       		movea.l	(sp)+,a0
00010242                            
00010242                            loc_FC84:
00010242 08E9 0003 0022             		bset	#3,$22(a1)
00010248 08E8 0003 0022             		bset	#3,$22(a0)
0001024E 4E75                       		rts	
00010250                            ; End of function sub_FC2C
00010250                            
00010250                            ; ===========================================================================
00010250                            ; ---------------------------------------------------------------------------
00010250                            ; Object 51 - smashable	green block (MZ)
00010250                            ; ---------------------------------------------------------------------------
00010250                            
00010250                            Obj51:					; XREF: Obj_Index
00010250 7000                       		moveq	#0,d0
00010252 1028 0024                  		move.b	$24(a0),d0
00010256 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001025A 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001025E 6000 FA14                  		bra.w	MarkObjGone
00010262                            ; ===========================================================================
00010262 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010264 0000                       		dc.w Obj51_Solid-Obj51_Index
00010266 0000                       		dc.w Obj51_Display-Obj51_Index
00010268                            ; ===========================================================================
00010268                            
00010268                            Obj51_Main:				; XREF: Obj51_Index
00010268 5428 0024                  		addq.b	#2,$24(a0)
0001026C 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010274 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001027A 117C 0004 0001             		move.b	#4,1(a0)
00010280 117C 0010 0019             		move.b	#$10,$19(a0)
00010286 117C 0004 0018             		move.b	#4,$18(a0)
0001028C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010292                            
00010292                            Obj51_Solid:				; XREF: Obj51_Index
00010292 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010298 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001029E 323C 001B                  		move.w	#$1B,d1
000102A2 343C 0010                  		move.w	#$10,d2
000102A6 363C 0011                  		move.w	#$11,d3
000102AA 3828 0008                  		move.w	8(a0),d4
000102AE 6100 FCEC                  		bsr.w	SolidObject
000102B2 0828 0003 0022             		btst	#3,$22(a0)
000102B8 6600                       		bne.s	Obj51_Smash
000102BA                            
000102BA                            locret_FCFC:
000102BA 4E75                       		rts	
000102BC                            ; ===========================================================================
000102BC                            
000102BC                            Obj51_Smash:				; XREF: Obj51_Solid
000102BC 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000102C2 66F6                       		bne.s	locret_FCFC	; if not, branch
000102C4 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000102CA 08E9 0002 0022             		bset	#2,$22(a1)
000102D0 137C 000E 0016             		move.b	#$E,$16(a1)
000102D6 137C 0007 0017             		move.b	#7,$17(a1)
000102DC 137C 0002 001C             		move.b	#2,$1C(a1)
000102E2 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000102E8 08E9 0001 0022             		bset	#1,$22(a1)
000102EE 08A9 0003 0022             		bclr	#3,$22(a1)
000102F4 137C 0002 0024             		move.b	#2,$24(a1)
000102FA 08A8 0003 0022             		bclr	#3,$22(a0)
00010300 4228 0025                  		clr.b	$25(a0)
00010304 117C 0001 001A             		move.b	#1,$1A(a0)
0001030A 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010310 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010312 343C 0038                  		move.w	#$38,d2
00010316 6100 D4A2                  		bsr.w	SmashObject
0001031A 6100 DD36                  		bsr.w	SingleObjLoad
0001031E 6600                       		bne.s	Obj51_Display
00010320 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010324 3368 0008 0008             		move.w	8(a0),8(a1)
0001032A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010330 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010334 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010338 0C42 0006                  		cmpi.w	#6,d2
0001033C 6500                       		bcs.s	Obj51_Bonus
0001033E 7406                       		moveq	#6,d2
00010340                            
00010340                            Obj51_Bonus:
00010340 7000                       		moveq	#0,d0
00010342 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010346 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001034C 6500                       		bcs.s	loc_FD98	; if not, branch
0001034E 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010352 740A                       		moveq	#10,d2
00010354                            
00010354                            loc_FD98:
00010354 4EB9 0000 0000             		jsr	AddPoints
0001035A E24A                       		lsr.w	#1,d2
0001035C 1342 001A                  		move.b	d2,$1A(a1)
00010360                            
00010360                            Obj51_Display:				; XREF: Obj51_Index
00010360 6100 D844                  		bsr.w	SpeedToPos
00010364 0668 0038 0012             		addi.w	#$38,$12(a0)
0001036A 6100 D860                  		bsr.w	DisplaySprite
0001036E 4A28 0001                  		tst.b	1(a0)
00010372 6A00 D894                  		bpl.w	DeleteObject
00010376 4E75                       		rts	
00010378                            ; ===========================================================================
00010378 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001037C FF00 FF00                  		dc.w $FF00, $FF00
00010380 0200 FE00                  		dc.w $200, $FE00
00010384 0100 FF00                  		dc.w $100, $FF00
00010388                            
00010388 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010390                            ; ---------------------------------------------------------------------------
00010390                            ; Sprite mappings - smashable green block (MZ)
00010390                            ; ---------------------------------------------------------------------------
00010390                            Map_obj51:
00010390                            	include "_maps\obj51.asm"
00010390                            ; ---------------------------------------------------------------------------
00010390                            ; Sprite mappings - smashable green block (MZ)
00010390                            ; ---------------------------------------------------------------------------
00010390 0000                       		dc.w byte_FDD8-Map_obj51
00010392 0000                       		dc.w byte_FDE3-Map_obj51
00010394 02                         byte_FDD8:	dc.b 2
00010395 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001039A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001039F 04                         byte_FDE3:	dc.b 4
000103A0 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000103A5 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000103AA F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000103AF 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000103B4                            		even
000103B4                            		even
000103B4                            
000103B4                            ; ===========================================================================
000103B4                            ; ---------------------------------------------------------------------------
000103B4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000103B4                            ; ---------------------------------------------------------------------------
000103B4                            
000103B4                            Obj52:					; XREF: Obj_Index
000103B4 7000                       		moveq	#0,d0
000103B6 1028 0024                  		move.b	$24(a0),d0
000103BA 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000103BE 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000103C2                            ; ===========================================================================
000103C2 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103C4 0000                       		dc.w Obj52_Platform-Obj52_Index
000103C6 0000                       		dc.w Obj52_StandOn-Obj52_Index
000103C8                            
000103C8 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000103CA 2001                       		dc.b $20, 1
000103CC 2002                       		dc.b $20, 2
000103CE 4003                       		dc.b $40, 3
000103D0 3004                       		dc.b $30, 4
000103D2                            ; ===========================================================================
000103D2                            
000103D2                            Obj52_Main:				; XREF: Obj52_Index
000103D2 5428 0024                  		addq.b	#2,$24(a0)
000103D6 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000103DE 317C 42B8 0002             		move.w	#$42B8,2(a0)
000103E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103EA 6600                       		bne.s	loc_FE44
000103EC 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000103F4 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103FA 117C 0007 0016             		move.b	#7,$16(a0)
00010400                            
00010400                            loc_FE44:
00010400 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010406 6600                       		bne.s	loc_FE60
00010408 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001040E 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010414 6700                       		beq.s	loc_FE60	; if yes, branch
00010416 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001041C                            
0001041C                            loc_FE60:
0001041C 117C 0004 0001             		move.b	#4,1(a0)
00010422 7000                       		moveq	#0,d0
00010424 1028 0028                  		move.b	$28(a0),d0
00010428 E648                       		lsr.w	#3,d0
0001042A 0240 001E                  		andi.w	#$1E,d0
0001042E 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010432 115A 0019                  		move.b	(a2)+,$19(a0)
00010436 115A 001A                  		move.b	(a2)+,$1A(a0)
0001043A 117C 0004 0018             		move.b	#4,$18(a0)
00010440 3168 0008 0030             		move.w	8(a0),$30(a0)
00010446 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001044C 0228 000F 0028             		andi.b	#$F,$28(a0)
00010452                            
00010452                            Obj52_Platform:				; XREF: Obj52_Index
00010452 6100 0000                  		bsr.w	Obj52_Move
00010456 7200                       		moveq	#0,d1
00010458 1228 0019                  		move.b	$19(a0),d1
0001045C 4EB9 0000 78FE             		jsr	(PlatformObject).l
00010462 6000                       		bra.s	Obj52_ChkDel
00010464                            ; ===========================================================================
00010464                            
00010464                            Obj52_StandOn:				; XREF: Obj52_Index
00010464 7200                       		moveq	#0,d1
00010466 1228 0019                  		move.b	$19(a0),d1
0001046A 4EB9 0000 7A72             		jsr	(ExitPlatform).l
00010470 3F28 0008                  		move.w	8(a0),-(sp)
00010474 6100 0000                  		bsr.w	Obj52_Move
00010478 341F                       		move.w	(sp)+,d2
0001047A 4EB9 0000 7FDC             		jsr	(MvSonicOnPtfm2).l
00010480                            
00010480                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010480 3028 0030                  		move.w	$30(a0),d0
00010484 0240 FF80                  		andi.w	#$FF80,d0
00010488 3238 F700                  		move.w	($FFFFF700).w,d1
0001048C 0441 0080                  		subi.w	#$80,d1
00010490 0241 FF80                  		andi.w	#$FF80,d1
00010494 9041                       		sub.w	d1,d0
00010496 0C40 0280                  		cmpi.w	#$280,d0
0001049A 6200 D76C                  		bhi.w	DeleteObject
0001049E 6000 D72C                  		bra.w	DisplaySprite
000104A2                            ; ===========================================================================
000104A2                            
000104A2                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000104A2 7000                       		moveq	#0,d0
000104A4 1028 0028                  		move.b	$28(a0),d0
000104A8 0240 000F                  		andi.w	#$F,d0
000104AC D040                       		add.w	d0,d0
000104AE 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000104B2 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000104B6                            ; ===========================================================================
000104B6 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000104BA 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000104BE 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000104C2 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104C6 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000104CA 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000104CC                            ; ===========================================================================
000104CC                            
000104CC                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000104CC 4E75                       		rts	
000104CE                            ; ===========================================================================
000104CE                            
000104CE                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000104CE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000104D2 323C 0060                  		move.w	#$60,d1
000104D6 0828 0000 0022             		btst	#0,$22(a0)
000104DC 6700                       		beq.s	loc_FF26
000104DE 4440                       		neg.w	d0
000104E0 D041                       		add.w	d1,d0
000104E2                            
000104E2                            loc_FF26:
000104E2 3228 0030                  		move.w	$30(a0),d1
000104E6 9240                       		sub.w	d0,d1
000104E8 3141 0008                  		move.w	d1,8(a0)
000104EC 4E75                       		rts	
000104EE                            ; ===========================================================================
000104EE                            
000104EE                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000104EE 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000104F4 6600                       		bne.s	Obj52_02_Wait
000104F6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104FA                            
000104FA                            Obj52_02_Wait:
000104FA 4E75                       		rts	
000104FC                            ; ===========================================================================
000104FC                            
000104FC                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104FC 7600                       		moveq	#0,d3
000104FE 1628 0019                  		move.b	$19(a0),d3
00010502 6100 0000                  		bsr.w	ObjHitWallRight
00010506 4A41                       		tst.w	d1		; has the platform hit a wall?
00010508 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001050A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001050E 3168 0008 0030             		move.w	8(a0),$30(a0)
00010514 4E75                       		rts	
00010516                            ; ===========================================================================
00010516                            
00010516                            Obj52_03_End:
00010516 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001051A 4E75                       		rts	
0001051C                            ; ===========================================================================
0001051C                            
0001051C                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001051C 7600                       		moveq	#0,d3
0001051E 1628 0019                  		move.b	$19(a0),d3
00010522 6100 0000                  		bsr.w	ObjHitWallRight
00010526 4A41                       		tst.w	d1		; has the platform hit a wall?
00010528 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001052A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001052E 3168 0008 0030             		move.w	8(a0),$30(a0)
00010534 4E75                       		rts	
00010536                            ; ===========================================================================
00010536                            
00010536                            Obj52_05_End:
00010536 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001053A 4E75                       		rts	
0001053C                            ; ===========================================================================
0001053C                            
0001053C                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001053C 6100 D668                  		bsr.w	SpeedToPos
00010540 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010546 6100 0000                  		bsr.w	ObjHitFloor
0001054A 4A41                       		tst.w	d1		; has platform hit the floor?
0001054C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010550 D368 000C                  		add.w	d1,$C(a0)
00010554 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010558 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001055C                            
0001055C                            locret_FFA0:
0001055C 4E75                       		rts	
0001055E                            ; ===========================================================================
0001055E                            
0001055E                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001055E 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010562 6700                       		beq.s	Obj52_07_ChkDel
00010564 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010568                            
00010568                            Obj52_07_ChkDel:
00010568 588F                       		addq.l	#4,sp
0001056A 3028 0030                  		move.w	$30(a0),d0
0001056E 0240 FF80                  		andi.w	#$FF80,d0
00010572 3238 F700                  		move.w	($FFFFF700).w,d1
00010576 0441 0080                  		subi.w	#$80,d1
0001057A 0241 FF80                  		andi.w	#$FF80,d1
0001057E 9041                       		sub.w	d1,d0
00010580 0C40 0280                  		cmpi.w	#$280,d0
00010584 6200 D682                  		bhi.w	DeleteObject
00010588 4E75                       		rts	
0001058A                            ; ===========================================================================
0001058A                            
0001058A                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001058A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001058E 323C 0080                  		move.w	#$80,d1
00010592 0828 0000 0022             		btst	#0,$22(a0)
00010598 6700                       		beq.s	loc_FFE2
0001059A 4440                       		neg.w	d0
0001059C D041                       		add.w	d1,d0
0001059E                            
0001059E                            loc_FFE2:
0001059E 3228 0032                  		move.w	$32(a0),d1
000105A2 9240                       		sub.w	d0,d1
000105A4 3141 000C                  		move.w	d1,$C(a0)
000105A8 4E75                       		rts	
000105AA                            ; ===========================================================================
000105AA                            
000105AA                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000105AA 7600                       		moveq	#0,d3
000105AC 1628 0019                  		move.b	$19(a0),d3
000105B0 D643                       		add.w	d3,d3
000105B2 7208                       		moveq	#8,d1
000105B4 0828 0000 0022             		btst	#0,$22(a0)
000105BA 6700                       		beq.s	loc_10004
000105BC 4441                       		neg.w	d1
000105BE 4443                       		neg.w	d3
000105C0                            
000105C0                            loc_10004:
000105C0 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105C4 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105C6 3028 0008                  		move.w	8(a0),d0
000105CA 9068 0030                  		sub.w	$30(a0),d0
000105CE B043                       		cmp.w	d3,d0
000105D0 6700                       		beq.s	Obj52_0A_Wait
000105D2 D368 0008                  		add.w	d1,8(a0)	; move platform
000105D6 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000105DC 4E75                       		rts	
000105DE                            ; ===========================================================================
000105DE                            
000105DE                            Obj52_0A_Wait:
000105DE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000105E2 6600                       		bne.s	locret_1002E	; if time remains, branch
000105E4 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000105EA                            
000105EA                            locret_1002E:
000105EA 4E75                       		rts	
000105EC                            ; ===========================================================================
000105EC                            
000105EC                            Obj52_0A_Back:
000105EC 3028 0008                  		move.w	8(a0),d0
000105F0 9068 0030                  		sub.w	$30(a0),d0
000105F4 6700                       		beq.s	Obj52_0A_Reset
000105F6 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105FA 4E75                       		rts	
000105FC                            ; ===========================================================================
000105FC                            
000105FC                            Obj52_0A_Reset:
000105FC 4268 0036                  		clr.w	$36(a0)
00010600 5328 0028                  		subq.b	#1,$28(a0)
00010604 4E75                       		rts	
00010606                            ; ===========================================================================
00010606                            ; ---------------------------------------------------------------------------
00010606                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010606                            ; ---------------------------------------------------------------------------
00010606                            Map_obj52:
00010606                            	include "_maps\obj52mz.asm"
00010606                            ; ---------------------------------------------------------------------------
00010606                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010606                            ; ---------------------------------------------------------------------------
00010606 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001060A 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001060E 0000                       		dc.w byte_1008F-Map_obj52
00010610 01                         byte_10054:	dc.b 1
00010611 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010616 02                         byte_1005A:	dc.b 2
00010617 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001061C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010621 04                         byte_10065:	dc.b 4
00010622 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010627 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001062C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010631 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010636 04                         byte_1007A:	dc.b 4
00010637 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001063C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010641 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010646 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001064B 03                         byte_1008F:	dc.b 3
0001064C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010651 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010656 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001065C 00                         		even
0001065C 00                         		even
0001065C                            
0001065C                            ; ---------------------------------------------------------------------------
0001065C                            ; Sprite mappings - moving block (LZ)
0001065C                            ; ---------------------------------------------------------------------------
0001065C                            Map_obj52a:
0001065C                            	include "_maps\obj52lz.asm"
0001065C                            ; ---------------------------------------------------------------------------
0001065C                            ; Sprite mappings - moving block (LZ)
0001065C                            ; ---------------------------------------------------------------------------
0001065C 0000                       		dc.w byte_100A2-Map_obj52a
0001065E 01                         byte_100A2:	dc.b 1
0001065F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010664                            		even
00010664                            		even
00010664                            
00010664                            ; ===========================================================================
00010664                            ; ---------------------------------------------------------------------------
00010664                            ; Object 55 - Basaran enemy (MZ)
00010664                            ; ---------------------------------------------------------------------------
00010664                            
00010664                            Obj55:					; XREF: Obj_Index
00010664 7000                       		moveq	#0,d0
00010666 1028 0024                  		move.b	$24(a0),d0
0001066A 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001066E 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010672                            ; ===========================================================================
00010672 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010674 0000                       		dc.w Obj55_Action-Obj55_Index
00010676                            ; ===========================================================================
00010676                            
00010676                            Obj55_Main:				; XREF: Obj55_Index
00010676 5428 0024                  		addq.b	#2,$24(a0)
0001067A 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010682 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010688 117C 0004 0001             		move.b	#4,1(a0)
0001068E 117C 000C 0016             		move.b	#$C,$16(a0)
00010694 117C 0002 0018             		move.b	#2,$18(a0)
0001069A 117C 000B 0020             		move.b	#$B,$20(a0)
000106A0 117C 0010 0019             		move.b	#$10,$19(a0)
000106A6                            
000106A6                            Obj55_Action:				; XREF: Obj55_Index
000106A6 7000                       		moveq	#0,d0
000106A8 1028 0025                  		move.b	$25(a0),d0
000106AC 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000106B0 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000106B4 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000106BA 6100 A5E6                  		bsr.w	AnimateSprite
000106BE 6000 F5B4                  		bra.w	MarkObjGone
000106C2                            ; ===========================================================================
000106C2 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106C4 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106C6 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000106C8 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000106CA                            ; ===========================================================================
000106CA                            
000106CA                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000106CA 343C 0080                  		move.w	#$80,d2
000106CE 6100 0000                  		bsr.w	Obj55_ChkSonic
000106D2 6400                       		bcc.s	Obj55_NoDrop
000106D4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106D8 3140 0036                  		move.w	d0,$36(a0)
000106DC 9068 000C                  		sub.w	$C(a0),d0
000106E0 6500                       		bcs.s	Obj55_NoDrop
000106E2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000106E6 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000106E8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000106EC 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000106EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106F2 D007                       		add.b	d7,d0
000106F4 0200 0007                  		andi.b	#7,d0
000106F8 6600                       		bne.s	Obj55_NoDrop
000106FA 117C 0001 001C             		move.b	#1,$1C(a0)
00010700 5428 0025                  		addq.b	#2,$25(a0)
00010704                            
00010704                            Obj55_NoDrop:
00010704 4E75                       		rts	
00010706                            ; ===========================================================================
00010706                            
00010706                            Obj55_DropFly:				; XREF: Obj55_Index2
00010706 6100 D49E                  		bsr.w	SpeedToPos
0001070A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010710 343C 0080                  		move.w	#$80,d2
00010714 6100 0000                  		bsr.w	Obj55_ChkSonic
00010718 3028 0036                  		move.w	$36(a0),d0
0001071C 9068 000C                  		sub.w	$C(a0),d0
00010720 6500                       		bcs.s	Obj55_ChkDel
00010722 0C40 0010                  		cmpi.w	#$10,d0
00010726 6400                       		bcc.s	locret_10180
00010728 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001072C 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010732 117C 0002 001C             		move.b	#2,$1C(a0)
00010738 5428 0025                  		addq.b	#2,$25(a0)
0001073C                            
0001073C                            locret_10180:
0001073C 4E75                       		rts	
0001073E                            ; ===========================================================================
0001073E                            
0001073E                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001073E 4A28 0001                  		tst.b	1(a0)
00010742 6A00 D4C4                  		bpl.w	DeleteObject
00010746 4E75                       		rts	
00010748                            ; ===========================================================================
00010748                            
00010748                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010748 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001074C 0200 000F                  		andi.b	#$F,d0
00010750 6600                       		bne.s	loc_101A0
00010752 303C 00C0                  		move.w	#$C0,d0
00010756 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
0001075C                            
0001075C                            loc_101A0:
0001075C 6100 D448                  		bsr.w	SpeedToPos
00010760 3038 D008                  		move.w	($FFFFD008).w,d0
00010764 9068 0008                  		sub.w	8(a0),d0
00010768 6400                       		bcc.s	loc_101B0
0001076A 4440                       		neg.w	d0
0001076C                            
0001076C                            loc_101B0:
0001076C 0C40 0080                  		cmpi.w	#$80,d0
00010770 6500                       		bcs.s	locret_101C6
00010772 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010776 D007                       		add.b	d7,d0
00010778 0200 0007                  		andi.b	#7,d0
0001077C 6600                       		bne.s	locret_101C6
0001077E 5428 0025                  		addq.b	#2,$25(a0)
00010782                            
00010782                            locret_101C6:
00010782 4E75                       		rts	
00010784                            ; ===========================================================================
00010784                            
00010784                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010784 6100 D420                  		bsr.w	SpeedToPos
00010788 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001078E 6100 0000                  		bsr.w	ObjHitCeiling
00010792 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010794 6A00                       		bpl.s	locret_101F4	; if not, branch
00010796 9368 000C                  		sub.w	d1,$C(a0)
0001079A 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000107A0 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000107A4 4268 0012                  		clr.w	$12(a0)
000107A8 4228 001C                  		clr.b	$1C(a0)
000107AC 4228 0025                  		clr.b	$25(a0)
000107B0                            
000107B0                            locret_101F4:
000107B0 4E75                       		rts	
000107B2                            ; ===========================================================================
000107B2                            
000107B2                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000107B2 323C 0100                  		move.w	#$100,d1
000107B6 08E8 0000 0022             		bset	#0,$22(a0)
000107BC 3038 D008                  		move.w	($FFFFD008).w,d0
000107C0 9068 0008                  		sub.w	8(a0),d0
000107C4 6400                       		bcc.s	loc_10214
000107C6 4440                       		neg.w	d0
000107C8 4441                       		neg.w	d1
000107CA 08A8 0000 0022             		bclr	#0,$22(a0)
000107D0                            
000107D0                            loc_10214:
000107D0 B042                       		cmp.w	d2,d0
000107D2 4E75                       		rts	
000107D4                            ; ===========================================================================
000107D4 6100 D3D0                  		bsr.w	SpeedToPos
000107D8 6100 D3F2                  		bsr.w	DisplaySprite
000107DC 4A28 0001                  		tst.b	1(a0)
000107E0 6A00 D426                  		bpl.w	DeleteObject
000107E4 4E75                       		rts	
000107E6                            ; ===========================================================================
000107E6                            Ani_obj55:
000107E6                            	include "_anim\obj55.asm"
000107E6                            ; ---------------------------------------------------------------------------
000107E6                            ; Animation script - Basaran enemy
000107E6                            ; ---------------------------------------------------------------------------
000107E6 0000                       		dc.w byte_10230-Ani_obj55
000107E8 0000                       		dc.w byte_10234-Ani_obj55
000107EA 0000                       		dc.w byte_10238-Ani_obj55
000107EC 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000107F0 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000107F4 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107FA                            		even
000107FA                            		even
000107FA                            
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            ; Sprite mappings - Basaran enemy (MZ)
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            Map_obj55:
000107FA                            	include "_maps\obj55.asm"
000107FA                            ; ---------------------------------------------------------------------------
000107FA                            ; Sprite mappings - Basaran enemy (MZ)
000107FA                            ; ---------------------------------------------------------------------------
000107FA 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107FE 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010802 01                         byte_10246:	dc.b 1
00010803 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010808 03                         byte_1024C:	dc.b 3
00010809 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001080E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010813 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010818 04                         byte_1025C:	dc.b 4
00010819 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001081E 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010823 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010828 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001082D 04                         byte_10271:	dc.b 4
0001082E F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010833 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010838 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001083D FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010842                            		even
00010842                            		even
00010842                            
00010842                            ; ===========================================================================
00010842                            ; ---------------------------------------------------------------------------
00010842                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010842                            ; ---------------------------------------------------------------------------
00010842                            
00010842                            Obj56:					; XREF: Obj_Index
00010842 7000                       		moveq	#0,d0
00010844 1028 0024                  		move.b	$24(a0),d0
00010848 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001084C 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010850                            ; ===========================================================================
00010850 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010852 0000                       		dc.w Obj56_Action-Obj56_Index
00010854                            
00010854 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010856 2020                       		dc.b  $20, $20
00010858 1020                       		dc.b  $10, $20
0001085A 201A                       		dc.b  $20, $1A
0001085C 1027                       		dc.b  $10, $27
0001085E 1010                       		dc.b  $10, $10
00010860 0820                       		dc.b	8, $20
00010862 4010                       		dc.b  $40, $10
00010864                            ; ===========================================================================
00010864                            
00010864                            Obj56_Main:				; XREF: Obj56_Index
00010864 5428 0024                  		addq.b	#2,$24(a0)
00010868 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010870 317C 4000 0002             		move.w	#$4000,2(a0)
00010876 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001087C 6600                       		bne.s	loc_102C8
0001087E 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010884                            
00010884                            loc_102C8:
00010884 117C 0004 0001             		move.b	#4,1(a0)
0001088A 117C 0003 0018             		move.b	#3,$18(a0)
00010890 7000                       		moveq	#0,d0
00010892 1028 0028                  		move.b	$28(a0),d0
00010896 E648                       		lsr.w	#3,d0
00010898 0240 000E                  		andi.w	#$E,d0
0001089C 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000108A0 115A 0019                  		move.b	(a2)+,$19(a0)
000108A4 1152 0016                  		move.b	(a2),$16(a0)
000108A8 E248                       		lsr.w	#1,d0
000108AA 1140 001A                  		move.b	d0,$1A(a0)
000108AE 3168 0008 0034             		move.w	8(a0),$34(a0)
000108B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000108BA 7000                       		moveq	#0,d0
000108BC 1012                       		move.b	(a2),d0
000108BE D040                       		add.w	d0,d0
000108C0 3140 003A                  		move.w	d0,$3A(a0)
000108C4 7000                       		moveq	#0,d0
000108C6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108CC 6700                       		beq.s	loc_10332
000108CE 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000108D2 0240 000F                  		andi.w	#$F,d0
000108D6 5140                       		subq.w	#8,d0
000108D8 6500                       		bcs.s	loc_10332
000108DA E548                       		lsl.w	#2,d0
000108DC 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000108E0 45F2 0000                  		lea	(a2,d0.w),a2
000108E4 4A52                       		tst.w	(a2)
000108E6 6A00                       		bpl.s	loc_10332
000108E8 0868 0000 0022             		bchg	#0,$22(a0)
000108EE                            
000108EE                            loc_10332:
000108EE 1028 0028                  		move.b	$28(a0),d0
000108F2 6A00                       		bpl.s	Obj56_Action
000108F4 0200 000F                  		andi.b	#$F,d0
000108F8 1140 003C                  		move.b	d0,$3C(a0)
000108FC 117C 0005 0028             		move.b	#5,$28(a0)
00010902 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010908 6600                       		bne.s	Obj56_ChkGone
0001090A 117C 000C 0028             		move.b	#$C,$28(a0)
00010910 317C 0080 003A             		move.w	#$80,$3A(a0)
00010916                            
00010916                            Obj56_ChkGone:
00010916 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001091A 7000                       		moveq	#0,d0
0001091C 1028 0023                  		move.b	$23(a0),d0
00010920 6700                       		beq.s	Obj56_Action
00010922 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010928 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001092E 6700                       		beq.s	Obj56_Action
00010930 5228 0028                  		addq.b	#1,$28(a0)
00010934 4268 003A                  		clr.w	$3A(a0)
00010938                            
00010938                            Obj56_Action:				; XREF: Obj56_Index
00010938 3F28 0008                  		move.w	8(a0),-(sp)
0001093C 7000                       		moveq	#0,d0
0001093E 1028 0028                  		move.b	$28(a0),d0	; get object type
00010942 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010946 D040                       		add.w	d0,d0
00010948 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0001094C 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010950 381F                       		move.w	(sp)+,d4
00010952 4A28 0001                  		tst.b	1(a0)
00010956 6A00                       		bpl.s	Obj56_ChkDel
00010958 7200                       		moveq	#0,d1
0001095A 1228 0019                  		move.b	$19(a0),d1
0001095E 0641 000B                  		addi.w	#$B,d1
00010962 7400                       		moveq	#0,d2
00010964 1428 0016                  		move.b	$16(a0),d2
00010968 3602                       		move.w	d2,d3
0001096A 5243                       		addq.w	#1,d3
0001096C 6100 F62E                  		bsr.w	SolidObject
00010970                            
00010970                            Obj56_ChkDel:
00010970 3028 0034                  		move.w	$34(a0),d0
00010974 0240 FF80                  		andi.w	#$FF80,d0
00010978 3238 F700                  		move.w	($FFFFF700).w,d1
0001097C 0441 0080                  		subi.w	#$80,d1
00010980 0241 FF80                  		andi.w	#$FF80,d1
00010984 9041                       		sub.w	d1,d0
00010986 0C40 0280                  		cmpi.w	#$280,d0
0001098A 6200 D27C                  		bhi.w	DeleteObject
0001098E 6000 D23C                  		bra.w	DisplaySprite
00010992                            ; ===========================================================================
00010992 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010996 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001099A 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001099E 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
000109A2 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
000109A6 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
000109AA 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000109AE                            ; ===========================================================================
000109AE                            
000109AE                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000109AE 4E75                       		rts	
000109B0                            ; ===========================================================================
000109B0                            
000109B0                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000109B0 323C 0040                  		move.w	#$40,d1
000109B4 7000                       		moveq	#0,d0
000109B6 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109BA 6000                       		bra.s	Obj56_Move_LR
000109BC                            ; ===========================================================================
000109BC                            
000109BC                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000109BC 323C 0080                  		move.w	#$80,d1
000109C0 7000                       		moveq	#0,d0
000109C2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109C6                            
000109C6                            Obj56_Move_LR:
000109C6 0828 0000 0022             		btst	#0,$22(a0)
000109CC 6700                       		beq.s	loc_10416
000109CE 4440                       		neg.w	d0
000109D0 D041                       		add.w	d1,d0
000109D2                            
000109D2                            loc_10416:
000109D2 3228 0034                  		move.w	$34(a0),d1
000109D6 9240                       		sub.w	d0,d1
000109D8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109DC 4E75                       		rts	
000109DE                            ; ===========================================================================
000109DE                            
000109DE                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000109DE 323C 0040                  		move.w	#$40,d1
000109E2 7000                       		moveq	#0,d0
000109E4 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109E8 6000                       		bra.s	Obj56_Move_UD
000109EA                            ; ===========================================================================
000109EA                            
000109EA                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000109EA 323C 0080                  		move.w	#$80,d1
000109EE 7000                       		moveq	#0,d0
000109F0 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109F4                            
000109F4                            Obj56_Move_UD:
000109F4 0828 0000 0022             		btst	#0,$22(a0)
000109FA 6700                       		beq.s	loc_10444
000109FC 4440                       		neg.w	d0
000109FE D041                       		add.w	d1,d0
00010A00                            
00010A00                            loc_10444:
00010A00 3228 0030                  		move.w	$30(a0),d1
00010A04 9240                       		sub.w	d0,d1
00010A06 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010A0A 4E75                       		rts	
00010A0C                            ; ===========================================================================
00010A0C                            
00010A0C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010A0C 4A28 0038                  		tst.b	$38(a0)
00010A10 6600                       		bne.s	loc_104A4
00010A12 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A18 6600                       		bne.s	loc_1047A	; if not, branch
00010A1A 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010A20 6600                       		bne.s	loc_1047A
00010A22 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A26 3038 D008                  		move.w	($FFFFD008).w,d0
00010A2A B068 0008                  		cmp.w	8(a0),d0
00010A2E 6400                       		bcc.s	loc_1047A
00010A30 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A36                            
00010A36                            loc_1047A:
00010A36 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A3A 7000                       		moveq	#0,d0
00010A3C 1028 003C                  		move.b	$3C(a0),d0
00010A40 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A46 6700                       		beq.s	loc_104AE
00010A48 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A4E 6600                       		bne.s	loc_1049E	; if not, branch
00010A50 0C00 0003                  		cmpi.b	#3,d0
00010A54 6600                       		bne.s	loc_1049E
00010A56 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A5A                            
00010A5A                            loc_1049E:
00010A5A 117C 0001 0038             		move.b	#1,$38(a0)
00010A60                            
00010A60                            loc_104A4:
00010A60 4A68 003A                  		tst.w	$3A(a0)
00010A64 6700                       		beq.s	loc_104C8
00010A66 5568 003A                  		subq.w	#2,$3A(a0)
00010A6A                            
00010A6A                            loc_104AE:
00010A6A 3028 003A                  		move.w	$3A(a0),d0
00010A6E 0828 0000 0022             		btst	#0,$22(a0)
00010A74 6700                       		beq.s	loc_104BC
00010A76 4440                       		neg.w	d0
00010A78                            
00010A78                            loc_104BC:
00010A78 3228 0030                  		move.w	$30(a0),d1
00010A7C D240                       		add.w	d0,d1
00010A7E 3141 000C                  		move.w	d1,$C(a0)
00010A82 4E75                       		rts	
00010A84                            ; ===========================================================================
00010A84                            
00010A84                            loc_104C8:
00010A84 5228 0028                  		addq.b	#1,$28(a0)
00010A88 4228 0038                  		clr.b	$38(a0)
00010A8C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A90 7000                       		moveq	#0,d0
00010A92 1028 0023                  		move.b	$23(a0),d0
00010A96 67D2                       		beq.s	loc_104AE
00010A98 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A9E 60CA                       		bra.s	loc_104AE
00010AA0                            ; ===========================================================================
00010AA0                            
00010AA0                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010AA0 4A28 0038                  		tst.b	$38(a0)
00010AA4 6600                       		bne.s	loc_10500
00010AA6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AAA 7000                       		moveq	#0,d0
00010AAC 1028 003C                  		move.b	$3C(a0),d0
00010AB0 4A32 0000                  		tst.b	(a2,d0.w)
00010AB4 6A00                       		bpl.s	loc_10512
00010AB6 117C 0001 0038             		move.b	#1,$38(a0)
00010ABC                            
00010ABC                            loc_10500:
00010ABC 7000                       		moveq	#0,d0
00010ABE 1028 0016                  		move.b	$16(a0),d0
00010AC2 D040                       		add.w	d0,d0
00010AC4 B068 003A                  		cmp.w	$3A(a0),d0
00010AC8 6700                       		beq.s	loc_1052C
00010ACA 5468 003A                  		addq.w	#2,$3A(a0)
00010ACE                            
00010ACE                            loc_10512:
00010ACE 3028 003A                  		move.w	$3A(a0),d0
00010AD2 0828 0000 0022             		btst	#0,$22(a0)
00010AD8 6700                       		beq.s	loc_10520
00010ADA 4440                       		neg.w	d0
00010ADC                            
00010ADC                            loc_10520:
00010ADC 3228 0030                  		move.w	$30(a0),d1
00010AE0 D240                       		add.w	d0,d1
00010AE2 3141 000C                  		move.w	d1,$C(a0)
00010AE6 4E75                       		rts	
00010AE8                            ; ===========================================================================
00010AE8                            
00010AE8                            loc_1052C:
00010AE8 5328 0028                  		subq.b	#1,$28(a0)
00010AEC 4228 0038                  		clr.b	$38(a0)
00010AF0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AF4 7000                       		moveq	#0,d0
00010AF6 1028 0023                  		move.b	$23(a0),d0
00010AFA 67D2                       		beq.s	loc_10512
00010AFC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010B02 60CA                       		bra.s	loc_10512
00010B04                            ; ===========================================================================
00010B04                            
00010B04                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010B04 4A28 0038                  		tst.b	$38(a0)
00010B08 6600                       		bne.s	loc_1055E
00010B0A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010B0E 6700                       		beq.s	locret_10578
00010B10 117C 0001 0038             		move.b	#1,$38(a0)
00010B16 4268 003A                  		clr.w	$3A(a0)
00010B1A                            
00010B1A                            loc_1055E:
00010B1A 5268 0008                  		addq.w	#1,8(a0)
00010B1E 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B24 5268 003A                  		addq.w	#1,$3A(a0)
00010B28 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B2E 6600                       		bne.s	locret_10578
00010B30 4228 0028                  		clr.b	$28(a0)
00010B34                            
00010B34                            locret_10578:
00010B34 4E75                       		rts	
00010B36                            ; ===========================================================================
00010B36                            
00010B36                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B36 4A28 0038                  		tst.b	$38(a0)
00010B3A 6600                       		bne.s	loc_10598
00010B3C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B40 7000                       		moveq	#0,d0
00010B42 1028 003C                  		move.b	$3C(a0),d0
00010B46 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B4C 6700                       		beq.s	loc_105A2
00010B4E 117C 0001 0038             		move.b	#1,$38(a0)
00010B54                            
00010B54                            loc_10598:
00010B54 4A68 003A                  		tst.w	$3A(a0)
00010B58 6700                       		beq.s	loc_105C0
00010B5A 5568 003A                  		subq.w	#2,$3A(a0)
00010B5E                            
00010B5E                            loc_105A2:
00010B5E 3028 003A                  		move.w	$3A(a0),d0
00010B62 0828 0000 0022             		btst	#0,$22(a0)
00010B68 6700                       		beq.s	loc_105B4
00010B6A 4440                       		neg.w	d0
00010B6C 0640 0080                  		addi.w	#$80,d0
00010B70                            
00010B70                            loc_105B4:
00010B70 3228 0034                  		move.w	$34(a0),d1
00010B74 D240                       		add.w	d0,d1
00010B76 3141 0008                  		move.w	d1,8(a0)
00010B7A 4E75                       		rts	
00010B7C                            ; ===========================================================================
00010B7C                            
00010B7C                            loc_105C0:
00010B7C 5228 0028                  		addq.b	#1,$28(a0)
00010B80 4228 0038                  		clr.b	$38(a0)
00010B84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B88 7000                       		moveq	#0,d0
00010B8A 1028 0023                  		move.b	$23(a0),d0
00010B8E 67CE                       		beq.s	loc_105A2
00010B90 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B96 60C6                       		bra.s	loc_105A2
00010B98                            ; ===========================================================================
00010B98                            
00010B98                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B98 4A28 0038                  		tst.b	$38(a0)
00010B9C 6600                       		bne.s	loc_105F8
00010B9E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BA2 7000                       		moveq	#0,d0
00010BA4 1028 003C                  		move.b	$3C(a0),d0
00010BA8 4A32 0000                  		tst.b	(a2,d0.w)
00010BAC 6A00                       		bpl.s	loc_10606
00010BAE 117C 0001 0038             		move.b	#1,$38(a0)
00010BB4                            
00010BB4                            loc_105F8:
00010BB4 303C 0080                  		move.w	#$80,d0
00010BB8 B068 003A                  		cmp.w	$3A(a0),d0
00010BBC 6700                       		beq.s	loc_10624
00010BBE 5468 003A                  		addq.w	#2,$3A(a0)
00010BC2                            
00010BC2                            loc_10606:
00010BC2 3028 003A                  		move.w	$3A(a0),d0
00010BC6 0828 0000 0022             		btst	#0,$22(a0)
00010BCC 6700                       		beq.s	loc_10618
00010BCE 4440                       		neg.w	d0
00010BD0 0640 0080                  		addi.w	#$80,d0
00010BD4                            
00010BD4                            loc_10618:
00010BD4 3228 0034                  		move.w	$34(a0),d1
00010BD8 D240                       		add.w	d0,d1
00010BDA 3141 0008                  		move.w	d1,8(a0)
00010BDE 4E75                       		rts	
00010BE0                            ; ===========================================================================
00010BE0                            
00010BE0                            loc_10624:
00010BE0 5328 0028                  		subq.b	#1,$28(a0)
00010BE4 4228 0038                  		clr.b	$38(a0)
00010BE8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BEC 7000                       		moveq	#0,d0
00010BEE 1028 0023                  		move.b	$23(a0),d0
00010BF2 67CE                       		beq.s	loc_10606
00010BF4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BFA 60C6                       		bra.s	loc_10606
00010BFC                            ; ===========================================================================
00010BFC                            
00010BFC                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BFC 323C 0010                  		move.w	#$10,d1
00010C00 7000                       		moveq	#0,d0
00010C02 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010C06 E248                       		lsr.w	#1,d0
00010C08 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010C0C 6000                       		bra.s	Obj56_Move_Sqr
00010C0E                            ; ===========================================================================
00010C0E                            
00010C0E                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010C0E 323C 0030                  		move.w	#$30,d1
00010C12 7000                       		moveq	#0,d0
00010C14 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010C18 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010C1C 6000                       		bra.s	Obj56_Move_Sqr
00010C1E                            ; ===========================================================================
00010C1E                            
00010C1E                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010C1E 323C 0050                  		move.w	#$50,d1
00010C22 7000                       		moveq	#0,d0
00010C24 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C28 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C2C 6000                       		bra.s	Obj56_Move_Sqr
00010C2E                            ; ===========================================================================
00010C2E                            
00010C2E                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C2E 323C 0070                  		move.w	#$70,d1
00010C32 7000                       		moveq	#0,d0
00010C34 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C38 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C3C                            
00010C3C                            Obj56_Move_Sqr:
00010C3C 4A43                       		tst.w	d3
00010C3E 6600                       		bne.s	loc_1068E
00010C40 5228 0022                  		addq.b	#1,$22(a0)
00010C44 0228 0003 0022             		andi.b	#3,$22(a0)
00010C4A                            
00010C4A                            loc_1068E:
00010C4A 1428 0022                  		move.b	$22(a0),d2
00010C4E 0202 0003                  		andi.b	#3,d2
00010C52 6600                       		bne.s	loc_106AE
00010C54 9041                       		sub.w	d1,d0
00010C56 D068 0034                  		add.w	$34(a0),d0
00010C5A 3140 0008                  		move.w	d0,8(a0)
00010C5E 4441                       		neg.w	d1
00010C60 D268 0030                  		add.w	$30(a0),d1
00010C64 3141 000C                  		move.w	d1,$C(a0)
00010C68 4E75                       		rts	
00010C6A                            ; ===========================================================================
00010C6A                            
00010C6A                            loc_106AE:
00010C6A 5302                       		subq.b	#1,d2
00010C6C 6600                       		bne.s	loc_106CC
00010C6E 5341                       		subq.w	#1,d1
00010C70 9041                       		sub.w	d1,d0
00010C72 4440                       		neg.w	d0
00010C74 D068 0030                  		add.w	$30(a0),d0
00010C78 3140 000C                  		move.w	d0,$C(a0)
00010C7C 5241                       		addq.w	#1,d1
00010C7E D268 0034                  		add.w	$34(a0),d1
00010C82 3141 0008                  		move.w	d1,8(a0)
00010C86 4E75                       		rts	
00010C88                            ; ===========================================================================
00010C88                            
00010C88                            loc_106CC:
00010C88 5302                       		subq.b	#1,d2
00010C8A 6600                       		bne.s	loc_106EA
00010C8C 5341                       		subq.w	#1,d1
00010C8E 9041                       		sub.w	d1,d0
00010C90 4440                       		neg.w	d0
00010C92 D068 0034                  		add.w	$34(a0),d0
00010C96 3140 0008                  		move.w	d0,8(a0)
00010C9A 5241                       		addq.w	#1,d1
00010C9C D268 0030                  		add.w	$30(a0),d1
00010CA0 3141 000C                  		move.w	d1,$C(a0)
00010CA4 4E75                       		rts	
00010CA6                            ; ===========================================================================
00010CA6                            
00010CA6                            loc_106EA:
00010CA6 9041                       		sub.w	d1,d0
00010CA8 D068 0030                  		add.w	$30(a0),d0
00010CAC 3140 000C                  		move.w	d0,$C(a0)
00010CB0 4441                       		neg.w	d1
00010CB2 D268 0034                  		add.w	$34(a0),d1
00010CB6 3141 0008                  		move.w	d1,8(a0)
00010CBA 4E75                       		rts	
00010CBC                            ; ===========================================================================
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC                            Map_obj56:
00010CBC                            	include "_maps\obj56.asm"
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CBC                            ; ---------------------------------------------------------------------------
00010CBC 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010CC0 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CC4 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010CC8 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010CCC 01                         byte_10710:	dc.b 1
00010CCD F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010CD2 04                         byte_10716:	dc.b 4
00010CD3 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010CD8 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010CDD 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010CE2 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010CE7 02                         byte_1072B:	dc.b 2
00010CE8 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010CED 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010CF2 04                         byte_10736:	dc.b 4
00010CF3 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010CF8 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CFD 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010D02 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010D07 03                         byte_1074B:	dc.b 3
00010D08 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010D0D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010D12 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010D17 01                         byte_1075B:	dc.b 1
00010D18 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010D1D 02                         byte_10761:	dc.b 2
00010D1E E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010D23 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D28 04                         byte_1076C:	dc.b 4
00010D29 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D2E F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D33 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D38 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D3E 00                         		even
00010D3E 00                         		even
00010D3E                            
00010D3E                            ; ===========================================================================
00010D3E                            ; ---------------------------------------------------------------------------
00010D3E                            ; Object 57 - spiked balls (SYZ, LZ)
00010D3E                            ; ---------------------------------------------------------------------------
00010D3E                            
00010D3E                            Obj57:					; XREF: Obj_Index
00010D3E 7000                       		moveq	#0,d0
00010D40 1028 0024                  		move.b	$24(a0),d0
00010D44 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D48 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D4C                            ; ===========================================================================
00010D4C 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D4E 0000                       		dc.w Obj57_Move-Obj57_Index
00010D50 0000                       		dc.w Obj57_Display-Obj57_Index
00010D52                            ; ===========================================================================
00010D52                            
00010D52                            Obj57_Main:				; XREF: Obj57_Index
00010D52 5428 0024                  		addq.b	#2,$24(a0)
00010D56 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D5E 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D64 117C 0004 0001             		move.b	#4,1(a0)
00010D6A 117C 0004 0018             		move.b	#4,$18(a0)
00010D70 117C 0008 0019             		move.b	#8,$19(a0)
00010D76 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D7C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D82 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D88 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D8E 6600                       		bne.s	loc_107E8
00010D90 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D96 317C 0310 0002             		move.w	#$310,2(a0)
00010D9C 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010DA4                            
00010DA4                            loc_107E8:
00010DA4 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DA8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010DAC 4881                       		ext.w	d1
00010DAE E741                       		asl.w	#3,d1		; multiply by 8
00010DB0 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010DB4 1028 0022                  		move.b	$22(a0),d0
00010DB8 E418                       		ror.b	#2,d0
00010DBA 0200 00C0                  		andi.b	#-$40,d0
00010DBE 1140 0026                  		move.b	d0,$26(a0)
00010DC2 45E8 0029                  		lea	$29(a0),a2
00010DC6 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DCA 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010DCE 14FC 0000                  		move.b	#0,(a2)+
00010DD2 3601                       		move.w	d1,d3
00010DD4 E94B                       		lsl.w	#4,d3
00010DD6 1143 003C                  		move.b	d3,$3C(a0)
00010DDA 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010DDC 6500                       		bcs.s	loc_10894
00010DDE 0828 0003 0028             		btst	#3,$28(a0)
00010DE4 6700                       		beq.s	Obj57_MakeChain
00010DE6 5341                       		subq.w	#1,d1
00010DE8 6500                       		bcs.s	loc_10894
00010DEA                            
00010DEA                            Obj57_MakeChain:
00010DEA 6100 D266                  		bsr.w	SingleObjLoad
00010DEE 6600                       		bne.s	loc_10894
00010DF0 5228 0029                  		addq.b	#1,$29(a0)
00010DF4 3A09                       		move.w	a1,d5
00010DF6 0445 D000                  		subi.w	#-$3000,d5
00010DFA EC4D                       		lsr.w	#6,d5
00010DFC 0245 007F                  		andi.w	#$7F,d5
00010E00 14C5                       		move.b	d5,(a2)+
00010E02 137C 0004 0024             		move.b	#4,$24(a1)
00010E08 1290                       		move.b	0(a0),0(a1)
00010E0A 2368 0004 0004             		move.l	4(a0),4(a1)
00010E10 3368 0002 0002             		move.w	2(a0),2(a1)
00010E16 1368 0001 0001             		move.b	1(a0),1(a1)
00010E1C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010E22 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E28 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E2E 0403 0010                  		subi.b	#$10,d3
00010E32 1343 003C                  		move.b	d3,$3C(a1)
00010E36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E3C 6600                       		bne.s	loc_10890
00010E3E 4A03                       		tst.b	d3
00010E40 6600                       		bne.s	loc_10890
00010E42 137C 0002 001A             		move.b	#2,$1A(a1)
00010E48                            
00010E48                            loc_10890:
00010E48 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E4C                            
00010E4C                            loc_10894:
00010E4C 3A08                       		move.w	a0,d5
00010E4E 0445 D000                  		subi.w	#-$3000,d5
00010E52 EC4D                       		lsr.w	#6,d5
00010E54 0245 007F                  		andi.w	#$7F,d5
00010E58 14C5                       		move.b	d5,(a2)+
00010E5A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E60 6600                       		bne.s	Obj57_Move
00010E62 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E68 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E6E                            
00010E6E                            Obj57_Move:				; XREF: Obj57_Index
00010E6E 6100 0000                  		bsr.w	Obj57_MoveSub
00010E72 6000 0000                  		bra.w	Obj57_ChkDel
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E76 3028 003E                  		move.w	$3E(a0),d0
00010E7A D168 0026                  		add.w	d0,$26(a0)
00010E7E 1028 0026                  		move.b	$26(a0),d0
00010E82 4EB9 0000 2C82             		jsr	(CalcSine).l
00010E88 3428 0038                  		move.w	$38(a0),d2
00010E8C 3628 003A                  		move.w	$3A(a0),d3
00010E90 45E8 0029                  		lea	$29(a0),a2
00010E94 7C00                       		moveq	#0,d6
00010E96 1C1A                       		move.b	(a2)+,d6
00010E98                            
00010E98                            Obj57_MoveLoop:
00010E98 7800                       		moveq	#0,d4
00010E9A 181A                       		move.b	(a2)+,d4
00010E9C ED4C                       		lsl.w	#6,d4
00010E9E 0684 00FF D000             		addi.l	#$FFD000,d4
00010EA4 2244                       		movea.l	d4,a1
00010EA6 7800                       		moveq	#0,d4
00010EA8 1829 003C                  		move.b	$3C(a1),d4
00010EAC 2A04                       		move.l	d4,d5
00010EAE C9C0                       		muls.w	d0,d4
00010EB0 E084                       		asr.l	#8,d4
00010EB2 CBC1                       		muls.w	d1,d5
00010EB4 E085                       		asr.l	#8,d5
00010EB6 D842                       		add.w	d2,d4
00010EB8 DA43                       		add.w	d3,d5
00010EBA 3344 000C                  		move.w	d4,$C(a1)
00010EBE 3345 0008                  		move.w	d5,8(a1)
00010EC2 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EC6 4E75                       		rts	
00010EC8                            ; ===========================================================================
00010EC8                            
00010EC8                            Obj57_ChkDel:				; XREF: Obj57_Move
00010EC8 3028 003A                  		move.w	$3A(a0),d0
00010ECC 0240 FF80                  		andi.w	#$FF80,d0
00010ED0 3238 F700                  		move.w	($FFFFF700).w,d1
00010ED4 0441 0080                  		subi.w	#$80,d1
00010ED8 0241 FF80                  		andi.w	#$FF80,d1
00010EDC 9041                       		sub.w	d1,d0
00010EDE 0C40 0280                  		cmpi.w	#$280,d0
00010EE2 6200 0000                  		bhi.w	Obj57_Delete
00010EE6 6000 CCE4                  		bra.w	DisplaySprite
00010EEA                            ; ===========================================================================
00010EEA                            
00010EEA                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010EEA 7400                       		moveq	#0,d2
00010EEC 45E8 0029                  		lea	$29(a0),a2
00010EF0 141A                       		move.b	(a2)+,d2
00010EF2                            
00010EF2                            Obj57_DelLoop:
00010EF2 7000                       		moveq	#0,d0
00010EF4 101A                       		move.b	(a2)+,d0
00010EF6 ED48                       		lsl.w	#6,d0
00010EF8 0680 00FF D000             		addi.l	#$FFD000,d0
00010EFE 2240                       		movea.l	d0,a1
00010F00 6100 CD08                  		bsr.w	DeleteObject2
00010F04 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010F08                            
00010F08 4E75                       		rts	
00010F0A                            ; ===========================================================================
00010F0A                            
00010F0A                            Obj57_Display:				; XREF: Obj57_Index
00010F0A 6000 CCC0                  		bra.w	DisplaySprite
00010F0E                            ; ===========================================================================
00010F0E                            ; ---------------------------------------------------------------------------
00010F0E                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F0E                            ; ---------------------------------------------------------------------------
00010F0E                            Map_obj57:
00010F0E                            	include "_maps\obj57syz.asm"
00010F0E                            ; ---------------------------------------------------------------------------
00010F0E                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F0E                            ; ---------------------------------------------------------------------------
00010F0E 0000                       		dc.w byte_10958-Map_obj57
00010F10 01                         byte_10958:	dc.b 1
00010F11 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F16                            		even
00010F16                            		even
00010F16                            
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            Map_obj57a:
00010F16                            	include "_maps\obj57lz.asm"
00010F16                            ; ---------------------------------------------------------------------------
00010F16                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F16                            ; ---------------------------------------------------------------------------
00010F16 0000                       		dc.w byte_10964-Map_obj57a
00010F18 0000                       		dc.w byte_1096A-Map_obj57a
00010F1A 0000                       		dc.w byte_10970-Map_obj57a
00010F1C 01                         byte_10964:	dc.b 1
00010F1D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F22 01                         byte_1096A:	dc.b 1
00010F23 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F28 01                         byte_10970:	dc.b 1
00010F29 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F2E                            		even
00010F2E                            		even
00010F2E                            
00010F2E                            ; ===========================================================================
00010F2E                            ; ---------------------------------------------------------------------------
00010F2E                            ; Object 58 - giant spiked balls (SYZ)
00010F2E                            ; ---------------------------------------------------------------------------
00010F2E                            
00010F2E                            Obj58:					; XREF: Obj_Index
00010F2E 7000                       		moveq	#0,d0
00010F30 1028 0024                  		move.b	$24(a0),d0
00010F34 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F38 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F3C                            ; ===========================================================================
00010F3C 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F3E 0000                       		dc.w Obj58_Move-Obj58_Index
00010F40                            ; ===========================================================================
00010F40                            
00010F40                            Obj58_Main:				; XREF: Obj58_Index
00010F40 5428 0024                  		addq.b	#2,$24(a0)
00010F44 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F4C 317C 0396 0002             		move.w	#$396,2(a0)
00010F52 117C 0004 0001             		move.b	#4,1(a0)
00010F58 117C 0004 0018             		move.b	#4,$18(a0)
00010F5E 117C 0018 0019             		move.b	#$18,$19(a0)
00010F64 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F6A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F70 117C 0086 0020             		move.b	#$86,$20(a0)
00010F76 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F7A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F7E 4881                       		ext.w	d1
00010F80 E741                       		asl.w	#3,d1		; multiply by 8
00010F82 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F86 1028 0022                  		move.b	$22(a0),d0
00010F8A E418                       		ror.b	#2,d0
00010F8C 0200 00C0                  		andi.b	#$C0,d0
00010F90 1140 0026                  		move.b	d0,$26(a0)
00010F94 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F9A                            
00010F9A                            Obj58_Move:				; XREF: Obj58_Index
00010F9A 7000                       		moveq	#0,d0
00010F9C 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FA0 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010FA4 D040                       		add.w	d0,d0
00010FA6 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010FAA 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010FAE 3028 003A                  		move.w	$3A(a0),d0
00010FB2 0240 FF80                  		andi.w	#$FF80,d0
00010FB6 3238 F700                  		move.w	($FFFFF700).w,d1
00010FBA 0441 0080                  		subi.w	#$80,d1
00010FBE 0241 FF80                  		andi.w	#$FF80,d1
00010FC2 9041                       		sub.w	d1,d0
00010FC4 0C40 0280                  		cmpi.w	#$280,d0
00010FC8 6200 CC3E                  		bhi.w	DeleteObject
00010FCC 6000 CBFE                  		bra.w	DisplaySprite
00010FD0                            ; ===========================================================================
00010FD0 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010FD2 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010FD4 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010FD6 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010FD8                            ; ===========================================================================
00010FD8                            
00010FD8                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010FD8 4E75                       		rts	
00010FDA                            ; ===========================================================================
00010FDA                            
00010FDA                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010FDA 323C 0060                  		move.w	#$60,d1
00010FDE 7000                       		moveq	#0,d0
00010FE0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FE4 0828 0000 0022             		btst	#0,$22(a0)
00010FEA 6700                       		beq.s	loc_10A38
00010FEC 4440                       		neg.w	d0
00010FEE D041                       		add.w	d1,d0
00010FF0                            
00010FF0                            loc_10A38:
00010FF0 3228 003A                  		move.w	$3A(a0),d1
00010FF4 9240                       		sub.w	d0,d1
00010FF6 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FFA 4E75                       		rts	
00010FFC                            ; ===========================================================================
00010FFC                            
00010FFC                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FFC 323C 0060                  		move.w	#$60,d1
00011000 7000                       		moveq	#0,d0
00011002 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011006 0828 0000 0022             		btst	#0,$22(a0)
0001100C 6700                       		beq.s	loc_10A5C
0001100E 4440                       		neg.w	d0
00011010 0640 0080                  		addi.w	#$80,d0
00011014                            
00011014                            loc_10A5C:
00011014 3228 0038                  		move.w	$38(a0),d1
00011018 9240                       		sub.w	d0,d1
0001101A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001101E 4E75                       		rts	
00011020                            ; ===========================================================================
00011020                            
00011020                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011020 3028 003E                  		move.w	$3E(a0),d0
00011024 D168 0026                  		add.w	d0,$26(a0)
00011028 1028 0026                  		move.b	$26(a0),d0
0001102C 4EB9 0000 2C82             		jsr	(CalcSine).l
00011032 3428 0038                  		move.w	$38(a0),d2
00011036 3628 003A                  		move.w	$3A(a0),d3
0001103A 7800                       		moveq	#0,d4
0001103C 1828 003C                  		move.b	$3C(a0),d4
00011040 2A04                       		move.l	d4,d5
00011042 C9C0                       		muls.w	d0,d4
00011044 E084                       		asr.l	#8,d4
00011046 CBC1                       		muls.w	d1,d5
00011048 E085                       		asr.l	#8,d5
0001104A D842                       		add.w	d2,d4
0001104C DA43                       		add.w	d3,d5
0001104E 3144 000C                  		move.w	d4,$C(a0)
00011052 3145 0008                  		move.w	d5,8(a0)
00011056 4E75                       		rts	
00011058                            ; ===========================================================================
00011058                            ; ---------------------------------------------------------------------------
00011058                            ; Sprite mappings - SBZ	spiked ball on a chain
00011058                            ; ---------------------------------------------------------------------------
00011058                            Map_obj15b:
00011058                            	include "_maps\obj15sbz.asm"
00011058                            ; ---------------------------------------------------------------------------
00011058                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011058                            ; ---------------------------------------------------------------------------
00011058 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001105C 0000                       		dc.w byte_10AC6-Map_obj15b
0001105E 05                         byte_10AA6:	dc.b 5
0001105F E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011064 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011069 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001106E F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011073 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011078 01                         byte_10AC0:	dc.b 1
00011079 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001107E 02                         byte_10AC6:	dc.b 2
0001107F F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011084 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001108A 00                         		even
0001108A 00                         		even
0001108A                            
0001108A                            ; ===========================================================================
0001108A                            ; ---------------------------------------------------------------------------
0001108A                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001108A                            ; ---------------------------------------------------------------------------
0001108A                            
0001108A                            Obj59:					; XREF: Obj_Index
0001108A 7000                       		moveq	#0,d0
0001108C 1028 0024                  		move.b	$24(a0),d0
00011090 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011094 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011098 3028 0032                  		move.w	$32(a0),d0
0001109C 0240 FF80                  		andi.w	#$FF80,d0
000110A0 3238 F700                  		move.w	($FFFFF700).w,d1
000110A4 0441 0080                  		subi.w	#$80,d1
000110A8 0241 FF80                  		andi.w	#$FF80,d1
000110AC 9041                       		sub.w	d1,d0
000110AE 0C40 0280                  		cmpi.w	#$280,d0
000110B2 6200 CB54                  		bhi.w	DeleteObject
000110B6 6000 CB14                  		bra.w	DisplaySprite
000110BA                            ; ===========================================================================
000110BA 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000110BC 0000                       		dc.w Obj59_Platform-Obj59_Index
000110BE 0000                       		dc.w Obj59_Action-Obj59_Index
000110C0 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000110C2                            
000110C2 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110C4                            
000110C4 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110C6 2001                       		dc.b $20, 1
000110C8 3401                       		dc.b $34, 1
000110CA 1003                       		dc.b $10, 3
000110CC 2003                       		dc.b $20, 3
000110CE 3403                       		dc.b $34, 3
000110D0 1401                       		dc.b $14, 1
000110D2 2401                       		dc.b $24, 1
000110D4 2C01                       		dc.b $2C, 1
000110D6 1403                       		dc.b $14, 3
000110D8 2403                       		dc.b $24, 3
000110DA 2C03                       		dc.b $2C, 3
000110DC 2005                       		dc.b $20, 5
000110DE 2007                       		dc.b $20, 7
000110E0 3009                       		dc.b $30, 9
000110E2                            ; ===========================================================================
000110E2                            
000110E2                            Obj59_Main:				; XREF: Obj59_Index
000110E2 5428 0024                  		addq.b	#2,$24(a0)
000110E6 7000                       		moveq	#0,d0
000110E8 1028 0028                  		move.b	$28(a0),d0
000110EC 6A00                       		bpl.s	Obj59_Main2
000110EE 5828 0024                  		addq.b	#4,$24(a0)
000110F2 0240 007F                  		andi.w	#$7F,d0
000110F6 C0FC 0006                  		mulu.w	#6,d0
000110FA 3140 003C                  		move.w	d0,$3C(a0)
000110FE 3140 003E                  		move.w	d0,$3E(a0)
00011102 588F                       		addq.l	#4,sp
00011104 4E75                       		rts	
00011106                            ; ===========================================================================
00011106                            
00011106                            Obj59_Main2:
00011106 E648                       		lsr.w	#3,d0
00011108 0240 001E                  		andi.w	#$1E,d0
0001110C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011110 115A 0019                  		move.b	(a2)+,$19(a0)
00011114 115A 001A                  		move.b	(a2)+,$1A(a0)
00011118 7000                       		moveq	#0,d0
0001111A 1028 0028                  		move.b	$28(a0),d0
0001111E D040                       		add.w	d0,d0
00011120 0240 001E                  		andi.w	#$1E,d0
00011124 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011128 101A                       		move.b	(a2)+,d0
0001112A E548                       		lsl.w	#2,d0
0001112C 3140 003C                  		move.w	d0,$3C(a0)
00011130 115A 0028                  		move.b	(a2)+,$28(a0)
00011134 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001113C 317C 4000 0002             		move.w	#$4000,2(a0)
00011142 117C 0004 0001             		move.b	#4,1(a0)
00011148 117C 0004 0018             		move.b	#4,$18(a0)
0001114E 3168 0008 0032             		move.w	8(a0),$32(a0)
00011154 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001115A                            
0001115A                            Obj59_Platform:				; XREF: Obj59_Index
0001115A 7200                       		moveq	#0,d1
0001115C 1228 0019                  		move.b	$19(a0),d1
00011160 4EB9 0000 78FE             		jsr	(PlatformObject).l
00011166 6000 0000                  		bra.w	Obj59_Types
0001116A                            ; ===========================================================================
0001116A                            
0001116A                            Obj59_Action:				; XREF: Obj59_Index
0001116A 7200                       		moveq	#0,d1
0001116C 1228 0019                  		move.b	$19(a0),d1
00011170 4EB9 0000 7A72             		jsr	(ExitPlatform).l
00011176 3F28 0008                  		move.w	8(a0),-(sp)
0001117A 6100 0000                  		bsr.w	Obj59_Types
0001117E 341F                       		move.w	(sp)+,d2
00011180 4A10                       		tst.b	0(a0)
00011182 6700                       		beq.s	locret_10BD4
00011184 4EF9 0000 7FDC             		jmp	(MvSonicOnPtfm2).l
0001118A                            ; ===========================================================================
0001118A                            
0001118A                            locret_10BD4:
0001118A 4E75                       		rts	
0001118C                            ; ===========================================================================
0001118C                            
0001118C                            Obj59_Types:
0001118C 7000                       		moveq	#0,d0
0001118E 1028 0028                  		move.b	$28(a0),d0
00011192 0240 000F                  		andi.w	#$F,d0
00011196 D040                       		add.w	d0,d0
00011198 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001119C 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000111A0                            ; ===========================================================================
000111A0 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111A4 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111A8 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111AC 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111B0 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000111B4                            ; ===========================================================================
000111B4                            
000111B4                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000111B4 4E75                       		rts	
000111B6                            ; ===========================================================================
000111B6                            
000111B6                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000111B6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000111BC 6600                       		bne.s	locret_10C0C
000111BE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000111C2                            
000111C2                            locret_10C0C:
000111C2 4E75                       		rts	
000111C4                            ; ===========================================================================
000111C4                            
000111C4                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111C4 6100 0000                  		bsr.w	Obj59_Move
000111C8 3028 0034                  		move.w	$34(a0),d0
000111CC 4440                       		neg.w	d0
000111CE D068 0030                  		add.w	$30(a0),d0
000111D2 3140 000C                  		move.w	d0,$C(a0)
000111D6 4E75                       		rts	
000111D8                            ; ===========================================================================
000111D8                            
000111D8                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000111D8 6100 0000                  		bsr.w	Obj59_Move
000111DC 3028 0034                  		move.w	$34(a0),d0
000111E0 D068 0030                  		add.w	$30(a0),d0
000111E4 3140 000C                  		move.w	d0,$C(a0)
000111E8 4E75                       		rts	
000111EA                            ; ===========================================================================
000111EA                            
000111EA                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000111EA 6100 0000                  		bsr.w	Obj59_Move
000111EE 3028 0034                  		move.w	$34(a0),d0
000111F2 E240                       		asr.w	#1,d0
000111F4 4440                       		neg.w	d0
000111F6 D068 0030                  		add.w	$30(a0),d0
000111FA 3140 000C                  		move.w	d0,$C(a0)
000111FE 3028 0034                  		move.w	$34(a0),d0
00011202 D068 0032                  		add.w	$32(a0),d0
00011206 3140 0008                  		move.w	d0,8(a0)
0001120A 4E75                       		rts	
0001120C                            ; ===========================================================================
0001120C                            
0001120C                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001120C 6100 0000                  		bsr.w	Obj59_Move
00011210 3028 0034                  		move.w	$34(a0),d0
00011214 E240                       		asr.w	#1,d0
00011216 D068 0030                  		add.w	$30(a0),d0
0001121A 3140 000C                  		move.w	d0,$C(a0)
0001121E 3028 0034                  		move.w	$34(a0),d0
00011222 4440                       		neg.w	d0
00011224 D068 0032                  		add.w	$32(a0),d0
00011228 3140 0008                  		move.w	d0,8(a0)
0001122C 4E75                       		rts	
0001122E                            ; ===========================================================================
0001122E                            
0001122E                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001122E 6100 0000                  		bsr.w	Obj59_Move
00011232 3028 0034                  		move.w	$34(a0),d0
00011236 4440                       		neg.w	d0
00011238 D068 0030                  		add.w	$30(a0),d0
0001123C 3140 000C                  		move.w	d0,$C(a0)
00011240 4A28 0028                  		tst.b	$28(a0)
00011244 6700 0000                  		beq.w	loc_10C94
00011248 4E75                       		rts	
0001124A                            ; ===========================================================================
0001124A                            
0001124A                            loc_10C94:
0001124A 0828 0003 0022             		btst	#3,$22(a0)
00011250 6700                       		beq.s	Obj59_Delete
00011252 08E9 0001 0022             		bset	#1,$22(a1)
00011258 08A9 0003 0022             		bclr	#3,$22(a1)
0001125E 137C 0002 0024             		move.b	#2,$24(a1)
00011264                            
00011264                            Obj59_Delete:
00011264 6000 C9A2                  		bra.w	DeleteObject
00011268                            
00011268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011268                            
00011268                            
00011268                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011268 3028 0038                  		move.w	$38(a0),d0
0001126C 4A28 003A                  		tst.b	$3A(a0)
00011270 6600                       		bne.s	loc_10CC8
00011272 0C40 0800                  		cmpi.w	#$800,d0
00011276 6400                       		bcc.s	loc_10CD0
00011278 0640 0010                  		addi.w	#$10,d0
0001127C 6000                       		bra.s	loc_10CD0
0001127E                            ; ===========================================================================
0001127E                            
0001127E                            loc_10CC8:
0001127E 4A40                       		tst.w	d0
00011280 6700                       		beq.s	loc_10CD0
00011282 0440 0010                  		subi.w	#$10,d0
00011286                            
00011286                            loc_10CD0:
00011286 3140 0038                  		move.w	d0,$38(a0)
0001128A 48C0                       		ext.l	d0
0001128C E180                       		asl.l	#8,d0
0001128E D0A8 0034                  		add.l	$34(a0),d0
00011292 2140 0034                  		move.l	d0,$34(a0)
00011296 4840                       		swap	d0
00011298 3428 003C                  		move.w	$3C(a0),d2
0001129C B042                       		cmp.w	d2,d0
0001129E 6300                       		bls.s	loc_10CF0
000112A0 117C 0001 003A             		move.b	#1,$3A(a0)
000112A6                            
000112A6                            loc_10CF0:
000112A6 D442                       		add.w	d2,d2
000112A8 B042                       		cmp.w	d2,d0
000112AA 6600                       		bne.s	locret_10CFA
000112AC 4228 0028                  		clr.b	$28(a0)
000112B0                            
000112B0                            locret_10CFA:
000112B0 4E75                       		rts	
000112B2                            ; End of function Obj59_Move
000112B2                            
000112B2                            ; ===========================================================================
000112B2                            
000112B2                            Obj59_MakeMulti:			; XREF: Obj59_Index
000112B2 5368 003C                  		subq.w	#1,$3C(a0)
000112B6 6600                       		bne.s	Obj59_ChkDel
000112B8 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000112BE 6100 CD92                  		bsr.w	SingleObjLoad
000112C2 6600                       		bne.s	Obj59_ChkDel
000112C4 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000112C8 3368 0008 0008             		move.w	8(a0),8(a1)
000112CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112D4 137C 000E 0028             		move.b	#$E,$28(a1)
000112DA                            
000112DA                            Obj59_ChkDel:
000112DA 588F                       		addq.l	#4,sp
000112DC 3028 0008                  		move.w	8(a0),d0
000112E0 0240 FF80                  		andi.w	#$FF80,d0
000112E4 3238 F700                  		move.w	($FFFFF700).w,d1
000112E8 0441 0080                  		subi.w	#$80,d1
000112EC 0241 FF80                  		andi.w	#$FF80,d1
000112F0 9041                       		sub.w	d1,d0
000112F2 0C40 0280                  		cmpi.w	#$280,d0
000112F6 6200 C910                  		bhi.w	DeleteObject
000112FA 4E75                       		rts	
000112FC                            ; ===========================================================================
000112FC                            ; ---------------------------------------------------------------------------
000112FC                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112FC                            ; ---------------------------------------------------------------------------
000112FC                            Map_obj59:
000112FC                            	include "_maps\obj59.asm"
000112FC                            ; ---------------------------------------------------------------------------
000112FC                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112FC                            ; ---------------------------------------------------------------------------
000112FC 0000                       		dc.w byte_10D4A-Map_obj59
000112FE 03                         byte_10D4A:	dc.b 3
000112FF F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011304 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011309 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001130E                            		even
0001130E                            		even
0001130E                            
0001130E                            ; ===========================================================================
0001130E                            ; ---------------------------------------------------------------------------
0001130E                            ; Object 5A - platforms	moving in circles (SLZ)
0001130E                            ; ---------------------------------------------------------------------------
0001130E                            
0001130E                            Obj5A:					; XREF: Obj_Index
0001130E 7000                       		moveq	#0,d0
00011310 1028 0024                  		move.b	$24(a0),d0
00011314 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011318 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001131C 3028 0032                  		move.w	$32(a0),d0
00011320 0240 FF80                  		andi.w	#$FF80,d0
00011324 3238 F700                  		move.w	($FFFFF700).w,d1
00011328 0441 0080                  		subi.w	#$80,d1
0001132C 0241 FF80                  		andi.w	#$FF80,d1
00011330 9041                       		sub.w	d1,d0
00011332 0C40 0280                  		cmpi.w	#$280,d0
00011336 6200 C8D0                  		bhi.w	DeleteObject
0001133A 6000 C890                  		bra.w	DisplaySprite
0001133E                            ; ===========================================================================
0001133E 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011340 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011342 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011344                            ; ===========================================================================
00011344                            
00011344                            Obj5A_Main:				; XREF: Obj5A_Index
00011344 5428 0024                  		addq.b	#2,$24(a0)
00011348 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011350 317C 4000 0002             		move.w	#$4000,2(a0)
00011356 117C 0004 0001             		move.b	#4,1(a0)
0001135C 117C 0004 0018             		move.b	#4,$18(a0)
00011362 117C 0018 0019             		move.b	#$18,$19(a0)
00011368 3168 0008 0032             		move.w	8(a0),$32(a0)
0001136E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011374                            
00011374                            Obj5A_Platform:				; XREF: Obj5A_Index
00011374 7200                       		moveq	#0,d1
00011376 1228 0019                  		move.b	$19(a0),d1
0001137A 4EB9 0000 78FE             		jsr	(PlatformObject).l
00011380 6000 0000                  		bra.w	Obj5A_Types
00011384                            ; ===========================================================================
00011384                            
00011384                            Obj5A_Action:				; XREF: Obj5A_Index
00011384 7200                       		moveq	#0,d1
00011386 1228 0019                  		move.b	$19(a0),d1
0001138A 4EB9 0000 7A72             		jsr	(ExitPlatform).l
00011390 3F28 0008                  		move.w	8(a0),-(sp)
00011394 6100 0000                  		bsr.w	Obj5A_Types
00011398 341F                       		move.w	(sp)+,d2
0001139A 4EF9 0000 7FDC             		jmp	(MvSonicOnPtfm2).l
000113A0                            ; ===========================================================================
000113A0                            
000113A0                            Obj5A_Types:
000113A0 7000                       		moveq	#0,d0
000113A2 1028 0028                  		move.b	$28(a0),d0
000113A6 0240 000C                  		andi.w	#$C,d0
000113AA E248                       		lsr.w	#1,d0
000113AC 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000113B0 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000113B4                            ; ===========================================================================
000113B4 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000113B6 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000113B8                            ; ===========================================================================
000113B8                            
000113B8                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000113B8 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113BC 0401 0050                  		subi.b	#$50,d1
000113C0 4881                       		ext.w	d1
000113C2 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113C6 0402 0050                  		subi.b	#$50,d2
000113CA 4882                       		ext.w	d2
000113CC 0828 0000 0028             		btst	#0,$28(a0)
000113D2 6700                       		beq.s	loc_10E24
000113D4 4441                       		neg.w	d1
000113D6 4442                       		neg.w	d2
000113D8                            
000113D8                            loc_10E24:
000113D8 0828 0001 0028             		btst	#1,$28(a0)
000113DE 6700                       		beq.s	loc_10E30
000113E0 4441                       		neg.w	d1
000113E2 C342                       		exg	d1,d2
000113E4                            
000113E4                            loc_10E30:
000113E4 D268 0032                  		add.w	$32(a0),d1
000113E8 3141 0008                  		move.w	d1,8(a0)
000113EC D468 0030                  		add.w	$30(a0),d2
000113F0 3142 000C                  		move.w	d2,$C(a0)
000113F4 4E75                       		rts	
000113F6                            ; ===========================================================================
000113F6                            
000113F6                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000113F6 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113FA 0401 0050                  		subi.b	#$50,d1
000113FE 4881                       		ext.w	d1
00011400 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011404 0402 0050                  		subi.b	#$50,d2
00011408 4882                       		ext.w	d2
0001140A 0828 0000 0028             		btst	#0,$28(a0)
00011410 6700                       		beq.s	loc_10E62
00011412 4441                       		neg.w	d1
00011414 4442                       		neg.w	d2
00011416                            
00011416                            loc_10E62:
00011416 0828 0001 0028             		btst	#1,$28(a0)
0001141C 6700                       		beq.s	loc_10E6E
0001141E 4441                       		neg.w	d1
00011420 C342                       		exg	d1,d2
00011422                            
00011422                            loc_10E6E:
00011422 4441                       		neg.w	d1
00011424 D268 0032                  		add.w	$32(a0),d1
00011428 3141 0008                  		move.w	d1,8(a0)
0001142C D468 0030                  		add.w	$30(a0),d2
00011430 3142 000C                  		move.w	d2,$C(a0)
00011434 4E75                       		rts	
00011436                            ; ===========================================================================
00011436                            ; ---------------------------------------------------------------------------
00011436                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011436                            ; ---------------------------------------------------------------------------
00011436                            Map_obj5A:
00011436                            	include "_maps\obj5A.asm"
00011436                            ; ---------------------------------------------------------------------------
00011436                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011436                            ; ---------------------------------------------------------------------------
00011436 0000                       		dc.w byte_10E84-Map_obj5A
00011438 02                         byte_10E84:	dc.b 2
00011439 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001143E F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011444 00                         		even
00011444 00                         		even
00011444                            
00011444                            ; ===========================================================================
00011444                            ; ---------------------------------------------------------------------------
00011444                            ; Object 5B - blocks that form a staircase (SLZ)
00011444                            ; ---------------------------------------------------------------------------
00011444                            
00011444                            Obj5B:					; XREF: Obj_Index
00011444 7000                       		moveq	#0,d0
00011446 1028 0024                  		move.b	$24(a0),d0
0001144A 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001144E 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011452 3028 0030                  		move.w	$30(a0),d0
00011456 0240 FF80                  		andi.w	#$FF80,d0
0001145A 3238 F700                  		move.w	($FFFFF700).w,d1
0001145E 0441 0080                  		subi.w	#$80,d1
00011462 0241 FF80                  		andi.w	#$FF80,d1
00011466 9041                       		sub.w	d1,d0
00011468 0C40 0280                  		cmpi.w	#$280,d0
0001146C 6200 C79A                  		bhi.w	DeleteObject
00011470 6000 C75A                  		bra.w	DisplaySprite
00011474                            ; ===========================================================================
00011474 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011476 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011478 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001147A                            ; ===========================================================================
0001147A                            
0001147A                            Obj5B_Main:				; XREF: Obj5B_Index
0001147A 5428 0024                  		addq.b	#2,$24(a0)
0001147E 7638                       		moveq	#$38,d3
00011480 7801                       		moveq	#1,d4
00011482 0828 0000 0022             		btst	#0,$22(a0)
00011488 6700                       		beq.s	loc_10EDA
0001148A 763B                       		moveq	#$3B,d3
0001148C 78FF                       		moveq	#-1,d4
0001148E                            
0001148E                            loc_10EDA:
0001148E 3428 0008                  		move.w	8(a0),d2
00011492 2248                       		movea.l	a0,a1
00011494 7203                       		moveq	#3,d1
00011496 6000                       		bra.s	Obj5B_MakeBlocks
00011498                            ; ===========================================================================
00011498                            
00011498                            Obj5B_Loop:
00011498 6100 CBCE                  		bsr.w	SingleObjLoad2
0001149C 6600 0000                  		bne.w	Obj5B_Move
000114A0 137C 0004 0024             		move.b	#4,$24(a1)
000114A6                            
000114A6                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000114A6 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000114AA 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000114B2 337C 4000 0002             		move.w	#$4000,2(a1)
000114B8 137C 0004 0001             		move.b	#4,1(a1)
000114BE 137C 0003 0018             		move.b	#3,$18(a1)
000114C4 137C 0010 0019             		move.b	#$10,$19(a1)
000114CA 1368 0028 0028             		move.b	$28(a0),$28(a1)
000114D0 3342 0008                  		move.w	d2,8(a1)
000114D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114DA 3368 0008 0030             		move.w	8(a0),$30(a1)
000114E0 3369 000C 0032             		move.w	$C(a1),$32(a1)
000114E6 0642 0020                  		addi.w	#$20,d2
000114EA 1343 0037                  		move.b	d3,$37(a1)
000114EE 2348 003C                  		move.l	a0,$3C(a1)
000114F2 D604                       		add.b	d4,d3
000114F4 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000114F8                            
000114F8                            Obj5B_Move:				; XREF: Obj5B_Index
000114F8 7000                       		moveq	#0,d0
000114FA 1028 0028                  		move.b	$28(a0),d0
000114FE 0240 0007                  		andi.w	#7,d0
00011502 D040                       		add.w	d0,d0
00011504 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011508 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001150C                            
0001150C                            Obj5B_Solid:				; XREF: Obj5B_Index
0001150C 2468 003C                  		movea.l	$3C(a0),a2
00011510 7000                       		moveq	#0,d0
00011512 1028 0037                  		move.b	$37(a0),d0
00011516 1032 0000                  		move.b	(a2,d0.w),d0
0001151A D068 0032                  		add.w	$32(a0),d0
0001151E 3140 000C                  		move.w	d0,$C(a0)
00011522 7200                       		moveq	#0,d1
00011524 1228 0019                  		move.b	$19(a0),d1
00011528 0641 000B                  		addi.w	#$B,d1
0001152C 343C 0010                  		move.w	#$10,d2
00011530 363C 0011                  		move.w	#$11,d3
00011534 3828 0008                  		move.w	8(a0),d4
00011538 6100 EA62                  		bsr.w	SolidObject
0001153C 4A04                       		tst.b	d4
0001153E 6A00                       		bpl.s	loc_10F92
00011540 1544 0036                  		move.b	d4,$36(a2)
00011544                            
00011544                            loc_10F92:
00011544 0828 0003 0022             		btst	#3,$22(a0)
0001154A 6700                       		beq.s	locret_10FA0
0001154C 157C 0001 0036             		move.b	#1,$36(a2)
00011552                            
00011552                            locret_10FA0:
00011552 4E75                       		rts	
00011554                            ; ===========================================================================
00011554 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011556 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011558 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001155A 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001155C                            ; ===========================================================================
0001155C                            
0001155C                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001155C 4A68 0034                  		tst.w	$34(a0)
00011560 6600                       		bne.s	loc_10FC0
00011562 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011568 6600                       		bne.s	locret_10FBE
0001156A 317C 001E 0034             		move.w	#$1E,$34(a0)
00011570                            
00011570                            locret_10FBE:
00011570 4E75                       		rts	
00011572                            ; ===========================================================================
00011572                            
00011572                            loc_10FC0:
00011572 5368 0034                  		subq.w	#1,$34(a0)
00011576 66F8                       		bne.s	locret_10FBE
00011578 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001157C 4E75                       		rts	
0001157E                            ; ===========================================================================
0001157E                            
0001157E                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001157E 4A68 0034                  		tst.w	$34(a0)
00011582 6600                       		bne.s	loc_10FE0
00011584 4A28 0036                  		tst.b	$36(a0)
00011588 6A00                       		bpl.s	locret_10FDE
0001158A 317C 003C 0034             		move.w	#$3C,$34(a0)
00011590                            
00011590                            locret_10FDE:
00011590 4E75                       		rts	
00011592                            ; ===========================================================================
00011592                            
00011592                            loc_10FE0:
00011592 5368 0034                  		subq.w	#1,$34(a0)
00011596 6600                       		bne.s	loc_10FEC
00011598 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            
0001159E                            loc_10FEC:
0001159E 43E8 0038                  		lea	$38(a0),a1
000115A2 3028 0034                  		move.w	$34(a0),d0
000115A6 E408                       		lsr.b	#2,d0
000115A8 0200 0001                  		andi.b	#1,d0
000115AC 12C0                       		move.b	d0,(a1)+
000115AE 0A00 0001                  		eori.b	#1,d0
000115B2 12C0                       		move.b	d0,(a1)+
000115B4 0A00 0001                  		eori.b	#1,d0
000115B8 12C0                       		move.b	d0,(a1)+
000115BA 0A00 0001                  		eori.b	#1,d0
000115BE 12C0                       		move.b	d0,(a1)+
000115C0 4E75                       		rts	
000115C2                            ; ===========================================================================
000115C2                            
000115C2                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000115C2 43E8 0038                  		lea	$38(a0),a1
000115C6 0C11 0080                  		cmpi.b	#$80,(a1)
000115CA 6700                       		beq.s	locret_11038
000115CC 5211                       		addq.b	#1,(a1)
000115CE 7200                       		moveq	#0,d1
000115D0 1219                       		move.b	(a1)+,d1
000115D2 4841                       		swap	d1
000115D4 E289                       		lsr.l	#1,d1
000115D6 2401                       		move.l	d1,d2
000115D8 E289                       		lsr.l	#1,d1
000115DA 2601                       		move.l	d1,d3
000115DC D682                       		add.l	d2,d3
000115DE 4841                       		swap	d1
000115E0 4842                       		swap	d2
000115E2 4843                       		swap	d3
000115E4 12C3                       		move.b	d3,(a1)+
000115E6 12C2                       		move.b	d2,(a1)+
000115E8 12C1                       		move.b	d1,(a1)+
000115EA                            
000115EA                            locret_11038:
000115EA 4E75                       		rts	
000115EC 4E75                       		rts	
000115EE                            ; ===========================================================================
000115EE                            ; ---------------------------------------------------------------------------
000115EE                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115EE                            ; ---------------------------------------------------------------------------
000115EE                            Map_obj5B:
000115EE                            	include "_maps\obj5B.asm"
000115EE                            ; ---------------------------------------------------------------------------
000115EE                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115EE                            ; ---------------------------------------------------------------------------
000115EE 0000                       		dc.w byte_1103E-Map_obj5B
000115F0 01                         byte_1103E:	dc.b 1
000115F1 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000115F6                            		even
000115F6                            		even
000115F6                            
000115F6                            ; ===========================================================================
000115F6                            ; ---------------------------------------------------------------------------
000115F6                            ; Object 5C - metal girders in foreground (SLZ)
000115F6                            ; ---------------------------------------------------------------------------
000115F6                            
000115F6                            Obj5C:					; XREF: Obj_Index
000115F6 7000                       		moveq	#0,d0
000115F8 1028 0024                  		move.b	$24(a0),d0
000115FC 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011600 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011604                            ; ===========================================================================
00011604 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011606 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011608                            ; ===========================================================================
00011608                            
00011608                            Obj5C_Main:				; XREF: Obj5C_Index
00011608 5428 0024                  		addq.b	#2,$24(a0)
0001160C 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011614 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001161A 117C 0010 0019             		move.b	#$10,$19(a0)
00011620                            
00011620                            Obj5C_Display:				; XREF: Obj5C_Index
00011620 2238 F700                  		move.l	($FFFFF700).w,d1
00011624 D281                       		add.l	d1,d1
00011626 4841                       		swap	d1
00011628 4441                       		neg.w	d1
0001162A 3141 0008                  		move.w	d1,8(a0)
0001162E 2238 F704                  		move.l	($FFFFF704).w,d1
00011632 D281                       		add.l	d1,d1
00011634 4841                       		swap	d1
00011636 0241 003F                  		andi.w	#$3F,d1
0001163A 4441                       		neg.w	d1
0001163C 0641 0100                  		addi.w	#$100,d1
00011640 3141 000A                  		move.w	d1,$A(a0)
00011644 6000 C586                  		bra.w	DisplaySprite
00011648                            ; ===========================================================================
00011648                            ; ---------------------------------------------------------------------------
00011648                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011648                            ; ---------------------------------------------------------------------------
00011648                            Map_obj5C:
00011648                            	include "_maps\obj5C.asm"
00011648                            ; ---------------------------------------------------------------------------
00011648                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011648                            ; ---------------------------------------------------------------------------
00011648 0000                       		dc.w byte_11098-Map_obj5C
0001164A 09                         byte_11098:	dc.b 9
0001164B 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011650 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011655 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001165A E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001165F 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011664 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011669 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001166E 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011673 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011678                            		even
00011678                            		even
00011678                            
00011678                            ; ===========================================================================
00011678                            ; ---------------------------------------------------------------------------
00011678                            ; Object 1B - water surface (LZ)
00011678                            ; ---------------------------------------------------------------------------
00011678                            
00011678                            Obj1B:					; XREF: Obj_Index
00011678 7000                       		moveq	#0,d0
0001167A 1028 0024                  		move.b	$24(a0),d0
0001167E 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011682 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011686                            ; ===========================================================================
00011686 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011688 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001168A                            ; ===========================================================================
0001168A                            
0001168A                            Obj1B_Main:				; XREF: Obj1B_Index
0001168A 5428 0024                  		addq.b	#2,$24(a0)
0001168E 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011696 317C C300 0002             		move.w	#$C300,2(a0)
0001169C 117C 0004 0001             		move.b	#4,1(a0)
000116A2 117C 0080 0019             		move.b	#$80,$19(a0)
000116A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000116AE                            
000116AE                            Obj1B_Action:				; XREF: Obj1B_Index
000116AE 3238 F700                  		move.w	($FFFFF700).w,d1
000116B2 0241 FFE0                  		andi.w	#$FFE0,d1
000116B6 D268 0030                  		add.w	$30(a0),d1
000116BA 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000116C0 6700                       		beq.s	loc_11114
000116C2 0641 0020                  		addi.w	#$20,d1
000116C6                            
000116C6                            loc_11114:
000116C6 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000116CA 3238 F646                  		move.w	($FFFFF646).w,d1
000116CE 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000116D2 4A28 0032                  		tst.b	$32(a0)
000116D6 6600                       		bne.s	Obj1B_Animate
000116D8 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000116DE 6700                       		beq.s	loc_1114A	; if not, branch
000116E0 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000116E4 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000116EA 6000                       		bra.s	Obj1B_Display
000116EC                            ; ===========================================================================
000116EC                            
000116EC                            Obj1B_Animate:				; XREF: loc_11114
000116EC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000116F0 6600                       		bne.s	Obj1B_Display	; if yes, branch
000116F2 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000116F8 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116FC                            
000116FC                            loc_1114A:				; XREF: loc_11114
000116FC 5328 001E                  		subq.b	#1,$1E(a0)
00011700 6A00                       		bpl.s	Obj1B_Display
00011702 117C 0007 001E             		move.b	#7,$1E(a0)
00011708 5228 001A                  		addq.b	#1,$1A(a0)
0001170C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011712 6500                       		bcs.s	Obj1B_Display
00011714 117C 0000 001A             		move.b	#0,$1A(a0)
0001171A                            
0001171A                            Obj1B_Display:
0001171A 6000 C4B0                  		bra.w	DisplaySprite
0001171E                            ; ===========================================================================
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            ; Sprite mappings - water surface (LZ)
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            Map_obj1B:
0001171E                            	include "_maps\obj1B.asm"
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            ; Sprite mappings - water surface (LZ)
0001171E                            ; ---------------------------------------------------------------------------
0001171E 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011722 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011726 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001172A 03                         byte_11178:	dc.b 3
0001172B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011730 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011735 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001173A 03                         byte_11188:	dc.b 3
0001173B FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011740 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011745 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001174A 03                         byte_11198:	dc.b 3
0001174B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011750 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011755 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001175A 06                         byte_111A8:	dc.b 6
0001175B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011760 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011765 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001176A FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001176F FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011774 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011779 06                         byte_111C7:	dc.b 6
0001177A FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001177F FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011784 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011789 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001178E FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011793 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011798 06                         byte_111E6:	dc.b 6
00011799 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001179E FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000117A3 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000117A8 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000117AD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000117B2 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000117B8 00                         		even
000117B8 00                         		even
000117B8                            
000117B8                            ; ===========================================================================
000117B8                            ; ---------------------------------------------------------------------------
000117B8                            ; Object 0B - pole that	breaks (LZ)
000117B8                            ; ---------------------------------------------------------------------------
000117B8                            
000117B8                            Obj0B:					; XREF: Obj_Index
000117B8 7000                       		moveq	#0,d0
000117BA 1028 0024                  		move.b	$24(a0),d0
000117BE 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000117C2 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117C6                            ; ===========================================================================
000117C6 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000117C8 0000                       		dc.w Obj0B_Action-Obj0B_Index
000117CA 0000                       		dc.w Obj0B_Display-Obj0B_Index
000117CC                            ; ===========================================================================
000117CC                            
000117CC                            Obj0B_Main:				; XREF: Obj0B_Index
000117CC 5428 0024                  		addq.b	#2,$24(a0)
000117D0 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000117D8 317C 43DE 0002             		move.w	#$43DE,2(a0)
000117DE 117C 0004 0001             		move.b	#4,1(a0)
000117E4 117C 0008 0019             		move.b	#8,$19(a0)
000117EA 117C 0004 0018             		move.b	#4,$18(a0)
000117F0 117C 00E1 0020             		move.b	#$E1,$20(a0)
000117F6 7000                       		moveq	#0,d0
000117F8 1028 0028                  		move.b	$28(a0),d0	; get object type
000117FC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011800 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011804                            
00011804                            Obj0B_Action:				; XREF: Obj0B_Index
00011804 4A28 0032                  		tst.b	$32(a0)
00011808 6700                       		beq.s	Obj0B_Grab
0001180A 4A68 0030                  		tst.w	$30(a0)
0001180E 6700                       		beq.s	Obj0B_MoveUp
00011810 5368 0030                  		subq.w	#1,$30(a0)
00011814 6600                       		bne.s	Obj0B_MoveUp
00011816 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001181C 6000                       		bra.s	Obj0B_Release
0001181E                            ; ===========================================================================
0001181E                            
0001181E                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001181E 43F8 D000                  		lea	($FFFFD000).w,a1
00011822 3028 000C                  		move.w	$C(a0),d0
00011826 0440 0018                  		subi.w	#$18,d0
0001182A 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011830 6700                       		beq.s	Obj0B_MoveDown
00011832 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011836 B069 000C                  		cmp.w	$C(a1),d0
0001183A 6500                       		bcs.s	Obj0B_MoveDown
0001183C 3340 000C                  		move.w	d0,$C(a1)
00011840                            
00011840                            Obj0B_MoveDown:
00011840 0640 0024                  		addi.w	#$24,d0
00011844 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001184A 6700                       		beq.s	Obj0B_LetGo
0001184C 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011850 B069 000C                  		cmp.w	$C(a1),d0
00011854 6400                       		bcc.s	Obj0B_LetGo
00011856 3340 000C                  		move.w	d0,$C(a1)
0001185A                            
0001185A                            Obj0B_LetGo:
0001185A 1038 F603                  		move.b	($FFFFF603).w,d0
0001185E 0240 0070                  		andi.w	#$70,d0
00011862 6700                       		beq.s	Obj0B_Display
00011864                            
00011864                            Obj0B_Release:				; XREF: Obj0B_Action
00011864 4228 0020                  		clr.b	$20(a0)
00011868 5428 0024                  		addq.b	#2,$24(a0)
0001186C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011870 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011874 4228 0032                  		clr.b	$32(a0)
00011878 6000                       		bra.s	Obj0B_Display
0001187A                            ; ===========================================================================
0001187A                            
0001187A                            Obj0B_Grab:				; XREF: Obj0B_Action
0001187A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001187E 6700                       		beq.s	Obj0B_Display	; if not, branch
00011880 43F8 D000                  		lea	($FFFFD000).w,a1
00011884 3028 0008                  		move.w	8(a0),d0
00011888 0640 0014                  		addi.w	#$14,d0
0001188C B069 0008                  		cmp.w	8(a1),d0
00011890 6400                       		bcc.s	Obj0B_Display
00011892 4228 0021                  		clr.b	$21(a0)
00011896 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001189C 6400                       		bcc.s	Obj0B_Display
0001189E 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000118A2 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000118A6 3028 0008                  		move.w	8(a0),d0
000118AA 0640 0014                  		addi.w	#$14,d0
000118AE 3340 0008                  		move.w	d0,8(a1)
000118B2 08A9 0000 0022             		bclr	#0,$22(a1)
000118B8 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000118BE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118C4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118CA 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000118D0                            
000118D0                            Obj0B_Display:				; XREF: Obj0B_Index
000118D0 6000 E3A2                  		bra.w	MarkObjGone
000118D4                            ; ===========================================================================
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            ; Sprite mappings - pole that breaks (LZ)
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            Map_obj0B:
000118D4                            	include "_maps\obj0B.asm"
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            ; Sprite mappings - pole that breaks (LZ)
000118D4                            ; ---------------------------------------------------------------------------
000118D4 0000                       		dc.w byte_11326-Map_obj0B
000118D6 0000                       		dc.w byte_11331-Map_obj0B
000118D8 02                         byte_11326:	dc.b 2			; normal pole
000118D9 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000118DE 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000118E3 04                         byte_11331:	dc.b 4			; broken pole
000118E4 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000118E9 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000118EE 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000118F3 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000118F8                            		even
000118F8                            		even
000118F8                            
000118F8                            ; ===========================================================================
000118F8                            ; ---------------------------------------------------------------------------
000118F8                            ; Object 0C - flapping door (LZ)
000118F8                            ; ---------------------------------------------------------------------------
000118F8                            
000118F8                            Obj0C:					; XREF: Obj_Index
000118F8 7000                       		moveq	#0,d0
000118FA 1028 0024                  		move.b	$24(a0),d0
000118FE 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011902 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011906                            ; ===========================================================================
00011906 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011908 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001190A                            ; ===========================================================================
0001190A                            
0001190A                            Obj0C_Main:				; XREF: Obj0C_Index
0001190A 5428 0024                  		addq.b	#2,$24(a0)
0001190E 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011916 317C 4328 0002             		move.w	#$4328,2(a0)
0001191C 0028 0004 0001             		ori.b	#4,1(a0)
00011922 117C 0028 0019             		move.b	#$28,$19(a0)
00011928 7000                       		moveq	#0,d0
0001192A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001192E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011932 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011936                            
00011936                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011936 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001193A 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001193C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011942 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011948 4A28 0001                  		tst.b	1(a0)
0001194C 6A00                       		bpl.s	Obj0C_Solid
0001194E 303C 00BB                  		move.w	#$BB,d0
00011952 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00011958                            
00011958                            Obj0C_Solid:
00011958 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001195E 6100 9342                  		bsr.w	AnimateSprite
00011962 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011966 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001196A 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001196C 3038 D008                  		move.w	($FFFFD008).w,d0
00011970 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011974 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011976 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001197C 323C 0013                  		move.w	#$13,d1
00011980 343C 0020                  		move.w	#$20,d2
00011984 3602                       		move.w	d2,d3
00011986 5243                       		addq.w	#1,d3
00011988 3828 0008                  		move.w	8(a0),d4
0001198C 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011990                            
00011990                            Obj0C_Display:
00011990 6000 E2E2                  		bra.w	MarkObjGone
00011994                            ; ===========================================================================
00011994                            Ani_obj0C:
00011994                            	include "_anim\obj0C.asm"
00011994                            ; ---------------------------------------------------------------------------
00011994                            ; Animation script - flapping door (LZ)
00011994                            ; ---------------------------------------------------------------------------
00011994 0000                       		dc.w byte_113E6-Ani_obj0C
00011996 0000                       		dc.w byte_113EC-Ani_obj0C
00011998 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001199E 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
000119A4                            		even
000119A4                            		even
000119A4                            
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            ; Sprite mappings - flapping door (LZ)
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            Map_obj0C:
000119A4                            	include "_maps\obj0C.asm"
000119A4                            ; ---------------------------------------------------------------------------
000119A4                            ; Sprite mappings - flapping door (LZ)
000119A4                            ; ---------------------------------------------------------------------------
000119A4 0000                       		dc.w byte_113F8-Map_obj0C
000119A6 0000                       		dc.w byte_11403-Map_obj0C
000119A8 0000                       		dc.w byte_1140E-Map_obj0C
000119AA 02                         byte_113F8:	dc.b 2
000119AB E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000119B0 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000119B5 02                         byte_11403:	dc.b 2
000119B6 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000119BB 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000119C0 02                         byte_1140E:	dc.b 2
000119C1 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119C6 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000119CC 00                         		even
000119CC 00                         		even
000119CC                            
000119CC                            ; ===========================================================================
000119CC                            ; ---------------------------------------------------------------------------
000119CC                            ; Object 71 - invisible	solid blocks
000119CC                            ; ---------------------------------------------------------------------------
000119CC                            
000119CC                            Obj71:					; XREF: Obj_Index
000119CC 7000                       		moveq	#0,d0
000119CE 1028 0024                  		move.b	$24(a0),d0
000119D2 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000119D6 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000119DA                            ; ===========================================================================
000119DA 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000119DC 0000                       		dc.w Obj71_Solid-Obj71_Index
000119DE                            ; ===========================================================================
000119DE                            
000119DE                            Obj71_Main:				; XREF: Obj71_Index
000119DE 5428 0024                  		addq.b	#2,$24(a0)
000119E2 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000119EA 317C 8680 0002             		move.w	#$8680,2(a0)
000119F0 0028 0004 0001             		ori.b	#4,1(a0)
000119F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000119FA 1200                       		move.b	d0,d1
000119FC 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011A00 0640 0010                  		addi.w	#$10,d0
00011A04 E248                       		lsr.w	#1,d0
00011A06 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011A0A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011A0E 5241                       		addq.w	#1,d1
00011A10 E749                       		lsl.w	#3,d1
00011A12 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011A16                            
00011A16                            Obj71_Solid:				; XREF: Obj71_Index
00011A16 6100 C42E                  		bsr.w	ChkObjOnScreen
00011A1A 6600                       		bne.s	Obj71_ChkDel
00011A1C 7200                       		moveq	#0,d1
00011A1E 1228 0019                  		move.b	$19(a0),d1
00011A22 0641 000B                  		addi.w	#$B,d1
00011A26 7400                       		moveq	#0,d2
00011A28 1428 0016                  		move.b	$16(a0),d2
00011A2C 3602                       		move.w	d2,d3
00011A2E 5243                       		addq.w	#1,d3
00011A30 3828 0008                  		move.w	8(a0),d4
00011A34 6100 E5A8                  		bsr.w	SolidObject71
00011A38                            
00011A38                            Obj71_ChkDel:
00011A38 3028 0008                  		move.w	8(a0),d0
00011A3C 0240 FF80                  		andi.w	#$FF80,d0
00011A40 3238 F700                  		move.w	($FFFFF700).w,d1
00011A44 0441 0080                  		subi.w	#$80,d1
00011A48 0241 FF80                  		andi.w	#$FF80,d1
00011A4C 9041                       		sub.w	d1,d0
00011A4E 0C40 0280                  		cmpi.w	#$280,d0
00011A52 6200                       		bhi.s	Obj71_Delete
00011A54 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A58 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A5A 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A5E                            ; ===========================================================================
00011A5E                            
00011A5E                            Obj71_NoDisplay:
00011A5E 4E75                       		rts	
00011A60                            ; ===========================================================================
00011A60                            
00011A60                            Obj71_Delete:
00011A60 4EFA C1A6                  		jmp	DeleteObject
00011A64                            ; ===========================================================================
00011A64                            ; ---------------------------------------------------------------------------
00011A64                            ; Sprite mappings - invisible solid blocks
00011A64                            ; ---------------------------------------------------------------------------
00011A64                            Map_obj71:
00011A64                            	include "_maps\obj71.asm"
00011A64                            ; ---------------------------------------------------------------------------
00011A64                            ; Sprite mappings - invisible solid blocks
00011A64                            ; ---------------------------------------------------------------------------
00011A64 0000                       		dc.w byte_114BC-Map_obj71
00011A66 0000                       		dc.w byte_114D1-Map_obj71
00011A68 0000                       		dc.w byte_114E6-Map_obj71
00011A6A 04                         byte_114BC:	dc.b 4
00011A6B F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A70 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A75 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A7A 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A7F 04                         byte_114D1:	dc.b 4
00011A80 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A85 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A8A 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A8F 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A94 04                         byte_114E6:	dc.b 4
00011A95 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A9A E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A9F 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011AA4 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011AAA 00                         		even
00011AAA 00                         		even
00011AAA                            
00011AAA                            ; ===========================================================================
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            ; Object 5D - fans (SLZ)
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            
00011AAA                            Obj5D:					; XREF: Obj_Index
00011AAA 7000                       		moveq	#0,d0
00011AAC 1028 0024                  		move.b	$24(a0),d0
00011AB0 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011AB4 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011AB8                            ; ===========================================================================
00011AB8 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011ABA 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011ABC                            ; ===========================================================================
00011ABC                            
00011ABC                            Obj5D_Main:				; XREF: Obj5D_Index
00011ABC 5428 0024                  		addq.b	#2,$24(a0)
00011AC0 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011AC8 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011ACE 0028 0004 0001             		ori.b	#4,1(a0)
00011AD4 117C 0010 0019             		move.b	#$10,$19(a0)
00011ADA 117C 0004 0018             		move.b	#4,$18(a0)
00011AE0                            
00011AE0                            Obj5D_Delay:				; XREF: Obj5D_Index
00011AE0 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011AE6 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011AE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AEC 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011AEE 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011AF4 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011AFA 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AFC 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011B02                            
00011B02                            Obj5D_Blow:
00011B02 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011B06 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011B0A 43F8 D000                  		lea	($FFFFD000).w,a1
00011B0E 3029 0008                  		move.w	8(a1),d0
00011B12 9068 0008                  		sub.w	8(a0),d0
00011B16 0828 0000 0022             		btst	#0,$22(a0)
00011B1C 6600                       		bne.s	Obj5D_ChkSonic
00011B1E 4440                       		neg.w	d0
00011B20                            
00011B20                            Obj5D_ChkSonic:
00011B20 0640 0050                  		addi.w	#$50,d0
00011B24 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B28 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B2A 3229 000C                  		move.w	$C(a1),d1
00011B2E 0641 0060                  		addi.w	#$60,d1
00011B32 9268 000C                  		sub.w	$C(a0),d1
00011B36 6500                       		bcs.s	Obj5D_Animate
00011B38 0C41 0070                  		cmpi.w	#$70,d1
00011B3C 6400                       		bcc.s	Obj5D_Animate
00011B3E 0440 0050                  		subi.w	#$50,d0
00011B42 6400                       		bcc.s	loc_1159A
00011B44 4640                       		not.w	d0
00011B46 D040                       		add.w	d0,d0
00011B48                            
00011B48                            loc_1159A:
00011B48 0640 0060                  		addi.w	#$60,d0
00011B4C 0828 0000 0022             		btst	#0,$22(a0)
00011B52 6600                       		bne.s	loc_115A8
00011B54 4440                       		neg.w	d0
00011B56                            
00011B56                            loc_115A8:
00011B56 4400                       		neg.b	d0
00011B58 E840                       		asr.w	#4,d0
00011B5A 0828 0000 0028             		btst	#0,$28(a0)
00011B60 6700                       		beq.s	Obj5D_MoveSonic
00011B62 4440                       		neg.w	d0
00011B64                            
00011B64                            Obj5D_MoveSonic:
00011B64 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B68                            
00011B68                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B68 5328 001E                  		subq.b	#1,$1E(a0)
00011B6C 6A00                       		bpl.s	Obj5D_ChkDel
00011B6E 117C 0000 001E             		move.b	#0,$1E(a0)
00011B74 5228 001B                  		addq.b	#1,$1B(a0)
00011B78 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B7E 6500                       		bcs.s	loc_115D8
00011B80 117C 0000 001B             		move.b	#0,$1B(a0)
00011B86                            
00011B86                            loc_115D8:
00011B86 7000                       		moveq	#0,d0
00011B88 0828 0000 0028             		btst	#0,$28(a0)
00011B8E 6700                       		beq.s	loc_115E4
00011B90 7002                       		moveq	#2,d0
00011B92                            
00011B92                            loc_115E4:
00011B92 D028 001B                  		add.b	$1B(a0),d0
00011B96 1140 001A                  		move.b	d0,$1A(a0)
00011B9A                            
00011B9A                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B9A 6100 C030                  		bsr.w	DisplaySprite
00011B9E 3028 0008                  		move.w	8(a0),d0
00011BA2 0240 FF80                  		andi.w	#$FF80,d0
00011BA6 3238 F700                  		move.w	($FFFFF700).w,d1
00011BAA 0441 0080                  		subi.w	#$80,d1
00011BAE 0241 FF80                  		andi.w	#$FF80,d1
00011BB2 9041                       		sub.w	d1,d0
00011BB4 0C40 0280                  		cmpi.w	#$280,d0
00011BB8 6200 C04E                  		bhi.w	DeleteObject
00011BBC 4E75                       		rts	
00011BBE                            ; ===========================================================================
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            ; Sprite mappings - fans (SLZ)
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            Map_obj5D:
00011BBE                            	include "_maps\obj5D.asm"
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE                            ; Sprite mappings - fans (SLZ)
00011BBE                            ; ---------------------------------------------------------------------------
00011BBE 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011BC2 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BC6 0000                       		dc.w byte_1161A-Map_obj5D
00011BC8 02                         byte_1161A:	dc.b 2
00011BC9 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011BCE 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011BD3 02                         byte_11625:	dc.b 2
00011BD4 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011BD9 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011BDE 02                         byte_11630:	dc.b 2
00011BDF F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011BE4 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011BEA 00                         		even
00011BEA 00                         		even
00011BEA                            
00011BEA                            ; ===========================================================================
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA                            ; Object 5E - seesaws (SLZ)
00011BEA                            ; ---------------------------------------------------------------------------
00011BEA                            
00011BEA                            Obj5E:					; XREF: Obj_Index
00011BEA 7000                       		moveq	#0,d0
00011BEC 1028 0024                  		move.b	$24(a0),d0
00011BF0 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011BF4 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011BF8 3028 0030                  		move.w	$30(a0),d0
00011BFC 0240 FF80                  		andi.w	#$FF80,d0
00011C00 3238 F700                  		move.w	($FFFFF700).w,d1
00011C04 0441 0080                  		subi.w	#$80,d1
00011C08 0241 FF80                  		andi.w	#$FF80,d1
00011C0C 9041                       		sub.w	d1,d0
00011C0E 6B00 BFF8                  		bmi.w	DeleteObject
00011C12 0C40 0280                  		cmpi.w	#$280,d0
00011C16 6200 BFF0                  		bhi.w	DeleteObject
00011C1A 6000 BFB0                  		bra.w	DisplaySprite
00011C1E                            ; ===========================================================================
00011C1E 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011C20 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011C22 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C24 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C26 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C28 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C2A                            ; ===========================================================================
00011C2A                            
00011C2A                            Obj5E_Main:				; XREF: Obj5E_Index
00011C2A 5428 0024                  		addq.b	#2,$24(a0)
00011C2E 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C36 317C 0374 0002             		move.w	#$374,2(a0)
00011C3C 0028 0004 0001             		ori.b	#4,1(a0)
00011C42 117C 0004 0018             		move.b	#4,$18(a0)
00011C48 117C 0030 0019             		move.b	#$30,$19(a0)
00011C4E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C54 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C58 6600                       		bne.s	loc_116D2	; if not, branch
00011C5A 6100 C40C                  		bsr.w	SingleObjLoad2
00011C5E 6600                       		bne.s	loc_116D2
00011C60 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C64 5C29 0024                  		addq.b	#6,$24(a1)
00011C68 3368 0008 0008             		move.w	8(a0),8(a1)
00011C6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C74 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C7A 2348 003C                  		move.l	a0,$3C(a1)
00011C7E                            
00011C7E                            loc_116D2:
00011C7E 0828 0000 0022             		btst	#0,$22(a0)
00011C84 6700                       		beq.s	loc_116E0
00011C86 117C 0002 001A             		move.b	#2,$1A(a0)
00011C8C                            
00011C8C                            loc_116E0:
00011C8C 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C92                            
00011C92                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C92 1228 003A                  		move.b	$3A(a0),d1
00011C96 6100 0000                  		bsr.w	loc_11766
00011C9A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CA0 0828 0000 001A             		btst	#0,$1A(a0)
00011CA6 6700                       		beq.s	loc_11702
00011CA8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CAE                            
00011CAE                            loc_11702:
00011CAE 43F8 D000                  		lea	($FFFFD000).w,a1
00011CB2 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011CB8 323C 0030                  		move.w	#$30,d1
00011CBC 4EB9 0000 79D2             		jsr	(SlopeObject).l
00011CC2 4E75                       		rts	
00011CC4                            ; ===========================================================================
00011CC4                            
00011CC4                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CC4 6100 0000                  		bsr.w	loc_1174A
00011CC8 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CCE 0828 0000 001A             		btst	#0,$1A(a0)
00011CD4 6700                       		beq.s	loc_11730
00011CD6 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CDC                            
00011CDC                            loc_11730:
00011CDC 323C 0030                  		move.w	#$30,d1
00011CE0 4EB9 0000 7A72             		jsr	(ExitPlatform).l
00011CE6 323C 0030                  		move.w	#$30,d1
00011CEA 3428 0008                  		move.w	8(a0),d2
00011CEE 4EB9 0000 89D0             		jsr	SlopeObject2
00011CF4 4E75                       		rts	
00011CF6                            ; ===========================================================================
00011CF6                            
00011CF6                            loc_1174A:				; XREF: Obj5E_Slope2
00011CF6 7202                       		moveq	#2,d1
00011CF8 43F8 D000                  		lea	($FFFFD000).w,a1
00011CFC 3028 0008                  		move.w	8(a0),d0
00011D00 9069 0008                  		sub.w	8(a1),d0
00011D04 6400                       		bcc.s	loc_1175E
00011D06 4440                       		neg.w	d0
00011D08 7200                       		moveq	#0,d1
00011D0A                            
00011D0A                            loc_1175E:
00011D0A 0C40 0008                  		cmpi.w	#8,d0
00011D0E 6400                       		bcc.s	loc_11766
00011D10 7201                       		moveq	#1,d1
00011D12                            
00011D12                            loc_11766:
00011D12 1028 001A                  		move.b	$1A(a0),d0
00011D16 B001                       		cmp.b	d1,d0
00011D18 6700                       		beq.s	locret_11790
00011D1A 6400                       		bcc.s	loc_11772
00011D1C 5400                       		addq.b	#2,d0
00011D1E                            
00011D1E                            loc_11772:
00011D1E 5300                       		subq.b	#1,d0
00011D20 1140 001A                  		move.b	d0,$1A(a0)
00011D24 1141 003A                  		move.b	d1,$3A(a0)
00011D28 08A8 0000 0001             		bclr	#0,1(a0)
00011D2E 0828 0001 001A             		btst	#1,$1A(a0)
00011D34 6700                       		beq.s	locret_11790
00011D36 08E8 0000 0001             		bset	#0,1(a0)
00011D3C                            
00011D3C                            locret_11790:
00011D3C 4E75                       		rts	
00011D3E                            ; ===========================================================================
00011D3E                            
00011D3E                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D3E 5428 0024                  		addq.b	#2,$24(a0)
00011D42 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D4A 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D50 0028 0004 0001             		ori.b	#4,1(a0)
00011D56 117C 0004 0018             		move.b	#4,$18(a0)
00011D5C 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D62 117C 000C 0019             		move.b	#$C,$19(a0)
00011D68 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D6E 0668 0028 0008             		addi.w	#$28,8(a0)
00011D74 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D7A 117C 0001 001A             		move.b	#1,$1A(a0)
00011D80 0828 0000 0022             		btst	#0,$22(a0)
00011D86 6700                       		beq.s	Obj5E_MoveSpike
00011D88 0468 0050 0008             		subi.w	#$50,8(a0)
00011D8E 117C 0002 003A             		move.b	#2,$3A(a0)
00011D94                            
00011D94                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D94 2268 003C                  		movea.l	$3C(a0),a1
00011D98 7000                       		moveq	#0,d0
00011D9A 1028 003A                  		move.b	$3A(a0),d0
00011D9E 9029 003A                  		sub.b	$3A(a1),d0
00011DA2 6700                       		beq.s	loc_1183E
00011DA4 6400                       		bcc.s	loc_117FC
00011DA6 4400                       		neg.b	d0
00011DA8                            
00011DA8                            loc_117FC:
00011DA8 323C F7E8                  		move.w	#-$818,d1
00011DAC 343C FEEC                  		move.w	#-$114,d2
00011DB0 0C00 0001                  		cmpi.b	#1,d0
00011DB4 6700                       		beq.s	loc_11822
00011DB6 323C F510                  		move.w	#-$AF0,d1
00011DBA 343C FF34                  		move.w	#-$CC,d2
00011DBE 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DC4 6D00                       		blt.s	loc_11822
00011DC6 323C F200                  		move.w	#-$E00,d1
00011DCA 343C FF60                  		move.w	#-$A0,d2
00011DCE                            
00011DCE                            loc_11822:
00011DCE 3141 0012                  		move.w	d1,$12(a0)
00011DD2 3142 0010                  		move.w	d2,$10(a0)
00011DD6 3028 0008                  		move.w	8(a0),d0
00011DDA 9068 0030                  		sub.w	$30(a0),d0
00011DDE 6400                       		bcc.s	loc_11838
00011DE0 4468 0010                  		neg.w	$10(a0)
00011DE4                            
00011DE4                            loc_11838:
00011DE4 5428 0024                  		addq.b	#2,$24(a0)
00011DE8 6000                       		bra.s	Obj5E_SpikeFall
00011DEA                            ; ===========================================================================
00011DEA                            
00011DEA                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011DEA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DF0 7000                       		moveq	#0,d0
00011DF2 1029 001A                  		move.b	$1A(a1),d0
00011DF6 343C 0028                  		move.w	#$28,d2
00011DFA 3228 0008                  		move.w	8(a0),d1
00011DFE 9268 0030                  		sub.w	$30(a0),d1
00011E02 6400                       		bcc.s	loc_1185C
00011E04 4442                       		neg.w	d2
00011E06 5440                       		addq.w	#2,d0
00011E08                            
00011E08                            loc_1185C:
00011E08 D040                       		add.w	d0,d0
00011E0A 3228 0034                  		move.w	$34(a0),d1
00011E0E D272 0000                  		add.w	(a2,d0.w),d1
00011E12 3141 000C                  		move.w	d1,$C(a0)
00011E16 D468 0030                  		add.w	$30(a0),d2
00011E1A 3142 0008                  		move.w	d2,8(a0)
00011E1E 4268 000E                  		clr.w	$E(a0)
00011E22 4268 000A                  		clr.w	$A(a0)
00011E26 4E75                       		rts	
00011E28                            ; ===========================================================================
00011E28                            
00011E28                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E28 4A68 0012                  		tst.w	$12(a0)
00011E2C 6A00                       		bpl.s	loc_1189A
00011E2E 6100 BD4A                  		bsr.w	ObjectFall
00011E32 3028 0034                  		move.w	$34(a0),d0
00011E36 0440 002F                  		subi.w	#$2F,d0
00011E3A B068 000C                  		cmp.w	$C(a0),d0
00011E3E 6E00                       		bgt.s	locret_11898
00011E40 6100 BD38                  		bsr.w	ObjectFall
00011E44                            
00011E44                            locret_11898:
00011E44 4E75                       		rts	
00011E46                            ; ===========================================================================
00011E46                            
00011E46                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E46 6100 BD32                  		bsr.w	ObjectFall
00011E4A 2268 003C                  		movea.l	$3C(a0),a1
00011E4E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E54 7000                       		moveq	#0,d0
00011E56 1029 001A                  		move.b	$1A(a1),d0
00011E5A 3228 0008                  		move.w	8(a0),d1
00011E5E 9268 0030                  		sub.w	$30(a0),d1
00011E62 6400                       		bcc.s	loc_118BA
00011E64 5440                       		addq.w	#2,d0
00011E66                            
00011E66                            loc_118BA:
00011E66 D040                       		add.w	d0,d0
00011E68 3228 0034                  		move.w	$34(a0),d1
00011E6C D272 0000                  		add.w	(a2,d0.w),d1
00011E70 B268 000C                  		cmp.w	$C(a0),d1
00011E74 6E00                       		bgt.s	locret_11938
00011E76 2268 003C                  		movea.l	$3C(a0),a1
00011E7A 7202                       		moveq	#2,d1
00011E7C 4A68 0010                  		tst.w	$10(a0)
00011E80 6B00                       		bmi.s	Obj5E_Spring
00011E82 7200                       		moveq	#0,d1
00011E84                            
00011E84                            Obj5E_Spring:
00011E84 1341 003A                  		move.b	d1,$3A(a1)
00011E88 1141 003A                  		move.b	d1,$3A(a0)
00011E8C B229 001A                  		cmp.b	$1A(a1),d1
00011E90 6700                       		beq.s	loc_1192C
00011E92 08A9 0003 0022             		bclr	#3,$22(a1)
00011E98 6700                       		beq.s	loc_1192C
00011E9A 4229 0025                  		clr.b	$25(a1)
00011E9E 137C 0002 0024             		move.b	#2,$24(a1)
00011EA4 45F8 D000                  		lea	($FFFFD000).w,a2
00011EA8 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011EAE 446A 0012                  		neg.w	$12(a2)
00011EB2 08EA 0001 0022             		bset	#1,$22(a2)
00011EB8 08AA 0003 0022             		bclr	#3,$22(a2)
00011EBE 422A 003C                  		clr.b	$3C(a2)
00011EC2 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011EC8 157C 0002 0024             		move.b	#2,$24(a2)
00011ECE 303C 00CC                  		move.w	#$CC,d0
00011ED2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011ED8                            
00011ED8                            loc_1192C:
00011ED8 4268 0010                  		clr.w	$10(a0)
00011EDC 4268 0012                  		clr.w	$12(a0)
00011EE0 5528 0024                  		subq.b	#2,$24(a0)
00011EE4                            
00011EE4                            locret_11938:
00011EE4 4E75                       		rts	
00011EE6                            ; ===========================================================================
00011EE6 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011EF0                            
00011EF0                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011F20                            		even
00011F20                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F50                            		even
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            ; Sprite mappings - seesaws (SLZ)
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            Map_obj5E:
00011F50                            	include "_maps\obj5E.asm"
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            ; Sprite mappings - seesaws (SLZ)
00011F50                            ; ---------------------------------------------------------------------------
00011F50 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F54 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F58 07                         byte_119AC:	dc.b 7
00011F59 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F5E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F63 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F68 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F6D FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F72 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F77 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F7C 04                         byte_119D0:	dc.b 4
00011F7D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F82 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F87 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F8C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F92 00                         		even
00011F92 00                         		even
00011F92                            
00011F92                            ; ---------------------------------------------------------------------------
00011F92                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F92                            ; ---------------------------------------------------------------------------
00011F92                            Map_obj5Ea:
00011F92                            	include "_maps\obj5Eballs.asm"
00011F92                            ; ---------------------------------------------------------------------------
00011F92                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F92                            ; ---------------------------------------------------------------------------
00011F92 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F94 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F96 01                         byte_119EA:	dc.b 1
00011F97 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F9C 01                         byte_119F0:	dc.b 1
00011F9D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011FA2                            		even
00011FA2                            		even
00011FA2                            
00011FA2                            ; ===========================================================================
00011FA2                            ; ---------------------------------------------------------------------------
00011FA2                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011FA2                            ; ---------------------------------------------------------------------------
00011FA2                            
00011FA2                            Obj5F:					; XREF: Obj_Index
00011FA2 7000                       		moveq	#0,d0
00011FA4 1028 0024                  		move.b	$24(a0),d0
00011FA8 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011FAC 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011FB0                            ; ===========================================================================
00011FB0 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011FB2 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011FB4 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011FB6 0000                       		dc.w Obj5F_End-Obj5F_Index
00011FB8                            ; ===========================================================================
00011FB8                            
00011FB8                            Obj5F_Main:				; XREF: Obj5F_Index
00011FB8 5428 0024                  		addq.b	#2,$24(a0)
00011FBC 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FC4 317C 0400 0002             		move.w	#$400,2(a0)
00011FCA 0028 0004 0001             		ori.b	#4,1(a0)
00011FD0 117C 0003 0018             		move.b	#3,$18(a0)
00011FD6 117C 000C 0019             		move.b	#$C,$19(a0)
00011FDC 1028 0028                  		move.b	$28(a0),d0
00011FE0 6700                       		beq.s	loc_11A3C
00011FE2 1140 0024                  		move.b	d0,$24(a0)
00011FE6 4E75                       		rts	
00011FE8                            ; ===========================================================================
00011FE8                            
00011FE8                            loc_11A3C:
00011FE8 117C 009A 0020             		move.b	#$9A,$20(a0)
00011FEE 0868 0000 0022             		bchg	#0,$22(a0)
00011FF4                            
00011FF4                            Obj5F_Action:				; XREF: Obj5F_Index
00011FF4 7000                       		moveq	#0,d0
00011FF6 1028 0025                  		move.b	$25(a0),d0
00011FFA 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FFE 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012002 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012008 6100 8C98                  		bsr.w	AnimateSprite
0001200C 6000 DC66                  		bra.w	MarkObjGone
00012010                            ; ===========================================================================
00012010 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012012 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012014 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012016                            ; ===========================================================================
00012016                            
00012016                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012016 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001201A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001201E 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012020 5428 0025                  		addq.b	#2,$25(a0)
00012024 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001202A 317C 0010 0010             		move.w	#$10,$10(a0)
00012030 117C 0001 001C             		move.b	#1,$1C(a0)
00012036 0868 0000 0022             		bchg	#0,$22(a0)
0001203C 6700                       		beq.s	locret_11A96
0001203E 4468 0010                  		neg.w	$10(a0)		; change direction
00012042                            
00012042                            locret_11A96:
00012042 4E75                       		rts	
00012044                            ; ===========================================================================
00012044                            
00012044                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012044 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012048 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001204C 6B00                       		bmi.s	loc_11AA8
0001204E 6100 BB56                  		bsr.w	SpeedToPos
00012052 4E75                       		rts	
00012054                            ; ===========================================================================
00012054                            
00012054                            loc_11AA8:
00012054 5528 0025                  		subq.b	#2,$25(a0)
00012058 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001205E 4268 0010                  		clr.w	$10(a0)		; stop walking
00012062 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012068 4E75                       		rts	
0001206A                            ; ===========================================================================
0001206A                            
0001206A                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001206A 5368 0030                  		subq.w	#1,$30(a0)
0001206E 6A00                       		bpl.s	locret_11AD0
00012070 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012074 117C 0000 0024             		move.b	#0,$24(a0)
0001207A                            
0001207A                            locret_11AD0:
0001207A 4E75                       		rts	
0001207C                            ; ===========================================================================
0001207C                            
0001207C                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001207C 3038 D008                  		move.w	($FFFFD008).w,d0
00012080 9068 0008                  		sub.w	8(a0),d0
00012084 6400                       		bcc.s	loc_11ADE
00012086 4440                       		neg.w	d0
00012088                            
00012088                            loc_11ADE:
00012088 0C40 0060                  		cmpi.w	#$60,d0
0001208C 6400                       		bcc.s	locret_11B5E
0001208E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012092 9068 000C                  		sub.w	$C(a0),d0
00012096 6400                       		bcc.s	Obj5F_MakeFuse
00012098 4440                       		neg.w	d0
0001209A                            
0001209A                            Obj5F_MakeFuse:
0001209A 0C40 0060                  		cmpi.w	#$60,d0
0001209E 6400                       		bcc.s	locret_11B5E
000120A0 4A78 FE08                  		tst.w	($FFFFFE08).w
000120A4 6600                       		bne.s	locret_11B5E
000120A6 117C 0004 0025             		move.b	#4,$25(a0)
000120AC 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000120B2 4268 0010                  		clr.w	$10(a0)
000120B6 117C 0002 001C             		move.b	#2,$1C(a0)
000120BC 6100 BFAA                  		bsr.w	SingleObjLoad2
000120C0 6600                       		bne.s	locret_11B5E
000120C2 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120C6 3368 0008 0008             		move.w	8(a0),8(a1)
000120CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120D2 3368 000C 0034             		move.w	$C(a0),$34(a1)
000120D8 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120DE 137C 0004 0028             		move.b	#4,$28(a1)
000120E4 137C 0003 001C             		move.b	#3,$1C(a1)
000120EA 337C 0010 0012             		move.w	#$10,$12(a1)
000120F0 0828 0001 0022             		btst	#1,$22(a0)
000120F6 6700                       		beq.s	loc_11B54
000120F8 4469 0012                  		neg.w	$12(a1)
000120FC                            
000120FC                            loc_11B54:
000120FC 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012102 2348 003C                  		move.l	a0,$3C(a1)
00012106                            
00012106                            locret_11B5E:
00012106 4E75                       		rts	
00012108                            ; ===========================================================================
00012108                            
00012108                            Obj5F_Display:				; XREF: Obj5F_Index
00012108 6100                       		bsr.s	loc_11B70
0001210A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012110 6100 8B90                  		bsr.w	AnimateSprite
00012114 6000 DB5E                  		bra.w	MarkObjGone
00012118                            ; ===========================================================================
00012118                            
00012118                            loc_11B70:
00012118 5368 0030                  		subq.w	#1,$30(a0)
0001211C 6B00                       		bmi.s	loc_11B7C
0001211E 6100 BA86                  		bsr.w	SpeedToPos
00012122 4E75                       		rts	
00012124                            ; ===========================================================================
00012124                            
00012124                            loc_11B7C:
00012124 4268 0030                  		clr.w	$30(a0)
00012128 4228 0024                  		clr.b	$24(a0)
0001212C 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012132 7203                       		moveq	#3,d1
00012134 2248                       		movea.l	a0,a1
00012136 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001213C 6000                       		bra.s	Obj5F_MakeShrap
0001213E                            ; ===========================================================================
0001213E                            
0001213E                            Obj5F_Loop:
0001213E 6100 BF28                  		bsr.w	SingleObjLoad2
00012142 6600                       		bne.s	loc_11BCE
00012144                            
00012144                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012144 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012148 3368 0008 0008             		move.w	8(a0),8(a1)
0001214E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012154 137C 0006 0028             		move.b	#6,$28(a1)
0001215A 137C 0004 001C             		move.b	#4,$1C(a1)
00012160 335A 0010                  		move.w	(a2)+,$10(a1)
00012164 335A 0012                  		move.w	(a2)+,$12(a1)
00012168 137C 0098 0020             		move.b	#$98,$20(a1)
0001216E 08E9 0007 0001             		bset	#7,1(a1)
00012174                            
00012174                            loc_11BCE:
00012174 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012178                            
00012178 117C 0006 0024             		move.b	#6,$24(a0)
0001217E                            
0001217E                            Obj5F_End:				; XREF: Obj5F_Index
0001217E 6100 BA26                  		bsr.w	SpeedToPos
00012182 0668 0018 0012             		addi.w	#$18,$12(a0)
00012188 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001218E 6100 8B12                  		bsr.w	AnimateSprite
00012192 4A28 0001                  		tst.b	1(a0)
00012196 6A00 BA70                  		bpl.w	DeleteObject
0001219A 6000 BA30                  		bra.w	DisplaySprite
0001219E                            ; ===========================================================================
0001219E FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000121AE                            
000121AE                            Ani_obj5F:
000121AE                            	include "_anim\obj5F.asm"
000121AE                            ; ---------------------------------------------------------------------------
000121AE                            ; Animation script - Bomb enemy
000121AE                            ; ---------------------------------------------------------------------------
000121AE 0000                       		dc.w byte_11C12-Ani_obj5F
000121B0 0000                       		dc.w byte_11C16-Ani_obj5F
000121B2 0000                       		dc.w byte_11C1C-Ani_obj5F
000121B4 0000                       		dc.w byte_11C20-Ani_obj5F
000121B6 0000                       		dc.w byte_11C24-Ani_obj5F
000121B8 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000121BC 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000121C2 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121C6 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000121CA 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000121CE                            		even
000121CE                            		even
000121CE                            
000121CE                            ; ---------------------------------------------------------------------------
000121CE                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121CE                            ; ---------------------------------------------------------------------------
000121CE                            Map_obj5F:
000121CE                            	include "_maps\obj5F.asm"
000121CE                            ; ---------------------------------------------------------------------------
000121CE                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121CE                            ; ---------------------------------------------------------------------------
000121CE 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000121D2 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000121D6 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000121DA 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000121DE 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000121E2 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000121E6 03                         byte_11C40:	dc.b 3
000121E7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121EC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121F1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121F6 03                         byte_11C50:	dc.b 3
000121F7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121FC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012201 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012206 03                         byte_11C60:	dc.b 3
00012207 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001220C 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012211 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012216 03                         byte_11C70:	dc.b 3
00012217 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001221C 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012221 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012226 03                         byte_11C80:	dc.b 3
00012227 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001222C 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012231 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012236 03                         byte_11C90:	dc.b 3
00012237 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001223C 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012241 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012246 02                         byte_11CA0:	dc.b 2
00012247 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001224C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012251 02                         byte_11CAB:	dc.b 2
00012252 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012257 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001225C 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001225D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012262 01                         byte_11CBC:	dc.b 1			; fuse
00012263 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012268 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012269 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001226E 01                         byte_11CC8:	dc.b 1			; fireball
0001226F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012274                            		even
00012274                            		even
00012274                            
00012274                            ; ===========================================================================
00012274                            ; ---------------------------------------------------------------------------
00012274                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012274                            ; ---------------------------------------------------------------------------
00012274                            
00012274                            Obj60:					; XREF: Obj_Index
00012274 7000                       		moveq	#0,d0
00012276 1028 0024                  		move.b	$24(a0),d0
0001227A 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001227E 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012282                            ; ===========================================================================
00012282 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012284 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012286 0000                       		dc.w Obj60_Display-Obj60_Index
00012288 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001228A 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001228C                            ; ===========================================================================
0001228C                            
0001228C                            Obj60_Main:				; XREF: Obj60_Index
0001228C 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012294 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001229A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000122A0 6700                       		beq.s	loc_11D02
000122A2 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000122A8                            
000122A8                            loc_11D02:
000122A8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122AE 6600                       		bne.s	loc_11D10
000122B0 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000122B6                            
000122B6                            loc_11D10:
000122B6 0028 0004 0001             		ori.b	#4,1(a0)
000122BC 117C 0004 0018             		move.b	#4,$18(a0)
000122C2 117C 000B 0020             		move.b	#$B,$20(a0)
000122C8 117C 000C 0019             		move.b	#$C,$19(a0)
000122CE 7400                       		moveq	#0,d2
000122D0 45E8 0037                  		lea	$37(a0),a2
000122D4 264A                       		movea.l	a2,a3
000122D6 524A                       		addq.w	#1,a2
000122D8 7203                       		moveq	#3,d1
000122DA                            
000122DA                            Obj60_MakeOrbs:
000122DA 6100 BD8C                  		bsr.w	SingleObjLoad2
000122DE 6600                       		bne.s	loc_11D90
000122E0 5213                       		addq.b	#1,(a3)
000122E2 3A09                       		move.w	a1,d5
000122E4 0445 D000                  		subi.w	#-$3000,d5
000122E8 EC4D                       		lsr.w	#6,d5
000122EA 0245 007F                  		andi.w	#$7F,d5
000122EE 14C5                       		move.b	d5,(a2)+
000122F0 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000122F2 137C 0006 0024             		move.b	#6,$24(a1)
000122F8 2368 0004 0004             		move.l	4(a0),4(a1)
000122FE 3368 0002 0002             		move.w	2(a0),2(a1)
00012304 0029 0004 0001             		ori.b	#4,1(a1)
0001230A 137C 0004 0018             		move.b	#4,$18(a1)
00012310 137C 0008 0019             		move.b	#8,$19(a1)
00012316 137C 0003 001A             		move.b	#3,$1A(a1)
0001231C 137C 0098 0020             		move.b	#$98,$20(a1)
00012322 1342 0026                  		move.b	d2,$26(a1)
00012326 0602 0040                  		addi.b	#$40,d2
0001232A 2348 003C                  		move.l	a0,$3C(a1)
0001232E 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012332                            
00012332                            loc_11D90:
00012332 7001                       		moveq	#1,d0
00012334 0828 0000 0022             		btst	#0,$22(a0)
0001233A 6700                       		beq.s	Obj60_Move
0001233C 4440                       		neg.w	d0
0001233E                            
0001233E                            Obj60_Move:
0001233E 1140 0036                  		move.b	d0,$36(a0)
00012342 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012348 5428 0024                  		addq.b	#2,$24(a0)
0001234C 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012352 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012358 6700                       		beq.s	locret_11DBC	; if not, branch
0001235A 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001235E                            
0001235E                            locret_11DBC:
0001235E 4E75                       		rts	
00012360                            ; ===========================================================================
00012360                            
00012360                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012360 3038 D008                  		move.w	($FFFFD008).w,d0
00012364 9068 0008                  		sub.w	8(a0),d0
00012368 6400                       		bcc.s	loc_11DCA
0001236A 4440                       		neg.w	d0
0001236C                            
0001236C                            loc_11DCA:
0001236C 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012370 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012372 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012376 9068 000C                  		sub.w	$C(a0),d0
0001237A 6400                       		bcc.s	loc_11DDC
0001237C 4440                       		neg.w	d0
0001237E                            
0001237E                            loc_11DDC:
0001237E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012382 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012384 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012388 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001238A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012390                            
00012390                            Obj60_Animate:
00012390 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012396 6100 890A                  		bsr.w	AnimateSprite
0001239A 6000 0000                  		bra.w	Obj60_ChkDel
0001239E                            ; ===========================================================================
0001239E                            
0001239E                            Obj60_Display:				; XREF: Obj60_Index
0001239E 6100 B806                  		bsr.w	SpeedToPos
000123A2                            
000123A2                            Obj60_ChkDel:				; XREF: Obj60_Animate
000123A2 3028 0008                  		move.w	8(a0),d0
000123A6 0240 FF80                  		andi.w	#$FF80,d0
000123AA 3238 F700                  		move.w	($FFFFF700).w,d1
000123AE 0441 0080                  		subi.w	#$80,d1
000123B2 0241 FF80                  		andi.w	#$FF80,d1
000123B6 9041                       		sub.w	d1,d0
000123B8 0C40 0280                  		cmpi.w	#$280,d0
000123BC 6200 0000                  		bhi.w	Obj60_ChkGone
000123C0 6000 B80A                  		bra.w	DisplaySprite
000123C4                            ; ===========================================================================
000123C4                            
000123C4                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000123C8 7000                       		moveq	#0,d0
000123CA 1028 0023                  		move.b	$23(a0),d0
000123CE 6700                       		beq.s	loc_11E34
000123D0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000123D6                            
000123D6                            loc_11E34:
000123D6 45E8 0037                  		lea	$37(a0),a2
000123DA 7400                       		moveq	#0,d2
000123DC 141A                       		move.b	(a2)+,d2
000123DE 5342                       		subq.w	#1,d2
000123E0 6500                       		bcs.s	Obj60_Delete
000123E2                            
000123E2                            loc_11E40:
000123E2 7000                       		moveq	#0,d0
000123E4 101A                       		move.b	(a2)+,d0
000123E6 ED48                       		lsl.w	#6,d0
000123E8 0680 00FF D000             		addi.l	#$FFD000,d0
000123EE 2240                       		movea.l	d0,a1
000123F0 6100 B818                  		bsr.w	DeleteObject2
000123F4 51CA FFEC                  		dbf	d2,loc_11E40
000123F8                            
000123F8                            Obj60_Delete:
000123F8 6000 B80E                  		bra.w	DeleteObject
000123FC                            ; ===========================================================================
000123FC                            
000123FC                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123FC 2268 003C                  		movea.l	$3C(a0),a1
00012400 0C11 0060                  		cmpi.b	#$60,0(a1)
00012404 6600 B802                  		bne.w	DeleteObject
00012408 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001240E 6600                       		bne.s	Obj60_Circle
00012410 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012416 6600                       		bne.s	Obj60_Circle
00012418 5428 0024                  		addq.b	#2,$24(a0)
0001241C 5329 0037                  		subq.b	#1,$37(a1)
00012420 6600                       		bne.s	Obj60_FireOrb
00012422 5429 0024                  		addq.b	#2,$24(a1)
00012426                            
00012426                            Obj60_FireOrb:
00012426 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001242C 0829 0000 0022             		btst	#0,$22(a1)
00012432 6700                       		beq.s	Obj60_Display2
00012434 4468 0010                  		neg.w	$10(a0)
00012438                            
00012438                            Obj60_Display2:
00012438 6000 B792                  		bra.w	DisplaySprite
0001243C                            ; ===========================================================================
0001243C                            
0001243C                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001243C 1028 0026                  		move.b	$26(a0),d0
00012440 4EB9 0000 2C82             		jsr	(CalcSine).l
00012446 E841                       		asr.w	#4,d1
00012448 D269 0008                  		add.w	8(a1),d1
0001244C 3141 0008                  		move.w	d1,8(a0)
00012450 E840                       		asr.w	#4,d0
00012452 D069 000C                  		add.w	$C(a1),d0
00012456 3140 000C                  		move.w	d0,$C(a0)
0001245A 1029 0036                  		move.b	$36(a1),d0
0001245E D128 0026                  		add.b	d0,$26(a0)
00012462 6000 B768                  		bra.w	DisplaySprite
00012466                            ; ===========================================================================
00012466                            
00012466                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012466 6100 B73E                  		bsr.w	SpeedToPos
0001246A 4A28 0001                  		tst.b	1(a0)
0001246E 6A00 B798                  		bpl.w	DeleteObject
00012472 6000 B758                  		bra.w	DisplaySprite
00012476                            ; ===========================================================================
00012476                            Ani_obj60:
00012476                            	include "_anim\obj60.asm"
00012476                            ; ---------------------------------------------------------------------------
00012476                            ; Animation script - Orbinaut enemy
00012476                            ; ---------------------------------------------------------------------------
00012476 0000                       		dc.w byte_11EDA-Ani_obj60
00012478 0000                       		dc.w byte_11EDE-Ani_obj60
0001247A 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001247E 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012484                            		even
00012484                            		even
00012484                            
00012484                            ; ---------------------------------------------------------------------------
00012484                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012484                            ; ---------------------------------------------------------------------------
00012484                            Map_obj60:
00012484                            	include "_maps\obj60.asm"
00012484                            ; ---------------------------------------------------------------------------
00012484                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012484                            ; ---------------------------------------------------------------------------
00012484 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012488 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001248C 01                         byte_11EEC:	dc.b 1
0001248D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012492 01                         byte_11EF2:	dc.b 1
00012493 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012498 01                         byte_11EF8:	dc.b 1
00012499 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001249E 01                         byte_11EFE:	dc.b 1
0001249F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000124A4                            		even
000124A4                            		even
000124A4                            
000124A4                            ; ===========================================================================
000124A4                            ; ---------------------------------------------------------------------------
000124A4                            ; Object 16 - harpoon (LZ)
000124A4                            ; ---------------------------------------------------------------------------
000124A4                            
000124A4                            Obj16:					; XREF: Obj_Index
000124A4 7000                       		moveq	#0,d0
000124A6 1028 0024                  		move.b	$24(a0),d0
000124AA 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000124AE 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000124B2                            ; ===========================================================================
000124B2 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000124B4 0000                       		dc.w Obj16_Move-Obj16_Index
000124B6 0000                       		dc.w Obj16_Wait-Obj16_Index
000124B8                            ; ===========================================================================
000124B8                            
000124B8                            Obj16_Main:				; XREF: Obj16_Index
000124B8 5428 0024                  		addq.b	#2,$24(a0)
000124BC 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124C4 317C 03CC 0002             		move.w	#$3CC,2(a0)
000124CA 0028 0004 0001             		ori.b	#4,1(a0)
000124D0 117C 0004 0018             		move.b	#4,$18(a0)
000124D6 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000124DC 117C 0014 0019             		move.b	#$14,$19(a0)
000124E2 317C 003C 0030             		move.w	#60,$30(a0)
000124E8                            
000124E8                            Obj16_Move:				; XREF: Obj16_Index
000124E8 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000124EE 6100 87B2                  		bsr.w	AnimateSprite
000124F2 7000                       		moveq	#0,d0
000124F4 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000124F8 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124FE 6000 D774                  		bra.w	MarkObjGone
00012502                            ; ===========================================================================
00012502 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012508                            ; ===========================================================================
00012508                            
00012508                            Obj16_Wait:				; XREF: Obj16_Index
00012508 5368 0030                  		subq.w	#1,$30(a0)
0001250C 6A00                       		bpl.s	Obj16_ChkDel
0001250E 317C 003C 0030             		move.w	#60,$30(a0)
00012514 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012518 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001251E                            
0001251E                            Obj16_ChkDel:
0001251E 6000 D754                  		bra.w	MarkObjGone
00012522                            ; ===========================================================================
00012522                            Ani_obj16:
00012522                            	include "_anim\obj16.asm"
00012522                            ; ---------------------------------------------------------------------------
00012522                            ; Animation script - harpoon (LZ)
00012522                            ; ---------------------------------------------------------------------------
00012522 0000                       		dc.w byte_11F8A-Ani_obj16
00012524 0000                       		dc.w byte_11F8E-Ani_obj16
00012526 0000                       		dc.w byte_11F92-Ani_obj16
00012528 0000                       		dc.w byte_11F96-Ani_obj16
0001252A 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001252E 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012532 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012536 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001253A                            		even
0001253A                            		even
0001253A                            
0001253A                            ; ---------------------------------------------------------------------------
0001253A                            ; Sprite mappings - harpoon (LZ)
0001253A                            ; ---------------------------------------------------------------------------
0001253A                            Map_obj16:
0001253A                            	include "_maps\obj16.asm"
0001253A                            ; ---------------------------------------------------------------------------
0001253A                            ; Sprite mappings - harpoon (LZ)
0001253A                            ; ---------------------------------------------------------------------------
0001253A 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001253E 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012542 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012546 01                         byte_11FA6:	dc.b 1
00012547 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001254C 01                         byte_11FAC:	dc.b 1
0001254D FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012552 02                         byte_11FB2:	dc.b 2
00012553 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012558 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001255D 01                         byte_11FBD:	dc.b 1
0001255E F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012563 01                         byte_11FC3:	dc.b 1
00012564 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012569 02                         byte_11FC9:	dc.b 2
0001256A D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001256F F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012574                            		even
00012574                            		even
00012574                            
00012574                            ; ===========================================================================
00012574                            ; ---------------------------------------------------------------------------
00012574                            ; Object 61 - blocks (LZ)
00012574                            ; ---------------------------------------------------------------------------
00012574                            
00012574                            Obj61:					; XREF: Obj_Index
00012574 7000                       		moveq	#0,d0
00012576 1028 0024                  		move.b	$24(a0),d0
0001257A 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001257E 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012582                            ; ===========================================================================
00012582 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012584 0000                       		dc.w Obj61_Action-Obj61_Index
00012586                            
00012586 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012588 200C                       		dc.b $20, $C
0001258A 1010                       		dc.b $10, $10
0001258C 1010                       		dc.b $10, $10
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            Obj61_Main:				; XREF: Obj61_Index
0001258E 5428 0024                  		addq.b	#2,$24(a0)
00012592 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001259A 317C 43E6 0002             		move.w	#$43E6,2(a0)
000125A0 117C 0004 0001             		move.b	#4,1(a0)
000125A6 117C 0003 0018             		move.b	#3,$18(a0)
000125AC 7000                       		moveq	#0,d0
000125AE 1028 0028                  		move.b	$28(a0),d0
000125B2 E648                       		lsr.w	#3,d0
000125B4 0240 000E                  		andi.w	#$E,d0
000125B8 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000125BC 115A 0019                  		move.b	(a2)+,$19(a0)
000125C0 1152 0016                  		move.b	(a2),$16(a0)
000125C4 E248                       		lsr.w	#1,d0
000125C6 1140 001A                  		move.b	d0,$1A(a0)
000125CA 3168 0008 0034             		move.w	8(a0),$34(a0)
000125D0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000125D6 1028 0028                  		move.b	$28(a0),d0
000125DA 0200 000F                  		andi.b	#$F,d0
000125DE 6700                       		beq.s	Obj61_Action
000125E0 0C00 0007                  		cmpi.b	#7,d0
000125E4 6700                       		beq.s	Obj61_Action
000125E6 117C 0001 0038             		move.b	#1,$38(a0)
000125EC                            
000125EC                            Obj61_Action:				; XREF: Obj61_Index
000125EC 3F28 0008                  		move.w	8(a0),-(sp)
000125F0 7000                       		moveq	#0,d0
000125F2 1028 0028                  		move.b	$28(a0),d0
000125F6 0240 000F                  		andi.w	#$F,d0
000125FA D040                       		add.w	d0,d0
000125FC 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012600 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012604 381F                       		move.w	(sp)+,d4
00012606 4A28 0001                  		tst.b	1(a0)
0001260A 6A00                       		bpl.s	Obj61_ChkDel
0001260C 7200                       		moveq	#0,d1
0001260E 1228 0019                  		move.b	$19(a0),d1
00012612 0641 000B                  		addi.w	#$B,d1
00012616 7400                       		moveq	#0,d2
00012618 1428 0016                  		move.b	$16(a0),d2
0001261C 3602                       		move.w	d2,d3
0001261E 5243                       		addq.w	#1,d3
00012620 6100 D97A                  		bsr.w	SolidObject
00012624 1144 003F                  		move.b	d4,$3F(a0)
00012628 6100 0000                  		bsr.w	loc_12180
0001262C                            
0001262C                            Obj61_ChkDel:
0001262C 3028 0034                  		move.w	$34(a0),d0
00012630 0240 FF80                  		andi.w	#$FF80,d0
00012634 3238 F700                  		move.w	($FFFFF700).w,d1
00012638 0441 0080                  		subi.w	#$80,d1
0001263C 0241 FF80                  		andi.w	#$FF80,d1
00012640 9041                       		sub.w	d1,d0
00012642 0C40 0280                  		cmpi.w	#$280,d0
00012646 6200 B5C0                  		bhi.w	DeleteObject
0001264A 6000 B580                  		bra.w	DisplaySprite
0001264E                            ; ===========================================================================
0001264E 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012652 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012656 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001265A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001265E                            ; ===========================================================================
0001265E                            
0001265E                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001265E 4E75                       		rts	
00012660                            ; ===========================================================================
00012660                            
00012660                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012660 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012664 6600                       		bne.s	loc_120D6	; if yes, branch
00012666 0828 0003 0022             		btst	#3,$22(a0)
0001266C 6700                       		beq.s	locret_120D4
0001266E 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012674                            
00012674                            locret_120D4:
00012674 4E75                       		rts	
00012676                            ; ===========================================================================
00012676                            
00012676                            loc_120D6:
00012676 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001267A 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001267C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012680 4228 0038                  		clr.b	$38(a0)
00012684 4E75                       		rts	
00012686                            ; ===========================================================================
00012686                            
00012686                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012686 6100 B51E                  		bsr.w	SpeedToPos
0001268A 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001268E 6100 0000                  		bsr.w	ObjHitFloor
00012692 4A41                       		tst.w	d1
00012694 6A00 0000                  		bpl.w	locret_12106
00012698 5241                       		addq.w	#1,d1
0001269A D368 000C                  		add.w	d1,$C(a0)
0001269E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000126A2 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126A6                            
000126A6                            locret_12106:
000126A6 4E75                       		rts	
000126A8                            ; ===========================================================================
000126A8                            
000126A8                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000126A8 6100 B4FC                  		bsr.w	SpeedToPos
000126AC 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000126B0 6100 0000                  		bsr.w	ObjHitCeiling
000126B4 4A41                       		tst.w	d1
000126B6 6A00 0000                  		bpl.w	locret_12126
000126BA 9368 000C                  		sub.w	d1,$C(a0)
000126BE 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000126C2 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126C6                            
000126C6                            locret_12126:
000126C6 4E75                       		rts	
000126C8                            ; ===========================================================================
000126C8                            
000126C8                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000126C8 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000126CE 6600                       		bne.s	locret_12138	; if not, branch
000126D0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000126D4 4228 0038                  		clr.b	$38(a0)
000126D8                            
000126D8                            locret_12138:
000126D8 4E75                       		rts	
000126DA                            ; ===========================================================================
000126DA                            
000126DA                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000126DA 3038 F646                  		move.w	($FFFFF646).w,d0
000126DE 9068 000C                  		sub.w	$C(a0),d0
000126E2 6700                       		beq.s	locret_1217E
000126E4 6400                       		bcc.s	loc_12162
000126E6 0C40 FFFE                  		cmpi.w	#-2,d0
000126EA 6C00                       		bge.s	loc_1214E
000126EC 70FE                       		moveq	#-2,d0
000126EE                            
000126EE                            loc_1214E:
000126EE D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000126F2 6100 0000                  		bsr.w	ObjHitCeiling
000126F6 4A41                       		tst.w	d1
000126F8 6A00 0000                  		bpl.w	locret_12160
000126FC 9368 000C                  		sub.w	d1,$C(a0)
00012700                            
00012700                            locret_12160:
00012700 4E75                       		rts	
00012702                            ; ===========================================================================
00012702                            
00012702                            loc_12162:				; XREF: Obj61_Type07
00012702 0C40 0002                  		cmpi.w	#2,d0
00012706 6F00                       		ble.s	loc_1216A
00012708 7002                       		moveq	#2,d0
0001270A                            
0001270A                            loc_1216A:
0001270A D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001270E 6100 0000                  		bsr.w	ObjHitFloor
00012712 4A41                       		tst.w	d1
00012714 6A00 0000                  		bpl.w	locret_1217E
00012718 5241                       		addq.w	#1,d1
0001271A D368 000C                  		add.w	d1,$C(a0)
0001271E                            
0001271E                            locret_1217E:
0001271E 4E75                       		rts	
00012720                            ; ===========================================================================
00012720                            
00012720                            loc_12180:				; XREF: Obj61_Action
00012720 4A28 0038                  		tst.b	$38(a0)
00012724 6700                       		beq.s	locret_121C0
00012726 0828 0003 0022             		btst	#3,$22(a0)
0001272C 6600                       		bne.s	loc_1219A
0001272E 4A28 003E                  		tst.b	$3E(a0)
00012732 6700                       		beq.s	locret_121C0
00012734 5928 003E                  		subq.b	#4,$3E(a0)
00012738 6000                       		bra.s	loc_121A6
0001273A                            ; ===========================================================================
0001273A                            
0001273A                            loc_1219A:
0001273A 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012740 6700                       		beq.s	locret_121C0
00012742 5828 003E                  		addq.b	#4,$3E(a0)
00012746                            
00012746                            loc_121A6:
00012746 1028 003E                  		move.b	$3E(a0),d0
0001274A 4EB9 0000 2C82             		jsr	(CalcSine).l
00012750 323C 0400                  		move.w	#$400,d1
00012754 C1C1                       		muls.w	d1,d0
00012756 4840                       		swap	d0
00012758 D068 0030                  		add.w	$30(a0),d0
0001275C 3140 000C                  		move.w	d0,$C(a0)
00012760                            
00012760                            locret_121C0:
00012760 4E75                       		rts	
00012762                            ; ===========================================================================
00012762                            ; ---------------------------------------------------------------------------
00012762                            ; Sprite mappings - blocks (LZ)
00012762                            ; ---------------------------------------------------------------------------
00012762                            Map_obj61:
00012762                            	include "_maps\obj61.asm"
00012762                            ; ---------------------------------------------------------------------------
00012762                            ; Sprite mappings - blocks (LZ)
00012762                            ; ---------------------------------------------------------------------------
00012762 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012766 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001276A 01                         byte_121CA:	dc.b 1
0001276B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012770 02                         byte_121D0:	dc.b 2
00012771 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012776 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001277B 01                         byte_121DB:	dc.b 1
0001277C F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012781 01                         byte_121E1:	dc.b 1
00012782 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012788 00                         		even
00012788 00                         		even
00012788                            
00012788                            ; ===========================================================================
00012788                            ; ---------------------------------------------------------------------------
00012788                            ; Object 62 - gargoyle head (LZ)
00012788                            ; ---------------------------------------------------------------------------
00012788                            
00012788                            Obj62:					; XREF: Obj_Index
00012788 7000                       		moveq	#0,d0
0001278A 1028 0024                  		move.b	$24(a0),d0
0001278E 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012792 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012796 6000 D4DC                  		bra.w	MarkObjGone
0001279A                            ; ===========================================================================
0001279A 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001279C 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001279E 0000                       		dc.w Obj62_FireBall-Obj62_Index
000127A0 0000                       		dc.w Obj62_AniFire-Obj62_Index
000127A2                            
000127A2 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000127AA                            ; ===========================================================================
000127AA                            
000127AA                            Obj62_Main:				; XREF: Obj62_Index
000127AA 5428 0024                  		addq.b	#2,$24(a0)
000127AE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127B6 317C 42E9 0002             		move.w	#$42E9,2(a0)
000127BC 0028 0004 0001             		ori.b	#4,1(a0)
000127C2 117C 0003 0018             		move.b	#3,$18(a0)
000127C8 117C 0010 0019             		move.b	#$10,$19(a0)
000127CE 1028 0028                  		move.b	$28(a0),d0	; get object type
000127D2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000127D6 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000127DC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127E2 0228 000F 0028             		andi.b	#$F,$28(a0)
000127E8                            
000127E8                            Obj62_MakeFire:				; XREF: Obj62_Index
000127E8 5328 001E                  		subq.b	#1,$1E(a0)
000127EC 6600                       		bne.s	Obj62_NoFire
000127EE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127F4 6100 B650                  		bsr.w	ChkObjOnScreen
000127F8 6600                       		bne.s	Obj62_NoFire
000127FA 6100 B856                  		bsr.w	SingleObjLoad
000127FE 6600                       		bne.s	Obj62_NoFire
00012800 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012804 5829 0024                  		addq.b	#4,$24(a1)
00012808 3368 0008 0008             		move.w	8(a0),8(a1)
0001280E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012814 1368 0001 0001             		move.b	1(a0),1(a1)
0001281A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012820                            
00012820                            Obj62_NoFire:
00012820 4E75                       		rts	
00012822                            ; ===========================================================================
00012822                            
00012822                            Obj62_FireBall:				; XREF: Obj62_Index
00012822 5428 0024                  		addq.b	#2,$24(a0)
00012826 117C 0008 0016             		move.b	#8,$16(a0)
0001282C 117C 0008 0017             		move.b	#8,$17(a0)
00012832 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001283A 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012840 0028 0004 0001             		ori.b	#4,1(a0)
00012846 117C 0004 0018             		move.b	#4,$18(a0)
0001284C 117C 0098 0020             		move.b	#$98,$20(a0)
00012852 117C 0008 0019             		move.b	#8,$19(a0)
00012858 117C 0002 001A             		move.b	#2,$1A(a0)
0001285E 5068 000C                  		addq.w	#8,$C(a0)
00012862 317C 0200 0010             		move.w	#$200,$10(a0)
00012868 0828 0000 0022             		btst	#0,$22(a0)
0001286E 6600                       		bne.s	Obj62_Sound
00012870 4468 0010                  		neg.w	$10(a0)
00012874                            
00012874                            Obj62_Sound:
00012874 303C 00AE                  		move.w	#$AE,d0
00012878 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001287E                            
0001287E                            Obj62_AniFire:				; XREF: Obj62_Index
0001287E 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012882 0200 0007                  		andi.b	#7,d0
00012886 6600                       		bne.s	Obj62_StopFire
00012888 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001288E                            
0001288E                            Obj62_StopFire:
0001288E 6100 B316                  		bsr.w	SpeedToPos
00012892 0828 0000 0022             		btst	#0,$22(a0)
00012898 6600                       		bne.s	Obj62_StopFire2
0001289A 76F8                       		moveq	#-8,d3
0001289C 6100 0000                  		bsr.w	ObjHitWallLeft
000128A0 4A41                       		tst.w	d1
000128A2 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000128A6 4E75                       		rts	
000128A8                            ; ===========================================================================
000128A8                            
000128A8                            Obj62_StopFire2:
000128A8 7608                       		moveq	#8,d3
000128AA 6100 0000                  		bsr.w	ObjHitWallRight
000128AE 4A41                       		tst.w	d1
000128B0 6B00 B356                  		bmi.w	DeleteObject
000128B4 4E75                       		rts	
000128B6                            ; ===========================================================================
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            ; Sprite mappings - gargoyle head (LZ)
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            Map_obj62:
000128B6                            	include "_maps\obj62.asm"
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            ; Sprite mappings - gargoyle head (LZ)
000128B6                            ; ---------------------------------------------------------------------------
000128B6 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000128BA 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000128BE 03                         byte_12320:	dc.b 3
000128BF F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128C4 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000128C9 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000128CE 01                         byte_12330:	dc.b 1
000128CF FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000128D4 01                         byte_12336:	dc.b 1
000128D5 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000128DA                            		even
000128DA                            		even
000128DA                            
000128DA                            ; ===========================================================================
000128DA                            ; ---------------------------------------------------------------------------
000128DA                            ; Object 63 - platforms	on a conveyor belt (LZ)
000128DA                            ; ---------------------------------------------------------------------------
000128DA                            
000128DA                            Obj63:					; XREF: Obj_Index
000128DA 7000                       		moveq	#0,d0
000128DC 1028 0024                  		move.b	$24(a0),d0
000128E0 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000128E4 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000128E8 3028 0030                  		move.w	$30(a0),d0
000128EC 0240 FF80                  		andi.w	#$FF80,d0
000128F0 3238 F700                  		move.w	($FFFFF700).w,d1
000128F4 0441 0080                  		subi.w	#$80,d1
000128F8 0241 FF80                  		andi.w	#$FF80,d1
000128FC 9041                       		sub.w	d1,d0
000128FE 0C40 0280                  		cmpi.w	#$280,d0
00012902 6200                       		bhi.s	loc_1236A
00012904                            
00012904                            Obj63_Display:				; XREF: loc_1236A
00012904 6000 B2C6                  		bra.w	DisplaySprite
00012908                            ; ===========================================================================
00012908                            
00012908                            loc_1236A:				; XREF: Obj63
00012908 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001290E 6600                       		bne.s	loc_12378
00012910 0C40 FF80                  		cmpi.w	#-$80,d0
00012914 64EE                       		bcc.s	Obj63_Display
00012916                            
00012916                            loc_12378:
00012916 1028 002F                  		move.b	$2F(a0),d0
0001291A 6A00 B2EC                  		bpl.w	DeleteObject
0001291E 0240 007F                  		andi.w	#$7F,d0
00012922 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012926 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001292C 6000 B2DA                  		bra.w	DeleteObject
00012930                            ; ===========================================================================
00012930 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012932 0000                       		dc.w loc_124B2-Obj63_Index
00012934 0000                       		dc.w loc_124C2-Obj63_Index
00012936 0000                       		dc.w loc_124DE-Obj63_Index
00012938                            ; ===========================================================================
00012938                            
00012938                            Obj63_Main:				; XREF: Obj63_Index
00012938 1028 0028                  		move.b	$28(a0),d0
0001293C 6B00 0000                  		bmi.w	loc_12460
00012940 5428 0024                  		addq.b	#2,$24(a0)
00012944 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001294C 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012952 0028 0004 0001             		ori.b	#4,1(a0)
00012958 117C 0010 0019             		move.b	#$10,$19(a0)
0001295E 117C 0004 0018             		move.b	#4,$18(a0)
00012964 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001296A 6600                       		bne.s	loc_123E2
0001296C 5828 0024                  		addq.b	#4,$24(a0)
00012970 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012976 117C 0001 0018             		move.b	#1,$18(a0)
0001297C 6000 0000                  		bra.w	loc_124DE
00012980                            ; ===========================================================================
00012980                            
00012980                            loc_123E2:
00012980 117C 0004 001A             		move.b	#4,$1A(a0)
00012986 7000                       		moveq	#0,d0
00012988 1028 0028                  		move.b	$28(a0),d0
0001298C 3200                       		move.w	d0,d1
0001298E E648                       		lsr.w	#3,d0
00012990 0240 001E                  		andi.w	#$1E,d0
00012994 45FA 0000                  		lea	Obj63_Data(pc),a2
00012998 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001299C 315A 0038                  		move.w	(a2)+,$38(a0)
000129A0 315A 0030                  		move.w	(a2)+,$30(a0)
000129A4 214A 003C                  		move.l	a2,$3C(a0)
000129A8 0241 000F                  		andi.w	#$F,d1
000129AC E549                       		lsl.w	#2,d1
000129AE 1141 0038                  		move.b	d1,$38(a0)
000129B2 117C 0004 003A             		move.b	#4,$3A(a0)
000129B8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000129BC 6700                       		beq.s	loc_1244C
000129BE 117C 0001 003B             		move.b	#1,$3B(a0)
000129C4 4428 003A                  		neg.b	$3A(a0)
000129C8 7200                       		moveq	#0,d1
000129CA 1228 0038                  		move.b	$38(a0),d1
000129CE D228 003A                  		add.b	$3A(a0),d1
000129D2 B228 0039                  		cmp.b	$39(a0),d1
000129D6 6500                       		bcs.s	loc_12448
000129D8 1001                       		move.b	d1,d0
000129DA 7200                       		moveq	#0,d1
000129DC 4A00                       		tst.b	d0
000129DE 6A00                       		bpl.s	loc_12448
000129E0 1228 0039                  		move.b	$39(a0),d1
000129E4 5901                       		subq.b	#4,d1
000129E6                            
000129E6                            loc_12448:
000129E6 1141 0038                  		move.b	d1,$38(a0)
000129EA                            
000129EA                            loc_1244C:
000129EA 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000129F0 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000129F6 6100 0000                  		bsr.w	Obj63_ChangeDir
000129FA 6000 0000                  		bra.w	loc_124B2
000129FE                            ; ===========================================================================
000129FE                            
000129FE                            loc_12460:				; XREF: Obj63_Main
000129FE 1140 002F                  		move.b	d0,$2F(a0)
00012A02 0240 007F                  		andi.w	#$7F,d0
00012A06 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012A0A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012A10 6600 B1F6                  		bne.w	DeleteObject
00012A14 D040                       		add.w	d0,d0
00012A16 0240 001E                  		andi.w	#$1E,d0
00012A1A 0640 0070                  		addi.w	#$70,d0
00012A1E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A24 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A28 321A                       		move.w	(a2)+,d1
00012A2A 2248                       		movea.l	a0,a1
00012A2C 6000                       		bra.s	Obj63_MakePtfms
00012A2E                            ; ===========================================================================
00012A2E                            
00012A2E                            Obj63_Loop:
00012A2E 6100 B622                  		bsr.w	SingleObjLoad
00012A32 6600                       		bne.s	loc_124AA
00012A34                            
00012A34                            Obj63_MakePtfms:			; XREF: loc_12460
00012A34 12BC 0063                  		move.b	#$63,0(a1)
00012A38 335A 0008                  		move.w	(a2)+,8(a1)
00012A3C 335A 000C                  		move.w	(a2)+,$C(a1)
00012A40 301A                       		move.w	(a2)+,d0
00012A42 1340 0028                  		move.b	d0,$28(a1)
00012A46                            
00012A46                            loc_124AA:
00012A46 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A4A                            
00012A4A 588F                       		addq.l	#4,sp
00012A4C 4E75                       		rts	
00012A4E                            ; ===========================================================================
00012A4E                            
00012A4E                            loc_124B2:				; XREF: Obj63_Index
00012A4E 7200                       		moveq	#0,d1
00012A50 1228 0019                  		move.b	$19(a0),d1
00012A54 4EB9 0000 78FE             		jsr	(PlatformObject).l
00012A5A 6000 0000                  		bra.w	sub_12502
00012A5E                            ; ===========================================================================
00012A5E                            
00012A5E                            loc_124C2:				; XREF: Obj63_Index
00012A5E 7200                       		moveq	#0,d1
00012A60 1228 0019                  		move.b	$19(a0),d1
00012A64 4EB9 0000 7A72             		jsr	(ExitPlatform).l
00012A6A 3F28 0008                  		move.w	8(a0),-(sp)
00012A6E 6100 0000                  		bsr.w	sub_12502
00012A72 341F                       		move.w	(sp)+,d2
00012A74 4EF9 0000 7FDC             		jmp	(MvSonicOnPtfm2).l
00012A7A                            ; ===========================================================================
00012A7A                            
00012A7A                            loc_124DE:				; XREF: Obj63_Index
00012A7A 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A7E 0240 0003                  		andi.w	#3,d0
00012A82 6600                       		bne.s	loc_124FC
00012A84 7201                       		moveq	#1,d1
00012A86 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A8A 6700                       		beq.s	loc_124F2
00012A8C 4401                       		neg.b	d1
00012A8E                            
00012A8E                            loc_124F2:
00012A8E D328 001A                  		add.b	d1,$1A(a0)
00012A92 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A98                            
00012A98                            loc_124FC:
00012A98 588F                       		addq.l	#4,sp
00012A9A 6000 D1D8                  		bra.w	MarkObjGone
00012A9E                            
00012A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A9E                            
00012A9E                            
00012A9E                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A9E 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012AA2 6700                       		beq.s	loc_12520
00012AA4 4A28 003B                  		tst.b	$3B(a0)
00012AA8 6600                       		bne.s	loc_12520
00012AAA 117C 0001 003B             		move.b	#1,$3B(a0)
00012AB0 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012AB6 4428 003A                  		neg.b	$3A(a0)
00012ABA 6000                       		bra.s	loc_12534
00012ABC                            ; ===========================================================================
00012ABC                            
00012ABC                            loc_12520:
00012ABC 3028 0008                  		move.w	8(a0),d0
00012AC0 B068 0034                  		cmp.w	$34(a0),d0
00012AC4 6600                       		bne.s	loc_1256A
00012AC6 3028 000C                  		move.w	$C(a0),d0
00012ACA B068 0036                  		cmp.w	$36(a0),d0
00012ACE 6600                       		bne.s	loc_1256A
00012AD0                            
00012AD0                            loc_12534:
00012AD0 7200                       		moveq	#0,d1
00012AD2 1228 0038                  		move.b	$38(a0),d1
00012AD6 D228 003A                  		add.b	$3A(a0),d1
00012ADA B228 0039                  		cmp.b	$39(a0),d1
00012ADE 6500                       		bcs.s	loc_12552
00012AE0 1001                       		move.b	d1,d0
00012AE2 7200                       		moveq	#0,d1
00012AE4 4A00                       		tst.b	d0
00012AE6 6A00                       		bpl.s	loc_12552
00012AE8 1228 0039                  		move.b	$39(a0),d1
00012AEC 5901                       		subq.b	#4,d1
00012AEE                            
00012AEE                            loc_12552:
00012AEE 1141 0038                  		move.b	d1,$38(a0)
00012AF2 2268 003C                  		movea.l	$3C(a0),a1
00012AF6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AFC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012B02 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B06                            
00012B06                            loc_1256A:
00012B06 6100 B09E                  		bsr.w	SpeedToPos
00012B0A 4E75                       		rts	
00012B0C                            ; End of function sub_12502
00012B0C                            
00012B0C                            
00012B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012B0C                            
00012B0C                            
00012B0C                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012B0C 7000                       		moveq	#0,d0
00012B0E 343C FF00                  		move.w	#-$100,d2
00012B12 3028 0008                  		move.w	8(a0),d0
00012B16 9068 0034                  		sub.w	$34(a0),d0
00012B1A 6400                       		bcc.s	loc_12584
00012B1C 4440                       		neg.w	d0
00012B1E 4442                       		neg.w	d2
00012B20                            
00012B20                            loc_12584:
00012B20 7200                       		moveq	#0,d1
00012B22 363C FF00                  		move.w	#-$100,d3
00012B26 3228 000C                  		move.w	$C(a0),d1
00012B2A 9268 0036                  		sub.w	$36(a0),d1
00012B2E 6400                       		bcc.s	loc_12598
00012B30 4441                       		neg.w	d1
00012B32 4443                       		neg.w	d3
00012B34                            
00012B34                            loc_12598:
00012B34 B240                       		cmp.w	d0,d1
00012B36 6500                       		bcs.s	loc_125C2
00012B38 3028 0008                  		move.w	8(a0),d0
00012B3C 9068 0034                  		sub.w	$34(a0),d0
00012B40 6700                       		beq.s	loc_125AE
00012B42 48C0                       		ext.l	d0
00012B44 E180                       		asl.l	#8,d0
00012B46 81C1                       		divs.w	d1,d0
00012B48 4440                       		neg.w	d0
00012B4A                            
00012B4A                            loc_125AE:
00012B4A 3140 0010                  		move.w	d0,$10(a0)
00012B4E 3143 0012                  		move.w	d3,$12(a0)
00012B52 4840                       		swap	d0
00012B54 3140 000A                  		move.w	d0,$A(a0)
00012B58 4268 000E                  		clr.w	$E(a0)
00012B5C 4E75                       		rts	
00012B5E                            ; ===========================================================================
00012B5E                            
00012B5E                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B5E 3228 000C                  		move.w	$C(a0),d1
00012B62 9268 0036                  		sub.w	$36(a0),d1
00012B66 6700                       		beq.s	loc_125D4
00012B68 48C1                       		ext.l	d1
00012B6A E181                       		asl.l	#8,d1
00012B6C 83C0                       		divs.w	d0,d1
00012B6E 4441                       		neg.w	d1
00012B70                            
00012B70                            loc_125D4:
00012B70 3141 0012                  		move.w	d1,$12(a0)
00012B74 3142 0010                  		move.w	d2,$10(a0)
00012B78 4841                       		swap	d1
00012B7A 3141 000E                  		move.w	d1,$E(a0)
00012B7E 4268 000A                  		clr.w	$A(a0)
00012B82 4E75                       		rts	
00012B84                            ; End of function Obj63_ChangeDir
00012B84                            
00012B84                            ; ===========================================================================
00012B84 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B86 0000                       		dc.w word_12610-Obj63_Data
00012B88 0000                       		dc.w word_12628-Obj63_Data
00012B8A 0000                       		dc.w word_1263C-Obj63_Data
00012B8C 0000                       		dc.w word_12650-Obj63_Data
00012B8E 0000                       		dc.w word_12668-Obj63_Data
00012B90 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012BA0 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012BAC 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012BBC 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BC4 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012BD8 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012BEC 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012C04 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012C18                            
00012C18                            ; ---------------------------------------------------------------------------
00012C18                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C18                            ; ---------------------------------------------------------------------------
00012C18                            Map_obj63:
00012C18                            	include "_maps\obj63.asm"
00012C18                            ; ---------------------------------------------------------------------------
00012C18                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C18                            ; ---------------------------------------------------------------------------
00012C18 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012C1C 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012C20 0000                       		dc.w byte_1269E-Map_obj63
00012C22 01                         byte_12686:	dc.b 1
00012C23 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C28 01                         byte_1268C:	dc.b 1
00012C29 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C2E 01                         byte_12692:	dc.b 1
00012C2F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C34 01                         byte_12698:	dc.b 1
00012C35 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C3A 01                         byte_1269E:	dc.b 1
00012C3B F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C40                            		even
00012C40                            		even
00012C40                            
00012C40                            ; ===========================================================================
00012C40                            ; ---------------------------------------------------------------------------
00012C40                            ; Object 64 - bubbles (LZ)
00012C40                            ; ---------------------------------------------------------------------------
00012C40                            
00012C40                            Obj64:					; XREF: Obj_Index
00012C40 7000                       		moveq	#0,d0
00012C42 1028 0024                  		move.b	$24(a0),d0
00012C46 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C4A 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C4E                            ; ===========================================================================
00012C4E 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C50 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C52 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C54 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C56 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C58 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C5A                            ; ===========================================================================
00012C5A                            
00012C5A                            Obj64_Main:				; XREF: Obj64_Index
00012C5A 5428 0024                  		addq.b	#2,$24(a0)
00012C5E 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C66 317C 8348 0002             		move.w	#$8348,2(a0)
00012C6C 117C 0084 0001             		move.b	#$84,1(a0)
00012C72 117C 0010 0019             		move.b	#$10,$19(a0)
00012C78 117C 0001 0018             		move.b	#1,$18(a0)
00012C7E 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C82 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C84 5028 0024                  		addq.b	#8,$24(a0)
00012C88 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C8C 1140 0032                  		move.b	d0,$32(a0)
00012C90 1140 0033                  		move.b	d0,$33(a0)
00012C94 117C 0006 001C             		move.b	#6,$1C(a0)
00012C9A 6000 0000                  		bra.w	Obj64_BblMaker
00012C9E                            ; ===========================================================================
00012C9E                            
00012C9E                            Obj64_Bubble:				; XREF: Obj64_Main
00012C9E 1140 001C                  		move.b	d0,$1C(a0)
00012CA2 3168 0008 0030             		move.w	8(a0),$30(a0)
00012CA8 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012CAE 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00012CB4 1140 0026                  		move.b	d0,$26(a0)
00012CB8                            
00012CB8                            Obj64_Animate:				; XREF: Obj64_Index
00012CB8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012CBE 4EB9 0000 ACA2             		jsr	AnimateSprite
00012CC4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012CCA 6600                       		bne.s	Obj64_ChkWater
00012CCC 117C 0001 002E             		move.b	#1,$2E(a0)
00012CD2                            
00012CD2                            Obj64_ChkWater:				; XREF: Obj64_Index
00012CD2 3038 F646                  		move.w	($FFFFF646).w,d0
00012CD6 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012CDA 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012CDC                            
00012CDC                            Obj64_Burst:				; XREF: Obj64_Wobble
00012CDC 117C 0006 0024             		move.b	#6,$24(a0)
00012CE2 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012CE6 6000 0000                  		bra.w	Obj64_Display2
00012CEA                            ; ===========================================================================
00012CEA                            
00012CEA                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012CEA 1028 0026                  		move.b	$26(a0),d0
00012CEE 5228 0026                  		addq.b	#1,$26(a0)
00012CF2 0240 007F                  		andi.w	#$7F,d0
00012CF6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CFC 1031 0000                  		move.b	(a1,d0.w),d0
00012D00 4880                       		ext.w	d0
00012D02 D068 0030                  		add.w	$30(a0),d0
00012D06 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012D0A 4A28 002E                  		tst.b	$2E(a0)
00012D0E 6700                       		beq.s	Obj64_Display
00012D10 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012D14 6700                       		beq.s	Obj64_Display	; if not, branch
00012D16                            
00012D16 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012D1A 303C 00AD                  		move.w	#$AD,d0
00012D1E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D24 43F8 D000                  		lea	($FFFFD000).w,a1
00012D28 4269 0010                  		clr.w	$10(a1)
00012D2C 4269 0012                  		clr.w	$12(a1)
00012D30 4269 0014                  		clr.w	$14(a1)
00012D34 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D3A 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D40 137C 0000 003C             		move.b	#0,$3C(a1)
00012D46 08A9 0005 0022             		bclr	#5,$22(a1)
00012D4C 08A9 0004 0022             		bclr	#4,$22(a1)
00012D52 0829 0002 0022             		btst	#2,$22(a1)
00012D58 6700 FF82                  		beq.w	Obj64_Burst
00012D5C 08A9 0002 0022             		bclr	#2,$22(a1)
00012D62 137C 0013 0016             		move.b	#$13,$16(a1)
00012D68 137C 0009 0017             		move.b	#9,$17(a1)
00012D6E 5B69 000C                  		subq.w	#5,$C(a1)
00012D72 6000 FF68                  		bra.w	Obj64_Burst
00012D76                            ; ===========================================================================
00012D76                            
00012D76                            Obj64_Display:				; XREF: Obj64_Wobble
00012D76 6100 AE2E                  		bsr.w	SpeedToPos
00012D7A 4A28 0001                  		tst.b	1(a0)
00012D7E 6A00                       		bpl.s	Obj64_Delete
00012D80 4EFA AE4A                  		jmp	DisplaySprite
00012D84                            ; ===========================================================================
00012D84                            
00012D84                            Obj64_Delete:
00012D84 4EFA AE82                  		jmp	DeleteObject
00012D88                            ; ===========================================================================
00012D88                            
00012D88                            Obj64_Display2:				; XREF: Obj64_Index
00012D88 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D8E 4EB9 0000 ACA2             		jsr	AnimateSprite
00012D94 4A28 0001                  		tst.b	1(a0)
00012D98 6A00                       		bpl.s	Obj64_Delete2
00012D9A 4EFA AE30                  		jmp	DisplaySprite
00012D9E                            ; ===========================================================================
00012D9E                            
00012D9E                            Obj64_Delete2:
00012D9E 4EFA AE68                  		jmp	DeleteObject
00012DA2                            ; ===========================================================================
00012DA2                            
00012DA2                            Obj64_Delete3:				; XREF: Obj64_Index
00012DA2 6000 AE64                  		bra.w	DeleteObject
00012DA6                            ; ===========================================================================
00012DA6                            
00012DA6                            Obj64_BblMaker:				; XREF: Obj64_Index
00012DA6 4A68 0036                  		tst.w	$36(a0)
00012DAA 6600                       		bne.s	loc_12874
00012DAC 3038 F646                  		move.w	($FFFFF646).w,d0
00012DB0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012DB4 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012DB8 4A28 0001                  		tst.b	1(a0)
00012DBC 6A00 0000                  		bpl.w	Obj64_ChkDel
00012DC0 5368 0038                  		subq.w	#1,$38(a0)
00012DC4 6A00 0000                  		bpl.w	loc_12914
00012DC8 317C 0001 0036             		move.w	#1,$36(a0)
00012DCE                            
00012DCE                            loc_1283A:
00012DCE 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00012DD4 3200                       		move.w	d0,d1
00012DD6 0240 0007                  		andi.w	#7,d0
00012DDA 0C40 0006                  		cmpi.w	#6,d0
00012DDE 64EE                       		bcc.s	loc_1283A
00012DE0                            
00012DE0 1140 0034                  		move.b	d0,$34(a0)
00012DE4 0241 000C                  		andi.w	#$C,d1
00012DE8 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012DEE D2C1                       		adda.w	d1,a1
00012DF0 2149 003C                  		move.l	a1,$3C(a0)
00012DF4 5328 0032                  		subq.b	#1,$32(a0)
00012DF8 6A00                       		bpl.s	loc_12872
00012DFA 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012E00 08E8 0007 0036             		bset	#7,$36(a0)
00012E06                            
00012E06                            loc_12872:
00012E06 6000                       		bra.s	loc_1287C
00012E08                            ; ===========================================================================
00012E08                            
00012E08                            loc_12874:				; XREF: Obj64_BblMaker
00012E08 5368 0038                  		subq.w	#1,$38(a0)
00012E0C 6A00 0000                  		bpl.w	loc_12914
00012E10                            
00012E10                            loc_1287C:
00012E10 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00012E16 0240 001F                  		andi.w	#$1F,d0
00012E1A 3140 0038                  		move.w	d0,$38(a0)
00012E1E 6100 B232                  		bsr.w	SingleObjLoad
00012E22 6600                       		bne.s	loc_128F8
00012E24 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E28 3368 0008 0008             		move.w	8(a0),8(a1)
00012E2E 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00012E34 0240 000F                  		andi.w	#$F,d0
00012E38 5140                       		subq.w	#8,d0
00012E3A D169 0008                  		add.w	d0,8(a1)
00012E3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E44 7000                       		moveq	#0,d0
00012E46 1028 0034                  		move.b	$34(a0),d0
00012E4A 2468 003C                  		movea.l	$3C(a0),a2
00012E4E 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E54 0828 0007 0036             		btst	#7,$36(a0)
00012E5A 6700                       		beq.s	loc_128F8
00012E5C 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00012E62 0240 0003                  		andi.w	#3,d0
00012E66 6600                       		bne.s	loc_128E4
00012E68 08E8 0006 0036             		bset	#6,$36(a0)
00012E6E 6600                       		bne.s	loc_128F8
00012E70 137C 0002 0028             		move.b	#2,$28(a1)
00012E76                            
00012E76                            loc_128E4:
00012E76 4A28 0034                  		tst.b	$34(a0)
00012E7A 6600                       		bne.s	loc_128F8
00012E7C 08E8 0006 0036             		bset	#6,$36(a0)
00012E82 6600                       		bne.s	loc_128F8
00012E84 137C 0002 0028             		move.b	#2,$28(a1)
00012E8A                            
00012E8A                            loc_128F8:
00012E8A 5328 0034                  		subq.b	#1,$34(a0)
00012E8E 6A00                       		bpl.s	loc_12914
00012E90 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00012E96 0240 007F                  		andi.w	#$7F,d0
00012E9A 0640 0080                  		addi.w	#$80,d0
00012E9E D168 0038                  		add.w	d0,$38(a0)
00012EA2 4268 0036                  		clr.w	$36(a0)
00012EA6                            
00012EA6                            loc_12914:
00012EA6 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EAC 4EB9 0000 ACA2             		jsr	AnimateSprite
00012EB2                            
00012EB2                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012EB2 3028 0008                  		move.w	8(a0),d0
00012EB6 0240 FF80                  		andi.w	#$FF80,d0
00012EBA 3238 F700                  		move.w	($FFFFF700).w,d1
00012EBE 0441 0080                  		subi.w	#$80,d1
00012EC2 0241 FF80                  		andi.w	#$FF80,d1
00012EC6 9041                       		sub.w	d1,d0
00012EC8 0C40 0280                  		cmpi.w	#$280,d0
00012ECC 6200 AD3A                  		bhi.w	DeleteObject
00012ED0 3038 F646                  		move.w	($FFFFF646).w,d0
00012ED4 B068 000C                  		cmp.w	$C(a0),d0
00012ED8 6500 ACF2                  		bcs.w	DisplaySprite
00012EDC 4E75                       		rts	
00012EDE                            ; ===========================================================================
00012EDE                            ; bubble production sequence
00012EDE                            
00012EDE                            ; 0 = small bubble, 1 =	large bubble
00012EDE                            
00012EDE 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012EF0                            
00012EF0                            ; ===========================================================================
00012EF0                            
00012EF0                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012EF0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012EF4 6B00                       		bmi.s	loc_12998
00012EF6 43F8 D000                  		lea	($FFFFD000).w,a1
00012EFA 3029 0008                  		move.w	8(a1),d0
00012EFE 3228 0008                  		move.w	8(a0),d1
00012F02 0441 0010                  		subi.w	#$10,d1
00012F06 B240                       		cmp.w	d0,d1
00012F08 6400                       		bcc.s	loc_12998
00012F0A 0641 0020                  		addi.w	#$20,d1
00012F0E B240                       		cmp.w	d0,d1
00012F10 6500                       		bcs.s	loc_12998
00012F12 3029 000C                  		move.w	$C(a1),d0
00012F16 3228 000C                  		move.w	$C(a0),d1
00012F1A B240                       		cmp.w	d0,d1
00012F1C 6400                       		bcc.s	loc_12998
00012F1E 0641 0010                  		addi.w	#$10,d1
00012F22 B240                       		cmp.w	d0,d1
00012F24 6500                       		bcs.s	loc_12998
00012F26 7001                       		moveq	#1,d0
00012F28 4E75                       		rts	
00012F2A                            ; ===========================================================================
00012F2A                            
00012F2A                            loc_12998:
00012F2A 7000                       		moveq	#0,d0
00012F2C 4E75                       		rts	
00012F2E                            ; ===========================================================================
00012F2E                            Ani_obj64:
00012F2E                            	include "_anim\obj64.asm"
00012F2E                            ; ---------------------------------------------------------------------------
00012F2E                            ; Animation script - bubbles (LZ)
00012F2E                            ; ---------------------------------------------------------------------------
00012F2E 0000                       		dc.w byte_129AA-Ani_obj64
00012F30 0000                       		dc.w byte_129B0-Ani_obj64
00012F32 0000                       		dc.w byte_129B6-Ani_obj64
00012F34 0000                       		dc.w byte_129BE-Ani_obj64
00012F36 0000                       		dc.w byte_129BE-Ani_obj64
00012F38 0000                       		dc.w byte_129C0-Ani_obj64
00012F3A 0000                       		dc.w byte_129C6-Ani_obj64
00012F3C 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F42 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F48 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F50 04FC                       byte_129BE:	dc.b 4,	$FC
00012F52 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F58 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F5E 00                         		even
00012F5E 00                         		even
00012F5E                            
00012F5E                            ; ---------------------------------------------------------------------------
00012F5E                            ; Sprite mappings - bubbles (LZ)
00012F5E                            ; ---------------------------------------------------------------------------
00012F5E                            Map_obj64:
00012F5E                            	include "_maps\obj64.asm"
00012F5E                            ; ---------------------------------------------------------------------------
00012F5E                            ; Sprite mappings - bubbles (LZ)
00012F5E                            ; ---------------------------------------------------------------------------
00012F5E 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F62 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F66 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F6A 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F6E 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F72 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F76 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F7A 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F7E 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F82 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F86 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F8A 0000                       		dc.w byte_12A9C-Map_obj64
00012F8C 01                         byte_129FA:	dc.b 1
00012F8D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F92 01                         byte_12A00:	dc.b 1
00012F93 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F98 01                         byte_12A06:	dc.b 1
00012F99 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F9E 01                         byte_12A0C:	dc.b 1
00012F9F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012FA4 01                         byte_12A12:	dc.b 1
00012FA5 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012FAA 01                         byte_12A18:	dc.b 1
00012FAB F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012FB0 01                         byte_12A1E:	dc.b 1
00012FB1 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012FB6 04                         byte_12A24:	dc.b 4
00012FB7 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012FBC F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012FC1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FC6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012FCB 04                         byte_12A39:	dc.b 4
00012FCC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012FD1 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012FD6 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012FDB 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012FE0 01                         byte_12A4E:	dc.b 1
00012FE1 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012FE6 01                         byte_12A54:	dc.b 1
00012FE7 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012FEC 01                         byte_12A5A:	dc.b 1
00012FED F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012FF2 01                         byte_12A60:	dc.b 1
00012FF3 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012FF8 01                         byte_12A66:	dc.b 1
00012FF9 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FFE 01                         byte_12A6C:	dc.b 1
00012FFF F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013004 01                         byte_12A72:	dc.b 1
00013005 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001300A 01                         byte_12A78:	dc.b 1
0001300B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013010 01                         byte_12A7E:	dc.b 1
00013011 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013016 01                         byte_12A84:	dc.b 1
00013017 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001301C 01                         byte_12A8A:	dc.b 1
0001301D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013022 01                         byte_12A90:	dc.b 1
00013023 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013028 01                         byte_12A96:	dc.b 1
00013029 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001302E 00                         byte_12A9C:	dc.b 0
00013030 00                         		even
00013030 00                         		even
00013030                            
00013030                            ; ===========================================================================
00013030                            ; ---------------------------------------------------------------------------
00013030                            ; Object 65 - waterfalls (LZ)
00013030                            ; ---------------------------------------------------------------------------
00013030                            
00013030                            Obj65:					; XREF: Obj_Index
00013030 7000                       		moveq	#0,d0
00013032 1028 0024                  		move.b	$24(a0),d0
00013036 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001303A 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001303E                            ; ===========================================================================
0001303E 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013040 0000                       		dc.w Obj65_Animate-Obj65_Index
00013042 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013044 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013046 0000                       		dc.w loc_12B36-Obj65_Index
00013048                            ; ===========================================================================
00013048                            
00013048                            Obj65_Main:				; XREF: Obj65_Index
00013048 5828 0024                  		addq.b	#4,$24(a0)
0001304C 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013054 317C 4259 0002             		move.w	#$4259,2(a0)
0001305A 0028 0004 0001             		ori.b	#4,1(a0)
00013060 117C 0018 0019             		move.b	#$18,$19(a0)
00013066 117C 0001 0018             		move.b	#1,$18(a0)
0001306C 1028 0028                  		move.b	$28(a0),d0	; get object type
00013070 6A00                       		bpl.s	loc_12AE6
00013072 08E8 0007 0002             		bset	#7,2(a0)
00013078                            
00013078                            loc_12AE6:
00013078 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001307C 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013080 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013084 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013086 4228 0018                  		clr.b	$18(a0)
0001308A 5528 0024                  		subq.b	#2,$24(a0)
0001308E 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013094 6700                       		beq.s	loc_12B0A	; if not, branch
00013096 117C 0006 0024             		move.b	#6,$24(a0)
0001309C                            
0001309C                            loc_12B0A:
0001309C 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000130A2 6700                       		beq.s	Obj65_Animate	; if not, branch
000130A4 117C 0008 0024             		move.b	#8,$24(a0)
000130AA                            
000130AA                            Obj65_Animate:				; XREF: Obj65_Index
000130AA 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000130B0 4EB9 0000 ACA2             		jsr	AnimateSprite
000130B6                            
000130B6                            Obj65_ChkDel:				; XREF: Obj65_Index
000130B6 6000 CBBC                  		bra.w	MarkObjGone
000130BA                            ; ===========================================================================
000130BA                            
000130BA                            Obj65_FixHeight:			; XREF: Obj65_Index
000130BA 3038 F646                  		move.w	($FFFFF646).w,d0
000130BE 0440 0010                  		subi.w	#$10,d0
000130C2 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130C6 60E2                       		bra.s	Obj65_Animate
000130C8                            ; ===========================================================================
000130C8                            
000130C8                            loc_12B36:				; XREF: Obj65_Index
000130C8 08A8 0007 0002             		bclr	#7,2(a0)
000130CE 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000130D4 6600                       		bne.s	Obj65_Animate2
000130D6 08E8 0007 0002             		bset	#7,2(a0)
000130DC                            
000130DC                            Obj65_Animate2:
000130DC 60CC                       		bra.s	Obj65_Animate
000130DE                            ; ===========================================================================
000130DE                            Ani_obj65:
000130DE                            	include "_anim\obj65.asm"
000130DE                            ; ---------------------------------------------------------------------------
000130DE                            ; Animation script - waterfall (LZ)
000130DE                            ; ---------------------------------------------------------------------------
000130DE 0000                       		dc.w byte_12B4E-Ani_obj65
000130E0 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000130E6 00                         		even
000130E6 00                         		even
000130E6                            
000130E6                            ; ---------------------------------------------------------------------------
000130E6                            ; Sprite mappings - waterfalls (LZ)
000130E6                            ; ---------------------------------------------------------------------------
000130E6                            Map_obj65:
000130E6                            	include "_maps\obj65.asm"
000130E6                            ; ---------------------------------------------------------------------------
000130E6                            ; Sprite mappings - waterfalls (LZ)
000130E6                            ; ---------------------------------------------------------------------------
000130E6 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000130EA 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000130EE 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000130F2 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000130F6 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130FA 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130FE 01                         byte_12B6C:	dc.b 1
000130FF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013104 02                         byte_12B72:	dc.b 2
00013105 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001310A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001310F 02                         byte_12B7D:	dc.b 2
00013110 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013115 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001311A 01                         byte_12B88:	dc.b 1
0001311B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013120 02                         byte_12B8E:	dc.b 2
00013121 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013126 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001312B 01                         byte_12B99:	dc.b 1
0001312C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013131 01                         byte_12B9F:	dc.b 1
00013132 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013137 01                         byte_12BA5:	dc.b 1
00013138 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001313D 02                         byte_12BAB:	dc.b 2
0001313E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013143 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013148 02                         byte_12BB6:	dc.b 2
00013149 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001314E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013153 02                         byte_12BC1:	dc.b 2
00013154 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013159 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001315E 02                         byte_12BCC:	dc.b 2
0001315F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013164 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001316A 00                         		even
0001316A 00                         		even
0001316A                            
0001316A                            ; ===========================================================================
0001316A                            ; ---------------------------------------------------------------------------
0001316A                            ; Object 01 - Sonic
0001316A                            ; ---------------------------------------------------------------------------
0001316A                            
0001316A                            Obj01:					; XREF: Obj_Index
0001316A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001316E 6700                       		beq.s	Obj01_Normal	; if not, branch
00013170 4EF9 0000 0000             		jmp	DebugMode
00013176                            ; ===========================================================================
00013176                            
00013176                            Obj01_Normal:
00013176 7000                       		moveq	#0,d0
00013178 1028 0024                  		move.b	$24(a0),d0
0001317C 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013180 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013184                            ; ===========================================================================
00013184 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013186 0000                       		dc.w Obj01_Control-Obj01_Index
00013188 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001318A 0000                       		dc.w Obj01_Death-Obj01_Index
0001318C 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001318E                            ; ===========================================================================
0001318E                            
0001318E                            Obj01_Main:				; XREF: Obj01_Index
0001318E 5428 0024                  		addq.b	#2,$24(a0)
00013192 117C 0013 0016             		move.b	#$13,$16(a0)
00013198 117C 0009 0017             		move.b	#9,$17(a0)
0001319E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000131A6 317C 0780 0002             		move.w	#$780,2(a0)
000131AC 117C 0002 0018             		move.b	#2,$18(a0)
000131B2 117C 0018 0019             		move.b	#$18,$19(a0)
000131B8 117C 0004 0001             		move.b	#4,1(a0)
000131BE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000131C4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000131CA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000131D0                            
000131D0                            Obj01_Control:				; XREF: Obj01_Index
000131D0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000131D4 6700                       		beq.s	loc_12C58	; if not, branch
000131D6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000131DC 6700                       		beq.s	loc_12C58	; if not, branch
000131DE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000131E4 4238 F7CC                  		clr.b	($FFFFF7CC).w
000131E8 4E75                       		rts	
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            loc_12C58:
000131EA 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000131EE 6600                       		bne.s	loc_12C64	; if yes, branch
000131F0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000131F6                            
000131F6                            loc_12C64:
000131F6 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131FC 6600                       		bne.s	loc_12C7E	; if yes, branch
000131FE 7000                       		moveq	#0,d0
00013200 1028 0022                  		move.b	$22(a0),d0
00013204 0240 0006                  		andi.w	#6,d0
00013208 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001320C 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013210                            
00013210                            loc_12C7E:
00013210 6100                       		bsr.s	Sonic_Display
00013212 6100 0000                  		bsr.w	Sonic_RecordPos
00013216 6100 0000                  		bsr.w	Sonic_Water
0001321A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013220 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013226 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001322A 6700                       		beq.s	loc_12CA6
0001322C 4A28 001C                  		tst.b	$1C(a0)
00013230 6600                       		bne.s	loc_12CA6
00013232 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013238                            
00013238                            loc_12CA6:
00013238 6100 0000                  		bsr.w	Sonic_Animate
0001323C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013240 6B00                       		bmi.s	loc_12CB6
00013242 4EB9 0000 0000             		jsr	TouchResponse
00013248                            
00013248                            loc_12CB6:
00013248 6100 0000                  		bsr.w	Sonic_Loops
0001324C 6100 0000                  		bsr.w	LoadSonicDynPLC
00013250 4E75                       		rts	
00013252                            ; ===========================================================================
00013252 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013254 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013256 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013258 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001325A                            ; ---------------------------------------------------------------------------
0001325A                            ; Music	to play	after invincibility wears off
0001325A                            ; ---------------------------------------------------------------------------
0001325A                            ; ===========================================================================
0001325A                            
0001325A                            Sonic_Display:				; XREF: loc_12C7E
0001325A 3028 0030                  		move.w	$30(a0),d0
0001325E 6700                       		beq.s	Obj01_Display
00013260 5368 0030                  		subq.w	#1,$30(a0)
00013264 E648                       		lsr.w	#3,d0
00013266 6400                       		bcc.s	Obj01_ChkInvin
00013268                            
00013268                            Obj01_Display:
00013268 4EBA A962                  		jsr	DisplaySprite
0001326C                            
0001326C                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
0001326C                             
0001326C                            Obj01_ChkInvin:
0001326C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013270 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013274 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013278 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001327C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013280 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013284 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013288 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001328C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013292 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013296 7000                       		moveq	#0,d0
00013298 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001329C                             
0001329C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000132A2 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000132A4 43F9 0000 3B0C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000132AA 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132AC                             
000132AC                            Obj01_GetBgm2:
000132AC 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000132B2 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000132B4 43F9 0000 3B14             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000132BA 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132BC                             
000132BC                            Obj01_GetBgm3:
000132BC 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000132C2 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000132C4 43F9 0000 3B1A             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000132CA 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132CC                             
000132CC                            Obj01_GetBgm4:
000132CC 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000132D2 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000132D4 43F9 0000 3B20             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000132DA                             
000132DA                            Obj01_PlayMusic:
000132DA 1031 0000                  		move.b	(a1,d0.w),d0
000132DE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
000132E4                             
000132E4                            ; NineKode ends here.
000132E4                            
000132E4                            Obj01_RmvInvin:
000132E4 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000132EA                            
000132EA                            Obj01_ChkShoes:
000132EA 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000132EE 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000132F0 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000132F4 6700                       		beq.s	Obj01_ExitChk
000132F6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132FA 6600                       		bne.s	Obj01_ExitChk
000132FC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013302 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013308 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001330E 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013314 303C 00E3                  		move.w	#$E3,d0
00013318 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
0001331E                            ; ===========================================================================
0001331E                            
0001331E                            Obj01_ExitChk:
0001331E 4E75                       		rts	
00013320                            
00013320                            ; ---------------------------------------------------------------------------
00013320                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013320                            ; ---------------------------------------------------------------------------
00013320                            
00013320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013320                            
00013320                            
00013320                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013320 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013324 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013328 43F1 0000                  		lea	(a1,d0.w),a1
0001332C 32E8 0008                  		move.w	8(a0),(a1)+
00013330 32E8 000C                  		move.w	$C(a0),(a1)+
00013334 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013338 4E75                       		rts	
0001333A                            ; End of function Sonic_RecordPos
0001333A                            
0001333A                            ; ---------------------------------------------------------------------------
0001333A                            ; Subroutine for Sonic when he's underwater
0001333A                            ; ---------------------------------------------------------------------------
0001333A                            
0001333A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001333A                            
0001333A                            
0001333A                            Sonic_Water:				; XREF: loc_12C7E
0001333A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013340 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013342                            
00013342                            locret_12D80:
00013342 4E75                       		rts	
00013344                            ; ===========================================================================
00013344                            
00013344                            Obj01_InWater:
00013344 3038 F646                  		move.w	($FFFFF646).w,d0
00013348 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
0001334C 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001334E 08E8 0006 0022             		bset	#6,$22(a0)
00013354 66EC                       		bne.s	locret_12D80
00013356 6100 0000                  		bsr.w	ResumeMusic
0001335A 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013360 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013366 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001336C 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013372 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013378 E0E8 0010                  		asr	$10(a0)
0001337C E0E8 0012                  		asr	$12(a0)
00013380 E0E8 0012                  		asr	$12(a0)
00013384 67BC                       		beq.s	locret_12D80
00013386 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001338C 303C 00AA                  		move.w	#$AA,d0
00013390 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013396                            ; ===========================================================================
00013396                            
00013396                            Obj01_OutWater:
00013396 08A8 0006 0022             		bclr	#6,$22(a0)
0001339C 67A4                       		beq.s	locret_12D80
0001339E 6100 0000                  		bsr.w	ResumeMusic
000133A2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000133A8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000133AE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000133B4 E1E8 0012                  		asl	$12(a0)
000133B8 6700 FF88                  		beq.w	locret_12D80
000133BC 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000133C2 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000133C8 6E00                       		bgt.s	loc_12E0E
000133CA 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000133D0                            
000133D0                            loc_12E0E:
000133D0 303C 00AA                  		move.w	#$AA,d0
000133D4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
000133DA                            ; End of function Sonic_Water
000133DA                            
000133DA                            ; ===========================================================================
000133DA                            ; ---------------------------------------------------------------------------
000133DA                            ; Modes	for controlling	Sonic
000133DA                            ; ---------------------------------------------------------------------------
000133DA                            
000133DA                            Obj01_MdNormal:				; XREF: Obj01_Modes
000133DA 6100 0000                  		bsr.w	Sonic_Jump
000133DE 6100 0000                  		bsr.w	Sonic_SlopeResist
000133E2 6100 0000                  		bsr.w	Sonic_Move
000133E6 6100 0000                  		bsr.w	Sonic_Roll
000133EA 6100 0000                  		bsr.w	Sonic_LevelBound
000133EE 4EBA A7B6                  		jsr	SpeedToPos
000133F2 6100 0000                  		bsr.w	Sonic_AnglePos
000133F6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133FA 4E75                       		rts	
000133FC                            ; ===========================================================================
000133FC                            
000133FC                            Obj01_MdJump:				; XREF: Obj01_Modes
000133FC 6100 0000                  		bsr.w	Sonic_JumpHeight
00013400 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013404 6100 0000                  		bsr.w	Sonic_LevelBound
00013408 4EBA A770                  		jsr	ObjectFall
0001340C 0828 0006 0022             		btst	#6,$22(a0)
00013412 6700                       		beq.s	loc_12E5C
00013414 0468 0028 0012             		subi.w	#$28,$12(a0)
0001341A                            
0001341A                            loc_12E5C:
0001341A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001341E 6100 0000                  		bsr.w	Sonic_Floor
00013422 4E75                       		rts	
00013424                            ; ===========================================================================
00013424                            
00013424                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013424 6100 0000                  		bsr.w	Sonic_Jump
00013428 6100 0000                  		bsr.w	Sonic_RollRepel
0001342C 6100 0000                  		bsr.w	Sonic_RollSpeed
00013430 6100 0000                  		bsr.w	Sonic_LevelBound
00013434 4EBA A770                  		jsr	SpeedToPos
00013438 6100 0000                  		bsr.w	Sonic_AnglePos
0001343C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013440 4E75                       		rts	
00013442                            ; ===========================================================================
00013442                            
00013442                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013442 6100 0000                  		bsr.w	Sonic_JumpHeight
00013446 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001344A 6100 0000                  		bsr.w	Sonic_LevelBound
0001344E 4EBA A72A                  		jsr	ObjectFall
00013452 0828 0006 0022             		btst	#6,$22(a0)
00013458 6700                       		beq.s	loc_12EA6
0001345A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013460                            
00013460                            loc_12EA6:
00013460 6100 0000                  		bsr.w	Sonic_JumpAngle
00013464 6100 0000                  		bsr.w	Sonic_Floor
00013468 4E75                       		rts	
0001346A                            ; ---------------------------------------------------------------------------
0001346A                            ; Subroutine to	make Sonic walk/run
0001346A                            ; ---------------------------------------------------------------------------
0001346A                            
0001346A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001346A                            
0001346A                            
0001346A                            Sonic_Move:				; XREF: Obj01_MdNormal
0001346A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001346E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013472 3838 F764                  		move.w	($FFFFF764).w,d4
00013476 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001347A 6600 0000                  		bne.w	loc_12FEE
0001347E 4A68 003E                  		tst.w	$3E(a0)
00013482 6600 0000                  		bne.w	Obj01_ResetScr
00013486 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001348C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001348E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013494 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013496 6100 0000                  		bsr.w	Sonic_MoveLeft
0001349A                            
0001349A                            Obj01_NotLeft:
0001349A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000134A0 6700                       		beq.s	Obj01_NotRight	; if not, branch
000134A2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134A8 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000134AA 6100 0000                  		bsr.w	Sonic_MoveLeft
000134AE 6000                       		bra.s	Obj01_NotRight
000134B0                            
000134B0                            Obj01_MoveRight:
000134B0 6100 0000                  		bsr.w	Sonic_MoveRight
000134B4                            
000134B4                            Obj01_NotRight:
000134B4 1028 0026                  		move.b	$26(a0),d0
000134B8 0600 0020                  		addi.b	#$20,d0
000134BC 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000134C0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134C4 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000134C8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134CC 08A8 0005 0022             		bclr	#5,$22(a0)
000134D2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000134D8 0828 0003 0022             		btst	#3,$22(a0)
000134DE 6700                       		beq.s	Sonic_Balance
000134E0 7000                       		moveq	#0,d0
000134E2 1028 003D                  		move.b	$3D(a0),d0
000134E6 ED48                       		lsl.w	#6,d0
000134E8 43F8 D000                  		lea	($FFFFD000).w,a1
000134EC 43F1 0000                  		lea	(a1,d0.w),a1
000134F0 4A29 0022                  		tst.b	$22(a1)
000134F4 6B00                       		bmi.s	Sonic_LookUp
000134F6 7200                       		moveq	#0,d1
000134F8 1229 0019                  		move.b	$19(a1),d1
000134FC 3401                       		move.w	d1,d2
000134FE D442                       		add.w	d2,d2
00013500 5942                       		subq.w	#4,d2
00013502 D268 0008                  		add.w	8(a0),d1
00013506 9269 0008                  		sub.w	8(a1),d1
0001350A 0C41 0004                  		cmpi.w	#4,d1
0001350E 6D00                       		blt.s	loc_12F6A
00013510 B242                       		cmp.w	d2,d1
00013512 6C00                       		bge.s	loc_12F5A
00013514 6000                       		bra.s	Sonic_LookUp
00013516                            ; ===========================================================================
00013516                            
00013516                            Sonic_Balance:
00013516 4EB9 0000 0000             		jsr	ObjHitFloor
0001351C 0C41 000C                  		cmpi.w	#$C,d1
00013520 6D00                       		blt.s	Sonic_LookUp
00013522 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013528 6600                       		bne.s	loc_12F62
0001352A                            
0001352A                            loc_12F5A:
0001352A 08A8 0000 0022             		bclr	#0,$22(a0)
00013530 6000                       		bra.s	loc_12F70
00013532                            ; ===========================================================================
00013532                            
00013532                            loc_12F62:
00013532 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013538 6600                       		bne.s	Sonic_LookUp
0001353A                            
0001353A                            loc_12F6A:
0001353A 08E8 0000 0022             		bset	#0,$22(a0)
00013540                            
00013540                            loc_12F70:
00013540 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013546 6000                       		bra.s	Obj01_ResetScr
00013548                            ; ===========================================================================
00013548                            
00013548                            Sonic_LookUp:
00013548 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001354E 6700                       		beq.s	Sonic_Duck	; if not, branch
00013550 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013556 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001355C 6700                       		beq.s	loc_12FC2
0001355E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013562 6000                       		bra.s	loc_12FC2
00013564                            ; ===========================================================================
00013564                            
00013564                            Sonic_Duck:
00013564 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001356A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001356C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013572 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013578 6700                       		beq.s	loc_12FC2
0001357A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001357E 6000                       		bra.s	loc_12FC2
00013580                            ; ===========================================================================
00013580                            
00013580                            Obj01_ResetScr:
00013580 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013586 6700                       		beq.s	loc_12FC2	; if yes, branch
00013588 6400                       		bcc.s	loc_12FBE
0001358A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001358E                            
0001358E                            loc_12FBE:
0001358E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013592                            
00013592                            loc_12FC2:
00013592 1038 F602                  		move.b	($FFFFF602).w,d0
00013596 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001359A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001359C 3028 0014                  		move.w	$14(a0),d0
000135A0 6700                       		beq.s	loc_12FEE
000135A2 6B00                       		bmi.s	loc_12FE2
000135A4 9045                       		sub.w	d5,d0
000135A6 6400                       		bcc.s	loc_12FDC
000135A8 303C 0000                  		move.w	#0,d0
000135AC                            
000135AC                            loc_12FDC:
000135AC 3140 0014                  		move.w	d0,$14(a0)
000135B0 6000                       		bra.s	loc_12FEE
000135B2                            ; ===========================================================================
000135B2                            
000135B2                            loc_12FE2:
000135B2 D045                       		add.w	d5,d0
000135B4 6400                       		bcc.s	loc_12FEA
000135B6 303C 0000                  		move.w	#0,d0
000135BA                            
000135BA                            loc_12FEA:
000135BA 3140 0014                  		move.w	d0,$14(a0)
000135BE                            
000135BE                            loc_12FEE:
000135BE 1028 0026                  		move.b	$26(a0),d0
000135C2 4EB9 0000 2C82             		jsr	(CalcSine).l
000135C8 C3E8 0014                  		muls.w	$14(a0),d1
000135CC E081                       		asr.l	#8,d1
000135CE 3141 0010                  		move.w	d1,$10(a0)
000135D2 C1E8 0014                  		muls.w	$14(a0),d0
000135D6 E080                       		asr.l	#8,d0
000135D8 3140 0012                  		move.w	d0,$12(a0)
000135DC                            
000135DC                            loc_1300C:
000135DC 1028 0026                  		move.b	$26(a0),d0
000135E0 0600 0040                  		addi.b	#$40,d0
000135E4 6B00                       		bmi.s	locret_1307C
000135E6 123C 0040                  		move.b	#$40,d1
000135EA 4A68 0014                  		tst.w	$14(a0)
000135EE 6700                       		beq.s	locret_1307C
000135F0 6B00                       		bmi.s	loc_13024
000135F2 4441                       		neg.w	d1
000135F4                            
000135F4                            loc_13024:
000135F4 1028 0026                  		move.b	$26(a0),d0
000135F8 D001                       		add.b	d1,d0
000135FA 3F00                       		move.w	d0,-(sp)
000135FC 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013600 301F                       		move.w	(sp)+,d0
00013602 4A41                       		tst.w	d1
00013604 6A00                       		bpl.s	locret_1307C
00013606 E141                       		asl.w	#8,d1
00013608 0600 0020                  		addi.b	#$20,d0
0001360C 0200 00C0                  		andi.b	#$C0,d0
00013610 6700                       		beq.s	loc_13078
00013612 0C00 0040                  		cmpi.b	#$40,d0
00013616 6700                       		beq.s	loc_13066
00013618 0C00 0080                  		cmpi.b	#$80,d0
0001361C 6700                       		beq.s	loc_13060
0001361E D368 0010                  		add.w	d1,$10(a0)
00013622 08E8 0005 0022             		bset	#5,$22(a0)
00013628 317C 0000 0014             		move.w	#0,$14(a0)
0001362E 4E75                       		rts	
00013630                            ; ===========================================================================
00013630                            
00013630                            loc_13060:
00013630 9368 0012                  		sub.w	d1,$12(a0)
00013634 4E75                       		rts	
00013636                            ; ===========================================================================
00013636                            
00013636                            loc_13066:
00013636 9368 0010                  		sub.w	d1,$10(a0)
0001363A 08E8 0005 0022             		bset	#5,$22(a0)
00013640 317C 0000 0014             		move.w	#0,$14(a0)
00013646 4E75                       		rts	
00013648                            ; ===========================================================================
00013648                            
00013648                            loc_13078:
00013648 D368 0012                  		add.w	d1,$12(a0)
0001364C                            
0001364C                            locret_1307C:
0001364C 4E75                       		rts	
0001364E                            ; End of function Sonic_Move
0001364E                            
0001364E                            
0001364E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001364E                            
0001364E                            
0001364E                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001364E 3028 0014                  		move.w	$14(a0),d0
00013652 6700                       		beq.s	loc_13086
00013654 6A00                       		bpl.s	loc_130B2
00013656                            
00013656                            loc_13086:
00013656 08E8 0000 0022             		bset	#0,$22(a0)
0001365C 6600                       		bne.s	loc_1309A
0001365E 08A8 0005 0022             		bclr	#5,$22(a0)
00013664 117C 0001 001D             		move.b	#1,$1D(a0)
0001366A                            
0001366A                            loc_1309A:
0001366A 9045                       		sub.w	d5,d0
0001366C 3206                       		move.w	d6,d1
0001366E 4441                       		neg.w	d1
00013670 B041                       		cmp.w	d1,d0
00013672 6E00                       		bgt.s	loc_130A6
00013674 3001                       		move.w	d1,d0
00013676                            
00013676                            loc_130A6:
00013676 3140 0014                  		move.w	d0,$14(a0)
0001367A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013680 4E75                       		rts	
00013682                            ; ===========================================================================
00013682                            
00013682                            loc_130B2:				; XREF: Sonic_MoveLeft
00013682 9044                       		sub.w	d4,d0
00013684 6400                       		bcc.s	loc_130BA
00013686 303C FF80                  		move.w	#-$80,d0
0001368A                            
0001368A                            loc_130BA:
0001368A 3140 0014                  		move.w	d0,$14(a0)
0001368E 1028 0026                  		move.b	$26(a0),d0
00013692 0600 0020                  		addi.b	#$20,d0
00013696 0200 00C0                  		andi.b	#$C0,d0
0001369A 6600                       		bne.s	locret_130E8
0001369C 0C40 0400                  		cmpi.w	#$400,d0
000136A0 6D00                       		blt.s	locret_130E8
000136A2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136A8 08A8 0000 0022             		bclr	#0,$22(a0)
000136AE 303C 00A4                  		move.w	#$A4,d0
000136B2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136B8                            
000136B8                            locret_130E8:
000136B8 4E75                       		rts	
000136BA                            ; End of function Sonic_MoveLeft
000136BA                            
000136BA                            
000136BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136BA                            
000136BA                            
000136BA                            Sonic_MoveRight:			; XREF: Sonic_Move
000136BA 3028 0014                  		move.w	$14(a0),d0
000136BE 6B00                       		bmi.s	loc_13118
000136C0 08A8 0000 0022             		bclr	#0,$22(a0)
000136C6 6700                       		beq.s	loc_13104
000136C8 08A8 0005 0022             		bclr	#5,$22(a0)
000136CE 117C 0001 001D             		move.b	#1,$1D(a0)
000136D4                            
000136D4                            loc_13104:
000136D4 D045                       		add.w	d5,d0
000136D6 B046                       		cmp.w	d6,d0
000136D8 6D00                       		blt.s	loc_1310C
000136DA 3006                       		move.w	d6,d0
000136DC                            
000136DC                            loc_1310C:
000136DC 3140 0014                  		move.w	d0,$14(a0)
000136E0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136E6 4E75                       		rts	
000136E8                            ; ===========================================================================
000136E8                            
000136E8                            loc_13118:				; XREF: Sonic_MoveRight
000136E8 D044                       		add.w	d4,d0
000136EA 6400                       		bcc.s	loc_13120
000136EC 303C 0080                  		move.w	#$80,d0
000136F0                            
000136F0                            loc_13120:
000136F0 3140 0014                  		move.w	d0,$14(a0)
000136F4 1028 0026                  		move.b	$26(a0),d0
000136F8 0600 0020                  		addi.b	#$20,d0
000136FC 0200 00C0                  		andi.b	#$C0,d0
00013700 6600                       		bne.s	locret_1314E
00013702 0C40 FC00                  		cmpi.w	#-$400,d0
00013706 6E00                       		bgt.s	locret_1314E
00013708 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001370E 08E8 0000 0022             		bset	#0,$22(a0)
00013714 303C 00A4                  		move.w	#$A4,d0
00013718 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
0001371E                            
0001371E                            locret_1314E:
0001371E 4E75                       		rts	
00013720                            ; End of function Sonic_MoveRight
00013720                            
00013720                            ; ---------------------------------------------------------------------------
00013720                            ; Subroutine to	change Sonic's speed as he rolls
00013720                            ; ---------------------------------------------------------------------------
00013720                            
00013720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013720                            
00013720                            
00013720                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013720 3C38 F760                  		move.w	($FFFFF760).w,d6
00013724 E346                       		asl.w	#1,d6
00013726 3A38 F762                  		move.w	($FFFFF762).w,d5
0001372A E245                       		asr.w	#1,d5
0001372C 3838 F764                  		move.w	($FFFFF764).w,d4
00013730 E444                       		asr.w	#2,d4
00013732 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013736 6600 0000                  		bne.w	loc_131CC
0001373A 4A68 003E                  		tst.w	$3E(a0)
0001373E 6600                       		bne.s	loc_13188
00013740 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013746 6700                       		beq.s	loc_1317C	; if not, branch
00013748 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001374E 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013750 6100 0000                  		bsr.w	Sonic_RollLeft
00013754                            
00013754                            loc_1317C:
00013754 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001375A 6700                       		beq.s	loc_13188	; if not, branch
0001375C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013762 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013764 6100 0000                  		bsr.w	Sonic_RollLeft
00013768 6000                       		bra.s	loc_13188
0001376A                            
0001376A                            SonicRS_RollRight:
0001376A 6100 0000                  		bsr.w	Sonic_RollRight
0001376E                            
0001376E                            loc_13188:
0001376E 3028 0014                  		move.w	$14(a0),d0
00013772 6700                       		beq.s	loc_131AA
00013774 6B00                       		bmi.s	loc_1319E
00013776 9045                       		sub.w	d5,d0
00013778 6400                       		bcc.s	loc_13198
0001377A 303C 0000                  		move.w	#0,d0
0001377E                            
0001377E                            loc_13198:
0001377E 3140 0014                  		move.w	d0,$14(a0)
00013782 6000                       		bra.s	loc_131AA
00013784                            ; ===========================================================================
00013784                            
00013784                            loc_1319E:				; XREF: Sonic_RollSpeed
00013784 D045                       		add.w	d5,d0
00013786 6400                       		bcc.s	loc_131A6
00013788 303C 0000                  		move.w	#0,d0
0001378C                            
0001378C                            loc_131A6:
0001378C 3140 0014                  		move.w	d0,$14(a0)
00013790                            
00013790                            loc_131AA:
00013790 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013794 6600                       		bne.s	loc_131CC	; if yes, branch
00013796 08A8 0002 0022             		bclr	#2,$22(a0)
0001379C 117C 0013 0016             		move.b	#$13,$16(a0)
000137A2 117C 0009 0017             		move.b	#9,$17(a0)
000137A8 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000137AE 5B68 000C                  		subq.w	#5,$C(a0)
000137B2                            
000137B2                            loc_131CC:
000137B2 1028 0026                  		move.b	$26(a0),d0
000137B6 4EB9 0000 2C82             		jsr	(CalcSine).l
000137BC C1E8 0014                  		muls.w	$14(a0),d0
000137C0 E080                       		asr.l	#8,d0
000137C2 3140 0012                  		move.w	d0,$12(a0)
000137C6 C3E8 0014                  		muls.w	$14(a0),d1
000137CA E081                       		asr.l	#8,d1
000137CC 0C41 1000                  		cmpi.w	#$1000,d1
000137D0 6F00                       		ble.s	loc_131F0
000137D2 323C 1000                  		move.w	#$1000,d1
000137D6                            
000137D6                            loc_131F0:
000137D6 0C41 F000                  		cmpi.w	#-$1000,d1
000137DA 6C00                       		bge.s	loc_131FA
000137DC 323C F000                  		move.w	#-$1000,d1
000137E0                            
000137E0                            loc_131FA:
000137E0 3141 0010                  		move.w	d1,$10(a0)
000137E4 6000 FDF6                  		bra.w	loc_1300C
000137E8                            ; End of function Sonic_RollSpeed
000137E8                            
000137E8                            
000137E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137E8                            
000137E8                            
000137E8                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000137E8 3028 0014                  		move.w	$14(a0),d0
000137EC 6700                       		beq.s	loc_1320A
000137EE 6A00                       		bpl.s	loc_13218
000137F0                            
000137F0                            loc_1320A:
000137F0 08E8 0000 0022             		bset	#0,$22(a0)
000137F6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137FC 4E75                       		rts	
000137FE                            ; ===========================================================================
000137FE                            
000137FE                            loc_13218:
000137FE 9044                       		sub.w	d4,d0
00013800 6400                       		bcc.s	loc_13220
00013802 303C FF80                  		move.w	#-$80,d0
00013806                            
00013806                            loc_13220:
00013806 3140 0014                  		move.w	d0,$14(a0)
0001380A 4E75                       		rts	
0001380C                            ; End of function Sonic_RollLeft
0001380C                            
0001380C                            
0001380C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001380C                            
0001380C                            
0001380C                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001380C 3028 0014                  		move.w	$14(a0),d0
00013810 6B00                       		bmi.s	loc_1323A
00013812 08A8 0000 0022             		bclr	#0,$22(a0)
00013818 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001381E 4E75                       		rts	
00013820                            ; ===========================================================================
00013820                            
00013820                            loc_1323A:
00013820 D044                       		add.w	d4,d0
00013822 6400                       		bcc.s	loc_13242
00013824 303C 0080                  		move.w	#$80,d0
00013828                            
00013828                            loc_13242:
00013828 3140 0014                  		move.w	d0,$14(a0)
0001382C 4E75                       		rts	
0001382E                            ; End of function Sonic_RollRight
0001382E                            
0001382E                            ; ---------------------------------------------------------------------------
0001382E                            ; Subroutine to	change Sonic's direction while jumping
0001382E                            ; ---------------------------------------------------------------------------
0001382E                            
0001382E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001382E                            
0001382E                            
0001382E                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001382E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013832 3A38 F762                  		move.w	($FFFFF762).w,d5
00013836 E345                       		asl.w	#1,d5
00013838 0828 0004 0022             		btst	#4,$22(a0)
0001383E 6600                       		bne.s	Obj01_ResetScr2
00013840 3028 0010                  		move.w	$10(a0),d0
00013844 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001384A 6700                       		beq.s	loc_13278	; if not, branch
0001384C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013852 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013854 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013858 6E00                       		bgt.s	loc_13278
0001385A 3001                       		move.w	d1,d0
0001385C                            
0001385C                            loc_13278:
0001385C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013862 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013864 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001386A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001386C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013870 6E00                       		bgt.s	Obj01_JumpMove
00013872 3001                       		move.w	d1,d0
00013874 6000                       		bra.s	Obj01_JumpMove
00013876                            
00013876                            SonicCJD_JumpLeft:
00013876 08E8 0000 0022             		bset	#0,$22(a0)
0001387C 9045                       		sub.w	d5,d0
0001387E 3206                       		move.w	d6,d1
00013880 4441                       		neg.w	d1
00013882 B041                       		cmp.w	d1,d0
00013884                            		; bgt.s	loc_13278
00013884                            		; move.w	d1,d0
00013884 4E75                       		rts
00013886                            
00013886                            SonicCJD_JumpRight:
00013886 08A8 0000 0022             		bclr	#0,$22(a0)
0001388C D045                       		add.w	d5,d0
0001388E B046                       		cmp.w	d6,d0
00013890 6D00                       		blt.s	Obj01_JumpMove
00013892 3006                       		move.w	d6,d0
00013894                            
00013894                            Obj01_JumpMove:
00013894 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013898                            
00013898                            Obj01_ResetScr2:
00013898 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001389E 6700                       		beq.s	loc_132A4	; if yes, branch
000138A0 6400                       		bcc.s	loc_132A0
000138A2 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000138A6                            
000138A6                            loc_132A0:
000138A6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000138AA                            
000138AA                            loc_132A4:
000138AA 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000138B0 6500                       		bcs.s	locret_132D2	; if yes, branch
000138B2 3028 0010                  		move.w	$10(a0),d0
000138B6 3200                       		move.w	d0,d1
000138B8 EA41                       		asr.w	#5,d1
000138BA 6700                       		beq.s	locret_132D2
000138BC 6B00                       		bmi.s	loc_132C6
000138BE 9041                       		sub.w	d1,d0
000138C0 6400                       		bcc.s	loc_132C0
000138C2 303C 0000                  		move.w	#0,d0
000138C6                            
000138C6                            loc_132C0:
000138C6 3140 0010                  		move.w	d0,$10(a0)
000138CA 4E75                       		rts	
000138CC                            ; ===========================================================================
000138CC                            
000138CC                            loc_132C6:
000138CC 9041                       		sub.w	d1,d0
000138CE 6500                       		bcs.s	loc_132CE
000138D0 303C 0000                  		move.w	#0,d0
000138D4                            
000138D4                            loc_132CE:
000138D4 3140 0010                  		move.w	d0,$10(a0)
000138D8                            
000138D8                            locret_132D2:
000138D8 4E75                       		rts	
000138DA                            ; End of function Sonic_ChgJumpDir
000138DA                            
000138DA                            ; ===========================================================================
000138DA                            ; ---------------------------------------------------------------------------
000138DA                            ; Unused subroutine to squash Sonic
000138DA                            ; ---------------------------------------------------------------------------
000138DA 1028 0026                  		move.b	$26(a0),d0
000138DE 0600 0020                  		addi.b	#$20,d0
000138E2 0200 00C0                  		andi.b	#$C0,d0
000138E6 6600                       		bne.s	locret_13302
000138E8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138EC 4A41                       		tst.w	d1
000138EE 6A00                       		bpl.s	locret_13302
000138F0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138F6 317C 0000 0010             		move.w	#0,$10(a0)
000138FC 317C 0000 0012             		move.w	#0,$12(a0)
00013902 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013908                            
00013908                            locret_13302:
00013908 4E75                       		rts	
0001390A                            ; ---------------------------------------------------------------------------
0001390A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001390A                            ; ---------------------------------------------------------------------------
0001390A                            
0001390A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001390A                            
0001390A                            
0001390A                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001390A 2228 0008                  		move.l	8(a0),d1
0001390E 3028 0010                  		move.w	$10(a0),d0
00013912 48C0                       		ext.l	d0
00013914 E180                       		asl.l	#8,d0
00013916 D280                       		add.l	d0,d1
00013918 4841                       		swap	d1
0001391A 3038 F728                  		move.w	($FFFFF728).w,d0
0001391E 0640 0010                  		addi.w	#$10,d0
00013922 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013924 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013926 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001392A 0640 0128                  		addi.w	#$128,d0
0001392E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013932 6600                       		bne.s	loc_13332
00013934 0640 0040                  		addi.w	#$40,d0
00013938                            
00013938                            loc_13332:
00013938 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001393A 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001393C                            
0001393C                            loc_13336:
0001393C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013940 0640 00E0                  		addi.w	#$E0,d0
00013944 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013948 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001394A 4E75                       		rts	
0001394C                            ; ===========================================================================
0001394C                            
0001394C                            Boundary_Bottom:
0001394C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013952 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013956 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001395C 6500 0000                  		bcs.w	KillSonic
00013960 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013964 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001396A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013970 4E75                       		rts	
00013972                            ; ===========================================================================
00013972                            
00013972                            Boundary_Sides:
00013972 3140 0008                  		move.w	d0,8(a0)
00013976 317C 0000 000A             		move.w	#0,$A(a0)
0001397C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013982 317C 0000 0014             		move.w	#0,$14(a0)
00013988 60B2                       		bra.s	loc_13336
0001398A                            ; End of function Sonic_LevelBound
0001398A                            
0001398A                            ; ---------------------------------------------------------------------------
0001398A                            ; Subroutine allowing Sonic to roll when he's moving
0001398A                            ; ---------------------------------------------------------------------------
0001398A                            
0001398A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001398A                            
0001398A                            
0001398A                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001398A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001398E 6600                       		bne.s	Obj01_NoRoll
00013990 3028 0014                  		move.w	$14(a0),d0
00013994 6A00                       		bpl.s	loc_13392
00013996 4440                       		neg.w	d0
00013998                            
00013998                            loc_13392:
00013998 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001399C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001399E 1038 F602                  		move.b	($FFFFF602).w,d0
000139A2 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000139A6 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000139A8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139AE 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000139B0                            
000139B0                            Obj01_NoRoll:
000139B0 4E75                       		rts	
000139B2                            ; ===========================================================================
000139B2                            
000139B2                            Obj01_ChkRoll:
000139B2 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000139B8 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000139BA 4E75                       		rts	
000139BC                            ; ===========================================================================
000139BC                            
000139BC                            Obj01_DoRoll:
000139BC 08E8 0002 0022             		bset	#2,$22(a0)
000139C2 117C 000E 0016             		move.b	#$E,$16(a0)
000139C8 117C 0007 0017             		move.b	#7,$17(a0)
000139CE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139D4 5A68 000C                  		addq.w	#5,$C(a0)
000139D8 303C 00BE                  		move.w	#$BE,d0
000139DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
000139E2 4A68 0014                  		tst.w	$14(a0)
000139E6 6600                       		bne.s	locret_133E8
000139E8 317C 0200 0014             		move.w	#$200,$14(a0)
000139EE                            
000139EE                            locret_133E8:
000139EE 4E75                       		rts	
000139F0                            ; End of function Sonic_Roll
000139F0                            
000139F0                            ; ---------------------------------------------------------------------------
000139F0                            ; Subroutine allowing Sonic to jump
000139F0                            ; ---------------------------------------------------------------------------
000139F0                            
000139F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139F0                            
000139F0                            
000139F0                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139F0 1038 F603                  		move.b	($FFFFF603).w,d0
000139F4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139F8 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139FC 7000                       		moveq	#0,d0
000139FE 1028 0026                  		move.b	$26(a0),d0
00013A02 0600 0080                  		addi.b	#$80,d0
00013A06 6100 0000                  		bsr.w	sub_14D48
00013A0A 0C41 0006                  		cmpi.w	#6,d1
00013A0E 6D00 0000                  		blt.w	locret_1348E
00013A12 343C 0680                  		move.w	#$680,d2
00013A16 0828 0006 0022             		btst	#6,$22(a0)
00013A1C 6700                       		beq.s	loc_1341C
00013A1E 343C 0380                  		move.w	#$380,d2
00013A22                            
00013A22                            loc_1341C:
00013A22 7000                       		moveq	#0,d0
00013A24 1028 0026                  		move.b	$26(a0),d0
00013A28 0400 0040                  		subi.b	#$40,d0
00013A2C 4EB9 0000 2C82             		jsr	(CalcSine).l
00013A32 C3C2                       		muls.w	d2,d1
00013A34 E081                       		asr.l	#8,d1
00013A36 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013A3A C1C2                       		muls.w	d2,d0
00013A3C E080                       		asr.l	#8,d0
00013A3E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A42 08E8 0001 0022             		bset	#1,$22(a0)
00013A48 08A8 0005 0022             		bclr	#5,$22(a0)
00013A4E 588F                       		addq.l	#4,sp
00013A50 117C 0001 003C             		move.b	#1,$3C(a0)
00013A56 4228 0038                  		clr.b	$38(a0)
00013A5A 303C 00A0                  		move.w	#$A0,d0
00013A5E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A64 117C 0013 0016             		move.b	#$13,$16(a0)
00013A6A 117C 0009 0017             		move.b	#9,$17(a0)
00013A70 0828 0002 0022             		btst	#2,$22(a0)
00013A76 6600                       		bne.s	loc_13490
00013A78 117C 000E 0016             		move.b	#$E,$16(a0)
00013A7E 117C 0007 0017             		move.b	#7,$17(a0)
00013A84 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A8A 08E8 0002 0022             		bset	#2,$22(a0)
00013A90 5A68 000C                  		addq.w	#5,$C(a0)
00013A94                            
00013A94                            locret_1348E:
00013A94 4E75                       		rts	
00013A96                            ; ===========================================================================
00013A96                            
00013A96                            loc_13490:
00013A96 08E8 0004 0022             		bset	#4,$22(a0)
00013A9C 4E75                       		rts	
00013A9E                            ; End of function Sonic_Jump
00013A9E                            
00013A9E                            
00013A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A9E                            
00013A9E                            
00013A9E                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A9E 4A28 003C                  		tst.b	$3C(a0)
00013AA2 6700                       		beq.s	loc_134C4
00013AA4 323C FC00                  		move.w	#-$400,d1
00013AA8 0828 0006 0022             		btst	#6,$22(a0)
00013AAE 6700                       		beq.s	loc_134AE
00013AB0 323C FE00                  		move.w	#-$200,d1
00013AB4                            
00013AB4                            loc_134AE:
00013AB4 B268 0012                  		cmp.w	$12(a0),d1
00013AB8 6F00                       		ble.s	locret_134C2
00013ABA 1038 F602                  		move.b	($FFFFF602).w,d0
00013ABE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013AC2 6600                       		bne.s	locret_134C2	; if yes, branch
00013AC4 3141 0012                  		move.w	d1,$12(a0)
00013AC8                            
00013AC8                            locret_134C2:
00013AC8 4E75                       		rts	
00013ACA                            ; ===========================================================================
00013ACA                            
00013ACA                            loc_134C4:
00013ACA 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013AD0 6C00                       		bge.s	locret_134D2
00013AD2 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013AD8                            
00013AD8                            locret_134D2:
00013AD8 4E75                       		rts	
00013ADA                            ; End of function Sonic_JumpHeight
00013ADA                            
00013ADA                            ; ---------------------------------------------------------------------------
00013ADA                            ; Subroutine to	slow Sonic walking up a	slope
00013ADA                            ; ---------------------------------------------------------------------------
00013ADA                            
00013ADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ADA                            
00013ADA                            
00013ADA                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013ADA 1028 0026                  		move.b	$26(a0),d0
00013ADE 0600 0060                  		addi.b	#$60,d0
00013AE2 0C00 00C0                  		cmpi.b	#$C0,d0
00013AE6 6400                       		bcc.s	locret_13508
00013AE8 1028 0026                  		move.b	$26(a0),d0
00013AEC 4EB9 0000 2C82             		jsr	(CalcSine).l
00013AF2 C1FC 0020                  		muls.w	#$20,d0
00013AF6 E080                       		asr.l	#8,d0
00013AF8 4A68 0014                  		tst.w	$14(a0)
00013AFC 6700                       		beq.s	locret_13508
00013AFE 6B00                       		bmi.s	loc_13504
00013B00 4A40                       		tst.w	d0
00013B02 6700                       		beq.s	locret_13502
00013B04 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013B08                            
00013B08                            locret_13502:
00013B08 4E75                       		rts	
00013B0A                            ; ===========================================================================
00013B0A                            
00013B0A                            loc_13504:
00013B0A D168 0014                  		add.w	d0,$14(a0)
00013B0E                            
00013B0E                            locret_13508:
00013B0E 4E75                       		rts	
00013B10                            ; End of function Sonic_SlopeResist
00013B10                            
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013B10                            ; ---------------------------------------------------------------------------
00013B10                            
00013B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B10                            
00013B10                            
00013B10                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013B10 1028 0026                  		move.b	$26(a0),d0
00013B14 0600 0060                  		addi.b	#$60,d0
00013B18 0C00 00C0                  		cmpi.b	#-$40,d0
00013B1C 6400                       		bcc.s	locret_13544
00013B1E 1028 0026                  		move.b	$26(a0),d0
00013B22 4EB9 0000 2C82             		jsr	(CalcSine).l
00013B28 C1FC 0050                  		muls.w	#$50,d0
00013B2C E080                       		asr.l	#8,d0
00013B2E 4A68 0014                  		tst.w	$14(a0)
00013B32 6B00                       		bmi.s	loc_1353A
00013B34 4A40                       		tst.w	d0
00013B36 6A00                       		bpl.s	loc_13534
00013B38 E480                       		asr.l	#2,d0
00013B3A                            
00013B3A                            loc_13534:
00013B3A D168 0014                  		add.w	d0,$14(a0)
00013B3E 4E75                       		rts	
00013B40                            ; ===========================================================================
00013B40                            
00013B40                            loc_1353A:
00013B40 4A40                       		tst.w	d0
00013B42 6B00                       		bmi.s	loc_13540
00013B44 E480                       		asr.l	#2,d0
00013B46                            
00013B46                            loc_13540:
00013B46 D168 0014                  		add.w	d0,$14(a0)
00013B4A                            
00013B4A                            locret_13544:
00013B4A 4E75                       		rts	
00013B4C                            ; End of function Sonic_RollRepel
00013B4C                            
00013B4C                            ; ---------------------------------------------------------------------------
00013B4C                            ; Subroutine to	push Sonic down	a slope
00013B4C                            ; ---------------------------------------------------------------------------
00013B4C                            
00013B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B4C                            
00013B4C                            
00013B4C                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B4C 4E71                       		nop	
00013B4E 4A28 0038                  		tst.b	$38(a0)
00013B52 6600                       		bne.s	locret_13580
00013B54 4A68 003E                  		tst.w	$3E(a0)
00013B58 6600                       		bne.s	loc_13582
00013B5A 1028 0026                  		move.b	$26(a0),d0
00013B5E 0600 0020                  		addi.b	#$20,d0
00013B62 0200 00C0                  		andi.b	#$C0,d0
00013B66 6700                       		beq.s	locret_13580
00013B68 3028 0014                  		move.w	$14(a0),d0
00013B6C 6A00                       		bpl.s	loc_1356A
00013B6E 4440                       		neg.w	d0
00013B70                            
00013B70                            loc_1356A:
00013B70 0C40 0280                  		cmpi.w	#$280,d0
00013B74 6400                       		bcc.s	locret_13580
00013B76 4268 0014                  		clr.w	$14(a0)
00013B7A 08E8 0001 0022             		bset	#1,$22(a0)
00013B80 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B86                            
00013B86                            locret_13580:
00013B86 4E75                       		rts	
00013B88                            ; ===========================================================================
00013B88                            
00013B88                            loc_13582:
00013B88 5368 003E                  		subq.w	#1,$3E(a0)
00013B8C 4E75                       		rts	
00013B8E                            ; End of function Sonic_SlopeRepel
00013B8E                            
00013B8E                            ; ---------------------------------------------------------------------------
00013B8E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B8E                            ; ---------------------------------------------------------------------------
00013B8E                            
00013B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B8E                            
00013B8E                            
00013B8E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B8E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B92 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B94 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B96                            
00013B96 5400                       		addq.b	#2,d0		; increase angle
00013B98 6400                       		bcc.s	loc_13596
00013B9A 7000                       		moveq	#0,d0
00013B9C                            
00013B9C                            loc_13596:
00013B9C 6000                       		bra.s	loc_1359E
00013B9E                            ; ===========================================================================
00013B9E                            
00013B9E                            loc_13598:
00013B9E 5500                       		subq.b	#2,d0		; decrease angle
00013BA0 6400                       		bcc.s	loc_1359E
00013BA2 7000                       		moveq	#0,d0
00013BA4                            
00013BA4                            loc_1359E:
00013BA4 1140 0026                  		move.b	d0,$26(a0)
00013BA8                            
00013BA8                            locret_135A2:
00013BA8 4E75                       		rts	
00013BAA                            ; End of function Sonic_JumpAngle
00013BAA                            
00013BAA                            ; ---------------------------------------------------------------------------
00013BAA                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013BAA                            ; ---------------------------------------------------------------------------
00013BAA                            
00013BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BAA                            
00013BAA                            
00013BAA                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013BAA 3228 0010                  		move.w	$10(a0),d1
00013BAE 3428 0012                  		move.w	$12(a0),d2
00013BB2 4EB9 0000 2F50             		jsr	(CalcAngle).l
00013BB8 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013BBC 0400 0020                  		subi.b	#$20,d0
00013BC0 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013BC4 0200 00C0                  		andi.b	#$C0,d0
00013BC8 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013BCC 0C00 0040                  		cmpi.b	#$40,d0
00013BD0 6700 0000                  		beq.w	loc_13680
00013BD4 0C00 0080                  		cmpi.b	#$80,d0
00013BD8 6700 0000                  		beq.w	loc_136E2
00013BDC 0C00 00C0                  		cmpi.b	#-$40,d0
00013BE0 6700 0000                  		beq.w	loc_1373E
00013BE4 6100 0000                  		bsr.w	Sonic_HitWall
00013BE8 4A41                       		tst.w	d1
00013BEA 6A00                       		bpl.s	loc_135F0
00013BEC 9368 0008                  		sub.w	d1,8(a0)
00013BF0 317C 0000 0010             		move.w	#0,$10(a0)
00013BF6                            
00013BF6                            loc_135F0:
00013BF6 6100 0000                  		bsr.w	sub_14EB4
00013BFA 4A41                       		tst.w	d1
00013BFC 6A00                       		bpl.s	loc_13602
00013BFE D368 0008                  		add.w	d1,8(a0)
00013C02 317C 0000 0010             		move.w	#0,$10(a0)
00013C08                            
00013C08                            loc_13602:
00013C08 6100 0000                  		bsr.w	Sonic_HitFloor
00013C0C 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013C10 4A41                       		tst.w	d1
00013C12 6A00                       		bpl.s	locret_1367E
00013C14 1428 0012                  		move.b	$12(a0),d2
00013C18 5002                       		addq.b	#8,d2
00013C1A 4402                       		neg.b	d2
00013C1C B202                       		cmp.b	d2,d1
00013C1E 6C00                       		bge.s	loc_1361E
00013C20 B002                       		cmp.b	d2,d0
00013C22 6D00                       		blt.s	locret_1367E
00013C24                            
00013C24                            loc_1361E:
00013C24 D368 000C                  		add.w	d1,$C(a0)
00013C28 1143 0026                  		move.b	d3,$26(a0)
00013C2C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C30 117C 0000 001C             		move.b	#0,$1C(a0)
00013C36 1003                       		move.b	d3,d0
00013C38 0600 0020                  		addi.b	#$20,d0
00013C3C 0200 0040                  		andi.b	#$40,d0
00013C40 6600                       		bne.s	loc_1365C
00013C42 1003                       		move.b	d3,d0
00013C44 0600 0010                  		addi.b	#$10,d0
00013C48 0200 0020                  		andi.b	#$20,d0
00013C4C 6700                       		beq.s	loc_1364E
00013C4E E0E8 0012                  		asr	$12(a0)
00013C52 6000                       		bra.s	loc_13670
00013C54                            ; ===========================================================================
00013C54                            
00013C54                            loc_1364E:
00013C54 317C 0000 0012             		move.w	#0,$12(a0)
00013C5A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C60 4E75                       		rts	
00013C62                            ; ===========================================================================
00013C62                            
00013C62                            loc_1365C:
00013C62 317C 0000 0010             		move.w	#0,$10(a0)
00013C68 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C6E 6F00                       		ble.s	loc_13670
00013C70 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C76                            
00013C76                            loc_13670:
00013C76 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C7C 4A03                       		tst.b	d3
00013C7E 6A00                       		bpl.s	locret_1367E
00013C80 4468 0014                  		neg.w	$14(a0)
00013C84                            
00013C84                            locret_1367E:
00013C84 4E75                       		rts	
00013C86                            ; ===========================================================================
00013C86                            
00013C86                            loc_13680:
00013C86 6100 0000                  		bsr.w	Sonic_HitWall
00013C8A 4A41                       		tst.w	d1
00013C8C 6A00                       		bpl.s	loc_1369A
00013C8E 9368 0008                  		sub.w	d1,8(a0)
00013C92 317C 0000 0010             		move.w	#0,$10(a0)
00013C98 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C9E 4E75                       		rts	
00013CA0                            ; ===========================================================================
00013CA0                            
00013CA0                            loc_1369A:
00013CA0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CA4 4A41                       		tst.w	d1
00013CA6 6A00                       		bpl.s	loc_136B4
00013CA8 9368 000C                  		sub.w	d1,$C(a0)
00013CAC 4A68 0012                  		tst.w	$12(a0)
00013CB0 6A00                       		bpl.s	locret_136B2
00013CB2 317C 0000 0012             		move.w	#0,$12(a0)
00013CB8                            
00013CB8                            locret_136B2:
00013CB8 4E75                       		rts	
00013CBA                            ; ===========================================================================
00013CBA                            
00013CBA                            loc_136B4:
00013CBA 4A68 0012                  		tst.w	$12(a0)
00013CBE 6B00                       		bmi.s	locret_136E0
00013CC0 6100 0000                  		bsr.w	Sonic_HitFloor
00013CC4 4A41                       		tst.w	d1
00013CC6 6A00                       		bpl.s	locret_136E0
00013CC8 D368 000C                  		add.w	d1,$C(a0)
00013CCC 1143 0026                  		move.b	d3,$26(a0)
00013CD0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CD4 117C 0000 001C             		move.b	#0,$1C(a0)
00013CDA 317C 0000 0012             		move.w	#0,$12(a0)
00013CE0 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CE6                            
00013CE6                            locret_136E0:
00013CE6 4E75                       		rts	
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            loc_136E2:
00013CE8 6100 0000                  		bsr.w	Sonic_HitWall
00013CEC 4A41                       		tst.w	d1
00013CEE 6A00                       		bpl.s	loc_136F4
00013CF0 9368 0008                  		sub.w	d1,8(a0)
00013CF4 317C 0000 0010             		move.w	#0,$10(a0)
00013CFA                            
00013CFA                            loc_136F4:
00013CFA 6100 0000                  		bsr.w	sub_14EB4
00013CFE 4A41                       		tst.w	d1
00013D00 6A00                       		bpl.s	loc_13706
00013D02 D368 0008                  		add.w	d1,8(a0)
00013D06 317C 0000 0010             		move.w	#0,$10(a0)
00013D0C                            
00013D0C                            loc_13706:
00013D0C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D10 4A41                       		tst.w	d1
00013D12 6A00                       		bpl.s	locret_1373C
00013D14 9368 000C                  		sub.w	d1,$C(a0)
00013D18 1003                       		move.b	d3,d0
00013D1A 0600 0020                  		addi.b	#$20,d0
00013D1E 0200 0040                  		andi.b	#$40,d0
00013D22 6600                       		bne.s	loc_13726
00013D24 317C 0000 0012             		move.w	#0,$12(a0)
00013D2A 4E75                       		rts	
00013D2C                            ; ===========================================================================
00013D2C                            
00013D2C                            loc_13726:
00013D2C 1143 0026                  		move.b	d3,$26(a0)
00013D30 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D34 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D3A 4A03                       		tst.b	d3
00013D3C 6A00                       		bpl.s	locret_1373C
00013D3E 4468 0014                  		neg.w	$14(a0)
00013D42                            
00013D42                            locret_1373C:
00013D42 4E75                       		rts	
00013D44                            ; ===========================================================================
00013D44                            
00013D44                            loc_1373E:
00013D44 6100 0000                  		bsr.w	sub_14EB4
00013D48 4A41                       		tst.w	d1
00013D4A 6A00                       		bpl.s	loc_13758
00013D4C D368 0008                  		add.w	d1,8(a0)
00013D50 317C 0000 0010             		move.w	#0,$10(a0)
00013D56 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D5C 4E75                       		rts	
00013D5E                            ; ===========================================================================
00013D5E                            
00013D5E                            loc_13758:
00013D5E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D62 4A41                       		tst.w	d1
00013D64 6A00                       		bpl.s	loc_13772
00013D66 9368 000C                  		sub.w	d1,$C(a0)
00013D6A 4A68 0012                  		tst.w	$12(a0)
00013D6E 6A00                       		bpl.s	locret_13770
00013D70 317C 0000 0012             		move.w	#0,$12(a0)
00013D76                            
00013D76                            locret_13770:
00013D76 4E75                       		rts	
00013D78                            ; ===========================================================================
00013D78                            
00013D78                            loc_13772:
00013D78 4A68 0012                  		tst.w	$12(a0)
00013D7C 6B00                       		bmi.s	locret_1379E
00013D7E 6100 0000                  		bsr.w	Sonic_HitFloor
00013D82 4A41                       		tst.w	d1
00013D84 6A00                       		bpl.s	locret_1379E
00013D86 D368 000C                  		add.w	d1,$C(a0)
00013D8A 1143 0026                  		move.b	d3,$26(a0)
00013D8E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D92 117C 0000 001C             		move.b	#0,$1C(a0)
00013D98 317C 0000 0012             		move.w	#0,$12(a0)
00013D9E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013DA4                            
00013DA4                            locret_1379E:
00013DA4 4E75                       		rts	
00013DA6                            ; End of function Sonic_Floor
00013DA6                            
00013DA6                            ; ---------------------------------------------------------------------------
00013DA6                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013DA6                            ; ---------------------------------------------------------------------------
00013DA6                            
00013DA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA6                            
00013DA6                            
00013DA6                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013DA6 0828 0004 0022             		btst	#4,$22(a0)
00013DAC 6700                       		beq.s	loc_137AE
00013DAE 4E71                       		nop	
00013DB0 4E71                       		nop	
00013DB2 4E71                       		nop	
00013DB4                            
00013DB4                            loc_137AE:
00013DB4 08A8 0005 0022             		bclr	#5,$22(a0)
00013DBA 08A8 0001 0022             		bclr	#1,$22(a0)
00013DC0 08A8 0004 0022             		bclr	#4,$22(a0)
00013DC6 0828 0002 0022             		btst	#2,$22(a0)
00013DCC 6700                       		beq.s	loc_137E4
00013DCE 08A8 0002 0022             		bclr	#2,$22(a0)
00013DD4 117C 0013 0016             		move.b	#$13,$16(a0)
00013DDA 117C 0009 0017             		move.b	#9,$17(a0)
00013DE0 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DE6 5B68 000C                  		subq.w	#5,$C(a0)
00013DEA                            
00013DEA                            loc_137E4:
00013DEA 117C 0000 003C             		move.b	#0,$3C(a0)
00013DF0 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DF6 4E75                       		rts	
00013DF8                            ; End of function Sonic_ResetOnFloor
00013DF8                            
00013DF8                            ; ===========================================================================
00013DF8                            ; ---------------------------------------------------------------------------
00013DF8                            ; Sonic	when he	gets hurt
00013DF8                            ; ---------------------------------------------------------------------------
00013DF8                            
00013DF8                            Obj01_Hurt:				; XREF: Obj01_Index
00013DF8 4EBA 9DAC                  		jsr	SpeedToPos
00013DFC 0668 0030 0012             		addi.w	#$30,$12(a0)
00013E02 0828 0006 0022             		btst	#6,$22(a0)
00013E08 6700                       		beq.s	loc_1380C
00013E0A 0468 0020 0012             		subi.w	#$20,$12(a0)
00013E10                            
00013E10                            loc_1380C:
00013E10 6100 0000                  		bsr.w	Sonic_HurtStop
00013E14 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013E18 6100 F506                  		bsr.w	Sonic_RecordPos
00013E1C 6100 0000                  		bsr.w	Sonic_Animate
00013E20 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E24 4EFA 9DA6                  		jmp	DisplaySprite
00013E28                            
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            ; Subroutine to	stop Sonic falling after he's been hurt
00013E28                            ; ---------------------------------------------------------------------------
00013E28                            
00013E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E28                            
00013E28                            
00013E28                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013E28 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E2C 0640 00E0                  		addi.w	#$E0,d0
00013E30 B068 000C                  		cmp.w	$C(a0),d0
00013E34 6500 0000                  		bcs.w	KillSonic
00013E38 6100 FD70                  		bsr.w	Sonic_Floor
00013E3C 0828 0001 0022             		btst	#1,$22(a0)
00013E42 6600                       		bne.s	locret_13860
00013E44 7000                       		moveq	#0,d0
00013E46 3140 0012                  		move.w	d0,$12(a0)
00013E4A 3140 0010                  		move.w	d0,$10(a0)
00013E4E 3140 0014                  		move.w	d0,$14(a0)
00013E52 117C 0000 001C             		move.b	#0,$1C(a0)
00013E58 5528 0024                  		subq.b	#2,$24(a0)
00013E5C 317C 0078 0030             		move.w	#$78,$30(a0)
00013E62                            
00013E62                            locret_13860:
00013E62 4E75                       		rts	
00013E64                            ; End of function Sonic_HurtStop
00013E64                            
00013E64                            ; ===========================================================================
00013E64                            ; ---------------------------------------------------------------------------
00013E64                            ; Sonic	when he	dies
00013E64                            ; ---------------------------------------------------------------------------
00013E64                            
00013E64                            Obj01_Death:				; XREF: Obj01_Index
00013E64 6100 0000                  		bsr.w	GameOver
00013E68 4EBA 9D10                  		jsr	ObjectFall
00013E6C 6100 F4B2                  		bsr.w	Sonic_RecordPos
00013E70 6100 0000                  		bsr.w	Sonic_Animate
00013E74 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E78 4EFA 9D52                  		jmp	DisplaySprite
00013E7C                            
00013E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E7C                            
00013E7C                            
00013E7C                            GameOver:				; XREF: Obj01_Death
00013E7C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E80 0640 0100                  		addi.w	#$100,d0
00013E84 B068 000C                  		cmp.w	$C(a0),d0
00013E88 6400 0000                  		bcc.w	locret_13900
00013E8C 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E92 5428 0024                  		addq.b	#2,$24(a0)
00013E96 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E9A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E9E 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013EA2 6600                       		bne.s	loc_138D4
00013EA4 317C 0000 003A             		move.w	#0,$3A(a0)
00013EAA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013EB0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EB6 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013EBC 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013EC0                            
00013EC0                            loc_138C2:
00013EC0 303C 008F                  		move.w	#$8F,d0
00013EC4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013ECA 7003                       		moveq	#3,d0
00013ECC 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013ED2                            ; ===========================================================================
00013ED2                            
00013ED2                            loc_138D4:
00013ED2 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013ED8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013EDC 6700                       		beq.s	locret_13900	; if not, branch
00013EDE 317C 0000 003A             		move.w	#0,$3A(a0)
00013EE4 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013EEA 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EF0 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013EF6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013EFC 60C2                       		bra.s	loc_138C2
00013EFE                            ; ===========================================================================
00013EFE                            
00013EFE                            locret_13900:
00013EFE 4E75                       		rts	
00013F00                            ; End of function GameOver
00013F00                            
00013F00                            ; ===========================================================================
00013F00                            ; ---------------------------------------------------------------------------
00013F00                            ; Sonic	when the level is restarted
00013F00                            ; ---------------------------------------------------------------------------
00013F00                            
00013F00                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013F00 4A68 003A                  		tst.w	$3A(a0)
00013F04 6700                       		beq.s	locret_13914
00013F06 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013F0A 6600                       		bne.s	locret_13914
00013F0C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013F12                            
00013F12                            locret_13914:
00013F12 4E75                       		rts	
00013F14                            
00013F14                            ; ---------------------------------------------------------------------------
00013F14                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013F14                            ; ---------------------------------------------------------------------------
00013F14                            
00013F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F14                            
00013F14                            
00013F14                            Sonic_Loops:				; XREF: Obj01_Control
00013F14 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013F1A 6700                       		beq.s	loc_13926	; if yes, branch
00013F1C 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013F20 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013F24                            
00013F24                            loc_13926:
00013F24 3028 000C                  		move.w	$C(a0),d0
00013F28 E248                       		lsr.w	#1,d0
00013F2A 0240 0380                  		andi.w	#$380,d0
00013F2E 1228 0008                  		move.b	8(a0),d1
00013F32 0241 007F                  		andi.w	#$7F,d1
00013F36 D041                       		add.w	d1,d0
00013F38 43F8 A400                  		lea	($FFFFA400).w,a1
00013F3C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F40 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F44 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013F48 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F4C 6700 FA64                  		beq.w	Obj01_ChkRoll
00013F50 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F54 6700                       		beq.s	loc_13976
00013F56 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F5A 6700                       		beq.s	loc_13966
00013F5C 08A8 0006 0001             		bclr	#6,1(a0)
00013F62 4E75                       		rts	
00013F64                            ; ===========================================================================
00013F64                            
00013F64                            loc_13966:
00013F64 0828 0001 0022             		btst	#1,$22(a0)
00013F6A 6700                       		beq.s	loc_13976
00013F6C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F72 4E75                       		rts	
00013F74                            ; ===========================================================================
00013F74                            
00013F74                            loc_13976:
00013F74 3428 0008                  		move.w	8(a0),d2
00013F78 0C02 002C                  		cmpi.b	#$2C,d2
00013F7C 6400                       		bcc.s	loc_13988
00013F7E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F84 4E75                       		rts	
00013F86                            ; ===========================================================================
00013F86                            
00013F86                            loc_13988:
00013F86 0C02 00E0                  		cmpi.b	#-$20,d2
00013F8A 6500                       		bcs.s	loc_13996
00013F8C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F92 4E75                       		rts	
00013F94                            ; ===========================================================================
00013F94                            
00013F94                            loc_13996:
00013F94 0828 0006 0001             		btst	#6,1(a0)
00013F9A 6600                       		bne.s	loc_139B2
00013F9C 1228 0026                  		move.b	$26(a0),d1
00013FA0 6700                       		beq.s	locret_139C2
00013FA2 0C01 0080                  		cmpi.b	#-$80,d1
00013FA6 6200                       		bhi.s	locret_139C2
00013FA8 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013FAE 4E75                       		rts	
00013FB0                            ; ===========================================================================
00013FB0                            
00013FB0                            loc_139B2:
00013FB0 1228 0026                  		move.b	$26(a0),d1
00013FB4 0C01 0080                  		cmpi.b	#-$80,d1
00013FB8 6300                       		bls.s	locret_139C2
00013FBA 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FC0                            
00013FC0                            locret_139C2:
00013FC0 4E75                       		rts	
00013FC2                            ; End of function Sonic_Loops
00013FC2                            
00013FC2                            ; ---------------------------------------------------------------------------
00013FC2                            ; Subroutine to	animate	Sonic's sprites
00013FC2                            ; ---------------------------------------------------------------------------
00013FC2                            
00013FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FC2                            
00013FC2                            
00013FC2                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013FC2 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013FC8 7000                       		moveq	#0,d0
00013FCA 1028 001C                  		move.b	$1C(a0),d0
00013FCE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013FD2 6700                       		beq.s	SAnim_Do	; if not, branch
00013FD4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013FD8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013FDE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FE4                            
00013FE4                            SAnim_Do:
00013FE4 D040                       		add.w	d0,d0
00013FE6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FEA 1011                       		move.b	(a1),d0
00013FEC 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FEE 1228 0022                  		move.b	$22(a0),d1
00013FF2 0201 0001                  		andi.b	#1,d1
00013FF6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FFC 8328 0001                  		or.b	d1,1(a0)
00014000 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014004 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014006 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001400A                            
0001400A                            SAnim_Do2:
0001400A 7200                       		moveq	#0,d1
0001400C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014010 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014014 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014016                            
00014016                            SAnim_Next:
00014016 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001401A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001401E                            
0001401E                            SAnim_Delay:
0001401E 4E75                       		rts	
00014020                            ; ===========================================================================
00014020                            
00014020                            SAnim_End_FF:
00014020 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014022 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014024 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001402A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001402E 60E6                       		bra.s	SAnim_Next
00014030                            ; ===========================================================================
00014030                            
00014030                            SAnim_End_FE:
00014030 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014032 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014034 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014038 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001403C 9200                       		sub.b	d0,d1
0001403E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014042 60D2                       		bra.s	SAnim_Next
00014044                            ; ===========================================================================
00014044                            
00014044                            SAnim_End_FD:
00014044 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014046 6600                       		bne.s	SAnim_End	; if not, branch
00014048 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001404E                            
0001404E                            SAnim_End:
0001404E 4E75                       		rts	
00014050                            ; ===========================================================================
00014050                            
00014050                            SAnim_WalkRun:				; XREF: SAnim_Do
00014050 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014054 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014056 5200                       		addq.b	#1,d0		; is animation walking/running?
00014058 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001405C 7200                       		moveq	#0,d1
0001405E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014062 1428 0022                  		move.b	$22(a0),d2
00014066 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001406A 6600                       		bne.s	loc_13A70	; if yes, branch
0001406C 4600                       		not.b	d0		; reverse angle
0001406E                            
0001406E                            loc_13A70:
0001406E 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014072 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014074 7203                       		moveq	#3,d1
00014076                            
00014076                            loc_13A78:
00014076 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001407C B302                       		eor.b	d1,d2
0001407E 8528 0001                  		or.b	d2,1(a0)
00014082 0828 0005 0022             		btst	#5,$22(a0)
00014088 6600 0000                  		bne.w	SAnim_Push
0001408C E808                       		lsr.b	#4,d0		; divide angle by $10
0001408E 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014092 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014096 6A00                       		bpl.s	loc_13A9C
00014098 4442                       		neg.w	d2
0001409A                            
0001409A                            loc_13A9C:
0001409A 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000140A0 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000140A4 6400                       		bcc.s	loc_13AB4	; if yes, branch
000140A6 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000140AC 1200                       		move.b	d0,d1
000140AE E209                       		lsr.b	#1,d1
000140B0 D001                       		add.b	d1,d0
000140B2                            
000140B2                            loc_13AB4:
000140B2 D000                       		add.b	d0,d0
000140B4 1600                       		move.b	d0,d3
000140B6 4442                       		neg.w	d2
000140B8 0642 0800                  		addi.w	#$800,d2
000140BC 6A00                       		bpl.s	loc_13AC2
000140BE 7400                       		moveq	#0,d2
000140C0                            
000140C0                            loc_13AC2:
000140C0 E04A                       		lsr.w	#8,d2
000140C2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140C6 6100 FF42                  		bsr.w	SAnim_Do2
000140CA D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000140CE 4E75                       		rts	
000140D0                            ; ===========================================================================
000140D0                            
000140D0                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000140D0 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000140D2 6600                       		bne.s	SAnim_Push	; if not, branch
000140D4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140D8 6A00                       		bpl.s	loc_13ADE
000140DA 4442                       		neg.w	d2
000140DC                            
000140DC                            loc_13ADE:
000140DC 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000140E2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140E6 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140E8 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140EE                            
000140EE                            loc_13AF0:
000140EE 4442                       		neg.w	d2
000140F0 0642 0400                  		addi.w	#$400,d2
000140F4 6A00                       		bpl.s	loc_13AFA
000140F6 7400                       		moveq	#0,d2
000140F8                            
000140F8                            loc_13AFA:
000140F8 E04A                       		lsr.w	#8,d2
000140FA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140FE 1228 0022                  		move.b	$22(a0),d1
00014102 0201 0001                  		andi.b	#1,d1
00014106 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001410C 8328 0001                  		or.b	d1,1(a0)
00014110 6000 FEF8                  		bra.w	SAnim_Do2
00014114                            ; ===========================================================================
00014114                            
00014114                            SAnim_Push:				; XREF: SAnim_RollJump
00014114 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014118 6B00                       		bmi.s	loc_13B1E
0001411A 4442                       		neg.w	d2
0001411C                            
0001411C                            loc_13B1E:
0001411C 0642 0800                  		addi.w	#$800,d2
00014120 6A00                       		bpl.s	loc_13B26
00014122 7400                       		moveq	#0,d2
00014124                            
00014124                            loc_13B26:
00014124 EC4A                       		lsr.w	#6,d2
00014126 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001412A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014130 1228 0022                  		move.b	$22(a0),d1
00014134 0201 0001                  		andi.b	#1,d1
00014138 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001413E 8328 0001                  		or.b	d1,1(a0)
00014142 6000 FEC6                  		bra.w	SAnim_Do2
00014146                            ; End of function Sonic_Animate
00014146                            
00014146                            ; ===========================================================================
00014146                            SonicAniData:
00014146                            	include "_anim\Sonic.asm"
00014146                            ; ---------------------------------------------------------------------------
00014146                            ; Animation script - Sonic
00014146                            ; ---------------------------------------------------------------------------
00014146 0000                       		dc.w SonAni_Walk-SonicAniData
00014148 0000                       		dc.w SonAni_Run-SonicAniData
0001414A 0000                       		dc.w SonAni_Roll-SonicAniData
0001414C 0000                       		dc.w SonAni_Roll2-SonicAniData
0001414E 0000                       		dc.w SonAni_Push-SonicAniData
00014150 0000                       		dc.w SonAni_Wait-SonicAniData
00014152 0000                       		dc.w SonAni_Balance-SonicAniData
00014154 0000                       		dc.w SonAni_LookUp-SonicAniData
00014156 0000                       		dc.w SonAni_Duck-SonicAniData
00014158 0000                       		dc.w SonAni_Warp1-SonicAniData
0001415A 0000                       		dc.w SonAni_Warp2-SonicAniData
0001415C 0000                       		dc.w SonAni_Warp3-SonicAniData
0001415E 0000                       		dc.w SonAni_Warp4-SonicAniData
00014160 0000                       		dc.w SonAni_Stop-SonicAniData
00014162 0000                       		dc.w SonAni_Float1-SonicAniData
00014164 0000                       		dc.w SonAni_Float2-SonicAniData
00014166 0000                       		dc.w SonAni_Spring-SonicAniData
00014168 0000                       		dc.w SonAni_LZHang-SonicAniData
0001416A 0000                       		dc.w SonAni_Leap1-SonicAniData
0001416C 0000                       		dc.w SonAni_Leap2-SonicAniData
0001416E 0000                       		dc.w SonAni_Surf-SonicAniData
00014170 0000                       		dc.w SonAni_Bubble-SonicAniData
00014172 0000                       		dc.w SonAni_Death1-SonicAniData
00014174 0000                       		dc.w SonAni_Drown-SonicAniData
00014176 0000                       		dc.w SonAni_Death2-SonicAniData
00014178 0000                       		dc.w SonAni_Shrink-SonicAniData
0001417A 0000                       		dc.w SonAni_Hurt-SonicAniData
0001417C 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001417E 0000                       		dc.w SonAni_Blank-SonicAniData
00014180 0000                       		dc.w SonAni_Float3-SonicAniData
00014182 0000                       		dc.w SonAni_Float4-SonicAniData
00014184 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001418E FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014196 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001419E FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000141A6 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000141AE 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000141C4 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000141C8 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000141CC 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000141D0 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000141D4 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000141D8 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000141DC 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000141E0 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141E4 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141E8 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141F0 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141F4 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141F8 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141FE 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014204 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014208 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014210 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014214 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014218 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001421C 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014226 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
0001422A 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001422E 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014232 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001423A 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
0001423E                            		even
0001423E                            		even
0001423E                            
0001423E                            ; ---------------------------------------------------------------------------
0001423E                            ; Sonic	pattern	loading	subroutine
0001423E                            ; ---------------------------------------------------------------------------
0001423E                            
0001423E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001423E                            
0001423E                            
0001423E                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
0001423E 7000                       		moveq	#0,d0
00014240 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014244 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014248 6700                       		beq.s	locret_13C96
0001424A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001424E 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00014254 D040                       		add.w	d0,d0
00014256 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001425A 7200                       		moveq	#0,d1
0001425C 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001425E 5301                       		subq.b	#1,d1
00014260 6B00                       		bmi.s	locret_13C96
00014262 47F8 C800                  		lea	($FFFFC800).w,a3
00014266 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001426C                            
0001426C                            SPLC_ReadEntry:
0001426C 7400                       		moveq	#0,d2
0001426E 141A                       		move.b	(a2)+,d2
00014270 3002                       		move.w	d2,d0
00014272 E808                       		lsr.b	#4,d0
00014274 E14A                       		lsl.w	#8,d2
00014276 141A                       		move.b	(a2)+,d2
00014278 EB4A                       		lsl.w	#5,d2
0001427A 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014280 D3C2                       		adda.l	d2,a1
00014282                            
00014282                            SPLC_LoadTile:
00014282 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014286 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001428A 47EB 0020                  		lea	$20(a3),a3	; next tile
0001428E 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014292                            
00014292 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014296                            
00014296                            locret_13C96:
00014296 4E75                       		rts	
00014298                            ; End of function LoadSonicDynPLC
00014298                            
00014298                            ; ===========================================================================
00014298                            ; ---------------------------------------------------------------------------
00014298                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014298                            ; ---------------------------------------------------------------------------
00014298                            
00014298                            Obj0A:					; XREF: Obj_Index
00014298 7000                       		moveq	#0,d0
0001429A 1028 0024                  		move.b	$24(a0),d0
0001429E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000142A2 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000142A6                            ; ===========================================================================
000142A6 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000142AA 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000142AE 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000142B2 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000142B6 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000142B8                            ; ===========================================================================
000142B8                            
000142B8                            Obj0A_Main:				; XREF: Obj0A_Index
000142B8 5428 0024                  		addq.b	#2,$24(a0)
000142BC 217C 0001 2F5E 0004        		move.l	#Map_obj64,4(a0)
000142C4 317C 8348 0002             		move.w	#$8348,2(a0)
000142CA 117C 0084 0001             		move.b	#$84,1(a0)
000142D0 117C 0010 0019             		move.b	#$10,$19(a0)
000142D6 117C 0001 0018             		move.b	#1,$18(a0)
000142DC 1028 0028                  		move.b	$28(a0),d0
000142E0 6A00                       		bpl.s	loc_13D00
000142E2 5028 0024                  		addq.b	#8,$24(a0)
000142E6 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142EE 317C 0440 0002             		move.w	#$440,2(a0)
000142F4 0240 007F                  		andi.w	#$7F,d0
000142F8 1140 0033                  		move.b	d0,$33(a0)
000142FC 6000 0000                  		bra.w	Obj0A_Countdown
00014300                            ; ===========================================================================
00014300                            
00014300                            loc_13D00:
00014300 1140 001C                  		move.b	d0,$1C(a0)
00014304 3168 0008 0030             		move.w	8(a0),$30(a0)
0001430A 317C FF78 0012             		move.w	#-$88,$12(a0)
00014310                            
00014310                            Obj0A_Animate:				; XREF: Obj0A_Index
00014310 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014316 4EB9 0000 ACA2             		jsr	AnimateSprite
0001431C                            
0001431C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001431C 3038 F646                  		move.w	($FFFFF646).w,d0
00014320 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014324 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014326 117C 0006 0024             		move.b	#6,$24(a0)
0001432C 5E28 001C                  		addq.b	#7,$1C(a0)
00014330 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014336 6700                       		beq.s	Obj0A_Display
00014338 6000                       		bra.s	Obj0A_Display
0001433A                            ; ===========================================================================
0001433A                            
0001433A                            Obj0A_Wobble:
0001433A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001433E 6700                       		beq.s	loc_13D44
00014340 5868 0030                  		addq.w	#4,$30(a0)
00014344                            
00014344                            loc_13D44:
00014344 1028 0026                  		move.b	$26(a0),d0
00014348 5228 0026                  		addq.b	#1,$26(a0)
0001434C 0240 007F                  		andi.w	#$7F,d0
00014350 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014356 1031 0000                  		move.b	(a1,d0.w),d0
0001435A 4880                       		ext.w	d0
0001435C D068 0030                  		add.w	$30(a0),d0
00014360 3140 0008                  		move.w	d0,8(a0)
00014364 6100                       		bsr.s	Obj0A_ShowNumber
00014366 4EBA 983E                  		jsr	SpeedToPos
0001436A 4A28 0001                  		tst.b	1(a0)
0001436E 6A00                       		bpl.s	Obj0A_Delete
00014370 4EFA 985A                  		jmp	DisplaySprite
00014374                            ; ===========================================================================
00014374                            
00014374                            Obj0A_Delete:
00014374 4EFA 9892                  		jmp	DeleteObject
00014378                            ; ===========================================================================
00014378                            
00014378                            Obj0A_Display:				; XREF: Obj0A_Index
00014378 6100                       		bsr.s	Obj0A_ShowNumber
0001437A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014380 4EB9 0000 ACA2             		jsr	AnimateSprite
00014386 4EFA 9844                  		jmp	DisplaySprite
0001438A                            ; ===========================================================================
0001438A                            
0001438A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001438A 4EFA 987C                  		jmp	DeleteObject
0001438E                            ; ===========================================================================
0001438E                            
0001438E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001438E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014394 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014396 5368 0038                  		subq.w	#1,$38(a0)
0001439A 6600                       		bne.s	Obj0A_Display2
0001439C 117C 000E 0024             		move.b	#$E,$24(a0)
000143A2 5E28 001C                  		addq.b	#7,$1C(a0)
000143A6 60D0                       		bra.s	Obj0A_Display
000143A8                            ; ===========================================================================
000143A8                            
000143A8                            Obj0A_Display2:
000143A8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143AE 4EB9 0000 ACA2             		jsr	AnimateSprite
000143B4 4A28 0001                  		tst.b	1(a0)
000143B8 6A00                       		bpl.s	Obj0A_Delete3
000143BA 4EFA 9810                  		jmp	DisplaySprite
000143BE                            ; ===========================================================================
000143BE                            
000143BE                            Obj0A_Delete3:
000143BE 4EFA 9848                  		jmp	DeleteObject
000143C2                            ; ===========================================================================
000143C2                            
000143C2                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000143C2 4A68 0038                  		tst.w	$38(a0)
000143C6 6700                       		beq.s	locret_13E1A
000143C8 5368 0038                  		subq.w	#1,$38(a0)
000143CC 6600                       		bne.s	locret_13E1A
000143CE 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000143D4 6400                       		bcc.s	locret_13E1A
000143D6 317C 000F 0038             		move.w	#$F,$38(a0)
000143DC 4268 0012                  		clr.w	$12(a0)
000143E0 117C 0080 0001             		move.b	#$80,1(a0)
000143E6 3028 0008                  		move.w	8(a0),d0
000143EA 9078 F700                  		sub.w	($FFFFF700).w,d0
000143EE 0640 0080                  		addi.w	#$80,d0
000143F2 3140 0008                  		move.w	d0,8(a0)
000143F6 3028 000C                  		move.w	$C(a0),d0
000143FA 9078 F704                  		sub.w	($FFFFF704).w,d0
000143FE 0640 0080                  		addi.w	#$80,d0
00014402 3140 000A                  		move.w	d0,$A(a0)
00014406 117C 000C 0024             		move.b	#$C,$24(a0)
0001440C                            
0001440C                            locret_13E1A:
0001440C 4E75                       		rts	
0001440E                            ; ===========================================================================
0001440E                            Obj0A_WobbleData:
0001440E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001441F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014430 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014441 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014451 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001445E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001446B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014478 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014485 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001448E                            ; ===========================================================================
0001448E                            
0001448E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001448E 4A68 002C                  		tst.w	$2C(a0)
00014492 6600 0000                  		bne.w	loc_13F86
00014496 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001449C 6400 0000                  		bcc.w	locret_1408C
000144A0 0838 0006 D022             		btst	#6,($FFFFD022).w
000144A6 6700 0000                  		beq.w	locret_1408C
000144AA 5368 0038                  		subq.w	#1,$38(a0)
000144AE 6A00 0000                  		bpl.w	loc_13FAC
000144B2 317C 003B 0038             		move.w	#59,$38(a0)
000144B8 317C 0001 0036             		move.w	#1,$36(a0)
000144BE 4EB9 0000 2C5C             		jsr	(RandomNumber).l
000144C4 0240 0001                  		andi.w	#1,d0
000144C8 1140 0034                  		move.b	d0,$34(a0)
000144CC 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000144D0 0C40 0019                  		cmpi.w	#$19,d0
000144D4 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000144D6 0C40 0014                  		cmpi.w	#$14,d0
000144DA 6700                       		beq.s	Obj0A_WarnSound
000144DC 0C40 000F                  		cmpi.w	#$F,d0
000144E0 6700                       		beq.s	Obj0A_WarnSound
000144E2 0C40 000C                  		cmpi.w	#$C,d0
000144E6 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144E8 6600                       		bne.s	loc_13F02
000144EA 303C 0092                  		move.w	#$92,d0
000144EE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144F4                            
000144F4                            loc_13F02:
000144F4 5328 0032                  		subq.b	#1,$32(a0)
000144F8 6A00                       		bpl.s	Obj0A_ReduceAir
000144FA 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014500 08E8 0007 0036             		bset	#7,$36(a0)
00014506 6000                       		bra.s	Obj0A_ReduceAir
00014508                            ; ===========================================================================
00014508                            
00014508                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014508 303C 00C2                  		move.w	#$C2,d0
0001450C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014512                            
00014512                            Obj0A_ReduceAir:
00014512 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014516 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001451A 6100 0000                  		bsr.w	ResumeMusic
0001451E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014524 303C 00B2                  		move.w	#$B2,d0
00014528 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
0001452E 117C 000A 0034             		move.b	#$A,$34(a0)
00014534 317C 0001 0036             		move.w	#1,$36(a0)
0001453A 317C 0078 002C             		move.w	#$78,$2C(a0)
00014540 2F08                       		move.l	a0,-(sp)
00014542 41F8 D000                  		lea	($FFFFD000).w,a0
00014546 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
0001454A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014550 08E8 0001 0022             		bset	#1,$22(a0)
00014556 08E8 0007 0002             		bset	#7,2(a0)
0001455C 317C 0000 0012             		move.w	#0,$12(a0)
00014562 317C 0000 0010             		move.w	#0,$10(a0)
00014568 317C 0000 0014             		move.w	#0,$14(a0)
0001456E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014574 205F                       		movea.l	(sp)+,a0
00014576 4E75                       		rts	
00014578                            ; ===========================================================================
00014578                            
00014578                            loc_13F86:
00014578 5368 002C                  		subq.w	#1,$2C(a0)
0001457C 6600                       		bne.s	loc_13F94
0001457E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014584 4E75                       		rts	
00014586                            ; ===========================================================================
00014586                            
00014586                            loc_13F94:
00014586 2F08                       		move.l	a0,-(sp)
00014588 41F8 D000                  		lea	($FFFFD000).w,a0
0001458C 4EBA 9618                  		jsr	SpeedToPos
00014590 0668 0010 0012             		addi.w	#$10,$12(a0)
00014596 205F                       		movea.l	(sp)+,a0
00014598 6000                       		bra.s	loc_13FAC
0001459A                            ; ===========================================================================
0001459A                            
0001459A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001459A 6000                       		bra.s	Obj0A_MakeItem
0001459C                            ; ===========================================================================
0001459C                            
0001459C                            loc_13FAC:
0001459C 4A68 0036                  		tst.w	$36(a0)
000145A0 6700 0000                  		beq.w	locret_1408C
000145A4 5368 003A                  		subq.w	#1,$3A(a0)
000145A8 6A00 0000                  		bpl.w	locret_1408C
000145AC                            
000145AC                            Obj0A_MakeItem:
000145AC 4EB9 0000 2C5C             		jsr	(RandomNumber).l
000145B2 0240 000F                  		andi.w	#$F,d0
000145B6 3140 003A                  		move.w	d0,$3A(a0)
000145BA 4EBA 9A96                  		jsr	SingleObjLoad
000145BE 6600 0000                  		bne.w	locret_1408C
000145C2 12BC 000A                  		move.b	#$A,0(a1)	; load object
000145C6 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000145CC 7006                       		moveq	#6,d0
000145CE 0838 0000 D022             		btst	#0,($FFFFD022).w
000145D4 6700                       		beq.s	loc_13FF2
000145D6 4440                       		neg.w	d0
000145D8 137C 0040 0026             		move.b	#$40,$26(a1)
000145DE                            
000145DE                            loc_13FF2:
000145DE D169 0008                  		add.w	d0,8(a1)
000145E2 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145E8 137C 0006 0028             		move.b	#6,$28(a1)
000145EE 4A68 002C                  		tst.w	$2C(a0)
000145F2 6700 0000                  		beq.w	loc_1403E
000145F6 0268 0007 003A             		andi.w	#7,$3A(a0)
000145FC 0668 0000 003A             		addi.w	#0,$3A(a0)
00014602 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014606 0440 000C                  		subi.w	#$C,d0
0001460A 3340 000C                  		move.w	d0,$C(a1)
0001460E 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00014614 1340 0026                  		move.b	d0,$26(a1)
00014618 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001461C 0200 0003                  		andi.b	#3,d0
00014620 6600                       		bne.s	loc_14082
00014622 137C 000E 0028             		move.b	#$E,$28(a1)
00014628 6000                       		bra.s	loc_14082
0001462A                            ; ===========================================================================
0001462A                            
0001462A                            loc_1403E:
0001462A 0828 0007 0036             		btst	#7,$36(a0)
00014630 6700                       		beq.s	loc_14082
00014632 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014636 E24A                       		lsr.w	#1,d2
00014638 4EB9 0000 2C5C             		jsr	(RandomNumber).l
0001463E 0240 0003                  		andi.w	#3,d0
00014642 6600                       		bne.s	loc_1406A
00014644 08E8 0006 0036             		bset	#6,$36(a0)
0001464A 6600                       		bne.s	loc_14082
0001464C 1342 0028                  		move.b	d2,$28(a1)
00014650 337C 001C 0038             		move.w	#$1C,$38(a1)
00014656                            
00014656                            loc_1406A:
00014656 4A28 0034                  		tst.b	$34(a0)
0001465A 6600                       		bne.s	loc_14082
0001465C 08E8 0006 0036             		bset	#6,$36(a0)
00014662 6600                       		bne.s	loc_14082
00014664 1342 0028                  		move.b	d2,$28(a1)
00014668 337C 001C 0038             		move.w	#$1C,$38(a1)
0001466E                            
0001466E                            loc_14082:
0001466E 5328 0034                  		subq.b	#1,$34(a0)
00014672 6A00                       		bpl.s	locret_1408C
00014674 4268 0036                  		clr.w	$36(a0)
00014678                            
00014678                            locret_1408C:
00014678 4E75                       		rts	
0001467A                            
0001467A                            ; ---------------------------------------------------------------------------
0001467A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001467A                            ; ---------------------------------------------------------------------------
0001467A                            
0001467A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001467A                            
0001467A                            
0001467A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001467A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014680                             
00014680                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014680                             
00014680 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014684                             
00014684 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001468A 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001468C 43F9 0000 3B0C             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014692 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014694                             
00014694                            Air_GetBgm2:
00014694 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001469A 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001469C 43F9 0000 3B14             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000146A2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146A4                             
000146A4                            Air_GetBgm3:
000146A4 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000146AA 6600                       		bne.s	Air_GetBgm4	; if not, branch
000146AC 43F9 0000 3B1A             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000146B2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146B4                             
000146B4                            Air_GetBgm4:
000146B4 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000146BA 6600                       		bne.s	Air_PlayMusic	; if not, branch
000146BC 43F9 0000 3B20             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000146C2                             
000146C2                            Air_PlayMusic:
000146C2 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000146C6                             
000146C6                            loc_140A6:
000146C6 4EB9 0000 15B6             		jsr	(PlaySound).l
000146CC                             
000146CC                            ; NineKode ends here
000146CC                            
000146CC                            loc_140AC:
000146CC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000146D2 4238 D372                  		clr.b	($FFFFD372).w
000146D6 4E75                       		rts	
000146D8                            ; End of function ResumeMusic
000146D8                            
000146D8                            ; ===========================================================================
000146D8                            Ani_obj0A:
000146D8                            	include "_anim\obj0A.asm"
000146D8                            ; ---------------------------------------------------------------------------
000146D8                            ; Animation script - countdown numbers and bubbles (LZ)
000146D8                            ; ---------------------------------------------------------------------------
000146D8 0000                       		dc.w byte_140D6-Ani_obj0A
000146DA 0000                       		dc.w byte_140E0-Ani_obj0A
000146DC 0000                       		dc.w byte_140EA-Ani_obj0A
000146DE 0000                       		dc.w byte_140F4-Ani_obj0A
000146E0 0000                       		dc.w byte_140FE-Ani_obj0A
000146E2 0000                       		dc.w byte_14108-Ani_obj0A
000146E4 0000                       		dc.w byte_14112-Ani_obj0A
000146E6 0000                       		dc.w byte_14118-Ani_obj0A
000146E8 0000                       		dc.w byte_14120-Ani_obj0A
000146EA 0000                       		dc.w byte_14128-Ani_obj0A
000146EC 0000                       		dc.w byte_14130-Ani_obj0A
000146EE 0000                       		dc.w byte_14138-Ani_obj0A
000146F0 0000                       		dc.w byte_14140-Ani_obj0A
000146F2 0000                       		dc.w byte_14148-Ani_obj0A
000146F4 0000                       		dc.w byte_1414A-Ani_obj0A
000146F6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014700 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001470A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014714 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001471E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014728 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014732 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014738 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014740 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014748 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014750 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014758 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014760 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014768 0EFC                       byte_14148:	dc.b $E, $FC
0001476A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014770                            		even
00014770                            		even
00014770                            
00014770                            ; ---------------------------------------------------------------------------
00014770                            ; Sprite mappings - drowning countdown numbers (LZ)
00014770                            ; ---------------------------------------------------------------------------
00014770                            Map_obj0A:
00014770                            	include "_maps\obj0A.asm"
00014770                            ; ---------------------------------------------------------------------------
00014770                            ; Sprite mappings - drowning countdown numbers (LZ)
00014770                            ; ---------------------------------------------------------------------------
00014770 0000                       		dc.w byte_14152-Map_obj0A
00014772 01                         byte_14152:	dc.b 1
00014773 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014778                            		even
00014778                            		even
00014778                            
00014778                            ; ===========================================================================
00014778                            ; ---------------------------------------------------------------------------
00014778                            ; Object 38 - shield and invincibility stars
00014778                            ; ---------------------------------------------------------------------------
00014778                            
00014778                            Obj38:					; XREF: Obj_Index
00014778 7000                       		moveq	#0,d0
0001477A 1028 0024                  		move.b	$24(a0),d0
0001477E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014782 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014786                            ; ===========================================================================
00014786 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014788 0000                       		dc.w Obj38_Shield-Obj38_Index
0001478A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001478C                            ; ===========================================================================
0001478C                            
0001478C                            Obj38_Main:				; XREF: Obj38_Index
0001478C 5428 0024                  		addq.b	#2,$24(a0)
00014790 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014798 117C 0004 0001             		move.b	#4,1(a0)
0001479E 117C 0001 0018             		move.b	#1,$18(a0)
000147A4 117C 0010 0019             		move.b	#$10,$19(a0)
000147AA 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000147AE 6600                       		bne.s	Obj38_DoStars	; if not, branch
000147B0 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000147B6 4E75                       		rts	
000147B8                            ; ===========================================================================
000147B8                            
000147B8                            Obj38_DoStars:
000147B8 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000147BC 317C 055C 0002             		move.w	#$55C,2(a0)
000147C2 4E75                       		rts	
000147C4                            ; ===========================================================================
000147C4                            
000147C4                            Obj38_Shield:				; XREF: Obj38_Index
000147C4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147C8 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000147CA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000147CE 6700                       		beq.s	Obj38_Delete	; if not, branch
000147D0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000147D6 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000147DC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147E2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147E8 4EB9 0000 ACA2             		jsr	AnimateSprite
000147EE 4EFA 93DC                  		jmp	DisplaySprite
000147F2                            ; ===========================================================================
000147F2                            
000147F2                            Obj38_RmvShield:
000147F2 4E75                       		rts	
000147F4                            ; ===========================================================================
000147F4                            
000147F4                            Obj38_Delete:
000147F4 4EFA 9412                  		jmp	DeleteObject
000147F8                            ; ===========================================================================
000147F8                            
000147F8                            Obj38_Stars:				; XREF: Obj38_Index
000147F8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147FC 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147FE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014802 1228 001C                  		move.b	$1C(a0),d1
00014806 5301                       		subq.b	#1,d1
00014808 6000                       		bra.s	Obj38_StarTrail
0001480A                            ; ===========================================================================
0001480A E909                       		lsl.b	#4,d1
0001480C 5801                       		addq.b	#4,d1
0001480E 9001                       		sub.b	d1,d0
00014810 1228 0030                  		move.b	$30(a0),d1
00014814 9001                       		sub.b	d1,d0
00014816 5801                       		addq.b	#4,d1
00014818 0201 000F                  		andi.b	#$F,d1
0001481C 1141 0030                  		move.b	d1,$30(a0)
00014820 6000                       		bra.s	Obj38_StarTrail2a
00014822                            ; ===========================================================================
00014822                            
00014822                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014822 E709                       		lsl.b	#3,d1
00014824 1401                       		move.b	d1,d2
00014826 D201                       		add.b	d1,d1
00014828 D202                       		add.b	d2,d1
0001482A 5801                       		addq.b	#4,d1
0001482C 9001                       		sub.b	d1,d0
0001482E 1228 0030                  		move.b	$30(a0),d1
00014832 9001                       		sub.b	d1,d0
00014834 5801                       		addq.b	#4,d1
00014836 0C01 0018                  		cmpi.b	#$18,d1
0001483A 6500                       		bcs.s	Obj38_StarTrail2
0001483C 7200                       		moveq	#0,d1
0001483E                            
0001483E                            Obj38_StarTrail2:
0001483E 1141 0030                  		move.b	d1,$30(a0)
00014842                            
00014842                            Obj38_StarTrail2a:
00014842 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014846 43F1 0000                  		lea	(a1,d0.w),a1
0001484A 3159 0008                  		move.w	(a1)+,8(a0)
0001484E 3159 000C                  		move.w	(a1)+,$C(a0)
00014852 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014858 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001485E 4EB9 0000 ACA2             		jsr	AnimateSprite
00014864 4EFA 9366                  		jmp	DisplaySprite
00014868                            ; ===========================================================================
00014868                            
00014868                            Obj38_Delete2:				; XREF: Obj38_Stars
00014868 4EFA 939E                  		jmp	DeleteObject
0001486C                            ; ===========================================================================
0001486C                            ; ---------------------------------------------------------------------------
0001486C                            ; Object 4A - special stage entry from beta
0001486C                            ; ---------------------------------------------------------------------------
0001486C                            
0001486C                            Obj4A:					; XREF: Obj_Index
0001486C 7000                       		moveq	#0,d0
0001486E 1028 0024                  		move.b	$24(a0),d0
00014872 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014876 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001487A                            ; ===========================================================================
0001487A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001487C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001487E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014880                            ; ===========================================================================
00014880                            
00014880                            Obj4A_Main:				; XREF: Obj4A_Index
00014880 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014884 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014886 4E75                       		rts	
00014888                            ; ===========================================================================
00014888                            
00014888                            Obj4A_Main2:
00014888 5428 0024                  		addq.b	#2,$24(a0)
0001488C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014894 117C 0004 0001             		move.b	#4,1(a0)
0001489A 117C 0001 0018             		move.b	#1,$18(a0)
000148A0 117C 0038 0019             		move.b	#$38,$19(a0)
000148A6 317C 0541 0002             		move.w	#$541,2(a0)
000148AC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000148B2                            
000148B2                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000148B2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000148B8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148BE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148C4 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000148CA 4EB9 0000 ACA2             		jsr	AnimateSprite
000148D0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000148D6 6600                       		bne.s	Obj4A_Display
000148D8 4A38 D000                  		tst.b	($FFFFD000).w
000148DC 6700                       		beq.s	Obj4A_Display
000148DE 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148E4 303C 00A8                  		move.w	#$A8,d0
000148E8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148EE                            
000148EE                            Obj4A_Display:
000148EE 4EFA 92DC                  		jmp	DisplaySprite
000148F2                            ; ===========================================================================
000148F2                            
000148F2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148F6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148F8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148FE 4EFA 9308                  		jmp	DeleteObject
00014902                            ; ===========================================================================
00014902                            
00014902                            Obj4A_Wait:
00014902 4E75                       		rts	
00014904                            ; ===========================================================================
00014904                            ; ---------------------------------------------------------------------------
00014904                            ; Object 08 - water splash (LZ)
00014904                            ; ---------------------------------------------------------------------------
00014904                            
00014904                            Obj08:					; XREF: Obj_Index
00014904 7000                       		moveq	#0,d0
00014906 1028 0024                  		move.b	$24(a0),d0
0001490A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001490E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014912                            ; ===========================================================================
00014912 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014914 0000                       		dc.w Obj08_Display-Obj08_Index
00014916 0000                       		dc.w Obj08_Delete-Obj08_Index
00014918                            ; ===========================================================================
00014918                            
00014918                            Obj08_Main:				; XREF: Obj08_Index
00014918 5428 0024                  		addq.b	#2,$24(a0)
0001491C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014924 0028 0004 0001             		ori.b	#4,1(a0)
0001492A 117C 0001 0018             		move.b	#1,$18(a0)
00014930 117C 0010 0019             		move.b	#$10,$19(a0)
00014936 317C 4259 0002             		move.w	#$4259,2(a0)
0001493C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014942                            
00014942                            Obj08_Display:				; XREF: Obj08_Index
00014942 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014948 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001494E 4EB9 0000 ACA2             		jsr	AnimateSprite
00014954 4EFA 9276                  		jmp	DisplaySprite
00014958                            ; ===========================================================================
00014958                            
00014958                            Obj08_Delete:				; XREF: Obj08_Index
00014958 4EFA 92AE                  		jmp	DeleteObject	; delete when animation	is complete
0001495C                            ; ===========================================================================
0001495C                            Ani_obj38:
0001495C                            	include "_anim\obj38.asm"
0001495C                            ; ---------------------------------------------------------------------------
0001495C                            ; Animation script - shield and invincibility stars
0001495C                            ; ---------------------------------------------------------------------------
0001495C 0000                       		dc.w byte_14356-Ani_obj38
0001495E 0000                       		dc.w byte_1435E-Ani_obj38
00014960 0000                       		dc.w byte_14364-Ani_obj38
00014962 0000                       		dc.w byte_1437E-Ani_obj38
00014964 0000                       		dc.w byte_14398-Ani_obj38
00014966 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001496E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014974 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014985 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001498E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001499F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000149A8 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000149B9 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000149C2                            		even
000149C2                            		even
000149C2                            
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            ; Sprite mappings - shield and invincibility stars
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            Map_obj38:
000149C2                            	include "_maps\obj38.asm"
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            ; Sprite mappings - shield and invincibility stars
000149C2                            ; ---------------------------------------------------------------------------
000149C2 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000149C6 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000149CA 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000149CE 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000149D2 04                         byte_143C2:	dc.b 4
000149D3 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149D8 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149DD 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000149E2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149E7 04                         byte_143D7:	dc.b 4
000149E8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149ED E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149F2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149F7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149FC 04                         byte_143EC:	dc.b 4
000149FD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A02 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A07 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A0C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A11 04                         byte_14401:	dc.b 4
00014A12 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014A17 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A1C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A21 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A26 04                         byte_14416:	dc.b 4
00014A27 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A2C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A31 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014A36 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A3B 04                         byte_1442B:	dc.b 4
00014A3C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A41 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A46 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A4B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A50 04                         byte_14440:	dc.b 4
00014A51 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A56 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A5B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A60 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A66 00                         		even
00014A66 00                         		even
00014A66                            
00014A66                            Ani_obj4A:
00014A66                            	include "_anim\obj4A.asm"
00014A66                            ; ---------------------------------------------------------------------------
00014A66                            ; Animation script - special stage entry effect from beta
00014A66                            ; ---------------------------------------------------------------------------
00014A66 0000                       		dc.w byte_14458-Ani_obj4A
00014A68 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A7C                            		even
00014A7C                            		even
00014A7C                            
00014A7C                            ; ---------------------------------------------------------------------------
00014A7C                            ; Sprite mappings - special stage entry	from beta
00014A7C                            ; ---------------------------------------------------------------------------
00014A7C                            Map_obj4A:
00014A7C                            	include "_maps\obj4A.asm"
00014A7C                            ; ---------------------------------------------------------------------------
00014A7C                            ; Sprite mappings - special stage entry	from beta
00014A7C                            ; ---------------------------------------------------------------------------
00014A7C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A80 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A84 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A88 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A8C 03                         byte_1447C:	dc.b 3
00014A8D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A92 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A97 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A9C 03                         byte_1448C:	dc.b 3
00014A9D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014AA2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014AA7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014AAC 05                         byte_1449C:	dc.b 5
00014AAD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014AB2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014AB7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014ABC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014AC1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014AC6 09                         byte_144B6:	dc.b 9
00014AC7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014ACC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014AD1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014AD6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014ADB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014AE0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014AE5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AEA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014AEF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014AF4 12                         byte_144E4:	dc.b $12
00014AF5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014AFA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014AFF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014B04 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014B09 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014B0E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014B13 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014B18 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014B1D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014B22 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014B27 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014B2C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014B31 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014B36 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014B3B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B40 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B45 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B4A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B4F 11                         byte_1453F:	dc.b $11
00014B50 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B55 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B5A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B5F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B64 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B69 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B6E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B73 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B78 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B7D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B82 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B87 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B8C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B91 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B96 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B9B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014BA0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014BA5 09                         byte_14595:	dc.b 9
00014BA6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014BAB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014BB0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014BB5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014BBA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014BBF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014BC4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014BC9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014BCE 04                         		dc.b 4
00014BCF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014BD4                            		even
00014BD4                            		even
00014BD4                            
00014BD4                            Ani_obj08:
00014BD4                            	include "_anim\obj08.asm"
00014BD4                            ; ---------------------------------------------------------------------------
00014BD4                            ; Animation script - water splash (LZ)
00014BD4                            ; ---------------------------------------------------------------------------
00014BD4 0000                       		dc.w byte_145C6-Ani_obj08
00014BD6 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014BDC                            		even
00014BDC                            		even
00014BDC                            
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            ; Sprite mappings - water splash (LZ)
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            Map_obj08:
00014BDC                            	include "_maps\obj08.asm"
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC                            ; Sprite mappings - water splash (LZ)
00014BDC                            ; ---------------------------------------------------------------------------
00014BDC 0000                       		dc.w byte_145D2-Map_obj08
00014BDE 0000                       		dc.w byte_145DD-Map_obj08
00014BE0 0000                       		dc.w byte_145E8-Map_obj08
00014BE2 02                         byte_145D2:	dc.b 2
00014BE3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BE8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BED 02                         byte_145DD:	dc.b 2
00014BEE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BF3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BF8 01                         byte_145E8:	dc.b 1
00014BF9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BFE                            		even
00014BFE                            		even
00014BFE                            
00014BFE                            ; ---------------------------------------------------------------------------
00014BFE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BFE                            ; ---------------------------------------------------------------------------
00014BFE                            
00014BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BFE                            
00014BFE                            
00014BFE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BFE 0828 0003 0022             		btst	#3,$22(a0)
00014C04 6700                       		beq.s	loc_14602
00014C06 7000                       		moveq	#0,d0
00014C08 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C0C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C10 4E75                       		rts	
00014C12                            ; ===========================================================================
00014C12                            
00014C12                            loc_14602:
00014C12 7003                       		moveq	#3,d0
00014C14 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C18 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C1C 1028 0026                  		move.b	$26(a0),d0
00014C20 0600 0020                  		addi.b	#$20,d0
00014C24 6A00                       		bpl.s	loc_14624
00014C26 1028 0026                  		move.b	$26(a0),d0
00014C2A 6A00                       		bpl.s	loc_1461E
00014C2C 5300                       		subq.b	#1,d0
00014C2E                            
00014C2E                            loc_1461E:
00014C2E 0600 0020                  		addi.b	#$20,d0
00014C32 6000                       		bra.s	loc_14630
00014C34                            ; ===========================================================================
00014C34                            
00014C34                            loc_14624:
00014C34 1028 0026                  		move.b	$26(a0),d0
00014C38 6A00                       		bpl.s	loc_1462C
00014C3A 5200                       		addq.b	#1,d0
00014C3C                            
00014C3C                            loc_1462C:
00014C3C 0600 001F                  		addi.b	#$1F,d0
00014C40                            
00014C40                            loc_14630:
00014C40 0200 00C0                  		andi.b	#$C0,d0
00014C44 0C00 0040                  		cmpi.b	#$40,d0
00014C48 6700 0000                  		beq.w	Sonic_WalkVertL
00014C4C 0C00 0080                  		cmpi.b	#$80,d0
00014C50 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C54 0C00 00C0                  		cmpi.b	#$C0,d0
00014C58 6700 0000                  		beq.w	Sonic_WalkVertR
00014C5C 3428 000C                  		move.w	$C(a0),d2
00014C60 3628 0008                  		move.w	8(a0),d3
00014C64 7000                       		moveq	#0,d0
00014C66 1028 0016                  		move.b	$16(a0),d0
00014C6A 4880                       		ext.w	d0
00014C6C D440                       		add.w	d0,d2
00014C6E 1028 0017                  		move.b	$17(a0),d0
00014C72 4880                       		ext.w	d0
00014C74 D640                       		add.w	d0,d3
00014C76 49F8 F768                  		lea	($FFFFF768).w,a4
00014C7A 367C 0010                  		movea.w	#$10,a3
00014C7E 3C3C 0000                  		move.w	#0,d6
00014C82 7A0D                       		moveq	#$D,d5
00014C84 6100 0000                  		bsr.w	FindFloor
00014C88 3F01                       		move.w	d1,-(sp)
00014C8A 3428 000C                  		move.w	$C(a0),d2
00014C8E 3628 0008                  		move.w	8(a0),d3
00014C92 7000                       		moveq	#0,d0
00014C94 1028 0016                  		move.b	$16(a0),d0
00014C98 4880                       		ext.w	d0
00014C9A D440                       		add.w	d0,d2
00014C9C 1028 0017                  		move.b	$17(a0),d0
00014CA0 4880                       		ext.w	d0
00014CA2 4440                       		neg.w	d0
00014CA4 D640                       		add.w	d0,d3
00014CA6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CAA 367C 0010                  		movea.w	#$10,a3
00014CAE 3C3C 0000                  		move.w	#0,d6
00014CB2 7A0D                       		moveq	#$D,d5
00014CB4 6100 0000                  		bsr.w	FindFloor
00014CB8 301F                       		move.w	(sp)+,d0
00014CBA 6100 0000                  		bsr.w	Sonic_Angle
00014CBE 4A41                       		tst.w	d1
00014CC0 6700                       		beq.s	locret_146BE
00014CC2 6A00                       		bpl.s	loc_146C0
00014CC4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CC8 6D00                       		blt.s	locret_146E6
00014CCA D368 000C                  		add.w	d1,$C(a0)
00014CCE                            
00014CCE                            locret_146BE:
00014CCE 4E75                       		rts	
00014CD0                            ; ===========================================================================
00014CD0                            
00014CD0                            loc_146C0:
00014CD0 0C41 000E                  		cmpi.w	#$E,d1
00014CD4 6E00                       		bgt.s	loc_146CC
00014CD6                            
00014CD6                            loc_146C6:
00014CD6 D368 000C                  		add.w	d1,$C(a0)
00014CDA 4E75                       		rts	
00014CDC                            ; ===========================================================================
00014CDC                            
00014CDC                            loc_146CC:
00014CDC 4A28 0038                  		tst.b	$38(a0)
00014CE0 66F4                       		bne.s	loc_146C6
00014CE2 08E8 0001 0022             		bset	#1,$22(a0)
00014CE8 08A8 0005 0022             		bclr	#5,$22(a0)
00014CEE 117C 0001 001D             		move.b	#1,$1D(a0)
00014CF4 4E75                       		rts	
00014CF6                            ; ===========================================================================
00014CF6                            
00014CF6                            locret_146E6:
00014CF6 4E75                       		rts	
00014CF8                            ; End of function Sonic_AnglePos
00014CF8                            
00014CF8                            ; ===========================================================================
00014CF8 2428 0008                  		move.l	8(a0),d2
00014CFC 3028 0010                  		move.w	$10(a0),d0
00014D00 48C0                       		ext.l	d0
00014D02 E180                       		asl.l	#8,d0
00014D04 9480                       		sub.l	d0,d2
00014D06 2142 0008                  		move.l	d2,8(a0)
00014D0A 303C 0038                  		move.w	#$38,d0
00014D0E 48C0                       		ext.l	d0
00014D10 E180                       		asl.l	#8,d0
00014D12 9680                       		sub.l	d0,d3
00014D14 2143 000C                  		move.l	d3,$C(a0)
00014D18 4E75                       		rts	
00014D1A                            ; ===========================================================================
00014D1A                            
00014D1A                            locret_1470A:
00014D1A 4E75                       		rts	
00014D1C                            ; ===========================================================================
00014D1C 2628 000C                  		move.l	$C(a0),d3
00014D20 3028 0012                  		move.w	$12(a0),d0
00014D24 0440 0038                  		subi.w	#$38,d0
00014D28 3140 0012                  		move.w	d0,$12(a0)
00014D2C 48C0                       		ext.l	d0
00014D2E E180                       		asl.l	#8,d0
00014D30 9680                       		sub.l	d0,d3
00014D32 2143 000C                  		move.l	d3,$C(a0)
00014D36 4E75                       		rts	
00014D38 4E75                       		rts	
00014D3A                            ; ===========================================================================
00014D3A 2428 0008                  		move.l	8(a0),d2
00014D3E 2628 000C                  		move.l	$C(a0),d3
00014D42 3028 0010                  		move.w	$10(a0),d0
00014D46 48C0                       		ext.l	d0
00014D48 E180                       		asl.l	#8,d0
00014D4A 9480                       		sub.l	d0,d2
00014D4C 3028 0012                  		move.w	$12(a0),d0
00014D50 48C0                       		ext.l	d0
00014D52 E180                       		asl.l	#8,d0
00014D54 9680                       		sub.l	d0,d3
00014D56 2142 0008                  		move.l	d2,8(a0)
00014D5A 2143 000C                  		move.l	d3,$C(a0)
00014D5E 4E75                       		rts	
00014D60                            
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D60                            ; ---------------------------------------------------------------------------
00014D60                            
00014D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D60                            
00014D60                            
00014D60                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D60 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D64 B240                       		cmp.w	d0,d1
00014D66 6F00                       		ble.s	loc_1475E
00014D68 1438 F768                  		move.b	($FFFFF768).w,d2
00014D6C 3200                       		move.w	d0,d1
00014D6E                            
00014D6E                            loc_1475E:
00014D6E 0802 0000                  		btst	#0,d2
00014D72 6600                       		bne.s	loc_1476A
00014D74 1142 0026                  		move.b	d2,$26(a0)
00014D78 4E75                       		rts	
00014D7A                            ; ===========================================================================
00014D7A                            
00014D7A                            loc_1476A:
00014D7A 1428 0026                  		move.b	$26(a0),d2
00014D7E 0602 0020                  		addi.b	#$20,d2
00014D82 0202 00C0                  		andi.b	#$C0,d2
00014D86 1142 0026                  		move.b	d2,$26(a0)
00014D8A 4E75                       		rts	
00014D8C                            ; End of function Sonic_Angle
00014D8C                            
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            
00014D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D8C                            
00014D8C                            
00014D8C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D8C 3428 000C                  		move.w	$C(a0),d2
00014D90 3628 0008                  		move.w	8(a0),d3
00014D94 7000                       		moveq	#0,d0
00014D96 1028 0017                  		move.b	$17(a0),d0
00014D9A 4880                       		ext.w	d0
00014D9C 4440                       		neg.w	d0
00014D9E D440                       		add.w	d0,d2
00014DA0 1028 0016                  		move.b	$16(a0),d0
00014DA4 4880                       		ext.w	d0
00014DA6 D640                       		add.w	d0,d3
00014DA8 49F8 F768                  		lea	($FFFFF768).w,a4
00014DAC 367C 0010                  		movea.w	#$10,a3
00014DB0 3C3C 0000                  		move.w	#0,d6
00014DB4 7A0D                       		moveq	#$D,d5
00014DB6 6100 0000                  		bsr.w	FindWall
00014DBA 3F01                       		move.w	d1,-(sp)
00014DBC 3428 000C                  		move.w	$C(a0),d2
00014DC0 3628 0008                  		move.w	8(a0),d3
00014DC4 7000                       		moveq	#0,d0
00014DC6 1028 0017                  		move.b	$17(a0),d0
00014DCA 4880                       		ext.w	d0
00014DCC D440                       		add.w	d0,d2
00014DCE 1028 0016                  		move.b	$16(a0),d0
00014DD2 4880                       		ext.w	d0
00014DD4 D640                       		add.w	d0,d3
00014DD6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DDA 367C 0010                  		movea.w	#$10,a3
00014DDE 3C3C 0000                  		move.w	#0,d6
00014DE2 7A0D                       		moveq	#$D,d5
00014DE4 6100 0000                  		bsr.w	FindWall
00014DE8 301F                       		move.w	(sp)+,d0
00014DEA 6100 FF74                  		bsr.w	Sonic_Angle
00014DEE 4A41                       		tst.w	d1
00014DF0 6700                       		beq.s	locret_147F0
00014DF2 6A00                       		bpl.s	loc_147F2
00014DF4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DF8 6D00 FF20                  		blt.w	locret_1470A
00014DFC D368 0008                  		add.w	d1,8(a0)
00014E00                            
00014E00                            locret_147F0:
00014E00 4E75                       		rts	
00014E02                            ; ===========================================================================
00014E02                            
00014E02                            loc_147F2:
00014E02 0C41 000E                  		cmpi.w	#$E,d1
00014E06 6E00                       		bgt.s	loc_147FE
00014E08                            
00014E08                            loc_147F8:
00014E08 D368 0008                  		add.w	d1,8(a0)
00014E0C 4E75                       		rts	
00014E0E                            ; ===========================================================================
00014E0E                            
00014E0E                            loc_147FE:
00014E0E 4A28 0038                  		tst.b	$38(a0)
00014E12 66F4                       		bne.s	loc_147F8
00014E14 08E8 0001 0022             		bset	#1,$22(a0)
00014E1A 08A8 0005 0022             		bclr	#5,$22(a0)
00014E20 117C 0001 001D             		move.b	#1,$1D(a0)
00014E26 4E75                       		rts	
00014E28                            ; End of function Sonic_WalkVertR
00014E28                            
00014E28                            ; ---------------------------------------------------------------------------
00014E28                            ; Subroutine allowing Sonic to walk upside-down
00014E28                            ; ---------------------------------------------------------------------------
00014E28                            
00014E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E28                            
00014E28                            
00014E28                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014E28 3428 000C                  		move.w	$C(a0),d2
00014E2C 3628 0008                  		move.w	8(a0),d3
00014E30 7000                       		moveq	#0,d0
00014E32 1028 0016                  		move.b	$16(a0),d0
00014E36 4880                       		ext.w	d0
00014E38 9440                       		sub.w	d0,d2
00014E3A 0A42 000F                  		eori.w	#$F,d2
00014E3E 1028 0017                  		move.b	$17(a0),d0
00014E42 4880                       		ext.w	d0
00014E44 D640                       		add.w	d0,d3
00014E46 49F8 F768                  		lea	($FFFFF768).w,a4
00014E4A 367C FFF0                  		movea.w	#-$10,a3
00014E4E 3C3C 1000                  		move.w	#$1000,d6
00014E52 7A0D                       		moveq	#$D,d5
00014E54 6100 0000                  		bsr.w	FindFloor
00014E58 3F01                       		move.w	d1,-(sp)
00014E5A 3428 000C                  		move.w	$C(a0),d2
00014E5E 3628 0008                  		move.w	8(a0),d3
00014E62 7000                       		moveq	#0,d0
00014E64 1028 0016                  		move.b	$16(a0),d0
00014E68 4880                       		ext.w	d0
00014E6A 9440                       		sub.w	d0,d2
00014E6C 0A42 000F                  		eori.w	#$F,d2
00014E70 1028 0017                  		move.b	$17(a0),d0
00014E74 4880                       		ext.w	d0
00014E76 9640                       		sub.w	d0,d3
00014E78 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E7C 367C FFF0                  		movea.w	#-$10,a3
00014E80 3C3C 1000                  		move.w	#$1000,d6
00014E84 7A0D                       		moveq	#$D,d5
00014E86 6100 0000                  		bsr.w	FindFloor
00014E8A 301F                       		move.w	(sp)+,d0
00014E8C 6100 FED2                  		bsr.w	Sonic_Angle
00014E90 4A41                       		tst.w	d1
00014E92 6700                       		beq.s	locret_14892
00014E94 6A00                       		bpl.s	loc_14894
00014E96 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E9A 6D00 FE5A                  		blt.w	locret_146E6
00014E9E 9368 000C                  		sub.w	d1,$C(a0)
00014EA2                            
00014EA2                            locret_14892:
00014EA2 4E75                       		rts	
00014EA4                            ; ===========================================================================
00014EA4                            
00014EA4                            loc_14894:
00014EA4 0C41 000E                  		cmpi.w	#$E,d1
00014EA8 6E00                       		bgt.s	loc_148A0
00014EAA                            
00014EAA                            loc_1489A:
00014EAA 9368 000C                  		sub.w	d1,$C(a0)
00014EAE 4E75                       		rts	
00014EB0                            ; ===========================================================================
00014EB0                            
00014EB0                            loc_148A0:
00014EB0 4A28 0038                  		tst.b	$38(a0)
00014EB4 66F4                       		bne.s	loc_1489A
00014EB6 08E8 0001 0022             		bset	#1,$22(a0)
00014EBC 08A8 0005 0022             		bclr	#5,$22(a0)
00014EC2 117C 0001 001D             		move.b	#1,$1D(a0)
00014EC8 4E75                       		rts	
00014ECA                            ; End of function Sonic_WalkCeiling
00014ECA                            
00014ECA                            ; ---------------------------------------------------------------------------
00014ECA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014ECA                            ; ---------------------------------------------------------------------------
00014ECA                            
00014ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ECA                            
00014ECA                            
00014ECA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014ECA 3428 000C                  		move.w	$C(a0),d2
00014ECE 3628 0008                  		move.w	8(a0),d3
00014ED2 7000                       		moveq	#0,d0
00014ED4 1028 0017                  		move.b	$17(a0),d0
00014ED8 4880                       		ext.w	d0
00014EDA 9440                       		sub.w	d0,d2
00014EDC 1028 0016                  		move.b	$16(a0),d0
00014EE0 4880                       		ext.w	d0
00014EE2 9640                       		sub.w	d0,d3
00014EE4 0A43 000F                  		eori.w	#$F,d3
00014EE8 49F8 F768                  		lea	($FFFFF768).w,a4
00014EEC 367C FFF0                  		movea.w	#-$10,a3
00014EF0 3C3C 0800                  		move.w	#$800,d6
00014EF4 7A0D                       		moveq	#$D,d5
00014EF6 6100 0000                  		bsr.w	FindWall
00014EFA 3F01                       		move.w	d1,-(sp)
00014EFC 3428 000C                  		move.w	$C(a0),d2
00014F00 3628 0008                  		move.w	8(a0),d3
00014F04 7000                       		moveq	#0,d0
00014F06 1028 0017                  		move.b	$17(a0),d0
00014F0A 4880                       		ext.w	d0
00014F0C D440                       		add.w	d0,d2
00014F0E 1028 0016                  		move.b	$16(a0),d0
00014F12 4880                       		ext.w	d0
00014F14 9640                       		sub.w	d0,d3
00014F16 0A43 000F                  		eori.w	#$F,d3
00014F1A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F1E 367C FFF0                  		movea.w	#-$10,a3
00014F22 3C3C 0800                  		move.w	#$800,d6
00014F26 7A0D                       		moveq	#$D,d5
00014F28 6100 0000                  		bsr.w	FindWall
00014F2C 301F                       		move.w	(sp)+,d0
00014F2E 6100 FE30                  		bsr.w	Sonic_Angle
00014F32 4A41                       		tst.w	d1
00014F34 6700                       		beq.s	locret_14934
00014F36 6A00                       		bpl.s	loc_14936
00014F38 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F3C 6D00 FDDC                  		blt.w	locret_1470A
00014F40 9368 0008                  		sub.w	d1,8(a0)
00014F44                            
00014F44                            locret_14934:
00014F44 4E75                       		rts	
00014F46                            ; ===========================================================================
00014F46                            
00014F46                            loc_14936:
00014F46 0C41 000E                  		cmpi.w	#$E,d1
00014F4A 6E00                       		bgt.s	loc_14942
00014F4C                            
00014F4C                            loc_1493C:
00014F4C 9368 0008                  		sub.w	d1,8(a0)
00014F50 4E75                       		rts	
00014F52                            ; ===========================================================================
00014F52                            
00014F52                            loc_14942:
00014F52 4A28 0038                  		tst.b	$38(a0)
00014F56 66F4                       		bne.s	loc_1493C
00014F58 08E8 0001 0022             		bset	#1,$22(a0)
00014F5E 08A8 0005 0022             		bclr	#5,$22(a0)
00014F64 117C 0001 001D             		move.b	#1,$1D(a0)
00014F6A 4E75                       		rts	
00014F6C                            ; End of function Sonic_WalkVertL
00014F6C                            
00014F6C                            ; ---------------------------------------------------------------------------
00014F6C                            ; Subroutine to	find which tile	the object is standing on
00014F6C                            ; ---------------------------------------------------------------------------
00014F6C                            
00014F6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F6C                            
00014F6C                            
00014F6C                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F6C 3002                       		move.w	d2,d0
00014F6E E248                       		lsr.w	#1,d0
00014F70 0240 0380                  		andi.w	#$380,d0
00014F74 3203                       		move.w	d3,d1
00014F76 E049                       		lsr.w	#8,d1
00014F78 0241 007F                  		andi.w	#$7F,d1
00014F7C D041                       		add.w	d1,d0
00014F7E 72FF                       		moveq	#-1,d1
00014F80 43F8 A400                  		lea	($FFFFA400).w,a1
00014F84 1231 0000                  		move.b	(a1,d0.w),d1
00014F88 6700                       		beq.s	loc_14996
00014F8A 6B00                       		bmi.s	loc_1499A
00014F8C 5301                       		subq.b	#1,d1
00014F8E 4881                       		ext.w	d1
00014F90 EE59                       		ror.w	#7,d1
00014F92 3002                       		move.w	d2,d0
00014F94 D040                       		add.w	d0,d0
00014F96 0240 01E0                  		andi.w	#$1E0,d0
00014F9A D240                       		add.w	d0,d1
00014F9C 3003                       		move.w	d3,d0
00014F9E E648                       		lsr.w	#3,d0
00014FA0 0240 001E                  		andi.w	#$1E,d0
00014FA4 D240                       		add.w	d0,d1
00014FA6                            
00014FA6                            loc_14996:
00014FA6 2241                       		movea.l	d1,a1
00014FA8 4E75                       		rts	
00014FAA                            ; ===========================================================================
00014FAA                            
00014FAA                            loc_1499A:
00014FAA 0241 007F                  		andi.w	#$7F,d1
00014FAE 0828 0006 0001             		btst	#6,1(a0)
00014FB4 6700                       		beq.s	loc_149B2
00014FB6 5241                       		addq.w	#1,d1
00014FB8 0C41 0029                  		cmpi.w	#$29,d1
00014FBC 6600                       		bne.s	loc_149B2
00014FBE 323C 0051                  		move.w	#$51,d1
00014FC2                            
00014FC2                            loc_149B2:
00014FC2 5301                       		subq.b	#1,d1
00014FC4 EE59                       		ror.w	#7,d1
00014FC6 3002                       		move.w	d2,d0
00014FC8 D040                       		add.w	d0,d0
00014FCA 0240 01E0                  		andi.w	#$1E0,d0
00014FCE D240                       		add.w	d0,d1
00014FD0 3003                       		move.w	d3,d0
00014FD2 E648                       		lsr.w	#3,d0
00014FD4 0240 001E                  		andi.w	#$1E,d0
00014FD8 D240                       		add.w	d0,d1
00014FDA 2241                       		movea.l	d1,a1
00014FDC 4E75                       		rts	
00014FDE                            ; End of function Floor_ChkTile
00014FDE                            
00014FDE                            
00014FDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FDE                            
00014FDE                            
00014FDE                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014FDE 618C                       		bsr.s	Floor_ChkTile
00014FE0 3011                       		move.w	(a1),d0
00014FE2 3800                       		move.w	d0,d4
00014FE4 0240 07FF                  		andi.w	#$7FF,d0
00014FE8 6700                       		beq.s	loc_149DE
00014FEA 0B04                       		btst	d5,d4
00014FEC 6600                       		bne.s	loc_149EC
00014FEE                            
00014FEE                            loc_149DE:
00014FEE D44B                       		add.w	a3,d2
00014FF0 6100 0000                  		bsr.w	FindFloor2
00014FF4 944B                       		sub.w	a3,d2
00014FF6 0641 0010                  		addi.w	#$10,d1
00014FFA 4E75                       		rts	
00014FFC                            ; ===========================================================================
00014FFC                            
00014FFC                            loc_149EC:
00014FFC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015000 1032 0000                  		move.b	(a2,d0.w),d0
00015004 0240 00FF                  		andi.w	#$FF,d0
00015008 67E4                       		beq.s	loc_149DE
0001500A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015010 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015014 E948                       		lsl.w	#4,d0
00015016 3203                       		move.w	d3,d1
00015018 0804 000B                  		btst	#$B,d4
0001501C 6700                       		beq.s	loc_14A12
0001501E 4641                       		not.w	d1
00015020 4414                       		neg.b	(a4)
00015022                            
00015022                            loc_14A12:
00015022 0804 000C                  		btst	#$C,d4
00015026 6700                       		beq.s	loc_14A22
00015028 0614 0040                  		addi.b	#$40,(a4)
0001502C 4414                       		neg.b	(a4)
0001502E 0414 0040                  		subi.b	#$40,(a4)
00015032                            
00015032                            loc_14A22:
00015032 0241 000F                  		andi.w	#$F,d1
00015036 D240                       		add.w	d0,d1
00015038 45F9 0000 0000             		lea	(CollArray1).l,a2
0001503E 1032 1000                  		move.b	(a2,d1.w),d0
00015042 4880                       		ext.w	d0
00015044 BD44                       		eor.w	d6,d4
00015046 0804 000C                  		btst	#$C,d4
0001504A 6700                       		beq.s	loc_14A3E
0001504C 4440                       		neg.w	d0
0001504E                            
0001504E                            loc_14A3E:
0001504E 4A40                       		tst.w	d0
00015050 679C                       		beq.s	loc_149DE
00015052 6B00                       		bmi.s	loc_14A5A
00015054 0C00 0010                  		cmpi.b	#$10,d0
00015058 6700                       		beq.s	loc_14A66
0001505A 3202                       		move.w	d2,d1
0001505C 0241 000F                  		andi.w	#$F,d1
00015060 D041                       		add.w	d1,d0
00015062 323C 000F                  		move.w	#$F,d1
00015066 9240                       		sub.w	d0,d1
00015068 4E75                       		rts	
0001506A                            ; ===========================================================================
0001506A                            
0001506A                            loc_14A5A:
0001506A 3202                       		move.w	d2,d1
0001506C 0241 000F                  		andi.w	#$F,d1
00015070 D041                       		add.w	d1,d0
00015072 6A00 FF7A                  		bpl.w	loc_149DE
00015076                            
00015076                            loc_14A66:
00015076 944B                       		sub.w	a3,d2
00015078 6100 0000                  		bsr.w	FindFloor2
0001507C D44B                       		add.w	a3,d2
0001507E 0441 0010                  		subi.w	#$10,d1
00015082 4E75                       		rts	
00015084                            ; End of function FindFloor
00015084                            
00015084                            
00015084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015084                            
00015084                            
00015084                            FindFloor2:				; XREF: FindFloor
00015084 6100 FEE6                  		bsr.w	Floor_ChkTile
00015088 3011                       		move.w	(a1),d0
0001508A 3800                       		move.w	d0,d4
0001508C 0240 07FF                  		andi.w	#$7FF,d0
00015090 6700                       		beq.s	loc_14A86
00015092 0B04                       		btst	d5,d4
00015094 6600                       		bne.s	loc_14A94
00015096                            
00015096                            loc_14A86:
00015096 323C 000F                  		move.w	#$F,d1
0001509A 3002                       		move.w	d2,d0
0001509C 0240 000F                  		andi.w	#$F,d0
000150A0 9240                       		sub.w	d0,d1
000150A2 4E75                       		rts	
000150A4                            ; ===========================================================================
000150A4                            
000150A4                            loc_14A94:
000150A4 2478 F796                  		movea.l	($FFFFF796).w,a2
000150A8 1032 0000                  		move.b	(a2,d0.w),d0
000150AC 0240 00FF                  		andi.w	#$FF,d0
000150B0 67E4                       		beq.s	loc_14A86
000150B2 45F9 0000 0000             		lea	(AngleMap).l,a2
000150B8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150BC E948                       		lsl.w	#4,d0
000150BE 3203                       		move.w	d3,d1
000150C0 0804 000B                  		btst	#$B,d4
000150C4 6700                       		beq.s	loc_14ABA
000150C6 4641                       		not.w	d1
000150C8 4414                       		neg.b	(a4)
000150CA                            
000150CA                            loc_14ABA:
000150CA 0804 000C                  		btst	#$C,d4
000150CE 6700                       		beq.s	loc_14ACA
000150D0 0614 0040                  		addi.b	#$40,(a4)
000150D4 4414                       		neg.b	(a4)
000150D6 0414 0040                  		subi.b	#$40,(a4)
000150DA                            
000150DA                            loc_14ACA:
000150DA 0241 000F                  		andi.w	#$F,d1
000150DE D240                       		add.w	d0,d1
000150E0 45F9 0000 0000             		lea	(CollArray1).l,a2
000150E6 1032 1000                  		move.b	(a2,d1.w),d0
000150EA 4880                       		ext.w	d0
000150EC BD44                       		eor.w	d6,d4
000150EE 0804 000C                  		btst	#$C,d4
000150F2 6700                       		beq.s	loc_14AE6
000150F4 4440                       		neg.w	d0
000150F6                            
000150F6                            loc_14AE6:
000150F6 4A40                       		tst.w	d0
000150F8 679C                       		beq.s	loc_14A86
000150FA 6B00                       		bmi.s	loc_14AFC
000150FC 3202                       		move.w	d2,d1
000150FE 0241 000F                  		andi.w	#$F,d1
00015102 D041                       		add.w	d1,d0
00015104 323C 000F                  		move.w	#$F,d1
00015108 9240                       		sub.w	d0,d1
0001510A 4E75                       		rts	
0001510C                            ; ===========================================================================
0001510C                            
0001510C                            loc_14AFC:
0001510C 3202                       		move.w	d2,d1
0001510E 0241 000F                  		andi.w	#$F,d1
00015112 D041                       		add.w	d1,d0
00015114 6A00 FF80                  		bpl.w	loc_14A86
00015118 4641                       		not.w	d1
0001511A 4E75                       		rts	
0001511C                            ; End of function FindFloor2
0001511C                            
0001511C                            
0001511C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001511C                            
0001511C                            
0001511C                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001511C 6100 FE4E                  		bsr.w	Floor_ChkTile
00015120 3011                       		move.w	(a1),d0
00015122 3800                       		move.w	d0,d4
00015124 0240 07FF                  		andi.w	#$7FF,d0
00015128 6700                       		beq.s	loc_14B1E
0001512A 0B04                       		btst	d5,d4
0001512C 6600                       		bne.s	loc_14B2C
0001512E                            
0001512E                            loc_14B1E:
0001512E D64B                       		add.w	a3,d3
00015130 6100 0000                  		bsr.w	FindWall2
00015134 964B                       		sub.w	a3,d3
00015136 0641 0010                  		addi.w	#$10,d1
0001513A 4E75                       		rts	
0001513C                            ; ===========================================================================
0001513C                            
0001513C                            loc_14B2C:
0001513C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015140 1032 0000                  		move.b	(a2,d0.w),d0
00015144 0240 00FF                  		andi.w	#$FF,d0
00015148 67E4                       		beq.s	loc_14B1E
0001514A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015150 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015154 E948                       		lsl.w	#4,d0
00015156 3202                       		move.w	d2,d1
00015158 0804 000C                  		btst	#$C,d4
0001515C 6700                       		beq.s	loc_14B5A
0001515E 4641                       		not.w	d1
00015160 0614 0040                  		addi.b	#$40,(a4)
00015164 4414                       		neg.b	(a4)
00015166 0414 0040                  		subi.b	#$40,(a4)
0001516A                            
0001516A                            loc_14B5A:
0001516A 0804 000B                  		btst	#$B,d4
0001516E 6700                       		beq.s	loc_14B62
00015170 4414                       		neg.b	(a4)
00015172                            
00015172                            loc_14B62:
00015172 0241 000F                  		andi.w	#$F,d1
00015176 D240                       		add.w	d0,d1
00015178 45F9 0000 0000             		lea	(CollArray2).l,a2
0001517E 1032 1000                  		move.b	(a2,d1.w),d0
00015182 4880                       		ext.w	d0
00015184 BD44                       		eor.w	d6,d4
00015186 0804 000B                  		btst	#$B,d4
0001518A 6700                       		beq.s	loc_14B7E
0001518C 4440                       		neg.w	d0
0001518E                            
0001518E                            loc_14B7E:
0001518E 4A40                       		tst.w	d0
00015190 679C                       		beq.s	loc_14B1E
00015192 6B00                       		bmi.s	loc_14B9A
00015194 0C00 0010                  		cmpi.b	#$10,d0
00015198 6700                       		beq.s	loc_14BA6
0001519A 3203                       		move.w	d3,d1
0001519C 0241 000F                  		andi.w	#$F,d1
000151A0 D041                       		add.w	d1,d0
000151A2 323C 000F                  		move.w	#$F,d1
000151A6 9240                       		sub.w	d0,d1
000151A8 4E75                       		rts	
000151AA                            ; ===========================================================================
000151AA                            
000151AA                            loc_14B9A:
000151AA 3203                       		move.w	d3,d1
000151AC 0241 000F                  		andi.w	#$F,d1
000151B0 D041                       		add.w	d1,d0
000151B2 6A00 FF7A                  		bpl.w	loc_14B1E
000151B6                            
000151B6                            loc_14BA6:
000151B6 964B                       		sub.w	a3,d3
000151B8 6100 0000                  		bsr.w	FindWall2
000151BC D64B                       		add.w	a3,d3
000151BE 0441 0010                  		subi.w	#$10,d1
000151C2 4E75                       		rts	
000151C4                            ; End of function FindWall
000151C4                            
000151C4                            
000151C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C4                            
000151C4                            
000151C4                            FindWall2:				; XREF: FindWall
000151C4 6100 FDA6                  		bsr.w	Floor_ChkTile
000151C8 3011                       		move.w	(a1),d0
000151CA 3800                       		move.w	d0,d4
000151CC 0240 07FF                  		andi.w	#$7FF,d0
000151D0 6700                       		beq.s	loc_14BC6
000151D2 0B04                       		btst	d5,d4
000151D4 6600                       		bne.s	loc_14BD4
000151D6                            
000151D6                            loc_14BC6:
000151D6 323C 000F                  		move.w	#$F,d1
000151DA 3003                       		move.w	d3,d0
000151DC 0240 000F                  		andi.w	#$F,d0
000151E0 9240                       		sub.w	d0,d1
000151E2 4E75                       		rts	
000151E4                            ; ===========================================================================
000151E4                            
000151E4                            loc_14BD4:
000151E4 2478 F796                  		movea.l	($FFFFF796).w,a2
000151E8 1032 0000                  		move.b	(a2,d0.w),d0
000151EC 0240 00FF                  		andi.w	#$FF,d0
000151F0 67E4                       		beq.s	loc_14BC6
000151F2 45F9 0000 0000             		lea	(AngleMap).l,a2
000151F8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151FC E948                       		lsl.w	#4,d0
000151FE 3202                       		move.w	d2,d1
00015200 0804 000C                  		btst	#$C,d4
00015204 6700                       		beq.s	loc_14C02
00015206 4641                       		not.w	d1
00015208 0614 0040                  		addi.b	#$40,(a4)
0001520C 4414                       		neg.b	(a4)
0001520E 0414 0040                  		subi.b	#$40,(a4)
00015212                            
00015212                            loc_14C02:
00015212 0804 000B                  		btst	#$B,d4
00015216 6700                       		beq.s	loc_14C0A
00015218 4414                       		neg.b	(a4)
0001521A                            
0001521A                            loc_14C0A:
0001521A 0241 000F                  		andi.w	#$F,d1
0001521E D240                       		add.w	d0,d1
00015220 45F9 0000 0000             		lea	(CollArray2).l,a2
00015226 1032 1000                  		move.b	(a2,d1.w),d0
0001522A 4880                       		ext.w	d0
0001522C BD44                       		eor.w	d6,d4
0001522E 0804 000B                  		btst	#$B,d4
00015232 6700                       		beq.s	loc_14C26
00015234 4440                       		neg.w	d0
00015236                            
00015236                            loc_14C26:
00015236 4A40                       		tst.w	d0
00015238 679C                       		beq.s	loc_14BC6
0001523A 6B00                       		bmi.s	loc_14C3C
0001523C 3203                       		move.w	d3,d1
0001523E 0241 000F                  		andi.w	#$F,d1
00015242 D041                       		add.w	d1,d0
00015244 323C 000F                  		move.w	#$F,d1
00015248 9240                       		sub.w	d0,d1
0001524A 4E75                       		rts	
0001524C                            ; ===========================================================================
0001524C                            
0001524C                            loc_14C3C:
0001524C 3203                       		move.w	d3,d1
0001524E 0241 000F                  		andi.w	#$F,d1
00015252 D041                       		add.w	d1,d0
00015254 6A00 FF80                  		bpl.w	loc_14BC6
00015258 4641                       		not.w	d1
0001525A 4E75                       		rts	
0001525C                            ; End of function FindWall2
0001525C                            
0001525C                            ; ---------------------------------------------------------------------------
0001525C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001525C                            ; ---------------------------------------------------------------------------
0001525C                            
0001525C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001525C                            
0001525C                            
0001525C                            FloorLog_Unk:				; XREF: Level
0001525C 4E75                       		rts	
0001525E                            
0001525E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015264 45F9 0000 0000             		lea	(CollArray1).l,a2
0001526A 363C 00FF                  		move.w	#$FF,d3
0001526E                            
0001526E                            loc_14C5E:
0001526E 7A10                       		moveq	#$10,d5
00015270 343C 000F                  		move.w	#$F,d2
00015274                            
00015274                            loc_14C64:
00015274 7800                       		moveq	#0,d4
00015276 323C 000F                  		move.w	#$F,d1
0001527A                            
0001527A                            loc_14C6A:
0001527A 3019                       		move.w	(a1)+,d0
0001527C EAA8                       		lsr.l	d5,d0
0001527E D944                       		addx.w	d4,d4
00015280 51C9 FFF8                  		dbf	d1,loc_14C6A
00015284                            
00015284 34C4                       		move.w	d4,(a2)+
00015286 92FC 0020                  		suba.w	#$20,a1
0001528A 5345                       		subq.w	#1,d5
0001528C 51CA FFE6                  		dbf	d2,loc_14C64
00015290                            
00015290 D2FC 0020                  		adda.w	#$20,a1
00015294 51CB FFD8                  		dbf	d3,loc_14C5E
00015298                            
00015298 43F9 0000 0000             		lea	(CollArray1).l,a1
0001529E 45F9 0000 0000             		lea	(CollArray2).l,a2
000152A4 6100                       		bsr.s	FloorLog_Unk2
000152A6 43F9 0000 0000             		lea	(CollArray1).l,a1
000152AC 45F9 0000 0000             		lea	(CollArray1).l,a2
000152B2                            
000152B2                            ; End of function FloorLog_Unk
000152B2                            
000152B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152B2                            
000152B2                            
000152B2                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000152B2 363C 0FFF                  		move.w	#$FFF,d3
000152B6                            
000152B6                            loc_14CA6:
000152B6 7400                       		moveq	#0,d2
000152B8 323C 000F                  		move.w	#$F,d1
000152BC 3019                       		move.w	(a1)+,d0
000152BE 6700                       		beq.s	loc_14CD4
000152C0 6B00                       		bmi.s	loc_14CBE
000152C2                            
000152C2                            loc_14CB2:
000152C2 E248                       		lsr.w	#1,d0
000152C4 6400                       		bcc.s	loc_14CB8
000152C6 5202                       		addq.b	#1,d2
000152C8                            
000152C8                            loc_14CB8:
000152C8 51C9 FFF8                  		dbf	d1,loc_14CB2
000152CC                            
000152CC 6000                       		bra.s	loc_14CD6
000152CE                            ; ===========================================================================
000152CE                            
000152CE                            loc_14CBE:
000152CE 0C40 FFFF                  		cmpi.w	#-1,d0
000152D2 6700                       		beq.s	loc_14CD0
000152D4                            
000152D4                            loc_14CC4:
000152D4 E348                       		lsl.w	#1,d0
000152D6 6400                       		bcc.s	loc_14CCA
000152D8 5302                       		subq.b	#1,d2
000152DA                            
000152DA                            loc_14CCA:
000152DA 51C9 FFF8                  		dbf	d1,loc_14CC4
000152DE                            
000152DE 6000                       		bra.s	loc_14CD6
000152E0                            ; ===========================================================================
000152E0                            
000152E0                            loc_14CD0:
000152E0 303C 0010                  		move.w	#$10,d0
000152E4                            
000152E4                            loc_14CD4:
000152E4 3400                       		move.w	d0,d2
000152E6                            
000152E6                            loc_14CD6:
000152E6 14C2                       		move.b	d2,(a2)+
000152E8 51CB FFCC                  		dbf	d3,loc_14CA6
000152EC                            
000152EC 4E75                       		rts	
000152EE                            
000152EE                            ; End of function FloorLog_Unk2
000152EE                            
000152EE                            
000152EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152EE                            
000152EE                            
000152EE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152EE 2628 0008                  		move.l	8(a0),d3
000152F2 2428 000C                  		move.l	$C(a0),d2
000152F6 3228 0010                  		move.w	$10(a0),d1
000152FA 48C1                       		ext.l	d1
000152FC E181                       		asl.l	#8,d1
000152FE D681                       		add.l	d1,d3
00015300 3228 0012                  		move.w	$12(a0),d1
00015304 48C1                       		ext.l	d1
00015306 E181                       		asl.l	#8,d1
00015308 D481                       		add.l	d1,d2
0001530A 4842                       		swap	d2
0001530C 4843                       		swap	d3
0001530E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015312 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015316 1200                       		move.b	d0,d1
00015318 0600 0020                  		addi.b	#$20,d0
0001531C 6A00                       		bpl.s	loc_14D1A
0001531E 1001                       		move.b	d1,d0
00015320 6A00                       		bpl.s	loc_14D14
00015322 5300                       		subq.b	#1,d0
00015324                            
00015324                            loc_14D14:
00015324 0600 0020                  		addi.b	#$20,d0
00015328 6000                       		bra.s	loc_14D24
0001532A                            ; ===========================================================================
0001532A                            
0001532A                            loc_14D1A:
0001532A 1001                       		move.b	d1,d0
0001532C 6A00                       		bpl.s	loc_14D20
0001532E 5200                       		addq.b	#1,d0
00015330                            
00015330                            loc_14D20:
00015330 0600 001F                  		addi.b	#$1F,d0
00015334                            
00015334                            loc_14D24:
00015334 0200 00C0                  		andi.b	#$C0,d0
00015338 6700 0000                  		beq.w	loc_14DF0
0001533C 0C00 0080                  		cmpi.b	#$80,d0
00015340 6700 0000                  		beq.w	loc_14F7C
00015344 0201 0038                  		andi.b	#$38,d1
00015348 6600                       		bne.s	loc_14D3C
0001534A 5042                       		addq.w	#8,d2
0001534C                            
0001534C                            loc_14D3C:
0001534C 0C00 0040                  		cmpi.b	#$40,d0
00015350 6700 0000                  		beq.w	loc_1504A
00015354 6000 0000                  		bra.w	loc_14EBC
00015358                            
00015358                            ; End of function Sonic_WalkSpeed
00015358                            
00015358                            
00015358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015358                            
00015358                            
00015358                            sub_14D48:				; XREF: Sonic_Jump
00015358 11C0 F768                  		move.b	d0,($FFFFF768).w
0001535C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015360 0600 0020                  		addi.b	#$20,d0
00015364 0200 00C0                  		andi.b	#$C0,d0
00015368 0C00 0040                  		cmpi.b	#$40,d0
0001536C 6700 0000                  		beq.w	loc_14FD6
00015370 0C00 0080                  		cmpi.b	#$80,d0
00015374 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015378 0C00 00C0                  		cmpi.b	#$C0,d0
0001537C 6700 0000                  		beq.w	sub_14E50
00015380                            
00015380                            ; End of function sub_14D48
00015380                            
00015380                            ; ---------------------------------------------------------------------------
00015380                            ; Subroutine to	make Sonic land	on the floor after jumping
00015380                            ; ---------------------------------------------------------------------------
00015380                            
00015380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015380                            
00015380                            
00015380                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015380 3428 000C                  		move.w	$C(a0),d2
00015384 3628 0008                  		move.w	8(a0),d3
00015388 7000                       		moveq	#0,d0
0001538A 1028 0016                  		move.b	$16(a0),d0
0001538E 4880                       		ext.w	d0
00015390 D440                       		add.w	d0,d2
00015392 1028 0017                  		move.b	$17(a0),d0
00015396 4880                       		ext.w	d0
00015398 D640                       		add.w	d0,d3
0001539A 49F8 F768                  		lea	($FFFFF768).w,a4
0001539E 367C 0010                  		movea.w	#$10,a3
000153A2 3C3C 0000                  		move.w	#0,d6
000153A6 7A0D                       		moveq	#$D,d5
000153A8 6100 FC34                  		bsr.w	FindFloor
000153AC 3F01                       		move.w	d1,-(sp)
000153AE 3428 000C                  		move.w	$C(a0),d2
000153B2 3628 0008                  		move.w	8(a0),d3
000153B6 7000                       		moveq	#0,d0
000153B8 1028 0016                  		move.b	$16(a0),d0
000153BC 4880                       		ext.w	d0
000153BE D440                       		add.w	d0,d2
000153C0 1028 0017                  		move.b	$17(a0),d0
000153C4 4880                       		ext.w	d0
000153C6 9640                       		sub.w	d0,d3
000153C8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153CC 367C 0010                  		movea.w	#$10,a3
000153D0 3C3C 0000                  		move.w	#0,d6
000153D4 7A0D                       		moveq	#$D,d5
000153D6 6100 FC06                  		bsr.w	FindFloor
000153DA 301F                       		move.w	(sp)+,d0
000153DC 143C 0000                  		move.b	#0,d2
000153E0                            
000153E0                            loc_14DD0:
000153E0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153E4 B240                       		cmp.w	d0,d1
000153E6 6F00                       		ble.s	loc_14DDE
000153E8 1638 F768                  		move.b	($FFFFF768).w,d3
000153EC C141                       		exg	d0,d1
000153EE                            
000153EE                            loc_14DDE:
000153EE 0803 0000                  		btst	#0,d3
000153F2 6700                       		beq.s	locret_14DE6
000153F4 1602                       		move.b	d2,d3
000153F6                            
000153F6                            locret_14DE6:
000153F6 4E75                       		rts	
000153F8                            
000153F8                            ; End of function Sonic_HitFloor
000153F8                            
000153F8                            ; ===========================================================================
000153F8 3428 000C                  		move.w	$C(a0),d2
000153FC 3628 0008                  		move.w	8(a0),d3
00015400                            
00015400                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015400 0642 000A                  		addi.w	#$A,d2
00015404 49F8 F768                  		lea	($FFFFF768).w,a4
00015408 367C 0010                  		movea.w	#$10,a3
0001540C 3C3C 0000                  		move.w	#0,d6
00015410 7A0E                       		moveq	#$E,d5
00015412 6100 FBCA                  		bsr.w	FindFloor
00015416 143C 0000                  		move.b	#0,d2
0001541A                            
0001541A                            loc_14E0A:				; XREF: sub_14EB4
0001541A 1638 F768                  		move.b	($FFFFF768).w,d3
0001541E 0803 0000                  		btst	#0,d3
00015422 6700                       		beq.s	locret_14E16
00015424 1602                       		move.b	d2,d3
00015426                            
00015426                            locret_14E16:
00015426 4E75                       		rts	
00015428                            
00015428                            ; ---------------------------------------------------------------------------
00015428                            ; Subroutine allowing objects to interact with the floor
00015428                            ; ---------------------------------------------------------------------------
00015428                            
00015428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015428                            
00015428                            
00015428                            ObjHitFloor:
00015428 3628 0008                  		move.w	8(a0),d3
0001542C                            
0001542C                            ; End of function ObjHitFloor
0001542C                            
0001542C                            
0001542C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001542C                            
0001542C                            
0001542C                            ObjHitFloor2:
0001542C 3428 000C                  		move.w	$C(a0),d2
00015430 7000                       		moveq	#0,d0
00015432 1028 0016                  		move.b	$16(a0),d0
00015436 4880                       		ext.w	d0
00015438 D440                       		add.w	d0,d2
0001543A 49F8 F768                  		lea	($FFFFF768).w,a4
0001543E 18BC 0000                  		move.b	#0,(a4)
00015442 367C 0010                  		movea.w	#$10,a3
00015446 3C3C 0000                  		move.w	#0,d6
0001544A 7A0D                       		moveq	#$D,d5
0001544C 6100 FB90                  		bsr.w	FindFloor
00015450 1638 F768                  		move.b	($FFFFF768).w,d3
00015454 0803 0000                  		btst	#0,d3
00015458 6700                       		beq.s	locret_14E4E
0001545A 163C 0000                  		move.b	#0,d3
0001545E                            
0001545E                            locret_14E4E:
0001545E 4E75                       		rts	
00015460                            ; End of function ObjHitFloor2
00015460                            
00015460                            
00015460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015460                            
00015460                            
00015460                            sub_14E50:				; XREF: sub_14D48
00015460 3428 000C                  		move.w	$C(a0),d2
00015464 3628 0008                  		move.w	8(a0),d3
00015468 7000                       		moveq	#0,d0
0001546A 1028 0017                  		move.b	$17(a0),d0
0001546E 4880                       		ext.w	d0
00015470 9440                       		sub.w	d0,d2
00015472 1028 0016                  		move.b	$16(a0),d0
00015476 4880                       		ext.w	d0
00015478 D640                       		add.w	d0,d3
0001547A 49F8 F768                  		lea	($FFFFF768).w,a4
0001547E 367C 0010                  		movea.w	#$10,a3
00015482 3C3C 0000                  		move.w	#0,d6
00015486 7A0E                       		moveq	#$E,d5
00015488 6100 FC92                  		bsr.w	FindWall
0001548C 3F01                       		move.w	d1,-(sp)
0001548E 3428 000C                  		move.w	$C(a0),d2
00015492 3628 0008                  		move.w	8(a0),d3
00015496 7000                       		moveq	#0,d0
00015498 1028 0017                  		move.b	$17(a0),d0
0001549C 4880                       		ext.w	d0
0001549E D440                       		add.w	d0,d2
000154A0 1028 0016                  		move.b	$16(a0),d0
000154A4 4880                       		ext.w	d0
000154A6 D640                       		add.w	d0,d3
000154A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000154AC 367C 0010                  		movea.w	#$10,a3
000154B0 3C3C 0000                  		move.w	#0,d6
000154B4 7A0E                       		moveq	#$E,d5
000154B6 6100 FC64                  		bsr.w	FindWall
000154BA 301F                       		move.w	(sp)+,d0
000154BC 143C 00C0                  		move.b	#-$40,d2
000154C0 6000 FF1E                  		bra.w	loc_14DD0
000154C4                            
000154C4                            ; End of function sub_14E50
000154C4                            
000154C4                            
000154C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154C4                            
000154C4                            
000154C4                            sub_14EB4:				; XREF: Sonic_Floor
000154C4 3428 000C                  		move.w	$C(a0),d2
000154C8 3628 0008                  		move.w	8(a0),d3
000154CC                            
000154CC                            loc_14EBC:
000154CC 0643 000A                  		addi.w	#$A,d3
000154D0 49F8 F768                  		lea	($FFFFF768).w,a4
000154D4 367C 0010                  		movea.w	#$10,a3
000154D8 3C3C 0000                  		move.w	#0,d6
000154DC 7A0E                       		moveq	#$E,d5
000154DE 6100 FC3C                  		bsr.w	FindWall
000154E2 143C 00C0                  		move.b	#-$40,d2
000154E6 6000 FF32                  		bra.w	loc_14E0A
000154EA                            
000154EA                            ; End of function sub_14EB4
000154EA                            
000154EA                            ; ---------------------------------------------------------------------------
000154EA                            ; Subroutine to	detect when an object hits a wall to its right
000154EA                            ; ---------------------------------------------------------------------------
000154EA                            
000154EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154EA                            
000154EA                            
000154EA                            ObjHitWallRight:
000154EA D668 0008                  		add.w	8(a0),d3
000154EE 3428 000C                  		move.w	$C(a0),d2
000154F2 49F8 F768                  		lea	($FFFFF768).w,a4
000154F6 18BC 0000                  		move.b	#0,(a4)
000154FA 367C 0010                  		movea.w	#$10,a3
000154FE 3C3C 0000                  		move.w	#0,d6
00015502 7A0E                       		moveq	#$E,d5
00015504 6100 FC16                  		bsr.w	FindWall
00015508 1638 F768                  		move.b	($FFFFF768).w,d3
0001550C 0803 0000                  		btst	#0,d3
00015510 6700                       		beq.s	locret_14F06
00015512 163C 00C0                  		move.b	#-$40,d3
00015516                            
00015516                            locret_14F06:
00015516 4E75                       		rts	
00015518                            
00015518                            ; End of function ObjHitWallRight
00015518                            
00015518                            ; ---------------------------------------------------------------------------
00015518                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015518                            ; touches them
00015518                            ; ---------------------------------------------------------------------------
00015518                            
00015518                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015518                            
00015518                            
00015518                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015518 3428 000C                  		move.w	$C(a0),d2
0001551C 3628 0008                  		move.w	8(a0),d3
00015520 7000                       		moveq	#0,d0
00015522 1028 0016                  		move.b	$16(a0),d0
00015526 4880                       		ext.w	d0
00015528 9440                       		sub.w	d0,d2
0001552A 0A42 000F                  		eori.w	#$F,d2
0001552E 1028 0017                  		move.b	$17(a0),d0
00015532 4880                       		ext.w	d0
00015534 D640                       		add.w	d0,d3
00015536 49F8 F768                  		lea	($FFFFF768).w,a4
0001553A 367C FFF0                  		movea.w	#-$10,a3
0001553E 3C3C 1000                  		move.w	#$1000,d6
00015542 7A0E                       		moveq	#$E,d5
00015544 6100 FA98                  		bsr.w	FindFloor
00015548 3F01                       		move.w	d1,-(sp)
0001554A 3428 000C                  		move.w	$C(a0),d2
0001554E 3628 0008                  		move.w	8(a0),d3
00015552 7000                       		moveq	#0,d0
00015554 1028 0016                  		move.b	$16(a0),d0
00015558 4880                       		ext.w	d0
0001555A 9440                       		sub.w	d0,d2
0001555C 0A42 000F                  		eori.w	#$F,d2
00015560 1028 0017                  		move.b	$17(a0),d0
00015564 4880                       		ext.w	d0
00015566 9640                       		sub.w	d0,d3
00015568 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001556C 367C FFF0                  		movea.w	#-$10,a3
00015570 3C3C 1000                  		move.w	#$1000,d6
00015574 7A0E                       		moveq	#$E,d5
00015576 6100 FA66                  		bsr.w	FindFloor
0001557A 301F                       		move.w	(sp)+,d0
0001557C 143C 0080                  		move.b	#-$80,d2
00015580 6000 FE5E                  		bra.w	loc_14DD0
00015584                            ; End of function Sonic_DontRunOnWalls
00015584                            
00015584                            ; ===========================================================================
00015584 3428 000C                  		move.w	$C(a0),d2
00015588 3628 0008                  		move.w	8(a0),d3
0001558C                            
0001558C                            loc_14F7C:
0001558C 0442 000A                  		subi.w	#$A,d2
00015590 0A42 000F                  		eori.w	#$F,d2
00015594 49F8 F768                  		lea	($FFFFF768).w,a4
00015598 367C FFF0                  		movea.w	#-$10,a3
0001559C 3C3C 1000                  		move.w	#$1000,d6
000155A0 7A0E                       		moveq	#$E,d5
000155A2 6100 FA3A                  		bsr.w	FindFloor
000155A6 143C 0080                  		move.b	#-$80,d2
000155AA 6000 FE6E                  		bra.w	loc_14E0A
000155AE                            
000155AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155AE                            
000155AE                            
000155AE                            ObjHitCeiling:
000155AE 3428 000C                  		move.w	$C(a0),d2
000155B2 3628 0008                  		move.w	8(a0),d3
000155B6 7000                       		moveq	#0,d0
000155B8 1028 0016                  		move.b	$16(a0),d0
000155BC 4880                       		ext.w	d0
000155BE 9440                       		sub.w	d0,d2
000155C0 0A42 000F                  		eori.w	#$F,d2
000155C4 49F8 F768                  		lea	($FFFFF768).w,a4
000155C8 367C FFF0                  		movea.w	#-$10,a3
000155CC 3C3C 1000                  		move.w	#$1000,d6
000155D0 7A0E                       		moveq	#$E,d5
000155D2 6100 FA0A                  		bsr.w	FindFloor
000155D6 1638 F768                  		move.b	($FFFFF768).w,d3
000155DA 0803 0000                  		btst	#0,d3
000155DE 6700                       		beq.s	locret_14FD4
000155E0 163C 0080                  		move.b	#-$80,d3
000155E4                            
000155E4                            locret_14FD4:
000155E4 4E75                       		rts	
000155E6                            ; End of function ObjHitCeiling
000155E6                            
000155E6                            ; ===========================================================================
000155E6                            
000155E6                            loc_14FD6:				; XREF: sub_14D48
000155E6 3428 000C                  		move.w	$C(a0),d2
000155EA 3628 0008                  		move.w	8(a0),d3
000155EE 7000                       		moveq	#0,d0
000155F0 1028 0017                  		move.b	$17(a0),d0
000155F4 4880                       		ext.w	d0
000155F6 9440                       		sub.w	d0,d2
000155F8 1028 0016                  		move.b	$16(a0),d0
000155FC 4880                       		ext.w	d0
000155FE 9640                       		sub.w	d0,d3
00015600 0A43 000F                  		eori.w	#$F,d3
00015604 49F8 F768                  		lea	($FFFFF768).w,a4
00015608 367C FFF0                  		movea.w	#-$10,a3
0001560C 3C3C 0800                  		move.w	#$800,d6
00015610 7A0E                       		moveq	#$E,d5
00015612 6100 FB08                  		bsr.w	FindWall
00015616 3F01                       		move.w	d1,-(sp)
00015618 3428 000C                  		move.w	$C(a0),d2
0001561C 3628 0008                  		move.w	8(a0),d3
00015620 7000                       		moveq	#0,d0
00015622 1028 0017                  		move.b	$17(a0),d0
00015626 4880                       		ext.w	d0
00015628 D440                       		add.w	d0,d2
0001562A 1028 0016                  		move.b	$16(a0),d0
0001562E 4880                       		ext.w	d0
00015630 9640                       		sub.w	d0,d3
00015632 0A43 000F                  		eori.w	#$F,d3
00015636 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001563A 367C FFF0                  		movea.w	#-$10,a3
0001563E 3C3C 0800                  		move.w	#$800,d6
00015642 7A0E                       		moveq	#$E,d5
00015644 6100 FAD6                  		bsr.w	FindWall
00015648 301F                       		move.w	(sp)+,d0
0001564A 143C 0040                  		move.b	#$40,d2
0001564E 6000 FD90                  		bra.w	loc_14DD0
00015652                            
00015652                            ; ---------------------------------------------------------------------------
00015652                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015652                            ; ---------------------------------------------------------------------------
00015652                            
00015652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015652                            
00015652                            
00015652                            Sonic_HitWall:				; XREF: Sonic_Floor
00015652 3428 000C                  		move.w	$C(a0),d2
00015656 3628 0008                  		move.w	8(a0),d3
0001565A                            
0001565A                            loc_1504A:
0001565A 0443 000A                  		subi.w	#$A,d3
0001565E 0A43 000F                  		eori.w	#$F,d3
00015662 49F8 F768                  		lea	($FFFFF768).w,a4
00015666 367C FFF0                  		movea.w	#-$10,a3
0001566A 3C3C 0800                  		move.w	#$800,d6
0001566E 7A0E                       		moveq	#$E,d5
00015670 6100 FAAA                  		bsr.w	FindWall
00015674 143C 0040                  		move.b	#$40,d2
00015678 6000 FDA0                  		bra.w	loc_14E0A
0001567C                            ; End of function Sonic_HitWall
0001567C                            
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            ; Subroutine to	detect when an object hits a wall to its left
0001567C                            ; ---------------------------------------------------------------------------
0001567C                            
0001567C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001567C                            
0001567C                            
0001567C                            ObjHitWallLeft:
0001567C D668 0008                  		add.w	8(a0),d3
00015680 3428 000C                  		move.w	$C(a0),d2
00015684 49F8 F768                  		lea	($FFFFF768).w,a4
00015688 18BC 0000                  		move.b	#0,(a4)
0001568C 367C FFF0                  		movea.w	#-$10,a3
00015690 3C3C 0800                  		move.w	#$800,d6
00015694 7A0E                       		moveq	#$E,d5
00015696 6100 FA84                  		bsr.w	FindWall
0001569A 1638 F768                  		move.b	($FFFFF768).w,d3
0001569E 0803 0000                  		btst	#0,d3
000156A2 6700                       		beq.s	locret_15098
000156A4 163C 0040                  		move.b	#$40,d3
000156A8                            
000156A8                            locret_15098:
000156A8 4E75                       		rts	
000156AA                            ; End of function ObjHitWallLeft
000156AA                            
000156AA                            ; ===========================================================================
000156AA                            ; ---------------------------------------------------------------------------
000156AA                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000156AA                            ; ---------------------------------------------------------------------------
000156AA                            
000156AA                            Obj66:					; XREF: Obj_Index
000156AA 7000                       		moveq	#0,d0
000156AC 1028 0024                  		move.b	$24(a0),d0
000156B0 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000156B4 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000156B8                            ; ===========================================================================
000156B8 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000156BA 0000                       		dc.w Obj66_Action-Obj66_Index
000156BC 0000                       		dc.w Obj66_Display-Obj66_Index
000156BE 0000                       		dc.w Obj66_Release-Obj66_Index
000156C0                            ; ===========================================================================
000156C0                            
000156C0                            Obj66_Main:				; XREF: Obj66_Index
000156C0 5428 0024                  		addq.b	#2,$24(a0)
000156C4 323C 0001                  		move.w	#1,d1
000156C8 2248                       		movea.l	a0,a1
000156CA 6000                       		bra.s	Obj66_MakeItem
000156CC                            ; ===========================================================================
000156CC                            
000156CC                            Obj66_Loop:
000156CC 6100 8984                  		bsr.w	SingleObjLoad
000156D0 6600                       		bne.s	loc_150FE
000156D2 12BC 0066                  		move.b	#$66,0(a1)
000156D6 5829 0024                  		addq.b	#4,$24(a1)
000156DA 3368 0008 0008             		move.w	8(a0),8(a1)
000156E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156E6 137C 0003 0018             		move.b	#3,$18(a1)
000156EC 137C 0010 001A             		move.b	#$10,$1A(a1)
000156F2                            
000156F2                            Obj66_MakeItem:				; XREF: Obj66_Main
000156F2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156FA 337C 4348 0002             		move.w	#$4348,2(a1)
00015700 0029 0004 0001             		ori.b	#4,1(a1)
00015706 137C 0038 0019             		move.b	#$38,$19(a1)
0001570C                            
0001570C                            loc_150FE:
0001570C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015710                            
00015710 117C 0030 0019             		move.b	#$30,$19(a0)
00015716 117C 0004 0018             		move.b	#4,$18(a0)
0001571C 317C 003C 0030             		move.w	#$3C,$30(a0)
00015722 117C 0001 0034             		move.b	#1,$34(a0)
00015728 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001572E                            
0001572E                            Obj66_Action:				; XREF: Obj66_Index
0001572E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015732 4A28 0001                  		tst.b	1(a0)
00015736 6A00 0000                  		bpl.w	Obj66_Display
0001573A 323C 0030                  		move.w	#$30,d1
0001573E 3401                       		move.w	d1,d2
00015740 3602                       		move.w	d2,d3
00015742 5243                       		addq.w	#1,d3
00015744 3828 0008                  		move.w	8(a0),d4
00015748 6100 A852                  		bsr.w	SolidObject
0001574C 0828 0005 0022             		btst	#5,$22(a0)
00015752 6700 0000                  		beq.w	Obj66_Display
00015756 43F8 D000                  		lea	($FFFFD000).w,a1
0001575A 720E                       		moveq	#$E,d1
0001575C 3029 0008                  		move.w	8(a1),d0
00015760 B068 0008                  		cmp.w	8(a0),d0
00015764 6500                       		bcs.s	Obj66_GrabSonic
00015766 7207                       		moveq	#7,d1
00015768                            
00015768                            Obj66_GrabSonic:
00015768 B228 001A                  		cmp.b	$1A(a0),d1
0001576C 6600                       		bne.s	Obj66_Display
0001576E 1141 0032                  		move.b	d1,$32(a0)
00015772 5828 0024                  		addq.b	#4,$24(a0)
00015776 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001577C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015782 337C 0800 0014             		move.w	#$800,$14(a1)
00015788 337C 0000 0010             		move.w	#0,$10(a1)
0001578E 337C 0000 0012             		move.w	#0,$12(a1)
00015794 08A8 0005 0022             		bclr	#5,$22(a0)
0001579A 08A9 0005 0022             		bclr	#5,$22(a1)
000157A0 08E9 0001 0022             		bset	#1,$22(a1)
000157A6 3429 0008                  		move.w	8(a1),d2
000157AA 3629 000C                  		move.w	$C(a1),d3
000157AE 6100 0000                  		bsr.w	Obj66_ChgPos
000157B2 D569 0008                  		add.w	d2,8(a1)
000157B6 D769 000C                  		add.w	d3,$C(a1)
000157BA E0E9 0008                  		asr	8(a1)
000157BE E0E9 000C                  		asr	$C(a1)
000157C2                            
000157C2                            Obj66_Display:				; XREF: Obj66_Index
000157C2 6000 A4B0                  		bra.w	MarkObjGone
000157C6                            ; ===========================================================================
000157C6                            
000157C6                            Obj66_Release:				; XREF: Obj66_Index
000157C6 1028 001A                  		move.b	$1A(a0),d0
000157CA 0C00 0004                  		cmpi.b	#4,d0
000157CE 6700                       		beq.s	loc_151C8
000157D0 0C00 0007                  		cmpi.b	#7,d0
000157D4 6600                       		bne.s	loc_151F8
000157D6                            
000157D6                            loc_151C8:
000157D6 B028 0032                  		cmp.b	$32(a0),d0
000157DA 6700                       		beq.s	loc_151F8
000157DC 43F8 D000                  		lea	($FFFFD000).w,a1
000157E0 337C 0000 0010             		move.w	#0,$10(a1)
000157E6 337C 0800 0012             		move.w	#$800,$12(a1)
000157EC 0C00 0004                  		cmpi.b	#4,d0
000157F0 6700                       		beq.s	loc_151F0
000157F2 337C 0800 0010             		move.w	#$800,$10(a1)
000157F8 337C 0800 0012             		move.w	#$800,$12(a1)
000157FE                            
000157FE                            loc_151F0:
000157FE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015802 5928 0024                  		subq.b	#4,$24(a0)
00015806                            
00015806                            loc_151F8:
00015806 6100                       		bsr.s	Obj66_ChkSwitch
00015808 6100                       		bsr.s	Obj66_ChgPos
0001580A 6000 A468                  		bra.w	MarkObjGone
0001580E                            
0001580E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001580E                            
0001580E                            
0001580E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001580E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015812 7000                       		moveq	#0,d0
00015814 1028 0038                  		move.b	$38(a0),d0
00015818 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001581E 6700                       		beq.s	loc_15224	; if not, branch
00015820 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015824 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015826 4428 0034                  		neg.b	$34(a0)
0001582A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015830 6000                       		bra.s	Obj66_Animate
00015832                            ; ===========================================================================
00015832                            
00015832                            loc_15224:
00015832 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015836                            
00015836                            Obj66_Animate:
00015836 5328 001E                  		subq.b	#1,$1E(a0)
0001583A 6A00                       		bpl.s	locret_15246
0001583C 117C 0007 001E             		move.b	#7,$1E(a0)
00015842 1228 0034                  		move.b	$34(a0),d1
00015846 1028 001A                  		move.b	$1A(a0),d0
0001584A D001                       		add.b	d1,d0
0001584C 0200 000F                  		andi.b	#$F,d0
00015850 1140 001A                  		move.b	d0,$1A(a0)
00015854                            
00015854                            locret_15246:
00015854 4E75                       		rts	
00015856                            ; End of function Obj66_ChkSwitch
00015856                            
00015856                            
00015856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015856                            
00015856                            
00015856                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015856 43F8 D000                  		lea	($FFFFD000).w,a1
0001585A 7000                       		moveq	#0,d0
0001585C 1028 001A                  		move.b	$1A(a0),d0
00015860 D040                       		add.w	d0,d0
00015862 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015866 101A                       		move.b	(a2)+,d0
00015868 4880                       		ext.w	d0
0001586A D068 0008                  		add.w	8(a0),d0
0001586E 3340 0008                  		move.w	d0,8(a1)
00015872 101A                       		move.b	(a2)+,d0
00015874 4880                       		ext.w	d0
00015876 D068 000C                  		add.w	$C(a0),d0
0001587A 3340 000C                  		move.w	d0,$C(a1)
0001587E 4E75                       		rts	
00015880                            ; End of function Obj66_ChgPos
00015880                            
00015880                            ; ===========================================================================
00015880 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015884 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015888 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
0001588C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015890 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015894 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015898 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
0001589C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000158A0                            ; ---------------------------------------------------------------------------
000158A0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000158A0                            ; ---------------------------------------------------------------------------
000158A0                            Map_obj66:
000158A0                            	include "_maps\obj66.asm"
000158A0                            ; ---------------------------------------------------------------------------
000158A0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000158A0                            ; ---------------------------------------------------------------------------
000158A0 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000158A4 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000158A8 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000158AC 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000158B0 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000158B4 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000158B8 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000158BC 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000158C0 0000                       		dc.w byte_154A4-Map_obj66
000158C2 06                         byte_152B4:	dc.b 6
000158C3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000158C8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000158CD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000158D2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000158D7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000158DC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000158E1 06                         byte_152D3:	dc.b 6
000158E2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158E7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158EC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158F1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158F6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158FB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015900 06                         byte_152F2:	dc.b 6
00015901 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015906 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001590B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015910 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015915 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001591A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001591F 06                         byte_15311:	dc.b 6
00015920 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015925 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001592A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001592F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015934 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015939 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001593E 06                         byte_15330:	dc.b 6
0001593F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015944 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015949 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001594E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015953 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015958 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001595D 06                         byte_1534F:	dc.b 6
0001595E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015963 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015968 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001596D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015972 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015977 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001597C 06                         byte_1536E:	dc.b 6
0001597D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015982 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015987 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001598C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015991 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015996 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001599B 06                         byte_1538D:	dc.b 6
0001599C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000159A1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000159A6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000159AB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000159B0 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000159B5 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000159BA 06                         byte_153AC:	dc.b 6
000159BB E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000159C0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000159C5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000159CA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000159CF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000159D4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000159D9 06                         byte_153CB:	dc.b 6
000159DA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000159DF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159E4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159E9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159EE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159F3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159F8 06                         byte_153EA:	dc.b 6
000159F9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159FE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015A03 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015A08 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015A0D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015A12 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015A17 06                         byte_15409:	dc.b 6
00015A18 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015A1D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015A22 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015A27 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015A2C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015A31 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015A36 06                         byte_15428:	dc.b 6
00015A37 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A3C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A41 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A46 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A4B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A50 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A55 06                         byte_15447:	dc.b 6
00015A56 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A5B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A60 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A65 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A6A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A6F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A74 06                         byte_15466:	dc.b 6
00015A75 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A7A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A7F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A84 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A89 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A8E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A93 06                         byte_15485:	dc.b 6
00015A94 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A99 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A9E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015AA3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015AA8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015AAD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015AB2 0C                         byte_154A4:	dc.b $C
00015AB3 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015AB8 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015ABD E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015AC2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015AC7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015ACC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015AD1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015AD6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015ADB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015AE0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015AE5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AEA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015AF0 00                         		even
00015AF0 00                         		even
00015AF0                            
00015AF0                            ; ===========================================================================
00015AF0                            ; ---------------------------------------------------------------------------
00015AF0                            ; Object 67 - disc that	you run	around (SBZ)
00015AF0                            ; ---------------------------------------------------------------------------
00015AF0                            
00015AF0                            Obj67:					; XREF: Obj_Index
00015AF0 7000                       		moveq	#0,d0
00015AF2 1028 0024                  		move.b	$24(a0),d0
00015AF6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015AFA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015AFE                            ; ===========================================================================
00015AFE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015B00 0000                       		dc.w Obj67_Action-Obj67_Index
00015B02                            ; ===========================================================================
00015B02                            
00015B02                            Obj67_Main:				; XREF: Obj67_Index
00015B02 5428 0024                  		addq.b	#2,$24(a0)
00015B06 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015B0E 317C C344 0002             		move.w	#$C344,2(a0)
00015B14 117C 0004 0001             		move.b	#4,1(a0)
00015B1A 117C 0004 0018             		move.b	#4,$18(a0)
00015B20 117C 0008 0019             		move.b	#8,$19(a0)
00015B26 3168 0008 0032             		move.w	8(a0),$32(a0)
00015B2C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015B32 117C 0018 0034             		move.b	#$18,$34(a0)
00015B38 117C 0048 0038             		move.b	#$48,$38(a0)
00015B3E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B42 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B46 6700                       		beq.s	loc_15546
00015B48 117C 0010 0034             		move.b	#$10,$34(a0)
00015B4E 117C 0038 0038             		move.b	#$38,$38(a0)
00015B54                            
00015B54                            loc_15546:
00015B54 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B58 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B5C 4881                       		ext.w	d1
00015B5E E741                       		asl.w	#3,d1
00015B60 3141 0036                  		move.w	d1,$36(a0)
00015B64 1028 0022                  		move.b	$22(a0),d0
00015B68 E418                       		ror.b	#2,d0
00015B6A 0200 00C0                  		andi.b	#-$40,d0
00015B6E 1140 0026                  		move.b	d0,$26(a0)
00015B72                            
00015B72                            Obj67_Action:				; XREF: Obj67_Index
00015B72 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B76 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B7A 6000 0000                  		bra.w	Obj67_ChkDel
00015B7E                            ; ===========================================================================
00015B7E                            
00015B7E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B7E 7400                       		moveq	#0,d2
00015B80 1428 0038                  		move.b	$38(a0),d2
00015B84 3602                       		move.w	d2,d3
00015B86 D643                       		add.w	d3,d3
00015B88 43F8 D000                  		lea	($FFFFD000).w,a1
00015B8C 3029 0008                  		move.w	8(a1),d0
00015B90 9068 0032                  		sub.w	$32(a0),d0
00015B94 D042                       		add.w	d2,d0
00015B96 B043                       		cmp.w	d3,d0
00015B98 6400                       		bcc.s	loc_155A8
00015B9A 3229 000C                  		move.w	$C(a1),d1
00015B9E 9268 0030                  		sub.w	$30(a0),d1
00015BA2 D242                       		add.w	d2,d1
00015BA4 B243                       		cmp.w	d3,d1
00015BA6 6400                       		bcc.s	loc_155A8
00015BA8 0829 0001 0022             		btst	#1,$22(a1)
00015BAE 6700                       		beq.s	loc_155B8
00015BB0 4228 003A                  		clr.b	$3A(a0)
00015BB4 4E75                       		rts	
00015BB6                            ; ===========================================================================
00015BB6                            
00015BB6                            loc_155A8:
00015BB6 4A28 003A                  		tst.b	$3A(a0)
00015BBA 6700                       		beq.s	locret_155B6
00015BBC 4229 0038                  		clr.b	$38(a1)
00015BC0 4228 003A                  		clr.b	$3A(a0)
00015BC4                            
00015BC4                            locret_155B6:
00015BC4 4E75                       		rts	
00015BC6                            ; ===========================================================================
00015BC6                            
00015BC6                            loc_155B8:
00015BC6 4A28 003A                  		tst.b	$3A(a0)
00015BCA 6600                       		bne.s	loc_155E2
00015BCC 117C 0001 003A             		move.b	#1,$3A(a0)
00015BD2 0829 0002 0022             		btst	#2,$22(a1)
00015BD8 6600                       		bne.s	loc_155D0
00015BDA 4229 001C                  		clr.b	$1C(a1)
00015BDE                            
00015BDE                            loc_155D0:
00015BDE 08A9 0005 0022             		bclr	#5,$22(a1)
00015BE4 137C 0001 001D             		move.b	#1,$1D(a1)
00015BEA 137C 0001 0038             		move.b	#1,$38(a1)
00015BF0                            
00015BF0                            loc_155E2:
00015BF0 3029 0014                  		move.w	$14(a1),d0
00015BF4 4A68 0036                  		tst.w	$36(a0)
00015BF8 6A00                       		bpl.s	loc_15608
00015BFA 0C40 FC00                  		cmpi.w	#-$400,d0
00015BFE 6F00                       		ble.s	loc_155FA
00015C00 337C FC00 0014             		move.w	#-$400,$14(a1)
00015C06 4E75                       		rts	
00015C08                            ; ===========================================================================
00015C08                            
00015C08                            loc_155FA:
00015C08 0C40 F100                  		cmpi.w	#-$F00,d0
00015C0C 6C00                       		bge.s	locret_15606
00015C0E 337C F100 0014             		move.w	#-$F00,$14(a1)
00015C14                            
00015C14                            locret_15606:
00015C14 4E75                       		rts	
00015C16                            ; ===========================================================================
00015C16                            
00015C16                            loc_15608:
00015C16 0C40 0400                  		cmpi.w	#$400,d0
00015C1A 6C00                       		bge.s	loc_15616
00015C1C 337C 0400 0014             		move.w	#$400,$14(a1)
00015C22 4E75                       		rts	
00015C24                            ; ===========================================================================
00015C24                            
00015C24                            loc_15616:
00015C24 0C40 0F00                  		cmpi.w	#$F00,d0
00015C28 6F00                       		ble.s	locret_15622
00015C2A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015C30                            
00015C30                            locret_15622:
00015C30 4E75                       		rts	
00015C32                            ; ===========================================================================
00015C32                            
00015C32                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015C32 3028 0036                  		move.w	$36(a0),d0
00015C36 D168 0026                  		add.w	d0,$26(a0)
00015C3A 1028 0026                  		move.b	$26(a0),d0
00015C3E 4EB9 0000 2C82             		jsr	(CalcSine).l
00015C44 3428 0030                  		move.w	$30(a0),d2
00015C48 3628 0032                  		move.w	$32(a0),d3
00015C4C 7800                       		moveq	#0,d4
00015C4E 1828 0034                  		move.b	$34(a0),d4
00015C52 E14C                       		lsl.w	#8,d4
00015C54 2A04                       		move.l	d4,d5
00015C56 C9C0                       		muls.w	d0,d4
00015C58 4844                       		swap	d4
00015C5A CBC1                       		muls.w	d1,d5
00015C5C 4845                       		swap	d5
00015C5E D842                       		add.w	d2,d4
00015C60 DA43                       		add.w	d3,d5
00015C62 3144 000C                  		move.w	d4,$C(a0)
00015C66 3145 0008                  		move.w	d5,8(a0)
00015C6A 4E75                       		rts	
00015C6C                            ; ===========================================================================
00015C6C                            
00015C6C                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C6C 3028 0032                  		move.w	$32(a0),d0
00015C70 0240 FF80                  		andi.w	#-$80,d0
00015C74 3238 F700                  		move.w	($FFFFF700).w,d1
00015C78 0441 0080                  		subi.w	#$80,d1
00015C7C 0241 FF80                  		andi.w	#-$80,d1
00015C80 9041                       		sub.w	d1,d0
00015C82 0C40 0280                  		cmpi.w	#$280,d0
00015C86 6200                       		bhi.s	Obj67_Delete
00015C88 4EF9 0000 DBCC             		jmp	DisplaySprite
00015C8E                            ; ===========================================================================
00015C8E                            
00015C8E                            Obj67_Delete:
00015C8E 4EF9 0000 DC08             		jmp	DeleteObject
00015C94                            ; ===========================================================================
00015C94                            ; ---------------------------------------------------------------------------
00015C94                            ; Sprite mappings - disc that you run around (SBZ)
00015C94                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C94                            ; part of the level tiles.)
00015C94                            ; ---------------------------------------------------------------------------
00015C94                            Map_obj67:
00015C94                            	include "_maps\obj67.asm"
00015C94                            ; ---------------------------------------------------------------------------
00015C94                            ; Sprite mappings - disc that you run around (SBZ)
00015C94                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C94                            ; part of the level tiles.)
00015C94                            ; ---------------------------------------------------------------------------
00015C94 0000                       		dc.w byte_15688-Map_obj67
00015C96 01                         byte_15688:	dc.b 1
00015C97 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C9C                            		even
00015C9C                            		even
00015C9C                            
00015C9C                            ; ===========================================================================
00015C9C                            ; ---------------------------------------------------------------------------
00015C9C                            ; Object 68 - conveyor belts (SBZ)
00015C9C                            ; ---------------------------------------------------------------------------
00015C9C                            
00015C9C                            Obj68:					; XREF: Obj_Index
00015C9C 7000                       		moveq	#0,d0
00015C9E 1028 0024                  		move.b	$24(a0),d0
00015CA2 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015CA6 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015CAA                            ; ===========================================================================
00015CAA 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015CAC 0000                       		dc.w Obj68_Action-Obj68_Index
00015CAE                            ; ===========================================================================
00015CAE                            
00015CAE                            Obj68_Main:				; XREF: Obj68_Index
00015CAE 5428 0024                  		addq.b	#2,$24(a0)
00015CB2 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015CB8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CBC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CC0 6700                       		beq.s	loc_156BA	; if zero, branch
00015CC2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015CC8                            
00015CC8                            loc_156BA:
00015CC8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CCC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CD0 4881                       		ext.w	d1
00015CD2 E841                       		asr.w	#4,d1
00015CD4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015CD8                            
00015CD8                            Obj68_Action:				; XREF: Obj68_Index
00015CD8 6100                       		bsr.s	Obj68_MoveSonic
00015CDA 3028 0008                  		move.w	8(a0),d0
00015CDE 0240 FF80                  		andi.w	#$FF80,d0
00015CE2 3238 F700                  		move.w	($FFFFF700).w,d1
00015CE6 0441 0080                  		subi.w	#$80,d1
00015CEA 0241 FF80                  		andi.w	#$FF80,d1
00015CEE 9041                       		sub.w	d1,d0
00015CF0 0C40 0280                  		cmpi.w	#$280,d0
00015CF4 6200                       		bhi.s	Obj68_Delete
00015CF6 4E75                       		rts	
00015CF8                            ; ===========================================================================
00015CF8                            
00015CF8                            Obj68_Delete:
00015CF8 4EF9 0000 DC08             		jmp	DeleteObject
00015CFE                            ; ===========================================================================
00015CFE                            
00015CFE                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CFE 7400                       		moveq	#0,d2
00015D00 1428 0038                  		move.b	$38(a0),d2
00015D04 3602                       		move.w	d2,d3
00015D06 D643                       		add.w	d3,d3
00015D08 43F8 D000                  		lea	($FFFFD000).w,a1
00015D0C 3029 0008                  		move.w	8(a1),d0
00015D10 9068 0008                  		sub.w	8(a0),d0
00015D14 D042                       		add.w	d2,d0
00015D16 B043                       		cmp.w	d3,d0
00015D18 6400                       		bcc.s	locret_1572E
00015D1A 3229 000C                  		move.w	$C(a1),d1
00015D1E 9268 000C                  		sub.w	$C(a0),d1
00015D22 0641 0030                  		addi.w	#$30,d1
00015D26 0C41 0030                  		cmpi.w	#$30,d1
00015D2A 6400                       		bcc.s	locret_1572E
00015D2C 0829 0001 0022             		btst	#1,$22(a1)
00015D32 6600                       		bne.s	locret_1572E
00015D34 3028 0036                  		move.w	$36(a0),d0
00015D38 D169 0008                  		add.w	d0,8(a1)
00015D3C                            
00015D3C                            locret_1572E:
00015D3C 4E75                       		rts	
00015D3E                            
00015D3E                            ; ===========================================================================
00015D3E                            ; ---------------------------------------------------------------------------
00015D3E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D3E                            ; ---------------------------------------------------------------------------
00015D3E                            
00015D3E                            Obj69:					; XREF: Obj_Index
00015D3E 7000                       		moveq	#0,d0
00015D40 1028 0024                  		move.b	$24(a0),d0
00015D44 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D48 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D4C                            ; ===========================================================================
00015D4C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D4E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D50 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D52                            ; ===========================================================================
00015D52                            
00015D52                            Obj69_Main:				; XREF: Obj69_Index
00015D52 5428 0024                  		addq.b	#2,$24(a0)
00015D56 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D5E 317C 4492 0002             		move.w	#$4492,2(a0)
00015D64 0028 0004 0001             		ori.b	#4,1(a0)
00015D6A 117C 0080 0019             		move.b	#$80,$19(a0)
00015D70 7000                       		moveq	#0,d0
00015D72 1028 0028                  		move.b	$28(a0),d0
00015D76 0240 000F                  		andi.w	#$F,d0
00015D7A C0FC 003C                  		mulu.w	#$3C,d0
00015D7E 3140 0032                  		move.w	d0,$32(a0)
00015D82 4A28 0028                  		tst.b	$28(a0)
00015D86 6A00                       		bpl.s	Obj69_Trapdoor
00015D88 5428 0024                  		addq.b	#2,$24(a0)
00015D8C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D94 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D9A 117C 0010 0019             		move.b	#$10,$19(a0)
00015DA0 117C 0002 001C             		move.b	#2,$1C(a0)
00015DA6 7000                       		moveq	#0,d0
00015DA8 1028 0028                  		move.b	$28(a0),d0	; get object type
00015DAC 3200                       		move.w	d0,d1
00015DAE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015DB2 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015DB6 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015DBA 3140 0032                  		move.w	d0,$32(a0)
00015DBE 0241 0070                  		andi.w	#$70,d1
00015DC2 0641 0010                  		addi.w	#$10,d1
00015DC6 E549                       		lsl.w	#2,d1
00015DC8 5341                       		subq.w	#1,d1
00015DCA 3141 0036                  		move.w	d1,$36(a0)
00015DCE 6000                       		bra.s	Obj69_Spinner
00015DD0                            ; ===========================================================================
00015DD0                            
00015DD0                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015DD0 5368 0030                  		subq.w	#1,$30(a0)
00015DD4 6A00                       		bpl.s	Obj69_Animate
00015DD6 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DDC 0868 0000 001C             		bchg	#0,$1C(a0)
00015DE2 4A28 0001                  		tst.b	1(a0)
00015DE6 6A00                       		bpl.s	Obj69_Animate
00015DE8 303C 00BB                  		move.w	#$BB,d0
00015DEC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DF2                            
00015DF2                            Obj69_Animate:
00015DF2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DF8 4EB9 0000 ACA2             		jsr	AnimateSprite
00015DFE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015E02 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015E04 323C 004B                  		move.w	#$4B,d1
00015E08 343C 000C                  		move.w	#$C,d2
00015E0C 3602                       		move.w	d2,d3
00015E0E 5243                       		addq.w	#1,d3
00015E10 3828 0008                  		move.w	8(a0),d4
00015E14 6100 A186                  		bsr.w	SolidObject
00015E18 6000 9E5A                  		bra.w	MarkObjGone
00015E1C                            ; ===========================================================================
00015E1C                            
00015E1C                            Obj69_NotSolid:
00015E1C 0828 0003 0022             		btst	#3,$22(a0)
00015E22 6700                       		beq.s	Obj69_Display
00015E24 43F8 D000                  		lea	($FFFFD000).w,a1
00015E28 08A9 0003 0022             		bclr	#3,$22(a1)
00015E2E 08A8 0003 0022             		bclr	#3,$22(a0)
00015E34 4228 0025                  		clr.b	$25(a0)
00015E38                            
00015E38                            Obj69_Display:
00015E38 6000 9E3A                  		bra.w	MarkObjGone
00015E3C                            ; ===========================================================================
00015E3C                            
00015E3C                            Obj69_Spinner:				; XREF: Obj69_Index
00015E3C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E40 C068 0036                  		and.w	$36(a0),d0
00015E44 6600                       		bne.s	Obj69_Delay
00015E46 117C 0001 0034             		move.b	#1,$34(a0)
00015E4C                            
00015E4C                            Obj69_Delay:
00015E4C 4A28 0034                  		tst.b	$34(a0)
00015E50 6700                       		beq.s	Obj69_Animate2
00015E52 5368 0030                  		subq.w	#1,$30(a0)
00015E56 6A00                       		bpl.s	Obj69_Animate2
00015E58 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E5E 4228 0034                  		clr.b	$34(a0)
00015E62 0868 0000 001C             		bchg	#0,$1C(a0)
00015E68                            
00015E68                            Obj69_Animate2:
00015E68 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E6E 4EB9 0000 ACA2             		jsr	AnimateSprite
00015E74 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E78 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E7A 323C 001B                  		move.w	#$1B,d1
00015E7E 343C 0007                  		move.w	#7,d2
00015E82 3602                       		move.w	d2,d3
00015E84 5243                       		addq.w	#1,d3
00015E86 3828 0008                  		move.w	8(a0),d4
00015E8A 6100 A110                  		bsr.w	SolidObject
00015E8E 6000 9DE4                  		bra.w	MarkObjGone
00015E92                            ; ===========================================================================
00015E92                            
00015E92                            Obj69_NotSolid2:
00015E92 0828 0003 0022             		btst	#3,$22(a0)
00015E98 6700                       		beq.s	Obj69_Display2
00015E9A 43F8 D000                  		lea	($FFFFD000).w,a1
00015E9E 08A9 0003 0022             		bclr	#3,$22(a1)
00015EA4 08A8 0003 0022             		bclr	#3,$22(a0)
00015EAA 4228 0025                  		clr.b	$25(a0)
00015EAE                            
00015EAE                            Obj69_Display2:
00015EAE 6000 9DC4                  		bra.w	MarkObjGone
00015EB2                            ; ===========================================================================
00015EB2                            Ani_obj69:
00015EB2                            	include "_anim\obj69.asm"
00015EB2                            ; ---------------------------------------------------------------------------
00015EB2                            ; Animation script - trapdoor (SBZ)
00015EB2                            ; ---------------------------------------------------------------------------
00015EB2 0000                       		dc.w byte_158AC-Ani_obj69
00015EB4 0000                       		dc.w byte_158B2-Ani_obj69
00015EB6 0000                       		dc.w byte_158B8-Ani_obj69
00015EB8 0000                       		dc.w byte_158CC-Ani_obj69
00015EBA 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015EC0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015EC6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015ED3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EDA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EE7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EEE                            		even
00015EEE                            		even
00015EEE                            
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            ; Sprite mappings - trapdoor (SBZ)
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            Map_obj69:
00015EEE                            	include "_maps\obj69.asm"
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            ; Sprite mappings - trapdoor (SBZ)
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE 0000                       		dc.w byte_158E6-Map_obj69
00015EF0 0000                       		dc.w byte_158FB-Map_obj69
00015EF2 0000                       		dc.w byte_15924-Map_obj69
00015EF4 04                         byte_158E6:	dc.b 4
00015EF5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015EFA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EFF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015F04 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015F09 08                         byte_158FB:	dc.b 8
00015F0A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015F0F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015F14 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015F19 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015F1E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015F23 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015F28 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015F2D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015F32 04                         byte_15924:	dc.b 4
00015F33 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015F38 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F3D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F42 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F48 00                         		even
00015F48 00                         		even
00015F48                            
00015F48                            ; ---------------------------------------------------------------------------
00015F48                            ; Sprite mappings - spinning platforms (SBZ)
00015F48                            ; ---------------------------------------------------------------------------
00015F48                            Map_obj69a:
00015F48                            	include "_maps\obj69a.asm"
00015F48                            ; ---------------------------------------------------------------------------
00015F48                            ; Sprite mappings - spinning platforms (SBZ)
00015F48                            ; ---------------------------------------------------------------------------
00015F48 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F4C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F50 0000                       		dc.w byte_15970-Map_obj69a
00015F52 02                         byte_15944:	dc.b 2
00015F53 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F58 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F5D 02                         byte_1594F:	dc.b 2
00015F5E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F63 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F68 02                         byte_1595A:	dc.b 2
00015F69 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F6E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F73 02                         byte_15965:	dc.b 2
00015F74 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F79 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F7E 02                         byte_15970:	dc.b 2
00015F7F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F84 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F8A 00                         		even
00015F8A 00                         		even
00015F8A                            
00015F8A                            ; ===========================================================================
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F8A                            ; ---------------------------------------------------------------------------
00015F8A                            
00015F8A                            Obj6A:					; XREF: Obj_Index
00015F8A 7000                       		moveq	#0,d0
00015F8C 1028 0024                  		move.b	$24(a0),d0
00015F90 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F94 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F98                            ; ===========================================================================
00015F98 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F9A 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F9C                            ; ===========================================================================
00015F9C                            
00015F9C                            Obj6A_Main:				; XREF: Obj6A_Index
00015F9C 5428 0024                  		addq.b	#2,$24(a0)
00015FA0 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015FA8 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015FAE 117C 0004 0001             		move.b	#4,1(a0)
00015FB4 117C 0004 0018             		move.b	#4,$18(a0)
00015FBA 117C 0020 0019             		move.b	#$20,$19(a0)
00015FC0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FC6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015FCC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015FD2 6400                       		bcc.s	Obj6A_Action
00015FD4 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FDA                            
00015FDA                            Obj6A_Action:				; XREF: Obj6A_Index
00015FDA 7000                       		moveq	#0,d0
00015FDC 1028 0028                  		move.b	$28(a0),d0
00015FE0 0240 0007                  		andi.w	#7,d0
00015FE4 D040                       		add.w	d0,d0
00015FE6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FEA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FEE 3028 003A                  		move.w	$3A(a0),d0
00015FF2 0240 FF80                  		andi.w	#$FF80,d0
00015FF6 3238 F700                  		move.w	($FFFFF700).w,d1
00015FFA 0441 0080                  		subi.w	#$80,d1
00015FFE 0241 FF80                  		andi.w	#$FF80,d1
00016002 9041                       		sub.w	d1,d0
00016004 0C40 0280                  		cmpi.w	#$280,d0
00016008 6200                       		bhi.s	Obj6A_Delete
0001600A 4EF9 0000 DBCC             		jmp	DisplaySprite
00016010                            ; ===========================================================================
00016010                            
00016010                            Obj6A_Delete:
00016010 4EF9 0000 DC08             		jmp	DeleteObject
00016016                            ; ===========================================================================
00016016 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001601A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001601E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016020                            ; ===========================================================================
00016020                            
00016020                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016020 4E75                       		rts	
00016022                            ; ===========================================================================
00016022                            
00016022                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016022 323C 0060                  		move.w	#$60,d1
00016026 7000                       		moveq	#0,d0
00016028 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001602C 0828 0000 0022             		btst	#0,$22(a0)
00016032 6700                       		beq.s	Obj6A_Animate01
00016034 4440                       		neg.w	d0
00016036 D041                       		add.w	d1,d0
00016038                            
00016038                            Obj6A_Animate01:
00016038 3228 003A                  		move.w	$3A(a0),d1
0001603C 9240                       		sub.w	d0,d1
0001603E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016042 5328 001E                  		subq.b	#1,$1E(a0)
00016046 6A00                       		bpl.s	loc_15A46
00016048 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001604E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016054                            
00016054                            loc_15A46:
00016054 4A28 0001                  		tst.b	1(a0)
00016058 6A00                       		bpl.s	locret_15A60
0001605A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001605E 0240 000F                  		andi.w	#$F,d0
00016062 6600                       		bne.s	locret_15A60
00016064 303C 00B0                  		move.w	#$B0,d0
00016068 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001606E                            
0001606E                            locret_15A60:
0001606E 4E75                       		rts	
00016070                            ; ===========================================================================
00016070                            
00016070                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016070 323C 0030                  		move.w	#$30,d1
00016074 7000                       		moveq	#0,d0
00016076 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001607A 0828 0000 0022             		btst	#0,$22(a0)
00016080 6700                       		beq.s	Obj6A_Animate02
00016082 4440                       		neg.w	d0
00016084 0640 0080                  		addi.w	#$80,d0
00016088                            
00016088                            Obj6A_Animate02:
00016088 3228 0038                  		move.w	$38(a0),d1
0001608C 9240                       		sub.w	d0,d1
0001608E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016092 5328 001E                  		subq.b	#1,$1E(a0)
00016096 6A00                       		bpl.s	loc_15A96
00016098 117C 0002 001E             		move.b	#2,$1E(a0)
0001609E 0868 0000 001A             		bchg	#0,$1A(a0)
000160A4                            
000160A4                            loc_15A96:
000160A4 4A28 0001                  		tst.b	1(a0)
000160A8 6A00                       		bpl.s	locret_15AB0
000160AA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000160AE 0C00 0018                  		cmpi.b	#$18,d0
000160B2 6600                       		bne.s	locret_15AB0
000160B4 303C 00B0                  		move.w	#$B0,d0
000160B8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160BE                            
000160BE                            locret_15AB0:
000160BE 4E75                       		rts	
000160C0                            ; ===========================================================================
000160C0                            
000160C0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000160C0 4A28 003D                  		tst.b	$3D(a0)
000160C4 6600                       		bne.s	Obj6A_Animate03
000160C6 3038 D008                  		move.w	($FFFFD008).w,d0
000160CA 0440 00C0                  		subi.w	#$C0,d0
000160CE 6500                       		bcs.s	loc_15B02
000160D0 9068 0008                  		sub.w	8(a0),d0
000160D4 6500                       		bcs.s	loc_15B02
000160D6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160DA 0440 0080                  		subi.w	#$80,d0
000160DE B068 000C                  		cmp.w	$C(a0),d0
000160E2 6400                       		bcc.s	locret_15B04
000160E4 0640 0100                  		addi.w	#$100,d0
000160E8 B068 000C                  		cmp.w	$C(a0),d0
000160EC 6500                       		bcs.s	locret_15B04
000160EE 117C 0001 003D             		move.b	#1,$3D(a0)
000160F4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160FA 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016100 117C 0002 001A             		move.b	#2,$1A(a0)
00016106 303C 00B0                  		move.w	#$B0,d0
0001610A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016110                            
00016110                            loc_15B02:
00016110 588F                       		addq.l	#4,sp
00016112                            
00016112                            locret_15B04:
00016112 4E75                       		rts	
00016114                            ; ===========================================================================
00016114                            
00016114                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016114 4EB9 0000 DBA6             		jsr	SpeedToPos
0001611A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016120 5328 001E                  		subq.b	#1,$1E(a0)
00016124 6A00                       		bpl.s	locret_15B24
00016126 117C 0002 001E             		move.b	#2,$1E(a0)
0001612C 0868 0000 001A             		bchg	#0,$1A(a0)
00016132                            
00016132                            locret_15B24:
00016132 4E75                       		rts	
00016134                            ; ===========================================================================
00016134                            
00016134                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016134 4A28 003D                  		tst.b	$3D(a0)
00016138 6600                       		bne.s	Obj6A_Animate04
0001613A 3038 D008                  		move.w	($FFFFD008).w,d0
0001613E 0640 00E0                  		addi.w	#$E0,d0
00016142 9068 0008                  		sub.w	8(a0),d0
00016146 6400                       		bcc.s	loc_15B74
00016148 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001614C 0440 0080                  		subi.w	#$80,d0
00016150 B068 000C                  		cmp.w	$C(a0),d0
00016154 6400                       		bcc.s	locret_15B76
00016156 0640 0100                  		addi.w	#$100,d0
0001615A B068 000C                  		cmp.w	$C(a0),d0
0001615E 6500                       		bcs.s	locret_15B76
00016160 117C 0001 003D             		move.b	#1,$3D(a0)
00016166 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001616C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016172 117C 0002 001A             		move.b	#2,$1A(a0)
00016178 303C 00B0                  		move.w	#$B0,d0
0001617C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016182                            
00016182                            loc_15B74:
00016182 588F                       		addq.l	#4,sp
00016184                            
00016184                            locret_15B76:
00016184 4E75                       		rts	
00016186                            ; ===========================================================================
00016186                            
00016186                            Obj6A_Animate04:
00016186 4EB9 0000 DBA6             		jsr	SpeedToPos
0001618C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016192 5328 001E                  		subq.b	#1,$1E(a0)
00016196 6A00                       		bpl.s	locret_15B96
00016198 117C 0002 001E             		move.b	#2,$1E(a0)
0001619E 0868 0000 001A             		bchg	#0,$1A(a0)
000161A4                            
000161A4                            locret_15B96:
000161A4 4E75                       		rts	
000161A6                            ; ===========================================================================
000161A6                            ; ---------------------------------------------------------------------------
000161A6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000161A6                            ; ---------------------------------------------------------------------------
000161A6                            Map_obj6A:
000161A6                            	include "_maps\obj6A.asm"
000161A6                            ; ---------------------------------------------------------------------------
000161A6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000161A6                            ; ---------------------------------------------------------------------------
000161A6 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000161AA 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000161AE 07                         byte_15BA0:	dc.b 7
000161AF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161B4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161B9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161BE E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161C3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161C8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161CD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161D2 07                         byte_15BC4:	dc.b 7
000161D3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161D8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161DD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161E2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161E7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161EC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161F1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161F6 04                         byte_15BE8:	dc.b 4
000161F7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161FC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016201 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016206 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001620B 04                         byte_15BFD:	dc.b 4
0001620C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016211 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016216 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001621B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016220                            		even
00016220                            		even
00016220                            
00016220                            ; ===========================================================================
00016220                            ; ---------------------------------------------------------------------------
00016220                            ; Object 6B - stomper (SBZ)
00016220                            ; ---------------------------------------------------------------------------
00016220                            
00016220                            Obj6B:					; XREF: Obj_Index
00016220 7000                       		moveq	#0,d0
00016222 1028 0024                  		move.b	$24(a0),d0
00016226 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001622A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001622E                            ; ===========================================================================
0001622E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016230 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016232                            
00016232 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016236 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001623A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001623E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016242 8040 0005                  		dc.b  $80, $40,	  0,   5
00016246                            ; ===========================================================================
00016246                            
00016246                            Obj6B_Main:				; XREF: Obj6B_Index
00016246 5428 0024                  		addq.b	#2,$24(a0)
0001624A 7000                       		moveq	#0,d0
0001624C 1028 0028                  		move.b	$28(a0),d0
00016250 E448                       		lsr.w	#2,d0
00016252 0240 001C                  		andi.w	#$1C,d0
00016256 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001625A 115B 0019                  		move.b	(a3)+,$19(a0)
0001625E 115B 0016                  		move.b	(a3)+,$16(a0)
00016262 E448                       		lsr.w	#2,d0
00016264 1140 001A                  		move.b	d0,$1A(a0)
00016268 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016270 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016276 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001627C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001627E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016284 6700                       		beq.s	Obj6B_SBZ3
00016286                            
00016286                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016286 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001628A 7000                       		moveq	#0,d0
0001628C 1028 0023                  		move.b	$23(a0),d0
00016290 6700                       		beq.s	Obj6B_Delete
00016292 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016298                            
00016298                            Obj6B_Delete:
00016298 4EF9 0000 DC08             		jmp	DeleteObject
0001629E                            ; ===========================================================================
0001629E                            
0001629E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001629E 317C 41F0 0002             		move.w	#$41F0,2(a0)
000162A4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000162AA 6600                       		bne.s	Obj6B_SBZ12
000162AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162B0 7000                       		moveq	#0,d0
000162B2 1028 0023                  		move.b	$23(a0),d0
000162B6 6700                       		beq.s	Obj6B_SBZ12
000162B8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000162BE 6700                       		beq.s	Obj6B_SBZ12
000162C0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000162C4 60C0                       		bra.s	Obj6B_ChkGone
000162C6                            ; ===========================================================================
000162C6                            
000162C6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000162C6 0028 0004 0001             		ori.b	#4,1(a0)
000162CC 117C 0004 0018             		move.b	#4,$18(a0)
000162D2 3168 0008 0034             		move.w	8(a0),$34(a0)
000162D8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000162DE 7000                       		moveq	#0,d0
000162E0 101B                       		move.b	(a3)+,d0
000162E2 3140 003C                  		move.w	d0,$3C(a0)
000162E6 7000                       		moveq	#0,d0
000162E8 1028 0028                  		move.b	$28(a0),d0
000162EC 6A00                       		bpl.s	Obj6B_Action
000162EE 0200 000F                  		andi.b	#$F,d0
000162F2 1140 003E                  		move.b	d0,$3E(a0)
000162F6 1153 0028                  		move.b	(a3),$28(a0)
000162FA 0C13 0005                  		cmpi.b	#5,(a3)
000162FE 6600                       		bne.s	Obj6B_ChkGone2
00016300 08E8 0004 0001             		bset	#4,1(a0)
00016306                            
00016306                            Obj6B_ChkGone2:
00016306 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001630A 7000                       		moveq	#0,d0
0001630C 1028 0023                  		move.b	$23(a0),d0
00016310 6700                       		beq.s	Obj6B_Action
00016312 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016318                            
00016318                            Obj6B_Action:				; XREF: Obj6B_Index
00016318 3F28 0008                  		move.w	8(a0),-(sp)
0001631C 7000                       		moveq	#0,d0
0001631E 1028 0028                  		move.b	$28(a0),d0
00016322 0240 000F                  		andi.w	#$F,d0
00016326 D040                       		add.w	d0,d0
00016328 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001632C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016330 381F                       		move.w	(sp)+,d4
00016332 4A28 0001                  		tst.b	1(a0)
00016336 6A00                       		bpl.s	Obj6B_ChkDel
00016338 7200                       		moveq	#0,d1
0001633A 1228 0019                  		move.b	$19(a0),d1
0001633E 0641 000B                  		addi.w	#$B,d1
00016342 7400                       		moveq	#0,d2
00016344 1428 0016                  		move.b	$16(a0),d2
00016348 3602                       		move.w	d2,d3
0001634A 5243                       		addq.w	#1,d3
0001634C 6100 9C4E                  		bsr.w	SolidObject
00016350                            
00016350                            Obj6B_ChkDel:
00016350 3028 0034                  		move.w	$34(a0),d0
00016354 0240 FF80                  		andi.w	#$FF80,d0
00016358 3238 F700                  		move.w	($FFFFF700).w,d1
0001635C 0441 0080                  		subi.w	#$80,d1
00016360 0241 FF80                  		andi.w	#$FF80,d1
00016364 9041                       		sub.w	d1,d0
00016366 0C40 0280                  		cmpi.w	#$280,d0
0001636A 6200                       		bhi.s	loc_15D64
0001636C 4EF9 0000 DBCC             		jmp	DisplaySprite
00016372                            ; ===========================================================================
00016372                            
00016372                            loc_15D64:
00016372 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016378 6600                       		bne.s	Obj6B_Delete2
0001637A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001637E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016382 7000                       		moveq	#0,d0
00016384 1028 0023                  		move.b	$23(a0),d0
00016388 6700                       		beq.s	Obj6B_Delete2
0001638A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016390                            
00016390                            Obj6B_Delete2:
00016390 4EF9 0000 DC08             		jmp	DeleteObject
00016396                            ; ===========================================================================
00016396 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001639A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001639E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000163A2                            ; ===========================================================================
000163A2                            
000163A2                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000163A2 4E75                       		rts	
000163A4                            ; ===========================================================================
000163A4                            
000163A4                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000163A4 4A28 0038                  		tst.b	$38(a0)
000163A8 6600                       		bne.s	loc_15DB4
000163AA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000163AE 7000                       		moveq	#0,d0
000163B0 1028 003E                  		move.b	$3E(a0),d0
000163B4 0832 0000 0000             		btst	#0,(a2,d0.w)
000163BA 6700                       		beq.s	loc_15DC2
000163BC 117C 0001 0038             		move.b	#1,$38(a0)
000163C2                            
000163C2                            loc_15DB4:
000163C2 3028 003C                  		move.w	$3C(a0),d0
000163C6 B068 003A                  		cmp.w	$3A(a0),d0
000163CA 6700                       		beq.s	loc_15DE0
000163CC 5468 003A                  		addq.w	#2,$3A(a0)
000163D0                            
000163D0                            loc_15DC2:
000163D0 3028 003A                  		move.w	$3A(a0),d0
000163D4 0828 0000 0022             		btst	#0,$22(a0)
000163DA 6700                       		beq.s	loc_15DD4
000163DC 4440                       		neg.w	d0
000163DE 0640 0080                  		addi.w	#$80,d0
000163E2                            
000163E2                            loc_15DD4:
000163E2 3228 0034                  		move.w	$34(a0),d1
000163E6 9240                       		sub.w	d0,d1
000163E8 3141 0008                  		move.w	d1,8(a0)
000163EC 4E75                       		rts	
000163EE                            ; ===========================================================================
000163EE                            
000163EE                            loc_15DE0:
000163EE 5228 0028                  		addq.b	#1,$28(a0)
000163F2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163F8 4228 0038                  		clr.b	$38(a0)
000163FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016400 7000                       		moveq	#0,d0
00016402 1028 0023                  		move.b	$23(a0),d0
00016406 67C8                       		beq.s	loc_15DC2
00016408 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001640E 60C0                       		bra.s	loc_15DC2
00016410                            ; ===========================================================================
00016410                            
00016410                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016410 4A28 0038                  		tst.b	$38(a0)
00016414 6600                       		bne.s	loc_15E14
00016416 5368 0036                  		subq.w	#1,$36(a0)
0001641A 6600                       		bne.s	loc_15E1E
0001641C 117C 0001 0038             		move.b	#1,$38(a0)
00016422                            
00016422                            loc_15E14:
00016422 4A68 003A                  		tst.w	$3A(a0)
00016426 6700                       		beq.s	loc_15E3C
00016428 5568 003A                  		subq.w	#2,$3A(a0)
0001642C                            
0001642C                            loc_15E1E:
0001642C 3028 003A                  		move.w	$3A(a0),d0
00016430 0828 0000 0022             		btst	#0,$22(a0)
00016436 6700                       		beq.s	loc_15E30
00016438 4440                       		neg.w	d0
0001643A 0640 0080                  		addi.w	#$80,d0
0001643E                            
0001643E                            loc_15E30:
0001643E 3228 0034                  		move.w	$34(a0),d1
00016442 9240                       		sub.w	d0,d1
00016444 3141 0008                  		move.w	d1,8(a0)
00016448 4E75                       		rts	
0001644A                            ; ===========================================================================
0001644A                            
0001644A                            loc_15E3C:
0001644A 5328 0028                  		subq.b	#1,$28(a0)
0001644E 4228 0038                  		clr.b	$38(a0)
00016452 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016456 7000                       		moveq	#0,d0
00016458 1028 0023                  		move.b	$23(a0),d0
0001645C 67CE                       		beq.s	loc_15E1E
0001645E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016464 60C6                       		bra.s	loc_15E1E
00016466                            ; ===========================================================================
00016466                            
00016466                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016466 4A28 0038                  		tst.b	$38(a0)
0001646A 6600                       		bne.s	loc_15E7C
0001646C 4A68 003A                  		tst.w	$3A(a0)
00016470 6700                       		beq.s	loc_15E6A
00016472 5368 003A                  		subq.w	#1,$3A(a0)
00016476 6000                       		bra.s	loc_15E8E
00016478                            ; ===========================================================================
00016478                            
00016478                            loc_15E6A:
00016478 5368 0036                  		subq.w	#1,$36(a0)
0001647C 6A00                       		bpl.s	loc_15E8E
0001647E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016484 117C 0001 0038             		move.b	#1,$38(a0)
0001648A                            
0001648A                            loc_15E7C:
0001648A 5068 003A                  		addq.w	#8,$3A(a0)
0001648E 3028 003A                  		move.w	$3A(a0),d0
00016492 B068 003C                  		cmp.w	$3C(a0),d0
00016496 6600                       		bne.s	loc_15E8E
00016498 4228 0038                  		clr.b	$38(a0)
0001649C                            
0001649C                            loc_15E8E:
0001649C 3028 003A                  		move.w	$3A(a0),d0
000164A0 0828 0000 0022             		btst	#0,$22(a0)
000164A6 6700                       		beq.s	loc_15EA0
000164A8 4440                       		neg.w	d0
000164AA 0640 0038                  		addi.w	#$38,d0
000164AE                            
000164AE                            loc_15EA0:
000164AE 3228 0030                  		move.w	$30(a0),d1
000164B2 D240                       		add.w	d0,d1
000164B4 3141 000C                  		move.w	d1,$C(a0)
000164B8 4E75                       		rts	
000164BA                            ; ===========================================================================
000164BA                            
000164BA                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000164BA 4A28 0038                  		tst.b	$38(a0)
000164BE 6600                       		bne.s	loc_15ED0
000164C0 4A68 003A                  		tst.w	$3A(a0)
000164C4 6700                       		beq.s	loc_15EBE
000164C6 5168 003A                  		subq.w	#8,$3A(a0)
000164CA 6000                       		bra.s	loc_15EF0
000164CC                            ; ===========================================================================
000164CC                            
000164CC                            loc_15EBE:
000164CC 5368 0036                  		subq.w	#1,$36(a0)
000164D0 6A00                       		bpl.s	loc_15EF0
000164D2 317C 003C 0036             		move.w	#$3C,$36(a0)
000164D8 117C 0001 0038             		move.b	#1,$38(a0)
000164DE                            
000164DE                            loc_15ED0:
000164DE 3028 003A                  		move.w	$3A(a0),d0
000164E2 B068 003C                  		cmp.w	$3C(a0),d0
000164E6 6700                       		beq.s	loc_15EE0
000164E8 5068 003A                  		addq.w	#8,$3A(a0)
000164EC 6000                       		bra.s	loc_15EF0
000164EE                            ; ===========================================================================
000164EE                            
000164EE                            loc_15EE0:
000164EE 5368 0036                  		subq.w	#1,$36(a0)
000164F2 6A00                       		bpl.s	loc_15EF0
000164F4 317C 003C 0036             		move.w	#$3C,$36(a0)
000164FA 4228 0038                  		clr.b	$38(a0)
000164FE                            
000164FE                            loc_15EF0:
000164FE 3028 003A                  		move.w	$3A(a0),d0
00016502 0828 0000 0022             		btst	#0,$22(a0)
00016508 6700                       		beq.s	loc_15F02
0001650A 4440                       		neg.w	d0
0001650C 0640 0038                  		addi.w	#$38,d0
00016510                            
00016510                            loc_15F02:
00016510 3228 0030                  		move.w	$30(a0),d1
00016514 D240                       		add.w	d0,d1
00016516 3141 000C                  		move.w	d1,$C(a0)
0001651A 4E75                       		rts	
0001651C                            ; ===========================================================================
0001651C                            
0001651C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001651C 4A28 0038                  		tst.b	$38(a0)
00016520 6600                       		bne.s	loc_15F3E
00016522 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016526 7000                       		moveq	#0,d0
00016528 1028 003E                  		move.b	$3E(a0),d0
0001652C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016532 6700                       		beq.s	locret_15F5C
00016534 117C 0001 0038             		move.b	#1,$38(a0)
0001653A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001653E 7000                       		moveq	#0,d0
00016540 1028 0023                  		move.b	$23(a0),d0
00016544 6700                       		beq.s	loc_15F3E
00016546 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001654C                            
0001654C                            loc_15F3E:
0001654C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016554 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001655C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016562 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016568 6700                       		beq.s	loc_15F5E
0001656A                            
0001656A                            locret_15F5C:
0001656A 4E75                       		rts	
0001656C                            ; ===========================================================================
0001656C                            
0001656C                            loc_15F5E:
0001656C 4228 0028                  		clr.b	$28(a0)
00016570 4228 0038                  		clr.b	$38(a0)
00016574 4E75                       		rts	
00016576                            ; ===========================================================================
00016576                            ; ---------------------------------------------------------------------------
00016576                            ; Sprite mappings - stomper and	platforms (SBZ)
00016576                            ; ---------------------------------------------------------------------------
00016576                            Map_obj6B:
00016576                            	include "_maps\obj6B.asm"
00016576                            ; ---------------------------------------------------------------------------
00016576                            ; Sprite mappings - stomper and	platforms (SBZ)
00016576                            ; ---------------------------------------------------------------------------
00016576 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001657A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001657E 0000                       		dc.w byte_15FB0-Map_obj6B
00016580 04                         byte_15F72:	dc.b 4
00016581 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016586 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001658B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016590 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016595 08                         byte_15F87:	dc.b 8
00016596 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001659B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000165A0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000165A5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000165AA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000165AF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000165B4 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000165B9 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000165BE 0E                         byte_15FB0:	dc.b $E
000165BF C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000165C4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000165C9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000165CE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000165D3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000165D8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000165DD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000165E2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165E7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165EC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165F1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165F6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165FB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016600 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016606 00                         		even
00016606 00                         		even
00016606                            
00016606                            ; ===========================================================================
00016606                            ; ---------------------------------------------------------------------------
00016606                            ; Object 6C - vanishing	platforms (SBZ)
00016606                            ; ---------------------------------------------------------------------------
00016606                            
00016606                            Obj6C:					; XREF: Obj_Index
00016606 7000                       		moveq	#0,d0
00016608 1028 0024                  		move.b	$24(a0),d0
0001660C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016610 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016614                            ; ===========================================================================
00016614 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016616 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016618 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001661A 0000                       		dc.w loc_16068-Obj6C_Index
0001661C                            ; ===========================================================================
0001661C                            
0001661C                            Obj6C_Main:				; XREF: Obj6C_Index
0001661C 5C28 0024                  		addq.b	#6,$24(a0)
00016620 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016628 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001662E 0028 0004 0001             		ori.b	#4,1(a0)
00016634 117C 0010 0019             		move.b	#$10,$19(a0)
0001663A 117C 0004 0018             		move.b	#4,$18(a0)
00016640 7000                       		moveq	#0,d0
00016642 1028 0028                  		move.b	$28(a0),d0	; get object type
00016646 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001664A 5240                       		addq.w	#1,d0		; add 1
0001664C EF48                       		lsl.w	#7,d0		; multiply by $80
0001664E 3200                       		move.w	d0,d1
00016650 5340                       		subq.w	#1,d0
00016652 3140 0030                  		move.w	d0,$30(a0)
00016656 3140 0032                  		move.w	d0,$32(a0)
0001665A 7000                       		moveq	#0,d0
0001665C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016660 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016664 0641 0080                  		addi.w	#$80,d1
00016668 C0C1                       		mulu.w	d1,d0
0001666A E088                       		lsr.l	#8,d0
0001666C 3140 0036                  		move.w	d0,$36(a0)
00016670 5341                       		subq.w	#1,d1
00016672 3141 0038                  		move.w	d1,$38(a0)
00016676                            
00016676                            loc_16068:				; XREF: Obj6C_Index
00016676 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001667A 9068 0036                  		sub.w	$36(a0),d0
0001667E C068 0038                  		and.w	$38(a0),d0
00016682 6600                       		bne.s	Obj6C_Animate
00016684 5928 0024                  		subq.b	#4,$24(a0)
00016688 6000                       		bra.s	Obj6C_Vanish
0001668A                            ; ===========================================================================
0001668A                            
0001668A                            Obj6C_Animate:
0001668A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016690 4EB9 0000 ACA2             		jsr	AnimateSprite
00016696 6000 95DC                  		bra.w	MarkObjGone
0001669A                            ; ===========================================================================
0001669A                            
0001669A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001669A 5368 0030                  		subq.w	#1,$30(a0)
0001669E 6A00                       		bpl.s	loc_160AA
000166A0 317C 007F 0030             		move.w	#127,$30(a0)
000166A6 4A28 001C                  		tst.b	$1C(a0)
000166AA 6700                       		beq.s	loc_160A4
000166AC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000166B2                            
000166B2                            loc_160A4:
000166B2 0868 0000 001C             		bchg	#0,$1C(a0)
000166B8                            
000166B8                            loc_160AA:
000166B8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000166BE 4EB9 0000 ACA2             		jsr	AnimateSprite
000166C4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000166CA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000166CC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000166D2 6600                       		bne.s	loc_160D6
000166D4 7200                       		moveq	#0,d1
000166D6 1228 0019                  		move.b	$19(a0),d1
000166DA 4EB9 0000 78FE             		jsr	(PlatformObject).l
000166E0 6000 9592                  		bra.w	MarkObjGone
000166E4                            ; ===========================================================================
000166E4                            
000166E4                            loc_160D6:
000166E4 7200                       		moveq	#0,d1
000166E6 1228 0019                  		move.b	$19(a0),d1
000166EA 4EB9 0000 7A72             		jsr	(ExitPlatform).l
000166F0 3428 0008                  		move.w	8(a0),d2
000166F4 4EB9 0000 7FDC             		jsr	(MvSonicOnPtfm2).l
000166FA 6000 9578                  		bra.w	MarkObjGone
000166FE                            ; ===========================================================================
000166FE                            
000166FE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166FE 0828 0003 0022             		btst	#3,$22(a0)
00016704 6700                       		beq.s	Obj6C_Display
00016706 43F8 D000                  		lea	($FFFFD000).w,a1
0001670A 08A9 0003 0022             		bclr	#3,$22(a1)
00016710 08A8 0003 0022             		bclr	#3,$22(a0)
00016716 117C 0002 0024             		move.b	#2,$24(a0)
0001671C 4228 0025                  		clr.b	$25(a0)
00016720                            
00016720                            Obj6C_Display:
00016720 6000 9552                  		bra.w	MarkObjGone
00016724                            ; ===========================================================================
00016724                            Ani_obj6C:
00016724                            	include "_anim\obj6C.asm"
00016724                            ; ---------------------------------------------------------------------------
00016724                            ; Animation script - vanishing platforms (SBZ)
00016724                            ; ---------------------------------------------------------------------------
00016724 0000                       		dc.w byte_1611A-Ani_obj6C
00016726 0000                       		dc.w byte_16122-Ani_obj6C
00016728 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016730 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016738                            		even
00016738                            		even
00016738                            
00016738                            ; ---------------------------------------------------------------------------
00016738                            ; Sprite mappings - vanishing platforms	(SBZ)
00016738                            ; ---------------------------------------------------------------------------
00016738                            Map_obj6C:
00016738                            	include "_maps\obj6C.asm"
00016738                            ; ---------------------------------------------------------------------------
00016738                            ; Sprite mappings - vanishing platforms	(SBZ)
00016738                            ; ---------------------------------------------------------------------------
00016738 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001673C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016740 01                         byte_16132:	dc.b 1
00016741 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016746 01                         byte_16138:	dc.b 1
00016747 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001674C 01                         byte_1613E:	dc.b 1
0001674D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016752 00                         byte_16144:	dc.b 0
00016754 00                         		even
00016754 00                         		even
00016754                            
00016754                            ; ===========================================================================
00016754                            ; ---------------------------------------------------------------------------
00016754                            ; Object 6E - electrocution orbs (SBZ)
00016754                            ; ---------------------------------------------------------------------------
00016754                            
00016754                            Obj6E:					; XREF: Obj_Index
00016754 7000                       		moveq	#0,d0
00016756 1028 0024                  		move.b	$24(a0),d0
0001675A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001675E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016762                            ; ===========================================================================
00016762 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016764 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016766                            ; ===========================================================================
00016766                            
00016766                            Obj6E_Main:				; XREF: Obj6E_Index
00016766 5428 0024                  		addq.b	#2,$24(a0)
0001676A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016772 317C 047E 0002             		move.w	#$47E,2(a0)
00016778 0028 0004 0001             		ori.b	#4,1(a0)
0001677E 117C 0028 0019             		move.b	#$28,$19(a0)
00016784 7000                       		moveq	#0,d0
00016786 1028 0028                  		move.b	$28(a0),d0	; read object type
0001678A E948                       		lsl.w	#4,d0		; multiply by $10
0001678C 5340                       		subq.w	#1,d0
0001678E 3140 0034                  		move.w	d0,$34(a0)
00016792                            
00016792                            Obj6E_Shock:				; XREF: Obj6E_Index
00016792 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016796 C068 0034                  		and.w	$34(a0),d0
0001679A 6600                       		bne.s	Obj6E_Animate
0001679C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000167A2 4A28 0001                  		tst.b	1(a0)
000167A6 6A00                       		bpl.s	Obj6E_Animate
000167A8 303C 00B1                  		move.w	#$B1,d0
000167AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
000167B2                            
000167B2                            Obj6E_Animate:
000167B2 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000167B8 4EB9 0000 ACA2             		jsr	AnimateSprite
000167BE 117C 0000 0020             		move.b	#0,$20(a0)
000167C4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000167CA 6600                       		bne.s	Obj6E_Display	; if not, branch
000167CC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000167D2                            
000167D2                            Obj6E_Display:
000167D2 6000 94A0                  		bra.w	MarkObjGone
000167D6                            ; ===========================================================================
000167D6                            Ani_obj6E:
000167D6                            	include "_anim\obj6E.asm"
000167D6                            ; ---------------------------------------------------------------------------
000167D6                            ; Animation script - electrocution orbs (SBZ)
000167D6                            ; ---------------------------------------------------------------------------
000167D6 0000                       		dc.w byte_161CC-Ani_obj6E
000167D8 0000                       		dc.w byte_161D0-Ani_obj6E
000167DA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000167DE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167EE                            		even
000167EE                            		even
000167EE                            
000167EE                            ; ---------------------------------------------------------------------------
000167EE                            ; Sprite mappings - electrocution orbs (SBZ)
000167EE                            ; ---------------------------------------------------------------------------
000167EE                            Map_obj6E:
000167EE                            	include "_maps\obj6E.asm"
000167EE                            ; ---------------------------------------------------------------------------
000167EE                            ; Sprite mappings - electrocution orbs (SBZ)
000167EE                            ; ---------------------------------------------------------------------------
000167EE 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
000167F2 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
000167F6 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
000167FA 02                         byte_161EC:	dc.b 2
000167FB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016800 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016805 03                         byte_161F7:	dc.b 3
00016806 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001680B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016810 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016815 05                         byte_16207:	dc.b 5
00016816 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001681B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016820 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016825 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001682A F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001682F 04                         byte_16221:	dc.b 4
00016830 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016835 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001683A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001683F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016844 06                         byte_16236:	dc.b 6
00016845 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001684A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001684F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016854 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016859 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001685E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016863 04                         byte_16255:	dc.b 4
00016864 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016869 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001686E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016873 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016878                            		even
00016878                            		even
00016878                            
00016878                            ; ===========================================================================
00016878                            ; ---------------------------------------------------------------------------
00016878                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016878                            ; ---------------------------------------------------------------------------
00016878                            
00016878                            Obj6F:					; XREF: Obj_Index
00016878 7000                       		moveq	#0,d0
0001687A 1028 0024                  		move.b	$24(a0),d0
0001687E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016882 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016886 3028 0030                  		move.w	$30(a0),d0
0001688A 0240 FF80                  		andi.w	#$FF80,d0
0001688E 3238 F700                  		move.w	($FFFFF700).w,d1
00016892 0441 0080                  		subi.w	#$80,d1
00016896 0241 FF80                  		andi.w	#$FF80,d1
0001689A 9041                       		sub.w	d1,d0
0001689C 0C40 0280                  		cmpi.w	#$280,d0
000168A0 6200                       		bhi.s	loc_1629A
000168A2                            
000168A2                            Obj6F_Display:
000168A2 4EF9 0000 DBCC             		jmp	DisplaySprite
000168A8                            ; ===========================================================================
000168A8                            
000168A8                            loc_1629A:
000168A8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000168AE 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000168B0 0C40 FF80                  		cmpi.w	#-$80,d0
000168B4 64EC                       		bcc.s	Obj6F_Display
000168B6                            
000168B6                            Obj6F_Act1or2:
000168B6 1028 002F                  		move.b	$2F(a0),d0
000168BA 6A00                       		bpl.s	Obj6F_Delete
000168BC 0240 007F                  		andi.w	#$7F,d0
000168C0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000168C4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000168CA                            
000168CA                            Obj6F_Delete:
000168CA 4EF9 0000 DC08             		jmp	DeleteObject
000168D0                            ; ===========================================================================
000168D0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000168D2 0000                       		dc.w loc_163D8-Obj6F_Index
000168D4                            ; ===========================================================================
000168D4                            
000168D4                            Obj6F_Main:				; XREF: Obj6F_Index
000168D4 1028 0028                  		move.b	$28(a0),d0
000168D8 6B00 0000                  		bmi.w	loc_16380
000168DC 5428 0024                  		addq.b	#2,$24(a0)
000168E0 217C 0001 5F48 0004        		move.l	#Map_obj69a,4(a0)
000168E8 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168EE 117C 0010 0019             		move.b	#$10,$19(a0)
000168F4 0028 0004 0001             		ori.b	#4,1(a0)
000168FA 117C 0004 0018             		move.b	#4,$18(a0)
00016900 7000                       		moveq	#0,d0
00016902 1028 0028                  		move.b	$28(a0),d0
00016906 3200                       		move.w	d0,d1
00016908 E648                       		lsr.w	#3,d0
0001690A 0240 001E                  		andi.w	#$1E,d0
0001690E 45FA 0000                  		lea	off_164A6(pc),a2
00016912 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016916 315A 0038                  		move.w	(a2)+,$38(a0)
0001691A 315A 0030                  		move.w	(a2)+,$30(a0)
0001691E 214A 003C                  		move.l	a2,$3C(a0)
00016922 0241 000F                  		andi.w	#$F,d1
00016926 E549                       		lsl.w	#2,d1
00016928 1141 0038                  		move.b	d1,$38(a0)
0001692C 117C 0004 003A             		move.b	#4,$3A(a0)
00016932 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016936 6700                       		beq.s	loc_16356
00016938 117C 0001 003B             		move.b	#1,$3B(a0)
0001693E 4428 003A                  		neg.b	$3A(a0)
00016942 7200                       		moveq	#0,d1
00016944 1228 0038                  		move.b	$38(a0),d1
00016948 D228 003A                  		add.b	$3A(a0),d1
0001694C B228 0039                  		cmp.b	$39(a0),d1
00016950 6500                       		bcs.s	loc_16352
00016952 1001                       		move.b	d1,d0
00016954 7200                       		moveq	#0,d1
00016956 4A00                       		tst.b	d0
00016958 6A00                       		bpl.s	loc_16352
0001695A 1228 0039                  		move.b	$39(a0),d1
0001695E 5901                       		subq.b	#4,d1
00016960                            
00016960                            loc_16352:
00016960 1141 0038                  		move.b	d1,$38(a0)
00016964                            
00016964                            loc_16356:
00016964 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001696A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016970 4A41                       		tst.w	d1
00016972 6600                       		bne.s	loc_1636C
00016974 117C 0001 001C             		move.b	#1,$1C(a0)
0001697A                            
0001697A                            loc_1636C:
0001697A 0C41 0008                  		cmpi.w	#8,d1
0001697E 6600                       		bne.s	loc_16378
00016980 117C 0000 001C             		move.b	#0,$1C(a0)
00016986                            
00016986                            loc_16378:
00016986 6100 C184                  		bsr.w	Obj63_ChangeDir
0001698A 6000 0000                  		bra.w	loc_163D8
0001698E                            ; ===========================================================================
0001698E                            
0001698E                            loc_16380:				; XREF: Obj6F_Main
0001698E 1140 002F                  		move.b	d0,$2F(a0)
00016992 0240 007F                  		andi.w	#$7F,d0
00016996 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001699A 08F2 0000 0000             		bset	#0,(a2,d0.w)
000169A0 6700                       		beq.s	loc_1639A
000169A2 4EF9 0000 DC08             		jmp	DeleteObject
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            loc_1639A:
000169A8 D040                       		add.w	d0,d0
000169AA 0240 001E                  		andi.w	#$1E,d0
000169AE 0640 0080                  		addi.w	#$80,d0
000169B2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000169B8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169BC 321A                       		move.w	(a2)+,d1
000169BE 2248                       		movea.l	a0,a1
000169C0 6000                       		bra.s	Obj6F_LoadPform
000169C2                            ; ===========================================================================
000169C2                            
000169C2                            Obj6F_Loop:
000169C2 4EB9 0000 E052             		jsr	SingleObjLoad
000169C8 6600                       		bne.s	loc_163D0
000169CA                            
000169CA                            Obj6F_LoadPform:			; XREF: loc_1639A
000169CA 12BC 006F                  		move.b	#$6F,0(a1)
000169CE 335A 0008                  		move.w	(a2)+,8(a1)
000169D2 335A 000C                  		move.w	(a2)+,$C(a1)
000169D6 301A                       		move.w	(a2)+,d0
000169D8 1340 0028                  		move.b	d0,$28(a1)
000169DC                            
000169DC                            loc_163D0:
000169DC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169E0                            
000169E0 588F                       		addq.l	#4,sp
000169E2 4E75                       		rts	
000169E4                            ; ===========================================================================
000169E4                            
000169E4                            loc_163D8:				; XREF: Obj6F_Index
000169E4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169EA 4EB9 0000 ACA2             		jsr	AnimateSprite
000169F0 4A28 001A                  		tst.b	$1A(a0)
000169F4 6600                       		bne.s	loc_16404
000169F6 3F28 0008                  		move.w	8(a0),-(sp)
000169FA 6100 0000                  		bsr.w	loc_16424
000169FE 323C 001B                  		move.w	#$1B,d1
00016A02 343C 0007                  		move.w	#7,d2
00016A06 3602                       		move.w	d2,d3
00016A08 5243                       		addq.w	#1,d3
00016A0A 381F                       		move.w	(sp)+,d4
00016A0C 6000 958E                  		bra.w	SolidObject
00016A10                            ; ===========================================================================
00016A10                            
00016A10                            loc_16404:
00016A10 0828 0003 0022             		btst	#3,$22(a0)
00016A16 6700                       		beq.s	loc_16420
00016A18 43F8 D000                  		lea	($FFFFD000).w,a1
00016A1C 08A9 0003 0022             		bclr	#3,$22(a1)
00016A22 08A8 0003 0022             		bclr	#3,$22(a0)
00016A28 4228 0025                  		clr.b	$25(a0)
00016A2C                            
00016A2C                            loc_16420:
00016A2C 6000 0002                  		bra.w	*+4
00016A30                            
00016A30                            loc_16424:
00016A30 3028 0008                  		move.w	8(a0),d0
00016A34 B068 0034                  		cmp.w	$34(a0),d0
00016A38 6600                       		bne.s	loc_16484
00016A3A 3028 000C                  		move.w	$C(a0),d0
00016A3E B068 0036                  		cmp.w	$36(a0),d0
00016A42 6600                       		bne.s	loc_16484
00016A44 7200                       		moveq	#0,d1
00016A46 1228 0038                  		move.b	$38(a0),d1
00016A4A D228 003A                  		add.b	$3A(a0),d1
00016A4E B228 0039                  		cmp.b	$39(a0),d1
00016A52 6500                       		bcs.s	loc_16456
00016A54 1001                       		move.b	d1,d0
00016A56 7200                       		moveq	#0,d1
00016A58 4A00                       		tst.b	d0
00016A5A 6A00                       		bpl.s	loc_16456
00016A5C 1228 0039                  		move.b	$39(a0),d1
00016A60 5901                       		subq.b	#4,d1
00016A62                            
00016A62                            loc_16456:
00016A62 1141 0038                  		move.b	d1,$38(a0)
00016A66 2268 003C                  		movea.l	$3C(a0),a1
00016A6A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A70 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A76 4A41                       		tst.w	d1
00016A78 6600                       		bne.s	loc_16474
00016A7A 117C 0001 001C             		move.b	#1,$1C(a0)
00016A80                            
00016A80                            loc_16474:
00016A80 0C41 0008                  		cmpi.w	#8,d1
00016A84 6600                       		bne.s	loc_16480
00016A86 117C 0000 001C             		move.b	#0,$1C(a0)
00016A8C                            
00016A8C                            loc_16480:
00016A8C 6100 C07E                  		bsr.w	Obj63_ChangeDir
00016A90                            
00016A90                            loc_16484:
00016A90 4EF9 0000 DBA6             		jmp	SpeedToPos
00016A96                            ; ===========================================================================
00016A96                            Ani_obj6F:
00016A96                            	include "_anim\obj6F.asm"
00016A96                            ; ---------------------------------------------------------------------------
00016A96                            ; Animation script - platform on conveyor belt (SBZ)
00016A96                            ; ---------------------------------------------------------------------------
00016A96 0000                       		dc.w byte_1648E-Ani_obj6F
00016A98 0000                       		dc.w byte_164A2-Ani_obj6F
00016A9A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016AA7 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016AAE 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016AB2 00                         		even
00016AB2 00                         		even
00016AB2                            
00016AB2 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016AB8 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016ABE 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016AD2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016AE6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016AFA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016B0E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016B22 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B36                            ; ===========================================================================
00016B36                            ; ---------------------------------------------------------------------------
00016B36                            ; Object 70 - large girder block (SBZ)
00016B36                            ; ---------------------------------------------------------------------------
00016B36                            
00016B36                            Obj70:					; XREF: Obj_Index
00016B36 7000                       		moveq	#0,d0
00016B38 1028 0024                  		move.b	$24(a0),d0
00016B3C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B40 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B44                            ; ===========================================================================
00016B44 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B46 0000                       		dc.w Obj70_Action-Obj70_Index
00016B48                            ; ===========================================================================
00016B48                            
00016B48                            Obj70_Main:				; XREF: Obj70_Index
00016B48 5428 0024                  		addq.b	#2,$24(a0)
00016B4C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B54 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B5A 0028 0004 0001             		ori.b	#4,1(a0)
00016B60 117C 0004 0018             		move.b	#4,$18(a0)
00016B66 117C 0060 0019             		move.b	#$60,$19(a0)
00016B6C 117C 0018 0016             		move.b	#$18,$16(a0)
00016B72 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B78 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B7E 6100 0000                  		bsr.w	Obj70_Move2
00016B82                            
00016B82                            Obj70_Action:				; XREF: Obj70_Index
00016B82 3F28 0008                  		move.w	8(a0),-(sp)
00016B86 4A68 003A                  		tst.w	$3A(a0)
00016B8A 6700                       		beq.s	Obj70_Move
00016B8C 5368 003A                  		subq.w	#1,$3A(a0)
00016B90 6600                       		bne.s	Obj70_Solid
00016B92                            
00016B92                            Obj70_Move:
00016B92 4EB9 0000 DBA6             		jsr	SpeedToPos
00016B98 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B9C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B9E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016BA2                            
00016BA2                            Obj70_Solid:
00016BA2 381F                       		move.w	(sp)+,d4
00016BA4 4A28 0001                  		tst.b	1(a0)
00016BA8 6A00                       		bpl.s	Obj70_ChkDel
00016BAA 7200                       		moveq	#0,d1
00016BAC 1228 0019                  		move.b	$19(a0),d1
00016BB0 0641 000B                  		addi.w	#$B,d1
00016BB4 7400                       		moveq	#0,d2
00016BB6 1428 0016                  		move.b	$16(a0),d2
00016BBA 3602                       		move.w	d2,d3
00016BBC 5243                       		addq.w	#1,d3
00016BBE 6100 93DC                  		bsr.w	SolidObject
00016BC2                            
00016BC2                            Obj70_ChkDel:
00016BC2 3028 0032                  		move.w	$32(a0),d0
00016BC6 0240 FF80                  		andi.w	#$FF80,d0
00016BCA 3238 F700                  		move.w	($FFFFF700).w,d1
00016BCE 0441 0080                  		subi.w	#$80,d1
00016BD2 0241 FF80                  		andi.w	#$FF80,d1
00016BD6 9041                       		sub.w	d1,d0
00016BD8 0C40 0280                  		cmpi.w	#$280,d0
00016BDC 6200                       		bhi.s	Obj70_Delete
00016BDE 4EF9 0000 DBCC             		jmp	DisplaySprite
00016BE4                            ; ===========================================================================
00016BE4                            
00016BE4                            Obj70_Delete:
00016BE4 4EF9 0000 DC08             		jmp	DeleteObject
00016BEA                            ; ===========================================================================
00016BEA                            
00016BEA                            Obj70_Move2:				; XREF: Obj70_Main
00016BEA 1028 0038                  		move.b	$38(a0),d0
00016BEE 0240 0018                  		andi.w	#$18,d0
00016BF2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BF8 43F1 0000                  		lea	(a1,d0.w),a1
00016BFC 3159 0010                  		move.w	(a1)+,$10(a0)
00016C00 3159 0012                  		move.w	(a1)+,$12(a0)
00016C04 3159 0034                  		move.w	(a1)+,$34(a0)
00016C08 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016C0C 317C 0007 003A             		move.w	#7,$3A(a0)
00016C12 4E75                       		rts	
00016C14                            ; ===========================================================================
00016C14 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016C1C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016C24 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016C2C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C34                            ; ---------------------------------------------------------------------------
00016C34                            ; Sprite mappings - large girder block (SBZ)
00016C34                            ; ---------------------------------------------------------------------------
00016C34                            Map_obj70:
00016C34                            	include "_maps\obj70.asm"
00016C34                            ; ---------------------------------------------------------------------------
00016C34                            ; Sprite mappings - large girder block (SBZ)
00016C34                            ; ---------------------------------------------------------------------------
00016C34 0000                       		dc.w byte_1662A-Map_obj70
00016C36 0C                         byte_1662A:	dc.b $C
00016C37 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C3C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C41 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C46 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C4B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C50 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C55 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C5A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C5F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C64 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C69 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C6E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C74 00                         		even
00016C74 00                         		even
00016C74                            
00016C74                            ; ===========================================================================
00016C74                            ; ---------------------------------------------------------------------------
00016C74                            ; Object 72 - teleporter (SBZ)
00016C74                            ; ---------------------------------------------------------------------------
00016C74                            
00016C74                            Obj72:					; XREF: Obj_Index
00016C74 7000                       		moveq	#0,d0
00016C76 1028 0024                  		move.b	$24(a0),d0
00016C7A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C7E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C82 3028 0008                  		move.w	8(a0),d0
00016C86 0240 FF80                  		andi.w	#$FF80,d0
00016C8A 3238 F700                  		move.w	($FFFFF700).w,d1
00016C8E 0441 0080                  		subi.w	#$80,d1
00016C92 0241 FF80                  		andi.w	#$FF80,d1
00016C96 9041                       		sub.w	d1,d0
00016C98 0C40 0280                  		cmpi.w	#$280,d0
00016C9C 6200                       		bhi.s	Obj72_Delete
00016C9E 4E75                       		rts	
00016CA0                            ; ===========================================================================
00016CA0                            
00016CA0                            Obj72_Delete:
00016CA0 4EF9 0000 DC08             		jmp	DeleteObject
00016CA6                            ; ===========================================================================
00016CA6 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016CA8 0000                       		dc.w loc_166C8-Obj72_Index
00016CAA 0000                       		dc.w loc_1675E-Obj72_Index
00016CAC 0000                       		dc.w loc_16798-Obj72_Index
00016CAE                            ; ===========================================================================
00016CAE                            
00016CAE                            Obj72_Main:				; XREF: Obj72_Index
00016CAE 5428 0024                  		addq.b	#2,$24(a0)
00016CB2 1028 0028                  		move.b	$28(a0),d0
00016CB6 D040                       		add.w	d0,d0
00016CB8 0240 001E                  		andi.w	#$1E,d0
00016CBC 45FA 0000                  		lea	Obj72_Data(pc),a2
00016CC0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CC4 315A 003A                  		move.w	(a2)+,$3A(a0)
00016CC8 214A 003C                  		move.l	a2,$3C(a0)
00016CCC 315A 0036                  		move.w	(a2)+,$36(a0)
00016CD0 315A 0038                  		move.w	(a2)+,$38(a0)
00016CD4                            
00016CD4                            loc_166C8:				; XREF: Obj72_Index
00016CD4 43F8 D000                  		lea	($FFFFD000).w,a1
00016CD8 3029 0008                  		move.w	8(a1),d0
00016CDC 9068 0008                  		sub.w	8(a0),d0
00016CE0 0828 0000 0022             		btst	#0,$22(a0)
00016CE6 6700                       		beq.s	loc_166E0
00016CE8 0640 000F                  		addi.w	#$F,d0
00016CEC                            
00016CEC                            loc_166E0:
00016CEC 0C40 0010                  		cmpi.w	#$10,d0
00016CF0 6400                       		bcc.s	locret_1675C
00016CF2 3229 000C                  		move.w	$C(a1),d1
00016CF6 9268 000C                  		sub.w	$C(a0),d1
00016CFA 0641 0020                  		addi.w	#$20,d1
00016CFE 0C41 0040                  		cmpi.w	#$40,d1
00016D02 6400                       		bcc.s	locret_1675C
00016D04 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016D08 6600                       		bne.s	locret_1675C
00016D0A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016D10 6600                       		bne.s	loc_1670E
00016D12 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016D18 6500                       		bcs.s	locret_1675C
00016D1A                            
00016D1A                            loc_1670E:
00016D1A 5428 0024                  		addq.b	#2,$24(a0)
00016D1E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016D24 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016D2A 337C 0800 0014             		move.w	#$800,$14(a1)
00016D30 337C 0000 0010             		move.w	#0,$10(a1)
00016D36 337C 0000 0012             		move.w	#0,$12(a1)
00016D3C 08A8 0005 0022             		bclr	#5,$22(a0)
00016D42 08A9 0005 0022             		bclr	#5,$22(a1)
00016D48 08E9 0001 0022             		bset	#1,$22(a1)
00016D4E 3368 0008 0008             		move.w	8(a0),8(a1)
00016D54 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D5A 4228 0032                  		clr.b	$32(a0)
00016D5E 303C 00BE                  		move.w	#$BE,d0
00016D62 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D68                            
00016D68                            locret_1675C:
00016D68 4E75                       		rts	
00016D6A                            ; ===========================================================================
00016D6A                            
00016D6A                            loc_1675E:				; XREF: Obj72_Index
00016D6A 43F8 D000                  		lea	($FFFFD000).w,a1
00016D6E 1028 0032                  		move.b	$32(a0),d0
00016D72 5428 0032                  		addq.b	#2,$32(a0)
00016D76 4EB9 0000 2C82             		jsr	(CalcSine).l
00016D7C EA40                       		asr.w	#5,d0
00016D7E 3428 000C                  		move.w	$C(a0),d2
00016D82 9440                       		sub.w	d0,d2
00016D84 3342 000C                  		move.w	d2,$C(a1)
00016D88 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D8E 6600                       		bne.s	locret_16796
00016D90 6100 0000                  		bsr.w	sub_1681C
00016D94 5428 0024                  		addq.b	#2,$24(a0)
00016D98 303C 00BC                  		move.w	#$BC,d0
00016D9C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016DA2                            
00016DA2                            locret_16796:
00016DA2 4E75                       		rts	
00016DA4                            ; ===========================================================================
00016DA4                            
00016DA4                            loc_16798:				; XREF: Obj72_Index
00016DA4 588F                       		addq.l	#4,sp
00016DA6 43F8 D000                  		lea	($FFFFD000).w,a1
00016DAA 5328 002E                  		subq.b	#1,$2E(a0)
00016DAE 6A00                       		bpl.s	loc_167DA
00016DB0 3368 0036 0008             		move.w	$36(a0),8(a1)
00016DB6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016DBC 7200                       		moveq	#0,d1
00016DBE 1228 003A                  		move.b	$3A(a0),d1
00016DC2 5801                       		addq.b	#4,d1
00016DC4 B228 003B                  		cmp.b	$3B(a0),d1
00016DC8 6500                       		bcs.s	loc_167C2
00016DCA 7200                       		moveq	#0,d1
00016DCC 6000                       		bra.s	loc_16800
00016DCE                            ; ===========================================================================
00016DCE                            
00016DCE                            loc_167C2:
00016DCE 1141 003A                  		move.b	d1,$3A(a0)
00016DD2 2468 003C                  		movea.l	$3C(a0),a2
00016DD6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DDC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DE2 6000 0000                  		bra.w	sub_1681C
00016DE6                            ; ===========================================================================
00016DE6                            
00016DE6                            loc_167DA:
00016DE6 2429 0008                  		move.l	8(a1),d2
00016DEA 2629 000C                  		move.l	$C(a1),d3
00016DEE 3029 0010                  		move.w	$10(a1),d0
00016DF2 48C0                       		ext.l	d0
00016DF4 E180                       		asl.l	#8,d0
00016DF6 D480                       		add.l	d0,d2
00016DF8 3029 0012                  		move.w	$12(a1),d0
00016DFC 48C0                       		ext.l	d0
00016DFE E180                       		asl.l	#8,d0
00016E00 D680                       		add.l	d0,d3
00016E02 2342 0008                  		move.l	d2,8(a1)
00016E06 2343 000C                  		move.l	d3,$C(a1)
00016E0A 4E75                       		rts	
00016E0C                            ; ===========================================================================
00016E0C                            
00016E0C                            loc_16800:
00016E0C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016E12 4228 0024                  		clr.b	$24(a0)
00016E16 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016E1A 337C 0000 0010             		move.w	#0,$10(a1)
00016E20 337C 0200 0012             		move.w	#$200,$12(a1)
00016E26 4E75                       		rts	
00016E28                            
00016E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E28                            
00016E28                            
00016E28                            sub_1681C:
00016E28 7000                       		moveq	#0,d0
00016E2A 343C 1000                  		move.w	#$1000,d2
00016E2E 3028 0036                  		move.w	$36(a0),d0
00016E32 9069 0008                  		sub.w	8(a1),d0
00016E36 6C00                       		bge.s	loc_16830
00016E38 4440                       		neg.w	d0
00016E3A 4442                       		neg.w	d2
00016E3C                            
00016E3C                            loc_16830:
00016E3C 7200                       		moveq	#0,d1
00016E3E 363C 1000                  		move.w	#$1000,d3
00016E42 3228 0038                  		move.w	$38(a0),d1
00016E46 9269 000C                  		sub.w	$C(a1),d1
00016E4A 6C00                       		bge.s	loc_16844
00016E4C 4441                       		neg.w	d1
00016E4E 4443                       		neg.w	d3
00016E50                            
00016E50                            loc_16844:
00016E50 B240                       		cmp.w	d0,d1
00016E52 6500                       		bcs.s	loc_1687A
00016E54 7200                       		moveq	#0,d1
00016E56 3228 0038                  		move.w	$38(a0),d1
00016E5A 9269 000C                  		sub.w	$C(a1),d1
00016E5E 4841                       		swap	d1
00016E60 83C3                       		divs.w	d3,d1
00016E62 7000                       		moveq	#0,d0
00016E64 3028 0036                  		move.w	$36(a0),d0
00016E68 9069 0008                  		sub.w	8(a1),d0
00016E6C 6700                       		beq.s	loc_16866
00016E6E 4840                       		swap	d0
00016E70 81C1                       		divs.w	d1,d0
00016E72                            
00016E72                            loc_16866:
00016E72 3340 0010                  		move.w	d0,$10(a1)
00016E76 3343 0012                  		move.w	d3,$12(a1)
00016E7A 4A41                       		tst.w	d1
00016E7C 6A00                       		bpl.s	loc_16874
00016E7E 4441                       		neg.w	d1
00016E80                            
00016E80                            loc_16874:
00016E80 3141 002E                  		move.w	d1,$2E(a0)
00016E84 4E75                       		rts	
00016E86                            ; ===========================================================================
00016E86                            
00016E86                            loc_1687A:
00016E86 7000                       		moveq	#0,d0
00016E88 3028 0036                  		move.w	$36(a0),d0
00016E8C 9069 0008                  		sub.w	8(a1),d0
00016E90 4840                       		swap	d0
00016E92 81C2                       		divs.w	d2,d0
00016E94 7200                       		moveq	#0,d1
00016E96 3228 0038                  		move.w	$38(a0),d1
00016E9A 9269 000C                  		sub.w	$C(a1),d1
00016E9E 6700                       		beq.s	loc_16898
00016EA0 4841                       		swap	d1
00016EA2 83C0                       		divs.w	d0,d1
00016EA4                            
00016EA4                            loc_16898:
00016EA4 3341 0012                  		move.w	d1,$12(a1)
00016EA8 3342 0010                  		move.w	d2,$10(a1)
00016EAC 4A40                       		tst.w	d0
00016EAE 6A00                       		bpl.s	loc_168A6
00016EB0 4440                       		neg.w	d0
00016EB2                            
00016EB2                            loc_168A6:
00016EB2 3140 002E                  		move.w	d0,$2E(a0)
00016EB6 4E75                       		rts	
00016EB8                            ; End of function sub_1681C
00016EB8                            
00016EB8                            ; ===========================================================================
00016EB8 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016EBE 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016EC4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016EC8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016ECE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016ED4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016EDA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016EE0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016EE6 0884 0298 0894             		dc.w $884, $298, $894
00016EEC 0270 0894 0190             		dc.w $270, $894, $190
00016EF2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EF8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016EFE 1184 0498 1158             		dc.w $1184, $498, $1158
00016F04 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016F0A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016F10 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016F16 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016F1C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016F22 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016F28 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016F2E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F34 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F3A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F40                            ; ===========================================================================
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F40                            ; ---------------------------------------------------------------------------
00016F40                            
00016F40                            Obj78:					; XREF: Obj_Index
00016F40 7000                       		moveq	#0,d0
00016F42 1028 0024                  		move.b	$24(a0),d0
00016F46 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F4A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F4E                            ; ===========================================================================
00016F4E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F50 0000                       		dc.w Obj78_Action-Obj78_Index
00016F52 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F54 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F56 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F58 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F5A 0000                       		dc.w loc_16CC0-Obj78_Index
00016F5C                            ; ===========================================================================
00016F5C                            
00016F5C                            locret_16950:
00016F5C 4E75                       		rts	
00016F5E                            ; ===========================================================================
00016F5E                            
00016F5E                            Obj78_Main:				; XREF: Obj78_Index
00016F5E 117C 0007 0016             		move.b	#7,$16(a0)
00016F64 117C 0008 0017             		move.b	#8,$17(a0)
00016F6A 4EB9 0000 DB7A             		jsr	ObjectFall
00016F70 4EBA E4B6                  		jsr	ObjHitFloor
00016F74 4A41                       		tst.w	d1
00016F76 6AE4                       		bpl.s	locret_16950
00016F78 D368 000C                  		add.w	d1,$C(a0)
00016F7C 4268 0012                  		clr.w	$12(a0)
00016F80 5428 0024                  		addq.b	#2,$24(a0)
00016F84 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F8C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F92 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F98 6700                       		beq.s	loc_16996
00016F9A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016FA0                            
00016FA0                            loc_16996:
00016FA0 0228 0003 0001             		andi.b	#3,1(a0)
00016FA6 0028 0004 0001             		ori.b	#4,1(a0)
00016FAC 1168 0001 0022             		move.b	1(a0),$22(a0)
00016FB2 117C 0004 0018             		move.b	#4,$18(a0)
00016FB8 117C 0008 0019             		move.b	#8,$19(a0)
00016FBE 117C 000B 0020             		move.b	#$B,$20(a0)
00016FC4 3428 0008                  		move.w	8(a0),d2
00016FC8 7A0C                       		moveq	#$C,d5
00016FCA 0828 0000 0022             		btst	#0,$22(a0)
00016FD0 6700                       		beq.s	loc_169CA
00016FD2 4445                       		neg.w	d5
00016FD4                            
00016FD4                            loc_169CA:
00016FD4 1C3C 0004                  		move.b	#4,d6
00016FD8 7600                       		moveq	#0,d3
00016FDA 7804                       		moveq	#4,d4
00016FDC 2448                       		movea.l	a0,a2
00016FDE 7202                       		moveq	#2,d1
00016FE0                            
00016FE0                            Obj78_LoadBody:
00016FE0 4EB9 0000 E068             		jsr	SingleObjLoad2
00016FE6 6600                       		bne.s	Obj78_QuitLoad
00016FE8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FEC 1346 0024                  		move.b	d6,$24(a1)
00016FF0 5406                       		addq.b	#2,d6
00016FF2 2368 0004 0004             		move.l	4(a0),4(a1)
00016FF8 3368 0002 0002             		move.w	2(a0),2(a1)
00016FFE 137C 0005 0018             		move.b	#5,$18(a1)
00017004 137C 0008 0019             		move.b	#8,$19(a1)
0001700A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017010 D445                       		add.w	d5,d2
00017012 3342 0008                  		move.w	d2,8(a1)
00017016 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001701C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017022 1368 0022 0001             		move.b	$22(a0),1(a1)
00017028 137C 0008 001A             		move.b	#8,$1A(a1)
0001702E 234A 003C                  		move.l	a2,$3C(a1)
00017032 1344 003C                  		move.b	d4,$3C(a1)
00017036 5804                       		addq.b	#4,d4
00017038 2449                       		movea.l	a1,a2
0001703A                            
0001703A                            Obj78_QuitLoad:
0001703A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001703E                            
0001703E 117C 0007 002A             		move.b	#7,$2A(a0)
00017044 4228 003C                  		clr.b	$3C(a0)
00017048                            
00017048                            Obj78_Action:				; XREF: Obj78_Index
00017048 4A28 0022                  		tst.b	$22(a0)
0001704C 6B00 0000                  		bmi.w	loc_16C96
00017050 7000                       		moveq	#0,d0
00017052 1028 0025                  		move.b	$25(a0),d0
00017056 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001705A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001705E 1228 002B                  		move.b	$2B(a0),d1
00017062 6A00                       		bpl.s	Obj78_Display
00017064 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001706A 1028 0026                  		move.b	$26(a0),d0
0001706E 0240 007F                  		andi.w	#$7F,d0
00017072 5828 0026                  		addq.b	#4,$26(a0)
00017076 1031 0000                  		move.b	(a1,d0.w),d0
0001707A 6A00                       		bpl.s	Obj78_AniHead
0001707C 08A8 0007 002B             		bclr	#7,$2B(a0)
00017082 6000                       		bra.s	Obj78_Display
00017084                            ; ===========================================================================
00017084                            
00017084                            Obj78_AniHead:
00017084 0201 0010                  		andi.b	#$10,d1
00017088 D001                       		add.b	d1,d0
0001708A 1140 001A                  		move.b	d0,$1A(a0)
0001708E                            
0001708E                            Obj78_Display:
0001708E 3028 0008                  		move.w	8(a0),d0
00017092 0240 FF80                  		andi.w	#$FF80,d0
00017096 3238 F700                  		move.w	($FFFFF700).w,d1
0001709A 0441 0080                  		subi.w	#$80,d1
0001709E 0241 FF80                  		andi.w	#$FF80,d1
000170A2 9041                       		sub.w	d1,d0
000170A4 0C40 0280                  		cmpi.w	#$280,d0
000170A8 6200 0000                  		bhi.w	Obj78_ChkGone
000170AC 4EF9 0000 DBCC             		jmp	DisplaySprite
000170B2                            ; ===========================================================================
000170B2                            
000170B2                            Obj78_ChkGone:
000170B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170B6 7000                       		moveq	#0,d0
000170B8 1028 0023                  		move.b	$23(a0),d0
000170BC 6700                       		beq.s	loc_16ABC
000170BE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000170C4                            
000170C4                            loc_16ABC:
000170C4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000170CA 4E75                       		rts	
000170CC                            ; ===========================================================================
000170CC                            
000170CC                            Obj78_Delete:				; XREF: Obj78_Index
000170CC 4EF9 0000 DC08             		jmp	DeleteObject
000170D2                            ; ===========================================================================
000170D2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000170D4 0000                       		dc.w loc_16B02-Obj78_Index2
000170D6                            ; ===========================================================================
000170D6                            
000170D6                            Obj78_Move:				; XREF: Obj78_Index2
000170D6 5328 002A                  		subq.b	#1,$2A(a0)
000170DA 6B00                       		bmi.s	Obj78_Move2
000170DC 4E75                       		rts	
000170DE                            ; ===========================================================================
000170DE                            
000170DE                            Obj78_Move2:
000170DE 5428 0025                  		addq.b	#2,$25(a0)
000170E2 117C 0010 002A             		move.b	#$10,$2A(a0)
000170E8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170EE 317C 0040 0014             		move.w	#$40,$14(a0)
000170F4 0868 0004 002B             		bchg	#4,$2B(a0)
000170FA 6600                       		bne.s	loc_16AFC
000170FC 4268 0010                  		clr.w	$10(a0)
00017100 4468 0014                  		neg.w	$14(a0)
00017104                            
00017104                            loc_16AFC:
00017104 08E8 0007 002B             		bset	#7,$2B(a0)
0001710A                            
0001710A                            loc_16B02:				; XREF: Obj78_Index2
0001710A 5328 002A                  		subq.b	#1,$2A(a0)
0001710E 6B00                       		bmi.s	loc_16B5E
00017110 2F28 0008                  		move.l	8(a0),-(sp)
00017114 2428 0008                  		move.l	8(a0),d2
00017118 3028 0010                  		move.w	$10(a0),d0
0001711C 0828 0000 0022             		btst	#0,$22(a0)
00017122 6700                       		beq.s	loc_16B1E
00017124 4440                       		neg.w	d0
00017126                            
00017126                            loc_16B1E:
00017126 48C0                       		ext.l	d0
00017128 E180                       		asl.l	#8,d0
0001712A D480                       		add.l	d0,d2
0001712C 2142 0008                  		move.l	d2,8(a0)
00017130 4EBA E2F6                  		jsr	ObjHitFloor
00017134 241F                       		move.l	(sp)+,d2
00017136 0C41 FFF8                  		cmpi.w	#-8,d1
0001713A 6D00                       		blt.s	loc_16B70
0001713C 0C41 000C                  		cmpi.w	#$C,d1
00017140 6C00                       		bge.s	loc_16B70
00017142 D368 000C                  		add.w	d1,$C(a0)
00017146 4842                       		swap	d2
00017148 B468 0008                  		cmp.w	8(a0),d2
0001714C 6700                       		beq.s	locret_16B5C
0001714E 7000                       		moveq	#0,d0
00017150 1028 003C                  		move.b	$3C(a0),d0
00017154 5228 003C                  		addq.b	#1,$3C(a0)
00017158 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001715E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017162                            
00017162                            locret_16B5C:
00017162 4E75                       		rts	
00017164                            ; ===========================================================================
00017164                            
00017164                            loc_16B5E:
00017164 5528 0025                  		subq.b	#2,$25(a0)
00017168 117C 0007 002A             		move.b	#7,$2A(a0)
0001716E 317C 0000 0010             		move.w	#0,$10(a0)
00017174 4E75                       		rts	
00017176                            ; ===========================================================================
00017176                            
00017176                            loc_16B70:
00017176 2142 0008                  		move.l	d2,8(a0)
0001717A 0868 0000 0022             		bchg	#0,$22(a0)
00017180 1168 0022 0001             		move.b	$22(a0),1(a0)
00017186 7000                       		moveq	#0,d0
00017188 1028 003C                  		move.b	$3C(a0),d0
0001718C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017192 5228 003C                  		addq.b	#1,$3C(a0)
00017196 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001719C 4E75                       		rts	
0001719E                            ; ===========================================================================
0001719E                            
0001719E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001719E 2268 003C                  		movea.l	$3C(a0),a1
000171A2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171A8 6A00                       		bpl.s	Obj78_BodySeg1
000171AA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000171B0 1028 0026                  		move.b	$26(a0),d0
000171B4 0240 007F                  		andi.w	#$7F,d0
000171B8 5828 0026                  		addq.b	#4,$26(a0)
000171BC 4A31 0004                  		tst.b	4(a1,d0.w)
000171C0 6A00                       		bpl.s	Obj78_AniBody
000171C2 5828 0026                  		addq.b	#4,$26(a0)
000171C6                            
000171C6                            Obj78_AniBody:
000171C6 1031 0000                  		move.b	(a1,d0.w),d0
000171CA 5000                       		addq.b	#8,d0
000171CC 1140 001A                  		move.b	d0,$1A(a0)
000171D0                            
000171D0                            Obj78_BodySeg1:				; XREF: Obj78_Index
000171D0 2268 003C                  		movea.l	$3C(a0),a1
000171D4 4A28 0022                  		tst.b	$22(a0)
000171D8 6B00 0000                  		bmi.w	loc_16C90
000171DC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171E2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171E8 6700 0000                  		beq.w	loc_16C64
000171EC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171F2 3029 0010                  		move.w	$10(a1),d0
000171F6 D069 0014                  		add.w	$14(a1),d0
000171FA 3140 0010                  		move.w	d0,$10(a0)
000171FE 2428 0008                  		move.l	8(a0),d2
00017202 2602                       		move.l	d2,d3
00017204 3028 0010                  		move.w	$10(a0),d0
00017208 0828 0000 0022             		btst	#0,$22(a0)
0001720E 6700                       		beq.s	loc_16C0C
00017210 4440                       		neg.w	d0
00017212                            
00017212                            loc_16C0C:
00017212 48C0                       		ext.l	d0
00017214 E180                       		asl.l	#8,d0
00017216 D480                       		add.l	d0,d2
00017218 2142 0008                  		move.l	d2,8(a0)
0001721C 4843                       		swap	d3
0001721E B668 0008                  		cmp.w	8(a0),d3
00017222 6700                       		beq.s	loc_16C64
00017224 7000                       		moveq	#0,d0
00017226 1028 003C                  		move.b	$3C(a0),d0
0001722A 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001722E 0C01 0080                  		cmpi.b	#-$80,d1
00017232 6600                       		bne.s	loc_16C50
00017234 4843                       		swap	d3
00017236 2143 0008                  		move.l	d3,8(a0)
0001723A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001723E 0868 0000 0022             		bchg	#0,$22(a0)
00017244 1168 0022 0001             		move.b	$22(a0),1(a0)
0001724A 5228 003C                  		addq.b	#1,$3C(a0)
0001724E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017254 6000                       		bra.s	loc_16C64
00017256                            ; ===========================================================================
00017256                            
00017256                            loc_16C50:
00017256 4881                       		ext.w	d1
00017258 D368 000C                  		add.w	d1,$C(a0)
0001725C 5228 003C                  		addq.b	#1,$3C(a0)
00017260 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017266 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001726A                            
0001726A                            loc_16C64:
0001726A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017270 6700                       		beq.s	loc_16C90
00017272 0C11 0027                  		cmpi.b	#$27,0(a1)
00017276 6700                       		beq.s	loc_16C7C
00017278 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001727E 6600                       		bne.s	loc_16C82
00017280                            
00017280                            loc_16C7C:
00017280 117C 000A 0024             		move.b	#$A,$24(a0)
00017286                            
00017286                            loc_16C82:
00017286 4EF9 0000 DBCC             		jmp	DisplaySprite
0001728C                            
0001728C                            ; ===========================================================================
0001728C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017294                            ; ===========================================================================
00017294                            
00017294                            loc_16C90:
00017294 08E9 0007 0022             		bset	#7,$22(a1)
0001729A                            
0001729A                            loc_16C96:
0001729A 7000                       		moveq	#0,d0
0001729C 1028 0024                  		move.b	$24(a0),d0
000172A0 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000172A4 0828 0000 0022             		btst	#0,$22(a0)
000172AA 6700                       		beq.s	loc_16CAA
000172AC 4440                       		neg.w	d0
000172AE                            
000172AE                            loc_16CAA:
000172AE 3140 0010                  		move.w	d0,$10(a0)
000172B2 317C FC00 0012             		move.w	#-$400,$12(a0)
000172B8 117C 000C 0024             		move.b	#$C,$24(a0)
000172BE 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000172C4                            
000172C4                            loc_16CC0:				; XREF: Obj78_Index
000172C4 4EB9 0000 DB7A             		jsr	ObjectFall
000172CA 4A68 0012                  		tst.w	$12(a0)
000172CE 6B00                       		bmi.s	loc_16CE0
000172D0 4EBA E156                  		jsr	ObjHitFloor
000172D4 4A41                       		tst.w	d1
000172D6 6A00                       		bpl.s	loc_16CE0
000172D8 D368 000C                  		add.w	d1,$C(a0)
000172DC 317C FC00 0012             		move.w	#-$400,$12(a0)
000172E2                            
000172E2                            loc_16CE0:
000172E2 4A28 0001                  		tst.b	1(a0)
000172E6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172EA 4EF9 0000 DBCC             		jmp	DisplaySprite
000172F0                            ; ===========================================================================
000172F0                            Ani_obj78:
000172F0                            	include "_anim\obj78.asm"
000172F0                            ; ---------------------------------------------------------------------------
000172F0                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172F0                            ; ---------------------------------------------------------------------------
000172F0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017300 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017310 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017320 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017330 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017340 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017350 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017360 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017370                            	even
00017370                            	even
00017370                            
00017370                            ; ---------------------------------------------------------------------------
00017370                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017370                            ; ---------------------------------------------------------------------------
00017370                            Map_obj78:
00017370                            	include "_maps\obj78.asm"
00017370                            ; ---------------------------------------------------------------------------
00017370                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017370                            ; ---------------------------------------------------------------------------
00017370 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017374 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017378 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001737C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017380 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017384 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017388 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001738C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017390 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017394 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017398 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001739C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000173A0 01                         byte_16D9E:	dc.b 1
000173A1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000173A6 01                         byte_16DA4:	dc.b 1
000173A7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000173AC 01                         byte_16DAA:	dc.b 1
000173AD F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000173B2 01                         byte_16DB0:	dc.b 1
000173B3 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000173B8 01                         byte_16DB6:	dc.b 1
000173B9 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000173BE 01                         byte_16DBC:	dc.b 1
000173BF ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000173C4 01                         byte_16DC2:	dc.b 1
000173C5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000173CA 01                         byte_16DC8:	dc.b 1
000173CB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000173D0 01                         byte_16DCE:	dc.b 1
000173D1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000173D6 01                         byte_16DD4:	dc.b 1
000173D7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173DC 01                         byte_16DDA:	dc.b 1
000173DD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173E2 01                         byte_16DE0:	dc.b 1
000173E3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173E8 01                         byte_16DE6:	dc.b 1
000173E9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173EE 01                         byte_16DEC:	dc.b 1
000173EF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173F4 01                         byte_16DF2:	dc.b 1
000173F5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000173FA 01                         byte_16DF8:	dc.b 1
000173FB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017400 01                         byte_16DFE:	dc.b 1
00017401 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017406 01                         byte_16E04:	dc.b 1
00017407 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001740C 01                         byte_16E0A:	dc.b 1
0001740D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017412 01                         byte_16E10:	dc.b 1
00017413 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017418 01                         byte_16E16:	dc.b 1
00017419 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001741E 01                         byte_16E1C:	dc.b 1
0001741F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017424 01                         byte_16E22:	dc.b 1
00017425 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001742A 01                         byte_16E28:	dc.b 1
0001742B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017430                            		even
00017430                            		even
00017430                            
00017430                            ; ===========================================================================
00017430                            ; ---------------------------------------------------------------------------
00017430                            ; Object 79 - lamppost
00017430                            ; ---------------------------------------------------------------------------
00017430                            
00017430                            Obj79:					; XREF: Obj_Index
00017430 7000                       		moveq	#0,d0
00017432 1028 0024                  		move.b	$24(a0),d0
00017436 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001743A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001743E 4EFA 8834                  		jmp	MarkObjGone
00017442                            ; ===========================================================================
00017442 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017444 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017446 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017448 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001744A                            ; ===========================================================================
0001744A                            
0001744A                            Obj79_Main:				; XREF: Obj79_Index
0001744A 5428 0024                  		addq.b	#2,$24(a0)
0001744E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017456 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001745C 117C 0004 0001             		move.b	#4,1(a0)
00017462 117C 0008 0019             		move.b	#8,$19(a0)
00017468 117C 0005 0018             		move.b	#5,$18(a0)
0001746E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017472 7000                       		moveq	#0,d0
00017474 1028 0023                  		move.b	$23(a0),d0
00017478 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001747E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017484 6600                       		bne.s	Obj79_RedLamp
00017486 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001748A 0201 007F                  		andi.b	#$7F,d1
0001748E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017492 0202 007F                  		andi.b	#$7F,d2
00017496 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017498 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001749A                            
0001749A                            Obj79_RedLamp:
0001749A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174A0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000174A6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000174AC 4E75                       		rts	
000174AE                            ; ===========================================================================
000174AE                            
000174AE                            Obj79_BlueLamp:				; XREF: Obj79_Index
000174AE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000174B2 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000174B6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000174BA 6B00 0000                  		bmi.w	locret_16F90
000174BE 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174C2 0201 007F                  		andi.b	#$7F,d1
000174C6 1428 0028                  		move.b	$28(a0),d2
000174CA 0202 007F                  		andi.b	#$7F,d2
000174CE B202                       		cmp.b	d2,d1
000174D0 6500                       		bcs.s	Obj79_HitLamp
000174D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174D6 7000                       		moveq	#0,d0
000174D8 1028 0023                  		move.b	$23(a0),d0
000174DC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174E2 117C 0004 0024             		move.b	#4,$24(a0)
000174E8 117C 0003 001A             		move.b	#3,$1A(a0)
000174EE 6000 0000                  		bra.w	locret_16F90
000174F2                            ; ===========================================================================
000174F2                            
000174F2                            Obj79_HitLamp:
000174F2 3038 D008                  		move.w	($FFFFD008).w,d0
000174F6 9068 0008                  		sub.w	8(a0),d0
000174FA 5040                       		addq.w	#8,d0
000174FC 0C40 0010                  		cmpi.w	#$10,d0
00017500 6400 0000                  		bcc.w	locret_16F90
00017504 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017508 9068 000C                  		sub.w	$C(a0),d0
0001750C 0640 0040                  		addi.w	#$40,d0
00017510 0C40 0068                  		cmpi.w	#$68,d0
00017514 6400                       		bcc.s	locret_16F90
00017516 303C 00A1                  		move.w	#$A1,d0
0001751A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017520 5428 0024                  		addq.b	#2,$24(a0)
00017524 4EB9 0000 E052             		jsr	SingleObjLoad
0001752A 6600                       		bne.s	loc_16F76
0001752C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017530 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017536 3368 0008 0030             		move.w	8(a0),$30(a1)
0001753C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017542 0469 0018 0032             		subi.w	#$18,$32(a1)
00017548 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017550 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017556 137C 0004 0001             		move.b	#4,1(a1)
0001755C 137C 0008 0019             		move.b	#8,$19(a1)
00017562 137C 0004 0018             		move.b	#4,$18(a1)
00017568 137C 0002 001A             		move.b	#2,$1A(a1)
0001756E 337C 0020 0036             		move.w	#$20,$36(a1)
00017574                            
00017574                            loc_16F76:
00017574 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001757A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001757E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017582 7000                       		moveq	#0,d0
00017584 1028 0023                  		move.b	$23(a0),d0
00017588 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001758E                            
0001758E                            locret_16F90:
0001758E 4E75                       		rts	
00017590                            ; ===========================================================================
00017590                            
00017590                            Obj79_AfterHit:				; XREF: Obj79_Index
00017590 4E75                       		rts	
00017592                            ; ===========================================================================
00017592                            
00017592                            Obj79_Twirl:				; XREF: Obj79_Index
00017592 5368 0036                  		subq.w	#1,$36(a0)
00017596 6A00                       		bpl.s	loc_16FA0
00017598 117C 0004 0024             		move.b	#4,$24(a0)
0001759E                            
0001759E                            loc_16FA0:
0001759E 1028 0026                  		move.b	$26(a0),d0
000175A2 0428 0010 0026             		subi.b	#$10,$26(a0)
000175A8 0400 0040                  		subi.b	#$40,d0
000175AC 4EB9 0000 2C82             		jsr	(CalcSine).l
000175B2 C3FC 0C00                  		muls.w	#$C00,d1
000175B6 4841                       		swap	d1
000175B8 D268 0030                  		add.w	$30(a0),d1
000175BC 3141 0008                  		move.w	d1,8(a0)
000175C0 C1FC 0C00                  		muls.w	#$C00,d0
000175C4 4840                       		swap	d0
000175C6 D068 0032                  		add.w	$32(a0),d0
000175CA 3140 000C                  		move.w	d0,$C(a0)
000175CE 4E75                       		rts	
000175D0                            ; ===========================================================================
000175D0                            ; ---------------------------------------------------------------------------
000175D0                            ; Subroutine to	store information when you hit a lamppost
000175D0                            ; ---------------------------------------------------------------------------
000175D0                            
000175D0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000175D0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000175D6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175DC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175E2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175E8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175EE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175F4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000175FA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017600 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017606 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001760C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017612 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017618 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001761E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017624 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001762A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017630 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017636 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001763C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017642 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017648 4E75                       		rts	
0001764A                            
0001764A                            ; ---------------------------------------------------------------------------
0001764A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001764A                            ; ---------------------------------------------------------------------------
0001764A                            
0001764A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001764A                            
0001764A                            
0001764A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001764A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017650 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017656 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001765C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017662 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017668 4278 FE20                  		clr.w	($FFFFFE20).w
0001766C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017670 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017676 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001767C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017680 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017686 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001768C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017692 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017698 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001769E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000176A4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000176AA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000176B0 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000176B6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000176BC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000176C2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000176C8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000176CE 6600                       		bne.s	loc_170E4
000176D0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000176D6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176DC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176E2                            
000176E2                            loc_170E4:
000176E2 4A38 FE30                  		tst.b	($FFFFFE30).w
000176E6 6A00                       		bpl.s	locret_170F6
000176E8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176EC 0440 00A0                  		subi.w	#$A0,d0
000176F0 31C0 F728                  		move.w	d0,($FFFFF728).w
000176F4                            
000176F4                            locret_170F6:
000176F4 4E75                       		rts	
000176F6                            ; End of function Obj79_LoadInfo
000176F6                            
000176F6                            ; ===========================================================================
000176F6                            ; ---------------------------------------------------------------------------
000176F6                            ; Sprite mappings - lamppost
000176F6                            ; ---------------------------------------------------------------------------
000176F6                            Map_obj79:
000176F6                            	include "_maps\obj79.asm"
000176F6                            ; ---------------------------------------------------------------------------
000176F6                            ; Sprite mappings - lamppost
000176F6                            ; ---------------------------------------------------------------------------
000176F6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000176FA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000176FE 06                         byte_17100:	dc.b 6
000176FF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017704 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017709 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001770E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017713 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017718 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001771D 04                         byte_1711F:	dc.b 4
0001771E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017723 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017728 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001772D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017732 02                         byte_17134:	dc.b 2
00017733 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017738 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001773D 06                         byte_1713F:	dc.b 6
0001773E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017743 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017748 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001774D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017752 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017757 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001775C                            		even
0001775C                            		even
0001775C                            
0001775C                            ; ===========================================================================
0001775C                            ; ---------------------------------------------------------------------------
0001775C                            ; Object 7D - hidden points at the end of a level
0001775C                            ; ---------------------------------------------------------------------------
0001775C                            
0001775C                            Obj7D:					; XREF: Obj_Index
0001775C 7000                       		moveq	#0,d0
0001775E 1028 0024                  		move.b	$24(a0),d0
00017762 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017766 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001776A                            ; ===========================================================================
0001776A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001776C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001776E                            ; ===========================================================================
0001776E                            
0001776E                            Obj7D_Main:				; XREF: Obj7D_Index
0001776E 7410                       		moveq	#$10,d2
00017770 3602                       		move.w	d2,d3
00017772 D643                       		add.w	d3,d3
00017774 43F8 D000                  		lea	($FFFFD000).w,a1
00017778 3029 0008                  		move.w	8(a1),d0
0001777C 9068 0008                  		sub.w	8(a0),d0
00017780 D042                       		add.w	d2,d0
00017782 B043                       		cmp.w	d3,d0
00017784 6400                       		bcc.s	Obj7D_ChkDel
00017786 3229 000C                  		move.w	$C(a1),d1
0001778A 9268 000C                  		sub.w	$C(a0),d1
0001778E D242                       		add.w	d2,d1
00017790 B243                       		cmp.w	d3,d1
00017792 6400                       		bcc.s	Obj7D_ChkDel
00017794 4A78 FE08                  		tst.w	($FFFFFE08).w
00017798 6600                       		bne.s	Obj7D_ChkDel
0001779A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001779E 6600                       		bne.s	Obj7D_ChkDel
000177A0 5428 0024                  		addq.b	#2,$24(a0)
000177A4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000177AC 317C 84B6 0002             		move.w	#$84B6,2(a0)
000177B2 0028 0004 0001             		ori.b	#4,1(a0)
000177B8 117C 0000 0018             		move.b	#0,$18(a0)
000177BE 117C 0010 0019             		move.b	#$10,$19(a0)
000177C4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000177CA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000177D0 303C 00C9                  		move.w	#$C9,d0
000177D4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000177DA 7000                       		moveq	#0,d0
000177DC 1028 0028                  		move.b	$28(a0),d0
000177E0 D040                       		add.w	d0,d0
000177E2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177E6 4EB9 0000 0000             		jsr	AddPoints
000177EC                            
000177EC                            Obj7D_ChkDel:
000177EC 3028 0008                  		move.w	8(a0),d0
000177F0 0240 FF80                  		andi.w	#$FF80,d0
000177F4 3238 F700                  		move.w	($FFFFF700).w,d1
000177F8 0441 0080                  		subi.w	#$80,d1
000177FC 0241 FF80                  		andi.w	#$FF80,d1
00017800 9041                       		sub.w	d1,d0
00017802 0C40 0280                  		cmpi.w	#$280,d0
00017806 6200                       		bhi.s	Obj7D_Delete
00017808 4E75                       		rts	
0001780A                            ; ===========================================================================
0001780A                            
0001780A                            Obj7D_Delete:
0001780A 4EF9 0000 DC08             		jmp	DeleteObject
00017810                            ; ===========================================================================
00017810 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017812 03E8                       		dc.w 1000
00017814 0064                       		dc.w 100
00017816 0001                       		dc.w 1
00017818                            ; ===========================================================================
00017818                            
00017818                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017818 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001781C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001781E 3028 0008                  		move.w	8(a0),d0
00017822 0240 FF80                  		andi.w	#-$80,d0
00017826 3238 F700                  		move.w	($FFFFF700).w,d1
0001782A 0441 0080                  		subi.w	#$80,d1
0001782E 0241 FF80                  		andi.w	#-$80,d1
00017832 9041                       		sub.w	d1,d0
00017834 0C40 0280                  		cmpi.w	#$280,d0
00017838 6200                       		bhi.s	Obj7D_Delete2
0001783A 4EF9 0000 DBCC             		jmp	DisplaySprite
00017840                            ; ===========================================================================
00017840                            
00017840                            Obj7D_Delete2:
00017840 4EF9 0000 DC08             		jmp	DeleteObject
00017846                            ; ===========================================================================
00017846                            ; ---------------------------------------------------------------------------
00017846                            ; Sprite mappings - hidden points at the end of	a level
00017846                            ; ---------------------------------------------------------------------------
00017846                            Map_obj7D:
00017846                            	include "_maps\obj7D.asm"
00017846                            ; ---------------------------------------------------------------------------
00017846                            ; Sprite mappings - hidden points at the end of	a level
00017846                            ; ---------------------------------------------------------------------------
00017846 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001784A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001784E 00                         byte_17250:	dc.b 0
0001784F 01                         byte_17251:	dc.b 1
00017850 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017855 01                         byte_17257:	dc.b 1
00017856 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001785B 01                         byte_1725D:	dc.b 1
0001785C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017862 00                         		even
00017862 00                         		even
00017862                            
00017862                            ; ===========================================================================
00017862                            ; ---------------------------------------------------------------------------
00017862                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017862                            ; ---------------------------------------------------------------------------
00017862                            
00017862                            Obj8A:					; XREF: Obj_Index
00017862 7000                       		moveq	#0,d0
00017864 1028 0024                  		move.b	$24(a0),d0
00017868 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001786C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017870                            ; ===========================================================================
00017870 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017872 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017874                            ; ===========================================================================
00017874                            
00017874                            Obj8A_Main:				; XREF: Obj8A_Index
00017874 5428 0024                  		addq.b	#2,$24(a0)
00017878 317C 0120 0008             		move.w	#$120,8(a0)
0001787E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017884 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
0001788C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017892 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017896 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001789A 117C 0000 0001             		move.b	#0,1(a0)
000178A0 117C 0000 0018             		move.b	#0,$18(a0)
000178A6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000178AC 6600                       		bne.s	Obj8A_Display	; if not, branch
000178AE 317C 00A6 0002             		move.w	#$A6,2(a0)
000178B4 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000178BA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000178BE 6700                       		beq.s	Obj8A_Display	; if not, branch
000178C0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000178C6 6600                       		bne.s	Obj8A_Display	; if not, branch
000178C8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000178CE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000178D4 4EF9 0000 DC08             		jmp	DeleteObject
000178DA                            ; ===========================================================================
000178DA                            
000178DA                            Obj8A_Display:				; XREF: Obj8A_Index
000178DA 4EF9 0000 DBCC             		jmp	DisplaySprite
000178E0                            ; ===========================================================================
000178E0                            ; ---------------------------------------------------------------------------
000178E0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178E0                            ; ---------------------------------------------------------------------------
000178E0                            Map_obj8A:
000178E0                            	include "_maps\obj8A.asm"
000178E0                            ; --------------------------------------------------------------------------------
000178E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178E0                            ; --------------------------------------------------------------------------------
000178E0                            
000178E0                            SME_MD8yg:	
000178E0 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178E4 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178E8 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178EC 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178F0 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178F4 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178F6 0E                         SME_MD8yg_16:	dc.b $E	
000178F7 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000178FC F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
00017901 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
00017906 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
0001790B F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
00017910 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017915 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
0001791A F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
0001791F F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017924 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
00017929 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
0001792E F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017933 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017938 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
0001793D 10                         SME_MD8yg_5D:	dc.b $10	
0001793E D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017943 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017948 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
0001794D D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017952 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017957 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
0001795C D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017961 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017966 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
0001796B 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017970 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017975 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
0001797A 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001797F 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017984 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017989 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001798E 0A                         SME_MD8yg_AE:	dc.b $A	
0001798F D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017994 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017999 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001799E D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
000179A3 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
000179A8 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
000179AD D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
000179B2 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
000179B7 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000179BC 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000179C1 18                         SME_MD8yg_E1:	dc.b $18	
000179C2 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000179C7 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
000179CC D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
000179D1 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000179D6 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000179DB D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179E0 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179E5 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179EA D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179EF D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179F4 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179F9 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000179FE D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017A03 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017A08 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017A0D 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017A12 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017A17 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017A1C 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017A21 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017A26 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017A2B 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017A30 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A35 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A3A 14                         SME_MD8yg_15A:	dc.b $14	
00017A3B D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A40 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A45 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A4A D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A4F D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A54 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A59 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A5E 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A63 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A68 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A6D 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A72 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A77 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A7C 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A81 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A86 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A8B 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A90 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A95 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A9A 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A9F 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017AA0 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017AA5 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017AAA D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017AAF D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017AB4 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017AB9 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017ABE D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AC3 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017AC8 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017ACD D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017AD2 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017AD7 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017ADC 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017AE1 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017AE6 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AEB 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017AF0 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017AF5 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017AFA 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017AFF 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017B04 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017B09 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017B0E 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017B13 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017B18 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017B1D 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017B22 17                         SME_MD8yg_242:	dc.b $17	
00017B23 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017B28 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017B2D D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017B32 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B37 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B3C D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B41 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B46 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B4B D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B50 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B55 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B5A D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B5F 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B64 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B69 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B6E 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B73 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B78 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B7D 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B82 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B87 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B8C 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B91 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B96 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B97 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B9C D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017BA1 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017BA6 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017BAB D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017BB0 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017BB5 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017BBA D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017BBF D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017BC4 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017BC9 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017BCE D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017BD3 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017BD8 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BDD 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BE2 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BE7 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BEC 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BF1 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BF6 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017BFB 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017C00 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017C05 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017C0A 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017C0F 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017C14 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017C19 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017C1E 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017C23 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017C28 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017C2D 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017C32 0F                         SME_MD8yg_352:	dc.b $F	
00017C33 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C38 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C3D F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C42 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C47 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C4C F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C51 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C56 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C5B F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C60 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C65 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C6A F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C6F F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C74 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C79 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C7E 08                         SME_MD8yg_39E:	dc.b 8	
00017C7F 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C84 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C89 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C8E 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C93 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C98 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C9D 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017CA2 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017CA7 17                         SME_MD8yg_3C7:	dc.b $17	
00017CA8 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017CAD D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017CB2 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017CB7 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017CBC D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017CC1 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017CC6 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017CCB E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017CD0 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017CD5 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017CDA D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CDF D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CE4 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CE9 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CEE E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CF3 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CF8 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017CFD E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017D02 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017D07 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017D0C F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017D11 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017D16 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017D1C 00                         		even
00017D1C 00                         		even
00017D1C                            
00017D1C                            ; ===========================================================================
00017D1C                            ; ---------------------------------------------------------------------------
00017D1C                            ; Object 3D - Eggman (GHZ)
00017D1C                            ; ---------------------------------------------------------------------------
00017D1C                            
00017D1C                            Obj3D:					; XREF: Obj_Index
00017D1C 7000                       		moveq	#0,d0
00017D1E 1028 0024                  		move.b	$24(a0),d0
00017D22 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017D26 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017D2A                            ; ===========================================================================
00017D2A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017D2C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017D2E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017D30 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017D32                            
00017D32 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D34 0401                       		dc.b 4,	1
00017D36 0607                       		dc.b 6,	7
00017D38                            ; ===========================================================================
00017D38                            
00017D38                            Obj3D_Main:				; XREF: Obj3D_Index
00017D38 45F9 0001 7D32             		lea	(Obj3D_ObjData).l,a2
00017D3E 2248                       		movea.l	a0,a1
00017D40 7202                       		moveq	#2,d1
00017D42 6000                       		bra.s	Obj3D_LoadBoss
00017D44                            ; ===========================================================================
00017D44                            
00017D44                            Obj3D_Loop:
00017D44 4EB9 0000 E068             		jsr	SingleObjLoad2
00017D4A 6600                       		bne.s	loc_17772
00017D4C                            
00017D4C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D4C 135A 0024                  		move.b	(a2)+,$24(a1)
00017D50 12BC 003D                  		move.b	#$3D,0(a1)
00017D54 3368 0008 0008             		move.w	8(a0),8(a1)
00017D5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D60 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D68 337C 0400 0002             		move.w	#$400,2(a1)
00017D6E 137C 0004 0001             		move.b	#4,1(a1)
00017D74 137C 0020 0019             		move.b	#$20,$19(a1)
00017D7A 137C 0003 0018             		move.b	#3,$18(a1)
00017D80 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D84 2348 0034                  		move.l	a0,$34(a1)
00017D88 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D8C                            
00017D8C                            loc_17772:
00017D8C 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D92 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D98 117C 000F 0020             		move.b	#$F,$20(a0)
00017D9E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017DA4                            
00017DA4                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017DA4 7000                       		moveq	#0,d0
00017DA6 1028 0025                  		move.b	$25(a0),d0
00017DAA 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017DAE 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017DB2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017DB8 4EB9 0000 ACA2             		jsr	AnimateSprite
00017DBE 1028 0022                  		move.b	$22(a0),d0
00017DC2 0200 0003                  		andi.b	#3,d0
00017DC6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017DCC 8128 0001                  		or.b	d0,1(a0)
00017DD0 4EF9 0000 DBCC             		jmp	DisplaySprite
00017DD6                            ; ===========================================================================
00017DD6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017DD8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017DDA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DDC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DDE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DE0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DE2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DE4                            ; ===========================================================================
00017DE4                            
00017DE4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DE4 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017DEA 6100 0000                  		bsr.w	BossMove
00017DEE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DF4 6600                       		bne.s	loc_177E6
00017DF6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017DFC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017E00                            
00017E00                            loc_177E6:
00017E00 1028 003F                  		move.b	$3F(a0),d0
00017E04 4EB9 0000 2C82             		jsr	(CalcSine).l
00017E0A EC40                       		asr.w	#6,d0
00017E0C D068 0038                  		add.w	$38(a0),d0
00017E10 3140 000C                  		move.w	d0,$C(a0)
00017E14 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E1A 5428 003F                  		addq.b	#2,$3F(a0)
00017E1E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017E24 6400                       		bcc.s	locret_1784A
00017E26 4A28 0022                  		tst.b	$22(a0)
00017E2A 6B00                       		bmi.s	loc_1784C
00017E2C 4A28 0020                  		tst.b	$20(a0)
00017E30 6600                       		bne.s	locret_1784A
00017E32 4A28 003E                  		tst.b	$3E(a0)
00017E36 6600                       		bne.s	Obj3D_ShipFlash
00017E38 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E3E 303C 00AC                  		move.w	#$AC,d0
00017E42 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E48                            
00017E48                            Obj3D_ShipFlash:
00017E48 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E4C 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E4E 4A51                       		tst.w	(a1)
00017E50 6600                       		bne.s	loc_1783C
00017E52 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E56                            
00017E56                            loc_1783C:
00017E56 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E58 5328 003E                  		subq.b	#1,$3E(a0)
00017E5C 6600                       		bne.s	locret_1784A
00017E5E 117C 000F 0020             		move.b	#$F,$20(a0)
00017E64                            
00017E64                            locret_1784A:
00017E64 4E75                       		rts	
00017E66                            ; ===========================================================================
00017E66                            
00017E66                            loc_1784C:				; XREF: loc_177E6
00017E66 7064                       		moveq	#100,d0
00017E68 6100 0000                  		bsr.w	AddPoints
00017E6C 117C 0008 0025             		move.b	#8,$25(a0)
00017E72 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E78 4E75                       		rts	
00017E7A                            
00017E7A                            ; ---------------------------------------------------------------------------
00017E7A                            ; Defeated boss	subroutine
00017E7A                            ; ---------------------------------------------------------------------------
00017E7A                            
00017E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E7A                            
00017E7A                            
00017E7A                            BossDefeated:
00017E7A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E7E 0200 0007                  		andi.b	#7,d0
00017E82 6600                       		bne.s	locret_178A2
00017E84 4EB9 0000 E052             		jsr	SingleObjLoad
00017E8A 6600                       		bne.s	locret_178A2
00017E8C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E90 3368 0008 0008             		move.w	8(a0),8(a1)
00017E96 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E9C 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00017EA2 3200                       		move.w	d0,d1
00017EA4 7200                       		moveq	#0,d1
00017EA6 1200                       		move.b	d0,d1
00017EA8 E409                       		lsr.b	#2,d1
00017EAA 0441 0020                  		subi.w	#$20,d1
00017EAE D369 0008                  		add.w	d1,8(a1)
00017EB2 E048                       		lsr.w	#8,d0
00017EB4 E608                       		lsr.b	#3,d0
00017EB6 D169 000C                  		add.w	d0,$C(a1)
00017EBA                            
00017EBA                            locret_178A2:
00017EBA 4E75                       		rts	
00017EBC                            ; End of function BossDefeated
00017EBC                            
00017EBC                            ; ---------------------------------------------------------------------------
00017EBC                            ; Subroutine to	move a boss
00017EBC                            ; ---------------------------------------------------------------------------
00017EBC                            
00017EBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EBC                            
00017EBC                            
00017EBC                            BossMove:
00017EBC 2428 0030                  		move.l	$30(a0),d2
00017EC0 2628 0038                  		move.l	$38(a0),d3
00017EC4 3028 0010                  		move.w	$10(a0),d0
00017EC8 48C0                       		ext.l	d0
00017ECA E180                       		asl.l	#8,d0
00017ECC D480                       		add.l	d0,d2
00017ECE 3028 0012                  		move.w	$12(a0),d0
00017ED2 48C0                       		ext.l	d0
00017ED4 E180                       		asl.l	#8,d0
00017ED6 D680                       		add.l	d0,d3
00017ED8 2142 0030                  		move.l	d2,$30(a0)
00017EDC 2143 0038                  		move.l	d3,$38(a0)
00017EE0 4E75                       		rts	
00017EE2                            ; End of function BossMove
00017EE2                            
00017EE2                            ; ===========================================================================
00017EE2                            
00017EE2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017EE2 317C FF00 0010             		move.w	#-$100,$10(a0)
00017EE8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017EEE 6100 FFCC                  		bsr.w	BossMove
00017EF2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EF8 6600                       		bne.s	loc_17916
00017EFA 317C 0000 0010             		move.w	#0,$10(a0)
00017F00 317C 0000 0012             		move.w	#0,$12(a0)
00017F06 5428 0025                  		addq.b	#2,$25(a0)
00017F0A 4EB9 0000 E068             		jsr	SingleObjLoad2
00017F10 6600                       		bne.s	loc_17910
00017F12 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017F16 3368 0030 0008             		move.w	$30(a0),8(a1)
00017F1C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017F22 2348 0034                  		move.l	a0,$34(a1)
00017F26                            
00017F26                            loc_17910:
00017F26 317C 0077 003C             		move.w	#$77,$3C(a0)
00017F2C                            
00017F2C                            loc_17916:
00017F2C 6000 FED2                  		bra.w	loc_177E6
00017F30                            ; ===========================================================================
00017F30                            
00017F30                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017F30 5368 003C                  		subq.w	#1,$3C(a0)
00017F34 6A00                       		bpl.s	Obj3D_Reverse
00017F36 5428 0025                  		addq.b	#2,$25(a0)
00017F3A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F40 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F46 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F4C 6600                       		bne.s	Obj3D_Reverse
00017F4E 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F54 317C 0040 0010             		move.w	#$40,$10(a0)
00017F5A                            
00017F5A                            Obj3D_Reverse:
00017F5A 0828 0000 0022             		btst	#0,$22(a0)
00017F60 6600                       		bne.s	loc_17950
00017F62 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F66                            
00017F66                            loc_17950:
00017F66 6000 FE98                  		bra.w	loc_177E6
00017F6A                            ; ===========================================================================
00017F6A                            
00017F6A                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F6A 5368 003C                  		subq.w	#1,$3C(a0)
00017F6E 6B00                       		bmi.s	loc_17960
00017F70 6100 FF4A                  		bsr.w	BossMove
00017F74 6000                       		bra.s	loc_17976
00017F76                            ; ===========================================================================
00017F76                            
00017F76                            loc_17960:
00017F76 0868 0000 0022             		bchg	#0,$22(a0)
00017F7C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F82 5528 0025                  		subq.b	#2,$25(a0)
00017F86 317C 0000 0010             		move.w	#0,$10(a0)
00017F8C                            
00017F8C                            loc_17976:
00017F8C 6000 FE72                  		bra.w	loc_177E6
00017F90                            ; ===========================================================================
00017F90                            
00017F90                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F90 5368 003C                  		subq.w	#1,$3C(a0)
00017F94 6B00                       		bmi.s	loc_17984
00017F96 6000 FEE2                  		bra.w	BossDefeated
00017F9A                            ; ===========================================================================
00017F9A                            
00017F9A                            loc_17984:
00017F9A 08E8 0000 0022             		bset	#0,$22(a0)
00017FA0 08A8 0007 0022             		bclr	#7,$22(a0)
00017FA6 4268 0010                  		clr.w	$10(a0)
00017FAA 5428 0025                  		addq.b	#2,$25(a0)
00017FAE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017FB4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017FB8 6600                       		bne.s	locret_179AA
00017FBA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FC0                            
00017FC0                            locret_179AA:
00017FC0 4E75                       		rts	
00017FC2                            ; ===========================================================================
00017FC2                            
00017FC2                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FC2 5268 003C                  		addq.w	#1,$3C(a0)
00017FC6 6700                       		beq.s	loc_179BC
00017FC8 6A00                       		bpl.s	loc_179C2
00017FCA 0668 0018 0012             		addi.w	#$18,$12(a0)
00017FD0 6000                       		bra.s	loc_179EE
00017FD2                            ; ===========================================================================
00017FD2                            
00017FD2                            loc_179BC:
00017FD2 4268 0012                  		clr.w	$12(a0)
00017FD6 6000                       		bra.s	loc_179EE
00017FD8                            ; ===========================================================================
00017FD8                            
00017FD8                            loc_179C2:
00017FD8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FDE 6500                       		bcs.s	loc_179DA
00017FE0 6700                       		beq.s	loc_179E0
00017FE2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FE8 6500                       		bcs.s	loc_179EE
00017FEA 5428 0025                  		addq.b	#2,$25(a0)
00017FEE 6000                       		bra.s	loc_179EE
00017FF0                            ; ===========================================================================
00017FF0                            
00017FF0                            loc_179DA:
00017FF0 5168 0012                  		subq.w	#8,$12(a0)
00017FF4 6000                       		bra.s	loc_179EE
00017FF6                            ; ===========================================================================
00017FF6                            
00017FF6                            loc_179E0:
00017FF6 4268 0012                  		clr.w	$12(a0)
00017FFA 303C 0081                  		move.w	#$81,d0
00017FFE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00018004                            
00018004                            loc_179EE:
00018004 6100 FEB6                  		bsr.w	BossMove
00018008 6000 FDF6                  		bra.w	loc_177E6
0001800C                            ; ===========================================================================
0001800C                            
0001800C                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001800C 317C 0400 0010             		move.w	#$400,$10(a0)
00018012 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018018 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001801E 6700                       		beq.s	loc_17A10
00018020 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018024 6000                       		bra.s	loc_17A16
00018026                            ; ===========================================================================
00018026                            
00018026                            loc_17A10:
00018026 4A28 0001                  		tst.b	1(a0)
0001802A 6A00                       		bpl.s	Obj3D_ShipDel
0001802C                            
0001802C                            loc_17A16:
0001802C 6100 FE8E                  		bsr.w	BossMove
00018030 6000 FDCE                  		bra.w	loc_177E6
00018034                            ; ===========================================================================
00018034                            
00018034                            Obj3D_ShipDel:
00018034 4EF9 0000 DC08             		jmp	DeleteObject
0001803A                            ; ===========================================================================
0001803A                            
0001803A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001803A 7000                       		moveq	#0,d0
0001803C 7201                       		moveq	#1,d1
0001803E 2268 0034                  		movea.l	$34(a0),a1
00018042 1029 0025                  		move.b	$25(a1),d0
00018046 5900                       		subq.b	#4,d0
00018048 6600                       		bne.s	loc_17A3E
0001804A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018050 6600                       		bne.s	loc_17A46
00018052 7204                       		moveq	#4,d1
00018054                            
00018054                            loc_17A3E:
00018054 5D00                       		subq.b	#6,d0
00018056 6B00                       		bmi.s	loc_17A46
00018058 720A                       		moveq	#$A,d1
0001805A 6000                       		bra.s	loc_17A5A
0001805C                            ; ===========================================================================
0001805C                            
0001805C                            loc_17A46:
0001805C 4A29 0020                  		tst.b	$20(a1)
00018060 6600                       		bne.s	loc_17A50
00018062 7205                       		moveq	#5,d1
00018064 6000                       		bra.s	loc_17A5A
00018066                            ; ===========================================================================
00018066                            
00018066                            loc_17A50:
00018066 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001806C 6500                       		bcs.s	loc_17A5A
0001806E 7204                       		moveq	#4,d1
00018070                            
00018070                            loc_17A5A:
00018070 1141 001C                  		move.b	d1,$1C(a0)
00018074 5500                       		subq.b	#2,d0
00018076 6600                       		bne.s	Obj3D_FaceDisp
00018078 117C 0006 001C             		move.b	#6,$1C(a0)
0001807E 4A28 0001                  		tst.b	1(a0)
00018082 6A00                       		bpl.s	Obj3D_FaceDel
00018084                            
00018084                            Obj3D_FaceDisp:
00018084 6000                       		bra.s	Obj3D_Display
00018086                            ; ===========================================================================
00018086                            
00018086                            Obj3D_FaceDel:
00018086 4EF9 0000 DC08             		jmp	DeleteObject
0001808C                            ; ===========================================================================
0001808C                            
0001808C                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001808C 117C 0007 001C             		move.b	#7,$1C(a0)
00018092 2268 0034                  		movea.l	$34(a0),a1
00018096 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001809C 6600                       		bne.s	loc_17A96
0001809E 117C 000B 001C             		move.b	#$B,$1C(a0)
000180A4 4A28 0001                  		tst.b	1(a0)
000180A8 6A00                       		bpl.s	Obj3D_FlameDel
000180AA 6000                       		bra.s	Obj3D_FlameDisp
000180AC                            ; ===========================================================================
000180AC                            
000180AC                            loc_17A96:
000180AC 3029 0010                  		move.w	$10(a1),d0
000180B0 6700                       		beq.s	Obj3D_FlameDisp
000180B2 117C 0008 001C             		move.b	#8,$1C(a0)
000180B8                            
000180B8                            Obj3D_FlameDisp:
000180B8 6000                       		bra.s	Obj3D_Display
000180BA                            ; ===========================================================================
000180BA                            
000180BA                            Obj3D_FlameDel:
000180BA 4EF9 0000 DC08             		jmp	DeleteObject
000180C0                            ; ===========================================================================
000180C0                            
000180C0                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180C0 2268 0034                  		movea.l	$34(a0),a1
000180C4 3169 0008 0008             		move.w	8(a1),8(a0)
000180CA 3169 000C 000C             		move.w	$C(a1),$C(a0)
000180D0 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180D6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180DC 4EB9 0000 ACA2             		jsr	AnimateSprite
000180E2 1028 0022                  		move.b	$22(a0),d0
000180E6 0200 0003                  		andi.b	#3,d0
000180EA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180F0 8128 0001                  		or.b	d0,1(a0)
000180F4 4EF9 0000 DBCC             		jmp	DisplaySprite
000180FA                            ; ===========================================================================
000180FA                            ; ---------------------------------------------------------------------------
000180FA                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000180FA                            ; ---------------------------------------------------------------------------
000180FA                            
000180FA                            Obj48:					; XREF: Obj_Index
000180FA 7000                       		moveq	#0,d0
000180FC 1028 0024                  		move.b	$24(a0),d0
00018100 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018104 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018108                            ; ===========================================================================
00018108 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001810A 0000                       		dc.w Obj48_Base-Obj48_Index
0001810C 0000                       		dc.w Obj48_Display2-Obj48_Index
0001810E 0000                       		dc.w loc_17C68-Obj48_Index
00018110 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018112                            ; ===========================================================================
00018112                            
00018112                            Obj48_Main:				; XREF: Obj48_Index
00018112 5428 0024                  		addq.b	#2,$24(a0)
00018116 317C 4080 0026             		move.w	#$4080,$26(a0)
0001811C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018122 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001812A 317C 046C 0002             		move.w	#$46C,2(a0)
00018130 45E8 0028                  		lea	$28(a0),a2
00018134 14FC 0000                  		move.b	#0,(a2)+
00018138 7205                       		moveq	#5,d1
0001813A 2248                       		movea.l	a0,a1
0001813C 6000                       		bra.s	loc_17B60
0001813E                            ; ===========================================================================
0001813E                            
0001813E                            Obj48_MakeLinks:
0001813E 4EB9 0000 E068             		jsr	SingleObjLoad2
00018144 6600                       		bne.s	Obj48_MakeBall
00018146 3368 0008 0008             		move.w	8(a0),8(a1)
0001814C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018152 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018156 137C 0006 0024             		move.b	#6,$24(a1)
0001815C 237C 0000 80F6 0004        		move.l	#Map_obj15,4(a1)
00018164 337C 0380 0002             		move.w	#$380,2(a1)
0001816A 137C 0001 001A             		move.b	#1,$1A(a1)
00018170 5228 0028                  		addq.b	#1,$28(a0)
00018174                            
00018174                            loc_17B60:				; XREF: Obj48_Main
00018174 3A09                       		move.w	a1,d5
00018176 0445 D000                  		subi.w	#$D000,d5
0001817A EC4D                       		lsr.w	#6,d5
0001817C 0245 007F                  		andi.w	#$7F,d5
00018180 14C5                       		move.b	d5,(a2)+
00018182 137C 0004 0001             		move.b	#4,1(a1)
00018188 137C 0008 0019             		move.b	#8,$19(a1)
0001818E 137C 0006 0018             		move.b	#6,$18(a1)
00018194 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001819A 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001819E                            
0001819E                            Obj48_MakeBall:
0001819E 137C 0008 0024             		move.b	#8,$24(a1)
000181A4 237C 0000 8654 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000181AC 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000181B2 137C 0001 001A             		move.b	#1,$1A(a1)
000181B8 137C 0005 0018             		move.b	#5,$18(a1)
000181BE 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181C4 4E75                       		rts	
000181C6                            ; ===========================================================================
000181C6                            
000181C6 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000181CC                            
000181CC                            ; ===========================================================================
000181CC                            
000181CC                            Obj48_Base:				; XREF: Obj48_Index
000181CC 47F9 0001 81C6             		lea	(Obj48_PosData).l,a3
000181D2 45E8 0028                  		lea	$28(a0),a2
000181D6 7C00                       		moveq	#0,d6
000181D8 1C1A                       		move.b	(a2)+,d6
000181DA                            
000181DA                            loc_17BC6:
000181DA 7800                       		moveq	#0,d4
000181DC 181A                       		move.b	(a2)+,d4
000181DE ED4C                       		lsl.w	#6,d4
000181E0 0684 00FF D000             		addi.l	#$FFD000,d4
000181E6 2244                       		movea.l	d4,a1
000181E8 101B                       		move.b	(a3)+,d0
000181EA B029 003C                  		cmp.b	$3C(a1),d0
000181EE 6700                       		beq.s	loc_17BE0
000181F0 5229 003C                  		addq.b	#1,$3C(a1)
000181F4                            
000181F4                            loc_17BE0:
000181F4 51CE FFE4                  		dbf	d6,loc_17BC6
000181F8                            
000181F8 B029 003C                  		cmp.b	$3C(a1),d0
000181FC 6600                       		bne.s	loc_17BFA
000181FE 2268 0034                  		movea.l	$34(a0),a1
00018202 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018208 6600                       		bne.s	loc_17BFA
0001820A 5428 0024                  		addq.b	#2,$24(a0)
0001820E                            
0001820E                            loc_17BFA:
0001820E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018214 6700                       		beq.s	Obj48_Display
00018216 5268 0032                  		addq.w	#1,$32(a0)
0001821A                            
0001821A                            Obj48_Display:
0001821A 6100 0000                  		bsr.w	sub_17C2A
0001821E 1028 0026                  		move.b	$26(a0),d0
00018222 4EB9 0000 8068             		jsr	(Obj15_Move2).l
00018228 4EF9 0000 DBCC             		jmp	DisplaySprite
0001822E                            ; ===========================================================================
0001822E                            
0001822E                            Obj48_Display2:				; XREF: Obj48_Index
0001822E 6100 0000                  		bsr.w	sub_17C2A
00018232 4EB9 0000 8028             		jsr	(Obj48_Move).l
00018238 4EF9 0000 DBCC             		jmp	DisplaySprite
0001823E                            
0001823E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001823E                            
0001823E                            
0001823E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001823E 2268 0034                  		movea.l	$34(a0),a1
00018242 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018248 6400                       		bcc.s	loc_17C3C
0001824A 0868 0000 001A             		bchg	#0,$1A(a0)
00018250                            
00018250                            loc_17C3C:
00018250 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018256 3029 000C                  		move.w	$C(a1),d0
0001825A D068 0032                  		add.w	$32(a0),d0
0001825E 3140 0038                  		move.w	d0,$38(a0)
00018262 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018268 4A29 0022                  		tst.b	$22(a1)
0001826C 6A00                       		bpl.s	locret_17C66
0001826E 10BC 003F                  		move.b	#$3F,0(a0)
00018272 117C 0000 0024             		move.b	#0,$24(a0)
00018278                            
00018278                            locret_17C66:
00018278 4E75                       		rts	
0001827A                            ; End of function sub_17C2A
0001827A                            
0001827A                            ; ===========================================================================
0001827A                            
0001827A                            loc_17C68:				; XREF: Obj48_Index
0001827A 2268 0034                  		movea.l	$34(a0),a1
0001827E 4A29 0022                  		tst.b	$22(a1)
00018282 6A00                       		bpl.s	Obj48_Display3
00018284 10BC 003F                  		move.b	#$3F,0(a0)
00018288 117C 0000 0024             		move.b	#0,$24(a0)
0001828E                            
0001828E                            Obj48_Display3:
0001828E 4EF9 0000 DBCC             		jmp	DisplaySprite
00018294                            ; ===========================================================================
00018294                            
00018294                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018294 7000                       		moveq	#0,d0
00018296 4A28 001A                  		tst.b	$1A(a0)
0001829A 6600                       		bne.s	Obj48_Vanish
0001829C 5200                       		addq.b	#1,d0
0001829E                            
0001829E                            Obj48_Vanish:
0001829E 1140 001A                  		move.b	d0,$1A(a0)
000182A2 2268 0034                  		movea.l	$34(a0),a1
000182A6 4A29 0022                  		tst.b	$22(a1)
000182AA 6A00                       		bpl.s	Obj48_Display4
000182AC 117C 0000 0020             		move.b	#0,$20(a0)
000182B2 6100 FBC6                  		bsr.w	BossDefeated
000182B6 5328 003C                  		subq.b	#1,$3C(a0)
000182BA 6A00                       		bpl.s	Obj48_Display4
000182BC 10BC 003F                  		move.b	#$3F,(a0)
000182C0 117C 0000 0024             		move.b	#0,$24(a0)
000182C6                            
000182C6                            Obj48_Display4:
000182C6 4EF9 0000 DBCC             		jmp	DisplaySprite
000182CC                            ; ===========================================================================
000182CC                            Ani_Eggman:
000182CC                            	include "_anim\Eggman.asm"
000182CC                            ; ---------------------------------------------------------------------------
000182CC                            ; Animation script - Eggman (bosses)
000182CC                            ; ---------------------------------------------------------------------------
000182CC 0000                       		dc.w byte_17CD4-Ani_Eggman
000182CE 0000                       		dc.w byte_17CD8-Ani_Eggman
000182D0 0000                       		dc.w byte_17CDC-Ani_Eggman
000182D2 0000                       		dc.w byte_17CE0-Ani_Eggman
000182D4 0000                       		dc.w byte_17CE4-Ani_Eggman
000182D6 0000                       		dc.w byte_17CE8-Ani_Eggman
000182D8 0000                       		dc.w byte_17CEC-Ani_Eggman
000182DA 0000                       		dc.w byte_17CF0-Ani_Eggman
000182DC 0000                       		dc.w byte_17CF4-Ani_Eggman
000182DE 0000                       		dc.w byte_17CF8-Ani_Eggman
000182E0 0000                       		dc.w byte_17CFC-Ani_Eggman
000182E2 0000                       		dc.w byte_17D00-Ani_Eggman
000182E4 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182E8 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182EC 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182F0 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182F4 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182F8 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000182FC 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018300 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018304 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018308 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001830C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018310 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001831C                            		even
0001831C                            		even
0001831C                            
0001831C                            ; ---------------------------------------------------------------------------
0001831C                            ; Sprite mappings - Eggman (boss levels)
0001831C                            ; ---------------------------------------------------------------------------
0001831C                            Map_Eggman:
0001831C                            	include "_maps\Eggman.asm"
0001831C                            Map_dc7e:
0001831C 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001831E 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018320 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018322 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018324 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018326 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018328 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001832A 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001832C 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001832E 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018330 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018332 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018334 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018336 06                         Map_dc7e_1A: 	dc.b $6
00018337 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001833C EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018341 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018346 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001834B 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018350 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018355 02                         Map_dc7e_39: 	dc.b $2
00018356 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001835B EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018360 02                         Map_dc7e_44: 	dc.b $2
00018361 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018366 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001836B 03                         Map_dc7e_4F: 	dc.b $3
0001836C E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018371 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018376 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001837B 03                         Map_dc7e_5F: 	dc.b $3
0001837C E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018381 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018386 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
0001838B 03                         Map_dc7e_6F: 	dc.b $3
0001838C E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018391 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018396 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001839B 03                         Map_dc7e_7F: 	dc.b $3
0001839C E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000183A1 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000183A6 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000183AB 04                         Map_dc7e_8F: 	dc.b $4
000183AC E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000183B1 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183B6 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183BB EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183C0 01                         Map_dc7e_A4: 	dc.b $1
000183C1 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183C6 01                         Map_dc7e_AA: 	dc.b $1
000183C7 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000183CC 00                         Map_dc7e_B0: 	dc.b $0
000183CD 02                         Map_dc7e_B1: 	dc.b $2
000183CE 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000183D3 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000183D8 02                         Map_dc7e_BC: 	dc.b $2
000183D9 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183DE 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183E4 00                         	even
000183E4 00                         	even
000183E4                            
000183E4                            ; ---------------------------------------------------------------------------
000183E4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183E4                            ; ---------------------------------------------------------------------------
000183E4                            Map_BossItems:
000183E4                            	include "_maps\Boss items.asm"
000183E4                            ; ---------------------------------------------------------------------------
000183E4                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183E4                            ; ---------------------------------------------------------------------------
000183E4 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183E8 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183EC 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183F0 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183F4 01                         byte_17DE4:	dc.b 1
000183F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183FA 02                         byte_17DEA:	dc.b 2
000183FB FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018400 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018405 00                         		dc.b 0
00018406 01                         byte_17DF6:	dc.b 1
00018407 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001840C 01                         byte_17DFC:	dc.b 1
0001840D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018412 01                         byte_17E02:	dc.b 1
00018413 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018418 04                         byte_17E08:	dc.b 4
00018419 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001841E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018423 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018428 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001842D 00                         		dc.b 0
0001842E 02                         byte_17E1E:	dc.b 2
0001842F 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018434 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018439 00                         		dc.b 0
0001843A 02                         byte_17E2A:	dc.b 2
0001843B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018440 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018446 00                         		even
00018446 00                         		even
00018446                            
00018446                            ; ===========================================================================
00018446                            ; ---------------------------------------------------------------------------
00018446                            ; Object 77 - Eggman (LZ)
00018446                            ; ---------------------------------------------------------------------------
00018446                            
00018446                            Obj77:					; XREF: Obj_Index
00018446 7000                       		moveq	#0,d0
00018448 1028 0024                  		move.b	$24(a0),d0
0001844C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018450 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018454                            ; ===========================================================================
00018454 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018456 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018458 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001845A 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001845C                            
0001845C 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001845E 0401                       		dc.b 4,	1
00018460 0607                       		dc.b 6,	7
00018462                            ; ===========================================================================
00018462                            
00018462                            Obj77_Main:				; XREF: Obj77_Index
00018462 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018468 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001846E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018474 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001847A 117C 000F 0020             		move.b	#$F,$20(a0)
00018480 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018486 117C 0004 0018             		move.b	#4,$18(a0)
0001848C 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018490 2248                       		movea.l	a0,a1
00018492 7202                       		moveq	#2,d1
00018494 6000                       		bra.s	Obj77_LoadBoss
00018496                            ; ===========================================================================
00018496                            
00018496                            Obj77_Loop:
00018496 4EB9 0000 E068             		jsr	SingleObjLoad2
0001849C 6600                       		bne.s	Obj77_ShipMain
0001849E 12BC 0077                  		move.b	#$77,0(a1)
000184A2 3368 0008 0008             		move.w	8(a0),8(a1)
000184A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184AE                            
000184AE                            Obj77_LoadBoss:				; XREF: Obj77_Main
000184AE 08A8 0000 0022             		bclr	#0,$22(a0)
000184B4 4229 0025                  		clr.b	$25(a1)
000184B8 135A 0024                  		move.b	(a2)+,$24(a1)
000184BC 135A 001C                  		move.b	(a2)+,$1C(a1)
000184C0 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184C6 237C 0001 831C 0004        		move.l	#Map_Eggman,4(a1)
000184CE 337C 0400 0002             		move.w	#$400,2(a1)
000184D4 137C 0004 0001             		move.b	#4,1(a1)
000184DA 137C 0020 0019             		move.b	#$20,$19(a1)
000184E0 2348 0034                  		move.l	a0,$34(a1)
000184E4 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184E8                            
000184E8                            Obj77_ShipMain:
000184E8 43F8 D000                  		lea	($FFFFD000).w,a1
000184EC 7000                       		moveq	#0,d0
000184EE 1028 0025                  		move.b	$25(a0),d0
000184F2 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184F6 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000184FA 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
00018500 4EB9 0000 ACA2             		jsr	AnimateSprite
00018506 7003                       		moveq	#3,d0
00018508 C028 0022                  		and.b	$22(a0),d0
0001850C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018512 8128 0001                  		or.b	d0,1(a0)
00018516 4EF9 0000 DBCC             		jmp	DisplaySprite
0001851C                            ; ===========================================================================
0001851C 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018520 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018524 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018528 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001852C                            ; ===========================================================================
0001852C                            
0001852C                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001852C 3029 0008                  		move.w	8(a1),d0
00018530 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018534 6500                       		bcs.s	loc_17F38
00018536 317C FE80 0012             		move.w	#-$180,$12(a0)
0001853C 317C 0060 0010             		move.w	#$60,$10(a0)
00018542 5428 0025                  		addq.b	#2,$25(a0)
00018546                            
00018546                            loc_17F38:
00018546 6100 F974                  		bsr.w	BossMove
0001854A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018550 3168 0030 0008             		move.w	$30(a0),8(a0)
00018556                            
00018556                            loc_17F48:
00018556 4A28 003D                  		tst.b	$3D(a0)
0001855A 6600                       		bne.s	loc_17F8E
0001855C 4A28 0022                  		tst.b	$22(a0)
00018560 6B00                       		bmi.s	loc_17F92
00018562 4A28 0020                  		tst.b	$20(a0)
00018566 6600                       		bne.s	locret_17F8C
00018568 4A28 003E                  		tst.b	$3E(a0)
0001856C 6600                       		bne.s	loc_17F70
0001856E 117C 0020 003E             		move.b	#$20,$3E(a0)
00018574 303C 00AC                  		move.w	#$AC,d0
00018578 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001857E                            
0001857E                            loc_17F70:
0001857E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018582 7000                       		moveq	#0,d0
00018584 4A51                       		tst.w	(a1)
00018586 6600                       		bne.s	loc_17F7E
00018588 303C 0EEE                  		move.w	#$EEE,d0
0001858C                            
0001858C                            loc_17F7E:
0001858C 3280                       		move.w	d0,(a1)
0001858E 5328 003E                  		subq.b	#1,$3E(a0)
00018592 6600                       		bne.s	locret_17F8C
00018594 117C 000F 0020             		move.b	#$F,$20(a0)
0001859A                            
0001859A                            locret_17F8C:
0001859A 4E75                       		rts	
0001859C                            ; ===========================================================================
0001859C                            
0001859C                            loc_17F8E:				; XREF: loc_17F48
0001859C 6000 F8DC                  		bra.w	BossDefeated
000185A0                            ; ===========================================================================
000185A0                            
000185A0                            loc_17F92:				; XREF: loc_17F48
000185A0 7064                       		moveq	#100,d0
000185A2 6100 0000                  		bsr.w	AddPoints
000185A6 117C 00FF 003D             		move.b	#-1,$3D(a0)
000185AC 4E75                       		rts	
000185AE                            ; ===========================================================================
000185AE                            
000185AE                            loc_17FA0:				; XREF: Obj77_ShipIndex
000185AE 70FE                       		moveq	#-2,d0
000185B0 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000185B6 6500                       		bcs.s	loc_17FB6
000185B8 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185BE 4268 0010                  		clr.w	$10(a0)
000185C2 5240                       		addq.w	#1,d0
000185C4                            
000185C4                            loc_17FB6:
000185C4 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185CA 6E00                       		bgt.s	loc_17FCA
000185CC 317C 0500 0038             		move.w	#$500,$38(a0)
000185D2 4268 0012                  		clr.w	$12(a0)
000185D6 5240                       		addq.w	#1,d0
000185D8                            
000185D8                            loc_17FCA:
000185D8 6600                       		bne.s	loc_17FDC
000185DA 317C 0140 0010             		move.w	#$140,$10(a0)
000185E0 317C FE00 0012             		move.w	#-$200,$12(a0)
000185E6 5428 0025                  		addq.b	#2,$25(a0)
000185EA                            
000185EA                            loc_17FDC:
000185EA 6000 FF5A                  		bra.w	loc_17F38
000185EE                            ; ===========================================================================
000185EE                            
000185EE                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185EE 70FE                       		moveq	#-2,d0
000185F0 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185F6 6500                       		bcs.s	loc_17FF6
000185F8 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000185FE 4268 0010                  		clr.w	$10(a0)
00018602 5240                       		addq.w	#1,d0
00018604                            
00018604                            loc_17FF6:
00018604 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001860A 6E00                       		bgt.s	loc_1800A
0001860C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018612 4268 0012                  		clr.w	$12(a0)
00018616 5240                       		addq.w	#1,d0
00018618                            
00018618                            loc_1800A:
00018618 6600                       		bne.s	loc_1801A
0001861A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018620 5428 0025                  		addq.b	#2,$25(a0)
00018624 4228 003F                  		clr.b	$3F(a0)
00018628                            
00018628                            loc_1801A:
00018628 6000 FF1C                  		bra.w	loc_17F38
0001862C                            ; ===========================================================================
0001862C                            
0001862C                            loc_1801E:				; XREF: Obj77_ShipIndex
0001862C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018632 6E00                       		bgt.s	loc_1804E
00018634 317C 0100 0038             		move.w	#$100,$38(a0)
0001863A 317C 0140 0010             		move.w	#$140,$10(a0)
00018640 317C FF80 0012             		move.w	#-$80,$12(a0)
00018646 4A28 003D                  		tst.b	$3D(a0)
0001864A 6700                       		beq.s	loc_18046
0001864C E1E8 0010                  		asl	$10(a0)
00018650 E1E8 0012                  		asl	$12(a0)
00018654                            
00018654                            loc_18046:
00018654 5428 0025                  		addq.b	#2,$25(a0)
00018658 6000 FEEC                  		bra.w	loc_17F38
0001865C                            ; ===========================================================================
0001865C                            
0001865C                            loc_1804E:
0001865C 08E8 0000 0022             		bset	#0,$22(a0)
00018662 5428 003F                  		addq.b	#2,$3F(a0)
00018666 1028 003F                  		move.b	$3F(a0),d0
0001866A 4EB9 0000 2C82             		jsr	(CalcSine).l
00018670 4A41                       		tst.w	d1
00018672 6A00                       		bpl.s	loc_1806C
00018674 08A8 0000 0022             		bclr	#0,$22(a0)
0001867A                            
0001867A                            loc_1806C:
0001867A E840                       		asr.w	#4,d0
0001867C 4840                       		swap	d0
0001867E 4240                       		clr.w	d0
00018680 D0A8 0030                  		add.l	$30(a0),d0
00018684 4840                       		swap	d0
00018686 3140 0008                  		move.w	d0,8(a0)
0001868A 3028 0012                  		move.w	$12(a0),d0
0001868E 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018692 9268 000C                  		sub.w	$C(a0),d1
00018696 6500                       		bcs.s	loc_180A2
00018698 0441 0048                  		subi.w	#$48,d1
0001869C 6500                       		bcs.s	loc_180A2
0001869E E240                       		asr.w	#1,d0
000186A0 0441 0028                  		subi.w	#$28,d1
000186A4 6500                       		bcs.s	loc_180A2
000186A6 E240                       		asr.w	#1,d0
000186A8 0441 0028                  		subi.w	#$28,d1
000186AC 6500                       		bcs.s	loc_180A2
000186AE 7000                       		moveq	#0,d0
000186B0                            
000186B0                            loc_180A2:
000186B0 48C0                       		ext.l	d0
000186B2 E180                       		asl.l	#8,d0
000186B4 4A28 003D                  		tst.b	$3D(a0)
000186B8 6700                       		beq.s	loc_180AE
000186BA D080                       		add.l	d0,d0
000186BC                            
000186BC                            loc_180AE:
000186BC D1A8 0038                  		add.l	d0,$38(a0)
000186C0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186C6 6000 FE8E                  		bra.w	loc_17F48
000186CA                            ; ===========================================================================
000186CA                            
000186CA                            loc_180BC:				; XREF: Obj77_ShipIndex
000186CA 70FE                       		moveq	#-2,d0
000186CC 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000186D2 6500                       		bcs.s	loc_180D2
000186D4 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000186DA 4268 0010                  		clr.w	$10(a0)
000186DE 5240                       		addq.w	#1,d0
000186E0                            
000186E0                            loc_180D2:
000186E0 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186E6 6E00                       		bgt.s	loc_180E6
000186E8 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186EE 4268 0012                  		clr.w	$12(a0)
000186F2 5240                       		addq.w	#1,d0
000186F4                            
000186F4                            loc_180E6:
000186F4 6600                       		bne.s	loc_180F2
000186F6 5428 0025                  		addq.b	#2,$25(a0)
000186FA 08A8 0000 0022             		bclr	#0,$22(a0)
00018700                            
00018700                            loc_180F2:
00018700 6000 FE44                  		bra.w	loc_17F38
00018704                            ; ===========================================================================
00018704                            
00018704                            loc_180F6:				; XREF: Obj77_ShipIndex
00018704 4A28 003D                  		tst.b	$3D(a0)
00018708 6600                       		bne.s	loc_18112
0001870A 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018710 6D00                       		blt.s	loc_18126
00018712 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018718 6E00                       		bgt.s	loc_18126
0001871A 117C 0032 003C             		move.b	#$32,$3C(a0)
00018720                            
00018720                            loc_18112:
00018720 303C 0082                  		move.w	#$82,d0
00018724 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
0001872A 08E8 0000 0022             		bset	#0,$22(a0)
00018730 5428 0025                  		addq.b	#2,$25(a0)
00018734                            
00018734                            loc_18126:
00018734 6000 FE10                  		bra.w	loc_17F38
00018738                            ; ===========================================================================
00018738                            
00018738                            loc_1812A:				; XREF: Obj77_ShipIndex
00018738 4A28 003D                  		tst.b	$3D(a0)
0001873C 6600                       		bne.s	loc_18136
0001873E 5328 003C                  		subq.b	#1,$3C(a0)
00018742 6600                       		bne.s	loc_1814E
00018744                            
00018744                            loc_18136:
00018744 4228 003C                  		clr.b	$3C(a0)
00018748 317C 0400 0010             		move.w	#$400,$10(a0)
0001874E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018754 4228 003D                  		clr.b	$3D(a0)
00018758 5428 0025                  		addq.b	#2,$25(a0)
0001875C                            
0001875C                            loc_1814E:
0001875C 6000 FDE8                  		bra.w	loc_17F38
00018760                            ; ===========================================================================
00018760                            
00018760                            loc_18152:				; XREF: Obj77_ShipIndex
00018760 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018766 6400                       		bcc.s	loc_18160
00018768 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001876C 6000                       		bra.s	loc_18166
0001876E                            ; ===========================================================================
0001876E                            
0001876E                            loc_18160:
0001876E 4A28 0001                  		tst.b	1(a0)
00018772 6A00                       		bpl.s	Obj77_ShipDel
00018774                            
00018774                            loc_18166:
00018774 6000 FDD0                  		bra.w	loc_17F38
00018778                            ; ===========================================================================
00018778                            
00018778                            Obj77_ShipDel:
00018778 4EF9 0000 DC08             		jmp	DeleteObject
0001877E                            ; ===========================================================================
0001877E                            
0001877E                            Obj77_FaceMain:				; XREF: Obj77_Index
0001877E 2268 0034                  		movea.l	$34(a0),a1
00018782 1011                       		move.b	(a1),d0
00018784 B010                       		cmp.b	(a0),d0
00018786 6600                       		bne.s	Obj77_FaceDel
00018788 7000                       		moveq	#0,d0
0001878A 1029 0025                  		move.b	$25(a1),d0
0001878E 7201                       		moveq	#1,d1
00018790 4A28 003D                  		tst.b	$3D(a0)
00018794 6700                       		beq.s	loc_1818C
00018796 720A                       		moveq	#$A,d1
00018798 6000                       		bra.s	loc_181A0
0001879A                            ; ===========================================================================
0001879A                            
0001879A                            loc_1818C:
0001879A 4A29 0020                  		tst.b	$20(a1)
0001879E 6600                       		bne.s	loc_18196
000187A0 7205                       		moveq	#5,d1
000187A2 6000                       		bra.s	loc_181A0
000187A4                            ; ===========================================================================
000187A4                            
000187A4                            loc_18196:
000187A4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187AA 6500                       		bcs.s	loc_181A0
000187AC 7204                       		moveq	#4,d1
000187AE                            
000187AE                            loc_181A0:
000187AE 1141 001C                  		move.b	d1,$1C(a0)
000187B2 0C00 000E                  		cmpi.b	#$E,d0
000187B6 6600                       		bne.s	loc_181B6
000187B8 117C 0006 001C             		move.b	#6,$1C(a0)
000187BE 4A28 0001                  		tst.b	1(a0)
000187C2 6A00                       		bpl.s	Obj77_FaceDel
000187C4                            
000187C4                            loc_181B6:
000187C4 6000                       		bra.s	Obj77_Display
000187C6                            ; ===========================================================================
000187C6                            
000187C6                            Obj77_FaceDel:
000187C6 4EF9 0000 DC08             		jmp	DeleteObject
000187CC                            ; ===========================================================================
000187CC                            
000187CC                            Obj77_FlameMain:			; XREF: Obj77_Index
000187CC 117C 0007 001C             		move.b	#7,$1C(a0)
000187D2 2268 0034                  		movea.l	$34(a0),a1
000187D6 1011                       		move.b	(a1),d0
000187D8 B010                       		cmp.b	(a0),d0
000187DA 6600                       		bne.s	Obj77_FlameDel
000187DC 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187E2 6600                       		bne.s	loc_181F0
000187E4 117C 000B 001C             		move.b	#$B,$1C(a0)
000187EA 4A28 0001                  		tst.b	1(a0)
000187EE 6A00                       		bpl.s	Obj77_FlameDel
000187F0 6000                       		bra.s	loc_181F0
000187F2                            ; ===========================================================================
000187F2 4A69 0010                  		tst.w	$10(a1)
000187F6 6700                       		beq.s	loc_181F0
000187F8 117C 0008 001C             		move.b	#8,$1C(a0)
000187FE                            
000187FE                            loc_181F0:
000187FE 6000                       		bra.s	Obj77_Display
00018800                            ; ===========================================================================
00018800                            
00018800                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018800 4EF9 0000 DC08             		jmp	DeleteObject
00018806                            ; ===========================================================================
00018806                            
00018806                            Obj77_Display:
00018806 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
0001880C 4EB9 0000 ACA2             		jsr	AnimateSprite
00018812 2268 0034                  		movea.l	$34(a0),a1
00018816 3169 0008 0008             		move.w	8(a1),8(a0)
0001881C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018822 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018828 7003                       		moveq	#3,d0
0001882A C028 0022                  		and.b	$22(a0),d0
0001882E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018834 8128 0001                  		or.b	d0,1(a0)
00018838 4EF9 0000 DBCC             		jmp	DisplaySprite
0001883E                            ; ===========================================================================
0001883E                            ; ---------------------------------------------------------------------------
0001883E                            ; Object 73 - Eggman (MZ)
0001883E                            ; ---------------------------------------------------------------------------
0001883E                            
0001883E                            Obj73:					; XREF: Obj_Index
0001883E 7000                       		moveq	#0,d0
00018840 1028 0024                  		move.b	$24(a0),d0
00018844 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018848 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001884C                            ; ===========================================================================
0001884C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001884E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018850 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018852 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018854 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018856                            
00018856 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018859 0401 04                    		dc.b 4,	1, 4
0001885C 0607 04                    		dc.b 6,	7, 4
0001885F 0800 03                    		dc.b 8,	0, 3
00018862                            ; ===========================================================================
00018862                            
00018862                            Obj73_Main:				; XREF: Obj73_Index
00018862 3168 0008 0030             		move.w	8(a0),$30(a0)
00018868 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001886E 117C 000F 0020             		move.b	#$F,$20(a0)
00018874 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001887A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001887E 2248                       		movea.l	a0,a1
00018880 7203                       		moveq	#3,d1
00018882 6000                       		bra.s	Obj73_LoadBoss
00018884                            ; ===========================================================================
00018884                            
00018884                            Obj73_Loop:
00018884 4EB9 0000 E068             		jsr	SingleObjLoad2
0001888A 6600                       		bne.s	Obj73_ShipMain
0001888C 12BC 0073                  		move.b	#$73,0(a1)
00018890 3368 0008 0008             		move.w	8(a0),8(a1)
00018896 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001889C                            
0001889C                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001889C 08A8 0000 0022             		bclr	#0,$22(a0)
000188A2 4229 0025                  		clr.b	$25(a1)
000188A6 135A 0024                  		move.b	(a2)+,$24(a1)
000188AA 135A 001C                  		move.b	(a2)+,$1C(a1)
000188AE 135A 0018                  		move.b	(a2)+,$18(a1)
000188B2 237C 0001 831C 0004        		move.l	#Map_Eggman,4(a1)
000188BA 337C 0400 0002             		move.w	#$400,2(a1)
000188C0 137C 0004 0001             		move.b	#4,1(a1)
000188C6 137C 0020 0019             		move.b	#$20,$19(a1)
000188CC 2348 0034                  		move.l	a0,$34(a1)
000188D0 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000188D4                            
000188D4                            Obj73_ShipMain:
000188D4 7000                       		moveq	#0,d0
000188D6 1028 0025                  		move.b	$25(a0),d0
000188DA 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188DE 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188E2 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
000188E8 4EB9 0000 ACA2             		jsr	AnimateSprite
000188EE 7003                       		moveq	#3,d0
000188F0 C028 0022                  		and.b	$22(a0),d0
000188F4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188FA 8128 0001                  		or.b	d0,1(a0)
000188FE 4EF9 0000 DBCC             		jmp	DisplaySprite
00018904                            ; ===========================================================================
00018904 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018906 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018908 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001890A 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001890C 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001890E                            ; ===========================================================================
0001890E                            
0001890E                            loc_18302:				; XREF: Obj73_ShipIndex
0001890E 1028 003F                  		move.b	$3F(a0),d0
00018912 5428 003F                  		addq.b	#2,$3F(a0)
00018916 4EB9 0000 2C82             		jsr	(CalcSine).l
0001891C E440                       		asr.w	#2,d0
0001891E 3140 0012                  		move.w	d0,$12(a0)
00018922 317C FF00 0010             		move.w	#-$100,$10(a0)
00018928 6100 F592                  		bsr.w	BossMove
0001892C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018932 6600                       		bne.s	loc_18334
00018934 5428 0025                  		addq.b	#2,$25(a0)
00018938 4228 0028                  		clr.b	$28(a0)
0001893C 42A8 0010                  		clr.l	$10(a0)
00018940                            
00018940                            loc_18334:
00018940 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00018946 1140 0034                  		move.b	d0,$34(a0)
0001894A                            
0001894A                            loc_1833E:
0001894A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018950 3168 0030 0008             		move.w	$30(a0),8(a0)
00018956 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001895C 6400                       		bcc.s	locret_18390
0001895E 4A28 0022                  		tst.b	$22(a0)
00018962 6B00                       		bmi.s	loc_18392
00018964 4A28 0020                  		tst.b	$20(a0)
00018968 6600                       		bne.s	locret_18390
0001896A 4A28 003E                  		tst.b	$3E(a0)
0001896E 6600                       		bne.s	loc_18374
00018970 117C 0028 003E             		move.b	#$28,$3E(a0)
00018976 303C 00AC                  		move.w	#$AC,d0
0001897A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018980                            
00018980                            loc_18374:
00018980 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018984 7000                       		moveq	#0,d0
00018986 4A51                       		tst.w	(a1)
00018988 6600                       		bne.s	loc_18382
0001898A 303C 0EEE                  		move.w	#$EEE,d0
0001898E                            
0001898E                            loc_18382:
0001898E 3280                       		move.w	d0,(a1)
00018990 5328 003E                  		subq.b	#1,$3E(a0)
00018994 6600                       		bne.s	locret_18390
00018996 117C 000F 0020             		move.b	#$F,$20(a0)
0001899C                            
0001899C                            locret_18390:
0001899C 4E75                       		rts	
0001899E                            ; ===========================================================================
0001899E                            
0001899E                            loc_18392:				; XREF: loc_1833E
0001899E 7064                       		moveq	#100,d0
000189A0 6100 0000                  		bsr.w	AddPoints
000189A4 117C 0004 0025             		move.b	#4,$25(a0)
000189AA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000189B0 4268 0010                  		clr.w	$10(a0)
000189B4 4E75                       		rts	
000189B6                            ; ===========================================================================
000189B6                            
000189B6                            loc_183AA:				; XREF: Obj73_ShipIndex
000189B6 7000                       		moveq	#0,d0
000189B8 1028 0028                  		move.b	$28(a0),d0
000189BC 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189C0 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189C4 0228 0006 0028             		andi.b	#6,$28(a0)
000189CA 6000 FF7E                  		bra.w	loc_1833E
000189CE                            ; ===========================================================================
000189CE 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000189D0 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D2 0000                       		dc.w loc_183CA-off_183C2
000189D4 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D6                            ; ===========================================================================
000189D6                            
000189D6                            loc_183CA:				; XREF: off_183C2
000189D6 4A68 0010                  		tst.w	$10(a0)
000189DA 6600                       		bne.s	loc_183FE
000189DC 7040                       		moveq	#$40,d0
000189DE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189E4 6700                       		beq.s	loc_183E6
000189E6 6500                       		bcs.s	loc_183DE
000189E8 4440                       		neg.w	d0
000189EA                            
000189EA                            loc_183DE:
000189EA 3140 0012                  		move.w	d0,$12(a0)
000189EE 6000 F4CC                  		bra.w	BossMove
000189F2                            ; ===========================================================================
000189F2                            
000189F2                            loc_183E6:
000189F2 317C 0200 0010             		move.w	#$200,$10(a0)
000189F8 317C 0100 0012             		move.w	#$100,$12(a0)
000189FE 0828 0000 0022             		btst	#0,$22(a0)
00018A04 6600                       		bne.s	loc_183FE
00018A06 4468 0010                  		neg.w	$10(a0)
00018A0A                            
00018A0A                            loc_183FE:
00018A0A 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018A10 6400                       		bcc.s	Obj73_MakeLava
00018A12 6100 F4A8                  		bsr.w	BossMove
00018A16 5968 0012                  		subq.w	#4,$12(a0)
00018A1A                            
00018A1A                            Obj73_MakeLava:
00018A1A 5328 0034                  		subq.b	#1,$34(a0)
00018A1E 6400                       		bcc.s	loc_1845C
00018A20 4EB9 0000 E052             		jsr	SingleObjLoad
00018A26 6600                       		bne.s	loc_1844A
00018A28 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A2C 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A32 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00018A38 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A3E 80FC 0050                  		divu.w	#$50,d0
00018A42 4840                       		swap	d0
00018A44 0640 1878                  		addi.w	#$1878,d0
00018A48 3340 0008                  		move.w	d0,8(a1)
00018A4C EE09                       		lsr.b	#7,d1
00018A4E 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A54                            
00018A54                            loc_1844A:
00018A54 4EB9 0000 2C5C             		jsr	(RandomNumber).l
00018A5A 0200 001F                  		andi.b	#$1F,d0
00018A5E 0600 0040                  		addi.b	#$40,d0
00018A62 1140 0034                  		move.b	d0,$34(a0)
00018A66                            
00018A66                            loc_1845C:
00018A66 0828 0000 0022             		btst	#0,$22(a0)
00018A6C 6700                       		beq.s	loc_18474
00018A6E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A74 6D00                       		blt.s	locret_1849C
00018A76 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A7C 6000                       		bra.s	loc_18482
00018A7E                            ; ===========================================================================
00018A7E                            
00018A7E                            loc_18474:
00018A7E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A84 6E00                       		bgt.s	locret_1849C
00018A86 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A8C                            
00018A8C                            loc_18482:
00018A8C 4268 0010                  		clr.w	$10(a0)
00018A90 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A96 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A9C 6400                       		bcc.s	loc_18498
00018A9E 4468 0012                  		neg.w	$12(a0)
00018AA2                            
00018AA2                            loc_18498:
00018AA2 5428 0028                  		addq.b	#2,$28(a0)
00018AA6                            
00018AA6                            locret_1849C:
00018AA6 4E75                       		rts	
00018AA8                            ; ===========================================================================
00018AA8                            
00018AA8                            Obj73_MakeLava2:			; XREF: off_183C2
00018AA8 6100 F412                  		bsr.w	BossMove
00018AAC 3028 0038                  		move.w	$38(a0),d0
00018AB0 0440 022C                  		subi.w	#$22C,d0
00018AB4 6E00                       		bgt.s	locret_184F4
00018AB6 303C 022C                  		move.w	#$22C,d0
00018ABA 4A68 0012                  		tst.w	$12(a0)
00018ABE 6700                       		beq.s	loc_184EA
00018AC0 4268 0012                  		clr.w	$12(a0)
00018AC4 317C 0050 003C             		move.w	#$50,$3C(a0)
00018ACA 0868 0000 0022             		bchg	#0,$22(a0)
00018AD0 4EB9 0000 E052             		jsr	SingleObjLoad
00018AD6 6600                       		bne.s	loc_184EA
00018AD8 3368 0030 0008             		move.w	$30(a0),8(a1)
00018ADE 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018AE4 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AEA 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018AEE 137C 0001 0028             		move.b	#1,$28(a1)
00018AF4                            
00018AF4                            loc_184EA:
00018AF4 5368 003C                  		subq.w	#1,$3C(a0)
00018AF8 6600                       		bne.s	locret_184F4
00018AFA 5428 0028                  		addq.b	#2,$28(a0)
00018AFE                            
00018AFE                            locret_184F4:
00018AFE 4E75                       		rts	
00018B00                            ; ===========================================================================
00018B00                            
00018B00                            loc_184F6:				; XREF: Obj73_ShipIndex
00018B00 5368 003C                  		subq.w	#1,$3C(a0)
00018B04 6B00                       		bmi.s	loc_18500
00018B06 6000 F372                  		bra.w	BossDefeated
00018B0A                            ; ===========================================================================
00018B0A                            
00018B0A                            loc_18500:
00018B0A 08E8 0000 0022             		bset	#0,$22(a0)
00018B10 08A8 0007 0022             		bclr	#7,$22(a0)
00018B16 4268 0010                  		clr.w	$10(a0)
00018B1A 5428 0025                  		addq.b	#2,$25(a0)
00018B1E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B24 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B28 6600                       		bne.s	locret_1852A
00018B2A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B30 4268 0012                  		clr.w	$12(a0)
00018B34                            
00018B34                            locret_1852A:
00018B34 4E75                       		rts	
00018B36                            ; ===========================================================================
00018B36                            
00018B36                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B36 5268 003C                  		addq.w	#1,$3C(a0)
00018B3A 6700                       		beq.s	loc_18544
00018B3C 6A00                       		bpl.s	loc_1854E
00018B3E 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B44 6400                       		bcc.s	loc_18544
00018B46 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B4C 6000                       		bra.s	loc_1857A
00018B4E                            ; ===========================================================================
00018B4E                            
00018B4E                            loc_18544:
00018B4E 4268 0012                  		clr.w	$12(a0)
00018B52 4268 003C                  		clr.w	$3C(a0)
00018B56 6000                       		bra.s	loc_1857A
00018B58                            ; ===========================================================================
00018B58                            
00018B58                            loc_1854E:
00018B58 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B5E 6500                       		bcs.s	loc_18566
00018B60 6700                       		beq.s	loc_1856C
00018B62 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B68 6500                       		bcs.s	loc_1857A
00018B6A 5428 0025                  		addq.b	#2,$25(a0)
00018B6E 6000                       		bra.s	loc_1857A
00018B70                            ; ===========================================================================
00018B70                            
00018B70                            loc_18566:
00018B70 5168 0012                  		subq.w	#8,$12(a0)
00018B74 6000                       		bra.s	loc_1857A
00018B76                            ; ===========================================================================
00018B76                            
00018B76                            loc_1856C:
00018B76 4268 0012                  		clr.w	$12(a0)
00018B7A 303C 0083                  		move.w	#$83,d0
00018B7E 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B84                            
00018B84                            loc_1857A:
00018B84 6100 F336                  		bsr.w	BossMove
00018B88 6000 FDC0                  		bra.w	loc_1833E
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            loc_18582:				; XREF: Obj73_ShipIndex
00018B8C 317C 0500 0010             		move.w	#$500,$10(a0)
00018B92 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B98 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B9E 6400                       		bcc.s	loc_1859C
00018BA0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018BA4 6000                       		bra.s	loc_185A2
00018BA6                            ; ===========================================================================
00018BA6                            
00018BA6                            loc_1859C:
00018BA6 4A28 0001                  		tst.b	1(a0)
00018BAA 6A00                       		bpl.s	Obj73_ShipDel
00018BAC                            
00018BAC                            loc_185A2:
00018BAC 6100 F30E                  		bsr.w	BossMove
00018BB0 6000 FD98                  		bra.w	loc_1833E
00018BB4                            ; ===========================================================================
00018BB4                            
00018BB4                            Obj73_ShipDel:
00018BB4 4EF9 0000 DC08             		jmp	DeleteObject
00018BBA                            ; ===========================================================================
00018BBA                            
00018BBA                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BBA 7000                       		moveq	#0,d0
00018BBC 7201                       		moveq	#1,d1
00018BBE 2268 0034                  		movea.l	$34(a0),a1
00018BC2 1029 0025                  		move.b	$25(a1),d0
00018BC6 5540                       		subq.w	#2,d0
00018BC8 6600                       		bne.s	loc_185D2
00018BCA 0829 0001 0028             		btst	#1,$28(a1)
00018BD0 6700                       		beq.s	loc_185DA
00018BD2 4A69 0012                  		tst.w	$12(a1)
00018BD6 6600                       		bne.s	loc_185DA
00018BD8 7204                       		moveq	#4,d1
00018BDA 6000                       		bra.s	loc_185EE
00018BDC                            ; ===========================================================================
00018BDC                            
00018BDC                            loc_185D2:
00018BDC 5500                       		subq.b	#2,d0
00018BDE 6B00                       		bmi.s	loc_185DA
00018BE0 720A                       		moveq	#$A,d1
00018BE2 6000                       		bra.s	loc_185EE
00018BE4                            ; ===========================================================================
00018BE4                            
00018BE4                            loc_185DA:
00018BE4 4A29 0020                  		tst.b	$20(a1)
00018BE8 6600                       		bne.s	loc_185E4
00018BEA 7205                       		moveq	#5,d1
00018BEC 6000                       		bra.s	loc_185EE
00018BEE                            ; ===========================================================================
00018BEE                            
00018BEE                            loc_185E4:
00018BEE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BF4 6500                       		bcs.s	loc_185EE
00018BF6 7204                       		moveq	#4,d1
00018BF8                            
00018BF8                            loc_185EE:
00018BF8 1141 001C                  		move.b	d1,$1C(a0)
00018BFC 5900                       		subq.b	#4,d0
00018BFE 6600                       		bne.s	loc_18602
00018C00 117C 0006 001C             		move.b	#6,$1C(a0)
00018C06 4A28 0001                  		tst.b	1(a0)
00018C0A 6A00                       		bpl.s	Obj73_FaceDel
00018C0C                            
00018C0C                            loc_18602:
00018C0C 6000                       		bra.s	Obj73_Display
00018C0E                            ; ===========================================================================
00018C0E                            
00018C0E                            Obj73_FaceDel:
00018C0E 4EF9 0000 DC08             		jmp	DeleteObject
00018C14                            ; ===========================================================================
00018C14                            
00018C14                            Obj73_FlameMain:			; XREF: Obj73_Index
00018C14 117C 0007 001C             		move.b	#7,$1C(a0)
00018C1A 2268 0034                  		movea.l	$34(a0),a1
00018C1E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C24 6D00                       		blt.s	loc_1862A
00018C26 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C2C 4A28 0001                  		tst.b	1(a0)
00018C30 6A00                       		bpl.s	Obj73_FlameDel
00018C32 6000                       		bra.s	loc_18636
00018C34                            ; ===========================================================================
00018C34                            
00018C34                            loc_1862A:
00018C34 4A69 0010                  		tst.w	$10(a1)
00018C38 6700                       		beq.s	loc_18636
00018C3A 117C 0008 001C             		move.b	#8,$1C(a0)
00018C40                            
00018C40                            loc_18636:
00018C40 6000                       		bra.s	Obj73_Display
00018C42                            ; ===========================================================================
00018C42                            
00018C42                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C42 4EF9 0000 DC08             		jmp	DeleteObject
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            Obj73_Display:
00018C48 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
00018C4E 4EB9 0000 ACA2             		jsr	AnimateSprite
00018C54                            
00018C54                            loc_1864A:
00018C54 2268 0034                  		movea.l	$34(a0),a1
00018C58 3169 0008 0008             		move.w	8(a1),8(a0)
00018C5E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C64 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C6A 7003                       		moveq	#3,d0
00018C6C C028 0022                  		and.b	$22(a0),d0
00018C70 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C76 8128 0001                  		or.b	d0,1(a0)
00018C7A 4EF9 0000 DBCC             		jmp	DisplaySprite
00018C80                            ; ===========================================================================
00018C80                            
00018C80                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C80 2268 0034                  		movea.l	$34(a0),a1
00018C84 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C8A 6600                       		bne.s	loc_18688
00018C8C 4A28 0001                  		tst.b	1(a0)
00018C90 6A00                       		bpl.s	Obj73_TubeDel
00018C92                            
00018C92                            loc_18688:
00018C92 217C 0001 83E4 0004        		move.l	#Map_BossItems,4(a0)
00018C9A 317C 246C 0002             		move.w	#$246C,2(a0)
00018CA0 117C 0004 001A             		move.b	#4,$1A(a0)
00018CA6 60AC                       		bra.s	loc_1864A
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            Obj73_TubeDel:
00018CA8 4EF9 0000 DC08             		jmp	DeleteObject
00018CAE                            ; ===========================================================================
00018CAE                            ; ---------------------------------------------------------------------------
00018CAE                            ; Object 74 - lava that	Eggman drops (MZ)
00018CAE                            ; ---------------------------------------------------------------------------
00018CAE                            
00018CAE                            Obj74:					; XREF: Obj_Index
00018CAE 7000                       		moveq	#0,d0
00018CB0 1028 0024                  		move.b	$24(a0),d0
00018CB4 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018CB8 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CBC 4EF9 0000 DBCC             		jmp	DisplaySprite
00018CC2                            ; ===========================================================================
00018CC2 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CC4 0000                       		dc.w Obj74_Action-Obj74_Index
00018CC6 0000                       		dc.w loc_18886-Obj74_Index
00018CC8 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CCA                            ; ===========================================================================
00018CCA                            
00018CCA                            Obj74_Main:				; XREF: Obj74_Index
00018CCA 117C 0008 0016             		move.b	#8,$16(a0)
00018CD0 117C 0008 0017             		move.b	#8,$17(a0)
00018CD6 217C 0000 B890 0004        		move.l	#Map_obj14,4(a0)
00018CDE 317C 0345 0002             		move.w	#$345,2(a0)
00018CE4 117C 0004 0001             		move.b	#4,1(a0)
00018CEA 117C 0005 0018             		move.b	#5,$18(a0)
00018CF0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CF6 117C 0008 0019             		move.b	#8,$19(a0)
00018CFC 5428 0024                  		addq.b	#2,$24(a0)
00018D00 4A28 0028                  		tst.b	$28(a0)
00018D04 6600                       		bne.s	loc_1870A
00018D06 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D0C 5428 0024                  		addq.b	#2,$24(a0)
00018D10 6000 0000                  		bra.w	loc_18886
00018D14                            ; ===========================================================================
00018D14                            
00018D14                            loc_1870A:
00018D14 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D1A 303C 00AE                  		move.w	#$AE,d0
00018D1E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D24                            
00018D24                            Obj74_Action:				; XREF: Obj74_Index
00018D24 7000                       		moveq	#0,d0
00018D26 1028 0025                  		move.b	$25(a0),d0
00018D2A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D2E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D32 4EB9 0000 DBA6             		jsr	SpeedToPos
00018D38 43F9 0000 EA86             		lea	(Ani_obj14).l,a1
00018D3E 4EB9 0000 ACA2             		jsr	AnimateSprite
00018D44 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D4A 6200                       		bhi.s	Obj74_Delete
00018D4C 4E75                       		rts	
00018D4E                            ; ===========================================================================
00018D4E                            
00018D4E                            Obj74_Delete:
00018D4E 4EF9 0000 DC08             		jmp	DeleteObject
00018D54                            ; ===========================================================================
00018D54 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D56 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D58 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D5A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D5C                            ; ===========================================================================
00018D5C                            
00018D5C                            Obj74_Drop:				; XREF: Obj74_Index2
00018D5C 08E8 0001 0022             		bset	#1,$22(a0)
00018D62 5328 0029                  		subq.b	#1,$29(a0)
00018D66 6A00                       		bpl.s	locret_18780
00018D68 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D6E 4228 0028                  		clr.b	$28(a0)
00018D72 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D78 08A8 0001 0022             		bclr	#1,$22(a0)
00018D7E 6100 C6A8                  		bsr.w	ObjHitFloor
00018D82 4A41                       		tst.w	d1
00018D84 6A00                       		bpl.s	locret_18780
00018D86 5428 0025                  		addq.b	#2,$25(a0)
00018D8A                            
00018D8A                            locret_18780:
00018D8A 4E75                       		rts	
00018D8C                            ; ===========================================================================
00018D8C                            
00018D8C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D8C 5568 000C                  		subq.w	#2,$C(a0)
00018D90 08E8 0007 0002             		bset	#7,2(a0)
00018D96 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D9C 4268 0012                  		clr.w	$12(a0)
00018DA0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DA6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018DAC 117C 0003 0029             		move.b	#3,$29(a0)
00018DB2 4EB9 0000 E068             		jsr	SingleObjLoad2
00018DB8 6600                       		bne.s	loc_187CA
00018DBA 47D1                       		lea	(a1),a3
00018DBC 45D0                       		lea	(a0),a2
00018DBE 7003                       		moveq	#3,d0
00018DC0                            
00018DC0                            Obj74_Loop:
00018DC0 26DA                       		move.l	(a2)+,(a3)+
00018DC2 26DA                       		move.l	(a2)+,(a3)+
00018DC4 26DA                       		move.l	(a2)+,(a3)+
00018DC6 26DA                       		move.l	(a2)+,(a3)+
00018DC8 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018DCC                            
00018DCC 4469 0010                  		neg.w	$10(a1)
00018DD0 5429 0025                  		addq.b	#2,$25(a1)
00018DD4                            
00018DD4                            loc_187CA:
00018DD4 5428 0025                  		addq.b	#2,$25(a0)
00018DD8 4E75                       		rts	
00018DDA                            
00018DDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DDA                            
00018DDA                            
00018DDA                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018DDA 4EB9 0000 E068             		jsr	SingleObjLoad2
00018DE0 6600                       		bne.s	locret_187EE
00018DE2 3368 0008 0008             		move.w	8(a0),8(a1)
00018DE8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DEE 12BC 0074                  		move.b	#$74,(a1)
00018DF2 337C 0067 0028             		move.w	#$67,$28(a1)
00018DF8                            
00018DF8                            locret_187EE:
00018DF8 4E75                       		rts	
00018DFA                            ; End of function Obj74_Duplicate2
00018DFA                            
00018DFA                            ; ===========================================================================
00018DFA                            
00018DFA                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018DFA 6100 C62C                  		bsr.w	ObjHitFloor
00018DFE 4A41                       		tst.w	d1
00018E00 6A00                       		bpl.s	loc_18826
00018E02 3028 0008                  		move.w	8(a0),d0
00018E06 0C40 1940                  		cmpi.w	#$1940,d0
00018E0A 6E00                       		bgt.s	loc_1882C
00018E0C 3228 0030                  		move.w	$30(a0),d1
00018E10 B240                       		cmp.w	d0,d1
00018E12 6700                       		beq.s	loc_1881E
00018E14 0240 0010                  		andi.w	#$10,d0
00018E18 0241 0010                  		andi.w	#$10,d1
00018E1C B240                       		cmp.w	d0,d1
00018E1E 6700                       		beq.s	loc_1881E
00018E20 61B8                       		bsr.s	Obj74_Duplicate2
00018E22 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E28                            
00018E28                            loc_1881E:
00018E28 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E2E 4E75                       		rts	
00018E30                            ; ===========================================================================
00018E30                            
00018E30                            loc_18826:
00018E30 5428 0025                  		addq.b	#2,$25(a0)
00018E34 4E75                       		rts	
00018E36                            ; ===========================================================================
00018E36                            
00018E36                            loc_1882C:
00018E36 5428 0024                  		addq.b	#2,$24(a0)
00018E3A 4E75                       		rts	
00018E3C                            ; ===========================================================================
00018E3C                            
00018E3C                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E3C 08A8 0001 0022             		bclr	#1,$22(a0)
00018E42 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E48 3028 0008                  		move.w	8(a0),d0
00018E4C 9068 0032                  		sub.w	$32(a0),d0
00018E50 6A00                       		bpl.s	loc_1884A
00018E52 4440                       		neg.w	d0
00018E54                            
00018E54                            loc_1884A:
00018E54 0C40 0012                  		cmpi.w	#$12,d0
00018E58 6600                       		bne.s	loc_18856
00018E5A 08A8 0007 0002             		bclr	#7,2(a0)
00018E60                            
00018E60                            loc_18856:
00018E60 6100 C5C6                  		bsr.w	ObjHitFloor
00018E64 4A41                       		tst.w	d1
00018E66 6A00                       		bpl.s	locret_1887E
00018E68 5328 0029                  		subq.b	#1,$29(a0)
00018E6C 6700                       		beq.s	Obj74_Delete2
00018E6E 4268 0012                  		clr.w	$12(a0)
00018E72 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E78 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E7E 08E8 0007 0002             		bset	#7,2(a0)
00018E84 5528 0025                  		subq.b	#2,$25(a0)
00018E88                            
00018E88                            locret_1887E:
00018E88 4E75                       		rts	
00018E8A                            ; ===========================================================================
00018E8A                            
00018E8A                            Obj74_Delete2:
00018E8A 4EF9 0000 DC08             		jmp	DeleteObject
00018E90                            ; ===========================================================================
00018E90                            
00018E90                            loc_18886:				; XREF: Obj74_Index
00018E90 08E8 0007 0002             		bset	#7,2(a0)
00018E96 5328 0029                  		subq.b	#1,$29(a0)
00018E9A 6600                       		bne.s	Obj74_Animate
00018E9C 117C 0001 001C             		move.b	#1,$1C(a0)
00018EA2 5968 000C                  		subq.w	#4,$C(a0)
00018EA6 4228 0020                  		clr.b	$20(a0)
00018EAA                            
00018EAA                            Obj74_Animate:
00018EAA 43F9 0000 EA86             		lea	(Ani_obj14).l,a1
00018EB0 4EF9 0000 ACA2             		jmp	AnimateSprite
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            Obj74_Delete3:				; XREF: Obj74_Index
00018EB6 4EF9 0000 DC08             		jmp	DeleteObject
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            Obj7A_Delete:
00018EBC 4EF9 0000 DC08             		jmp	DeleteObject
00018EC2                            ; ===========================================================================
00018EC2                            ; ---------------------------------------------------------------------------
00018EC2                            ; Object 7A - Eggman (SLZ)
00018EC2                            ; ---------------------------------------------------------------------------
00018EC2                            
00018EC2                            Obj7A:					; XREF: Obj_Index
00018EC2 7000                       		moveq	#0,d0
00018EC4 1028 0024                  		move.b	$24(a0),d0
00018EC8 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018ECC 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018ED0                            ; ===========================================================================
00018ED0 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018ED2 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018ED4 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018ED6 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018ED8 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018EDA                            
00018EDA 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EDD 0401 04                    		dc.b 4,	1, 4
00018EE0 0607 04                    		dc.b 6,	7, 4
00018EE3 0800 03                    		dc.b 8,	0, 3
00018EE6                            ; ===========================================================================
00018EE6                            
00018EE6                            Obj7A_Main:				; XREF: Obj7A_Index
00018EE6 317C 2188 0008             		move.w	#$2188,8(a0)
00018EEC 317C 0228 000C             		move.w	#$228,$C(a0)
00018EF2 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EF8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EFE 117C 000F 0020             		move.b	#$F,$20(a0)
00018F04 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018F0A 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018F0E 2248                       		movea.l	a0,a1
00018F10 7203                       		moveq	#3,d1
00018F12 6000                       		bra.s	Obj7A_LoadBoss
00018F14                            ; ===========================================================================
00018F14                            
00018F14                            Obj7A_Loop:
00018F14 4EB9 0000 E068             		jsr	SingleObjLoad2
00018F1A 6600                       		bne.s	loc_1895C
00018F1C 12BC 007A                  		move.b	#$7A,0(a1)
00018F20 3368 0008 0008             		move.w	8(a0),8(a1)
00018F26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F2C                            
00018F2C                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F2C 08A8 0000 0022             		bclr	#0,$22(a0)
00018F32 4229 0025                  		clr.b	$25(a1)
00018F36 135A 0024                  		move.b	(a2)+,$24(a1)
00018F3A 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F3E 135A 0018                  		move.b	(a2)+,$18(a1)
00018F42 237C 0001 831C 0004        		move.l	#Map_Eggman,4(a1)
00018F4A 337C 0400 0002             		move.w	#$400,2(a1)
00018F50 137C 0004 0001             		move.b	#4,1(a1)
00018F56 137C 0020 0019             		move.b	#$20,$19(a1)
00018F5C 2348 0034                  		move.l	a0,$34(a1)
00018F60 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F64                            
00018F64                            loc_1895C:
00018F64 43F8 D040                  		lea	($FFFFD040).w,a1
00018F68 45E8 002A                  		lea	$2A(a0),a2
00018F6C 705E                       		moveq	#$5E,d0
00018F6E 723E                       		moveq	#$3E,d1
00018F70                            
00018F70                            loc_18968:
00018F70 B011                       		cmp.b	(a1),d0
00018F72 6600                       		bne.s	loc_18974
00018F74 4A29 0028                  		tst.b	$28(a1)
00018F78 6700                       		beq.s	loc_18974
00018F7A 34C9                       		move.w	a1,(a2)+
00018F7C                            
00018F7C                            loc_18974:
00018F7C D2FC 0040                  		adda.w	#$40,a1
00018F80 51C9 FFEE                  		dbf	d1,loc_18968
00018F84                            
00018F84                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F84 7000                       		moveq	#0,d0
00018F86 1028 0025                  		move.b	$25(a0),d0
00018F8A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F8E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F92 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
00018F98 4EB9 0000 ACA2             		jsr	AnimateSprite
00018F9E 7003                       		moveq	#3,d0
00018FA0 C028 0022                  		and.b	$22(a0),d0
00018FA4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018FAA 8128 0001                  		or.b	d0,1(a0)
00018FAE 4EF9 0000 DBCC             		jmp	DisplaySprite
00018FB4                            ; ===========================================================================
00018FB4 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018FB6 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018FB8 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FBA 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FBC 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FBE 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FC0                            ; ===========================================================================
00018FC0                            
00018FC0                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FC0 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FC6 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018FCC 6400                       		bcc.s	loc_189CA
00018FCE 5428 0025                  		addq.b	#2,$25(a0)
00018FD2                            
00018FD2                            loc_189CA:
00018FD2 6100 EEE8                  		bsr.w	BossMove
00018FD6 1028 003F                  		move.b	$3F(a0),d0
00018FDA 5428 003F                  		addq.b	#2,$3F(a0)
00018FDE 4EB9 0000 2C82             		jsr	(CalcSine).l
00018FE4 EC40                       		asr.w	#6,d0
00018FE6 D068 0038                  		add.w	$38(a0),d0
00018FEA 3140 000C                  		move.w	d0,$C(a0)
00018FEE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FF4 6000                       		bra.s	loc_189FE
00018FF6                            ; ===========================================================================
00018FF6                            
00018FF6                            loc_189EE:
00018FF6 6100 EEC4                  		bsr.w	BossMove
00018FFA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019000 3168 0030 0008             		move.w	$30(a0),8(a0)
00019006                            
00019006                            loc_189FE:
00019006 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001900C 6400                       		bcc.s	locret_18A44
0001900E 4A28 0022                  		tst.b	$22(a0)
00019012 6B00                       		bmi.s	loc_18A46
00019014 4A28 0020                  		tst.b	$20(a0)
00019018 6600                       		bne.s	locret_18A44
0001901A 4A28 003E                  		tst.b	$3E(a0)
0001901E 6600                       		bne.s	loc_18A28
00019020 117C 0020 003E             		move.b	#$20,$3E(a0)
00019026 303C 00AC                  		move.w	#$AC,d0
0001902A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019030                            
00019030                            loc_18A28:
00019030 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019034 7000                       		moveq	#0,d0
00019036 4A51                       		tst.w	(a1)
00019038 6600                       		bne.s	loc_18A36
0001903A 303C 0EEE                  		move.w	#$EEE,d0
0001903E                            
0001903E                            loc_18A36:
0001903E 3280                       		move.w	d0,(a1)
00019040 5328 003E                  		subq.b	#1,$3E(a0)
00019044 6600                       		bne.s	locret_18A44
00019046 117C 000F 0020             		move.b	#$F,$20(a0)
0001904C                            
0001904C                            locret_18A44:
0001904C 4E75                       		rts	
0001904E                            ; ===========================================================================
0001904E                            
0001904E                            loc_18A46:
0001904E 7064                       		moveq	#100,d0
00019050 6100 0000                  		bsr.w	AddPoints
00019054 117C 0006 0025             		move.b	#6,$25(a0)
0001905A 117C 0078 003C             		move.b	#$78,$3C(a0)
00019060 4268 0010                  		clr.w	$10(a0)
00019064 4E75                       		rts	
00019066                            ; ===========================================================================
00019066                            
00019066                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019066 3028 0030                  		move.w	$30(a0),d0
0001906A 317C 0200 0010             		move.w	#$200,$10(a0)
00019070 0828 0000 0022             		btst	#0,$22(a0)
00019076 6600                       		bne.s	loc_18A7C
00019078 4468 0010                  		neg.w	$10(a0)
0001907C 0C40 2008                  		cmpi.w	#$2008,d0
00019080 6E00                       		bgt.s	loc_18A88
00019082 6000                       		bra.s	loc_18A82
00019084                            ; ===========================================================================
00019084                            
00019084                            loc_18A7C:
00019084 0C40 2138                  		cmpi.w	#$2138,d0
00019088 6D00                       		blt.s	loc_18A88
0001908A                            
0001908A                            loc_18A82:
0001908A 0868 0000 0022             		bchg	#0,$22(a0)
00019090                            
00019090                            loc_18A88:
00019090 3028 0008                  		move.w	8(a0),d0
00019094 72FF                       		moveq	#-1,d1
00019096 7402                       		moveq	#2,d2
00019098 45E8 002A                  		lea	$2A(a0),a2
0001909C 7828                       		moveq	#$28,d4
0001909E 4A68 0010                  		tst.w	$10(a0)
000190A2 6A00                       		bpl.s	loc_18A9E
000190A4 4444                       		neg.w	d4
000190A6                            
000190A6                            loc_18A9E:
000190A6 321A                       		move.w	(a2)+,d1
000190A8 2641                       		movea.l	d1,a3
000190AA 082B 0003 0022             		btst	#3,$22(a3)
000190B0 6600                       		bne.s	loc_18AB4
000190B2 362B 0008                  		move.w	8(a3),d3
000190B6 D644                       		add.w	d4,d3
000190B8 9640                       		sub.w	d0,d3
000190BA 6700                       		beq.s	loc_18AC0
000190BC                            
000190BC                            loc_18AB4:
000190BC 51CA FFE8                  		dbf	d2,loc_18A9E
000190C0                            
000190C0 1142 0028                  		move.b	d2,$28(a0)
000190C4 6000 FF0C                  		bra.w	loc_189CA
000190C8                            ; ===========================================================================
000190C8                            
000190C8                            loc_18AC0:
000190C8 1142 0028                  		move.b	d2,$28(a0)
000190CC 5428 0025                  		addq.b	#2,$25(a0)
000190D0 117C 0028 003C             		move.b	#$28,$3C(a0)
000190D6 6000 FEFA                  		bra.w	loc_189CA
000190DA                            ; ===========================================================================
000190DA                            
000190DA                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000190DA 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190E0 6600                       		bne.s	loc_18B36
000190E2 70FF                       		moveq	#-1,d0
000190E4 1028 0028                  		move.b	$28(a0),d0
000190E8 4880                       		ext.w	d0
000190EA 6B00                       		bmi.s	loc_18B40
000190EC 5540                       		subq.w	#2,d0
000190EE 4440                       		neg.w	d0
000190F0 D040                       		add.w	d0,d0
000190F2 43E8 002A                  		lea	$2A(a0),a1
000190F6 3031 0000                  		move.w	(a1,d0.w),d0
000190FA 2440                       		movea.l	d0,a2
000190FC 43F8 D040                  		lea	($FFFFD040).w,a1
00019100 723E                       		moveq	#$3E,d1
00019102                            
00019102                            loc_18AFA:
00019102 B0A9 003C                  		cmp.l	$3C(a1),d0
00019106 6700                       		beq.s	loc_18B40
00019108 D2FC 0040                  		adda.w	#$40,a1
0001910C 51C9 FFF4                  		dbf	d1,loc_18AFA
00019110                            
00019110 2F08                       		move.l	a0,-(sp)
00019112 41D2                       		lea	(a2),a0
00019114 4EB9 0000 E068             		jsr	SingleObjLoad2
0001911A 205F                       		movea.l	(sp)+,a0
0001911C 6600                       		bne.s	loc_18B40
0001911E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019122 3368 0008 0008             		move.w	8(a0),8(a1)
00019128 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001912E 0669 0020 000C             		addi.w	#$20,$C(a1)
00019134 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001913A 234A 003C                  		move.l	a2,$3C(a1)
0001913E                            
0001913E                            loc_18B36:
0001913E 5328 003C                  		subq.b	#1,$3C(a0)
00019142 6700                       		beq.s	loc_18B40
00019144 6000 FEC0                  		bra.w	loc_189FE
00019148                            ; ===========================================================================
00019148                            
00019148                            loc_18B40:
00019148 5528 0025                  		subq.b	#2,$25(a0)
0001914C 6000 FE84                  		bra.w	loc_189CA
00019150                            ; ===========================================================================
00019150                            
00019150                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019150 5328 003C                  		subq.b	#1,$3C(a0)
00019154 6B00                       		bmi.s	loc_18B52
00019156 6000 ED22                  		bra.w	BossDefeated
0001915A                            ; ===========================================================================
0001915A                            
0001915A                            loc_18B52:
0001915A 5428 0025                  		addq.b	#2,$25(a0)
0001915E 4268 0012                  		clr.w	$12(a0)
00019162 08E8 0000 0022             		bset	#0,$22(a0)
00019168 08A8 0007 0022             		bclr	#7,$22(a0)
0001916E 4268 0010                  		clr.w	$10(a0)
00019172 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019178 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001917C 6600                       		bne.s	loc_18B7C
0001917E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019184                            
00019184                            loc_18B7C:
00019184 6000 FE80                  		bra.w	loc_189FE
00019188                            ; ===========================================================================
00019188                            
00019188                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019188 5228 003C                  		addq.b	#1,$3C(a0)
0001918C 6700                       		beq.s	loc_18B90
0001918E 6A00                       		bpl.s	loc_18B96
00019190 0668 0018 0012             		addi.w	#$18,$12(a0)
00019196 6000                       		bra.s	loc_18BC2
00019198                            ; ===========================================================================
00019198                            
00019198                            loc_18B90:
00019198 4268 0012                  		clr.w	$12(a0)
0001919C 6000                       		bra.s	loc_18BC2
0001919E                            ; ===========================================================================
0001919E                            
0001919E                            loc_18B96:
0001919E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000191A4 6500                       		bcs.s	loc_18BAE
000191A6 6700                       		beq.s	loc_18BB4
000191A8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000191AE 6500                       		bcs.s	loc_18BC2
000191B0 5428 0025                  		addq.b	#2,$25(a0)
000191B4 6000                       		bra.s	loc_18BC2
000191B6                            ; ===========================================================================
000191B6                            
000191B6                            loc_18BAE:
000191B6 5168 0012                  		subq.w	#8,$12(a0)
000191BA 6000                       		bra.s	loc_18BC2
000191BC                            ; ===========================================================================
000191BC                            
000191BC                            loc_18BB4:
000191BC 4268 0012                  		clr.w	$12(a0)
000191C0 303C 0084                  		move.w	#$84,d0
000191C4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191CA                            
000191CA                            loc_18BC2:
000191CA 6000 FE2A                  		bra.w	loc_189EE
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000191CE 317C 0400 0010             		move.w	#$400,$10(a0)
000191D4 317C FFC0 0012             		move.w	#-$40,$12(a0)
000191DA 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191E0 6400                       		bcc.s	loc_18BE0
000191E2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191E6 6000                       		bra.s	loc_18BE8
000191E8                            ; ===========================================================================
000191E8                            
000191E8                            loc_18BE0:
000191E8 4A28 0001                  		tst.b	1(a0)
000191EC 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191F0                            
000191F0                            loc_18BE8:
000191F0 6100 ECCA                  		bsr.w	BossMove
000191F4 6000 FDDC                  		bra.w	loc_189CA
000191F8                            ; ===========================================================================
000191F8                            
000191F8                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191F8 7000                       		moveq	#0,d0
000191FA 7201                       		moveq	#1,d1
000191FC 2268 0034                  		movea.l	$34(a0),a1
00019200 1029 0025                  		move.b	$25(a1),d0
00019204 0C00 0006                  		cmpi.b	#6,d0
00019208 6B00                       		bmi.s	loc_18C06
0001920A 720A                       		moveq	#$A,d1
0001920C 6000                       		bra.s	loc_18C1A
0001920E                            ; ===========================================================================
0001920E                            
0001920E                            loc_18C06:
0001920E 4A29 0020                  		tst.b	$20(a1)
00019212 6600                       		bne.s	loc_18C10
00019214 7205                       		moveq	#5,d1
00019216 6000                       		bra.s	loc_18C1A
00019218                            ; ===========================================================================
00019218                            
00019218                            loc_18C10:
00019218 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001921E 6500                       		bcs.s	loc_18C1A
00019220 7204                       		moveq	#4,d1
00019222                            
00019222                            loc_18C1A:
00019222 1141 001C                  		move.b	d1,$1C(a0)
00019226 0C00 000A                  		cmpi.b	#$A,d0
0001922A 6600                       		bne.s	loc_18C32
0001922C 117C 0006 001C             		move.b	#6,$1C(a0)
00019232 4A28 0001                  		tst.b	1(a0)
00019236 6A00 FC84                  		bpl.w	Obj7A_Delete
0001923A                            
0001923A                            loc_18C32:
0001923A 6000                       		bra.s	loc_18C6C
0001923C                            ; ===========================================================================
0001923C                            
0001923C                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001923C 117C 0008 001C             		move.b	#8,$1C(a0)
00019242 2268 0034                  		movea.l	$34(a0),a1
00019246 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001924C 6600                       		bne.s	loc_18C56
0001924E 4A28 0001                  		tst.b	1(a0)
00019252 6A00 FC68                  		bpl.w	Obj7A_Delete
00019256 117C 000B 001C             		move.b	#$B,$1C(a0)
0001925C 6000                       		bra.s	loc_18C6C
0001925E                            ; ===========================================================================
0001925E                            
0001925E                            loc_18C56:
0001925E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019264 6E00                       		bgt.s	loc_18C6C
00019266 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001926C 6D00                       		blt.s	loc_18C6C
0001926E 117C 0007 001C             		move.b	#7,$1C(a0)
00019274                            
00019274                            loc_18C6C:
00019274 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
0001927A 4EB9 0000 ACA2             		jsr	AnimateSprite
00019280                            
00019280                            loc_18C78:
00019280 2268 0034                  		movea.l	$34(a0),a1
00019284 3169 0008 0008             		move.w	8(a1),8(a0)
0001928A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019290 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019296 7003                       		moveq	#3,d0
00019298 C028 0022                  		and.b	$22(a0),d0
0001929C 0228 00FC 0001             		andi.b	#-4,1(a0)
000192A2 8128 0001                  		or.b	d0,1(a0)
000192A6 4EF9 0000 DBCC             		jmp	DisplaySprite
000192AC                            ; ===========================================================================
000192AC                            
000192AC                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000192AC 2268 0034                  		movea.l	$34(a0),a1
000192B0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000192B6 6600                       		bne.s	loc_18CB8
000192B8 4A28 0001                  		tst.b	1(a0)
000192BC 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192C0                            
000192C0                            loc_18CB8:
000192C0 217C 0001 83E4 0004        		move.l	#Map_BossItems,4(a0)
000192C8 317C 246C 0002             		move.w	#$246C,2(a0)
000192CE 117C 0003 001A             		move.b	#3,$1A(a0)
000192D4 60AA                       		bra.s	loc_18C78
000192D6                            ; ===========================================================================
000192D6                            ; ---------------------------------------------------------------------------
000192D6                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000192D6                            ; ---------------------------------------------------------------------------
000192D6                            
000192D6                            Obj7B:					; XREF: Obj_Index
000192D6 7000                       		moveq	#0,d0
000192D8 1028 0024                  		move.b	$24(a0),d0
000192DC 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192E0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192E4 3028 0030                  		move.w	$30(a0),d0
000192E8 0240 FF80                  		andi.w	#$FF80,d0
000192EC 3238 F700                  		move.w	($FFFFF700).w,d1
000192F0 0441 0080                  		subi.w	#$80,d1
000192F4 0241 FF80                  		andi.w	#$FF80,d1
000192F8 9041                       		sub.w	d1,d0
000192FA 6B00 FBC0                  		bmi.w	Obj7A_Delete
000192FE 0C40 0280                  		cmpi.w	#$280,d0
00019302 6200 FBB8                  		bhi.w	Obj7A_Delete
00019306 4EF9 0000 DBCC             		jmp	DisplaySprite
0001930C                            ; ===========================================================================
0001930C 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001930E 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019310 0000                       		dc.w loc_18DC6-Obj7B_Index
00019312 0000                       		dc.w loc_18EAA-Obj7B_Index
00019314 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019316 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019318                            ; ===========================================================================
00019318                            
00019318                            Obj7B_Main:				; XREF: Obj7B_Index
00019318 217C 0001 1F92 0004        		move.l	#Map_obj5Ea,4(a0)
00019320 317C 0518 0002             		move.w	#$518,2(a0)
00019326 117C 0001 001A             		move.b	#1,$1A(a0)
0001932C 0028 0004 0001             		ori.b	#4,1(a0)
00019332 117C 0004 0018             		move.b	#4,$18(a0)
00019338 117C 008B 0020             		move.b	#$8B,$20(a0)
0001933E 117C 000C 0019             		move.b	#$C,$19(a0)
00019344 2268 003C                  		movea.l	$3C(a0),a1
00019348 3169 0008 0030             		move.w	8(a1),$30(a0)
0001934E 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019354 08E8 0000 0022             		bset	#0,$22(a0)
0001935A 3028 0008                  		move.w	8(a0),d0
0001935E B069 0008                  		cmp.w	8(a1),d0
00019362 6E00                       		bgt.s	loc_18D68
00019364 08A8 0000 0022             		bclr	#0,$22(a0)
0001936A 117C 0002 003A             		move.b	#2,$3A(a0)
00019370                            
00019370                            loc_18D68:
00019370 5428 0024                  		addq.b	#2,$24(a0)
00019374                            
00019374                            Obj7B_Fall:				; XREF: Obj7B_Index
00019374 4EB9 0000 DB7A             		jsr	ObjectFall
0001937A 2268 003C                  		movea.l	$3C(a0),a1
0001937E 45F9 0000 0000             		lea	(word_19018).l,a2
00019384 7000                       		moveq	#0,d0
00019386 1029 001A                  		move.b	$1A(a1),d0
0001938A 3228 0008                  		move.w	8(a0),d1
0001938E 9268 0030                  		sub.w	$30(a0),d1
00019392 6400                       		bcc.s	loc_18D8E
00019394 5440                       		addq.w	#2,d0
00019396                            
00019396                            loc_18D8E:
00019396 D040                       		add.w	d0,d0
00019398 3228 0034                  		move.w	$34(a0),d1
0001939C D272 0000                  		add.w	(a2,d0.w),d1
000193A0 B268 000C                  		cmp.w	$C(a0),d1
000193A4 6E00                       		bgt.s	locret_18DC4
000193A6 2268 003C                  		movea.l	$3C(a0),a1
000193AA 7202                       		moveq	#2,d1
000193AC 0828 0000 0022             		btst	#0,$22(a0)
000193B2 6700                       		beq.s	loc_18DAE
000193B4 7200                       		moveq	#0,d1
000193B6                            
000193B6                            loc_18DAE:
000193B6 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193BC 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193C2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193C8 6000 0000                  		bra.w	loc_18FA2
000193CC                            ; ===========================================================================
000193CC                            
000193CC                            locret_18DC4:
000193CC 4E75                       		rts	
000193CE                            ; ===========================================================================
000193CE                            
000193CE                            loc_18DC6:				; XREF: Obj7B_Index
000193CE 2268 003C                  		movea.l	$3C(a0),a1
000193D2 7000                       		moveq	#0,d0
000193D4 1028 003A                  		move.b	$3A(a0),d0
000193D8 9029 003A                  		sub.b	$3A(a1),d0
000193DC 6700                       		beq.s	loc_18E2A
000193DE 6400                       		bcc.s	loc_18DDA
000193E0 4400                       		neg.b	d0
000193E2                            
000193E2                            loc_18DDA:
000193E2 323C F7E8                  		move.w	#-$818,d1
000193E6 343C FEEC                  		move.w	#-$114,d2
000193EA 0C00 0001                  		cmpi.b	#1,d0
000193EE 6700                       		beq.s	loc_18E00
000193F0 323C F6A0                  		move.w	#-$960,d1
000193F4 343C FF0C                  		move.w	#-$F4,d2
000193F8 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000193FE 6D00                       		blt.s	loc_18E00
00019400 323C F5E0                  		move.w	#-$A20,d1
00019404 343C FF80                  		move.w	#-$80,d2
00019408                            
00019408                            loc_18E00:
00019408 3141 0012                  		move.w	d1,$12(a0)
0001940C 3142 0010                  		move.w	d2,$10(a0)
00019410 3028 0008                  		move.w	8(a0),d0
00019414 9068 0030                  		sub.w	$30(a0),d0
00019418 6400                       		bcc.s	loc_18E16
0001941A 4468 0010                  		neg.w	$10(a0)
0001941E                            
0001941E                            loc_18E16:
0001941E 117C 0001 001A             		move.b	#1,$1A(a0)
00019424 317C 0020 0028             		move.w	#$20,$28(a0)
0001942A 5428 0024                  		addq.b	#2,$24(a0)
0001942E 6000 0000                  		bra.w	loc_18EAA
00019432                            ; ===========================================================================
00019432                            
00019432                            loc_18E2A:				; XREF: loc_18DC6
00019432 45F9 0000 0000             		lea	(word_19018).l,a2
00019438 7000                       		moveq	#0,d0
0001943A 1029 001A                  		move.b	$1A(a1),d0
0001943E 343C 0028                  		move.w	#$28,d2
00019442 3228 0008                  		move.w	8(a0),d1
00019446 9268 0030                  		sub.w	$30(a0),d1
0001944A 6400                       		bcc.s	loc_18E48
0001944C 4442                       		neg.w	d2
0001944E 5440                       		addq.w	#2,d0
00019450                            
00019450                            loc_18E48:
00019450 D040                       		add.w	d0,d0
00019452 3228 0034                  		move.w	$34(a0),d1
00019456 D272 0000                  		add.w	(a2,d0.w),d1
0001945A 3141 000C                  		move.w	d1,$C(a0)
0001945E D468 0030                  		add.w	$30(a0),d2
00019462 3142 0008                  		move.w	d2,8(a0)
00019466 4268 000E                  		clr.w	$E(a0)
0001946A 4268 000A                  		clr.w	$A(a0)
0001946E 5368 0028                  		subq.w	#1,$28(a0)
00019472 6600                       		bne.s	loc_18E7A
00019474 317C 0020 0028             		move.w	#$20,$28(a0)
0001947A 117C 0008 0024             		move.b	#8,$24(a0)
00019480 4E75                       		rts	
00019482                            ; ===========================================================================
00019482                            
00019482                            loc_18E7A:
00019482 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019488 6600                       		bne.s	loc_18E88
0001948A 117C 0005 001F             		move.b	#5,$1F(a0)
00019490                            
00019490                            loc_18E88:
00019490 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019496 6600                       		bne.s	loc_18E96
00019498 117C 0002 001F             		move.b	#2,$1F(a0)
0001949E                            
0001949E                            loc_18E96:
0001949E 5328 001E                  		subq.b	#1,$1E(a0)
000194A2 6E00                       		bgt.s	locret_18EA8
000194A4 0868 0000 001A             		bchg	#0,$1A(a0)
000194AA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194B0                            
000194B0                            locret_18EA8:
000194B0 4E75                       		rts	
000194B2                            ; ===========================================================================
000194B2                            
000194B2                            loc_18EAA:				; XREF: Obj7B_Index
000194B2 43F8 D040                  		lea	($FFFFD040).w,a1
000194B6 707A                       		moveq	#$7A,d0
000194B8 7240                       		moveq	#$40,d1
000194BA 743E                       		moveq	#$3E,d2
000194BC                            
000194BC                            loc_18EB4:
000194BC B011                       		cmp.b	(a1),d0
000194BE 6700                       		beq.s	loc_18EC0
000194C0 D2C1                       		adda.w	d1,a1
000194C2 51CA FFF8                  		dbf	d2,loc_18EB4
000194C6                            
000194C6 6000                       		bra.s	loc_18F38
000194C8                            ; ===========================================================================
000194C8                            
000194C8                            loc_18EC0:
000194C8 3029 0008                  		move.w	8(a1),d0
000194CC 3229 000C                  		move.w	$C(a1),d1
000194D0 3428 0008                  		move.w	8(a0),d2
000194D4 3628 000C                  		move.w	$C(a0),d3
000194D8 45FA 0000                  		lea	byte_19022(pc),a2
000194DC 47FA 0000                  		lea	byte_19026(pc),a3
000194E0 181A                       		move.b	(a2)+,d4
000194E2 4884                       		ext.w	d4
000194E4 D044                       		add.w	d4,d0
000194E6 181B                       		move.b	(a3)+,d4
000194E8 4884                       		ext.w	d4
000194EA D444                       		add.w	d4,d2
000194EC B440                       		cmp.w	d0,d2
000194EE 6500                       		bcs.s	loc_18F38
000194F0 181A                       		move.b	(a2)+,d4
000194F2 4884                       		ext.w	d4
000194F4 D044                       		add.w	d4,d0
000194F6 181B                       		move.b	(a3)+,d4
000194F8 4884                       		ext.w	d4
000194FA D444                       		add.w	d4,d2
000194FC B042                       		cmp.w	d2,d0
000194FE 6500                       		bcs.s	loc_18F38
00019500 181A                       		move.b	(a2)+,d4
00019502 4884                       		ext.w	d4
00019504 D244                       		add.w	d4,d1
00019506 181B                       		move.b	(a3)+,d4
00019508 4884                       		ext.w	d4
0001950A D644                       		add.w	d4,d3
0001950C B641                       		cmp.w	d1,d3
0001950E 6500                       		bcs.s	loc_18F38
00019510 181A                       		move.b	(a2)+,d4
00019512 4884                       		ext.w	d4
00019514 D244                       		add.w	d4,d1
00019516 181B                       		move.b	(a3)+,d4
00019518 4884                       		ext.w	d4
0001951A D644                       		add.w	d4,d3
0001951C B243                       		cmp.w	d3,d1
0001951E 6500                       		bcs.s	loc_18F38
00019520 5428 0024                  		addq.b	#2,$24(a0)
00019524 4268 0028                  		clr.w	$28(a0)
00019528 4229 0020                  		clr.b	$20(a1)
0001952C 5329 0021                  		subq.b	#1,$21(a1)
00019530 6600                       		bne.s	loc_18F38
00019532 08E9 0007 0022             		bset	#7,$22(a1)
00019538 4268 0010                  		clr.w	$10(a0)
0001953C 4268 0012                  		clr.w	$12(a0)
00019540                            
00019540                            loc_18F38:
00019540 4A68 0012                  		tst.w	$12(a0)
00019544 6A00                       		bpl.s	loc_18F5C
00019546 4EB9 0000 DB7A             		jsr	ObjectFall
0001954C 3028 0034                  		move.w	$34(a0),d0
00019550 0440 002F                  		subi.w	#$2F,d0
00019554 B068 000C                  		cmp.w	$C(a0),d0
00019558 6E00                       		bgt.s	loc_18F58
0001955A 4EB9 0000 DB7A             		jsr	ObjectFall
00019560                            
00019560                            loc_18F58:
00019560 6000 FF20                  		bra.w	loc_18E7A
00019564                            ; ===========================================================================
00019564                            
00019564                            loc_18F5C:
00019564 4EB9 0000 DB7A             		jsr	ObjectFall
0001956A 2268 003C                  		movea.l	$3C(a0),a1
0001956E 45F9 0000 0000             		lea	(word_19018).l,a2
00019574 7000                       		moveq	#0,d0
00019576 1029 001A                  		move.b	$1A(a1),d0
0001957A 3228 0008                  		move.w	8(a0),d1
0001957E 9268 0030                  		sub.w	$30(a0),d1
00019582 6400                       		bcc.s	loc_18F7E
00019584 5440                       		addq.w	#2,d0
00019586                            
00019586                            loc_18F7E:
00019586 D040                       		add.w	d0,d0
00019588 3228 0034                  		move.w	$34(a0),d1
0001958C D272 0000                  		add.w	(a2,d0.w),d1
00019590 B268 000C                  		cmp.w	$C(a0),d1
00019594 6ECA                       		bgt.s	loc_18F58
00019596 2268 003C                  		movea.l	$3C(a0),a1
0001959A 7202                       		moveq	#2,d1
0001959C 4A68 0010                  		tst.w	$10(a0)
000195A0 6B00                       		bmi.s	loc_18F9C
000195A2 7200                       		moveq	#0,d1
000195A4                            
000195A4                            loc_18F9C:
000195A4 317C 0000 0028             		move.w	#0,$28(a0)
000195AA                            
000195AA                            loc_18FA2:
000195AA 1341 003A                  		move.b	d1,$3A(a1)
000195AE 1141 003A                  		move.b	d1,$3A(a0)
000195B2 B229 001A                  		cmp.b	$1A(a1),d1
000195B6 6700                       		beq.s	loc_19008
000195B8 08A9 0003 0022             		bclr	#3,$22(a1)
000195BE 6700                       		beq.s	loc_19008
000195C0 4229 0025                  		clr.b	$25(a1)
000195C4 137C 0002 0024             		move.b	#2,$24(a1)
000195CA 45F8 D000                  		lea	($FFFFD000).w,a2
000195CE 3568 0012 0012             		move.w	$12(a0),$12(a2)
000195D4 446A 0012                  		neg.w	$12(a2)
000195D8 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195DE 6600                       		bne.s	loc_18FDC
000195E0 E0EA 0012                  		asr	$12(a2)
000195E4                            
000195E4                            loc_18FDC:
000195E4 08EA 0001 0022             		bset	#1,$22(a2)
000195EA 08AA 0003 0022             		bclr	#3,$22(a2)
000195F0 422A 003C                  		clr.b	$3C(a2)
000195F4 2F08                       		move.l	a0,-(sp)
000195F6 41D2                       		lea	(a2),a0
000195F8 4EBA A3B8                  		jsr	Obj01_ChkRoll
000195FC 205F                       		movea.l	(sp)+,a0
000195FE 157C 0002 0024             		move.b	#2,$24(a2)
00019604 303C 00CC                  		move.w	#$CC,d0
00019608 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001960E                            
0001960E                            loc_19008:
0001960E 4268 0010                  		clr.w	$10(a0)
00019612 4268 0012                  		clr.w	$12(a0)
00019616 5428 0024                  		addq.b	#2,$24(a0)
0001961A 6000 FE66                  		bra.w	loc_18E7A
0001961E                            ; ===========================================================================
0001961E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019628                            		even
00019628 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001962C                            		even
0001962C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019630                            		even
00019630                            ; ===========================================================================
00019630                            
00019630                            Obj7B_Explode:				; XREF: Obj7B_Index
00019630 10BC 003F                  		move.b	#$3F,(a0)
00019634 4228 0024                  		clr.b	$24(a0)
00019638 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001963E 6700                       		beq.s	Obj7B_MakeFrag
00019640 4E75                       		rts	
00019642                            ; ===========================================================================
00019642                            
00019642                            Obj7B_MakeFrag:
00019642 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019648 7203                       		moveq	#3,d1
0001964A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001964E                            
0001964E                            Obj7B_Loop:
0001964E 4EB9 0000 E052             		jsr	SingleObjLoad
00019654 6600                       		bne.s	loc_1909A
00019656 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001965A 137C 000A 0024             		move.b	#$A,$24(a1)
00019660 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019668 137C 0003 0018             		move.b	#3,$18(a1)
0001966E 337C 0518 0002             		move.w	#$518,2(a1)
00019674 3368 0008 0008             		move.w	8(a0),8(a1)
0001967A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019680 335A 0010                  		move.w	(a2)+,$10(a1)
00019684 335A 0012                  		move.w	(a2)+,$12(a1)
00019688 137C 0098 0020             		move.b	#$98,$20(a1)
0001968E 0029 0004 0001             		ori.b	#4,1(a1)
00019694 08E9 0007 0001             		bset	#7,1(a1)
0001969A 137C 000C 0019             		move.b	#$C,$19(a1)
000196A0                            
000196A0                            loc_1909A:
000196A0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000196A4                            
000196A4 4E75                       		rts	
000196A6                            ; ===========================================================================
000196A6 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000196AA FF60 FDC0                  		dc.w $FF60, $FDC0
000196AE 0100 FCC0                  		dc.w $100, $FCC0
000196B2 00A0 FDC0                  		dc.w $A0, $FDC0
000196B6                            ; ===========================================================================
000196B6                            
000196B6                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000196B6 4EB9 0000 DBA6             		jsr	SpeedToPos
000196BC 3168 0008 0030             		move.w	8(a0),$30(a0)
000196C2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196C8 0668 0018 0012             		addi.w	#$18,$12(a0)
000196CE 7004                       		moveq	#4,d0
000196D0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000196D4 E448                       		lsr.w	#2,d0
000196D6 1140 001A                  		move.b	d0,$1A(a0)
000196DA 4A28 0001                  		tst.b	1(a0)
000196DE 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196E2 4E75                       		rts	
000196E4                            ; ===========================================================================
000196E4                            ; ---------------------------------------------------------------------------
000196E4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196E4                            ; ---------------------------------------------------------------------------
000196E4                            Map_obj7B:
000196E4                            	include "_maps\obj7B.asm"
000196E4                            ; ---------------------------------------------------------------------------
000196E4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196E4                            ; ---------------------------------------------------------------------------
000196E4 0000                       		dc.w byte_190E2-Map_obj7B
000196E6 0000                       		dc.w byte_190E8-Map_obj7B
000196E8 01                         byte_190E2:	dc.b 1
000196E9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196EE 01                         byte_190E8:	dc.b 1
000196EF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196F4                            		even
000196F4                            		even
000196F4                            
000196F4                            ; ===========================================================================
000196F4                            ; ---------------------------------------------------------------------------
000196F4                            ; Object 75 - Eggman (SYZ)
000196F4                            ; ---------------------------------------------------------------------------
000196F4                            
000196F4                            Obj75:					; XREF: Obj_Index
000196F4 7000                       		moveq	#0,d0
000196F6 1028 0024                  		move.b	$24(a0),d0
000196FA 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000196FE 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019702                            ; ===========================================================================
00019702 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019704 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019706 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019708 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001970A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001970C                            
0001970C 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001970F 0401 05                    		dc.b 4,	1, 5
00019712 0607 05                    		dc.b 6,	7, 5
00019715 0800 05                    		dc.b 8,	0, 5
00019718                            ; ===========================================================================
00019718                            
00019718                            Obj75_Main:				; XREF: Obj75_Index
00019718 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001971E 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019724 3168 0008 0030             		move.w	8(a0),$30(a0)
0001972A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019730 117C 000F 0020             		move.b	#$F,$20(a0)
00019736 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001973C 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019740 2248                       		movea.l	a0,a1
00019742 7203                       		moveq	#3,d1
00019744 6000                       		bra.s	Obj75_LoadBoss
00019746                            ; ===========================================================================
00019746                            
00019746                            Obj75_Loop:
00019746 4EB9 0000 E068             		jsr	SingleObjLoad2
0001974C 6600                       		bne.s	Obj75_ShipMain
0001974E 12BC 0075                  		move.b	#$75,(a1)
00019752 3368 0008 0008             		move.w	8(a0),8(a1)
00019758 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001975E                            
0001975E                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001975E 08A8 0000 0022             		bclr	#0,$22(a0)
00019764 4229 0025                  		clr.b	$25(a1)
00019768 135A 0024                  		move.b	(a2)+,$24(a1)
0001976C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019770 135A 0018                  		move.b	(a2)+,$18(a1)
00019774 237C 0001 831C 0004        		move.l	#Map_Eggman,4(a1)
0001977C 337C 0400 0002             		move.w	#$400,2(a1)
00019782 137C 0004 0001             		move.b	#4,1(a1)
00019788 137C 0020 0019             		move.b	#$20,$19(a1)
0001978E 2348 0034                  		move.l	a0,$34(a1)
00019792 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019796                            
00019796                            Obj75_ShipMain:				; XREF: Obj75_Index
00019796 7000                       		moveq	#0,d0
00019798 1028 0025                  		move.b	$25(a0),d0
0001979C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000197A0 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000197A4 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
000197AA 4EB9 0000 ACA2             		jsr	AnimateSprite
000197B0 7003                       		moveq	#3,d0
000197B2 C028 0022                  		and.b	$22(a0),d0
000197B6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197BC 8128 0001                  		or.b	d0,1(a0)
000197C0 4EF9 0000 DBCC             		jmp	DisplaySprite
000197C6                            ; ===========================================================================
000197C6 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197CA 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000197CE 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000197D2                            ; ===========================================================================
000197D2                            
000197D2                            loc_191CC:				; XREF: Obj75_ShipIndex
000197D2 317C FF00 0010             		move.w	#-$100,$10(a0)
000197D8 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197DE 6400                       		bcc.s	loc_191DE
000197E0 5428 0025                  		addq.b	#2,$25(a0)
000197E4                            
000197E4                            loc_191DE:
000197E4 1028 003F                  		move.b	$3F(a0),d0
000197E8 5428 003F                  		addq.b	#2,$3F(a0)
000197EC 4EB9 0000 2C82             		jsr	(CalcSine).l
000197F2 E440                       		asr.w	#2,d0
000197F4 3140 0012                  		move.w	d0,$12(a0)
000197F8                            
000197F8                            loc_191F2:
000197F8 6100 E6C2                  		bsr.w	BossMove
000197FC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019802 3168 0030 0008             		move.w	$30(a0),8(a0)
00019808                            
00019808                            loc_19202:
00019808 3028 0008                  		move.w	8(a0),d0
0001980C 0440 2C00                  		subi.w	#$2C00,d0
00019810 EA48                       		lsr.w	#5,d0
00019812 1140 0034                  		move.b	d0,$34(a0)
00019816 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001981C 6400                       		bcc.s	locret_19256
0001981E 4A28 0022                  		tst.b	$22(a0)
00019822 6B00                       		bmi.s	loc_19258
00019824 4A28 0020                  		tst.b	$20(a0)
00019828 6600                       		bne.s	locret_19256
0001982A 4A28 003E                  		tst.b	$3E(a0)
0001982E 6600                       		bne.s	loc_1923A
00019830 117C 0020 003E             		move.b	#$20,$3E(a0)
00019836 303C 00AC                  		move.w	#$AC,d0
0001983A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019840                            
00019840                            loc_1923A:
00019840 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019844 7000                       		moveq	#0,d0
00019846 4A51                       		tst.w	(a1)
00019848 6600                       		bne.s	loc_19248
0001984A 303C 0EEE                  		move.w	#$EEE,d0
0001984E                            
0001984E                            loc_19248:
0001984E 3280                       		move.w	d0,(a1)
00019850 5328 003E                  		subq.b	#1,$3E(a0)
00019854 6600                       		bne.s	locret_19256
00019856 117C 000F 0020             		move.b	#$F,$20(a0)
0001985C                            
0001985C                            locret_19256:
0001985C 4E75                       		rts	
0001985E                            ; ===========================================================================
0001985E                            
0001985E                            loc_19258:				; XREF: loc_19202
0001985E 7064                       		moveq	#100,d0
00019860 6100 0000                  		bsr.w	AddPoints
00019864 117C 0006 0025             		move.b	#6,$25(a0)
0001986A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019870 4268 0010                  		clr.w	$10(a0)
00019874 4E75                       		rts	
00019876                            ; ===========================================================================
00019876                            
00019876                            loc_19270:				; XREF: Obj75_ShipIndex
00019876 3028 0030                  		move.w	$30(a0),d0
0001987A 317C 0140 0010             		move.w	#$140,$10(a0)
00019880 0828 0000 0022             		btst	#0,$22(a0)
00019886 6600                       		bne.s	loc_1928E
00019888 4468 0010                  		neg.w	$10(a0)
0001988C 0C40 2C08                  		cmpi.w	#$2C08,d0
00019890 6E00                       		bgt.s	loc_1929E
00019892 6000                       		bra.s	loc_19294
00019894                            ; ===========================================================================
00019894                            
00019894                            loc_1928E:
00019894 0C40 2D38                  		cmpi.w	#$2D38,d0
00019898 6D00                       		blt.s	loc_1929E
0001989A                            
0001989A                            loc_19294:
0001989A 0868 0000 0022             		bchg	#0,$22(a0)
000198A0 4228 003D                  		clr.b	$3D(a0)
000198A4                            
000198A4                            loc_1929E:
000198A4 0440 2C10                  		subi.w	#$2C10,d0
000198A8 0240 001F                  		andi.w	#$1F,d0
000198AC 0440 001F                  		subi.w	#$1F,d0
000198B0 6A00                       		bpl.s	loc_192AE
000198B2 4440                       		neg.w	d0
000198B4                            
000198B4                            loc_192AE:
000198B4 5340                       		subq.w	#1,d0
000198B6 6E00                       		bgt.s	loc_192E8
000198B8 4A28 003D                  		tst.b	$3D(a0)
000198BC 6600                       		bne.s	loc_192E8
000198BE 3238 D008                  		move.w	($FFFFD008).w,d1
000198C2 0441 2C00                  		subi.w	#$2C00,d1
000198C6 EA41                       		asr.w	#5,d1
000198C8 B228 0034                  		cmp.b	$34(a0),d1
000198CC 6600                       		bne.s	loc_192E8
000198CE 7000                       		moveq	#0,d0
000198D0 1028 0034                  		move.b	$34(a0),d0
000198D4 EB40                       		asl.w	#5,d0
000198D6 0640 2C10                  		addi.w	#$2C10,d0
000198DA 3140 0030                  		move.w	d0,$30(a0)
000198DE 6100 0000                  		bsr.w	Obj75_FindBlocks
000198E2 5428 0025                  		addq.b	#2,$25(a0)
000198E6 4268 0028                  		clr.w	$28(a0)
000198EA 4268 0010                  		clr.w	$10(a0)
000198EE                            
000198EE                            loc_192E8:
000198EE 6000 FEF4                  		bra.w	loc_191DE
000198F2                            ; ===========================================================================
000198F2                            
000198F2                            loc_192EC:				; XREF: Obj75_ShipIndex
000198F2 7000                       		moveq	#0,d0
000198F4 1028 0028                  		move.b	$28(a0),d0
000198F8 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000198FC 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019900                            ; ===========================================================================
00019900 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019902 0000                       		dc.w loc_19348-off_192FA
00019904 0000                       		dc.w loc_1938E-off_192FA
00019906 0000                       		dc.w loc_193D0-off_192FA
00019908                            ; ===========================================================================
00019908                            
00019908                            loc_19302:				; XREF: off_192FA
00019908 317C 0180 0012             		move.w	#$180,$12(a0)
0001990E 3028 0038                  		move.w	$38(a0),d0
00019912 0C40 0556                  		cmpi.w	#$556,d0
00019916 6500                       		bcs.s	loc_19344
00019918 317C 0556 0038             		move.w	#$556,$38(a0)
0001991E 4268 003C                  		clr.w	$3C(a0)
00019922 70FF                       		moveq	#-1,d0
00019924 3028 0036                  		move.w	$36(a0),d0
00019928 6700                       		beq.s	loc_1933C
0001992A 2240                       		movea.l	d0,a1
0001992C 137C 00FF 0029             		move.b	#-1,$29(a1)
00019932 117C 00FF 0029             		move.b	#-1,$29(a0)
00019938 2348 0034                  		move.l	a0,$34(a1)
0001993C 317C 0032 003C             		move.w	#$32,$3C(a0)
00019942                            
00019942                            loc_1933C:
00019942 4268 0012                  		clr.w	$12(a0)
00019946 5428 0028                  		addq.b	#2,$28(a0)
0001994A                            
0001994A                            loc_19344:
0001994A 6000 FEAC                  		bra.w	loc_191F2
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            loc_19348:				; XREF: off_192FA
0001994E 5368 003C                  		subq.w	#1,$3C(a0)
00019952 6A00                       		bpl.s	loc_19366
00019954 5428 0028                  		addq.b	#2,$28(a0)
00019958 317C F800 0012             		move.w	#-$800,$12(a0)
0001995E 4A68 0036                  		tst.w	$36(a0)
00019962 6600                       		bne.s	loc_19362
00019964 E0E8 0012                  		asr	$12(a0)
00019968                            
00019968                            loc_19362:
00019968 7000                       		moveq	#0,d0
0001996A 6000                       		bra.s	loc_1937C
0001996C                            ; ===========================================================================
0001996C                            
0001996C                            loc_19366:
0001996C 7000                       		moveq	#0,d0
0001996E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019974 6E00                       		bgt.s	loc_1937C
00019976 7002                       		moveq	#2,d0
00019978 0828 0001 003D             		btst	#1,$3D(a0)
0001997E 6700                       		beq.s	loc_1937C
00019980 4440                       		neg.w	d0
00019982                            
00019982                            loc_1937C:
00019982 D068 0038                  		add.w	$38(a0),d0
00019986 3140 000C                  		move.w	d0,$C(a0)
0001998A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019990 6000 FE76                  		bra.w	loc_19202
00019994                            ; ===========================================================================
00019994                            
00019994                            loc_1938E:				; XREF: off_192FA
00019994 303C 04DA                  		move.w	#$4DA,d0
00019998 4A68 0036                  		tst.w	$36(a0)
0001999C 6700                       		beq.s	loc_1939C
0001999E 0440 0018                  		subi.w	#$18,d0
000199A2                            
000199A2                            loc_1939C:
000199A2 B068 0038                  		cmp.w	$38(a0),d0
000199A6 6D00                       		blt.s	loc_193BE
000199A8 317C 0008 003C             		move.w	#8,$3C(a0)
000199AE 4A68 0036                  		tst.w	$36(a0)
000199B2 6700                       		beq.s	loc_193B4
000199B4 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199BA                            
000199BA                            loc_193B4:
000199BA 5428 0028                  		addq.b	#2,$28(a0)
000199BE 4268 0012                  		clr.w	$12(a0)
000199C2 6000                       		bra.s	loc_193CC
000199C4                            ; ===========================================================================
000199C4                            
000199C4                            loc_193BE:
000199C4 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199CA 6C00                       		bge.s	loc_193CC
000199CC 0668 000C 0012             		addi.w	#$C,$12(a0)
000199D2                            
000199D2                            loc_193CC:
000199D2 6000 FE24                  		bra.w	loc_191F2
000199D6                            ; ===========================================================================
000199D6                            
000199D6                            loc_193D0:				; XREF: off_192FA
000199D6 5368 003C                  		subq.w	#1,$3C(a0)
000199DA 6E00                       		bgt.s	loc_19406
000199DC 6B00                       		bmi.s	loc_193EE
000199DE 70FF                       		moveq	#-1,d0
000199E0 3028 0036                  		move.w	$36(a0),d0
000199E4 6700                       		beq.s	loc_193E8
000199E6 2240                       		movea.l	d0,a1
000199E8 137C 000A 0029             		move.b	#$A,$29(a1)
000199EE                            
000199EE                            loc_193E8:
000199EE 4268 0036                  		clr.w	$36(a0)
000199F2 6000                       		bra.s	loc_19406
000199F4                            ; ===========================================================================
000199F4                            
000199F4                            loc_193EE:
000199F4 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000199FA 6600                       		bne.s	loc_19406
000199FC 4228 0029                  		clr.b	$29(a0)
00019A00 5528 0025                  		subq.b	#2,$25(a0)
00019A04 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019A0A 6000                       		bra.s	loc_19446
00019A0C                            ; ===========================================================================
00019A0C                            
00019A0C                            loc_19406:
00019A0C 7001                       		moveq	#1,d0
00019A0E 4A68 0036                  		tst.w	$36(a0)
00019A12 6700                       		beq.s	loc_19410
00019A14 7002                       		moveq	#2,d0
00019A16                            
00019A16                            loc_19410:
00019A16 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A1C 6700                       		beq.s	loc_19424
00019A1E 6D00                       		blt.s	loc_1941C
00019A20 4440                       		neg.w	d0
00019A22                            
00019A22                            loc_1941C:
00019A22 4A68 0036                  		tst.w	$36(a0)
00019A26 D168 0038                  		add.w	d0,$38(a0)
00019A2A                            
00019A2A                            loc_19424:
00019A2A 7000                       		moveq	#0,d0
00019A2C 4A68 0036                  		tst.w	$36(a0)
00019A30 6700                       		beq.s	loc_19438
00019A32 7002                       		moveq	#2,d0
00019A34 0828 0000 003D             		btst	#0,$3D(a0)
00019A3A 6700                       		beq.s	loc_19438
00019A3C 4440                       		neg.w	d0
00019A3E                            
00019A3E                            loc_19438:
00019A3E D068 0038                  		add.w	$38(a0),d0
00019A42 3140 000C                  		move.w	d0,$C(a0)
00019A46 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A4C                            
00019A4C                            loc_19446:
00019A4C 6000 FDBA                  		bra.w	loc_19202
00019A50                            
00019A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A50                            
00019A50                            
00019A50                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A50 4268 0036                  		clr.w	$36(a0)
00019A54 43F8 D040                  		lea	($FFFFD040).w,a1
00019A58 703E                       		moveq	#$3E,d0
00019A5A 7276                       		moveq	#$76,d1
00019A5C 1428 0034                  		move.b	$34(a0),d2
00019A60                            
00019A60                            Obj75_FindLoop:
00019A60 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A62 6600                       		bne.s	loc_1946A	; if not, branch
00019A64 B429 0028                  		cmp.b	$28(a1),d2
00019A68 6600                       		bne.s	loc_1946A
00019A6A 3149 0036                  		move.w	a1,$36(a0)
00019A6E 6000                       		bra.s	locret_19472
00019A70                            ; ===========================================================================
00019A70                            
00019A70                            loc_1946A:
00019A70 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A74 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A78                            
00019A78                            locret_19472:
00019A78 4E75                       		rts	
00019A7A                            ; End of function Obj75_FindBlocks
00019A7A                            
00019A7A                            ; ===========================================================================
00019A7A                            
00019A7A                            loc_19474:				; XREF: Obj75_ShipIndex
00019A7A 5368 003C                  		subq.w	#1,$3C(a0)
00019A7E 6B00                       		bmi.s	loc_1947E
00019A80 6000 E3F8                  		bra.w	BossDefeated
00019A84                            ; ===========================================================================
00019A84                            
00019A84                            loc_1947E:
00019A84 5428 0025                  		addq.b	#2,$25(a0)
00019A88 4268 0012                  		clr.w	$12(a0)
00019A8C 08E8 0000 0022             		bset	#0,$22(a0)
00019A92 08A8 0007 0022             		bclr	#7,$22(a0)
00019A98 4268 0010                  		clr.w	$10(a0)
00019A9C 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019AA2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019AA6 6600                       		bne.s	loc_194A8
00019AA8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AAE                            
00019AAE                            loc_194A8:
00019AAE 6000 FD58                  		bra.w	loc_19202
00019AB2                            ; ===========================================================================
00019AB2                            
00019AB2                            loc_194AC:				; XREF: Obj75_ShipIndex
00019AB2 5268 003C                  		addq.w	#1,$3C(a0)
00019AB6 6700                       		beq.s	loc_194BC
00019AB8 6A00                       		bpl.s	loc_194C2
00019ABA 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AC0 6000                       		bra.s	loc_194EE
00019AC2                            ; ===========================================================================
00019AC2                            
00019AC2                            loc_194BC:
00019AC2 4268 0012                  		clr.w	$12(a0)
00019AC6 6000                       		bra.s	loc_194EE
00019AC8                            ; ===========================================================================
00019AC8                            
00019AC8                            loc_194C2:
00019AC8 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019ACE 6500                       		bcs.s	loc_194DA
00019AD0 6700                       		beq.s	loc_194E0
00019AD2 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019AD8 6500                       		bcs.s	loc_194EE
00019ADA 5428 0025                  		addq.b	#2,$25(a0)
00019ADE 6000                       		bra.s	loc_194EE
00019AE0                            ; ===========================================================================
00019AE0                            
00019AE0                            loc_194DA:
00019AE0 5168 0012                  		subq.w	#8,$12(a0)
00019AE4 6000                       		bra.s	loc_194EE
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_194E0:
00019AE6 4268 0012                  		clr.w	$12(a0)
00019AEA 303C 0085                  		move.w	#$85,d0
00019AEE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019AF4                            
00019AF4                            loc_194EE:
00019AF4 6000 FD02                  		bra.w	loc_191F2
00019AF8                            ; ===========================================================================
00019AF8                            
00019AF8                            loc_194F2:				; XREF: Obj75_ShipIndex
00019AF8 317C 0400 0010             		move.w	#$400,$10(a0)
00019AFE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B04 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019B0A 6400                       		bcc.s	loc_1950C
00019B0C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B10 6000                       		bra.s	loc_19512
00019B12                            ; ===========================================================================
00019B12                            
00019B12                            loc_1950C:
00019B12 4A28 0001                  		tst.b	1(a0)
00019B16 6A00                       		bpl.s	Obj75_ShipDelete
00019B18                            
00019B18                            loc_19512:
00019B18 6100 E3A2                  		bsr.w	BossMove
00019B1C 6000 FCC6                  		bra.w	loc_191DE
00019B20                            ; ===========================================================================
00019B20                            
00019B20                            Obj75_ShipDelete:
00019B20 4EF9 0000 DC08             		jmp	DeleteObject
00019B26                            ; ===========================================================================
00019B26                            
00019B26                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B26 7201                       		moveq	#1,d1
00019B28 2268 0034                  		movea.l	$34(a0),a1
00019B2C 7000                       		moveq	#0,d0
00019B2E 1029 0025                  		move.b	$25(a1),d0
00019B32 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B36 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B3A 1141 001C                  		move.b	d1,$1C(a0)
00019B3E 1010                       		move.b	(a0),d0
00019B40 B011                       		cmp.b	(a1),d0
00019B42 6600                       		bne.s	Obj75_FaceDelete
00019B44 6000                       		bra.s	loc_195BE
00019B46                            ; ===========================================================================
00019B46                            
00019B46                            Obj75_FaceDelete:
00019B46 4EF9 0000 DC08             		jmp	DeleteObject
00019B4C                            ; ===========================================================================
00019B4C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B50 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B54 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            loc_19552:				; XREF: off_19546
00019B58 720A                       		moveq	#$A,d1
00019B5A 4E75                       		rts	
00019B5C                            ; ===========================================================================
00019B5C                            
00019B5C                            loc_19556:				; XREF: off_19546
00019B5C 7206                       		moveq	#6,d1
00019B5E 4E75                       		rts	
00019B60                            ; ===========================================================================
00019B60                            
00019B60                            loc_1955A:				; XREF: off_19546
00019B60 7000                       		moveq	#0,d0
00019B62 1029 0028                  		move.b	$28(a1),d0
00019B66 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B6A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B6E                            ; ===========================================================================
00019B6E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B72 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B76                            ; ===========================================================================
00019B76                            
00019B76                            loc_19570:				; XREF: off_19568
00019B76 6000                       		bra.s	loc_19574
00019B78                            ; ===========================================================================
00019B78                            
00019B78                            loc_19572:				; XREF: off_19568
00019B78 7206                       		moveq	#6,d1
00019B7A                            
00019B7A                            loc_19574:				; XREF: off_19546
00019B7A 4A29 0020                  		tst.b	$20(a1)
00019B7E 6600                       		bne.s	loc_1957E
00019B80 7205                       		moveq	#5,d1
00019B82 4E75                       		rts	
00019B84                            ; ===========================================================================
00019B84                            
00019B84                            loc_1957E:
00019B84 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B8A 6500                       		bcs.s	locret_19588
00019B8C 7204                       		moveq	#4,d1
00019B8E                            
00019B8E                            locret_19588:
00019B8E 4E75                       		rts	
00019B90                            ; ===========================================================================
00019B90                            
00019B90                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B90 117C 0007 001C             		move.b	#7,$1C(a0)
00019B96 2268 0034                  		movea.l	$34(a0),a1
00019B9A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019BA0 6600                       		bne.s	loc_195AA
00019BA2 117C 000B 001C             		move.b	#$B,$1C(a0)
00019BA8 4A28 0001                  		tst.b	1(a0)
00019BAC 6A00                       		bpl.s	Obj75_FlameDelete
00019BAE 6000                       		bra.s	loc_195B6
00019BB0                            ; ===========================================================================
00019BB0                            
00019BB0                            loc_195AA:
00019BB0 4A69 0010                  		tst.w	$10(a1)
00019BB4 6700                       		beq.s	loc_195B6
00019BB6 117C 0008 001C             		move.b	#8,$1C(a0)
00019BBC                            
00019BBC                            loc_195B6:
00019BBC 6000                       		bra.s	loc_195BE
00019BBE                            ; ===========================================================================
00019BBE                            
00019BBE                            Obj75_FlameDelete:
00019BBE 4EF9 0000 DC08             		jmp	DeleteObject
00019BC4                            ; ===========================================================================
00019BC4                            
00019BC4                            loc_195BE:
00019BC4 43F9 0001 82CC             		lea	(Ani_Eggman).l,a1
00019BCA 4EB9 0000 ACA2             		jsr	AnimateSprite
00019BD0 2268 0034                  		movea.l	$34(a0),a1
00019BD4 3169 0008 0008             		move.w	8(a1),8(a0)
00019BDA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BE0                            
00019BE0                            loc_195DA:
00019BE0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BE6 7003                       		moveq	#3,d0
00019BE8 C028 0022                  		and.b	$22(a0),d0
00019BEC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BF2 8128 0001                  		or.b	d0,1(a0)
00019BF6 4EF9 0000 DBCC             		jmp	DisplaySprite
00019BFC                            ; ===========================================================================
00019BFC                            
00019BFC                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019BFC 217C 0001 83E4 0004        		move.l	#Map_BossItems,4(a0)
00019C04 317C 246C 0002             		move.w	#$246C,2(a0)
00019C0A 117C 0005 001A             		move.b	#5,$1A(a0)
00019C10 2268 0034                  		movea.l	$34(a0),a1
00019C14 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C1A 6600                       		bne.s	loc_1961C
00019C1C 4A28 0001                  		tst.b	1(a0)
00019C20 6A00                       		bpl.s	Obj75_SpikeDelete
00019C22                            
00019C22                            loc_1961C:
00019C22 3169 0008 0008             		move.w	8(a1),8(a0)
00019C28 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C2E 3028 003C                  		move.w	$3C(a0),d0
00019C32 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C38 6600                       		bne.s	loc_19652
00019C3A 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C40 6700                       		beq.s	loc_1964C
00019C42 4A29 0028                  		tst.b	$28(a1)
00019C46 6600                       		bne.s	loc_19658
00019C48 0C40 0094                  		cmpi.w	#$94,d0
00019C4C 6C00                       		bge.s	loc_19658
00019C4E 5E40                       		addq.w	#7,d0
00019C50 6000                       		bra.s	loc_19658
00019C52                            ; ===========================================================================
00019C52                            
00019C52                            loc_1964C:
00019C52 4A69 003C                  		tst.w	$3C(a1)
00019C56 6A00                       		bpl.s	loc_19658
00019C58                            
00019C58                            loc_19652:
00019C58 4A40                       		tst.w	d0
00019C5A 6F00                       		ble.s	loc_19658
00019C5C 5B40                       		subq.w	#5,d0
00019C5E                            
00019C5E                            loc_19658:
00019C5E 3140 003C                  		move.w	d0,$3C(a0)
00019C62 E440                       		asr.w	#2,d0
00019C64 D168 000C                  		add.w	d0,$C(a0)
00019C68 117C 0008 0019             		move.b	#8,$19(a0)
00019C6E 117C 000C 0016             		move.b	#$C,$16(a0)
00019C74 4228 0020                  		clr.b	$20(a0)
00019C78 2268 0034                  		movea.l	$34(a0),a1
00019C7C 4A29 0020                  		tst.b	$20(a1)
00019C80 6700                       		beq.s	loc_19688
00019C82 4A29 0029                  		tst.b	$29(a1)
00019C86 6600                       		bne.s	loc_19688
00019C88 117C 0084 0020             		move.b	#$84,$20(a0)
00019C8E                            
00019C8E                            loc_19688:
00019C8E 6000 FF50                  		bra.w	loc_195DA
00019C92                            ; ===========================================================================
00019C92                            
00019C92                            Obj75_SpikeDelete:
00019C92 4EF9 0000 DC08             		jmp	DeleteObject
00019C98                            ; ===========================================================================
00019C98                            ; ---------------------------------------------------------------------------
00019C98                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C98                            ; ---------------------------------------------------------------------------
00019C98                            
00019C98                            Obj76:					; XREF: Obj_Index
00019C98 7000                       		moveq	#0,d0
00019C9A 1028 0024                  		move.b	$24(a0),d0
00019C9E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019CA2 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019CA6                            ; ===========================================================================
00019CA6 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019CA8 0000                       		dc.w Obj76_Action-Obj76_Index
00019CAA 0000                       		dc.w loc_19762-Obj76_Index
00019CAC                            ; ===========================================================================
00019CAC                            
00019CAC                            Obj76_Main:				; XREF: Obj76_Index
00019CAC 7800                       		moveq	#0,d4
00019CAE 3A3C 2C10                  		move.w	#$2C10,d5
00019CB2 7C09                       		moveq	#9,d6
00019CB4 43D0                       		lea	(a0),a1
00019CB6 6000                       		bra.s	Obj76_MakeBlock
00019CB8                            ; ===========================================================================
00019CB8                            
00019CB8                            Obj76_Loop:
00019CB8 4EB9 0000 E052             		jsr	SingleObjLoad
00019CBE 6600                       		bne.s	Obj76_ExitLoop
00019CC0                            
00019CC0                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CC0 12BC 0076                  		move.b	#$76,(a1)
00019CC4 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019CCC 337C 4000 0002             		move.w	#$4000,2(a1)
00019CD2 137C 0004 0001             		move.b	#4,1(a1)
00019CD8 137C 0010 0019             		move.b	#$10,$19(a1)
00019CDE 137C 0010 0016             		move.b	#$10,$16(a1)
00019CE4 137C 0003 0018             		move.b	#3,$18(a1)
00019CEA 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CEE 337C 0582 000C             		move.w	#$582,$C(a1)
00019CF4 3344 0028                  		move.w	d4,$28(a1)
00019CF8 0644 0101                  		addi.w	#$101,d4
00019CFC 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019D00 5429 0024                  		addq.b	#2,$24(a1)
00019D04 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019D08                            
00019D08                            Obj76_ExitLoop:
00019D08 4E75                       		rts	
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            Obj76_Action:				; XREF: Obj76_Index
00019D0A 1028 0029                  		move.b	$29(a0),d0
00019D0E B028 0028                  		cmp.b	$28(a0),d0
00019D12 6700                       		beq.s	Obj76_Solid
00019D14 4A00                       		tst.b	d0
00019D16 6B00                       		bmi.s	loc_19718
00019D18                            
00019D18                            loc_19712:
00019D18 6100 0000                  		bsr.w	Obj76_Break
00019D1C 6000                       		bra.s	Obj76_Display
00019D1E                            ; ===========================================================================
00019D1E                            
00019D1E                            loc_19718:
00019D1E 2268 0034                  		movea.l	$34(a0),a1
00019D22 4A29 0021                  		tst.b	$21(a1)
00019D26 67F0                       		beq.s	loc_19712
00019D28 3169 0008 0008             		move.w	8(a1),8(a0)
00019D2E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D34 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D3A B2C8                       		cmpa.w	a0,a1
00019D3C 6500                       		bcs.s	Obj76_Display
00019D3E 3029 0012                  		move.w	$12(a1),d0
00019D42 48C0                       		ext.l	d0
00019D44 E080                       		asr.l	#8,d0
00019D46 D168 000C                  		add.w	d0,$C(a0)
00019D4A 6000                       		bra.s	Obj76_Display
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            Obj76_Solid:				; XREF: Obj76_Action
00019D4C 323C 001B                  		move.w	#$1B,d1
00019D50 343C 0010                  		move.w	#$10,d2
00019D54 363C 0011                  		move.w	#$11,d3
00019D58 3828 0008                  		move.w	8(a0),d4
00019D5C 4EB9 0000 FF9C             		jsr	SolidObject
00019D62                            
00019D62                            Obj76_Display:				; XREF: Obj76_Action
00019D62 4EF9 0000 DBCC             		jmp	DisplaySprite
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_19762:				; XREF: Obj76_Index
00019D68 4A28 0001                  		tst.b	1(a0)
00019D6C 6A00                       		bpl.s	Obj76_Delete
00019D6E 4EB9 0000 DB7A             		jsr	ObjectFall
00019D74 4EF9 0000 DBCC             		jmp	DisplaySprite
00019D7A                            ; ===========================================================================
00019D7A                            
00019D7A                            Obj76_Delete:
00019D7A 4EF9 0000 DC08             		jmp	DeleteObject
00019D80                            
00019D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D80                            
00019D80                            
00019D80                            Obj76_Break:				; XREF: Obj76_Action
00019D80 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D84 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D88 7801                       		moveq	#1,d4
00019D8A 7203                       		moveq	#3,d1
00019D8C 7438                       		moveq	#$38,d2
00019D8E 5428 0024                  		addq.b	#2,$24(a0)
00019D92 117C 0008 0019             		move.b	#8,$19(a0)
00019D98 117C 0008 0016             		move.b	#8,$16(a0)
00019D9E 43D0                       		lea	(a0),a1
00019DA0 6000                       		bra.s	Obj76_MakeFrag
00019DA2                            ; ===========================================================================
00019DA2                            
00019DA2                            Obj76_LoopFrag:
00019DA2 4EB9 0000 E068             		jsr	SingleObjLoad2
00019DA8 6600                       		bne.s	loc_197D4
00019DAA                            
00019DAA                            Obj76_MakeFrag:
00019DAA 45D0                       		lea	(a0),a2
00019DAC 47D1                       		lea	(a1),a3
00019DAE 7603                       		moveq	#3,d3
00019DB0                            
00019DB0                            loc_197AA:
00019DB0 26DA                       		move.l	(a2)+,(a3)+
00019DB2 26DA                       		move.l	(a2)+,(a3)+
00019DB4 26DA                       		move.l	(a2)+,(a3)+
00019DB6 26DA                       		move.l	(a2)+,(a3)+
00019DB8 51CB FFF6                  		dbf	d3,loc_197AA
00019DBC                            
00019DBC 335C 0010                  		move.w	(a4)+,$10(a1)
00019DC0 335C 0012                  		move.w	(a4)+,$12(a1)
00019DC4 361D                       		move.w	(a5)+,d3
00019DC6 D769 0008                  		add.w	d3,8(a1)
00019DCA 361D                       		move.w	(a5)+,d3
00019DCC D769 000C                  		add.w	d3,$C(a1)
00019DD0 1344 001A                  		move.b	d4,$1A(a1)
00019DD4 5244                       		addq.w	#1,d4
00019DD6 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019DDA                            
00019DDA                            loc_197D4:
00019DDA 303C 00CB                  		move.w	#$CB,d0
00019DDE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DE4                            ; End of function Obj76_Break
00019DE4                            
00019DE4                            ; ===========================================================================
00019DE4 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DE8 0180 FE00                  		dc.w $180, $FE00
00019DEC FF00 FF00                  		dc.w $FF00, $FF00
00019DF0 0100 FF00                  		dc.w $100, $FF00
00019DF4 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DF8 0010 0000                  		dc.w $10, 0
00019DFC 0000 0010                  		dc.w 0,	$10
00019E00 0010 0010                  		dc.w $10, $10
00019E04                            ; ---------------------------------------------------------------------------
00019E04                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019E04                            ; ---------------------------------------------------------------------------
00019E04                            Map_obj76:
00019E04                            	include "_maps\obj76.asm"
00019E04                            ; ---------------------------------------------------------------------------
00019E04                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019E04                            ; ---------------------------------------------------------------------------
00019E04 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019E08 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019E0C 0000                       		dc.w byte_19826-Map_obj76
00019E0E 02                         byte_19808:	dc.b 2
00019E0F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019E14 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019E19 00                         		dc.b 0
00019E1A 01                         byte_19814:	dc.b 1
00019E1B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E20 01                         byte_1981A:	dc.b 1
00019E21 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E26 01                         byte_19820:	dc.b 1
00019E27 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E2C 01                         byte_19826:	dc.b 1
00019E2D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E32                            		even
00019E32                            		even
00019E32                            
00019E32                            ; ===========================================================================
00019E32                            
00019E32                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E32 4EF9 0000 DC08             		jmp	DeleteObject
00019E38                            ; ===========================================================================
00019E38                            ; ---------------------------------------------------------------------------
00019E38                            ; Object 82 - Eggman (SBZ2)
00019E38                            ; ---------------------------------------------------------------------------
00019E38                            
00019E38                            Obj82:					; XREF: Obj_Index
00019E38 7000                       		moveq	#0,d0
00019E3A 1028 0024                  		move.b	$24(a0),d0
00019E3E 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E42 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E46                            ; ===========================================================================
00019E46 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E48 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E4A 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E4C                            
00019E4C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E4F 0400 03                    		dc.b 4,	0, 3
00019E52                            ; ===========================================================================
00019E52                            
00019E52                            Obj82_Main:				; XREF: Obj82_Index
00019E52 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E56 317C 2160 0008             		move.w	#$2160,8(a0)
00019E5C 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E62 117C 000F 0020             		move.b	#$F,$20(a0)
00019E68 117C 0010 0021             		move.b	#$10,$21(a0)
00019E6E 08A8 0000 0022             		bclr	#0,$22(a0)
00019E74 4228 0025                  		clr.b	$25(a0)
00019E78 115A 0024                  		move.b	(a2)+,$24(a0)
00019E7C 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E80 115A 0018                  		move.b	(a2)+,$18(a0)
00019E84 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E8C 317C 0400 0002             		move.w	#$400,2(a0)
00019E92 117C 0004 0001             		move.b	#4,1(a0)
00019E98 08E8 0007 0001             		bset	#7,1(a0)
00019E9E 117C 0020 0019             		move.b	#$20,$19(a0)
00019EA4 4EB9 0000 E068             		jsr	SingleObjLoad2
00019EAA 6600                       		bne.s	Obj82_Eggman
00019EAC 2348 0034                  		move.l	a0,$34(a1)
00019EB0 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019EB4 337C 2130 0008             		move.w	#$2130,8(a1)
00019EBA 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EC0 4228 0025                  		clr.b	$25(a0)
00019EC4 135A 0024                  		move.b	(a2)+,$24(a1)
00019EC8 135A 001C                  		move.b	(a2)+,$1C(a1)
00019ECC 135A 0018                  		move.b	(a2)+,$18(a1)
00019ED0 237C 0000 C3C0 0004        		move.l	#Map_obj32,4(a1)
00019ED8 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019EDE 137C 0004 0001             		move.b	#4,1(a1)
00019EE4 08E9 0007 0001             		bset	#7,1(a1)
00019EEA 137C 0010 0019             		move.b	#$10,$19(a1)
00019EF0 137C 0000 001A             		move.b	#0,$1A(a1)
00019EF6                            
00019EF6                            Obj82_Eggman:				; XREF: Obj82_Index
00019EF6 7000                       		moveq	#0,d0
00019EF8 1028 0025                  		move.b	$25(a0),d0
00019EFC 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019F00 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019F04 43FA 0000                  		lea	Ani_obj82(pc),a1
00019F08 4EB9 0000 ACA2             		jsr	AnimateSprite
00019F0E 4EF9 0000 DBCC             		jmp	DisplaySprite
00019F14                            ; ===========================================================================
00019F14 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019F16 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019F18 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F1A 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F1C                            ; ===========================================================================
00019F1C                            
00019F1C                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F1C 3028 0008                  		move.w	8(a0),d0
00019F20 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F24 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F28 6400                       		bcc.s	loc_19934	; if not, branch
00019F2A 5428 0025                  		addq.b	#2,$25(a0)
00019F2E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F34 117C 0001 001C             		move.b	#1,$1C(a0)
00019F3A                            
00019F3A                            loc_19934:				; XREF: Obj82_EggIndex
00019F3A 4EF9 0000 DBA6             		jmp	SpeedToPos
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F40 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F44 6600                       		bne.s	loc_19954	; if time remains, branch
00019F46 5428 0025                  		addq.b	#2,$25(a0)
00019F4A 117C 0002 001C             		move.b	#2,$1C(a0)
00019F50 5868 000C                  		addq.w	#4,$C(a0)
00019F54 317C 000F 003C             		move.w	#15,$3C(a0)
00019F5A                            
00019F5A                            loc_19954:
00019F5A 60DE                       		bra.s	loc_19934
00019F5C                            ; ===========================================================================
00019F5C                            
00019F5C                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F5C 5368 003C                  		subq.w	#1,$3C(a0)
00019F60 6E00                       		bgt.s	loc_199D0
00019F62 6600                       		bne.s	loc_1996A
00019F64 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F6A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F70                            
00019F70                            loc_1996A:
00019F70 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F76 6E00                       		bgt.s	loc_19976
00019F78 4268 0010                  		clr.w	$10(a0)
00019F7C                            
00019F7C                            loc_19976:
00019F7C 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F82 4A68 0012                  		tst.w	$12(a0)
00019F86 6B00                       		bmi.s	Obj82_FindBlocks
00019F88 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F8E 6500                       		bcs.s	Obj82_FindBlocks
00019F90 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F96 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F9C 6500                       		bcs.s	Obj82_FindBlocks
00019F9E 317C 059B 000C             		move.w	#$59B,$C(a0)
00019FA4 4268 0012                  		clr.w	$12(a0)
00019FA8                            
00019FA8                            Obj82_FindBlocks:
00019FA8 3028 0010                  		move.w	$10(a0),d0
00019FAC 8068 0012                  		or.w	$12(a0),d0
00019FB0 6600                       		bne.s	loc_199D0
00019FB2 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019FB6 703E                       		moveq	#$3E,d0
00019FB8 7240                       		moveq	#$40,d1
00019FBA                            
00019FBA                            Obj82_FindLoop:	
00019FBA D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FBC 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FC0 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FC4                            
00019FC4 6600                       		bne.s	loc_199D0
00019FC6 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019FCC 5428 0025                  		addq.b	#2,$25(a0)
00019FD0 117C 0001 001C             		move.b	#1,$1C(a0)
00019FD6                            
00019FD6                            loc_199D0:
00019FD6 6000 FF62                  		bra.w	loc_19934
00019FDA                            ; ===========================================================================
00019FDA                            
00019FDA                            Obj82_Switch:				; XREF: Obj82_Index
00019FDA 7000                       		moveq	#0,d0
00019FDC 1028 0025                  		move.b	$25(a0),d0
00019FE0 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FE4 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FE8                            ; ===========================================================================
00019FE8 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FEA 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FEC                            ; ===========================================================================
00019FEC                            
00019FEC                            loc_199E6:				; XREF: Obj82_SwIndex
00019FEC 2268 0034                  		movea.l	$34(a0),a1
00019FF0 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FF6 6600                       		bne.s	Obj82_SwDisplay
00019FF8 117C 0001 001A             		move.b	#1,$1A(a0)
00019FFE 5428 0025                  		addq.b	#2,$25(a0)
0001A002                            
0001A002                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A002 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A008                            ; ===========================================================================
0001A008                            Ani_obj82:
0001A008                            	include "_anim\obj82.asm"
0001A008                            ; ---------------------------------------------------------------------------
0001A008                            ; Animation script - Eggman (SBZ2)
0001A008                            ; ---------------------------------------------------------------------------
0001A008 0000                       		dc.w byte_19A10-Ani_obj82
0001A00A 0000                       		dc.w byte_19A14-Ani_obj82
0001A00C 0000                       		dc.w byte_19A18-Ani_obj82
0001A00E 0000                       		dc.w byte_19A20-Ani_obj82
0001A010 0000                       		dc.w byte_19A24-Ani_obj82
0001A012 0000                       		dc.w byte_19A2A-Ani_obj82
0001A014 0000                       		dc.w byte_19A30-Ani_obj82
0001A016 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A01A 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A01E 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A026 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A02A 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A030 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A036 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A03A                            		even
0001A03A                            		even
0001A03A                            
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            ; Sprite mappings - Eggman (SBZ2)
0001A03A                            ; ---------------------------------------------------------------------------
0001A03A                            Map_obj82:
0001A03A                            	include "_maps\obj82.asm"
0001A03A                            ; ================================================================================
0001A03A                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A03A                            ; ================================================================================
0001A03A                            
0001A03A                            DATAA16Z12RYSAF:
0001A03A 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A03E 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A042 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A046 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A04A 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A04E 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A050 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A051 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A056 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A05B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A060 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A061 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A066 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A06B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A070 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A075 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A076 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A07B E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A080 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A085 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A08A 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A08B E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A090 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A095 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A09A 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A09B E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A0A0 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A0A5 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A0AA E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A0AF 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A0B0 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0B5 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0BA E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0BF 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0C4 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0C5 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0CA E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0CF 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A0D4 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A0D9 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0DE F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0E3 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0E8 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0E9 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0EE E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0F3 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0F8 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A0FD 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A0FE 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A103 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A108 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A10D 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A112 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A117 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A118 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A11D E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A122 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A127 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A12C E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A131 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A136 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A13B 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A140 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A141 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A146 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A14B EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A150                            	even
0001A150                            	even
0001A150                            
0001A150                            ; ===========================================================================
0001A150                            ; ---------------------------------------------------------------------------
0001A150                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A150                            ; ---------------------------------------------------------------------------
0001A150                            
0001A150                            Obj83:					; XREF: Obj_Index
0001A150 7000                       		moveq	#0,d0
0001A152 1028 0024                  		move.b	$24(a0),d0
0001A156 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A15A 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A15E                            ; ===========================================================================
0001A15E 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A160 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A162 0000                       		dc.w loc_19C36-Obj83_Index
0001A164 0000                       		dc.w loc_19C62-Obj83_Index
0001A166 0000                       		dc.w loc_19C72-Obj83_Index
0001A168 0000                       		dc.w loc_19C80-Obj83_Index
0001A16A                            ; ===========================================================================
0001A16A                            
0001A16A                            Obj83_Main:				; XREF: Obj83_Index
0001A16A 317C 2080 0008             		move.w	#$2080,8(a0)
0001A170 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A176 117C 0080 0019             		move.b	#$80,$19(a0)
0001A17C 117C 0010 0016             		move.b	#$10,$16(a0)
0001A182 117C 0004 0001             		move.b	#4,1(a0)
0001A188 08E8 0007 0001             		bset	#7,1(a0)
0001A18E 7800                       		moveq	#0,d4
0001A190 3A3C 2010                  		move.w	#$2010,d5
0001A194 7C07                       		moveq	#7,d6
0001A196 45E8 0030                  		lea	$30(a0),a2
0001A19A                            
0001A19A                            Obj83_MakeBlock:
0001A19A 4EB9 0000 E052             		jsr	SingleObjLoad
0001A1A0 6600                       		bne.s	Obj83_ExitMake
0001A1A2 34C9                       		move.w	a1,(a2)+
0001A1A4 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A1A8 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A1B0 337C 4518 0002             		move.w	#$4518,2(a1)
0001A1B6 137C 0004 0001             		move.b	#4,1(a1)
0001A1BC 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1C2 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1C8 137C 0003 0018             		move.b	#3,$18(a1)
0001A1CE 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A1D2 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A1D8 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1DC 137C 0008 0024             		move.b	#8,$24(a1)
0001A1E2 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1E6                            
0001A1E6                            Obj83_ExitMake:
0001A1E6 5428 0024                  		addq.b	#2,$24(a0)
0001A1EA 4E75                       		rts	
0001A1EC                            ; ===========================================================================
0001A1EC                            
0001A1EC                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1EC 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1F2 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1F4 4228 001A                  		clr.b	$1A(a0)
0001A1F8 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A1FC                            
0001A1FC                            Obj83_Solid:
0001A1FC 7000                       		moveq	#0,d0
0001A1FE 1028 001A                  		move.b	$1A(a0),d0
0001A202 4400                       		neg.b	d0
0001A204 4880                       		ext.w	d0
0001A206 5040                       		addq.w	#8,d0
0001A208 E940                       		asl.w	#4,d0
0001A20A 383C 2100                  		move.w	#$2100,d4
0001A20E 9840                       		sub.w	d0,d4
0001A210 1140 0019                  		move.b	d0,$19(a0)
0001A214 3144 0008                  		move.w	d4,8(a0)
0001A218 720B                       		moveq	#$B,d1
0001A21A D240                       		add.w	d0,d1
0001A21C 7410                       		moveq	#$10,d2
0001A21E 7611                       		moveq	#$11,d3
0001A220 4EF9 0000 FF9C             		jmp	SolidObject
0001A226                            ; ===========================================================================
0001A226                            
0001A226                            loc_19C36:				; XREF: Obj83_Index
0001A226 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A22C 6400                       		bcc.s	Obj83_Solid2
0001A22E 70FF                       		moveq	#-1,d0
0001A230 1028 001A                  		move.b	$1A(a0),d0
0001A234 4880                       		ext.w	d0
0001A236 D040                       		add.w	d0,d0
0001A238 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A23C 2240                       		movea.l	d0,a1
0001A23E 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A244 5228 001A                  		addq.b	#1,$1A(a0)
0001A248 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A24E 6700                       		beq.s	loc_19C62
0001A250                            
0001A250                            Obj83_Solid2:
0001A250 60AA                       		bra.s	Obj83_Solid
0001A252                            ; ===========================================================================
0001A252                            
0001A252                            loc_19C62:				; XREF: Obj83_Index
0001A252 08A8 0003 0022             		bclr	#3,$22(a0)
0001A258 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A25E 6000 FBD2                  		bra.w	loc_1982C
0001A262                            ; ===========================================================================
0001A262                            
0001A262                            loc_19C72:				; XREF: Obj83_Index
0001A262 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A268 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A26A 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A270                            ; ===========================================================================
0001A270                            
0001A270                            loc_19C80:				; XREF: Obj83_Index
0001A270 4A28 0001                  		tst.b	1(a0)
0001A274 6A00 FBBC                  		bpl.w	loc_1982C
0001A278 4EB9 0000 DB7A             		jsr	ObjectFall
0001A27E 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A284                            ; ===========================================================================
0001A284                            
0001A284                            Obj83_Break:				; XREF: loc_19C72
0001A284 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A288 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A28C 7801                       		moveq	#1,d4
0001A28E 7203                       		moveq	#3,d1
0001A290 7438                       		moveq	#$38,d2
0001A292 5428 0024                  		addq.b	#2,$24(a0)
0001A296 117C 0008 0019             		move.b	#8,$19(a0)
0001A29C 117C 0008 0016             		move.b	#8,$16(a0)
0001A2A2 43D0                       		lea	(a0),a1
0001A2A4 6000                       		bra.s	Obj83_MakeFrag
0001A2A6                            ; ===========================================================================
0001A2A6                            
0001A2A6                            Obj83_LoopFrag:
0001A2A6 4EB9 0000 E068             		jsr	SingleObjLoad2
0001A2AC 6600                       		bne.s	Obj83_BreakSnd
0001A2AE                            
0001A2AE                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A2AE 45D0                       		lea	(a0),a2
0001A2B0 47D1                       		lea	(a1),a3
0001A2B2 7603                       		moveq	#3,d3
0001A2B4                            
0001A2B4                            loc_19CC4:
0001A2B4 26DA                       		move.l	(a2)+,(a3)+
0001A2B6 26DA                       		move.l	(a2)+,(a3)+
0001A2B8 26DA                       		move.l	(a2)+,(a3)+
0001A2BA 26DA                       		move.l	(a2)+,(a3)+
0001A2BC 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2C0                            
0001A2C0 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2C4 361D                       		move.w	(a5)+,d3
0001A2C6 D769 0008                  		add.w	d3,8(a1)
0001A2CA 361D                       		move.w	(a5)+,d3
0001A2CC D769 000C                  		add.w	d3,$C(a1)
0001A2D0 1344 001A                  		move.b	d4,$1A(a1)
0001A2D4 5244                       		addq.w	#1,d4
0001A2D6 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A2DA                            
0001A2DA                            Obj83_BreakSnd:
0001A2DA 303C 00CB                  		move.w	#$CB,d0
0001A2DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2E4 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A2EA                            ; ===========================================================================
0001A2EA 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2EE 0120 00C0                  		dc.w $120, $C0
0001A2F2 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2F6 0010 0000                  		dc.w $10, 0
0001A2FA 0000 0010                  		dc.w 0,	$10
0001A2FE 0010 0010                  		dc.w $10, $10
0001A302                            ; ---------------------------------------------------------------------------
0001A302                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A302                            ; ---------------------------------------------------------------------------
0001A302                            Map_obj83:
0001A302                            	include "_maps\obj83.asm"
0001A302                            ; ---------------------------------------------------------------------------
0001A302                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A302                            ; ---------------------------------------------------------------------------
0001A302 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A306 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A30A 0000                       		dc.w byte_19D46-Map_obj83
0001A30C 01                         byte_19D1C:	dc.b 1
0001A30D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A312 02                         byte_19D22:	dc.b 2
0001A313 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A318 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A31D 00                         		dc.b 0
0001A31E 02                         byte_19D2E:	dc.b 2
0001A31F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A324 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A329 00                         		dc.b 0
0001A32A 02                         byte_19D3A:	dc.b 2
0001A32B F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A330 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A335 00                         		dc.b 0
0001A336 02                         byte_19D46:	dc.b 2
0001A337 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A33C F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A342 00                         		even
0001A342 00                         		even
0001A342                            
0001A342                            ; ===========================================================================
0001A342                            ; ---------------------------------------------------------------------------
0001A342                            ; Object 85 - Eggman (FZ)
0001A342                            ; ---------------------------------------------------------------------------
0001A342                            
0001A342                            Obj85_Delete:
0001A342 4EF9 0000 DC08             		jmp	DeleteObject
0001A348                            ; ===========================================================================
0001A348                            
0001A348                            Obj85:					; XREF: Obj_Index
0001A348 7000                       		moveq	#0,d0
0001A34A 1028 0024                  		move.b	$24(a0),d0
0001A34E 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A352 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A356                            ; ===========================================================================
0001A356 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A358 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A35A 0000                       		dc.w loc_1A38E-Obj85_Index
0001A35C 0000                       		dc.w loc_1A346-Obj85_Index
0001A35E 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A360 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A362 0000                       		dc.w loc_1A264-Obj85_Index
0001A364                            
0001A364 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A36A 0001 A03A                  		dc.l Map_obj82		; mappings pointer
0001A36E 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A374 0000 0000                  		dc.l Map_obj84
0001A378 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A37E 0000 0000                  		dc.l Map_FZBoss
0001A382 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A388 0001 A03A                  		dc.l Map_obj82
0001A38C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A392 0001 831C                  		dc.l Map_Eggman
0001A396 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A39C 0001 831C                  		dc.l Map_Eggman
0001A3A0                            
0001A3A0 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A3A5 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A3AA 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A3AF 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A3B4 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A3B9 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3BE                            ; ===========================================================================
0001A3BE                            
0001A3BE                            Obj85_Main:				; XREF: Obj85_Index
0001A3BE 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3C2 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3C6 2248                       		movea.l	a0,a1
0001A3C8 7205                       		moveq	#5,d1
0001A3CA 6000                       		bra.s	Obj85_LoadBoss
0001A3CC                            ; ===========================================================================
0001A3CC                            
0001A3CC                            Obj85_Loop:
0001A3CC 4EB9 0000 E068             		jsr	SingleObjLoad2
0001A3D2 6600                       		bne.s	loc_19E20
0001A3D4                            
0001A3D4                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A3D4 12BC 0085                  		move.b	#$85,(a1)
0001A3D8 335A 0008                  		move.w	(a2)+,8(a1)
0001A3DC 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3E0 335A 0002                  		move.w	(a2)+,2(a1)
0001A3E4 235A 0004                  		move.l	(a2)+,4(a1)
0001A3E8 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3EC 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3F0 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3F4 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3F8 135B 0016                  		move.b	(a3)+,$16(a1)
0001A3FC 137C 0004 0001             		move.b	#4,1(a1)
0001A402 08E8 0007 0001             		bset	#7,1(a0)
0001A408 2348 0034                  		move.l	a0,$34(a1)
0001A40C 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A410                            
0001A410                            loc_19E20:
0001A410 45E8 0036                  		lea	$36(a0),a2
0001A414 4EB9 0000 E052             		jsr	SingleObjLoad
0001A41A 6600                       		bne.s	loc_19E5A
0001A41C 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A420 3489                       		move.w	a1,(a2)
0001A422 2348 0034                  		move.l	a0,$34(a1)
0001A426 45E8 0038                  		lea	$38(a0),a2
0001A42A 7400                       		moveq	#0,d2
0001A42C 7203                       		moveq	#3,d1
0001A42E                            
0001A42E                            loc_19E3E:
0001A42E 4EB9 0000 E068             		jsr	SingleObjLoad2
0001A434 6600                       		bne.s	loc_19E5A
0001A436 34C9                       		move.w	a1,(a2)+
0001A438 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A43C 2348 0034                  		move.l	a0,$34(a1)
0001A440 1342 0028                  		move.b	d2,$28(a1)
0001A444 5442                       		addq.w	#2,d2
0001A446 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A44A                            
0001A44A                            loc_19E5A:
0001A44A 317C 0000 0034             		move.w	#0,$34(a0)
0001A450 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A456 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A45C                            
0001A45C                            Obj85_Eggman:				; XREF: Obj85_Index
0001A45C 7000                       		moveq	#0,d0
0001A45E 1028 0034                  		move.b	$34(a0),d0
0001A462 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A466 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A46A 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A470                            ; ===========================================================================
0001A470 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A474 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A478 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A47C 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A480                            ; ===========================================================================
0001A480                            
0001A480                            loc_19E90:				; XREF: off_19E80
0001A480 4AB8 F680                  		tst.l	($FFFFF680).w
0001A484 6600                       		bne.s	loc_19EA2
0001A486 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A48C 6500                       		bcs.s	loc_19EA2
0001A48E 5428 0034                  		addq.b	#2,$34(a0)
0001A492                            
0001A492                            loc_19EA2:
0001A492 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A496 4E75                       		rts	
0001A498                            ; ===========================================================================
0001A498                            
0001A498                            loc_19EA8:				; XREF: off_19E80
0001A498 4A68 0030                  		tst.w	$30(a0)
0001A49C 6A00                       		bpl.s	loc_19F10
0001A49E 4268 0030                  		clr.w	$30(a0)
0001A4A2 4EB9 0000 2C5C             		jsr	(RandomNumber).l
0001A4A8 0240 000C                  		andi.w	#$C,d0
0001A4AC 3200                       		move.w	d0,d1
0001A4AE 5441                       		addq.w	#2,d1
0001A4B0 4A80                       		tst.l	d0
0001A4B2 6A00                       		bpl.s	loc_19EC6
0001A4B4 C141                       		exg	d1,d0
0001A4B6                            
0001A4B6                            loc_19EC6:
0001A4B6 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4BA 3031 0000                  		move.w	(a1,d0.w),d0
0001A4BE 3231 1000                  		move.w	(a1,d1.w),d1
0001A4C2 3140 0030                  		move.w	d0,$30(a0)
0001A4C6 74FF                       		moveq	#-1,d2
0001A4C8 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A4CC 2242                       		movea.l	d2,a1
0001A4CE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A4D4 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A4DA 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4DE 2242                       		movea.l	d2,a1
0001A4E0 137C 0001 0029             		move.b	#1,$29(a1)
0001A4E6 337C 0000 0030             		move.w	#0,$30(a1)
0001A4EC 317C 0001 0032             		move.w	#1,$32(a0)
0001A4F2 4228 0035                  		clr.b	$35(a0)
0001A4F6 303C 00B7                  		move.w	#$B7,d0
0001A4FA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A500                            
0001A500                            loc_19F10:
0001A500 4A68 0032                  		tst.w	$32(a0)
0001A504 6B00 0000                  		bmi.w	loc_19FA6
0001A508 08A8 0000 0022             		bclr	#0,$22(a0)
0001A50E 3038 D008                  		move.w	($FFFFD008).w,d0
0001A512 9068 0008                  		sub.w	8(a0),d0
0001A516 6500                       		bcs.s	loc_19F2E
0001A518 08E8 0000 0022             		bset	#0,$22(a0)
0001A51E                            
0001A51E                            loc_19F2E:
0001A51E 323C 002B                  		move.w	#$2B,d1
0001A522 343C 0014                  		move.w	#$14,d2
0001A526 363C 0014                  		move.w	#$14,d3
0001A52A 3828 0008                  		move.w	8(a0),d4
0001A52E 4EB9 0000 FF9C             		jsr	SolidObject
0001A534 4A44                       		tst.w	d4
0001A536 6E00                       		bgt.s	loc_19F50
0001A538                            
0001A538                            loc_19F48:
0001A538 4A28 0035                  		tst.b	$35(a0)
0001A53C 6600                       		bne.s	loc_19F88
0001A53E 6000                       		bra.s	loc_19F96
0001A540                            ; ===========================================================================
0001A540                            
0001A540                            loc_19F50:
0001A540 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A544 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A54A 66EC                       		bne.s	loc_19F48
0001A54C 303C 0300                  		move.w	#$300,d0
0001A550 0828 0000 0022             		btst	#0,$22(a0)
0001A556 6600                       		bne.s	loc_19F6A
0001A558 4440                       		neg.w	d0
0001A55A                            
0001A55A                            loc_19F6A:
0001A55A 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A55E 4A28 0035                  		tst.b	$35(a0)
0001A562 6600                       		bne.s	loc_19F88
0001A564 5328 0021                  		subq.b	#1,$21(a0)
0001A568 117C 0064 0035             		move.b	#$64,$35(a0)
0001A56E 303C 00AC                  		move.w	#$AC,d0
0001A572 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A578                            
0001A578                            loc_19F88:
0001A578 5328 0035                  		subq.b	#1,$35(a0)
0001A57C 6700                       		beq.s	loc_19F96
0001A57E 117C 0003 001C             		move.b	#3,$1C(a0)
0001A584 6000                       		bra.s	loc_19F9C
0001A586                            ; ===========================================================================
0001A586                            
0001A586                            loc_19F96:
0001A586 117C 0001 001C             		move.b	#1,$1C(a0)
0001A58C                            
0001A58C                            loc_19F9C:
0001A58C 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A590 4EF9 0000 ACA2             		jmp	AnimateSprite
0001A596                            ; ===========================================================================
0001A596                            
0001A596                            loc_19FA6:
0001A596 4A28 0021                  		tst.b	$21(a0)
0001A59A 6700                       		beq.s	loc_19FBC
0001A59C 5428 0034                  		addq.b	#2,$34(a0)
0001A5A0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5A6 4268 0032                  		clr.w	$32(a0)
0001A5AA 4E75                       		rts	
0001A5AC                            ; ===========================================================================
0001A5AC                            
0001A5AC                            loc_19FBC:
0001A5AC 117C 0006 0034             		move.b	#6,$34(a0)
0001A5B2 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A5B8 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5BE 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5C4 4E75                       		rts	
0001A5C6                            ; ===========================================================================
0001A5C6 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A5D6                            ; ===========================================================================
0001A5D6                            
0001A5D6                            loc_19FE6:				; XREF: off_19E80
0001A5D6 70FF                       		moveq	#-1,d0
0001A5D8 3028 0036                  		move.w	$36(a0),d0
0001A5DC 2240                       		movea.l	d0,a1
0001A5DE 4A68 0030                  		tst.w	$30(a0)
0001A5E2 6A00                       		bpl.s	loc_1A000
0001A5E4 4268 0030                  		clr.w	$30(a0)
0001A5E8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5EE 6100                       		bsr.s	loc_1A020
0001A5F0                            
0001A5F0                            loc_1A000:
0001A5F0 700F                       		moveq	#$F,d0
0001A5F2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5F6 6600                       		bne.s	loc_1A00A
0001A5F8 6100                       		bsr.s	loc_1A020
0001A5FA                            
0001A5FA                            loc_1A00A:
0001A5FA 4A68 0032                  		tst.w	$32(a0)
0001A5FE 6700                       		beq.s	locret_1A01E
0001A600 5528 0034                  		subq.b	#2,$34(a0)
0001A604 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A60A 4268 0032                  		clr.w	$32(a0)
0001A60E                            
0001A60E                            locret_1A01E:
0001A60E 4E75                       		rts	
0001A610                            ; ===========================================================================
0001A610                            
0001A610                            loc_1A020:
0001A610 303C 00B1                  		move.w	#$B1,d0
0001A614 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A61A                            ; ===========================================================================
0001A61A                            
0001A61A                            loc_1A02A:				; XREF: off_19E80
0001A61A 117C 0030 0017             		move.b	#$30,$17(a0)
0001A620 08E8 0000 0022             		bset	#0,$22(a0)
0001A626 4EB9 0000 DBA6             		jsr	SpeedToPos
0001A62C 117C 0006 001A             		move.b	#6,$1A(a0)
0001A632 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A638 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A63E 6500                       		bcs.s	loc_1A070
0001A640 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A646 5428 0034                  		addq.b	#2,$34(a0)
0001A64A 117C 0020 0017             		move.b	#$20,$17(a0)
0001A650 317C 0100 0010             		move.w	#$100,$10(a0)
0001A656 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A65C 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A660                            
0001A660                            loc_1A070:
0001A660 6000 0000                  		bra.w	loc_1A166
0001A664                            ; ===========================================================================
0001A664                            
0001A664                            loc_1A074:				; XREF: off_19E80
0001A664 08E8 0000 0022             		bset	#0,$22(a0)
0001A66A 117C 0004 001C             		move.b	#4,$1C(a0)
0001A670 4EB9 0000 DBA6             		jsr	SpeedToPos
0001A676 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A67C 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A682 6500                       		bcs.s	loc_1A09A
0001A684 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A68A                            
0001A68A                            loc_1A09A:
0001A68A 317C 0400 0010             		move.w	#$400,$10(a0)
0001A690 3028 0008                  		move.w	8(a0),d0
0001A694 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A698 6A00                       		bpl.s	loc_1A0B4
0001A69A 317C 0500 0010             		move.w	#$500,$10(a0)
0001A6A0 6000 0000                  		bra.w	loc_1A0F2
0001A6A4                            ; ===========================================================================
0001A6A4                            
0001A6A4                            loc_1A0B4:
0001A6A4 0440 0070                  		subi.w	#$70,d0
0001A6A8 6500                       		bcs.s	loc_1A0F2
0001A6AA 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6B0 5140                       		subq.w	#8,d0
0001A6B2 6500                       		bcs.s	loc_1A0F2
0001A6B4 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6BA 5140                       		subq.w	#8,d0
0001A6BC 6500                       		bcs.s	loc_1A0F2
0001A6BE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6C4 5140                       		subq.w	#8,d0
0001A6C6 6500                       		bcs.s	loc_1A0F2
0001A6C8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6CE 5140                       		subq.w	#8,d0
0001A6D0 6500                       		bcs.s	loc_1A0F2
0001A6D2 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6D8 0440 0038                  		subi.w	#$38,d0
0001A6DC 6500                       		bcs.s	loc_1A0F2
0001A6DE 4268 0010                  		clr.w	$10(a0)
0001A6E2                            
0001A6E2                            loc_1A0F2:
0001A6E2 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6E8 6500                       		bcs.s	loc_1A110
0001A6EA 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6F0 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6F6 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A6FC 5428 0034                  		addq.b	#2,$34(a0)
0001A700                            
0001A700                            loc_1A110:
0001A700 6000                       		bra.s	loc_1A15C
0001A702                            ; ===========================================================================
0001A702                            
0001A702                            loc_1A112:				; XREF: off_19E80
0001A702 4EB9 0000 DBA6             		jsr	SpeedToPos
0001A708 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A70E 6500                       		bcs.s	loc_1A124
0001A710 4268 0010                  		clr.w	$10(a0)
0001A714                            
0001A714                            loc_1A124:
0001A714 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A71A 4A68 0012                  		tst.w	$12(a0)
0001A71E 6B00                       		bmi.s	loc_1A142
0001A720 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A726 6500                       		bcs.s	loc_1A142
0001A728 317C 0592 000C             		move.w	#$592,$C(a0)
0001A72E 4268 0012                  		clr.w	$12(a0)
0001A732                            
0001A732                            loc_1A142:
0001A732 3028 0010                  		move.w	$10(a0),d0
0001A736 8068 0012                  		or.w	$12(a0),d0
0001A73A 6600                       		bne.s	loc_1A15C
0001A73C 5428 0034                  		addq.b	#2,$34(a0)
0001A740 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A746 117C 0001 0021             		move.b	#1,$21(a0)
0001A74C                            
0001A74C                            loc_1A15C:
0001A74C 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A750 4EB9 0000 ACA2             		jsr	AnimateSprite
0001A756                            
0001A756                            loc_1A166:
0001A756 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A75C 6C00                       		bge.s	loc_1A172
0001A75E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A762                            
0001A762                            loc_1A172:
0001A762 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A768 6C00                       		bge.s	locret_1A190
0001A76A 323C 001B                  		move.w	#$1B,d1
0001A76E 343C 0070                  		move.w	#$70,d2
0001A772 363C 0071                  		move.w	#$71,d3
0001A776 3828 0008                  		move.w	8(a0),d4
0001A77A 4EF9 0000 FF9C             		jmp	SolidObject
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            locret_1A190:
0001A780 4E75                       		rts	
0001A782                            ; ===========================================================================
0001A782                            
0001A782                            loc_1A192:				; XREF: off_19E80
0001A782 217C 0001 831C 0004        		move.l	#Map_Eggman,4(a0)
0001A78A 317C 0400 0002             		move.w	#$400,2(a0)
0001A790 117C 0000 001C             		move.b	#0,$1C(a0)
0001A796 08E8 0000 0022             		bset	#0,$22(a0)
0001A79C 4EB9 0000 DBA6             		jsr	SpeedToPos
0001A7A2 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A7A8 6400                       		bcc.s	loc_1A1D0
0001A7AA 317C 0180 0010             		move.w	#$180,$10(a0)
0001A7B0 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A7B6 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7BC 5428 0034                  		addq.b	#2,$34(a0)
0001A7C0                            
0001A7C0                            loc_1A1D0:
0001A7C0 6000 FF8A                  		bra.w	loc_1A15C
0001A7C4                            ; ===========================================================================
0001A7C4                            
0001A7C4                            loc_1A1D4:				; XREF: off_19E80
0001A7C4 08E8 0000 0022             		bset	#0,$22(a0)
0001A7CA 4EB9 0000 DBA6             		jsr	SpeedToPos
0001A7D0 4A68 0030                  		tst.w	$30(a0)
0001A7D4 6600                       		bne.s	loc_1A1FC
0001A7D6 4A28 0020                  		tst.b	$20(a0)
0001A7DA 6600                       		bne.s	loc_1A216
0001A7DC 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7E2 303C 00AC                  		move.w	#$AC,d0
0001A7E6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7EC                            
0001A7EC                            loc_1A1FC:
0001A7EC 5368 0030                  		subq.w	#1,$30(a0)
0001A7F0 6600                       		bne.s	loc_1A216
0001A7F2 4A28 0022                  		tst.b	$22(a0)
0001A7F6 6A00                       		bpl.s	loc_1A210
0001A7F8 317C 0060 0012             		move.w	#$60,$12(a0)
0001A7FE 6000                       		bra.s	loc_1A216
0001A800                            ; ===========================================================================
0001A800                            
0001A800                            loc_1A210:
0001A800 117C 000F 0020             		move.b	#$F,$20(a0)
0001A806                            
0001A806                            loc_1A216:
0001A806 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A80C 6D00                       		blt.s	loc_1A23A
0001A80E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A814 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A81A 4278 D014                  		clr.w	($FFFFD014).w
0001A81E 4A68 0012                  		tst.w	$12(a0)
0001A822 6A00                       		bpl.s	loc_1A248
0001A824 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A82A                            
0001A82A                            loc_1A23A:
0001A82A 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A830 6D00                       		blt.s	loc_1A248
0001A832 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A838                            
0001A838                            loc_1A248:
0001A838 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A83E 6500                       		bcs.s	loc_1A260
0001A840 4A28 0001                  		tst.b	1(a0)
0001A844 6B00                       		bmi.s	loc_1A260
0001A846 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A84C 6000 FAF4                  		bra.w	Obj85_Delete
0001A850                            ; ===========================================================================
0001A850                            
0001A850                            loc_1A260:
0001A850 6000 FEFA                  		bra.w	loc_1A15C
0001A854                            ; ===========================================================================
0001A854                            
0001A854                            loc_1A264:				; XREF: Obj85_Index
0001A854 2268 0034                  		movea.l	$34(a0),a1
0001A858 1011                       		move.b	(a1),d0
0001A85A B010                       		cmp.b	(a0),d0
0001A85C 6600 FAE4                  		bne.w	Obj85_Delete
0001A860 117C 0007 001C             		move.b	#7,$1C(a0)
0001A866 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A86C 6C00                       		bge.s	loc_1A280
0001A86E 6000                       		bra.s	loc_1A2A6
0001A870                            ; ===========================================================================
0001A870                            
0001A870                            loc_1A280:
0001A870 4A69 0010                  		tst.w	$10(a1)
0001A874 6700                       		beq.s	loc_1A28C
0001A876 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A87C                            
0001A87C                            loc_1A28C:
0001A87C 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A880 4EB9 0000 ACA2             		jsr	AnimateSprite
0001A886                            
0001A886                            loc_1A296:
0001A886 2268 0034                  		movea.l	$34(a0),a1
0001A88A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A890 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A896                            
0001A896                            loc_1A2A6:
0001A896 2268 0034                  		movea.l	$34(a0),a1
0001A89A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A8A0 7003                       		moveq	#3,d0
0001A8A2 C028 0022                  		and.b	$22(a0),d0
0001A8A6 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A8AC 8128 0001                  		or.b	d0,1(a0)
0001A8B0 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A8B6                            ; ===========================================================================
0001A8B6                            
0001A8B6                            loc_1A2C6:				; XREF: Obj85_Index
0001A8B6 2268 0034                  		movea.l	$34(a0),a1
0001A8BA 1011                       		move.b	(a1),d0
0001A8BC B010                       		cmp.b	(a0),d0
0001A8BE 6600 FA82                  		bne.w	Obj85_Delete
0001A8C2 0CA9 0001 831C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8CA 6700                       		beq.s	loc_1A2E4
0001A8CC 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A8D2 60C2                       		bra.s	loc_1A2A6
0001A8D4                            ; ===========================================================================
0001A8D4                            
0001A8D4                            loc_1A2E4:
0001A8D4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8DA 4A29 0021                  		tst.b	$21(a1)
0001A8DE 6F00                       		ble.s	loc_1A312
0001A8E0 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8E6 217C 0001 831C 0004        		move.l	#Map_Eggman,4(a0)
0001A8EE 317C 0400 0002             		move.w	#$400,2(a0)
0001A8F4 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8F8 4EB9 0000 ACA2             		jsr	AnimateSprite
0001A8FE 6000 FF86                  		bra.w	loc_1A296
0001A902                            ; ===========================================================================
0001A902                            
0001A902                            loc_1A312:
0001A902 4A28 0001                  		tst.b	1(a0)
0001A906 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A90A 6100 D56E                  		bsr.w	BossDefeated
0001A90E 117C 0002 0018             		move.b	#2,$18(a0)
0001A914 117C 0000 001C             		move.b	#0,$1C(a0)
0001A91A 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A922 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A928 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A92C 4EB9 0000 ACA2             		jsr	AnimateSprite
0001A932 6000 FF52                  		bra.w	loc_1A296
0001A936                            ; ===========================================================================
0001A936                            
0001A936                            loc_1A346:				; XREF: Obj85_Index
0001A936 08E8 0000 0022             		bset	#0,$22(a0)
0001A93C 2268 0034                  		movea.l	$34(a0),a1
0001A940 0CA9 0001 831C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A948 6700                       		beq.s	loc_1A35E
0001A94A 6000 FF4A                  		bra.w	loc_1A2A6
0001A94E                            ; ===========================================================================
0001A94E                            
0001A94E                            loc_1A35E:
0001A94E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A954 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A95A 4A28 001E                  		tst.b	$1E(a0)
0001A95E 6600                       		bne.s	loc_1A376
0001A960 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A966                            
0001A966                            loc_1A376:
0001A966 5328 001E                  		subq.b	#1,$1E(a0)
0001A96A 6E00                       		bgt.s	loc_1A38A
0001A96C 5228 001A                  		addq.b	#1,$1A(a0)
0001A970 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A976 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A97A                            
0001A97A                            loc_1A38A:
0001A97A 6000 FF0A                  		bra.w	loc_1A296
0001A97E                            ; ===========================================================================
0001A97E                            
0001A97E                            loc_1A38E:				; XREF: Obj85_Index
0001A97E 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A984 3038 D008                  		move.w	($FFFFD008).w,d0
0001A988 9068 0008                  		sub.w	8(a0),d0
0001A98C 6500                       		bcs.s	loc_1A3A6
0001A98E 4A28 0001                  		tst.b	1(a0)
0001A992 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A996                            
0001A996                            loc_1A3A6:
0001A996 4EF9 0000 DBCC             		jmp	DisplaySprite
0001A99C                            ; ===========================================================================
0001A99C                            
0001A99C                            loc_1A3AC:				; XREF: Obj85_Index
0001A99C 117C 0000 001A             		move.b	#0,$1A(a0)
0001A9A2 08E8 0000 0022             		bset	#0,$22(a0)
0001A9A8 2268 0034                  		movea.l	$34(a0),a1
0001A9AC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A9B2 6600                       		bne.s	loc_1A3D0
0001A9B4 0CA9 0001 831C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9BC 6700 F984                  		beq.w	Obj85_Delete
0001A9C0                            
0001A9C0                            loc_1A3D0:
0001A9C0 6000 FED4                  		bra.w	loc_1A2A6
0001A9C4                            ; ===========================================================================
0001A9C4                            Ani_obj85:
0001A9C4                            	include "_anim\obj85.asm"
0001A9C4                            ; ---------------------------------------------------------------------------
0001A9C4                            ; Animation script - Eggman (FZ)
0001A9C4                            ; ---------------------------------------------------------------------------
0001A9C4 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9C6 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9CA                            		even
0001A9CA                            		even
0001A9CA                            
0001A9CA                            Map_Eggman2:
0001A9CA                            	include "_maps\Eggman2.asm"
0001A9CA                            ; ---------------------------------------------------------------------------
0001A9CA                            ; Sprite mappings - Eggman (FZ)
0001A9CA                            ; ---------------------------------------------------------------------------
0001A9CA 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A9CC 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A9CE 06                         byte_1A3DE:	dc.b 6
0001A9CF E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A9D4 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A9D9 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9DE FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9E3 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9E8 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9ED 06                         byte_1A3FD:	dc.b 6
0001A9EE E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9F3 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9F8 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9FD FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AA02 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AA07 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AA0C                            		even
0001AA0C                            		even
0001AA0C                            
0001AA0C                            Map_FZBoss:
0001AA0C                            	include "_maps\FZ boss.asm"
0001AA0C                            ; ---------------------------------------------------------------------------
0001AA0C                            ; Sprite mappings - boss (FZ)
0001AA0C                            ; ---------------------------------------------------------------------------
0001AA0C 0000                       		dc.w byte_1A422-Map_FZBoss
0001AA0E 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AA10 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AA12 02                         byte_1A422:	dc.b 2
0001AA13 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AA18 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA1D 03                         byte_1A42D:	dc.b 3
0001AA1E 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA23 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA28 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA2D 02                         byte_1A43D:	dc.b 2
0001AA2E 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA33 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA38                            		even
0001AA38                            		even
0001AA38                            
0001AA38                            ; ===========================================================================
0001AA38                            
0001AA38                            Obj84_Delete:
0001AA38 4EF9 0000 DC08             		jmp	DeleteObject
0001AA3E                            ; ===========================================================================
0001AA3E                            ; ---------------------------------------------------------------------------
0001AA3E                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA3E                            ; ---------------------------------------------------------------------------
0001AA3E                            
0001AA3E                            Obj84:					; XREF: Obj_Index
0001AA3E 7000                       		moveq	#0,d0
0001AA40 1028 0024                  		move.b	$24(a0),d0
0001AA44 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA48 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA4C                            ; ===========================================================================
0001AA4C 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA4E 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA50 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA52                            
0001AA52 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA56 2550 0620                  		dc.w $2550, $620
0001AA5A 2490 04C0                  		dc.w $2490, $4C0
0001AA5E 2510 04C0                  		dc.w $2510, $4C0
0001AA62                            ; ===========================================================================
0001AA62                            
0001AA62                            Obj84_Main:				; XREF: Obj84_Index
0001AA62 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA66 7000                       		moveq	#0,d0
0001AA68 1028 0028                  		move.b	$28(a0),d0
0001AA6C D040                       		add.w	d0,d0
0001AA6E D2C0                       		adda.w	d0,a1
0001AA70 117C 0004 0001             		move.b	#4,1(a0)
0001AA76 08E8 0007 0001             		bset	#7,1(a0)
0001AA7C 08E8 0004 0001             		bset	#4,1(a0)
0001AA82 317C 0300 0002             		move.w	#$300,2(a0)
0001AA88 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA90 3159 0008                  		move.w	(a1)+,8(a0)
0001AA94 3151 000C                  		move.w	(a1),$C(a0)
0001AA98 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA9C 117C 0020 0016             		move.b	#$20,$16(a0)
0001AAA2 117C 0060 0017             		move.b	#$60,$17(a0)
0001AAA8 117C 0020 0019             		move.b	#$20,$19(a0)
0001AAAE 117C 0060 0016             		move.b	#$60,$16(a0)
0001AAB4 117C 0003 0018             		move.b	#3,$18(a0)
0001AABA 5428 0024                  		addq.b	#2,$24(a0)
0001AABE                            
0001AABE                            loc_1A4CE:				; XREF: Obj84_Index
0001AABE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAC4 6F00                       		ble.s	loc_1A4DC
0001AAC6 08E8 0001 0001             		bset	#1,1(a0)
0001AACC                            
0001AACC                            loc_1A4DC:
0001AACC 42A8 003C                  		clr.l	$3C(a0)
0001AAD0 4A28 0029                  		tst.b	$29(a0)
0001AAD4 6700                       		beq.s	loc_1A4EA
0001AAD6 5428 0024                  		addq.b	#2,$24(a0)
0001AADA                            
0001AADA                            loc_1A4EA:
0001AADA 2028 003C                  		move.l	$3C(a0),d0
0001AADE 2228 0038                  		move.l	$38(a0),d1
0001AAE2 D280                       		add.l	d0,d1
0001AAE4 4841                       		swap	d1
0001AAE6 3141 000C                  		move.w	d1,$C(a0)
0001AAEA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AAF0 6600                       		bne.s	loc_1A524
0001AAF2 4A68 0030                  		tst.w	$30(a0)
0001AAF6 6A00                       		bpl.s	loc_1A524
0001AAF8 70F6                       		moveq	#-$A,d0
0001AAFA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AB00 6F00                       		ble.s	loc_1A514
0001AB02 700E                       		moveq	#$E,d0
0001AB04                            
0001AB04                            loc_1A514:
0001AB04 D240                       		add.w	d0,d1
0001AB06 2268 0034                  		movea.l	$34(a0),a1
0001AB0A 3341 000C                  		move.w	d1,$C(a1)
0001AB0E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB14                            
0001AB14                            loc_1A524:
0001AB14 323C 002B                  		move.w	#$2B,d1
0001AB18 343C 0060                  		move.w	#$60,d2
0001AB1C 363C 0061                  		move.w	#$61,d3
0001AB20 3828 0008                  		move.w	8(a0),d4
0001AB24 4EB9 0000 FF9C             		jsr	SolidObject
0001AB2A 7000                       		moveq	#0,d0
0001AB2C 3228 003C                  		move.w	$3C(a0),d1
0001AB30 6A00                       		bpl.s	loc_1A550
0001AB32 4441                       		neg.w	d1
0001AB34 5141                       		subq.w	#8,d1
0001AB36 6500                       		bcs.s	loc_1A55C
0001AB38 5200                       		addq.b	#1,d0
0001AB3A E841                       		asr.w	#4,d1
0001AB3C D041                       		add.w	d1,d0
0001AB3E 6000                       		bra.s	loc_1A55C
0001AB40                            ; ===========================================================================
0001AB40                            
0001AB40                            loc_1A550:
0001AB40 0441 0027                  		subi.w	#$27,d1
0001AB44 6500                       		bcs.s	loc_1A55C
0001AB46 5200                       		addq.b	#1,d0
0001AB48 E841                       		asr.w	#4,d1
0001AB4A D041                       		add.w	d1,d0
0001AB4C                            
0001AB4C                            loc_1A55C:
0001AB4C 1140 001A                  		move.b	d0,$1A(a0)
0001AB50 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB54 9068 0008                  		sub.w	8(a0),d0
0001AB58 6B00                       		bmi.s	loc_1A578
0001AB5A 0440 0140                  		subi.w	#$140,d0
0001AB5E 6B00                       		bmi.s	loc_1A578
0001AB60 4A28 0001                  		tst.b	1(a0)
0001AB64 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB68                            
0001AB68                            loc_1A578:
0001AB68 4EF9 0000 DBCC             		jmp	DisplaySprite
0001AB6E                            ; ===========================================================================
0001AB6E                            
0001AB6E                            loc_1A57E:				; XREF: Obj84_Index
0001AB6E 7000                       		moveq	#0,d0
0001AB70 1028 0028                  		move.b	$28(a0),d0
0001AB74 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB78 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB7C 6000 FF5C                  		bra.w	loc_1A4EA
0001AB80                            ; ===========================================================================
0001AB80 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB82 0000                       		dc.w loc_1A598-off_1A590
0001AB84 0000                       		dc.w loc_1A604-off_1A590
0001AB86 0000                       		dc.w loc_1A604-off_1A590
0001AB88                            ; ===========================================================================
0001AB88                            
0001AB88                            loc_1A598:				; XREF: off_1A590
0001AB88 4A28 0029                  		tst.b	$29(a0)
0001AB8C 6600                       		bne.s	loc_1A5D4
0001AB8E 2268 0034                  		movea.l	$34(a0),a1
0001AB92 4A29 0021                  		tst.b	$21(a1)
0001AB96 6600                       		bne.s	loc_1A5B4
0001AB98 6100 D2E0                  		bsr.w	BossDefeated
0001AB9C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ABA4                            
0001ABA4                            loc_1A5B4:
0001ABA4 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ABAC 6400                       		bcc.s	locret_1A602
0001ABAE 42A8 003C                  		clr.l	$3C(a0)
0001ABB2 2268 0034                  		movea.l	$34(a0),a1
0001ABB6 5369 0032                  		subq.w	#1,$32(a1)
0001ABBA 4269 0030                  		clr.w	$30(a1)
0001ABBE 5528 0024                  		subq.b	#2,$24(a0)
0001ABC2 4E75                       		rts	
0001ABC4                            ; ===========================================================================
0001ABC4                            
0001ABC4                            loc_1A5D4:
0001ABC4 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABCA 6C00                       		bge.s	loc_1A5E4
0001ABCC 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ABD4                            
0001ABD4                            loc_1A5E4:
0001ABD4 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABDC 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABE2 6E00                       		bgt.s	locret_1A602
0001ABE4 4268 003E                  		clr.w	$3E(a0)
0001ABE8 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABEE 4228 0029                  		clr.b	$29(a0)
0001ABF2                            
0001ABF2                            locret_1A602:
0001ABF2 4E75                       		rts	
0001ABF4                            ; ===========================================================================
0001ABF4                            
0001ABF4                            loc_1A604:				; XREF: off_1A590
0001ABF4 08E8 0001 0001             		bset	#1,1(a0)
0001ABFA 4A28 0029                  		tst.b	$29(a0)
0001ABFE 6600                       		bne.s	loc_1A646
0001AC00 2268 0034                  		movea.l	$34(a0),a1
0001AC04 4A29 0021                  		tst.b	$21(a1)
0001AC08 6600                       		bne.s	loc_1A626
0001AC0A 6100 D26E                  		bsr.w	BossDefeated
0001AC0E 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AC16                            
0001AC16                            loc_1A626:
0001AC16 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC1E 6400                       		bcc.s	locret_1A674
0001AC20 42A8 003C                  		clr.l	$3C(a0)
0001AC24 2268 0034                  		movea.l	$34(a0),a1
0001AC28 5369 0032                  		subq.w	#1,$32(a1)
0001AC2C 4269 0030                  		clr.w	$30(a1)
0001AC30 5528 0024                  		subq.b	#2,$24(a0)
0001AC34 4E75                       		rts	
0001AC36                            ; ===========================================================================
0001AC36                            
0001AC36                            loc_1A646:
0001AC36 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC3C 6D00                       		blt.s	loc_1A656
0001AC3E 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC46                            
0001AC46                            loc_1A656:
0001AC46 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC4E 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC54 6D00                       		blt.s	locret_1A674
0001AC56 4268 003E                  		clr.w	$3E(a0)
0001AC5A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC60 4228 0029                  		clr.b	$29(a0)
0001AC64                            
0001AC64                            locret_1A674:
0001AC64 4E75                       		rts	
0001AC66                            ; ===========================================================================
0001AC66                            ; ---------------------------------------------------------------------------
0001AC66                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC66                            ; ---------------------------------------------------------------------------
0001AC66                            Map_obj84:
0001AC66                            	include "_maps\obj84.asm"
0001AC66                            ; ---------------------------------------------------------------------------
0001AC66                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC66                            ; ---------------------------------------------------------------------------
0001AC66 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC6A 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC6E 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC72 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC76 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC7A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC7E 06                         byte_1A68E:	dc.b 6
0001AC7F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC84 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC89 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC8E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC93 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC98 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC9D 08                         byte_1A6AD:	dc.b 8
0001AC9E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACA3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACA8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACAD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACB2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACB7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACBC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACC1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACC6 0A                         byte_1A6D6:	dc.b $A
0001ACC7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACCC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACD1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACD6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACDB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACE0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACE5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACEA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACEF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACF4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACF9 0C                         byte_1A709:	dc.b $C
0001ACFA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACFF A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD04 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD09 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD0E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD13 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD18 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD1D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD22 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD27 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD2C 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD31 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD36 0D                         byte_1A746:	dc.b $D
0001AD37 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD3C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD41 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD46 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD4B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD50 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD55 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD5A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD5F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD64 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD69 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD6E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD73 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD78 0E                         byte_1A788:	dc.b $E
0001AD79 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD7E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD83 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD88 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD8D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD92 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD97 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD9C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADA1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ADA6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ADAB 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ADB0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADB5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADBA 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADBF 02                         byte_1A7CF:	dc.b 2
0001ADC0 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADC5 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADCA                            		even
0001ADCA                            		even
0001ADCA                            
0001ADCA                            ; ===========================================================================
0001ADCA                            ; ---------------------------------------------------------------------------
0001ADCA                            ; Object 86 - energy balls (FZ)
0001ADCA                            ; ---------------------------------------------------------------------------
0001ADCA                            
0001ADCA                            Obj86:					; XREF: Obj_Index
0001ADCA 7000                       		moveq	#0,d0
0001ADCC 1028 0024                  		move.b	$24(a0),d0
0001ADD0 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ADD4 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ADD8                            ; ===========================================================================
0001ADD8 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ADDA 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADDC 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADDE 0000                       		dc.w loc_1A962-Obj86_Index
0001ADE0 0000                       		dc.w loc_1A982-Obj86_Index
0001ADE2                            ; ===========================================================================
0001ADE2                            
0001ADE2                            Obj86_Main:				; XREF: Obj86_Index
0001ADE2 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADE8 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADEE 317C 0300 0002             		move.w	#$300,2(a0)
0001ADF4 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ADFC 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE02 117C 0003 0018             		move.b	#3,$18(a0)
0001AE08 117C 0008 0017             		move.b	#8,$17(a0)
0001AE0E 117C 0008 0016             		move.b	#8,$16(a0)
0001AE14 117C 0004 0001             		move.b	#4,1(a0)
0001AE1A 08E8 0007 0001             		bset	#7,1(a0)
0001AE20 5428 0024                  		addq.b	#2,$24(a0)
0001AE24                            
0001AE24                            Obj86_Generator:			; XREF: Obj86_Index
0001AE24 2268 0034                  		movea.l	$34(a0),a1
0001AE28 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE2E 6600                       		bne.s	loc_1A850
0001AE30 10BC 003F                  		move.b	#$3F,(a0)
0001AE34 117C 0000 0024             		move.b	#0,$24(a0)
0001AE3A 4EF9 0000 DBCC             		jmp	DisplaySprite
0001AE40                            ; ===========================================================================
0001AE40                            
0001AE40                            loc_1A850:
0001AE40 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE46 4A28 0029                  		tst.b	$29(a0)
0001AE4A 6700                       		beq.s	loc_1A86C
0001AE4C 5428 0024                  		addq.b	#2,$24(a0)
0001AE50 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE56 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE5C                            
0001AE5C                            loc_1A86C:
0001AE5C 323C 0013                  		move.w	#$13,d1
0001AE60 343C 0008                  		move.w	#8,d2
0001AE64 363C 0011                  		move.w	#$11,d3
0001AE68 3828 0008                  		move.w	8(a0),d4
0001AE6C 4EB9 0000 FF9C             		jsr	SolidObject
0001AE72 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE76 9068 0008                  		sub.w	8(a0),d0
0001AE7A 6B00                       		bmi.s	loc_1A89A
0001AE7C 0440 0140                  		subi.w	#$140,d0
0001AE80 6B00                       		bmi.s	loc_1A89A
0001AE82 4A28 0001                  		tst.b	1(a0)
0001AE86 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE8A                            
0001AE8A                            loc_1A89A:
0001AE8A 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE8E 4EB9 0000 ACA2             		jsr	AnimateSprite
0001AE94 4EF9 0000 DBCC             		jmp	DisplaySprite
0001AE9A                            ; ===========================================================================
0001AE9A                            
0001AE9A                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE9A 4A28 0029                  		tst.b	$29(a0)
0001AE9E 6700 0000                  		beq.w	loc_1A954
0001AEA2 4228 0029                  		clr.b	$29(a0)
0001AEA6 D068 0030                  		add.w	$30(a0),d0
0001AEAA 0240 001E                  		andi.w	#$1E,d0
0001AEAE D4C0                       		adda.w	d0,a2
0001AEB0 5868 0030                  		addq.w	#4,$30(a0)
0001AEB4 4268 0032                  		clr.w	$32(a0)
0001AEB8 7403                       		moveq	#3,d2
0001AEBA                            
0001AEBA                            Obj86_Loop:
0001AEBA 4EB9 0000 E068             		jsr	SingleObjLoad2
0001AEC0 6600 0000                  		bne.w	loc_1A954
0001AEC4 12BC 0086                  		move.b	#$86,(a1)
0001AEC8 3368 0008 0008             		move.w	8(a0),8(a1)
0001AECE 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AED4 137C 0008 0024             		move.b	#8,$24(a1)
0001AEDA 337C 2300 0002             		move.w	#$2300,2(a1)
0001AEE0 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AEE8 137C 000C 0016             		move.b	#$C,$16(a1)
0001AEEE 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEF4 137C 0000 0020             		move.b	#0,$20(a1)
0001AEFA 137C 0003 0018             		move.b	#3,$18(a1)
0001AF00 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AF06 137C 0004 0001             		move.b	#4,1(a1)
0001AF0C 08E9 0007 0001             		bset	#7,1(a1)
0001AF12 2348 0034                  		move.l	a0,$34(a1)
0001AF16 4EB9 0000 2C5C             		jsr	(RandomNumber).l
0001AF1C 3228 0032                  		move.w	$32(a0),d1
0001AF20 C3FC FFB1                  		muls.w	#-$4F,d1
0001AF24 0641 2578                  		addi.w	#$2578,d1
0001AF28 0240 001F                  		andi.w	#$1F,d0
0001AF2C 0440 0010                  		subi.w	#$10,d0
0001AF30 D041                       		add.w	d1,d0
0001AF32 3340 0030                  		move.w	d0,$30(a1)
0001AF36 5268 0032                  		addq.w	#1,$32(a0)
0001AF3A 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF40 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF44                            
0001AF44                            loc_1A954:
0001AF44 4A68 0032                  		tst.w	$32(a0)
0001AF48 6600                       		bne.s	loc_1A95E
0001AF4A 5428 0024                  		addq.b	#2,$24(a0)
0001AF4E                            
0001AF4E                            loc_1A95E:
0001AF4E 6000 FF0C                  		bra.w	loc_1A86C
0001AF52                            ; ===========================================================================
0001AF52                            
0001AF52                            loc_1A962:				; XREF: Obj86_Index
0001AF52 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF58 4A68 0038                  		tst.w	$38(a0)
0001AF5C 6600                       		bne.s	loc_1A97E
0001AF5E 117C 0002 0024             		move.b	#2,$24(a0)
0001AF64 2268 0034                  		movea.l	$34(a0),a1
0001AF68 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF6E                            
0001AF6E                            loc_1A97E:
0001AF6E 6000 FEEC                  		bra.w	loc_1A86C
0001AF72                            ; ===========================================================================
0001AF72                            
0001AF72                            loc_1A982:				; XREF: Obj86_Index
0001AF72 7000                       		moveq	#0,d0
0001AF74 1028 0025                  		move.b	$25(a0),d0
0001AF78 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF7C 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF80 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF84 4EB9 0000 ACA2             		jsr	AnimateSprite
0001AF8A 4EF9 0000 DBCC             		jmp	DisplaySprite
0001AF90                            ; ===========================================================================
0001AF90 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF92 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF94 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF96                            ; ===========================================================================
0001AF96                            
0001AF96                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF96 3028 0030                  		move.w	$30(a0),d0
0001AF9A 9068 0008                  		sub.w	8(a0),d0
0001AF9E E940                       		asl.w	#4,d0
0001AFA0 3140 0010                  		move.w	d0,$10(a0)
0001AFA4 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFAA 5428 0025                  		addq.b	#2,$25(a0)
0001AFAE 4E75                       		rts	
0001AFB0                            ; ===========================================================================
0001AFB0                            
0001AFB0                            loc_1A9C0:				; XREF: Obj86_Index2
0001AFB0 4A68 0010                  		tst.w	$10(a0)
0001AFB4 6700                       		beq.s	loc_1A9E6
0001AFB6 4EB9 0000 DBA6             		jsr	SpeedToPos
0001AFBC 3028 0008                  		move.w	8(a0),d0
0001AFC0 9068 0030                  		sub.w	$30(a0),d0
0001AFC4 6400                       		bcc.s	loc_1A9E6
0001AFC6 4268 0010                  		clr.w	$10(a0)
0001AFCA D168 0008                  		add.w	d0,8(a0)
0001AFCE 2268 0034                  		movea.l	$34(a0),a1
0001AFD2 5369 0032                  		subq.w	#1,$32(a1)
0001AFD6                            
0001AFD6                            loc_1A9E6:
0001AFD6 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFDC 5368 0028                  		subq.w	#1,$28(a0)
0001AFE0 6600                       		bne.s	locret_1AA1C
0001AFE2 5428 0025                  		addq.b	#2,$25(a0)
0001AFE6 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFEC 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFF2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFF8 7000                       		moveq	#0,d0
0001AFFA 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFFE 9068 0008                  		sub.w	8(a0),d0
0001B002 3140 0010                  		move.w	d0,$10(a0)
0001B006 317C 0140 0012             		move.w	#$140,$12(a0)
0001B00C                            
0001B00C                            locret_1AA1C:
0001B00C 4E75                       		rts	
0001B00E                            ; ===========================================================================
0001B00E                            
0001B00E                            loc_1AA1E:				; XREF: Obj86_Index2
0001B00E 4EB9 0000 DBA6             		jsr	SpeedToPos
0001B014 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B01A 6400                       		bcc.s	loc_1AA34
0001B01C 5368 0028                  		subq.w	#1,$28(a0)
0001B020 6700                       		beq.s	loc_1AA34
0001B022 4E75                       		rts	
0001B024                            ; ===========================================================================
0001B024                            
0001B024                            loc_1AA34:
0001B024 2268 0034                  		movea.l	$34(a0),a1
0001B028 5369 0038                  		subq.w	#1,$38(a1)
0001B02C 6000 FA0A                  		bra.w	Obj84_Delete
0001B030                            ; ===========================================================================
0001B030                            Ani_obj86:
0001B030                            	include "_anim\obj86.asm"
0001B030                            ; ---------------------------------------------------------------------------
0001B030                            ; Animation script - energy ball launcher (FZ)
0001B030                            ; ---------------------------------------------------------------------------
0001B030 0000                       		dc.w byte_1AA46-Ani_obj86
0001B032 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B034 0000                       		dc.w byte_1AA50-Ani_obj86
0001B036 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B03A 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B040 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B046                            		even
0001B046                            		even
0001B046                            
0001B046                            ; ---------------------------------------------------------------------------
0001B046                            ; Sprite mappings - energy ball	launcher (FZ)
0001B046                            ; ---------------------------------------------------------------------------
0001B046                            Map_obj86:
0001B046                            	include "_maps\obj86.asm"
0001B046                            ; ---------------------------------------------------------------------------
0001B046                            ; Sprite mappings - energy ball	launcher (FZ)
0001B046                            ; ---------------------------------------------------------------------------
0001B046 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B04A 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B04E 01                         byte_1AA5E:	dc.b 1
0001B04F F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B054 01                         byte_1AA64:	dc.b 1
0001B055 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B05A 01                         byte_1AA6A:	dc.b 1
0001B05B F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B060 01                         byte_1AA70:	dc.b 1
0001B061 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B066                            		even
0001B066                            		even
0001B066                            
0001B066                            Ani_obj86a:
0001B066                            	include "_anim\obj86a.asm"
0001B066                            ; ---------------------------------------------------------------------------
0001B066                            ; Animation script - energy balls (FZ)
0001B066                            ; ---------------------------------------------------------------------------
0001B066 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B068 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B06A 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B079 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B088 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B08C 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B096                            		even
0001B096                            		even
0001B096                            
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            ; Sprite mappings - energy balls (FZ)
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            Map_obj86a:
0001B096                            	include "_maps\obj86a.asm"
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            ; Sprite mappings - energy balls (FZ)
0001B096                            ; ---------------------------------------------------------------------------
0001B096 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B09A 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B09E 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B0A2 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B0A6 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B0AA 0000                       		dc.w byte_1AB20-Map_obj86a
0001B0AC 02                         byte_1AABC:	dc.b 2
0001B0AD F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B0B2 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B0B7 02                         byte_1AAC7:	dc.b 2
0001B0B8 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0BD F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0C2 02                         byte_1AAD2:	dc.b 2
0001B0C3 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0C8 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B0CD 02                         byte_1AADD:	dc.b 2
0001B0CE F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B0D3 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B0D8 02                         byte_1AAE8:	dc.b 2
0001B0D9 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0DE 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0E3 02                         byte_1AAF3:	dc.b 2
0001B0E4 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0E9 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0EE 01                         byte_1AAFE:	dc.b 1
0001B0EF F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0F4 01                         byte_1AB04:	dc.b 1
0001B0F5 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B0FA 02                         byte_1AB0A:	dc.b 2
0001B0FB F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B100 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B105 02                         byte_1AB15:	dc.b 2
0001B106 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B10B F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B110 00                         byte_1AB20:	dc.b 0
0001B112 00                         		even
0001B112 00                         		even
0001B112                            
0001B112                            ; ===========================================================================
0001B112                            ; ---------------------------------------------------------------------------
0001B112                            ; Object 3E - prison capsule
0001B112                            ; ---------------------------------------------------------------------------
0001B112                            
0001B112                            Obj3E:					; XREF: Obj_Index
0001B112 7000                       		moveq	#0,d0
0001B114 1028 0024                  		move.b	$24(a0),d0
0001B118 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B11C 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B120 3028 0008                  		move.w	8(a0),d0
0001B124 0240 FF80                  		andi.w	#$FF80,d0
0001B128 3238 F700                  		move.w	($FFFFF700).w,d1
0001B12C 0441 0080                  		subi.w	#$80,d1
0001B130 0241 FF80                  		andi.w	#$FF80,d1
0001B134 9041                       		sub.w	d1,d0
0001B136 0C40 0280                  		cmpi.w	#$280,d0
0001B13A 6200                       		bhi.s	Obj3E_Delete
0001B13C 4EF9 0000 DBCC             		jmp	DisplaySprite
0001B142                            ; ===========================================================================
0001B142                            
0001B142                            Obj3E_Delete:
0001B142 4EF9 0000 DC08             		jmp	DeleteObject
0001B148                            ; ===========================================================================
0001B148 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B14A 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B14C 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B14E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B150 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B152 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B154 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B156 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B158                            
0001B158 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B15C 040C 0501                  		dc.b 4,	$C, 5, 1
0001B160 0610 0403                  		dc.b 6,	$10, 4,	3
0001B164 0810 0305                  		dc.b 8,	$10, 3,	5
0001B168                            ; ===========================================================================
0001B168                            
0001B168                            Obj3E_Main:				; XREF: Obj3E_Index
0001B168 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B170 317C 049D 0002             		move.w	#$49D,2(a0)
0001B176 117C 0004 0001             		move.b	#4,1(a0)
0001B17C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B182 7000                       		moveq	#0,d0
0001B184 1028 0028                  		move.b	$28(a0),d0
0001B188 E548                       		lsl.w	#2,d0
0001B18A 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B18E 1159 0024                  		move.b	(a1)+,$24(a0)
0001B192 1159 0019                  		move.b	(a1)+,$19(a0)
0001B196 1159 0018                  		move.b	(a1)+,$18(a0)
0001B19A 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B19E 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B1A2 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B1A4 117C 0006 0020             		move.b	#6,$20(a0)
0001B1AA 117C 0008 0021             		move.b	#8,$21(a0)
0001B1B0                            
0001B1B0                            Obj3E_Not02:
0001B1B0 4E75                       		rts	
0001B1B2                            ; ===========================================================================
0001B1B2                            
0001B1B2                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B1B2 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B1B8 6700                       		beq.s	Obj3E_ChkOpened
0001B1BA 323C 002B                  		move.w	#$2B,d1
0001B1BE 343C 0018                  		move.w	#$18,d2
0001B1C2 363C 0018                  		move.w	#$18,d3
0001B1C6 3828 0008                  		move.w	8(a0),d4
0001B1CA 4EF9 0000 FF9C             		jmp	SolidObject
0001B1D0                            ; ===========================================================================
0001B1D0                            
0001B1D0                            Obj3E_ChkOpened:
0001B1D0 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B1D4 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B1D6 4228 0025                  		clr.b	$25(a0)
0001B1DA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1E0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1E6                            
0001B1E6                            Obj3E_DoOpen:
0001B1E6 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1EC 4E75                       		rts	
0001B1EE                            ; ===========================================================================
0001B1EE                            
0001B1EE                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1EE 323C 0017                  		move.w	#$17,d1
0001B1F2 343C 0008                  		move.w	#8,d2
0001B1F6 363C 0008                  		move.w	#8,d3
0001B1FA 3828 0008                  		move.w	8(a0),d4
0001B1FE 4EB9 0000 FF9C             		jsr	SolidObject
0001B204 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B20A 4EB9 0000 ACA2             		jsr	AnimateSprite
0001B210 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B216 4A28 0025                  		tst.b	$25(a0)
0001B21A 6700                       		beq.s	locret_1AC60
0001B21C 5068 000C                  		addq.w	#8,$C(a0)
0001B220 117C 000A 0024             		move.b	#$A,$24(a0)
0001B226 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B22C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B230 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B234 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B23A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B240 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B242 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B248 6000                       		bra.s	Obj3E_ContinueCode
0001B24A                            
0001B24A                            Obj3E_MoveLeft:
0001B24A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B250                            
0001B250                            Obj3E_ContinueCode:
0001B250 4228 0025                  		clr.b	$25(a0)
0001B254 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B25A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B260                            
0001B260                            locret_1AC60:
0001B260 4E75                       		rts	
0001B262                            ; ===========================================================================
0001B262                            
0001B262                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B262 7007                       		moveq	#7,d0
0001B264 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B268 6600                       		bne.s	loc_1ACA0
0001B26A 4EB9 0000 E052             		jsr	SingleObjLoad
0001B270 6600                       		bne.s	loc_1ACA0
0001B272 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B276 3368 0008 0008             		move.w	8(a0),8(a1)
0001B27C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B282 4EB9 0000 2C5C             		jsr	(RandomNumber).l
0001B288 7200                       		moveq	#0,d1
0001B28A 1200                       		move.b	d0,d1
0001B28C E409                       		lsr.b	#2,d1
0001B28E 0441 0020                  		subi.w	#$20,d1
0001B292 D369 0008                  		add.w	d1,8(a1)
0001B296 E048                       		lsr.w	#8,d0
0001B298 E608                       		lsr.b	#3,d0
0001B29A D169 000C                  		add.w	d0,$C(a1)
0001B29E                            
0001B29E                            loc_1ACA0:
0001B29E 5368 001E                  		subq.w	#1,$1E(a0)
0001B2A2 6700                       		beq.s	Obj3E_MakeAnimal
0001B2A4 4E75                       		rts	
0001B2A6                            ; ===========================================================================
0001B2A6                            
0001B2A6                            Obj3E_MakeAnimal:
0001B2A6 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B2AC 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B2B2 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2B8 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2BE 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2C4 7C07                       		moveq	#7,d6
0001B2C6 3A3C 009A                  		move.w	#$9A,d5
0001B2CA 78E4                       		moveq	#-$1C,d4
0001B2CC                            
0001B2CC                            Obj3E_Loop:
0001B2CC 4EB9 0000 E052             		jsr	SingleObjLoad
0001B2D2 6600                       		bne.s	locret_1ACF8
0001B2D4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2D8 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2E4 D969 0008                  		add.w	d4,8(a1)
0001B2E8 5E44                       		addq.w	#7,d4
0001B2EA 3345 0036                  		move.w	d5,$36(a1)
0001B2EE 5145                       		subq.w	#8,d5
0001B2F0 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2F4                            
0001B2F4                            locret_1ACF8:
0001B2F4 4E75                       		rts	
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2F6 7007                       		moveq	#7,d0
0001B2F8 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B2FC 6600                       		bne.s	loc_1AD38
0001B2FE 4EB9 0000 E052             		jsr	SingleObjLoad
0001B304 6600                       		bne.s	loc_1AD38
0001B306 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B30A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B310 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B316 4EB9 0000 2C5C             		jsr	(RandomNumber).l
0001B31C 0240 001F                  		andi.w	#$1F,d0
0001B320 5D40                       		subq.w	#6,d0
0001B322 4A41                       		tst.w	d1
0001B324 6A00                       		bpl.s	loc_1AD2E
0001B326 4440                       		neg.w	d0
0001B328                            
0001B328                            loc_1AD2E:
0001B328 D169 0008                  		add.w	d0,8(a1)
0001B32C 337C 000C 0036             		move.w	#$C,$36(a1)
0001B332                            
0001B332                            loc_1AD38:
0001B332 5368 001E                  		subq.w	#1,$1E(a0)
0001B336 6600                       		bne.s	locret_1AD48
0001B338 5428 0024                  		addq.b	#2,$24(a0)
0001B33C 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B342                            
0001B342                            locret_1AD48:
0001B342 4E75                       		rts	
0001B344                            ; ===========================================================================
0001B344                            
0001B344                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B344 703E                       		moveq	#$3E,d0
0001B346 7228                       		moveq	#$28,d1
0001B348 7440                       		moveq	#$40,d2
0001B34A 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B34E                            
0001B34E                            Obj3E_FindObj28:
0001B34E B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B350 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B352 D2C2                       		adda.w	d2,a1		; next object RAM
0001B354 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B358                            
0001B358 4EB9 0000 F258             		jsr	GotThroughAct
0001B35E 4EF9 0000 DC08             		jmp	DeleteObject
0001B364                            ; ===========================================================================
0001B364                            
0001B364                            Obj3E_Obj28Found:
0001B364 4E75                       		rts	
0001B366                            ; ===========================================================================
0001B366                            Ani_obj3E:
0001B366                            	include "_anim\obj3E.asm"
0001B366                            ; ---------------------------------------------------------------------------
0001B366                            ; Animation script - prison capsule
0001B366                            ; ---------------------------------------------------------------------------
0001B366 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B368 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B36A 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B36E                            		even
0001B36E                            		even
0001B36E                            
0001B36E                            ; ---------------------------------------------------------------------------
0001B36E                            ; Sprite mappings - prison capsule
0001B36E                            ; ---------------------------------------------------------------------------
0001B36E                            Map_obj3E:
0001B36E                            	include "_maps\obj3E.asm"
0001B36E                            ; ---------------------------------------------------------------------------
0001B36E                            ; Sprite mappings - prison capsule
0001B36E                            ; ---------------------------------------------------------------------------
0001B36E 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B372 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B376 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B37A 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B37C 07                         byte_1AD82:	dc.b 7
0001B37D E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B382 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B387 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B38C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B391 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B396 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B39B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3A0 01                         byte_1ADA6:	dc.b 1
0001B3A1 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B3A6 06                         byte_1ADAC:	dc.b 6
0001B3A7 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B3AC 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B3B1 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B3B6 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3BB 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3C0 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3C5 01                         byte_1ADCB:	dc.b 1
0001B3C6 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3CB 02                         byte_1ADD1:	dc.b 2
0001B3CC E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B3D1 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B3D6 01                         byte_1ADDC:	dc.b 1
0001B3D7 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3DC 00                         byte_1ADE2:	dc.b 0
0001B3DE 00                         		even
0001B3DE 00                         		even
0001B3DE                            
0001B3DE                            ; ---------------------------------------------------------------------------
0001B3DE                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3DE                            ; ---------------------------------------------------------------------------
0001B3DE                            
0001B3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3DE                            
0001B3DE                            
0001B3DE                            TouchResponse:				; XREF: Obj01
0001B3DE 4E71                       		nop	
0001B3E0 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3E4 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3E8 5142                       		subq.w	#8,d2
0001B3EA 7A00                       		moveq	#0,d5
0001B3EC 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3F0 5705                       		subq.b	#3,d5
0001B3F2 9645                       		sub.w	d5,d3
0001B3F4 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B3FA 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B3FC 0643 000C                  		addi.w	#$C,d3
0001B400 7A0A                       		moveq	#$A,d5
0001B402                            
0001B402                            Touch_NoDuck:
0001B402 383C 0010                  		move.w	#$10,d4
0001B406 DA45                       		add.w	d5,d5
0001B408 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B40C 3C3C 005F                  		move.w	#$5F,d6
0001B410                            
0001B410                            Touch_Loop:
0001B410 4A29 0001                  		tst.b	1(a1)
0001B414 6A00                       		bpl.s	Touch_NextObj
0001B416 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B41A 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B41C                            
0001B41C                            Touch_NextObj:
0001B41C 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B420 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B424                            
0001B424 7000                       		moveq	#0,d0
0001B426 4E75                       		rts	
0001B428                            ; ===========================================================================
0001B428 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B42A 0C14                       		dc.b   $C, $14
0001B42C 140C                       		dc.b  $14,  $C
0001B42E 0410                       		dc.b	4, $10
0001B430 0C12                       		dc.b   $C, $12
0001B432 1010                       		dc.b  $10, $10
0001B434 0606                       		dc.b	6,   6
0001B436 180C                       		dc.b  $18,  $C
0001B438 0C10                       		dc.b   $C, $10
0001B43A 100C                       		dc.b  $10,  $C
0001B43C 0808                       		dc.b	8,   8
0001B43E 1410                       		dc.b  $14, $10
0001B440 1408                       		dc.b  $14,   8
0001B442 0E0E                       		dc.b   $E,  $E
0001B444 1818                       		dc.b  $18, $18
0001B446 2810                       		dc.b  $28, $10
0001B448 1018                       		dc.b  $10, $18
0001B44A 0810                       		dc.b	8, $10
0001B44C 2070                       		dc.b  $20, $70
0001B44E 4020                       		dc.b  $40, $20
0001B450 8020                       		dc.b  $80, $20
0001B452 2020                       		dc.b  $20, $20
0001B454 0808                       		dc.b	8,   8
0001B456 0404                       		dc.b	4,   4
0001B458 2008                       		dc.b  $20,   8
0001B45A 0C0C                       		dc.b   $C,  $C
0001B45C 0804                       		dc.b	8,   4
0001B45E 1804                       		dc.b  $18,   4
0001B460 2804                       		dc.b  $28,   4
0001B462 0408                       		dc.b	4,   8
0001B464 0418                       		dc.b	4, $18
0001B466 0428                       		dc.b	4, $28
0001B468 0420                       		dc.b	4, $20
0001B46A 1818                       		dc.b  $18, $18
0001B46C 0C18                       		dc.b   $C, $18
0001B46E 4808                       		dc.b  $48,   8
0001B470                            ; ===========================================================================
0001B470                            
0001B470                            Touch_Height:				; XREF: TouchResponse
0001B470 0240 003F                  		andi.w	#$3F,d0
0001B474 D040                       		add.w	d0,d0
0001B476 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B47A 7200                       		moveq	#0,d1
0001B47C 121A                       		move.b	(a2)+,d1
0001B47E 3029 0008                  		move.w	8(a1),d0
0001B482 9041                       		sub.w	d1,d0
0001B484 9042                       		sub.w	d2,d0
0001B486 6400                       		bcc.s	loc_1AE98
0001B488 D241                       		add.w	d1,d1
0001B48A D041                       		add.w	d1,d0
0001B48C 6500                       		bcs.s	Touch_Width
0001B48E 6000 FF8C                  		bra.w	Touch_NextObj
0001B492                            ; ===========================================================================
0001B492                            
0001B492                            loc_1AE98:
0001B492 B044                       		cmp.w	d4,d0
0001B494 6200 FF86                  		bhi.w	Touch_NextObj
0001B498                            
0001B498                            Touch_Width:
0001B498 7200                       		moveq	#0,d1
0001B49A 121A                       		move.b	(a2)+,d1
0001B49C 3029 000C                  		move.w	$C(a1),d0
0001B4A0 9041                       		sub.w	d1,d0
0001B4A2 9043                       		sub.w	d3,d0
0001B4A4 6400                       		bcc.s	loc_1AEB6
0001B4A6 D241                       		add.w	d1,d1
0001B4A8 D240                       		add.w	d0,d1
0001B4AA 6500                       		bcs.s	Touch_ChkValue
0001B4AC 6000 FF6E                  		bra.w	Touch_NextObj
0001B4B0                            ; ===========================================================================
0001B4B0                            
0001B4B0                            loc_1AEB6:
0001B4B0 B045                       		cmp.w	d5,d0
0001B4B2 6200 FF68                  		bhi.w	Touch_NextObj
0001B4B6                            
0001B4B6                            Touch_ChkValue:
0001B4B6 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4BA 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4BE 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4C2 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4C6 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4CA 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B4CC 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B4D0                            
0001B4D0                            ; touch	response is $40-$7F
0001B4D0                            
0001B4D0 1029 0020                  		move.b	$20(a1),d0
0001B4D4 0200 003F                  		andi.b	#$3F,d0
0001B4D8 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4DC 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4DE 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4E4 6400 0000                  		bcc.w	locret_1AEF2
0001B4E8 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4EC                            
0001B4EC                            locret_1AEF2:
0001B4EC 4E75                       		rts	
0001B4EE                            ; ===========================================================================
0001B4EE                            
0001B4EE                            Touch_Monitor:
0001B4EE 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4F2 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4F4 3028 000C                  		move.w	$C(a0),d0
0001B4F8 0440 0010                  		subi.w	#$10,d0
0001B4FC B069 000C                  		cmp.w	$C(a1),d0
0001B500 6500                       		bcs.s	locret_1AF2E
0001B502 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B506 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B50C 4A29 0025                  		tst.b	$25(a1)
0001B510 6600                       		bne.s	locret_1AF2E
0001B512 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B516 4E75                       		rts	
0001B518                            ; ===========================================================================
0001B518                            
0001B518                            loc_1AF1E:
0001B518 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B51E 6600                       		bne.s	locret_1AF2E
0001B520 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B524 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B528                            
0001B528                            locret_1AF2E:
0001B528 4E75                       		rts	
0001B52A                            ; ===========================================================================
0001B52A                            
0001B52A                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B52A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B52E 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B530 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B536 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B53A                            
0001B53A                            loc_1AF40:
0001B53A 4A29 0021                  		tst.b	$21(a1)
0001B53E 6700                       		beq.s	Touch_KillEnemy
0001B540 4468 0010                  		neg.w	$10(a0)
0001B544 4468 0012                  		neg.w	$12(a0)
0001B548 E0E8 0010                  		asr	$10(a0)
0001B54C E0E8 0012                  		asr	$12(a0)
0001B550 137C 0000 0020             		move.b	#0,$20(a1)
0001B556 5329 0021                  		subq.b	#1,$21(a1)
0001B55A 6600                       		bne.s	locret_1AF68
0001B55C 08E9 0007 0022             		bset	#7,$22(a1)
0001B562                            
0001B562                            locret_1AF68:
0001B562 4E75                       		rts	
0001B564                            ; ===========================================================================
0001B564                            
0001B564                            Touch_KillEnemy:
0001B564 08E9 0007 0022             		bset	#7,$22(a1)
0001B56A 7000                       		moveq	#0,d0
0001B56C 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B570 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B574 0C40 0006                  		cmpi.w	#6,d0
0001B578 6500                       		bcs.s	loc_1AF82
0001B57A 7006                       		moveq	#6,d0
0001B57C                            
0001B57C                            loc_1AF82:
0001B57C 3340 003E                  		move.w	d0,$3E(a1)
0001B580 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B584 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B58A 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B58C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B590 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B596                            
0001B596                            loc_1AF9C:
0001B596 6100 0000                  		bsr.w	AddPoints
0001B59A 7400                       		moveq	#0,d2	; GMZ
0001B59C 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B59E 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B5A0                            
0001B5A0                            TouchKE_Explode:
0001B5A0 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B5A4 137C 0000 0024             		move.b	#0,$24(a1)
0001B5AA 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B5AE                            
0001B5AE                            TouchKE_NextExplosion:
0001B5AE 5802                       		addq.b	#4,d2
0001B5B0 4EB9 0000 E052             		jsr	SingleObjLoad
0001B5B6 6600                       		bne.s	TouchKE_NoExplosion
0001B5B8 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5BE 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5C4 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5C8                            
0001B5C8                            TouchKE_NoExplosion:
0001B5C8 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5CA 4A68 0012                  		tst.w	$12(a0)
0001B5CE 6B00                       		bmi.s	loc_1AFC2
0001B5D0 3028 000C                  		move.w	$C(a0),d0
0001B5D4 B069 000C                  		cmp.w	$C(a1),d0
0001B5D8 6400                       		bcc.s	loc_1AFCA
0001B5DA 4468 0012                  		neg.w	$12(a0)
0001B5DE 4E75                       		rts	
0001B5E0                            ; ===========================================================================
0001B5E0                            
0001B5E0                            loc_1AFC2:
0001B5E0 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5E6 4E75                       		rts	
0001B5E8                            ; ===========================================================================
0001B5E8                            
0001B5E8                            loc_1AFCA:
0001B5E8 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5EE 4E75                       		rts	
0001B5F0                            ; ===========================================================================
0001B5F0 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5F8                            ; ===========================================================================
0001B5F8                            
0001B5F8                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5F8 08E9 0007 0022             		bset	#7,$22(a1)
0001B5FE                            
0001B5FE                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B5FE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B602 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B604                            
0001B604                            loc_1AFE6:				; XREF: Touch_Hurt
0001B604 70FF                       		moveq	#-1,d0
0001B606 4E75                       		rts	
0001B608                            ; ===========================================================================
0001B608                            
0001B608                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B608 4E71                       		nop	
0001B60A 4A68 0030                  		tst.w	$30(a0)
0001B60E 66F4                       		bne.s	loc_1AFE6
0001B610 2449                       		movea.l	a1,a2
0001B612                            
0001B612                            ; End of function TouchResponse
0001B612                            ; continue straight to HurtSonic
0001B612                            
0001B612                            ; ---------------------------------------------------------------------------
0001B612                            ; Hurting Sonic	subroutine
0001B612                            ; ---------------------------------------------------------------------------
0001B612                            
0001B612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B612                            
0001B612                            
0001B612                            HurtSonic:
0001B612 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B616 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B618 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B61C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B620 4EB9 0000 E052             		jsr	SingleObjLoad
0001B626 6600                       		bne.s	Hurt_Shield
0001B628 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B62C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B632 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B638                            
0001B638                            Hurt_Shield:
0001B638 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B63E 117C 0004 0024             		move.b	#4,$24(a0)
0001B644 6100 8760                  		bsr.w	Sonic_ResetOnFloor
0001B648 08E8 0001 0022             		bset	#1,$22(a0)
0001B64E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B654 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B65A 0828 0006 0022             		btst	#6,$22(a0)
0001B660 6700                       		beq.s	Hurt_Reverse
0001B662 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B668 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B66E                            
0001B66E                            Hurt_Reverse:
0001B66E 3028 0008                  		move.w	8(a0),d0
0001B672 B06A 0008                  		cmp.w	8(a2),d0
0001B676 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B678 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B67C                            
0001B67C                            Hurt_ChkSpikes:
0001B67C 317C 0000 0014             		move.w	#0,$14(a0)
0001B682 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B688 317C 0078 0030             		move.w	#$78,$30(a0)
0001B68E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B692 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B696 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B698 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B69C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B69E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B6A2                            
0001B6A2                            Hurt_Sound:
0001B6A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6A8 70FF                       		moveq	#-1,d0
0001B6AA 4E75                       		rts	
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            Hurt_NoRings:
0001B6AC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B6B0 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B6B4                            ; End of function HurtSonic
0001B6B4                            
0001B6B4                            ; ---------------------------------------------------------------------------
0001B6B4                            ; Subroutine to	kill Sonic
0001B6B4                            ; ---------------------------------------------------------------------------
0001B6B4                            
0001B6B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6B4                            
0001B6B4                            
0001B6B4                            KillSonic:
0001B6B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B6B8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6BA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6C0 117C 0006 0024             		move.b	#6,$24(a0)
0001B6C6 6100 86DE                  		bsr.w	Sonic_ResetOnFloor
0001B6CA 08E8 0001 0022             		bset	#1,$22(a0)
0001B6D0 317C F900 0012             		move.w	#-$700,$12(a0)
0001B6D6 317C 0000 0010             		move.w	#0,$10(a0)
0001B6DC 317C 0000 0014             		move.w	#0,$14(a0)
0001B6E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6E8 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6EE 08E8 0007 0002             		bset	#7,2(a0)
0001B6F4 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6F8 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B6FC 6600                       		bne.s	Kill_Sound
0001B6FE 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B702                            
0001B702                            Kill_Sound:
0001B702 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B708                            
0001B708                            Kill_NoDeath:
0001B708 70FF                       		moveq	#-1,d0
0001B70A 4E75                       		rts	
0001B70C                            ; End of function KillSonic
0001B70C                            
0001B70C                            
0001B70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B70C                            
0001B70C                            
0001B70C                            Touch_Special:				; XREF: Touch_ChkValue
0001B70C 1229 0020                  		move.b	$20(a1),d1
0001B710 0201 003F                  		andi.b	#$3F,d1
0001B714 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B718 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B71A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B71E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B720 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B724 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B726 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B72A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B72C 4E75                       		rts	
0001B72E                            ; ===========================================================================
0001B72E                            
0001B72E                            Touch_CatKiller:			; XREF: Touch_Special
0001B72E 6000 FEC8                  		bra.w	loc_1AFDA
0001B732                            ; ===========================================================================
0001B732                            
0001B732                            Touch_Yadrin:				; XREF: Touch_Special
0001B732 9A40                       		sub.w	d0,d5
0001B734 0C45 0008                  		cmpi.w	#8,d5
0001B738 6400                       		bcc.s	loc_1B144
0001B73A 3029 0008                  		move.w	8(a1),d0
0001B73E 5940                       		subq.w	#4,d0
0001B740 0829 0000 0022             		btst	#0,$22(a1)
0001B746 6700                       		beq.s	loc_1B130
0001B748 0440 0010                  		subi.w	#$10,d0
0001B74C                            
0001B74C                            loc_1B130:
0001B74C 9042                       		sub.w	d2,d0
0001B74E 6400                       		bcc.s	loc_1B13C
0001B750 0640 0018                  		addi.w	#$18,d0
0001B754 6500                       		bcs.s	loc_1B140
0001B756 6000                       		bra.s	loc_1B144
0001B758                            ; ===========================================================================
0001B758                            
0001B758                            loc_1B13C:
0001B758 B044                       		cmp.w	d4,d0
0001B75A 6200                       		bhi.s	loc_1B144
0001B75C                            
0001B75C                            loc_1B140:
0001B75C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B760                            ; ===========================================================================
0001B760                            
0001B760                            loc_1B144:
0001B760 6000 FDC8                  		bra.w	Touch_Enemy
0001B764                            ; ===========================================================================
0001B764                            
0001B764                            Touch_D7orE1:				; XREF: Touch_Special
0001B764 5229 0021                  		addq.b	#1,$21(a1)
0001B768 4E75                       		rts	
0001B76A                            ; End of function Touch_Special
0001B76A                            
0001B76A                            ; ---------------------------------------------------------------------------
0001B76A                            ; Subroutine to	show the special stage layout
0001B76A                            ; ---------------------------------------------------------------------------
0001B76A                            
0001B76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B76A                            
0001B76A                            
0001B76A                            SS_ShowLayout:				; XREF: SpecialStage
0001B76A 6100 0000                  		bsr.w	SS_AniWallsRings
0001B76E 6100 0000                  		bsr.w	SS_AniItems
0001B772 3F05                       		move.w	d5,-(sp)
0001B774 43F8 8000                  		lea	($FFFF8000).w,a1
0001B778 1038 F780                  		move.b	($FFFFF780).w,d0
0001B77C 0200 00FC                  		andi.b	#$FC,d0
0001B780 4EB9 0000 2C82             		jsr	(CalcSine).l
0001B786 3800                       		move.w	d0,d4
0001B788 3A01                       		move.w	d1,d5
0001B78A C9FC 0018                  		muls.w	#$18,d4
0001B78E CBFC 0018                  		muls.w	#$18,d5
0001B792 7400                       		moveq	#0,d2
0001B794 3438 F700                  		move.w	($FFFFF700).w,d2
0001B798 84FC 0018                  		divu.w	#$18,d2
0001B79C 4842                       		swap	d2
0001B79E 4442                       		neg.w	d2
0001B7A0 0642 FF4C                  		addi.w	#-$B4,d2
0001B7A4 7600                       		moveq	#0,d3
0001B7A6 3638 F704                  		move.w	($FFFFF704).w,d3
0001B7AA 86FC 0018                  		divu.w	#$18,d3
0001B7AE 4843                       		swap	d3
0001B7B0 4443                       		neg.w	d3
0001B7B2 0643 FF4C                  		addi.w	#-$B4,d3
0001B7B6 3E3C 000F                  		move.w	#$F,d7
0001B7BA                            
0001B7BA                            loc_1B19E:
0001B7BA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7BE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7C2 4440                       		neg.w	d0
0001B7C4 C3C2                       		muls.w	d2,d1
0001B7C6 C1C3                       		muls.w	d3,d0
0001B7C8 2C00                       		move.l	d0,d6
0001B7CA DC81                       		add.l	d1,d6
0001B7CC 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B7D0 C1C2                       		muls.w	d2,d0
0001B7D2 C3C3                       		muls.w	d3,d1
0001B7D4 D280                       		add.l	d0,d1
0001B7D6 2406                       		move.l	d6,d2
0001B7D8 3C3C 000F                  		move.w	#$F,d6
0001B7DC                            
0001B7DC                            loc_1B1C0:
0001B7DC 2002                       		move.l	d2,d0
0001B7DE E080                       		asr.l	#8,d0
0001B7E0 32C0                       		move.w	d0,(a1)+
0001B7E2 2001                       		move.l	d1,d0
0001B7E4 E080                       		asr.l	#8,d0
0001B7E6 32C0                       		move.w	d0,(a1)+
0001B7E8 D485                       		add.l	d5,d2
0001B7EA D284                       		add.l	d4,d1
0001B7EC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7F0                            
0001B7F0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7F4 0643 0018                  		addi.w	#$18,d3
0001B7F8 51CF FFC0                  		dbf	d7,loc_1B19E
0001B7FC                            
0001B7FC 3A1F                       		move.w	(sp)+,d5
0001B7FE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B804 7000                       		moveq	#0,d0
0001B806 3038 F704                  		move.w	($FFFFF704).w,d0
0001B80A 80FC 0018                  		divu.w	#$18,d0
0001B80E C0FC 0080                  		mulu.w	#$80,d0
0001B812 D1C0                       		adda.l	d0,a0
0001B814 7000                       		moveq	#0,d0
0001B816 3038 F700                  		move.w	($FFFFF700).w,d0
0001B81A 80FC 0018                  		divu.w	#$18,d0
0001B81E D0C0                       		adda.w	d0,a0
0001B820 49F8 8000                  		lea	($FFFF8000).w,a4
0001B824 3E3C 000F                  		move.w	#$F,d7
0001B828                            
0001B828                            loc_1B20C:
0001B828 3C3C 000F                  		move.w	#$F,d6
0001B82C                            
0001B82C                            loc_1B210:
0001B82C 7000                       		moveq	#0,d0
0001B82E 1018                       		move.b	(a0)+,d0
0001B830 6700                       		beq.s	loc_1B268
0001B832 0C00 004E                  		cmpi.b	#$4E,d0
0001B836 6200                       		bhi.s	loc_1B268
0001B838 3614                       		move.w	(a4),d3
0001B83A 0643 0120                  		addi.w	#$120,d3
0001B83E 0C43 0070                  		cmpi.w	#$70,d3
0001B842 6500                       		bcs.s	loc_1B268
0001B844 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B848 6400                       		bcc.s	loc_1B268
0001B84A 342C 0002                  		move.w	2(a4),d2
0001B84E 0642 00F0                  		addi.w	#$F0,d2
0001B852 0C42 0070                  		cmpi.w	#$70,d2
0001B856 6500                       		bcs.s	loc_1B268
0001B858 0C42 0170                  		cmpi.w	#$170,d2
0001B85C 6400                       		bcc.s	loc_1B268
0001B85E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B864 E748                       		lsl.w	#3,d0
0001B866 4BF5 0000                  		lea	(a5,d0.w),a5
0001B86A 225D                       		movea.l	(a5)+,a1
0001B86C 321D                       		move.w	(a5)+,d1
0001B86E D241                       		add.w	d1,d1
0001B870 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B874 365D                       		movea.w	(a5)+,a3
0001B876 7200                       		moveq	#0,d1
0001B878 1219                       		move.b	(a1)+,d1
0001B87A 5301                       		subq.b	#1,d1
0001B87C 6B00                       		bmi.s	loc_1B268
0001B87E 4EB9 0000 DD2A             		jsr	sub_D762
0001B884                            
0001B884                            loc_1B268:
0001B884 584C                       		addq.w	#4,a4
0001B886 51CE FFA4                  		dbf	d6,loc_1B210
0001B88A                            
0001B88A 41E8 0070                  		lea	$70(a0),a0
0001B88E 51CF FF98                  		dbf	d7,loc_1B20C
0001B892                            
0001B892 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B896 0C05 0050                  		cmpi.b	#$50,d5
0001B89A 6700                       		beq.s	loc_1B288
0001B89C 24BC 0000 0000             		move.l	#0,(a2)
0001B8A2 4E75                       		rts	
0001B8A4                            ; ===========================================================================
0001B8A4                            
0001B8A4                            loc_1B288:
0001B8A4 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B8AA 4E75                       		rts	
0001B8AC                            ; End of function SS_ShowLayout
0001B8AC                            
0001B8AC                            ; ---------------------------------------------------------------------------
0001B8AC                            ; Subroutine to	animate	walls and rings	in the special stage
0001B8AC                            ; ---------------------------------------------------------------------------
0001B8AC                            
0001B8AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8AC                            
0001B8AC                            
0001B8AC                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B8AC 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B8B2 7000                       		moveq	#0,d0
0001B8B4 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8B8 E408                       		lsr.b	#2,d0
0001B8BA 0240 000F                  		andi.w	#$F,d0
0001B8BE 7223                       		moveq	#$23,d1
0001B8C0                            
0001B8C0                            loc_1B2A4:
0001B8C0 3280                       		move.w	d0,(a1)
0001B8C2 5049                       		addq.w	#8,a1
0001B8C4 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8C8                            
0001B8C8 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B8CE 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B8D2 6A00                       		bpl.s	loc_1B2C8
0001B8D4 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B8DA 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8DE 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8E4                            
0001B8E4                            loc_1B2C8:
0001B8E4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8EA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8EE 6A00                       		bpl.s	loc_1B2E4
0001B8F0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8F6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B8FA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B900                            
0001B900                            loc_1B2E4:
0001B900 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B904 1340 0138                  		move.b	d0,$138(a1)
0001B908 1340 0160                  		move.b	d0,$160(a1)
0001B90C 1340 0148                  		move.b	d0,$148(a1)
0001B910 1340 0150                  		move.b	d0,$150(a1)
0001B914 1340 01D8                  		move.b	d0,$1D8(a1)
0001B918 1340 01E0                  		move.b	d0,$1E0(a1)
0001B91C 1340 01E8                  		move.b	d0,$1E8(a1)
0001B920 1340 01F0                  		move.b	d0,$1F0(a1)
0001B924 1340 01F8                  		move.b	d0,$1F8(a1)
0001B928 1340 0200                  		move.b	d0,$200(a1)
0001B92C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B930 6A00                       		bpl.s	loc_1B326
0001B932 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B938 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B93C 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B942                            
0001B942                            loc_1B326:
0001B942 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B946 1340 0168                  		move.b	d0,$168(a1)
0001B94A 1340 0170                  		move.b	d0,$170(a1)
0001B94E 1340 0178                  		move.b	d0,$178(a1)
0001B952 1340 0180                  		move.b	d0,$180(a1)
0001B956 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B95A 6A00                       		bpl.s	loc_1B350
0001B95C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B962 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B966 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B96C                            
0001B96C                            loc_1B350:
0001B96C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B972 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B978 7000                       		moveq	#0,d0
0001B97A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B97E D040                       		add.w	d0,d0
0001B980 41F0 0000                  		lea	(a0,d0.w),a0
0001B984 3290                       		move.w	(a0),(a1)
0001B986 3368 0002 0008             		move.w	2(a0),8(a1)
0001B98C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B992 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B998 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B99E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9A4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9AA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9B0 D0FC 0020                  		adda.w	#$20,a0
0001B9B4 D2FC 0048                  		adda.w	#$48,a1
0001B9B8 3290                       		move.w	(a0),(a1)
0001B9BA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9C0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9C6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9CC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9D2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9D8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9DE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9E4 D0FC 0020                  		adda.w	#$20,a0
0001B9E8 D2FC 0048                  		adda.w	#$48,a1
0001B9EC 3290                       		move.w	(a0),(a1)
0001B9EE 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9F4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9FA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA00 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA06 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA0C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA12 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA18 D0FC 0020                  		adda.w	#$20,a0
0001BA1C D2FC 0048                  		adda.w	#$48,a1
0001BA20 3290                       		move.w	(a0),(a1)
0001BA22 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA28 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA2E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA34 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA3A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA40 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA46 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA4C D0FC 0020                  		adda.w	#$20,a0
0001BA50 D2FC 0048                  		adda.w	#$48,a1
0001BA54 4E75                       		rts	
0001BA56                            ; End of function SS_AniWallsRings
0001BA56                            
0001BA56                            ; ===========================================================================
0001BA56 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA66 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA76 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA86 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA96 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAA6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAB6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAC6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAD6                            ; ---------------------------------------------------------------------------
0001BAD6                            ; Subroutine to	remove items when you collect them in the special stage
0001BAD6                            ; ---------------------------------------------------------------------------
0001BAD6                            
0001BAD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAD6                            
0001BAD6                            
0001BAD6                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BAD6 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BADC 303C 001F                  		move.w	#$1F,d0
0001BAE0                            
0001BAE0                            loc_1B4C4:
0001BAE0 4A12                       		tst.b	(a2)
0001BAE2 6700                       		beq.s	locret_1B4CE
0001BAE4 504A                       		addq.w	#8,a2
0001BAE6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAEA                            
0001BAEA                            locret_1B4CE:
0001BAEA 4E75                       		rts	
0001BAEC                            ; End of function SS_RemoveCollectedItem
0001BAEC                            
0001BAEC                            ; ---------------------------------------------------------------------------
0001BAEC                            ; Subroutine to	animate	special	stage items when you touch them
0001BAEC                            ; ---------------------------------------------------------------------------
0001BAEC                            
0001BAEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAEC                            
0001BAEC                            
0001BAEC                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAEC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BAF2 3E3C 001F                  		move.w	#$1F,d7
0001BAF6                            
0001BAF6                            loc_1B4DA:
0001BAF6 7000                       		moveq	#0,d0
0001BAF8 1010                       		move.b	(a0),d0
0001BAFA 6700                       		beq.s	loc_1B4E8
0001BAFC E548                       		lsl.w	#2,d0
0001BAFE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BB02 4E91                       		jsr	(a1)
0001BB04                            
0001BB04                            loc_1B4E8:
0001BB04 5048                       		addq.w	#8,a0
0001BB06                            
0001BB06                            loc_1B4EA:
0001BB06 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BB0A                            
0001BB0A 4E75                       		rts	
0001BB0C                            ; End of function SS_AniItems
0001BB0C                            
0001BB0C                            ; ===========================================================================
0001BB0C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BB10 0000 0000                  		dc.l SS_AniBumper
0001BB14 0000 0000                  		dc.l SS_Ani1Up
0001BB18 0000 0000                  		dc.l SS_AniReverse
0001BB1C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB20 0000 0000                  		dc.l SS_AniGlassBlock
0001BB24                            ; ===========================================================================
0001BB24                            
0001BB24                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB24 5328 0002                  		subq.b	#1,2(a0)
0001BB28 6A00                       		bpl.s	locret_1B530
0001BB2A 117C 0005 0002             		move.b	#5,2(a0)
0001BB30 7000                       		moveq	#0,d0
0001BB32 1028 0003                  		move.b	3(a0),d0
0001BB36 5228 0003                  		addq.b	#1,3(a0)
0001BB3A 2268 0004                  		movea.l	4(a0),a1
0001BB3E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB42 1280                       		move.b	d0,(a1)
0001BB44 6600                       		bne.s	locret_1B530
0001BB46 4290                       		clr.l	(a0)
0001BB48 42A8 0004                  		clr.l	4(a0)
0001BB4C                            
0001BB4C                            locret_1B530:
0001BB4C 4E75                       		rts	
0001BB4E                            ; ===========================================================================
0001BB4E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB54                            ; ===========================================================================
0001BB54                            
0001BB54                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB54 5328 0002                  		subq.b	#1,2(a0)
0001BB58 6A00                       		bpl.s	locret_1B566
0001BB5A 117C 0007 0002             		move.b	#7,2(a0)
0001BB60 7000                       		moveq	#0,d0
0001BB62 1028 0003                  		move.b	3(a0),d0
0001BB66 5228 0003                  		addq.b	#1,3(a0)
0001BB6A 2268 0004                  		movea.l	4(a0),a1
0001BB6E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB72 6600                       		bne.s	loc_1B564
0001BB74 4290                       		clr.l	(a0)
0001BB76 42A8 0004                  		clr.l	4(a0)
0001BB7A 12BC 0025                  		move.b	#$25,(a1)
0001BB7E 4E75                       		rts	
0001BB80                            ; ===========================================================================
0001BB80                            
0001BB80                            loc_1B564:
0001BB80 1280                       		move.b	d0,(a1)
0001BB82                            
0001BB82                            locret_1B566:
0001BB82 4E75                       		rts	
0001BB84                            ; ===========================================================================
0001BB84 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB8A                            ; ===========================================================================
0001BB8A                            
0001BB8A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB8A 5328 0002                  		subq.b	#1,2(a0)
0001BB8E 6A00                       		bpl.s	locret_1B596
0001BB90 117C 0005 0002             		move.b	#5,2(a0)
0001BB96 7000                       		moveq	#0,d0
0001BB98 1028 0003                  		move.b	3(a0),d0
0001BB9C 5228 0003                  		addq.b	#1,3(a0)
0001BBA0 2268 0004                  		movea.l	4(a0),a1
0001BBA4 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BBA8 1280                       		move.b	d0,(a1)
0001BBAA 6600                       		bne.s	locret_1B596
0001BBAC 4290                       		clr.l	(a0)
0001BBAE 42A8 0004                  		clr.l	4(a0)
0001BBB2                            
0001BBB2                            locret_1B596:
0001BBB2 4E75                       		rts	
0001BBB4                            ; ===========================================================================
0001BBB4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBBA                            ; ===========================================================================
0001BBBA                            
0001BBBA                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBBA 5328 0002                  		subq.b	#1,2(a0)
0001BBBE 6A00                       		bpl.s	locret_1B5CC
0001BBC0 117C 0007 0002             		move.b	#7,2(a0)
0001BBC6 7000                       		moveq	#0,d0
0001BBC8 1028 0003                  		move.b	3(a0),d0
0001BBCC 5228 0003                  		addq.b	#1,3(a0)
0001BBD0 2268 0004                  		movea.l	4(a0),a1
0001BBD4 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BBD8 6600                       		bne.s	loc_1B5CA
0001BBDA 4290                       		clr.l	(a0)
0001BBDC 42A8 0004                  		clr.l	4(a0)
0001BBE0 12BC 002B                  		move.b	#$2B,(a1)
0001BBE4 4E75                       		rts	
0001BBE6                            ; ===========================================================================
0001BBE6                            
0001BBE6                            loc_1B5CA:
0001BBE6 1280                       		move.b	d0,(a1)
0001BBE8                            
0001BBE8                            locret_1B5CC:
0001BBE8 4E75                       		rts	
0001BBEA                            ; ===========================================================================
0001BBEA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBF0                            ; ===========================================================================
0001BBF0                            
0001BBF0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBF0 5328 0002                  		subq.b	#1,2(a0)
0001BBF4 6A00                       		bpl.s	locret_1B60C
0001BBF6 117C 0005 0002             		move.b	#5,2(a0)
0001BBFC 7000                       		moveq	#0,d0
0001BBFE 1028 0003                  		move.b	3(a0),d0
0001BC02 5228 0003                  		addq.b	#1,3(a0)
0001BC06 2268 0004                  		movea.l	4(a0),a1
0001BC0A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BC0E 1280                       		move.b	d0,(a1)
0001BC10 6600                       		bne.s	locret_1B60C
0001BC12 4290                       		clr.l	(a0)
0001BC14 42A8 0004                  		clr.l	4(a0)
0001BC18 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC1E 303C 00A8                  		move.w	#$A8,d0
0001BC22 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC28                            
0001BC28                            locret_1B60C:
0001BC28 4E75                       		rts	
0001BC2A                            ; ===========================================================================
0001BC2A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC30                            ; ===========================================================================
0001BC30                            
0001BC30                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC30 5328 0002                  		subq.b	#1,2(a0)
0001BC34 6A00                       		bpl.s	locret_1B640
0001BC36 117C 0001 0002             		move.b	#1,2(a0)
0001BC3C 7000                       		moveq	#0,d0
0001BC3E 1028 0003                  		move.b	3(a0),d0
0001BC42 5228 0003                  		addq.b	#1,3(a0)
0001BC46 2268 0004                  		movea.l	4(a0),a1
0001BC4A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC4E 1280                       		move.b	d0,(a1)
0001BC50 6600                       		bne.s	locret_1B640
0001BC52 12A8 0004                  		move.b	4(a0),(a1)
0001BC56 4290                       		clr.l	(a0)
0001BC58 42A8 0004                  		clr.l	4(a0)
0001BC5C                            
0001BC5C                            locret_1B640:
0001BC5C 4E75                       		rts	
0001BC5E                            ; ===========================================================================
0001BC5E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68                            ; Special stage	layout pointers
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68                            SS_LayoutIndex:
0001BC68                            	include "_inc\Special stage layout pointers.asm"
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68                            ; Special stage	layout pointers
0001BC68                            ; ---------------------------------------------------------------------------
0001BC68 0000 0000                  	dc.l SS_1
0001BC6C 0000 0000                  	dc.l SS_2
0001BC70 0000 0000                  	dc.l SS_3
0001BC74 0000 0000                  	dc.l SS_4
0001BC78 0000 0000                  	dc.l SS_5
0001BC7C 0000 0000                  	dc.l SS_6
0001BC80                            	even
0001BC80                            	even
0001BC80                            
0001BC80                            ; ---------------------------------------------------------------------------
0001BC80                            ; Special stage	start locations
0001BC80                            ; ---------------------------------------------------------------------------
0001BC80                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC98                            		even
0001BC98                            
0001BC98                            ; ---------------------------------------------------------------------------
0001BC98                            ; Subroutine to	load special stage layout
0001BC98                            ; ---------------------------------------------------------------------------
0001BC98                            
0001BC98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC98                            
0001BC98                            
0001BC98                            SS_Load:				; XREF: SpecialStage
0001BC98 7000                       		moveq	#0,d0
0001BC9A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC9E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BCA2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BCA8 6500                       		bcs.s	SS_ChkEmldNum
0001BCAA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BCB0                            
0001BCB0                            SS_ChkEmldNum:
0001BCB0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BCB6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BCB8 7200                       		moveq	#0,d1
0001BCBA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCBE 5301                       		subq.b	#1,d1
0001BCC0 6500                       		bcs.s	SS_LoadData
0001BCC2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCC6                            
0001BCC6                            SS_ChkEmldLoop:	
0001BCC6 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCCA 6600                       		bne.s	SS_ChkEmldRepeat
0001BCCC 60CA                       		bra.s	SS_Load
0001BCCE                            ; ===========================================================================
0001BCCE                            
0001BCCE                            SS_ChkEmldRepeat:
0001BCCE 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BCD2                            
0001BCD2                            SS_LoadData:
0001BCD2 E548                       		lsl.w	#2,d0
0001BCD4 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BCD8 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCDC 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCE0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCE4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCEA 303C 0000                  		move.w	#0,d0
0001BCEE 4EB9 0000 193E             		jsr	(EniDec).l
0001BCF4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BCFA 303C 0FFF                  		move.w	#$FFF,d0
0001BCFE                            
0001BCFE                            SS_ClrRAM3:
0001BCFE 4299                       		clr.l	(a1)+
0001BD00 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BD04                            
0001BD04 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD0A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BD10 723F                       		moveq	#$3F,d1
0001BD12                            
0001BD12                            loc_1B6F6:
0001BD12 743F                       		moveq	#$3F,d2
0001BD14                            
0001BD14                            loc_1B6F8:
0001BD14 12D8                       		move.b	(a0)+,(a1)+
0001BD16 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD1A                            
0001BD1A 43E9 0040                  		lea	$40(a1),a1
0001BD1E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD22                            
0001BD22 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD28 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD2E 724D                       		moveq	#$4D,d1
0001BD30                            
0001BD30                            loc_1B714:
0001BD30 22D8                       		move.l	(a0)+,(a1)+
0001BD32 32FC 0000                  		move.w	#0,(a1)+
0001BD36 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD3C 32D8                       		move.w	(a0)+,(a1)+
0001BD3E 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD42                            
0001BD42 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD48 323C 003F                  		move.w	#$3F,d1
0001BD4C                            
0001BD4C                            loc_1B730:
0001BD4C                            
0001BD4C 4299                       		clr.l	(a1)+
0001BD4E 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD52                            
0001BD52 4E75                       		rts	
0001BD54                            ; End of function SS_Load
0001BD54                            
0001BD54                            ; ===========================================================================
0001BD54                            ; ---------------------------------------------------------------------------
0001BD54                            ; Special stage	mappings and VRAM pointers
0001BD54                            ; ---------------------------------------------------------------------------
0001BD54                            SS_MapIndex:
0001BD54                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD54                            ; ---------------------------------------------------------------------------
0001BD54                            ; Special stage	mappings and VRAM pointers
0001BD54                            ; ---------------------------------------------------------------------------
0001BD54 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD58 0142                       	dc.w $142		; VRAM setting
0001BD5A 0000 0000                  	dc.l Map_SSWalls
0001BD5E 0142                       	dc.w $142
0001BD60 0000 0000                  	dc.l Map_SSWalls
0001BD64 0142                       	dc.w $142
0001BD66 0000 0000                  	dc.l Map_SSWalls
0001BD6A 0142                       	dc.w $142
0001BD6C 0000 0000                  	dc.l Map_SSWalls
0001BD70 0142                       	dc.w $142
0001BD72 0000 0000                  	dc.l Map_SSWalls
0001BD76 0142                       	dc.w $142
0001BD78 0000 0000                  	dc.l Map_SSWalls
0001BD7C 0142                       	dc.w $142
0001BD7E 0000 0000                  	dc.l Map_SSWalls
0001BD82 0142                       	dc.w $142
0001BD84 0000 0000                  	dc.l Map_SSWalls
0001BD88 0142                       	dc.w $142
0001BD8A 0000 0000                  	dc.l Map_SSWalls
0001BD8E 2142                       	dc.w $2142
0001BD90 0000 0000                  	dc.l Map_SSWalls
0001BD94 2142                       	dc.w $2142
0001BD96 0000 0000                  	dc.l Map_SSWalls
0001BD9A 2142                       	dc.w $2142
0001BD9C 0000 0000                  	dc.l Map_SSWalls
0001BDA0 2142                       	dc.w $2142
0001BDA2 0000 0000                  	dc.l Map_SSWalls
0001BDA6 2142                       	dc.w $2142
0001BDA8 0000 0000                  	dc.l Map_SSWalls
0001BDAC 2142                       	dc.w $2142
0001BDAE 0000 0000                  	dc.l Map_SSWalls
0001BDB2 2142                       	dc.w $2142
0001BDB4 0000 0000                  	dc.l Map_SSWalls
0001BDB8 2142                       	dc.w $2142
0001BDBA 0000 0000                  	dc.l Map_SSWalls
0001BDBE 2142                       	dc.w $2142
0001BDC0 0000 0000                  	dc.l Map_SSWalls
0001BDC4 4142                       	dc.w $4142
0001BDC6 0000 0000                  	dc.l Map_SSWalls
0001BDCA 4142                       	dc.w $4142
0001BDCC 0000 0000                  	dc.l Map_SSWalls
0001BDD0 4142                       	dc.w $4142
0001BDD2 0000 0000                  	dc.l Map_SSWalls
0001BDD6 4142                       	dc.w $4142
0001BDD8 0000 0000                  	dc.l Map_SSWalls
0001BDDC 4142                       	dc.w $4142
0001BDDE 0000 0000                  	dc.l Map_SSWalls
0001BDE2 4142                       	dc.w $4142
0001BDE4 0000 0000                  	dc.l Map_SSWalls
0001BDE8 4142                       	dc.w $4142
0001BDEA 0000 0000                  	dc.l Map_SSWalls
0001BDEE 4142                       	dc.w $4142
0001BDF0 0000 0000                  	dc.l Map_SSWalls
0001BDF4 4142                       	dc.w $4142
0001BDF6 0000 0000                  	dc.l Map_SSWalls
0001BDFA 6142                       	dc.w $6142
0001BDFC 0000 0000                  	dc.l Map_SSWalls
0001BE00 6142                       	dc.w $6142
0001BE02 0000 0000                  	dc.l Map_SSWalls
0001BE06 6142                       	dc.w $6142
0001BE08 0000 0000                  	dc.l Map_SSWalls
0001BE0C 6142                       	dc.w $6142
0001BE0E 0000 0000                  	dc.l Map_SSWalls
0001BE12 6142                       	dc.w $6142
0001BE14 0000 0000                  	dc.l Map_SSWalls
0001BE18 6142                       	dc.w $6142
0001BE1A 0000 0000                  	dc.l Map_SSWalls
0001BE1E 6142                       	dc.w $6142
0001BE20 0000 0000                  	dc.l Map_SSWalls
0001BE24 6142                       	dc.w $6142
0001BE26 0000 0000                  	dc.l Map_SSWalls
0001BE2A 6142                       	dc.w $6142
0001BE2C 0000 F0C0                  	dc.l Map_obj47
0001BE30 023B                       	dc.w $23B
0001BE32 0000 0000                  	dc.l Map_SS_R
0001BE36 0570                       	dc.w $570
0001BE38 0000 0000                  	dc.l Map_SS_R
0001BE3C 0251                       	dc.w $251
0001BE3E 0000 0000                  	dc.l Map_SS_R
0001BE42 0370                       	dc.w $370
0001BE44 0000 0000                  	dc.l Map_SS_Up
0001BE48 0263                       	dc.w $263
0001BE4A 0000 0000                  	dc.l Map_SS_Down
0001BE4E 0263                       	dc.w $263
0001BE50 0000 0000                  	dc.l Map_SS_R
0001BE54 22F0                       	dc.w $22F0
0001BE56 0000 0000                  	dc.l Map_SS_Glass
0001BE5A 0470                       	dc.w $470
0001BE5C 0000 0000                  	dc.l Map_SS_Glass
0001BE60 05F0                       	dc.w $5F0
0001BE62 0000 0000                  	dc.l Map_SS_Glass
0001BE66 65F0                       	dc.w $65F0
0001BE68 0000 0000                  	dc.l Map_SS_Glass
0001BE6C 25F0                       	dc.w $25F0
0001BE6E 0000 0000                  	dc.l Map_SS_Glass
0001BE72 45F0                       	dc.w $45F0
0001BE74 0000 0000                  	dc.l Map_SS_R
0001BE78 02F0                       	dc.w $2F0
0001BE7A 0100 F0C0                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE7E 023B                       	dc.w $23B
0001BE80 0200 F0C0                  	dc.l Map_obj47+$2000000
0001BE84 023B                       	dc.w $23B
0001BE86 0000 0000                  	dc.l Map_SS_R
0001BE8A 0797                       	dc.w $797
0001BE8C 0000 0000                  	dc.l Map_SS_R
0001BE90 07A0                       	dc.w $7A0
0001BE92 0000 0000                  	dc.l Map_SS_R
0001BE96 07A9                       	dc.w $7A9
0001BE98 0000 0000                  	dc.l Map_SS_R
0001BE9C 0797                       	dc.w $797
0001BE9E 0000 0000                  	dc.l Map_SS_R
0001BEA2 07A0                       	dc.w $7A0
0001BEA4 0000 0000                  	dc.l Map_SS_R
0001BEA8 07A9                       	dc.w $7A9
0001BEAA 0000 A440                  	dc.l Map_obj25
0001BEAE 27B2                       	dc.w $27B2
0001BEB0 0000 0000                  	dc.l Map_SS_Chaos3
0001BEB4 0770                       	dc.w $770
0001BEB6 0000 0000                  	dc.l Map_SS_Chaos3
0001BEBA 2770                       	dc.w $2770
0001BEBC 0000 0000                  	dc.l Map_SS_Chaos3
0001BEC0 4770                       	dc.w $4770
0001BEC2 0000 0000                  	dc.l Map_SS_Chaos3
0001BEC6 6770                       	dc.w $6770
0001BEC8 0000 0000                  	dc.l Map_SS_Chaos1
0001BECC 0770                       	dc.w $770
0001BECE 0000 0000                  	dc.l Map_SS_Chaos2
0001BED2 0770                       	dc.w $770
0001BED4 0000 0000                  	dc.l Map_SS_R
0001BED8 04F0                       	dc.w $4F0
0001BEDA 0400 A440                  	dc.l Map_obj25+$4000000
0001BEDE 27B2                       	dc.w $27B2
0001BEE0 0500 A440                  	dc.l Map_obj25+$5000000
0001BEE4 27B2                       	dc.w $27B2
0001BEE6 0600 A440                  	dc.l Map_obj25+$6000000
0001BEEA 27B2                       	dc.w $27B2
0001BEEC 0700 A440                  	dc.l Map_obj25+$7000000
0001BEF0 27B2                       	dc.w $27B2
0001BEF2 0000 0000                  	dc.l Map_SS_Glass
0001BEF6 23F0                       	dc.w $23F0
0001BEF8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BEFC 23F0                       	dc.w $23F0
0001BEFE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BF02 23F0                       	dc.w $23F0
0001BF04 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BF08 23F0                       	dc.w $23F0
0001BF0A 0000 0000                  	dc.l Map_SS_R+$2000000
0001BF0E 04F0                       	dc.w $4F0
0001BF10 0000 0000                  	dc.l Map_SS_Glass
0001BF14 05F0                       	dc.w $5F0
0001BF16 0000 0000                  	dc.l Map_SS_Glass
0001BF1A 65F0                       	dc.w $65F0
0001BF1C 0000 0000                  	dc.l Map_SS_Glass
0001BF20 25F0                       	dc.w $25F0
0001BF22 0000 0000                  	dc.l Map_SS_Glass
0001BF26 45F0                       	dc.w $45F0
0001BF26 45F0                       	dc.w $45F0
0001BF28                            
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28                            ; Sprite mappings - special stage "R" block
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28                            Map_SS_R:
0001BF28                            	include "_maps\SSRblock.asm"
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28                            ; Sprite mappings - special stage "R" block
0001BF28                            ; ---------------------------------------------------------------------------
0001BF28 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF2C 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF2E 01                         byte_1B912:	dc.b 1
0001BF2F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF34 01                         byte_1B918:	dc.b 1
0001BF35 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF3A 00                         byte_1B91E:	dc.b 0
0001BF3C 00                         		even
0001BF3C 00                         		even
0001BF3C                            
0001BF3C                            ; ---------------------------------------------------------------------------
0001BF3C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF3C                            ; ---------------------------------------------------------------------------
0001BF3C                            Map_SS_Glass:
0001BF3C                            	include "_maps\SSglassblock.asm"
0001BF3C                            ; ---------------------------------------------------------------------------
0001BF3C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF3C                            ; ---------------------------------------------------------------------------
0001BF3C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF40 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF44 01                         byte_1B928:	dc.b 1
0001BF45 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF4A 01                         byte_1B92E:	dc.b 1
0001BF4B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF50 01                         byte_1B934:	dc.b 1
0001BF51 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF56 01                         byte_1B93A:	dc.b 1
0001BF57 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF5C                            		even
0001BF5C                            		even
0001BF5C                            
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C                            ; Sprite mappings - special stage "UP" block
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C                            Map_SS_Up:
0001BF5C                            	include "_maps\SSUPblock.asm"
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C                            ; Sprite mappings - special stage "UP" block
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF5E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF60 01                         byte_1B944:	dc.b 1
0001BF61 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF66 01                         byte_1B94A:	dc.b 1
0001BF67 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF6C                            		even
0001BF6C                            		even
0001BF6C                            
0001BF6C                            ; ---------------------------------------------------------------------------
0001BF6C                            ; Sprite mappings - special stage "DOWN" block
0001BF6C                            ; ---------------------------------------------------------------------------
0001BF6C                            Map_SS_Down:
0001BF6C                            	include "_maps\SSDOWNblock.asm"
0001BF6C                            ; ---------------------------------------------------------------------------
0001BF6C                            ; Sprite mappings - special stage "DOWN" block
0001BF6C                            ; ---------------------------------------------------------------------------
0001BF6C 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF6E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF70 01                         byte_1B954:	dc.b 1
0001BF71 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF76 01                         byte_1B95A:	dc.b 1
0001BF77 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF7C                            		even
0001BF7C                            		even
0001BF7C                            
0001BF7C                            ; ---------------------------------------------------------------------------
0001BF7C                            ; Sprite mappings - special stage chaos	emeralds
0001BF7C                            ; ---------------------------------------------------------------------------
0001BF7C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF7E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF80 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF82 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF84 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF86 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF88 01                         byte_1B96C:	dc.b 1
0001BF89 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF8E 01                         byte_1B972:	dc.b 1
0001BF8F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF94 01                         byte_1B978:	dc.b 1
0001BF95 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF9A 01                         byte_1B97E:	dc.b 1
0001BF9B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BFA0                            		even
0001BFA0                            ; ===========================================================================
0001BFA0                            ; ---------------------------------------------------------------------------
0001BFA0                            ; Object 09 - Sonic (special stage)
0001BFA0                            ; ---------------------------------------------------------------------------
0001BFA0                            
0001BFA0                            Obj09:					; XREF: Obj_Index
0001BFA0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BFA4 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BFA6 6100 0000                  		bsr.w	SS_FixCamera
0001BFAA 6000 0000                  		bra.w	DebugMode
0001BFAE                            ; ===========================================================================
0001BFAE                            
0001BFAE                            Obj09_Normal:
0001BFAE 7000                       		moveq	#0,d0
0001BFB0 1028 0024                  		move.b	$24(a0),d0
0001BFB4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BFB8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFBC                            ; ===========================================================================
0001BFBC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFBE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFC0 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFC2 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFC4                            ; ===========================================================================
0001BFC4                            
0001BFC4                            Obj09_Main:				; XREF: Obj09_Index
0001BFC4 5428 0024                  		addq.b	#2,$24(a0)
0001BFC8 117C 000E 0016             		move.b	#$E,$16(a0)
0001BFCE 117C 0007 0017             		move.b	#7,$17(a0)
0001BFD4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFDC 317C 0780 0002             		move.w	#$780,2(a0)
0001BFE2 117C 0004 0001             		move.b	#4,1(a0)
0001BFE8 117C 0000 0018             		move.b	#0,$18(a0)
0001BFEE 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFF4 08E8 0002 0022             		bset	#2,$22(a0)
0001BFFA 08E8 0001 0022             		bset	#1,$22(a0)
0001C000                            
0001C000                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C000 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C004 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C006 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C00C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C00E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C014                            
0001C014                            Obj09_NoDebug:
0001C014 117C 0000 0030             		move.b	#0,$30(a0)
0001C01A 7000                       		moveq	#0,d0
0001C01C 1028 0022                  		move.b	$22(a0),d0
0001C020 0240 0002                  		andi.w	#2,d0
0001C024 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C028 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C02C 4EBA 8210                  		jsr	LoadSonicDynPLC
0001C030 4EF9 0000 DBCC             		jmp	DisplaySprite
0001C036                            ; ===========================================================================
0001C036 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C038 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C03A                            ; ===========================================================================
0001C03A                            
0001C03A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C03A 6100 0000                  		bsr.w	Obj09_Jump
0001C03E 6100 0000                  		bsr.w	Obj09_Move
0001C042 6100 0000                  		bsr.w	Obj09_Fall
0001C046 6000                       		bra.s	Obj09_Display
0001C048                            ; ===========================================================================
0001C048                            
0001C048                            Obj09_InAir:				; XREF: Obj09_Modes
0001C048 6100 0000                  		bsr.w	nullsub_2
0001C04C 6100 0000                  		bsr.w	Obj09_Move
0001C050 6100 0000                  		bsr.w	Obj09_Fall
0001C054                            
0001C054                            Obj09_Display:				; XREF: Obj09_OnWall
0001C054 6100 0000                  		bsr.w	Obj09_ChkItems
0001C058 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C05C 4EB9 0000 DBA6             		jsr	SpeedToPos
0001C062 6100 0000                  		bsr.w	SS_FixCamera
0001C066 3038 F780                  		move.w	($FFFFF780).w,d0
0001C06A D078 F782                  		add.w	($FFFFF782).w,d0
0001C06E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C072 4EB9 0001 3FC2             		jsr	Sonic_Animate
0001C078 4E75                       		rts	
0001C07A                            
0001C07A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C07A                            
0001C07A                            
0001C07A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C07A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C080 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C082 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C086                            
0001C086                            Obj09_ChkRight:
0001C086 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C08C 6700                       		beq.s	loc_1BA78	; if not, branch
0001C08E 6100 0000                  		bsr.w	Obj09_MoveRight
0001C092                            
0001C092                            loc_1BA78:
0001C092 1038 F602                  		move.b	($FFFFF602).w,d0
0001C096 0200 000C                  		andi.b	#$C,d0
0001C09A 6600                       		bne.s	loc_1BAA8
0001C09C 3028 0014                  		move.w	$14(a0),d0
0001C0A0 6700                       		beq.s	loc_1BAA8
0001C0A2 6B00                       		bmi.s	loc_1BA9A
0001C0A4 0440 000C                  		subi.w	#$C,d0
0001C0A8 6400                       		bcc.s	loc_1BA94
0001C0AA 303C 0000                  		move.w	#0,d0
0001C0AE                            
0001C0AE                            loc_1BA94:
0001C0AE 3140 0014                  		move.w	d0,$14(a0)
0001C0B2 6000                       		bra.s	loc_1BAA8
0001C0B4                            ; ===========================================================================
0001C0B4                            
0001C0B4                            loc_1BA9A:
0001C0B4 0640 000C                  		addi.w	#$C,d0
0001C0B8 6400                       		bcc.s	loc_1BAA4
0001C0BA 303C 0000                  		move.w	#0,d0
0001C0BE                            
0001C0BE                            loc_1BAA4:
0001C0BE 3140 0014                  		move.w	d0,$14(a0)
0001C0C2                            
0001C0C2                            loc_1BAA8:
0001C0C2 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0C6 0600 0020                  		addi.b	#$20,d0
0001C0CA 0200 00C0                  		andi.b	#$C0,d0
0001C0CE 4400                       		neg.b	d0
0001C0D0 4EB9 0000 2C82             		jsr	(CalcSine).l
0001C0D6 C3E8 0014                  		muls.w	$14(a0),d1
0001C0DA D3A8 0008                  		add.l	d1,8(a0)
0001C0DE C1E8 0014                  		muls.w	$14(a0),d0
0001C0E2 D1A8 000C                  		add.l	d0,$C(a0)
0001C0E6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0EA 2428 000C                  		move.l	$C(a0),d2
0001C0EE 2628 0008                  		move.l	8(a0),d3
0001C0F2 6100 0000                  		bsr.w	sub_1BCE8
0001C0F6 6700                       		beq.s	loc_1BAF2
0001C0F8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0FC 93A8 0008                  		sub.l	d1,8(a0)
0001C100 91A8 000C                  		sub.l	d0,$C(a0)
0001C104 317C 0000 0014             		move.w	#0,$14(a0)
0001C10A 4E75                       		rts	
0001C10C                            ; ===========================================================================
0001C10C                            
0001C10C                            loc_1BAF2:
0001C10C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C110 4E75                       		rts	
0001C112                            ; End of function Obj09_Move
0001C112                            
0001C112                            
0001C112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C112                            
0001C112                            
0001C112                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C112 08E8 0000 0022             		bset	#0,$22(a0)
0001C118 3028 0014                  		move.w	$14(a0),d0
0001C11C 6700                       		beq.s	loc_1BB06
0001C11E 6A00                       		bpl.s	loc_1BB1A
0001C120                            
0001C120                            loc_1BB06:
0001C120 0440 000C                  		subi.w	#$C,d0
0001C124 0C40 F800                  		cmpi.w	#-$800,d0
0001C128 6E00                       		bgt.s	loc_1BB14
0001C12A 303C F800                  		move.w	#-$800,d0
0001C12E                            
0001C12E                            loc_1BB14:
0001C12E 3140 0014                  		move.w	d0,$14(a0)
0001C132 4E75                       		rts	
0001C134                            ; ===========================================================================
0001C134                            
0001C134                            loc_1BB1A:
0001C134 0440 0040                  		subi.w	#$40,d0
0001C138 6400                       		bcc.s	loc_1BB22
0001C13A 4E71                       		nop	
0001C13C                            
0001C13C                            loc_1BB22:
0001C13C 3140 0014                  		move.w	d0,$14(a0)
0001C140 4E75                       		rts	
0001C142                            ; End of function Obj09_MoveLeft
0001C142                            
0001C142                            
0001C142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C142                            
0001C142                            
0001C142                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C142 08A8 0000 0022             		bclr	#0,$22(a0)
0001C148 3028 0014                  		move.w	$14(a0),d0
0001C14C 6B00                       		bmi.s	loc_1BB48
0001C14E 0640 000C                  		addi.w	#$C,d0
0001C152 0C40 0800                  		cmpi.w	#$800,d0
0001C156 6D00                       		blt.s	loc_1BB42
0001C158 303C 0800                  		move.w	#$800,d0
0001C15C                            
0001C15C                            loc_1BB42:
0001C15C 3140 0014                  		move.w	d0,$14(a0)
0001C160 6000                       		bra.s	locret_1BB54
0001C162                            ; ===========================================================================
0001C162                            
0001C162                            loc_1BB48:
0001C162 0640 0040                  		addi.w	#$40,d0
0001C166 6400                       		bcc.s	loc_1BB50
0001C168 4E71                       		nop	
0001C16A                            
0001C16A                            loc_1BB50:
0001C16A 3140 0014                  		move.w	d0,$14(a0)
0001C16E                            
0001C16E                            locret_1BB54:
0001C16E 4E75                       		rts	
0001C170                            ; End of function Obj09_MoveRight
0001C170                            
0001C170                            
0001C170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C170                            
0001C170                            
0001C170                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C170 1038 F603                  		move.b	($FFFFF603).w,d0
0001C174 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C178 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C17A 1038 F780                  		move.b	($FFFFF780).w,d0
0001C17E 0200 00FC                  		andi.b	#$FC,d0
0001C182 4400                       		neg.b	d0
0001C184 0400 0040                  		subi.b	#$40,d0
0001C188 4EB9 0000 2C82             		jsr	(CalcSine).l
0001C18E C3FC 0680                  		muls.w	#$680,d1
0001C192 E081                       		asr.l	#8,d1
0001C194 3141 0010                  		move.w	d1,$10(a0)
0001C198 C1FC 0680                  		muls.w	#$680,d0
0001C19C E080                       		asr.l	#8,d0
0001C19E 3140 0012                  		move.w	d0,$12(a0)
0001C1A2 08E8 0001 0022             		bset	#1,$22(a0)
0001C1A8 303C 00A0                  		move.w	#$A0,d0
0001C1AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C1B2                            
0001C1B2                            Obj09_NoJump:
0001C1B2 4E75                       		rts	
0001C1B4                            ; End of function Obj09_Jump
0001C1B4                            
0001C1B4                            
0001C1B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B4                            
0001C1B4                            
0001C1B4                            nullsub_2:				; XREF: Obj09_InAir
0001C1B4 4E75                       		rts	
0001C1B6                            ; End of function nullsub_2
0001C1B6                            
0001C1B6                            ; ===========================================================================
0001C1B6                            ; ---------------------------------------------------------------------------
0001C1B6                            ; unused subroutine to limit Sonic's upward vertical speed
0001C1B6                            ; ---------------------------------------------------------------------------
0001C1B6 323C FC00                  		move.w	#-$400,d1
0001C1BA B268 0012                  		cmp.w	$12(a0),d1
0001C1BE 6F00                       		ble.s	locret_1BBB4
0001C1C0 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1C4 0200 0070                  		andi.b	#$70,d0
0001C1C8 6600                       		bne.s	locret_1BBB4
0001C1CA 3141 0012                  		move.w	d1,$12(a0)
0001C1CE                            
0001C1CE                            locret_1BBB4:
0001C1CE 4E75                       		rts	
0001C1D0                            ; ---------------------------------------------------------------------------
0001C1D0                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C1D0                            ; ---------------------------------------------------------------------------
0001C1D0                            
0001C1D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1D0                            
0001C1D0                            
0001C1D0                            SS_FixCamera:				; XREF: Obj09
0001C1D0 3428 000C                  		move.w	$C(a0),d2
0001C1D4 3628 0008                  		move.w	8(a0),d3
0001C1D8 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1DC 0443 00A0                  		subi.w	#$A0,d3
0001C1E0 6500                       		bcs.s	loc_1BBCE
0001C1E2 9043                       		sub.w	d3,d0
0001C1E4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1E8                            
0001C1E8                            loc_1BBCE:
0001C1E8 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1EC 0442 0070                  		subi.w	#$70,d2
0001C1F0 6500                       		bcs.s	locret_1BBDE
0001C1F2 9042                       		sub.w	d2,d0
0001C1F4 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1F8                            
0001C1F8                            locret_1BBDE:
0001C1F8 4E75                       		rts	
0001C1FA                            ; End of function SS_FixCamera
0001C1FA                            
0001C1FA                            ; ===========================================================================
0001C1FA                            
0001C1FA                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C1FA 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C200 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C206 6600                       		bne.s	loc_1BBF4
0001C208 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C20E                            
0001C20E                            loc_1BBF4:
0001C20E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C214 6D00                       		blt.s	loc_1BC12
0001C216 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C21C 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C222 5428 0024                  		addq.b	#2,$24(a0)
0001C226 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C22C                            
0001C22C                            loc_1BC12:
0001C22C 3038 F780                  		move.w	($FFFFF780).w,d0
0001C230 D078 F782                  		add.w	($FFFFF782).w,d0
0001C234 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C238 4EB9 0001 3FC2             		jsr	Sonic_Animate
0001C23E 4EB9 0001 423E             		jsr	LoadSonicDynPLC
0001C244 6100 FF8A                  		bsr.w	SS_FixCamera
0001C248 4EF9 0000 DBCC             		jmp	DisplaySprite
0001C24E                            ; ===========================================================================
0001C24E                            
0001C24E                            Obj09_Exit2:				; XREF: Obj09_Index
0001C24E 5368 0038                  		subq.w	#1,$38(a0)
0001C252 6600                       		bne.s	loc_1BC40
0001C254 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C25A                            
0001C25A                            loc_1BC40:
0001C25A 4EB9 0001 3FC2             		jsr	Sonic_Animate
0001C260 4EB9 0001 423E             		jsr	LoadSonicDynPLC
0001C266 6100 FF68                  		bsr.w	SS_FixCamera
0001C26A 4EF9 0000 DBCC             		jmp	DisplaySprite
0001C270                            
0001C270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C270                            
0001C270                            
0001C270                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C270 2428 000C                  		move.l	$C(a0),d2
0001C274 2628 0008                  		move.l	8(a0),d3
0001C278 1038 F780                  		move.b	($FFFFF780).w,d0
0001C27C 0200 00FC                  		andi.b	#$FC,d0
0001C280 4EB9 0000 2C82             		jsr	(CalcSine).l
0001C286 3828 0010                  		move.w	$10(a0),d4
0001C28A 48C4                       		ext.l	d4
0001C28C E184                       		asl.l	#8,d4
0001C28E C1FC 002A                  		muls.w	#$2A,d0
0001C292 D084                       		add.l	d4,d0
0001C294 3828 0012                  		move.w	$12(a0),d4
0001C298 48C4                       		ext.l	d4
0001C29A E184                       		asl.l	#8,d4
0001C29C C3FC 002A                  		muls.w	#$2A,d1
0001C2A0 D284                       		add.l	d4,d1
0001C2A2 D680                       		add.l	d0,d3
0001C2A4 6100 0000                  		bsr.w	sub_1BCE8
0001C2A8 6700                       		beq.s	loc_1BCB0
0001C2AA 9680                       		sub.l	d0,d3
0001C2AC 7000                       		moveq	#0,d0
0001C2AE 3140 0010                  		move.w	d0,$10(a0)
0001C2B2 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2B8 D481                       		add.l	d1,d2
0001C2BA 6100 0000                  		bsr.w	sub_1BCE8
0001C2BE 6700                       		beq.s	loc_1BCC6
0001C2C0 9481                       		sub.l	d1,d2
0001C2C2 7200                       		moveq	#0,d1
0001C2C4 3141 0012                  		move.w	d1,$12(a0)
0001C2C8 4E75                       		rts	
0001C2CA                            ; ===========================================================================
0001C2CA                            
0001C2CA                            loc_1BCB0:
0001C2CA D481                       		add.l	d1,d2
0001C2CC 6100 0000                  		bsr.w	sub_1BCE8
0001C2D0 6700                       		beq.s	loc_1BCD4
0001C2D2 9481                       		sub.l	d1,d2
0001C2D4 7200                       		moveq	#0,d1
0001C2D6 3141 0012                  		move.w	d1,$12(a0)
0001C2DA 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2E0                            
0001C2E0                            loc_1BCC6:
0001C2E0 E080                       		asr.l	#8,d0
0001C2E2 E081                       		asr.l	#8,d1
0001C2E4 3140 0010                  		move.w	d0,$10(a0)
0001C2E8 3141 0012                  		move.w	d1,$12(a0)
0001C2EC 4E75                       		rts	
0001C2EE                            ; ===========================================================================
0001C2EE                            
0001C2EE                            loc_1BCD4:
0001C2EE E080                       		asr.l	#8,d0
0001C2F0 E081                       		asr.l	#8,d1
0001C2F2 3140 0010                  		move.w	d0,$10(a0)
0001C2F6 3141 0012                  		move.w	d1,$12(a0)
0001C2FA 08E8 0001 0022             		bset	#1,$22(a0)
0001C300 4E75                       		rts	
0001C302                            ; End of function Obj09_Fall
0001C302                            
0001C302                            
0001C302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C302                            
0001C302                            
0001C302                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C302 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C308 7800                       		moveq	#0,d4
0001C30A 4842                       		swap	d2
0001C30C 3802                       		move.w	d2,d4
0001C30E 4842                       		swap	d2
0001C310 0644 0044                  		addi.w	#$44,d4
0001C314 88FC 0018                  		divu.w	#$18,d4
0001C318 C8FC 0080                  		mulu.w	#$80,d4
0001C31C D3C4                       		adda.l	d4,a1
0001C31E 7800                       		moveq	#0,d4
0001C320 4843                       		swap	d3
0001C322 3803                       		move.w	d3,d4
0001C324 4843                       		swap	d3
0001C326 0644 0014                  		addi.w	#$14,d4
0001C32A 88FC 0018                  		divu.w	#$18,d4
0001C32E D2C4                       		adda.w	d4,a1
0001C330 7A00                       		moveq	#0,d5
0001C332 1819                       		move.b	(a1)+,d4
0001C334 6100                       		bsr.s	sub_1BD30
0001C336 1819                       		move.b	(a1)+,d4
0001C338 6100                       		bsr.s	sub_1BD30
0001C33A D2FC 007E                  		adda.w	#$7E,a1
0001C33E 1819                       		move.b	(a1)+,d4
0001C340 6100                       		bsr.s	sub_1BD30
0001C342 1819                       		move.b	(a1)+,d4
0001C344 6100                       		bsr.s	sub_1BD30
0001C346 4A05                       		tst.b	d5
0001C348 4E75                       		rts	
0001C34A                            ; End of function sub_1BCE8
0001C34A                            
0001C34A                            
0001C34A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C34A                            
0001C34A                            
0001C34A                            sub_1BD30:				; XREF: sub_1BCE8
0001C34A 6700                       		beq.s	locret_1BD44
0001C34C 0C04 0028                  		cmpi.b	#$28,d4
0001C350 6700                       		beq.s	locret_1BD44
0001C352 0C04 003A                  		cmpi.b	#$3A,d4
0001C356 6500                       		bcs.s	loc_1BD46
0001C358 0C04 004B                  		cmpi.b	#$4B,d4
0001C35C 6400                       		bcc.s	loc_1BD46
0001C35E                            
0001C35E                            locret_1BD44:
0001C35E 4E75                       		rts	
0001C360                            ; ===========================================================================
0001C360                            
0001C360                            loc_1BD46:
0001C360 1144 0030                  		move.b	d4,$30(a0)
0001C364 2149 0032                  		move.l	a1,$32(a0)
0001C368 7AFF                       		moveq	#-1,d5
0001C36A 4E75                       		rts	
0001C36C                            ; End of function sub_1BD30
0001C36C                            
0001C36C                            
0001C36C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C36C                            
0001C36C                            
0001C36C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C36C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C372 7800                       		moveq	#0,d4
0001C374 3828 000C                  		move.w	$C(a0),d4
0001C378 0644 0050                  		addi.w	#$50,d4
0001C37C 88FC 0018                  		divu.w	#$18,d4
0001C380 C8FC 0080                  		mulu.w	#$80,d4
0001C384 D3C4                       		adda.l	d4,a1
0001C386 7800                       		moveq	#0,d4
0001C388 3828 0008                  		move.w	8(a0),d4
0001C38C 0644 0020                  		addi.w	#$20,d4
0001C390 88FC 0018                  		divu.w	#$18,d4
0001C394 D2C4                       		adda.w	d4,a1
0001C396 1811                       		move.b	(a1),d4
0001C398 6600                       		bne.s	Obj09_ChkCont
0001C39A 4A28 003A                  		tst.b	$3A(a0)
0001C39E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C3A2 7800                       		moveq	#0,d4
0001C3A4 4E75                       		rts	
0001C3A6                            ; ===========================================================================
0001C3A6                            
0001C3A6                            Obj09_ChkCont:
0001C3A6 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C3AA 6600                       		bne.s	Obj09_Chk1Up
0001C3AC 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C3B0 6600                       		bne.s	Obj09_GetCont
0001C3B2 14BC 0001                  		move.b	#1,(a2)
0001C3B6 2549 0004                  		move.l	a1,4(a2)
0001C3BA                            
0001C3BA                            Obj09_GetCont:
0001C3BA 4EB9 0000 A128             		jsr	CollectRing
0001C3C0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3C6 6500                       		bcs.s	Obj09_NoCont
0001C3C8 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C3CE 6600                       		bne.s	Obj09_NoCont
0001C3D0 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C3D4 303C 00BF                  		move.w	#$BF,d0
0001C3D8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3DE                            
0001C3DE                            Obj09_NoCont:
0001C3DE 7800                       		moveq	#0,d4
0001C3E0 4E75                       		rts	
0001C3E2                            ; ===========================================================================
0001C3E2                            
0001C3E2                            Obj09_Chk1Up:
0001C3E2 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3E6 6600                       		bne.s	Obj09_ChkEmer
0001C3E8 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3EC 6600                       		bne.s	Obj09_Get1Up
0001C3EE 14BC 0003                  		move.b	#3,(a2)
0001C3F2 2549 0004                  		move.l	a1,4(a2)
0001C3F6                            
0001C3F6                            Obj09_Get1Up:
0001C3F6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C3FA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C3FE 303C 0088                  		move.w	#$88,d0
0001C402 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C408 7800                       		moveq	#0,d4
0001C40A 4E75                       		rts	
0001C40C                            ; ===========================================================================
0001C40C                            
0001C40C                            Obj09_ChkEmer:
0001C40C 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C410 6500                       		bcs.s	Obj09_ChkGhost
0001C412 0C04 0040                  		cmpi.b	#$40,d4
0001C416 6200                       		bhi.s	Obj09_ChkGhost
0001C418 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C41C 6600                       		bne.s	Obj09_GetEmer
0001C41E 14BC 0005                  		move.b	#5,(a2)
0001C422 2549 0004                  		move.l	a1,4(a2)
0001C426                            
0001C426                            Obj09_GetEmer:
0001C426 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C42C 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C42E 0404 003B                  		subi.b	#$3B,d4
0001C432 7000                       		moveq	#0,d0
0001C434 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C438 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C43C 1584 0000                  		move.b	d4,(a2,d0.w)
0001C440 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C444                            
0001C444                            Obj09_NoEmer:
0001C444 303C 0093                  		move.w	#$93,d0
0001C448 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C44E 7800                       		moveq	#0,d4
0001C450 4E75                       		rts	
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            Obj09_ChkGhost:
0001C452 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C456 6600                       		bne.s	Obj09_ChkGhostTag
0001C458 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C45E                            
0001C45E                            Obj09_ChkGhostTag:
0001C45E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C462 6600                       		bne.s	Obj09_NoGhost
0001C464 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C46A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C46C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C472                            
0001C472                            Obj09_NoGhost:
0001C472 78FF                       		moveq	#-1,d4
0001C474 4E75                       		rts	
0001C476                            ; ===========================================================================
0001C476                            
0001C476                            Obj09_MakeGhostSolid:
0001C476 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C47C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C47E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C484 723F                       		moveq	#$3F,d1
0001C486                            
0001C486                            Obj09_GhostLoop2:
0001C486 743F                       		moveq	#$3F,d2
0001C488                            
0001C488                            Obj09_GhostLoop:
0001C488 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C48C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C48E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C492                            
0001C492                            Obj09_NoReplace:
0001C492 5249                       		addq.w	#1,a1
0001C494 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C498 43E9 0040                  		lea	$40(a1),a1
0001C49C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C4A0                            
0001C4A0                            Obj09_GhostNotSolid:
0001C4A0 4228 003A                  		clr.b	$3A(a0)
0001C4A4 7800                       		moveq	#0,d4
0001C4A6 4E75                       		rts	
0001C4A8                            ; End of function Obj09_ChkItems
0001C4A8                            
0001C4A8                            
0001C4A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4A8                            
0001C4A8                            
0001C4A8                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C4A8 1028 0030                  		move.b	$30(a0),d0
0001C4AC 6600                       		bne.s	Obj09_ChkBumper
0001C4AE 5328 0036                  		subq.b	#1,$36(a0)
0001C4B2 6A00                       		bpl.s	loc_1BEA0
0001C4B4 117C 0000 0036             		move.b	#0,$36(a0)
0001C4BA                            
0001C4BA                            loc_1BEA0:
0001C4BA 5328 0037                  		subq.b	#1,$37(a0)
0001C4BE 6A00                       		bpl.s	locret_1BEAC
0001C4C0 117C 0000 0037             		move.b	#0,$37(a0)
0001C4C6                            
0001C4C6                            locret_1BEAC:
0001C4C6 4E75                       		rts	
0001C4C8                            ; ===========================================================================
0001C4C8                            
0001C4C8                            Obj09_ChkBumper:
0001C4C8 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C4CC 6600                       		bne.s	Obj09_GOAL
0001C4CE 2228 0032                  		move.l	$32(a0),d1
0001C4D2 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C4D8 3401                       		move.w	d1,d2
0001C4DA 0241 007F                  		andi.w	#$7F,d1
0001C4DE C2FC 0018                  		mulu.w	#$18,d1
0001C4E2 0441 0014                  		subi.w	#$14,d1
0001C4E6 EE4A                       		lsr.w	#7,d2
0001C4E8 0242 007F                  		andi.w	#$7F,d2
0001C4EC C4FC 0018                  		mulu.w	#$18,d2
0001C4F0 0442 0044                  		subi.w	#$44,d2
0001C4F4 9268 0008                  		sub.w	8(a0),d1
0001C4F8 9468 000C                  		sub.w	$C(a0),d2
0001C4FC 4EB9 0000 2F50             		jsr	(CalcAngle).l
0001C502 4EB9 0000 2C82             		jsr	(CalcSine).l
0001C508 C3FC F900                  		muls.w	#-$700,d1
0001C50C E081                       		asr.l	#8,d1
0001C50E 3141 0010                  		move.w	d1,$10(a0)
0001C512 C1FC F900                  		muls.w	#-$700,d0
0001C516 E080                       		asr.l	#8,d0
0001C518 3140 0012                  		move.w	d0,$12(a0)
0001C51C 08E8 0001 0022             		bset	#1,$22(a0)
0001C522 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C526 6600                       		bne.s	Obj09_BumpSnd
0001C528 14BC 0002                  		move.b	#2,(a2)
0001C52C 2028 0032                  		move.l	$32(a0),d0
0001C530 5380                       		subq.l	#1,d0
0001C532 2540 0004                  		move.l	d0,4(a2)
0001C536                            
0001C536                            Obj09_BumpSnd:
0001C536 303C 00B4                  		move.w	#$B4,d0
0001C53A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C540                            ; ===========================================================================
0001C540                            
0001C540                            Obj09_GOAL:
0001C540 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C544 6600                       		bne.s	Obj09_UPblock
0001C546 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C54A 303C 00A8                  		move.w	#$A8,d0		; change item
0001C54E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C554 4E75                       		rts	
0001C556                            ; ===========================================================================
0001C556                            
0001C556                            Obj09_UPblock:
0001C556 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C55A 6600                       		bne.s	Obj09_DOWNblock
0001C55C 4A28 0036                  		tst.b	$36(a0)
0001C560 6600 0000                  		bne.w	Obj09_NoGlass
0001C564 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C56A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C570 6700                       		beq.s	Obj09_UPsnd
0001C572 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C576 2268 0032                  		movea.l	$32(a0),a1
0001C57A 5389                       		subq.l	#1,a1
0001C57C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C580                            
0001C580                            Obj09_UPsnd:
0001C580 303C 00A9                  		move.w	#$A9,d0
0001C584 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            Obj09_DOWNblock:
0001C58A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C58E 6600                       		bne.s	Obj09_Rblock
0001C590 4A28 0036                  		tst.b	$36(a0)
0001C594 6600 0000                  		bne.w	Obj09_NoGlass
0001C598 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C59E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C5A4 6600                       		bne.s	Obj09_DOWNsnd
0001C5A6 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C5AA 2268 0032                  		movea.l	$32(a0),a1
0001C5AE 5389                       		subq.l	#1,a1
0001C5B0 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C5B4                            
0001C5B4                            Obj09_DOWNsnd:
0001C5B4 303C 00A9                  		move.w	#$A9,d0
0001C5B8 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5BE                            ; ===========================================================================
0001C5BE                            
0001C5BE                            Obj09_Rblock:
0001C5BE 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5C2 6600                       		bne.s	Obj09_ChkGlass
0001C5C4 4A28 0037                  		tst.b	$37(a0)
0001C5C8 6600 0000                  		bne.w	Obj09_NoGlass
0001C5CC 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C5D2 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C5D6 6600                       		bne.s	Obj09_RevStage
0001C5D8 14BC 0004                  		move.b	#4,(a2)
0001C5DC 2028 0032                  		move.l	$32(a0),d0
0001C5E0 5380                       		subq.l	#1,d0
0001C5E2 2540 0004                  		move.l	d0,4(a2)
0001C5E6                            
0001C5E6                            Obj09_RevStage:
0001C5E6 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5EA 303C 00A9                  		move.w	#$A9,d0
0001C5EE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5F4                            ; ===========================================================================
0001C5F4                            
0001C5F4                            Obj09_ChkGlass:
0001C5F4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5F8 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C5FA 0C00 002E                  		cmpi.b	#$2E,d0
0001C5FE 6700                       		beq.s	Obj09_Glass
0001C600 0C00 002F                  		cmpi.b	#$2F,d0
0001C604 6700                       		beq.s	Obj09_Glass
0001C606 0C00 0030                  		cmpi.b	#$30,d0
0001C60A 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C60C                            
0001C60C                            Obj09_Glass:
0001C60C 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C610 6600                       		bne.s	Obj09_GlassSnd
0001C612 14BC 0006                  		move.b	#6,(a2)
0001C616 2268 0032                  		movea.l	$32(a0),a1
0001C61A 5389                       		subq.l	#1,a1
0001C61C 2549 0004                  		move.l	a1,4(a2)
0001C620 1011                       		move.b	(a1),d0
0001C622 5200                       		addq.b	#1,d0		; change glass type when touched
0001C624 0C00 0030                  		cmpi.b	#$30,d0
0001C628 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C62A 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C62C                            
0001C62C                            Obj09_GlassUpdate:
0001C62C 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C630                            
0001C630                            Obj09_GlassSnd:
0001C630 303C 00BA                  		move.w	#$BA,d0
0001C634 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C63A                            ; ===========================================================================
0001C63A                            
0001C63A                            Obj09_NoGlass:
0001C63A 4E75                       		rts	
0001C63C                            ; End of function Obj09_ChkItems2
0001C63C                            
0001C63C                            ; ===========================================================================
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            ; Object 10 - blank
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            
0001C63C                            Obj10:					; XREF: Obj_Index
0001C63C 4E75                       		rts	
0001C63E                            ; ---------------------------------------------------------------------------
0001C63E                            ; Subroutine to	animate	level graphics
0001C63E                            ; ---------------------------------------------------------------------------
0001C63E                            
0001C63E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C63E                            
0001C63E                            
0001C63E                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C63E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C642 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C644 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C64A 6100 0000                  		bsr.w	AniArt_GiantRing
0001C64E 7000                       		moveq	#0,d0
0001C650 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C654 D040                       		add.w	d0,d0
0001C656 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C65A 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C65E                            ; ===========================================================================
0001C65E                            
0001C65E                            AniArt_Pause:
0001C65E 4E75                       		rts	
0001C660                            ; End of function AniArt_Load
0001C660                            
0001C660                            ; ===========================================================================
0001C660 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C664 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C668 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C66C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C66E                            ; ===========================================================================
0001C66E                            ; ---------------------------------------------------------------------------
0001C66E                            ; Animated pattern routine - Green Hill
0001C66E                            ; ---------------------------------------------------------------------------
0001C66E                            
0001C66E                            AniArt_GHZ:				; XREF: AniArt_Index
0001C66E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C672 6A00                       		bpl.s	loc_1C08A
0001C674 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C67A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C680 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C684 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C688 0240 0001                  		andi.w	#1,d0
0001C68C 6700                       		beq.s	loc_1C078
0001C68E 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C692                            
0001C692                            loc_1C078:
0001C692 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C69C 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C6A0 6000 0000                  		bra.w	LoadTiles
0001C6A4                            ; ===========================================================================
0001C6A4                            
0001C6A4                            loc_1C08A:
0001C6A4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6A8 6A00                       		bpl.s	loc_1C0C0
0001C6AA 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C6B0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6B6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6BA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6BE 0240 0001                  		andi.w	#1,d0
0001C6C2 6700                       		beq.s	loc_1C0AE
0001C6C4 43E9 0200                  		lea	$200(a1),a1
0001C6C8                            
0001C6C8                            loc_1C0AE:
0001C6C8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C6D2 323C 000F                  		move.w	#$F,d1
0001C6D6 6000 0000                  		bra.w	LoadTiles
0001C6DA                            ; ===========================================================================
0001C6DA                            
0001C6DA                            loc_1C0C0:
0001C6DA 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6DE 6A00                       		bpl.s	locret_1C10C
0001C6E0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6E6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6EA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6EE 0240 0003                  		andi.w	#3,d0
0001C6F2 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6F6 0800 0000                  		btst	#0,d0
0001C6FA 6600                       		bne.s	loc_1C0E8
0001C6FC 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C702                            
0001C702                            loc_1C0E8:
0001C702 EF48                       		lsl.w	#7,d0
0001C704 3200                       		move.w	d0,d1
0001C706 D040                       		add.w	d0,d0
0001C708 D041                       		add.w	d1,d0
0001C70A 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C714 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C71A 43F1 0000                  		lea	(a1,d0.w),a1
0001C71E 323C 000B                  		move.w	#$B,d1
0001C722 6100 0000                  		bsr.w	LoadTiles
0001C726                            
0001C726                            locret_1C10C:
0001C726 4E75                       		rts	
0001C728                            ; ===========================================================================
0001C728 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C72C                            ; ===========================================================================
0001C72C                            ; ---------------------------------------------------------------------------
0001C72C                            ; Animated pattern routine - Marble
0001C72C                            ; ---------------------------------------------------------------------------
0001C72C                            
0001C72C                            AniArt_MZ:				; XREF: AniArt_Index
0001C72C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C730 6A00                       		bpl.s	loc_1C150
0001C732 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C738 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C73E 7000                       		moveq	#0,d0
0001C740 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C744 5200                       		addq.b	#1,d0
0001C746 0C00 0003                  		cmpi.b	#3,d0
0001C74A 6600                       		bne.s	loc_1C134
0001C74C 7000                       		moveq	#0,d0
0001C74E                            
0001C74E                            loc_1C134:
0001C74E 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C752 C0FC 0100                  		mulu.w	#$100,d0
0001C756 D2C0                       		adda.w	d0,a1
0001C758 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C762 323C 0007                  		move.w	#7,d1
0001C766 6100 0000                  		bsr.w	LoadTiles
0001C76A                            
0001C76A                            loc_1C150:
0001C76A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C76E 6A00                       		bpl.s	loc_1C1AE
0001C770 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C776 7000                       		moveq	#0,d0
0001C778 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C77C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C782 EE58                       		ror.w	#7,d0
0001C784 D8C0                       		adda.w	d0,a4
0001C786 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C790 7600                       		moveq	#0,d3
0001C792 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C796 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C79A 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C79E 343C 0003                  		move.w	#3,d2
0001C7A2                            
0001C7A2                            loc_1C188:
0001C7A2 3003                       		move.w	d3,d0
0001C7A4 D040                       		add.w	d0,d0
0001C7A6 0240 001E                  		andi.w	#$1E,d0
0001C7AA 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C7B0 3033 0000                  		move.w	(a3,d0.w),d0
0001C7B4 47F3 0000                  		lea	(a3,d0.w),a3
0001C7B8 224C                       		movea.l	a4,a1
0001C7BA 323C 001F                  		move.w	#$1F,d1
0001C7BE 4E93                       		jsr	(a3)
0001C7C0 5843                       		addq.w	#4,d3
0001C7C2 51CA FFDE                  		dbf	d2,loc_1C188
0001C7C6 4E75                       		rts	
0001C7C8                            ; ===========================================================================
0001C7C8                            
0001C7C8                            loc_1C1AE:
0001C7C8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7CC 6A00 0000                  		bpl.w	locret_1C1EA
0001C7D0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7D6 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7DC 7000                       		moveq	#0,d0
0001C7DE 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7E2 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7E6 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7EC C0FC 00C0                  		mulu.w	#$C0,d0
0001C7F0 D2C0                       		adda.w	d0,a1
0001C7F2 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C7FC 323C 0005                  		move.w	#5,d1
0001C800 6000 0000                  		bra.w	LoadTiles
0001C804                            ; ===========================================================================
0001C804                            
0001C804                            locret_1C1EA:
0001C804 4E75                       		rts	
0001C806                            ; ===========================================================================
0001C806                            ; ---------------------------------------------------------------------------
0001C806                            ; Animated pattern routine - Scrap Brain
0001C806                            ; ---------------------------------------------------------------------------
0001C806                            
0001C806                            AniArt_SBZ:				; XREF: AniArt_Index
0001C806 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C80A 6700                       		beq.s	loc_1C1F8
0001C80C 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C810 6000                       		bra.s	loc_1C250
0001C812                            ; ===========================================================================
0001C812                            
0001C812                            loc_1C1F8:
0001C812 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C816 6A00                       		bpl.s	loc_1C250
0001C818 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C81E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C824 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C82E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C832 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C836 0240 0007                  		andi.w	#7,d0
0001C83A 6700                       		beq.s	loc_1C234
0001C83C 5340                       		subq.w	#1,d0
0001C83E C0FC 0180                  		mulu.w	#$180,d0
0001C842 43F1 0000                  		lea	(a1,d0.w),a1
0001C846 323C 000B                  		move.w	#$B,d1
0001C84A 6000 0000                  		bra.w	LoadTiles
0001C84E                            ; ===========================================================================
0001C84E                            
0001C84E                            loc_1C234:
0001C84E 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C854                            
0001C854                            loc_1C23A:
0001C854 323C 0005                  		move.w	#5,d1
0001C858 6100 0000                  		bsr.w	LoadTiles
0001C85C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C862 323C 0005                  		move.w	#5,d1
0001C866 6000 0000                  		bra.w	LoadTiles
0001C86A                            ; ===========================================================================
0001C86A                            
0001C86A                            loc_1C250:
0001C86A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C86E 6700                       		beq.s	loc_1C25C
0001C870 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C874 6000                       		bra.s	locret_1C2A0
0001C876                            ; ===========================================================================
0001C876                            
0001C876                            loc_1C25C:
0001C876 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C87A 6A00                       		bpl.s	locret_1C2A0
0001C87C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C882 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C888 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C892 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C896 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C89A 0240 0007                  		andi.w	#7,d0
0001C89E 6700                       		beq.s	loc_1C298
0001C8A0 5340                       		subq.w	#1,d0
0001C8A2 C0FC 0180                  		mulu.w	#$180,d0
0001C8A6 43F1 0000                  		lea	(a1,d0.w),a1
0001C8AA 323C 000B                  		move.w	#$B,d1
0001C8AE 6000 0000                  		bra.w	LoadTiles
0001C8B2                            ; ===========================================================================
0001C8B2                            
0001C8B2                            loc_1C298:
0001C8B2 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C8B8 609A                       		bra.s	loc_1C23A
0001C8BA                            ; ===========================================================================
0001C8BA                            
0001C8BA                            locret_1C2A0:
0001C8BA 4E75                       		rts	
0001C8BC                            ; ===========================================================================
0001C8BC                            ; ---------------------------------------------------------------------------
0001C8BC                            ; Animated pattern routine - ending sequence
0001C8BC                            ; ---------------------------------------------------------------------------
0001C8BC                            
0001C8BC                            AniArt_Ending:				; XREF: AniArt_Index
0001C8BC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8C0 6A00                       		bpl.s	loc_1C2F4
0001C8C2 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8C8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8CE 45F8 9400                  		lea	($FFFF9400).w,a2
0001C8D2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8D6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8DA 0240 0001                  		andi.w	#1,d0
0001C8DE 6700                       		beq.s	loc_1C2CE
0001C8E0 43E9 0200                  		lea	$200(a1),a1
0001C8E4 45EA 0200                  		lea	$200(a2),a2
0001C8E8                            
0001C8E8                            loc_1C2CE:
0001C8E8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8F2 323C 000F                  		move.w	#$F,d1
0001C8F6 6100 0000                  		bsr.w	LoadTiles
0001C8FA 224A                       		movea.l	a2,a1
0001C8FC 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C906 323C 000F                  		move.w	#$F,d1
0001C90A 6000 0000                  		bra.w	LoadTiles
0001C90E                            ; ===========================================================================
0001C90E                            
0001C90E                            loc_1C2F4:
0001C90E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C912 6A00                       		bpl.s	loc_1C33C
0001C914 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C91A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C91E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C922 0240 0007                  		andi.w	#7,d0
0001C926 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C92A EF48                       		lsl.w	#7,d0
0001C92C 3200                       		move.w	d0,d1
0001C92E D040                       		add.w	d0,d0
0001C930 D041                       		add.w	d1,d0
0001C932 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C93C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C942 43F1 0000                  		lea	(a1,d0.w),a1
0001C946 323C 000B                  		move.w	#$B,d1
0001C94A 6000 0000                  		bra.w	LoadTiles
0001C94E                            ; ===========================================================================
0001C94E 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C956                            ; ===========================================================================
0001C956                            
0001C956                            loc_1C33C:
0001C956 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C95A 6A00                       		bpl.s	loc_1C37A
0001C95C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C962 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C966 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C96A 0240 0003                  		andi.w	#3,d0
0001C96E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C972 E148                       		lsl.w	#8,d0
0001C974 D040                       		add.w	d0,d0
0001C976 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C980 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C984 43F1 0000                  		lea	(a1,d0.w),a1
0001C988 323C 000F                  		move.w	#$F,d1
0001C98C 6000 0000                  		bra.w	LoadTiles
0001C990                            ; ===========================================================================
0001C990 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C994                            ; ===========================================================================
0001C994                            
0001C994                            loc_1C37A:
0001C994 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C998 6A00                       		bpl.s	locret_1C3B4
0001C99A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C9A0 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C9A4 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C9A8 0240 0003                  		andi.w	#3,d0
0001C9AC 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C9B0 E148                       		lsl.w	#8,d0
0001C9B2 D040                       		add.w	d0,d0
0001C9B4 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9BE 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9C2 43F1 0000                  		lea	(a1,d0.w),a1
0001C9C6 323C 000F                  		move.w	#$F,d1
0001C9CA 6000 0000                  		bra.w	LoadTiles
0001C9CE                            ; ===========================================================================
0001C9CE                            
0001C9CE                            locret_1C3B4:
0001C9CE 4E75                       		rts	
0001C9D0                            ; ===========================================================================
0001C9D0                            
0001C9D0                            AniArt_none:				; XREF: AniArt_Index
0001C9D0 4E75                       		rts	
0001C9D2                            
0001C9D2                            ; ---------------------------------------------------------------------------
0001C9D2                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C9D2                            ; ---------------------------------------------------------------------------
0001C9D2                            
0001C9D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9D2                            
0001C9D2                            
0001C9D2                            LoadTiles:
0001C9D2 2C99                       		move.l	(a1)+,(a6)
0001C9D4 2C99                       		move.l	(a1)+,(a6)
0001C9D6 2C99                       		move.l	(a1)+,(a6)
0001C9D8 2C99                       		move.l	(a1)+,(a6)
0001C9DA 2C99                       		move.l	(a1)+,(a6)
0001C9DC 2C99                       		move.l	(a1)+,(a6)
0001C9DE 2C99                       		move.l	(a1)+,(a6)
0001C9E0 2C99                       		move.l	(a1)+,(a6)
0001C9E2 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9E6 4E75                       		rts	
0001C9E8                            ; End of function LoadTiles
0001C9E8                            
0001C9E8                            ; ===========================================================================
0001C9E8                            ; ---------------------------------------------------------------------------
0001C9E8                            ; Animated pattern routine - more Marble Zone
0001C9E8                            ; ---------------------------------------------------------------------------
0001C9E8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9EC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9F0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9F4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9F8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C9FC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CA00 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CA04 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CA08                            ; ===========================================================================
0001CA08                            
0001CA08                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CA08 2C91                       		move.l	(a1),(a6)
0001CA0A 43E9 0010                  		lea	$10(a1),a1
0001CA0E 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CA12 4E75                       		rts	
0001CA14                            ; ===========================================================================
0001CA14                            
0001CA14                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CA14 2029 0002                  		move.l	2(a1),d0
0001CA18 1029 0001                  		move.b	1(a1),d0
0001CA1C E098                       		ror.l	#8,d0
0001CA1E 2C80                       		move.l	d0,(a6)
0001CA20 43E9 0010                  		lea	$10(a1),a1
0001CA24 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA28 4E75                       		rts	
0001CA2A                            ; ===========================================================================
0001CA2A                            
0001CA2A                            loc_1C410:				; XREF: AniArt_MZextra
0001CA2A 2CA9 0002                  		move.l	2(a1),(a6)
0001CA2E 43E9 0010                  		lea	$10(a1),a1
0001CA32 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA36 4E75                       		rts	
0001CA38                            ; ===========================================================================
0001CA38                            
0001CA38                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA38 2029 0004                  		move.l	4(a1),d0
0001CA3C 1029 0003                  		move.b	3(a1),d0
0001CA40 E098                       		ror.l	#8,d0
0001CA42 2C80                       		move.l	d0,(a6)
0001CA44 43E9 0010                  		lea	$10(a1),a1
0001CA48 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA4C 4E75                       		rts	
0001CA4E                            ; ===========================================================================
0001CA4E                            
0001CA4E                            loc_1C434:				; XREF: AniArt_MZextra
0001CA4E 2CA9 0004                  		move.l	4(a1),(a6)
0001CA52 43E9 0010                  		lea	$10(a1),a1
0001CA56 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA5A 4E75                       		rts	
0001CA5C                            ; ===========================================================================
0001CA5C                            
0001CA5C                            loc_1C442:				; XREF: AniArt_MZextra
0001CA5C 2029 0006                  		move.l	6(a1),d0
0001CA60 1029 0005                  		move.b	5(a1),d0
0001CA64 E098                       		ror.l	#8,d0
0001CA66 2C80                       		move.l	d0,(a6)
0001CA68 43E9 0010                  		lea	$10(a1),a1
0001CA6C 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA70 4E75                       		rts	
0001CA72                            ; ===========================================================================
0001CA72                            
0001CA72                            loc_1C458:				; XREF: AniArt_MZextra
0001CA72 2CA9 0006                  		move.l	6(a1),(a6)
0001CA76 43E9 0010                  		lea	$10(a1),a1
0001CA7A 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA7E 4E75                       		rts	
0001CA80                            ; ===========================================================================
0001CA80                            
0001CA80                            loc_1C466:				; XREF: AniArt_MZextra
0001CA80 2029 0008                  		move.l	8(a1),d0
0001CA84 1029 0007                  		move.b	7(a1),d0
0001CA88 E098                       		ror.l	#8,d0
0001CA8A 2C80                       		move.l	d0,(a6)
0001CA8C 43E9 0010                  		lea	$10(a1),a1
0001CA90 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA94 4E75                       		rts	
0001CA96                            ; ===========================================================================
0001CA96                            
0001CA96                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA96 2CA9 0008                  		move.l	8(a1),(a6)
0001CA9A 43E9 0010                  		lea	$10(a1),a1
0001CA9E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CAA2 4E75                       		rts	
0001CAA4                            ; ===========================================================================
0001CAA4                            
0001CAA4                            loc_1C48A:				; XREF: AniArt_MZextra
0001CAA4 2029 000A                  		move.l	$A(a1),d0
0001CAA8 1029 0009                  		move.b	9(a1),d0
0001CAAC E098                       		ror.l	#8,d0
0001CAAE 2C80                       		move.l	d0,(a6)
0001CAB0 43E9 0010                  		lea	$10(a1),a1
0001CAB4 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CAB8 4E75                       		rts	
0001CABA                            ; ===========================================================================
0001CABA                            
0001CABA                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CABA 2CA9 000A                  		move.l	$A(a1),(a6)
0001CABE 43E9 0010                  		lea	$10(a1),a1
0001CAC2 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CAC6 4E75                       		rts	
0001CAC8                            ; ===========================================================================
0001CAC8                            
0001CAC8                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CAC8 2029 000C                  		move.l	$C(a1),d0
0001CACC 1029 000B                  		move.b	$B(a1),d0
0001CAD0 E098                       		ror.l	#8,d0
0001CAD2 2C80                       		move.l	d0,(a6)
0001CAD4 43E9 0010                  		lea	$10(a1),a1
0001CAD8 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CADC 4E75                       		rts	
0001CADE                            ; ===========================================================================
0001CADE                            
0001CADE                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CADE 2CA9 000C                  		move.l	$C(a1),(a6)
0001CAE2 43E9 0010                  		lea	$10(a1),a1
0001CAE6 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAEA 4E75                       		rts	
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAEC 2029 000C                  		move.l	$C(a1),d0
0001CAF0 E198                       		rol.l	#8,d0
0001CAF2 1011                       		move.b	0(a1),d0
0001CAF4 2C80                       		move.l	d0,(a6)
0001CAF6 43E9 0010                  		lea	$10(a1),a1
0001CAFA 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CAFE 4E75                       		rts	
0001CB00                            ; ===========================================================================
0001CB00                            
0001CB00                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CB00 3CA9 000E                  		move.w	$E(a1),(a6)
0001CB04 3C91                       		move.w	0(a1),(a6)
0001CB06 43E9 0010                  		lea	$10(a1),a1
0001CB0A 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CB0E 4E75                       		rts	
0001CB10                            ; ===========================================================================
0001CB10                            
0001CB10                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CB10 2011                       		move.l	0(a1),d0
0001CB12 1029 000F                  		move.b	$F(a1),d0
0001CB16 E098                       		ror.l	#8,d0
0001CB18 2C80                       		move.l	d0,(a6)
0001CB1A 43E9 0010                  		lea	$10(a1),a1
0001CB1E 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB22 4E75                       		rts	
0001CB24                            
0001CB24                            ; ---------------------------------------------------------------------------
0001CB24                            ; Animated pattern routine - giant ring
0001CB24                            ; ---------------------------------------------------------------------------
0001CB24                            
0001CB24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB24                            
0001CB24                            
0001CB24                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB24 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB28 6600                       		bne.s	loc_1C518
0001CB2A 4E75                       		rts	
0001CB2C                            ; ===========================================================================
0001CB2C                            
0001CB2C                            loc_1C518:
0001CB2C 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB32 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB38 7000                       		moveq	#0,d0
0001CB3A 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB3E 43F1 0000                  		lea	(a1,d0.w),a1
0001CB42 0640 8000                  		addi.w	#$8000,d0
0001CB46 E588                       		lsl.l	#2,d0
0001CB48 E448                       		lsr.w	#2,d0
0001CB4A 0040 4000                  		ori.w	#$4000,d0
0001CB4E 4840                       		swap	d0
0001CB50 2D40 0004                  		move.l	d0,4(a6)
0001CB54 323C 000D                  		move.w	#$D,d1
0001CB58 6000 FE78                  		bra.w	LoadTiles
0001CB5C                            ; End of function AniArt_GiantRing
0001CB5C                            
0001CB5C                            ; ===========================================================================
0001CB5C                            ; ---------------------------------------------------------------------------
0001CB5C                            ; Object 21 - SCORE, TIME, RINGS
0001CB5C                            ; ---------------------------------------------------------------------------
0001CB5C                            
0001CB5C                            Obj21:					; XREF: Obj_Index
0001CB5C 7000                       		moveq	#0,d0
0001CB5E 1028 0024                  		move.b	$24(a0),d0
0001CB62 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB66 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB6A                            ; ===========================================================================
0001CB6A 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB6C 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB6E                            ; ===========================================================================
0001CB6E                            
0001CB6E                            Obj21_Main:				; XREF: Obj21_Main
0001CB6E 5428 0024                  		addq.b	#2,$24(a0)
0001CB72 317C 0090 0008             		move.w	#$90,8(a0)
0001CB78 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB7E 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB86 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB8C 117C 0000 0001             		move.b	#0,1(a0)
0001CB92 117C 0000 0018             		move.b	#0,$18(a0)
0001CB98                            
0001CB98                            Obj21_Flash:				; XREF: Obj21_Main
0001CB98 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB9C 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB9E 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CBA2 4EF9 0000 DBCC             		jmp	DisplaySprite
0001CBA8                            ; ===========================================================================
0001CBA8                            
0001CBA8                            Obj21_Flash2:
0001CBA8 7000                       		moveq	#0,d0
0001CBAA 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CBB0 6600                       		bne.s	Obj21_Display
0001CBB2 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CBB4 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBBA 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBBC 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBBE                            
0001CBBE                            Obj21_Display:
0001CBBE 1140 001A                  		move.b	d0,$1A(a0)
0001CBC2 4EF9 0000 DBCC             		jmp	DisplaySprite
0001CBC8                            ; ===========================================================================
0001CBC8                            ; ---------------------------------------------------------------------------
0001CBC8                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBC8                            ; ---------------------------------------------------------------------------
0001CBC8                            Map_obj21:
0001CBC8                            	include "_maps\obj21.asm"
0001CBC8                            ; ---------------------------------------------------------------------------
0001CBC8                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBC8                            ; ---------------------------------------------------------------------------
0001CBC8 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CBCC 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CBD0 0A                         byte_1C5BC:	dc.b $A
0001CBD1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBD6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBDB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBE0 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBE5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBEA A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBEF A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBF4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBF9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBFE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC03 00                         		dc.b 0
0001CC04 0A                         byte_1C5F0:	dc.b $A
0001CC05 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC0A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC0F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC14 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC19 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC1E A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC23 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC28 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC2D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC32 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC37 00                         		dc.b 0
0001CC38 0A                         byte_1C624:	dc.b $A
0001CC39 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC3E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC43 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC48 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC4D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC52 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC57 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC5C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC61 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC66 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC6B 00                         		dc.b 0
0001CC6C 0A                         byte_1C658:	dc.b $A
0001CC6D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC72 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC77 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC7C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC81 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC86 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC8B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC90 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC95 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC9A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CCA0 00                         		even
0001CCA0 00                         		even
0001CCA0                            
0001CCA0                            ; ---------------------------------------------------------------------------
0001CCA0                            ; Add points subroutine
0001CCA0                            ; ---------------------------------------------------------------------------
0001CCA0                            
0001CCA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCA0                            
0001CCA0                            
0001CCA0                            AddPoints:
0001CCA0 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CCA6 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CCAA 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CCAE D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CCB0 223C 000F 423F             		move.l	#999999,d1
0001CCB6 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CCB8 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCBC 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCBE 2481                       		move.l	d1,(a2)
0001CCC0                            
0001CCC0                            loc_1C6AC:
0001CCC0 2013                       		move.l	(a3),d0
0001CCC2 B092                       		cmp.l	(a2),d0
0001CCC4 6500 0000                  		bcs.w	locret_1C6B6
0001CCC8 2480                       		move.l	d0,(a2)
0001CCCA                            
0001CCCA                            locret_1C6B6:
0001CCCA 4E75                       		rts	
0001CCCC                            ; End of function AddPoints
0001CCCC                            
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            ; Subroutine to	update the HUD
0001CCCC                            ; ---------------------------------------------------------------------------
0001CCCC                            
0001CCCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCCC                            
0001CCCC                            
0001CCCC                            HudUpdate:
0001CCCC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CCD0 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CCD4 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CCD8 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CCDA 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCDE 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCE4 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCE8 6100 0000                  		bsr.w	Hud_Score
0001CCEC                            
0001CCEC                            Hud_ChkRings:
0001CCEC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCF0 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCF2 6A00                       		bpl.s	loc_1C6E4
0001CCF4 6100 0000                  		bsr.w	Hud_LoadZero
0001CCF8                            
0001CCF8                            loc_1C6E4:
0001CCF8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCFC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD02 7200                       		moveq	#0,d1
0001CD04 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD08 6100 0000                  		bsr.w	Hud_Rings
0001CD0C                            
0001CD0C                            Hud_ChkTime:
0001CD0C 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CD10 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CD12 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CD16 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CD18 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD1C 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD22 6700                       		beq.s	TimeOver	; if yes, branch
0001CD24 5221                       		addq.b	#1,-(a1)
0001CD26 0C11 003C                  		cmpi.b	#60,(a1)
0001CD2A 6500                       		bcs.s	Hud_ChkLives
0001CD2C 12BC 0000                  		move.b	#0,(a1)
0001CD30 5221                       		addq.b	#1,-(a1)
0001CD32 0C11 003C                  		cmpi.b	#60,(a1)
0001CD36 6500                       		bcs.s	loc_1C734
0001CD38 12BC 0000                  		move.b	#0,(a1)
0001CD3C 5221                       		addq.b	#1,-(a1)
0001CD3E 0C11 0009                  		cmpi.b	#9,(a1)
0001CD42 6500                       		bcs.s	loc_1C734
0001CD44 12BC 0009                  		move.b	#9,(a1)
0001CD48                            
0001CD48                            loc_1C734:
0001CD48 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD4E 7200                       		moveq	#0,d1
0001CD50 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD54 6100 0000                  		bsr.w	Hud_Mins
0001CD58 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD5E 7200                       		moveq	#0,d1
0001CD60 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD64 6100 0000                  		bsr.w	Hud_Secs
0001CD68                            
0001CD68                            Hud_ChkLives:
0001CD68 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD6C 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD6E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD72 6100 0000                  		bsr.w	Hud_Lives
0001CD76                            
0001CD76                            Hud_ChkBonus:
0001CD76 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD7A 6700                       		beq.s	Hud_End		; if not, branch
0001CD7C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD80 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD8A 7200                       		moveq	#0,d1
0001CD8C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD90 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD94 7200                       		moveq	#0,d1
0001CD96 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD9A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD9E                            
0001CD9E                            Hud_End:
0001CD9E 4E75                       		rts	
0001CDA0                            ; ===========================================================================
0001CDA0                            
0001CDA0                            TimeOver:				; XREF: Hud_ChkTime
0001CDA0 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CDA4 41F8 D000                  		lea	($FFFFD000).w,a0
0001CDA8 2448                       		movea.l	a0,a2
0001CDAA 6100 E908                  		bsr.w	KillSonic
0001CDAE 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CDB4 4E75                       		rts	
0001CDB6                            ; ===========================================================================
0001CDB6                            
0001CDB6                            HudDebug:				; XREF: HudUpdate
0001CDB6 6100 0000                  		bsr.w	HudDb_XY
0001CDBA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDBE 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDC0 6A00                       		bpl.s	HudDb_Rings
0001CDC2 6100 0000                  		bsr.w	Hud_LoadZero
0001CDC6                            
0001CDC6                            HudDb_Rings:
0001CDC6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDCA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CDD0 7200                       		moveq	#0,d1
0001CDD2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CDD6 6100 0000                  		bsr.w	Hud_Rings
0001CDDA                            
0001CDDA                            HudDb_ObjCount:
0001CDDA 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDE0 7200                       		moveq	#0,d1
0001CDE2 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDE6 6100 0000                  		bsr.w	Hud_Secs
0001CDEA 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDEE 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDF0 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDF4 6100 0000                  		bsr.w	Hud_Lives
0001CDF8                            
0001CDF8                            HudDb_ChkBonus:
0001CDF8 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CDFC 6700                       		beq.s	HudDb_End	; if not, branch
0001CDFE 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE02 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CE0C 7200                       		moveq	#0,d1
0001CE0E 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE12 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE16 7200                       		moveq	#0,d1
0001CE18 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE1C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE20                            
0001CE20                            HudDb_End:
0001CE20 4E75                       		rts	
0001CE22                            ; End of function HudUpdate
0001CE22                            
0001CE22                            ; ---------------------------------------------------------------------------
0001CE22                            ; Subroutine to	load "0" on the	HUD
0001CE22                            ; ---------------------------------------------------------------------------
0001CE22                            
0001CE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE22                            
0001CE22                            
0001CE22                            Hud_LoadZero:				; XREF: HudUpdate
0001CE22 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE2C 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE30 343C 0002                  		move.w	#2,d2
0001CE34 6000                       		bra.s	loc_1C83E
0001CE36                            ; End of function Hud_LoadZero
0001CE36                            
0001CE36                            ; ---------------------------------------------------------------------------
0001CE36                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE36                            ; ---------------------------------------------------------------------------
0001CE36                            
0001CE36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE36                            
0001CE36                            
0001CE36                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE36 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE3C 6100 0000                  		bsr.w	Hud_Lives
0001CE40 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE4A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE4E 343C 000E                  		move.w	#$E,d2
0001CE52                            
0001CE52                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE52 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE56                            
0001CE56                            loc_1C842:
0001CE56 323C 000F                  		move.w	#$F,d1
0001CE5A 101A                       		move.b	(a2)+,d0
0001CE5C 6B00                       		bmi.s	loc_1C85E
0001CE5E 4880                       		ext.w	d0
0001CE60 EB48                       		lsl.w	#5,d0
0001CE62 47F1 0000                  		lea	(a1,d0.w),a3
0001CE66                            
0001CE66                            loc_1C852:
0001CE66 2C9B                       		move.l	(a3)+,(a6)
0001CE68 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE6C                            
0001CE6C                            loc_1C858:
0001CE6C 51CA FFE8                  		dbf	d2,loc_1C842
0001CE70                            
0001CE70 4E75                       		rts	
0001CE72                            ; ===========================================================================
0001CE72                            
0001CE72                            loc_1C85E:
0001CE72 2CBC 0000 0000             		move.l	#0,(a6)
0001CE78 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE7C                            
0001CE7C 60EE                       		bra.s	loc_1C858
0001CE7E                            ; End of function Hud_Base
0001CE7E                            
0001CE7E                            ; ===========================================================================
0001CE7E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE8A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE8E                            ; ---------------------------------------------------------------------------
0001CE8E                            ; Subroutine to	load debug mode	numbers	patterns
0001CE8E                            ; ---------------------------------------------------------------------------
0001CE8E                            
0001CE8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8E                            
0001CE8E                            
0001CE8E                            HudDb_XY:				; XREF: HudDebug
0001CE8E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE98 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE9C 4841                       		swap	d1
0001CE9E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CEA2 6100                       		bsr.s	HudDb_XY2
0001CEA4 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CEA8 4841                       		swap	d1
0001CEAA 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CEAE                            ; End of function HudDb_XY
0001CEAE                            
0001CEAE                            
0001CEAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEAE                            
0001CEAE                            
0001CEAE                            HudDb_XY2:
0001CEAE 7C07                       		moveq	#7,d6
0001CEB0 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CEB6                            
0001CEB6                            HudDb_XYLoop:
0001CEB6 E959                       		rol.w	#4,d1
0001CEB8 3401                       		move.w	d1,d2
0001CEBA 0242 000F                  		andi.w	#$F,d2
0001CEBE 0C42 000A                  		cmpi.w	#$A,d2
0001CEC2 6500                       		bcs.s	loc_1C8B2
0001CEC4 5E42                       		addq.w	#7,d2
0001CEC6                            
0001CEC6                            loc_1C8B2:
0001CEC6 EB4A                       		lsl.w	#5,d2
0001CEC8 47F1 2000                  		lea	(a1,d2.w),a3
0001CECC 2C9B                       		move.l	(a3)+,(a6)
0001CECE 2C9B                       		move.l	(a3)+,(a6)
0001CED0 2C9B                       		move.l	(a3)+,(a6)
0001CED2 2C9B                       		move.l	(a3)+,(a6)
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 2C9B                       		move.l	(a3)+,(a6)
0001CEDC 4841                       		swap	d1
0001CEDE 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CEE2                            
0001CEE2 4E75                       		rts	
0001CEE4                            ; End of function HudDb_XY2
0001CEE4                            
0001CEE4                            ; ---------------------------------------------------------------------------
0001CEE4                            ; Subroutine to	load rings numbers patterns
0001CEE4                            ; ---------------------------------------------------------------------------
0001CEE4                            
0001CEE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEE4                            
0001CEE4                            
0001CEE4                            Hud_Rings:				; XREF: HudUpdate
0001CEE4 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CEEA 7C02                       		moveq	#2,d6
0001CEEC 6000                       		bra.s	Hud_LoadArt
0001CEEE                            ; End of function Hud_Rings
0001CEEE                            
0001CEEE                            ; ---------------------------------------------------------------------------
0001CEEE                            ; Subroutine to	load score numbers patterns
0001CEEE                            ; ---------------------------------------------------------------------------
0001CEEE                            
0001CEEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEEE                            
0001CEEE                            
0001CEEE                            Hud_Score:				; XREF: HudUpdate
0001CEEE 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEF4 7C05                       		moveq	#5,d6
0001CEF6                            
0001CEF6                            Hud_LoadArt:
0001CEF6 7800                       		moveq	#0,d4
0001CEF8 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEFC                            
0001CEFC                            Hud_ScoreLoop:
0001CEFC 7400                       		moveq	#0,d2
0001CEFE 261A                       		move.l	(a2)+,d3
0001CF00                            
0001CF00                            loc_1C8EC:
0001CF00 9283                       		sub.l	d3,d1
0001CF02 6500                       		bcs.s	loc_1C8F4
0001CF04 5242                       		addq.w	#1,d2
0001CF06 60F8                       		bra.s	loc_1C8EC
0001CF08                            ; ===========================================================================
0001CF08                            
0001CF08                            loc_1C8F4:
0001CF08 D283                       		add.l	d3,d1
0001CF0A 4A42                       		tst.w	d2
0001CF0C 6700                       		beq.s	loc_1C8FE
0001CF0E 383C 0001                  		move.w	#1,d4
0001CF12                            
0001CF12                            loc_1C8FE:
0001CF12 4A44                       		tst.w	d4
0001CF14 6700                       		beq.s	loc_1C92C
0001CF16 ED4A                       		lsl.w	#6,d2
0001CF18 2D40 0004                  		move.l	d0,4(a6)
0001CF1C 47F1 2000                  		lea	(a1,d2.w),a3
0001CF20 2C9B                       		move.l	(a3)+,(a6)
0001CF22 2C9B                       		move.l	(a3)+,(a6)
0001CF24 2C9B                       		move.l	(a3)+,(a6)
0001CF26 2C9B                       		move.l	(a3)+,(a6)
0001CF28 2C9B                       		move.l	(a3)+,(a6)
0001CF2A 2C9B                       		move.l	(a3)+,(a6)
0001CF2C 2C9B                       		move.l	(a3)+,(a6)
0001CF2E 2C9B                       		move.l	(a3)+,(a6)
0001CF30 2C9B                       		move.l	(a3)+,(a6)
0001CF32 2C9B                       		move.l	(a3)+,(a6)
0001CF34 2C9B                       		move.l	(a3)+,(a6)
0001CF36 2C9B                       		move.l	(a3)+,(a6)
0001CF38 2C9B                       		move.l	(a3)+,(a6)
0001CF3A 2C9B                       		move.l	(a3)+,(a6)
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E 2C9B                       		move.l	(a3)+,(a6)
0001CF40                            
0001CF40                            loc_1C92C:
0001CF40 0680 0040 0000             		addi.l	#$400000,d0
0001CF46 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF4A                            
0001CF4A 4E75                       		rts	
0001CF4C                            ; End of function Hud_Score
0001CF4C                            
0001CF4C                            ; ---------------------------------------------------------------------------
0001CF4C                            ; Subroutine to	load countdown numbers on the continue screen
0001CF4C                            ; ---------------------------------------------------------------------------
0001CF4C                            
0001CF4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF4C                            
0001CF4C                            
0001CF4C                            ContScrCounter:				; XREF: ContinueScreen
0001CF4C 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF56 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF5C 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF62 7C01                       		moveq	#1,d6
0001CF64 7800                       		moveq	#0,d4
0001CF66 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF6A                            
0001CF6A                            ContScr_Loop:
0001CF6A 7400                       		moveq	#0,d2
0001CF6C 261A                       		move.l	(a2)+,d3
0001CF6E                            
0001CF6E                            loc_1C95A:
0001CF6E 9283                       		sub.l	d3,d1
0001CF70 6500                       		bcs.s	loc_1C962
0001CF72 5242                       		addq.w	#1,d2
0001CF74 60F8                       		bra.s	loc_1C95A
0001CF76                            ; ===========================================================================
0001CF76                            
0001CF76                            loc_1C962:
0001CF76 D283                       		add.l	d3,d1
0001CF78 ED4A                       		lsl.w	#6,d2
0001CF7A 47F1 2000                  		lea	(a1,d2.w),a3
0001CF7E 2C9B                       		move.l	(a3)+,(a6)
0001CF80 2C9B                       		move.l	(a3)+,(a6)
0001CF82 2C9B                       		move.l	(a3)+,(a6)
0001CF84 2C9B                       		move.l	(a3)+,(a6)
0001CF86 2C9B                       		move.l	(a3)+,(a6)
0001CF88 2C9B                       		move.l	(a3)+,(a6)
0001CF8A 2C9B                       		move.l	(a3)+,(a6)
0001CF8C 2C9B                       		move.l	(a3)+,(a6)
0001CF8E 2C9B                       		move.l	(a3)+,(a6)
0001CF90 2C9B                       		move.l	(a3)+,(a6)
0001CF92 2C9B                       		move.l	(a3)+,(a6)
0001CF94 2C9B                       		move.l	(a3)+,(a6)
0001CF96 2C9B                       		move.l	(a3)+,(a6)
0001CF98 2C9B                       		move.l	(a3)+,(a6)
0001CF9A 2C9B                       		move.l	(a3)+,(a6)
0001CF9C 2C9B                       		move.l	(a3)+,(a6)
0001CF9E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CFA2                            
0001CFA2 4E75                       		rts	
0001CFA4                            ; End of function ContScrCounter
0001CFA4                            
0001CFA4                            ; ===========================================================================
0001CFA4                            ; ---------------------------------------------------------------------------
0001CFA4                            ; HUD counter sizes
0001CFA4                            ; ---------------------------------------------------------------------------
0001CFA4 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CFA8 0000 2710                  Hud_10000:	dc.l 10000
0001CFAC 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CFB0 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CFB4 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CFB8 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFBC                            
0001CFBC                            ; ---------------------------------------------------------------------------
0001CFBC                            ; Subroutine to	load time numbers patterns
0001CFBC                            ; ---------------------------------------------------------------------------
0001CFBC                            
0001CFBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFBC                            
0001CFBC                            
0001CFBC                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFBC 45F9 0001 CFB8             		lea	(Hud_1).l,a2
0001CFC2 7C00                       		moveq	#0,d6
0001CFC4 6000                       		bra.s	loc_1C9BA
0001CFC6                            ; End of function Hud_Mins
0001CFC6                            
0001CFC6                            
0001CFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFC6                            
0001CFC6                            
0001CFC6                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFC6 45F9 0001 CFB4             		lea	(Hud_10).l,a2
0001CFCC 7C01                       		moveq	#1,d6
0001CFCE                            
0001CFCE                            loc_1C9BA:
0001CFCE 7800                       		moveq	#0,d4
0001CFD0 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFD4                            
0001CFD4                            Hud_TimeLoop:
0001CFD4 7400                       		moveq	#0,d2
0001CFD6 261A                       		move.l	(a2)+,d3
0001CFD8                            
0001CFD8                            loc_1C9C4:
0001CFD8 9283                       		sub.l	d3,d1
0001CFDA 6500                       		bcs.s	loc_1C9CC
0001CFDC 5242                       		addq.w	#1,d2
0001CFDE 60F8                       		bra.s	loc_1C9C4
0001CFE0                            ; ===========================================================================
0001CFE0                            
0001CFE0                            loc_1C9CC:
0001CFE0 D283                       		add.l	d3,d1
0001CFE2 4A42                       		tst.w	d2
0001CFE4 6700                       		beq.s	loc_1C9D6
0001CFE6 383C 0001                  		move.w	#1,d4
0001CFEA                            
0001CFEA                            loc_1C9D6:
0001CFEA ED4A                       		lsl.w	#6,d2
0001CFEC 2D40 0004                  		move.l	d0,4(a6)
0001CFF0 47F1 2000                  		lea	(a1,d2.w),a3
0001CFF4 2C9B                       		move.l	(a3)+,(a6)
0001CFF6 2C9B                       		move.l	(a3)+,(a6)
0001CFF8 2C9B                       		move.l	(a3)+,(a6)
0001CFFA 2C9B                       		move.l	(a3)+,(a6)
0001CFFC 2C9B                       		move.l	(a3)+,(a6)
0001CFFE 2C9B                       		move.l	(a3)+,(a6)
0001D000 2C9B                       		move.l	(a3)+,(a6)
0001D002 2C9B                       		move.l	(a3)+,(a6)
0001D004 2C9B                       		move.l	(a3)+,(a6)
0001D006 2C9B                       		move.l	(a3)+,(a6)
0001D008 2C9B                       		move.l	(a3)+,(a6)
0001D00A 2C9B                       		move.l	(a3)+,(a6)
0001D00C 2C9B                       		move.l	(a3)+,(a6)
0001D00E 2C9B                       		move.l	(a3)+,(a6)
0001D010 2C9B                       		move.l	(a3)+,(a6)
0001D012 2C9B                       		move.l	(a3)+,(a6)
0001D014 0680 0040 0000             		addi.l	#$400000,d0
0001D01A 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D01E                            
0001D01E 4E75                       		rts	
0001D020                            ; End of function Hud_Secs
0001D020                            
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            ; Subroutine to	load time/ring bonus numbers patterns
0001D020                            ; ---------------------------------------------------------------------------
0001D020                            
0001D020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D020                            
0001D020                            
0001D020                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D020 45F9 0001 CFAC             		lea	(Hud_1000).l,a2
0001D026 7C03                       		moveq	#3,d6
0001D028 7800                       		moveq	#0,d4
0001D02A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D02E                            
0001D02E                            Hud_BonusLoop:
0001D02E 7400                       		moveq	#0,d2
0001D030 261A                       		move.l	(a2)+,d3
0001D032                            
0001D032                            loc_1CA1E:
0001D032 9283                       		sub.l	d3,d1
0001D034 6500                       		bcs.s	loc_1CA26
0001D036 5242                       		addq.w	#1,d2
0001D038 60F8                       		bra.s	loc_1CA1E
0001D03A                            ; ===========================================================================
0001D03A                            
0001D03A                            loc_1CA26:
0001D03A D283                       		add.l	d3,d1
0001D03C 4A42                       		tst.w	d2
0001D03E 6700                       		beq.s	loc_1CA30
0001D040 383C 0001                  		move.w	#1,d4
0001D044                            
0001D044                            loc_1CA30:
0001D044 4A44                       		tst.w	d4
0001D046 6700                       		beq.s	Hud_ClrBonus
0001D048 ED4A                       		lsl.w	#6,d2
0001D04A 47F1 2000                  		lea	(a1,d2.w),a3
0001D04E 2C9B                       		move.l	(a3)+,(a6)
0001D050 2C9B                       		move.l	(a3)+,(a6)
0001D052 2C9B                       		move.l	(a3)+,(a6)
0001D054 2C9B                       		move.l	(a3)+,(a6)
0001D056 2C9B                       		move.l	(a3)+,(a6)
0001D058 2C9B                       		move.l	(a3)+,(a6)
0001D05A 2C9B                       		move.l	(a3)+,(a6)
0001D05C 2C9B                       		move.l	(a3)+,(a6)
0001D05E 2C9B                       		move.l	(a3)+,(a6)
0001D060 2C9B                       		move.l	(a3)+,(a6)
0001D062 2C9B                       		move.l	(a3)+,(a6)
0001D064 2C9B                       		move.l	(a3)+,(a6)
0001D066 2C9B                       		move.l	(a3)+,(a6)
0001D068 2C9B                       		move.l	(a3)+,(a6)
0001D06A 2C9B                       		move.l	(a3)+,(a6)
0001D06C 2C9B                       		move.l	(a3)+,(a6)
0001D06E                            
0001D06E                            loc_1CA5A:
0001D06E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D072                            
0001D072 4E75                       		rts	
0001D074                            ; ===========================================================================
0001D074                            
0001D074                            Hud_ClrBonus:
0001D074 7A0F                       		moveq	#$F,d5
0001D076                            
0001D076                            Hud_ClrBonusLoop:
0001D076 2CBC 0000 0000             		move.l	#0,(a6)
0001D07C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D080                            
0001D080 60EC                       		bra.s	loc_1CA5A
0001D082                            ; End of function Hud_TimeRingBonus
0001D082                            
0001D082                            ; ---------------------------------------------------------------------------
0001D082                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D082                            ; ---------------------------------------------------------------------------
0001D082                            
0001D082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D082                            
0001D082                            
0001D082                            Hud_Lives:				; XREF: Hud_ChkLives
0001D082 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D088 7200                       		moveq	#0,d1
0001D08A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D08E 45F9 0001 CFB4             		lea	(Hud_10).l,a2
0001D094 7C01                       		moveq	#1,d6
0001D096 7800                       		moveq	#0,d4
0001D098 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D09C                            
0001D09C                            Hud_LivesLoop:
0001D09C 2D40 0004                  		move.l	d0,4(a6)
0001D0A0 7400                       		moveq	#0,d2
0001D0A2 261A                       		move.l	(a2)+,d3
0001D0A4                            
0001D0A4                            loc_1CA90:
0001D0A4 9283                       		sub.l	d3,d1
0001D0A6 6500                       		bcs.s	loc_1CA98
0001D0A8 5242                       		addq.w	#1,d2
0001D0AA 60F8                       		bra.s	loc_1CA90
0001D0AC                            ; ===========================================================================
0001D0AC                            
0001D0AC                            loc_1CA98:
0001D0AC D283                       		add.l	d3,d1
0001D0AE 4A42                       		tst.w	d2
0001D0B0 6700                       		beq.s	loc_1CAA2
0001D0B2 383C 0001                  		move.w	#1,d4
0001D0B6                            
0001D0B6                            loc_1CAA2:
0001D0B6 4A44                       		tst.w	d4
0001D0B8 6700                       		beq.s	Hud_ClrLives
0001D0BA                            
0001D0BA                            loc_1CAA6:
0001D0BA EB4A                       		lsl.w	#5,d2
0001D0BC 47F1 2000                  		lea	(a1,d2.w),a3
0001D0C0 2C9B                       		move.l	(a3)+,(a6)
0001D0C2 2C9B                       		move.l	(a3)+,(a6)
0001D0C4 2C9B                       		move.l	(a3)+,(a6)
0001D0C6 2C9B                       		move.l	(a3)+,(a6)
0001D0C8 2C9B                       		move.l	(a3)+,(a6)
0001D0CA 2C9B                       		move.l	(a3)+,(a6)
0001D0CC 2C9B                       		move.l	(a3)+,(a6)
0001D0CE 2C9B                       		move.l	(a3)+,(a6)
0001D0D0                            
0001D0D0                            loc_1CABC:
0001D0D0 0680 0040 0000             		addi.l	#$400000,d0
0001D0D6 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D0DA                            
0001D0DA 4E75                       		rts	
0001D0DC                            ; ===========================================================================
0001D0DC                            
0001D0DC                            Hud_ClrLives:
0001D0DC 4A46                       		tst.w	d6
0001D0DE 67DA                       		beq.s	loc_1CAA6
0001D0E0 7A07                       		moveq	#7,d5
0001D0E2                            
0001D0E2                            Hud_ClrLivesLoop:
0001D0E2 2CBC 0000 0000             		move.l	#0,(a6)
0001D0E8 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0EC 60E2                       		bra.s	loc_1CABC
0001D0EE                            ; End of function Hud_Lives
0001D0EE                            
0001D0EE                            ; ===========================================================================
0001D0EE                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3EE                            		even
0001D3EE                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D52E                            		even
0001D52E                            ; ===========================================================================
0001D52E                            ; ---------------------------------------------------------------------------
0001D52E                            ; When debug mode is currently in use
0001D52E                            ; ---------------------------------------------------------------------------
0001D52E                            
0001D52E                            DebugMode:				; XREF: Obj01; Obj09
0001D52E 7000                       		moveq	#0,d0
0001D530 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D534 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D538 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D53C                            ; ===========================================================================
0001D53C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D53E 0000                       		dc.w Debug_Skip-Debug_Index
0001D540                            ; ===========================================================================
0001D540                            
0001D540                            Debug_Main:				; XREF: Debug_Index
0001D540 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D544 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D54A 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D550 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D556 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D55C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D562 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D568 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D56E 117C 0000 001A             		move.b	#0,$1A(a0)
0001D574 117C 0000 001C             		move.b	#0,$1C(a0)
0001D57A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D580 6600                       		bne.s	Debug_Zone	; if not, branch
0001D582 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D588 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D58E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D590 6000                       		bra.s	Debug_UseList
0001D592                            ; ===========================================================================
0001D592                            
0001D592                            Debug_Zone:
0001D592 7000                       		moveq	#0,d0
0001D594 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D598                            
0001D598                            Debug_UseList:
0001D598 45F9 0000 0000             		lea	(DebugList).l,a2
0001D59E D040                       		add.w	d0,d0
0001D5A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5A4 3C1A                       		move.w	(a2)+,d6
0001D5A6 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D5AA 6200                       		bhi.s	loc_1CF9E
0001D5AC 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D5B2                            
0001D5B2                            loc_1CF9E:
0001D5B2 6100 0000                  		bsr.w	Debug_ShowItem
0001D5B6 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5BC 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5C2                            
0001D5C2                            Debug_Skip:				; XREF: Debug_Index
0001D5C2 7006                       		moveq	#6,d0
0001D5C4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5CA 6700                       		beq.s	loc_1CFBE
0001D5CC 7000                       		moveq	#0,d0
0001D5CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5D2                            
0001D5D2                            loc_1CFBE:
0001D5D2 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5D8 D040                       		add.w	d0,d0
0001D5DA D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5DE 3C1A                       		move.w	(a2)+,d6
0001D5E0 6100 0000                  		bsr.w	Debug_Control
0001D5E4 4EF9 0000 DBCC             		jmp	DisplaySprite
0001D5EA                            
0001D5EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5EA                            
0001D5EA                            
0001D5EA                            Debug_Control:
0001D5EA 7800                       		moveq	#0,d4
0001D5EC 323C 0001                  		move.w	#1,d1
0001D5F0 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5F4 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5F8 6600                       		bne.s	loc_1D018	; if yes, branch
0001D5FA 1038 F604                  		move.b	($FFFFF604).w,d0
0001D5FE 0240 000F                  		andi.w	#$F,d0
0001D602 6600                       		bne.s	loc_1D000
0001D604 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D60A 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D610 6000 0000                  		bra.w	Debug_BackItem
0001D614                            ; ===========================================================================
0001D614                            
0001D614                            loc_1D000:
0001D614 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D618 6600                       		bne.s	loc_1D01C
0001D61A 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D620 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D624 6600                       		bne.s	loc_1D018
0001D626 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D62C                            
0001D62C                            loc_1D018:
0001D62C 1838 F604                  		move.b	($FFFFF604).w,d4
0001D630                            
0001D630                            loc_1D01C:
0001D630 7200                       		moveq	#0,d1
0001D632 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D636 5241                       		addq.w	#1,d1
0001D638 4841                       		swap	d1
0001D63A E881                       		asr.l	#4,d1
0001D63C 2428 000C                  		move.l	$C(a0),d2
0001D640 2628 0008                  		move.l	8(a0),d3
0001D644 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D648 6700                       		beq.s	loc_1D03C	; if not, branch
0001D64A 9481                       		sub.l	d1,d2
0001D64C 6400                       		bcc.s	loc_1D03C
0001D64E 7400                       		moveq	#0,d2
0001D650                            
0001D650                            loc_1D03C:
0001D650 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D654 6700                       		beq.s	loc_1D052	; if not, branch
0001D656 D481                       		add.l	d1,d2
0001D658 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D65E 6500                       		bcs.s	loc_1D052
0001D660 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D666                            
0001D666                            loc_1D052:
0001D666 0804 0002                  		btst	#2,d4
0001D66A 6700                       		beq.s	loc_1D05E
0001D66C 9681                       		sub.l	d1,d3
0001D66E 6400                       		bcc.s	loc_1D05E
0001D670 7600                       		moveq	#0,d3
0001D672                            
0001D672                            loc_1D05E:
0001D672 0804 0003                  		btst	#3,d4
0001D676 6700                       		beq.s	loc_1D066
0001D678 D681                       		add.l	d1,d3
0001D67A                            
0001D67A                            loc_1D066:
0001D67A 2142 000C                  		move.l	d2,$C(a0)
0001D67E 2143 0008                  		move.l	d3,8(a0)
0001D682                            
0001D682                            Debug_BackItem:
0001D682 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D688 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D68A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D690 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D692 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D696 6400                       		bcc.s	Debug_NoLoop
0001D698 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D69C 6000                       		bra.s	Debug_NoLoop
0001D69E                            ; ===========================================================================
0001D69E                            
0001D69E                            Debug_NextItem:
0001D69E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D6A4 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D6A6 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D6AA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6AE 6200                       		bhi.s	Debug_NoLoop
0001D6B0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D6B6                            
0001D6B6                            Debug_NoLoop:
0001D6B6 6000 0000                  		bra.w	Debug_ShowItem
0001D6BA                            ; ===========================================================================
0001D6BA                            
0001D6BA                            Debug_MakeItem:
0001D6BA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6C0 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6C2 4EB9 0000 E052             		jsr	SingleObjLoad
0001D6C8 6600                       		bne.s	Debug_Exit
0001D6CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001D6D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6D6 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D6DA 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6E0 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6E6 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6EC 7000                       		moveq	#0,d0
0001D6EE 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6F2 E748                       		lsl.w	#3,d0
0001D6F4 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D6FA 4E75                       		rts	
0001D6FC                            ; ===========================================================================
0001D6FC                            
0001D6FC                            Debug_Exit:
0001D6FC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D702 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D704 7000                       		moveq	#0,d0
0001D706 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D70A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D712 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D718 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D71C 3140 000A                  		move.w	d0,$A(a0)
0001D720 3140 000E                  		move.w	d0,$E(a0)
0001D724 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D72A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D730 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D736 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D738 4278 F780                  		clr.w	($FFFFF780).w
0001D73C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D742 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D74A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D750 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D756 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D75C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D762                            
0001D762                            Debug_DoNothing:
0001D762 4E75                       		rts	
0001D764                            ; End of function Debug_Control
0001D764                            
0001D764                            
0001D764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D764                            
0001D764                            
0001D764                            Debug_ShowItem:				; XREF: Debug_Main
0001D764 7000                       		moveq	#0,d0
0001D766 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D76A E748                       		lsl.w	#3,d0
0001D76C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D772 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D778 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D77E 4E75                       		rts	
0001D780                            ; End of function Debug_ShowItem
0001D780                            
0001D780                            ; ===========================================================================
0001D780                            ; ---------------------------------------------------------------------------
0001D780                            ; Debug	list pointers
0001D780                            ; ---------------------------------------------------------------------------
0001D780                            DebugList:
0001D780                            	include "_inc\Debug list pointers.asm"
0001D780                            ; ---------------------------------------------------------------------------
0001D780                            ; Debug	list pointers
0001D780                            ; ---------------------------------------------------------------------------
0001D780 0000                       	dc.w Debug_GHZ-DebugList
0001D782 0000                       	dc.w Debug_LZ-DebugList
0001D784 0000                       	dc.w Debug_MZ-DebugList
0001D786 0000                       	dc.w Debug_SLZ-DebugList
0001D788 0000                       	dc.w Debug_SYZ-DebugList
0001D78A 0000                       	dc.w Debug_SBZ-DebugList
0001D78C 0000                       	dc.w Debug_Ending-DebugList
0001D78C 0000                       	dc.w Debug_Ending-DebugList
0001D78E                            
0001D78E                            ; ---------------------------------------------------------------------------
0001D78E                            ; Debug	list - Green Hill
0001D78E                            ; ---------------------------------------------------------------------------
0001D78E                            Debug_GHZ:
0001D78E                            	include "_inc\Debug list - GHZ.asm"
0001D78E                            ; ---------------------------------------------------------------------------
0001D78E                            ; Debug	list - Green Hill
0001D78E                            ; ---------------------------------------------------------------------------
0001D78E 0010                       	dc.w $10			; number of items in list
0001D790 2500 A440                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D794 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D798 2600 AA46                  	dc.l Map_obj26+$26000000
0001D79C 0000 0680                  	dc.b 0,	0, 6, $80
0001D7A0 1F00 9C38                  	dc.l Map_obj1F+$1F000000
0001D7A4 0000 0400                  	dc.b 0,	0, 4, 0
0001D7A8 2200 9EF4                  	dc.l Map_obj22+$22000000
0001D7AC 0000 0444                  	dc.b 0,	0, 4, $44
0001D7B0 2B00 B0F0                  	dc.l Map_obj2B+$2B000000
0001D7B4 0000 047B                  	dc.b 0,	0, 4, $7B
0001D7B8 3600 D5B4                  	dc.l Map_obj36+$36000000
0001D7BC 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7C0 1800 85E6                  	dc.l Map_obj18+$18000000
0001D7C4 0000 4000                  	dc.b 0,	0, $40,	0
0001D7C8 3B00 D6DA                  	dc.l Map_obj3B+$3B000000
0001D7CC 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D7D0 4000 FD66                  	dc.l Map_obj40+$40000000
0001D7D4 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D7D8 4100 E2E0                  	dc.l Map_obj41+$41000000
0001D7DC 0000 0523                  	dc.b 0,	0, 5, $23
0001D7E0 4200 E506                  	dc.l Map_obj42+$42000000
0001D7E4 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7E8 4400 E814                  	dc.l Map_obj44+$44000000
0001D7EC 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7F0 1900 8654                  	dc.l Map_obj48+$19000000
0001D7F4 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7F8 7901 76F6                  	dc.l Map_obj79+$79000000
0001D7FC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D800 4B00 A480                  	dc.l Map_obj4B+$4B000000
0001D804 0000 2400                  	dc.b 0,	0, $24,	0
0001D808 7D01 7846                  	dc.l Map_obj7D+$7D000000
0001D80C 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D810                            	even
0001D810                            	even
0001D810                            
0001D810                            ; ---------------------------------------------------------------------------
0001D810                            ; Debug	list - Labyrinth
0001D810                            ; ---------------------------------------------------------------------------
0001D810                            Debug_LZ:
0001D810                            	include "_inc\Debug list - LZ.asm"
0001D810                            ; ---------------------------------------------------------------------------
0001D810                            ; Debug	list - Labyrinth
0001D810                            ; ---------------------------------------------------------------------------
0001D810 0019                       	dc.w $19
0001D812 2500 A440                  	dc.l Map_obj25+$25000000
0001D816 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D81A 2600 AA46                  	dc.l Map_obj26+$26000000
0001D81E 0000 0680                  	dc.b 0,	0, 6, $80
0001D822 4100 E2E0                  	dc.l Map_obj41+$41000000
0001D826 0000 0523                  	dc.b 0,	0, 5, $23
0001D82A 2C00 B196                  	dc.l Map_obj2C+$2C000000
0001D82E 0800 2486                  	dc.b 8,	0, $24,	$86
0001D832 2D00 B382                  	dc.l Map_obj2D+$2D000000
0001D836 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D83A 1601 253A                  	dc.l Map_obj16+$16000000
0001D83E 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D842 1601 253A                  	dc.l Map_obj16+$16000000
0001D846 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D84A 3300 C800                  	dc.l Map_obj33+$33000000
0001D84E 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D852 3200 C3C0                  	dc.l Map_obj32+$32000000
0001D856 0000 0513                  	dc.b 0,	0, 5, $13
0001D85A 3600 D5B4                  	dc.l Map_obj36+$36000000
0001D85E 0000 051B                  	dc.b 0,	0, 5, $1B
0001D862 5201 065C                  	dc.l Map_obj52a+$52000000
0001D866 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D86A 6101 2762                  	dc.l Map_obj61+$61000000
0001D86E 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D872 6101 2762                  	dc.l Map_obj61+$61000000
0001D876 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D87A 6101 2762                  	dc.l Map_obj61+$61000000
0001D87E 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D882 6201 28B6                  	dc.l Map_obj62+$62000000
0001D886 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D88A 6101 2762                  	dc.l Map_obj61+$61000000
0001D88E 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D892 6101 2762                  	dc.l Map_obj61+$61000000
0001D896 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D89A 6301 2C18                  	dc.l Map_obj63+$63000000
0001D89E 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D8A2 6001 2484                  	dc.l Map_obj60+$60000000
0001D8A6 0000 0467                  	dc.b 0,	0, 4, $67
0001D8AA 6401 2F5E                  	dc.l Map_obj64+$64000000
0001D8AE 8413 8348                  	dc.b $84, $13, $83, $48
0001D8B2 6501 30E6                  	dc.l Map_obj65+$65000000
0001D8B6 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8BA 6501 30E6                  	dc.l Map_obj65+$65000000
0001D8BE 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8C2 0B01 18D4                  	dc.l Map_obj0B+$B000000
0001D8C6 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8CA 0C01 19A4                  	dc.l Map_obj0C+$C000000
0001D8CE 0200 4328                  	dc.b 2,	0, $43,	$28
0001D8D2 7901 76F6                  	dc.l Map_obj79+$79000000
0001D8D6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8DA                            	even
0001D8DA                            	even
0001D8DA                            
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA                            ; Debug	list - Marble
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA                            Debug_MZ:
0001D8DA                            	include "_inc\Debug list - MZ.asm"
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA                            ; Debug	list - Marble
0001D8DA                            ; ---------------------------------------------------------------------------
0001D8DA 0012                       	dc.w $12
0001D8DC 2500 A440                  	dc.l Map_obj25+$25000000
0001D8E0 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8E4 2600 AA46                  	dc.l Map_obj26+$26000000
0001D8E8 0000 0680                  	dc.b 0,	0, 6, $80
0001D8EC 2200 9EF4                  	dc.l Map_obj22+$22000000
0001D8F0 0000 0444                  	dc.b 0,	0, 4, $44
0001D8F4 3600 D5B4                  	dc.l Map_obj36+$36000000
0001D8F8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8FC 4100 E2E0                  	dc.l Map_obj41+$41000000
0001D900 0000 0523                  	dc.b 0,	0, 5, $23
0001D904 1300 B890                  	dc.l Map_obj14+$13000000
0001D908 0000 0345                  	dc.b 0,	0, 3, $45
0001D90C 4600 EEC6                  	dc.l Map_obj46+$46000000
0001D910 0000 4000                  	dc.b 0,	0, $40,	0
0001D914 4C00 F812                  	dc.l Map_obj4C+$4C000000
0001D918 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D91C 4E00 FAF6                  	dc.l Map_obj4E+$4E000000
0001D920 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D924 3300 C800                  	dc.l Map_obj33+$33000000
0001D928 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D92C 5000 FEF4                  	dc.l Map_obj50+$50000000
0001D930 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D934 5101 0390                  	dc.l Map_obj51+$51000000
0001D938 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D93C 5201 0606                  	dc.l Map_obj52+$52000000
0001D940 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D944 5300 8BEC                  	dc.l Map_obj53+$53000000
0001D948 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D94C 5400 F7D8                  	dc.l Map_obj54+$54000000
0001D950 0000 8680                  	dc.b 0,	0, $86,	$80
0001D954 5501 07FA                  	dc.l Map_obj55+$55000000
0001D958 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D95C 7801 7370                  	dc.l Map_obj78+$78000000
0001D960 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D964 7901 76F6                  	dc.l Map_obj79+$79000000
0001D968 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D96C                            	even
0001D96C                            	even
0001D96C                            
0001D96C                            ; ---------------------------------------------------------------------------
0001D96C                            ; Debug	list - Star Light
0001D96C                            ; ---------------------------------------------------------------------------
0001D96C                            Debug_SLZ:
0001D96C                            	include "_inc\Debug list - SLZ.asm"
0001D96C                            ; ---------------------------------------------------------------------------
0001D96C                            ; Debug	list - Star Light
0001D96C                            ; ---------------------------------------------------------------------------
0001D96C 000F                       	dc.w $F
0001D96E 2500 A440                  	dc.l Map_obj25+$25000000
0001D972 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D976 2600 AA46                  	dc.l Map_obj26+$26000000
0001D97A 0000 0680                  	dc.b 0,	0, 6, $80
0001D97E 5901 12FC                  	dc.l Map_obj59+$59000000
0001D982 0000 4000                  	dc.b 0,	0, $40,	0
0001D986 5300 8BEC                  	dc.l Map_obj53+$53000000
0001D98A 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D98E 1800 8644                  	dc.l Map_obj18b+$18000000
0001D992 0000 4000                  	dc.b 0,	0, $40,	0
0001D996 5A01 1436                  	dc.l Map_obj5A+$5A000000
0001D99A 0000 4000                  	dc.b 0,	0, $40,	0
0001D99E 5B01 15EE                  	dc.l Map_obj5B+$5B000000
0001D9A2 0000 4000                  	dc.b 0,	0, $40,	0
0001D9A6 5D01 1BBE                  	dc.l Map_obj5D+$5D000000
0001D9AA 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D9AE 5E01 1F50                  	dc.l Map_obj5E+$5E000000
0001D9B2 0000 0374                  	dc.b 0,	0, 3, $74
0001D9B6 4100 E2E0                  	dc.l Map_obj41+$41000000
0001D9BA 0000 0523                  	dc.b 0,	0, 5, $23
0001D9BE 1300 B890                  	dc.l Map_obj14+$13000000
0001D9C2 0000 0480                  	dc.b 0,	0, 4, $80
0001D9C6 1C00 8CFC                  	dc.l Map_obj1C+$1C000000
0001D9CA 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D9CE 5F01 21CE                  	dc.l Map_obj5F+$5F000000
0001D9D2 0000 0400                  	dc.b 0,	0, 4, 0
0001D9D6 6001 2484                  	dc.l Map_obj60+$60000000
0001D9DA 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9DE 7901 76F6                  	dc.l Map_obj79+$79000000
0001D9E2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9E6                            	even
0001D9E6                            	even
0001D9E6                            
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6                            ; Debug	list - Spring Yard
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6                            Debug_SYZ:
0001D9E6                            	include "_inc\Debug list - SYZ.asm"
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6                            ; Debug	list - Spring Yard
0001D9E6                            ; ---------------------------------------------------------------------------
0001D9E6 000F                       	dc.w $F
0001D9E8 2500 A440                  	dc.l Map_obj25+$25000000
0001D9EC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9F0 2600 AA46                  	dc.l Map_obj26+$26000000
0001D9F4 0000 0680                  	dc.b 0,	0, 6, $80
0001D9F8 3600 D5B4                  	dc.l Map_obj36+$36000000
0001D9FC 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA00 4100 E2E0                  	dc.l Map_obj41+$41000000
0001DA04 0000 0523                  	dc.b 0,	0, 5, $23
0001DA08 4300 E766                  	dc.l Map_obj43+$43000000
0001DA0C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA10 1200 EF44                  	dc.l Map_obj12+$12000000
0001DA14 0000 0000                  	dc.b 0,	0, 0, 0
0001DA18 4700 F0C0                  	dc.l Map_obj47+$47000000
0001DA1C 0000 0380                  	dc.b 0,	0, 3, $80
0001DA20 1F00 9C38                  	dc.l Map_obj1F+$1F000000
0001DA24 0000 0400                  	dc.b 0,	0, 4, 0
0001DA28 2200 9EF4                  	dc.l Map_obj22+$22000000
0001DA2C 0000 0444                  	dc.b 0,	0, 4, $44
0001DA30 5000 FEF4                  	dc.l Map_obj50+$50000000
0001DA34 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA38 1800 8632                  	dc.l Map_obj18a+$18000000
0001DA3C 0000 4000                  	dc.b 0,	0, $40,	0
0001DA40 5601 0CBC                  	dc.l Map_obj56+$56000000
0001DA44 0000 4000                  	dc.b 0,	0, $40,	0
0001DA48 3200 C3C0                  	dc.l Map_obj32+$32000000
0001DA4C 0000 0513                  	dc.b 0,	0, 5, $13
0001DA50 7801 7370                  	dc.l Map_obj78+$78000000
0001DA54 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA58 7901 76F6                  	dc.l Map_obj79+$79000000
0001DA5C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA60                            	even
0001DA60                            	even
0001DA60                            
0001DA60                            ; ---------------------------------------------------------------------------
0001DA60                            ; Debug	list - Scrap Brain
0001DA60                            ; ---------------------------------------------------------------------------
0001DA60                            Debug_SBZ:
0001DA60                            	include "_inc\Debug list - SBZ.asm"
0001DA60                            ; ---------------------------------------------------------------------------
0001DA60                            ; Debug	list - Scrap Brain
0001DA60                            ; ---------------------------------------------------------------------------
0001DA60 001D                       	dc.w $1D
0001DA62 2500 A440                  	dc.l Map_obj25+$25000000
0001DA66 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA6A 2600 AA46                  	dc.l Map_obj26+$26000000
0001DA6E 0000 0680                  	dc.b 0,	0, 6, $80
0001DA72 5F01 21CE                  	dc.l Map_obj5F+$5F000000
0001DA76 0000 0400                  	dc.b 0,	0, 4, 0
0001DA7A 6001 2484                  	dc.l Map_obj60+$60000000
0001DA7E 0000 0429                  	dc.b 0,	0, 4, $29
0001DA82 7801 7370                  	dc.l Map_obj78+$78000000
0001DA86 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA8A 1501 1058                  	dc.l Map_obj15b+$15000000
0001DA8E 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA92 6701 5C94                  	dc.l Map_obj67+$67000000
0001DA96 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA9A 5201 0606                  	dc.l Map_obj52+$52000000
0001DA9E 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DAA2 3200 C3C0                  	dc.l Map_obj32+$32000000
0001DAA6 0000 0513                  	dc.b 0,	0, 5, $13
0001DAAA 6901 5EEE                  	dc.l Map_obj69+$69000000
0001DAAE 0300 4492                  	dc.b 3,	0, $44,	$92
0001DAB2 6901 5F48                  	dc.l Map_obj69a+$69000000
0001DAB6 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DABA 6A01 61A6                  	dc.l Map_obj6A+$6A000000
0001DABE 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAC2 5300 8BEC                  	dc.l Map_obj53+$53000000
0001DAC6 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DACA 5201 0606                  	dc.l Map_obj52+$52000000
0001DACE 3903 4460                  	dc.b $39, 3, $44, $60
0001DAD2 6B01 6576                  	dc.l Map_obj6B+$6B000000
0001DAD6 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DADA 2A00 8E92                  	dc.l Map_obj2A+$2A000000
0001DADE 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DAE2 6B01 6576                  	dc.l Map_obj6B+$6B000000
0001DAE6 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAEA 6A01 61A6                  	dc.l Map_obj6A+$6A000000
0001DAEE 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DAF2 6B01 6576                  	dc.l Map_obj6B+$6B000000
0001DAF6 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DAFA 6A01 61A6                  	dc.l Map_obj6A+$6A000000
0001DAFE 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DB02 6B01 6576                  	dc.l Map_obj6B+$6B000000
0001DB06 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DB0A 6C01 6738                  	dc.l Map_obj6C+$6C000000
0001DB0E 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DB12 6D00 EBB6                  	dc.l Map_obj6D+$6D000000
0001DB16 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB1A 6D00 EBB6                  	dc.l Map_obj6D+$6D000000
0001DB1E 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB22 6E01 67EE                  	dc.l Map_obj6E+$6E000000
0001DB26 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB2A 7001 6C34                  	dc.l Map_obj70+$70000000
0001DB2E 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB32 7101 1A64                  	dc.l Map_obj71+$71000000
0001DB36 1100 8680                  	dc.b $11, 0, $86, $80
0001DB3A 1E00 9350                  	dc.l Map_obj1E+$1E000000
0001DB3E 0400 2302                  	dc.b 4,	0, $23,	2
0001DB42 7901 76F6                  	dc.l Map_obj79+$79000000
0001DB46 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB4A                            	even
0001DB4A                            	even
0001DB4A                            
0001DB4A                            ; ---------------------------------------------------------------------------
0001DB4A                            ; Debug	list - ending sequence / special stage
0001DB4A                            ; ---------------------------------------------------------------------------
0001DB4A                            Debug_Ending:
0001DB4A                            	include "_inc\Debug list - Ending and SS.asm"
0001DB4A                            ; ---------------------------------------------------------------------------
0001DB4A                            ; Debug	list - ending sequence / special stage
0001DB4A                            ; ---------------------------------------------------------------------------
0001DB4A 000D                       	dc.w $D
0001DB4C 2500 A440                  	dc.l Map_obj25+$25000000
0001DB50 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB54 4700 F0C0                  	dc.l Map_obj47+$47000000
0001DB58 0000 0380                  	dc.b 0,	0, 3, $80
0001DB5C 2800 996A                  	dc.l Map_obj28a+$28000000
0001DB60 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB64 2800 996A                  	dc.l Map_obj28a+$28000000
0001DB68 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB6C 2800 996A                  	dc.l Map_obj28a+$28000000
0001DB70 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB74 2800 9952                  	dc.l Map_obj28+$28000000
0001DB78 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB7C 2800 9952                  	dc.l Map_obj28+$28000000
0001DB80 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB84 2800 9952                  	dc.l Map_obj28+$28000000
0001DB88 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB8C 2800 9952                  	dc.l Map_obj28+$28000000
0001DB90 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB94 2800 996A                  	dc.l Map_obj28a+$28000000
0001DB98 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB9C 2800 9982                  	dc.l Map_obj28b+$28000000
0001DBA0 1200 0593                  	dc.b $12, 0, 5,	$93
0001DBA4 2800 996A                  	dc.l Map_obj28a+$28000000
0001DBA8 1300 0565                  	dc.b $13, 0, 5,	$65
0001DBAC 2800 9982                  	dc.l Map_obj28b+$28000000
0001DBB0 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DBB4                            	even
0001DBB4                            	even
0001DBB4                            
0001DBB4                            ; ---------------------------------------------------------------------------
0001DBB4                            ; Main level load blocks
0001DBB4                            ; ---------------------------------------------------------------------------
0001DBB4                            MainLoadBlocks:
0001DBB4                            	include "_inc\Main level load blocks.asm"
0001DBB4                            ; ---------------------------------------------------------------------------
0001DBB4                            ; Main level load blocks
0001DBB4                            ;
0001DBB4                            ; ===FORMAT===
0001DBB4                            ; level	patterns + (1st	PLC num	* 10^6)
0001DBB4                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DBB4                            ; 256x256 mappings
0001DBB4                            ; blank, music (unused), pal index (unused), pal index
0001DBB4                            ; ---------------------------------------------------------------------------
0001DBB4 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DBB8 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBBC 0000 0000                  	dc.l Blk256_GHZ
0001DBC0 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBC4 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBC8 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DBCC 0000 0000                  	dc.l Blk256_LZ
0001DBD0 0082 0505                  	dc.b 0,	$82, 5,	5
0001DBD4 0000 0000                  	dc.l Nem_MZ+$8000000
0001DBD8 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBDC 0000 0000                  	dc.l Blk256_MZ
0001DBE0 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBE4 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBE8 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBEC 0000 0000                  	dc.l Blk256_SLZ
0001DBF0 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBF4 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBF8 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DBFC 0000 0000                  	dc.l Blk256_SYZ
0001DC00 0085 0808                  	dc.b 0,	$85, 8,	8
0001DC04 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DC08 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DC0C 0000 0000                  	dc.l Blk256_SBZ
0001DC10 0086 0909                  	dc.b 0,	$86, 9,	9
0001DC14 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DC18 0000 0000                  	dc.l Blk16_GHZ
0001DC1C 0000 0000                  	dc.l Blk256_GHZ
0001DC20 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC24                            	even
0001DC24                            	even
0001DC24                            
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Pattern load cues
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ArtLoadCues:
0001DC24                            	include "_inc\Pattern load cues.asm"
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24                            ; Pattern load cues - index
0001DC24                            ; ---------------------------------------------------------------------------
0001DC24 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC28 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC2C 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC30 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC34 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC38 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC3C 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC40 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC44 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC48 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC4C 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC50 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC54 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC58 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC5C 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC60 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC64                            ; ---------------------------------------------------------------------------
0001DC64                            ; Pattern load cues - standard block 1
0001DC64                            ; ---------------------------------------------------------------------------
0001DC64 0004                       PLC_Main:	dc.w 4
0001DC66 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC6A F400                       		dc.w $F400
0001DC6C 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC70 D940                       		dc.w $D940
0001DC72 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC76 FA80                       		dc.w $FA80
0001DC78 0000 0000                  		dc.l Nem_Ring		; rings
0001DC7C F640                       		dc.w $F640
0001DC7E 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC82 F2E0                       		dc.w $F2E0
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84                            ; Pattern load cues - standard block 2
0001DC84                            ; ---------------------------------------------------------------------------
0001DC84 0002                       PLC_Main2:	dc.w 2
0001DC86 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC8A D000                       		dc.w $D000
0001DC8C 0000 0000                  		dc.l Nem_Shield		; shield
0001DC90 A820                       		dc.w $A820
0001DC92 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC96 AB80                       		dc.w $AB80
0001DC98                            ; ---------------------------------------------------------------------------
0001DC98                            ; Pattern load cues - explosion
0001DC98                            ; ---------------------------------------------------------------------------
0001DC98 0000                       PLC_Explode:	dc.w 0
0001DC9A 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC9E B400                       		dc.w $B400
0001DCA0                            ; ---------------------------------------------------------------------------
0001DCA0                            ; Pattern load cues - game/time	over
0001DCA0                            ; ---------------------------------------------------------------------------
0001DCA0 0000                       PLC_GameOver:	dc.w 0
0001DCA2 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DCA6 ABC0                       		dc.w $ABC0
0001DCA8                            ; ---------------------------------------------------------------------------
0001DCA8                            ; Pattern load cues - Green Hill
0001DCA8                            ; ---------------------------------------------------------------------------
0001DCA8 000B                       PLC_GHZ:	dc.w $B
0001DCAA 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DCAE 0000                       		dc.w 0
0001DCB0 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DCB4 39A0                       		dc.w $39A0
0001DCB6 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCBA 6B00                       		dc.w $6B00
0001DCBC 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCC0 7A00                       		dc.w $7A00
0001DCC2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCC6 8000                       		dc.w $8000
0001DCC8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCCC 8880                       		dc.w $8880
0001DCCE 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DCD2 8F60                       		dc.w $8F60
0001DCD4 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DCD8 9360                       		dc.w $9360
0001DCDA 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCDE 9E00                       		dc.w $9E00
0001DCE0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCE4 A360                       		dc.w $A360
0001DCE6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCEA A460                       		dc.w $A460
0001DCEC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCF0 A660                       		dc.w $A660
0001DCF2 0005                       PLC_GHZ2:	dc.w 5
0001DCF4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCF8 7000                       		dc.w $7000
0001DCFA 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DCFE 71C0                       		dc.w $71C0
0001DD00 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DD04 7300                       		dc.w $7300
0001DD06 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DD0A 7540                       		dc.w $7540
0001DD0C 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DD10 A1E0                       		dc.w $A1E0
0001DD12 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DD16 6980                       		dc.w $6980
0001DD18                            ; ---------------------------------------------------------------------------
0001DD18                            ; Pattern load cues - Labyrinth
0001DD18                            ; ---------------------------------------------------------------------------
0001DD18 000B                       PLC_LZ:		dc.w $B
0001DD1A 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD1E 0000                       		dc.w 0
0001DD20 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD24 3C00                       		dc.w $3C00
0001DD26 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD2A 3E00                       		dc.w $3E00
0001DD2C 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD30 4B20                       		dc.w $4B20
0001DD32 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD36 6000                       		dc.w $6000
0001DD38 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD3C 6200                       		dc.w $6200
0001DD3E 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD42 6500                       		dc.w $6500
0001DD44 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD48 6900                       		dc.w $6900
0001DD4A 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD4E 7780                       		dc.w $7780
0001DD50 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD54 7880                       		dc.w $7880
0001DD56 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD5A 7980                       		dc.w $7980
0001DD5C 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD60 94C0                       		dc.w $94C0
0001DD62 000C                       PLC_LZ2:	dc.w $C
0001DD64 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD68 7BC0                       		dc.w $7BC0
0001DD6A 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD6E 7CC0                       		dc.w $7CC0
0001DD70 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD74 7EC0                       		dc.w $7EC0
0001DD76 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD7A 5D20                       		dc.w $5D20
0001DD7C 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD80 8800                       		dc.w $8800
0001DD82 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD86 89E0                       		dc.w $89E0
0001DD88 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD8C 8CE0                       		dc.w $8CE0
0001DD8E 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD92 90C0                       		dc.w $90C0
0001DD94 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD98 A1E0                       		dc.w $A1E0
0001DD9A 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD9E A000                       		dc.w $A000
0001DDA0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDA4 A360                       		dc.w $A360
0001DDA6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDAA A460                       		dc.w $A460
0001DDAC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDB0 A660                       		dc.w $A660
0001DDB2                            ; ---------------------------------------------------------------------------
0001DDB2                            ; Pattern load cues - Marble
0001DDB2                            ; ---------------------------------------------------------------------------
0001DDB2 0009                       PLC_MZ:		dc.w 9
0001DDB4 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DDB8 0000                       		dc.w 0
0001DDBA 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDBE 6000                       		dc.w $6000
0001DDC0 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDC4 68A0                       		dc.w $68A0
0001DDC6 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDCA 7000                       		dc.w $7000
0001DDCC 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DDD0 71C0                       		dc.w $71C0
0001DDD2 0000 0000                  		dc.l Nem_Lava		; lava
0001DDD6 7500                       		dc.w $7500
0001DDD8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDDC 8880                       		dc.w $8880
0001DDDE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDE2 8F60                       		dc.w $8F60
0001DDE4 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDE8 9700                       		dc.w $9700
0001DDEA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDEE 9FE0                       		dc.w $9FE0
0001DDF0 0004                       PLC_MZ2:	dc.w 4
0001DDF2 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDF6 A260                       		dc.w $A260
0001DDF8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDFC A360                       		dc.w $A360
0001DDFE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE02 A460                       		dc.w $A460
0001DE04 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE08 A660                       		dc.w $A660
0001DE0A 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DE0E 5700                       		dc.w $5700
0001DE10                            ; ---------------------------------------------------------------------------
0001DE10                            ; Pattern load cues - Star Light
0001DE10                            ; ---------------------------------------------------------------------------
0001DE10 0008                       PLC_SLZ:	dc.w 8
0001DE12 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DE16 0000                       		dc.w 0
0001DE18 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE1C 8000                       		dc.w $8000
0001DE1E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE22 8520                       		dc.w $8520
0001DE24 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE28 9000                       		dc.w $9000
0001DE2A 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE2E 9C00                       		dc.w $9C00
0001DE30 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE34 A260                       		dc.w $A260
0001DE36 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE3A A360                       		dc.w $A360
0001DE3C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE40 A460                       		dc.w $A460
0001DE42 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE46 A660                       		dc.w $A660
0001DE48 0005                       PLC_SLZ2:	dc.w 5
0001DE4A 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE4E 6E80                       		dc.w $6E80
0001DE50 0000 0000                  		dc.l Nem_Fan		; fan
0001DE54 7400                       		dc.w $7400
0001DE56 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE5A 7980                       		dc.w $7980
0001DE5C 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE60 7B80                       		dc.w $7B80
0001DE62 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE66 9B00                       		dc.w $9B00
0001DE68 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE6C 9E00                       		dc.w $9E00
0001DE6E                            ; ---------------------------------------------------------------------------
0001DE6E                            ; Pattern load cues - Spring Yard
0001DE6E                            ; ---------------------------------------------------------------------------
0001DE6E 0004                       PLC_SYZ:	dc.w 4
0001DE70 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE74 0000                       		dc.w 0
0001DE76 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE7A 8000                       		dc.w $8000
0001DE7C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE80 8880                       		dc.w $8880
0001DE82 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE86 8F60                       		dc.w $8F60
0001DE88 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE8C 9700                       		dc.w $9700
0001DE8E 0007                       PLC_SYZ2:	dc.w 7
0001DE90 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE94 7000                       		dc.w $7000
0001DE96 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE9A 72C0                       		dc.w $72C0
0001DE9C 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DEA0 7740                       		dc.w $7740
0001DEA2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEA6 9FE0                       		dc.w $9FE0
0001DEA8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEAC A1E0                       		dc.w $A1E0
0001DEAE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEB2 A360                       		dc.w $A360
0001DEB4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEB8 A460                       		dc.w $A460
0001DEBA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEBE A660                       		dc.w $A660
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0                            ; Pattern load cues - Scrap Brain
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0 000B                       PLC_SBZ:	dc.w $B
0001DEC2 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DEC6 0000                       		dc.w 0
0001DEC8 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DECC 5800                       		dc.w $5800
0001DECE 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DED2 5D00                       		dc.w $5D00
0001DED4 0000 0000                  		dc.l Nem_Girder		; girder
0001DED8 5E00                       		dc.w $5E00
0001DEDA 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DEDE 6040                       		dc.w $6040
0001DEE0 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DEE4 6880                       		dc.w $6880
0001DEE6 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DEEA 6900                       		dc.w $6900
0001DEEC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEF0 7220                       		dc.w $7220
0001DEF2 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEF6 76A0                       		dc.w $76A0
0001DEF8 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DEFC 7B20                       		dc.w $7B20
0001DEFE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF02 7EA0                       		dc.w $7EA0
0001DF04 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DF08 9860                       		dc.w $9860
0001DF0A 000C                       PLC_SBZ2:	dc.w $C
0001DF0C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DF10 5600                       		dc.w $5600
0001DF12 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF16 8000                       		dc.w $8000
0001DF18 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF1C 8520                       		dc.w $8520
0001DF1E 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF22 8C00                       		dc.w $8C00
0001DF24 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF28 8DE0                       		dc.w $8DE0
0001DF2A 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF2E 8FC0                       		dc.w $8FC0
0001DF30 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF34 9240                       		dc.w $9240
0001DF36 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF3A 7F20                       		dc.w $7F20
0001DF3C 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF40 9BE0                       		dc.w $9BE0
0001DF42 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF46 A1E0                       		dc.w $A1E0
0001DF48 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF4C A360                       		dc.w $A360
0001DF4E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF52 A460                       		dc.w $A460
0001DF54 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF58 A660                       		dc.w $A660
0001DF5A                            ; ---------------------------------------------------------------------------
0001DF5A                            ; Pattern load cues - title card
0001DF5A                            ; ---------------------------------------------------------------------------
0001DF5A 0000                       PLC_TitleCard:	dc.w 0
0001DF5C 0000 0000                  		dc.l Nem_TitleCard
0001DF60 B000                       		dc.w $B000
0001DF62                            ; ---------------------------------------------------------------------------
0001DF62                            ; Pattern load cues - act 3 boss
0001DF62                            ; ---------------------------------------------------------------------------
0001DF62 0005                       PLC_Boss:	dc.w 5
0001DF64 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF68 8000                       		dc.w $8000
0001DF6A 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF6E 8D80                       		dc.w $8D80
0001DF70 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF74 93A0                       		dc.w $93A0
0001DF76 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF7A A300                       		dc.w $A300
0001DF7C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF80 A300                       		dc.w $A300
0001DF82 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF86 A540                       		dc.w $A540
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88                            ; Pattern load cues - act 1/2 signpost
0001DF88                            ; ---------------------------------------------------------------------------
0001DF88 0002                       PLC_Signpost:	dc.w 2
0001DF8A 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF8E D000                       		dc.w $D000
0001DF90 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF94 96C0                       		dc.w $96C0
0001DF96 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF9A 8C40                       		dc.w $8C40
0001DF9C                            ; ---------------------------------------------------------------------------
0001DF9C                            ; Pattern load cues - beta special stage warp effect
0001DF9C                            ; ---------------------------------------------------------------------------
0001DF9C 0000                       PLC_Warp:	dc.w 0
0001DF9E 0000 0000                  		dc.l Nem_Warp
0001DFA2 A820                       		dc.w $A820
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4                            ; Pattern load cues - special stage
0001DFA4                            ; ---------------------------------------------------------------------------
0001DFA4 0010                       PLC_SpeStage:	dc.w $10
0001DFA6 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DFAA 0000                       		dc.w 0
0001DFAC 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DFB0 0A20                       		dc.w $A20
0001DFB2 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DFB6 2840                       		dc.w $2840
0001DFB8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFBC 4760                       		dc.w $4760
0001DFBE 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFC2 4A20                       		dc.w $4A20
0001DFC4 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFC8 4C60                       		dc.w $4C60
0001DFCA 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DFCE 5E00                       		dc.w $5E00
0001DFD0 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DFD4 6E00                       		dc.w $6E00
0001DFD6 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DFDA 7E00                       		dc.w $7E00
0001DFDC 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFE0 8E00                       		dc.w $8E00
0001DFE2 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFE6 9E00                       		dc.w $9E00
0001DFE8 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFEC AE00                       		dc.w $AE00
0001DFEE 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFF2 BE00                       		dc.w $BE00
0001DFF4 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFF8 EE00                       		dc.w $EE00
0001DFFA 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DFFE F2E0                       		dc.w $F2E0
0001E000 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E004 F400                       		dc.w $F400
0001E006 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E00A F520                       		dc.w $F520
0001E00C 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E010 F2E0                       		dc.w $F2E0
0001E012 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E016 F400                       		dc.w $F400
0001E018 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E01C F520                       		dc.w $F520
0001E01E                            ; ---------------------------------------------------------------------------
0001E01E                            ; Pattern load cues - GHZ animals
0001E01E                            ; ---------------------------------------------------------------------------
0001E01E 0001                       PLC_GHZAnimals:	dc.w 1
0001E020 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E024 B000                       		dc.w $B000
0001E026 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E02A B240                       		dc.w $B240
0001E02C                            ; ---------------------------------------------------------------------------
0001E02C                            ; Pattern load cues - LZ animals
0001E02C                            ; ---------------------------------------------------------------------------
0001E02C 0001                       PLC_LZAnimals:	dc.w 1
0001E02E 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E032 B000                       		dc.w $B000
0001E034 0000 0000                  		dc.l Nem_Seal		; seal
0001E038 B240                       		dc.w $B240
0001E03A                            ; ---------------------------------------------------------------------------
0001E03A                            ; Pattern load cues - MZ animals
0001E03A                            ; ---------------------------------------------------------------------------
0001E03A 0001                       PLC_MZAnimals:	dc.w 1
0001E03C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E040 B000                       		dc.w $B000
0001E042 0000 0000                  		dc.l Nem_Seal		; seal
0001E046 B240                       		dc.w $B240
0001E048                            ; ---------------------------------------------------------------------------
0001E048                            ; Pattern load cues - SLZ animals
0001E048                            ; ---------------------------------------------------------------------------
0001E048 0001                       PLC_SLZAnimals:	dc.w 1
0001E04A 0000 0000                  		dc.l Nem_Pig		; pig
0001E04E B000                       		dc.w $B000
0001E050 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E054 B240                       		dc.w $B240
0001E056                            ; ---------------------------------------------------------------------------
0001E056                            ; Pattern load cues - SYZ animals
0001E056                            ; ---------------------------------------------------------------------------
0001E056 0001                       PLC_SYZAnimals:	dc.w 1
0001E058 0000 0000                  		dc.l Nem_Pig		; pig
0001E05C B000                       		dc.w $B000
0001E05E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E062 B240                       		dc.w $B240
0001E064                            ; ---------------------------------------------------------------------------
0001E064                            ; Pattern load cues - SBZ animals
0001E064                            ; ---------------------------------------------------------------------------
0001E064 0001                       PLC_SBZAnimals:	dc.w 1
0001E066 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E06A B000                       		dc.w $B000
0001E06C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E070 B240                       		dc.w $B240
0001E072                            ; ---------------------------------------------------------------------------
0001E072                            ; Pattern load cues - special stage results screen
0001E072                            ; ---------------------------------------------------------------------------
0001E072 0001                       PLC_SpeStResult:dc.w 1
0001E074 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E078 A820                       		dc.w $A820
0001E07A 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E07E AA20                       		dc.w $AA20
0001E080                            ; ---------------------------------------------------------------------------
0001E080                            ; Pattern load cues - ending sequence
0001E080                            ; ---------------------------------------------------------------------------
0001E080 000E                       PLC_Ending:	dc.w $E
0001E082 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E086 0000                       		dc.w 0
0001E088 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E08C 39A0                       		dc.w $39A0
0001E08E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E092 6B00                       		dc.w $6B00
0001E094 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E098 7400                       		dc.w $7400
0001E09A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E09E 78A0                       		dc.w $78A0
0001E0A0 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E0A4 7C20                       		dc.w $7C20
0001E0A6 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E0AA A480                       		dc.w $A480
0001E0AC 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E0B0 AA60                       		dc.w $AA60
0001E0B2 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0B6 ACA0                       		dc.w $ACA0
0001E0B8 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0BC AE60                       		dc.w $AE60
0001E0BE 0000 0000                  		dc.l Nem_Seal		; seal
0001E0C2 B0A0                       		dc.w $B0A0
0001E0C4 0000 0000                  		dc.l Nem_Pig		; pig
0001E0C8 B260                       		dc.w $B260
0001E0CA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E0CE B4A0                       		dc.w $B4A0
0001E0D0 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E0D4 B660                       		dc.w $B660
0001E0D6 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E0DA B8A0                       		dc.w $B8A0
0001E0DC                            ; ---------------------------------------------------------------------------
0001E0DC                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0DC                            ; ---------------------------------------------------------------------------
0001E0DC 0002                       PLC_TryAgain:	dc.w 2
0001E0DE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0E2 78A0                       		dc.w $78A0
0001E0E4 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0E8 7C20                       		dc.w $7C20
0001E0EA 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0EE B400                       		dc.w $B400
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0                            ; Pattern load cues - Eggman on SBZ 2
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0F2 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0F6 A300                       		dc.w $A300
0001E0F8 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E0FC 8000                       		dc.w $8000
0001E0FE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E102 9400                       		dc.w $9400
0001E104                            ; ---------------------------------------------------------------------------
0001E104                            ; Pattern load cues - final boss
0001E104                            ; ---------------------------------------------------------------------------
0001E104 0004                       PLC_FZBoss:	dc.w 4
0001E106 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E10A 7400                       		dc.w $7400
0001E10C 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E110 6000                       		dc.w $6000
0001E112 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E116 8000                       		dc.w $8000
0001E118 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E11C 8E00                       		dc.w $8E00
0001E11E 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E122 A540                       		dc.w $A540
0001E124                            		even
0001E124                            		even
0001E124                            
0001E124                            		incbin	misc\padding.bin
0001E212                            		even
0001E212                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E674                            		even
0001E674                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E76C                            		even
0001E76C                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E880                            		even
0001E880                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F88C                            		even
0001F88C                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022AE2 00                         		even
00022AE2                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022B16                            		even
00022B16                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022BD4                            		even
00022BD4                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002307C                            		even
0002307C                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000230DA                            		even
000230DA                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023CE0                            		even
00023CE0                            ; ---------------------------------------------------------------------------
00023CE0                            ; Sprite mappings - Sonic
00023CE0                            ; ---------------------------------------------------------------------------
00023CE0                            Map_Sonic:
00023CE0                            	include "_maps\Sonic.asm"
00023CE0                            Map_0dcc:
00023CE0 0000                       Map_0dcc_0: 	dc.w Map_0dcc_B6-Map_0dcc
00023CE2 0000                       Map_0dcc_2: 	dc.w Map_0dcc_B7-Map_0dcc
00023CE4 0000                       Map_0dcc_4: 	dc.w Map_0dcc_C2-Map_0dcc
00023CE6 0000                       Map_0dcc_6: 	dc.w Map_0dcc_D2-Map_0dcc
00023CE8 0000                       Map_0dcc_8: 	dc.w Map_0dcc_E2-Map_0dcc
00023CEA 0000                       Map_0dcc_A: 	dc.w Map_0dcc_F2-Map_0dcc
00023CEC 0000                       Map_0dcc_C: 	dc.w Map_0dcc_102-Map_0dcc
00023CEE 0000                       Map_0dcc_E: 	dc.w Map_0dcc_117-Map_0dcc
00023CF0 0000                       Map_0dcc_10: 	dc.w Map_0dcc_122-Map_0dcc
00023CF2 0000                       Map_0dcc_12: 	dc.w Map_0dcc_12D-Map_0dcc
00023CF4 0000                       Map_0dcc_14: 	dc.w Map_0dcc_142-Map_0dcc
00023CF6 0000                       Map_0dcc_16: 	dc.w Map_0dcc_14D-Map_0dcc
00023CF8 0000                       Map_0dcc_18: 	dc.w Map_0dcc_15D-Map_0dcc
00023CFA 0000                       Map_0dcc_1A: 	dc.w Map_0dcc_177-Map_0dcc
00023CFC 0000                       Map_0dcc_1C: 	dc.w Map_0dcc_196-Map_0dcc
00023CFE 0000                       Map_0dcc_1E: 	dc.w Map_0dcc_1AB-Map_0dcc
00023D00 0000                       Map_0dcc_20: 	dc.w Map_0dcc_1C5-Map_0dcc
00023D02 0000                       Map_0dcc_22: 	dc.w Map_0dcc_1DA-Map_0dcc
00023D04 0000                       Map_0dcc_24: 	dc.w Map_0dcc_1F4-Map_0dcc
00023D06 0000                       Map_0dcc_26: 	dc.w Map_0dcc_209-Map_0dcc
00023D08 0000                       Map_0dcc_28: 	dc.w Map_0dcc_214-Map_0dcc
00023D0A 0000                       Map_0dcc_2A: 	dc.w Map_0dcc_21F-Map_0dcc
00023D0C 0000                       Map_0dcc_2C: 	dc.w Map_0dcc_234-Map_0dcc
00023D0E 0000                       Map_0dcc_2E: 	dc.w Map_0dcc_23F-Map_0dcc
00023D10 0000                       Map_0dcc_30: 	dc.w Map_0dcc_24F-Map_0dcc
00023D12 0000                       Map_0dcc_32: 	dc.w Map_0dcc_26E-Map_0dcc
00023D14 0000                       Map_0dcc_34: 	dc.w Map_0dcc_28D-Map_0dcc
00023D16 0000                       Map_0dcc_36: 	dc.w Map_0dcc_2A2-Map_0dcc
00023D18 0000                       Map_0dcc_38: 	dc.w Map_0dcc_2BC-Map_0dcc
00023D1A 0000                       Map_0dcc_3A: 	dc.w Map_0dcc_2D1-Map_0dcc
00023D1C 0000                       Map_0dcc_3C: 	dc.w Map_0dcc_2EB-Map_0dcc
00023D1E 0000                       Map_0dcc_3E: 	dc.w Map_0dcc_2F6-Map_0dcc
00023D20 0000                       Map_0dcc_40: 	dc.w Map_0dcc_301-Map_0dcc
00023D22 0000                       Map_0dcc_42: 	dc.w Map_0dcc_30C-Map_0dcc
00023D24 0000                       Map_0dcc_44: 	dc.w Map_0dcc_317-Map_0dcc
00023D26 0000                       Map_0dcc_46: 	dc.w Map_0dcc_32C-Map_0dcc
00023D28 0000                       Map_0dcc_48: 	dc.w Map_0dcc_33C-Map_0dcc
00023D2A 0000                       Map_0dcc_4A: 	dc.w Map_0dcc_351-Map_0dcc
00023D2C 0000                       Map_0dcc_4C: 	dc.w Map_0dcc_361-Map_0dcc
00023D2E 0000                       Map_0dcc_4E: 	dc.w Map_0dcc_36C-Map_0dcc
00023D30 0000                       Map_0dcc_50: 	dc.w Map_0dcc_377-Map_0dcc
00023D32 0000                       Map_0dcc_52: 	dc.w Map_0dcc_382-Map_0dcc
00023D34 0000                       Map_0dcc_54: 	dc.w Map_0dcc_38D-Map_0dcc
00023D36 0000                       Map_0dcc_56: 	dc.w Map_0dcc_3A2-Map_0dcc
00023D38 0000                       Map_0dcc_58: 	dc.w Map_0dcc_3AD-Map_0dcc
00023D3A 0000                       Map_0dcc_5A: 	dc.w Map_0dcc_3C2-Map_0dcc
00023D3C 0000                       Map_0dcc_5C: 	dc.w Map_0dcc_3CD-Map_0dcc
00023D3E 0000                       Map_0dcc_5E: 	dc.w Map_0dcc_3D3-Map_0dcc
00023D40 0000                       Map_0dcc_60: 	dc.w Map_0dcc_3D9-Map_0dcc
00023D42 0000                       Map_0dcc_62: 	dc.w Map_0dcc_3DF-Map_0dcc
00023D44 0000                       Map_0dcc_64: 	dc.w Map_0dcc_3E5-Map_0dcc
00023D46 0000                       Map_0dcc_66: 	dc.w Map_0dcc_3EB-Map_0dcc
00023D48 0000                       Map_0dcc_68: 	dc.w Map_0dcc_3F6-Map_0dcc
00023D4A 0000                       Map_0dcc_6A: 	dc.w Map_0dcc_3FC-Map_0dcc
00023D4C 0000                       Map_0dcc_6C: 	dc.w Map_0dcc_407-Map_0dcc
00023D4E 0000                       Map_0dcc_6E: 	dc.w Map_0dcc_40D-Map_0dcc
00023D50 0000                       Map_0dcc_70: 	dc.w Map_0dcc_418-Map_0dcc
00023D52 0000                       Map_0dcc_72: 	dc.w Map_0dcc_42D-Map_0dcc
00023D54 0000                       Map_0dcc_74: 	dc.w Map_0dcc_44C-Map_0dcc
00023D56 0000                       Map_0dcc_76: 	dc.w Map_0dcc_45C-Map_0dcc
00023D58 0000                       Map_0dcc_78: 	dc.w Map_0dcc_46C-Map_0dcc
00023D5A 0000                       Map_0dcc_7A: 	dc.w Map_0dcc_47C-Map_0dcc
00023D5C 0000                       Map_0dcc_7C: 	dc.w Map_0dcc_487-Map_0dcc
00023D5E 0000                       Map_0dcc_7E: 	dc.w Map_0dcc_497-Map_0dcc
00023D60 0000                       Map_0dcc_80: 	dc.w Map_0dcc_4A7-Map_0dcc
00023D62 0000                       Map_0dcc_82: 	dc.w Map_0dcc_4B7-Map_0dcc
00023D64 0000                       Map_0dcc_84: 	dc.w Map_0dcc_4CC-Map_0dcc
00023D66 0000                       Map_0dcc_86: 	dc.w Map_0dcc_4E1-Map_0dcc
00023D68 0000                       Map_0dcc_88: 	dc.w Map_0dcc_4FB-Map_0dcc
00023D6A 0000                       Map_0dcc_8A: 	dc.w Map_0dcc_515-Map_0dcc
00023D6C 0000                       Map_0dcc_8C: 	dc.w Map_0dcc_520-Map_0dcc
00023D6E 0000                       Map_0dcc_8E: 	dc.w Map_0dcc_530-Map_0dcc
00023D70 0000                       Map_0dcc_90: 	dc.w Map_0dcc_53B-Map_0dcc
00023D72 0000                       Map_0dcc_92: 	dc.w Map_0dcc_54B-Map_0dcc
00023D74 0000                       Map_0dcc_94: 	dc.w Map_0dcc_556-Map_0dcc
00023D76 0000                       Map_0dcc_96: 	dc.w Map_0dcc_566-Map_0dcc
00023D78 0000                       Map_0dcc_98: 	dc.w Map_0dcc_576-Map_0dcc
00023D7A 0000                       Map_0dcc_9A: 	dc.w Map_0dcc_590-Map_0dcc
00023D7C 0000                       Map_0dcc_9C: 	dc.w Map_0dcc_5AA-Map_0dcc
00023D7E 0000                       Map_0dcc_9E: 	dc.w Map_0dcc_5B5-Map_0dcc
00023D80 0000                       Map_0dcc_A0: 	dc.w Map_0dcc_5C5-Map_0dcc
00023D82 0000                       Map_0dcc_A2: 	dc.w Map_0dcc_5CB-Map_0dcc
00023D84 0000                       Map_0dcc_A4: 	dc.w Map_0dcc_5D1-Map_0dcc
00023D86 0000                       Map_0dcc_A6: 	dc.w Map_0dcc_5D7-Map_0dcc
00023D88 0000                       Map_0dcc_A8: 	dc.w Map_0dcc_5E7-Map_0dcc
00023D8A 0000                       Map_0dcc_AA: 	dc.w Map_0dcc_5F7-Map_0dcc
00023D8C 0000                       Map_0dcc_AC: 	dc.w Map_0dcc_607-Map_0dcc
00023D8E 0000                       Map_0dcc_AE: 	dc.w Map_0dcc_617-Map_0dcc
00023D90 0000                       Map_0dcc_B0: 	dc.w Map_0dcc_622-Map_0dcc
00023D92 0000                       Map_0dcc_B2: 	dc.w Map_0dcc_62D-Map_0dcc
00023D94 0000                       Map_0dcc_B4: 	dc.w Map_0dcc_63D-Map_0dcc
00023D96 00                         Map_0dcc_B6: 	dc.b $0
00023D97 02                         Map_0dcc_B7: 	dc.b $2
00023D98 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023D9D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023DA2 03                         Map_0dcc_C2: 	dc.b $3
00023DA3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DA8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DAD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DB2 03                         Map_0dcc_D2: 	dc.b $3
00023DB3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DB8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DBD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DC2 03                         Map_0dcc_E2: 	dc.b $3
00023DC3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DC8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DCD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DD2 03                         Map_0dcc_F2: 	dc.b $3
00023DD3 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023DD8 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023DDD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DE2 04                         Map_0dcc_102: 	dc.b $4
00023DE3 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023DE8 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023DED FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023DF2 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023DF7 02                         Map_0dcc_117: 	dc.b $2
00023DF8 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023DFD FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023E02 02                         Map_0dcc_122: 	dc.b $2
00023E03 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023E08 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023E0D 04                         Map_0dcc_12D: 	dc.b $4
00023E0E EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023E13 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023E18 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023E1D 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023E22 02                         Map_0dcc_142: 	dc.b $2
00023E23 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00023E28 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00023E2D 03                         Map_0dcc_14D: 	dc.b $3
00023E2E ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023E33 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023E38 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023E3D 05                         Map_0dcc_15D: 	dc.b $5
00023E3E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E43 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023E48 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023E4D 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023E52 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023E57 06                         Map_0dcc_177: 	dc.b $6
00023E58 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E5D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E62 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023E67 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023E6C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023E71 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023E76 04                         Map_0dcc_196: 	dc.b $4
00023E77 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023E7C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023E81 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023E86 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023E8B 05                         Map_0dcc_1AB: 	dc.b $5
00023E8C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E91 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023E96 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023E9B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023EA0 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023EA5 04                         Map_0dcc_1C5: 	dc.b $4
00023EA6 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023EAB EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023EB0 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023EB5 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023EBA 05                         Map_0dcc_1DA: 	dc.b $5
00023EBB ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023EC0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023EC5 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023ECA FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023ECF 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023ED4 04                         Map_0dcc_1F4: 	dc.b $4
00023ED5 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023EDA EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023EDF FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023EE4 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023EE9 02                         Map_0dcc_209: 	dc.b $2
00023EEA F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023EEF EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023EF4 02                         Map_0dcc_214: 	dc.b $2
00023EF5 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023EFA F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023EFF 04                         Map_0dcc_21F: 	dc.b $4
00023F00 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023F05 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023F0A FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023F0F 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023F14 02                         Map_0dcc_234: 	dc.b $2
00023F15 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023F1A F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023F1F 03                         Map_0dcc_23F: 	dc.b $3
00023F20 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023F25 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023F2A F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023F2F 06                         Map_0dcc_24F: 	dc.b $6
00023F30 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F35 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023F3A F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023F3F F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023F44 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023F49 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023F4E 06                         Map_0dcc_26E: 	dc.b $6
00023F4F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F54 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023F59 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023F5E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023F63 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023F68 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023F6D 04                         Map_0dcc_28D: 	dc.b $4
00023F6E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023F73 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023F78 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023F7D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023F82 05                         Map_0dcc_2A2: 	dc.b $5
00023F83 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F88 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023F8D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023F92 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023F97 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023F9C 04                         Map_0dcc_2BC: 	dc.b $4
00023F9D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023FA2 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023FA7 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023FAC 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023FB1 05                         Map_0dcc_2D1: 	dc.b $5
00023FB2 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023FB7 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023FBC F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023FC1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023FC6 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00023FCB 02                         Map_0dcc_2EB: 	dc.b $2
00023FCC EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FD1 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FD6 02                         Map_0dcc_2F6: 	dc.b $2
00023FD7 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FDC FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FE1 02                         Map_0dcc_301: 	dc.b $2
00023FE2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FE7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FEC 02                         Map_0dcc_30C: 	dc.b $2
00023FED EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00023FF2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00023FF7 04                         Map_0dcc_317: 	dc.b $4
00023FF8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00023FFD EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024002 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024007 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002400C 03                         Map_0dcc_32C: 	dc.b $3
0002400D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024012 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024017 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002401C 04                         Map_0dcc_33C: 	dc.b $4
0002401D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024022 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024027 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002402C FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024031 03                         Map_0dcc_351: 	dc.b $3
00024032 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024037 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002403C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024041 02                         Map_0dcc_361: 	dc.b $2
00024042 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024047 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002404C 02                         Map_0dcc_36C: 	dc.b $2
0002404D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024052 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024057 02                         Map_0dcc_377: 	dc.b $2
00024058 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002405D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024062 02                         Map_0dcc_382: 	dc.b $2
00024063 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024068 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002406D 04                         Map_0dcc_38D: 	dc.b $4
0002406E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024073 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024078 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002407D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024082 02                         Map_0dcc_3A2: 	dc.b $2
00024083 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024088 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002408D 04                         Map_0dcc_3AD: 	dc.b $4
0002408E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024093 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024098 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002409D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000240A2 02                         Map_0dcc_3C2: 	dc.b $2
000240A3 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000240A8 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000240AD 01                         Map_0dcc_3CD: 	dc.b $1
000240AE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240B3 01                         Map_0dcc_3D3: 	dc.b $1
000240B4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240B9 01                         Map_0dcc_3D9: 	dc.b $1
000240BA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240BF 01                         Map_0dcc_3DF: 	dc.b $1
000240C0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240C5 01                         Map_0dcc_3E5: 	dc.b $1
000240C6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240CB 02                         Map_0dcc_3EB: 	dc.b $2
000240CC F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000240D1 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000240D6 01                         Map_0dcc_3F6: 	dc.b $1
000240D7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240DC 02                         Map_0dcc_3FC: 	dc.b $2
000240DD EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000240E2 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000240E7 01                         Map_0dcc_407: 	dc.b $1
000240E8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240ED 02                         Map_0dcc_40D: 	dc.b $2
000240EE ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000240F3 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000240F8 04                         Map_0dcc_418: 	dc.b $4
000240F9 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000240FE FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024103 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00024108 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
0002410D 06                         Map_0dcc_42D: 	dc.b $6
0002410E F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024113 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024118 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002411D 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024122 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024127 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002412C 03                         Map_0dcc_44C: 	dc.b $3
0002412D EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00024132 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00024137 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
0002413C 03                         Map_0dcc_45C: 	dc.b $3
0002413D EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00024142 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00024147 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
0002414C 03                         Map_0dcc_46C: 	dc.b $3
0002414D F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024152 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024157 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002415C 02                         Map_0dcc_47C: 	dc.b $2
0002415D F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00024162 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00024167 03                         Map_0dcc_487: 	dc.b $3
00024168 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
0002416D FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00024172 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00024177 03                         Map_0dcc_497: 	dc.b $3
00024178 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002417D FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00024182 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00024187 03                         Map_0dcc_4A7: 	dc.b $3
00024188 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002418D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00024192 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00024197 04                         Map_0dcc_4B7: 	dc.b $4
00024198 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002419D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000241A2 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000241A7 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000241AC 04                         Map_0dcc_4CC: 	dc.b $4
000241AD F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000241B2 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000241B7 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000241BC F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000241C1 05                         Map_0dcc_4E1: 	dc.b $5
000241C2 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000241C7 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000241CC 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000241D1 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000241D6 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000241DB 05                         Map_0dcc_4FB: 	dc.b $5
000241DC E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000241E1 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000241E6 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000241EB 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000241F0 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000241F5 02                         Map_0dcc_515: 	dc.b $2
000241F6 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000241FB 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00024200 03                         Map_0dcc_520: 	dc.b $3
00024201 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00024206 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002420B 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00024210 02                         Map_0dcc_530: 	dc.b $2
00024211 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00024216 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002421B 03                         Map_0dcc_53B: 	dc.b $3
0002421C EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00024221 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00024226 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002422B 02                         Map_0dcc_54B: 	dc.b $2
0002422C EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024231 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00024236 03                         Map_0dcc_556: 	dc.b $3
00024237 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002423C 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00024241 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00024246 03                         Map_0dcc_566: 	dc.b $3
00024247 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002424C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024251 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00024256 05                         Map_0dcc_576: 	dc.b $5
00024257 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002425C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024261 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024266 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002426B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00024270 05                         Map_0dcc_590: 	dc.b $5
00024271 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024276 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002427B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00024280 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00024285 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002428A 02                         Map_0dcc_5AA: 	dc.b $2
0002428B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00024290 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00024295 03                         Map_0dcc_5B5: 	dc.b $3
00024296 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002429B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000242A0 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000242A5 01                         Map_0dcc_5C5: 	dc.b $1
000242A6 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000242AB 01                         Map_0dcc_5CB: 	dc.b $1
000242AC F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000242B1 01                         Map_0dcc_5D1: 	dc.b $1
000242B2 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000242B7 03                         Map_0dcc_5D7: 	dc.b $3
000242B8 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000242BD FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000242C2 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000242C7 03                         Map_0dcc_5E7: 	dc.b $3
000242C8 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000242CD FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000242D2 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000242D7 03                         Map_0dcc_5F7: 	dc.b $3
000242D8 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000242DD F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000242E2 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000242E7 03                         Map_0dcc_607: 	dc.b $3
000242E8 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000242ED FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000242F2 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000242F7 02                         Map_0dcc_617: 	dc.b $2
000242F8 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000242FD F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00024302 02                         Map_0dcc_622: 	dc.b $2
00024303 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00024308 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002430D 03                         Map_0dcc_62D: 	dc.b $3
0002430E ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00024313 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00024318 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
0002431D 02                         Map_0dcc_63D: 	dc.b $2
0002431E F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00024323 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00024328                            	even
00024328                            	even
00024328                            
00024328                            ; ---------------------------------------------------------------------------
00024328                            ; Uncompressed graphics	loading	array for Sonic
00024328                            ; ---------------------------------------------------------------------------
00024328                            SonicDynPLC:
00024328                            	include "_inc\Sonic dynamic pattern load cues.asm"
00024328                            DPLC_cc21:
00024328 0000                       DPLC_cc21_0: 	dc.w DPLC_cc21_B6-DPLC_cc21
0002432A 0000                       DPLC_cc21_2: 	dc.w DPLC_cc21_B7-DPLC_cc21
0002432C 0000                       DPLC_cc21_4: 	dc.w DPLC_cc21_BC-DPLC_cc21
0002432E 0000                       DPLC_cc21_6: 	dc.w DPLC_cc21_C3-DPLC_cc21
00024330 0000                       DPLC_cc21_8: 	dc.w DPLC_cc21_CA-DPLC_cc21
00024332 0000                       DPLC_cc21_A: 	dc.w DPLC_cc21_D1-DPLC_cc21
00024334 0000                       DPLC_cc21_C: 	dc.w DPLC_cc21_D8-DPLC_cc21
00024336 0000                       DPLC_cc21_E: 	dc.w DPLC_cc21_E1-DPLC_cc21
00024338 0000                       DPLC_cc21_10: 	dc.w DPLC_cc21_E6-DPLC_cc21
0002433A 0000                       DPLC_cc21_12: 	dc.w DPLC_cc21_EB-DPLC_cc21
0002433C 0000                       DPLC_cc21_14: 	dc.w DPLC_cc21_F4-DPLC_cc21
0002433E 0000                       DPLC_cc21_16: 	dc.w DPLC_cc21_F9-DPLC_cc21
00024340 0000                       DPLC_cc21_18: 	dc.w DPLC_cc21_100-DPLC_cc21
00024342 0000                       DPLC_cc21_1A: 	dc.w DPLC_cc21_10B-DPLC_cc21
00024344 0000                       DPLC_cc21_1C: 	dc.w DPLC_cc21_118-DPLC_cc21
00024346 0000                       DPLC_cc21_1E: 	dc.w DPLC_cc21_121-DPLC_cc21
00024348 0000                       DPLC_cc21_20: 	dc.w DPLC_cc21_12C-DPLC_cc21
0002434A 0000                       DPLC_cc21_22: 	dc.w DPLC_cc21_135-DPLC_cc21
0002434C 0000                       DPLC_cc21_24: 	dc.w DPLC_cc21_140-DPLC_cc21
0002434E 0000                       DPLC_cc21_26: 	dc.w DPLC_cc21_149-DPLC_cc21
00024350 0000                       DPLC_cc21_28: 	dc.w DPLC_cc21_14E-DPLC_cc21
00024352 0000                       DPLC_cc21_2A: 	dc.w DPLC_cc21_153-DPLC_cc21
00024354 0000                       DPLC_cc21_2C: 	dc.w DPLC_cc21_15C-DPLC_cc21
00024356 0000                       DPLC_cc21_2E: 	dc.w DPLC_cc21_161-DPLC_cc21
00024358 0000                       DPLC_cc21_30: 	dc.w DPLC_cc21_168-DPLC_cc21
0002435A 0000                       DPLC_cc21_32: 	dc.w DPLC_cc21_175-DPLC_cc21
0002435C 0000                       DPLC_cc21_34: 	dc.w DPLC_cc21_182-DPLC_cc21
0002435E 0000                       DPLC_cc21_36: 	dc.w DPLC_cc21_18B-DPLC_cc21
00024360 0000                       DPLC_cc21_38: 	dc.w DPLC_cc21_196-DPLC_cc21
00024362 0000                       DPLC_cc21_3A: 	dc.w DPLC_cc21_19F-DPLC_cc21
00024364 0000                       DPLC_cc21_3C: 	dc.w DPLC_cc21_1AA-DPLC_cc21
00024366 0000                       DPLC_cc21_3E: 	dc.w DPLC_cc21_1AF-DPLC_cc21
00024368 0000                       DPLC_cc21_40: 	dc.w DPLC_cc21_1B4-DPLC_cc21
0002436A 0000                       DPLC_cc21_42: 	dc.w DPLC_cc21_1B9-DPLC_cc21
0002436C 0000                       DPLC_cc21_44: 	dc.w DPLC_cc21_1BE-DPLC_cc21
0002436E 0000                       DPLC_cc21_46: 	dc.w DPLC_cc21_1C7-DPLC_cc21
00024370 0000                       DPLC_cc21_48: 	dc.w DPLC_cc21_1CE-DPLC_cc21
00024372 0000                       DPLC_cc21_4A: 	dc.w DPLC_cc21_1D7-DPLC_cc21
00024374 0000                       DPLC_cc21_4C: 	dc.w DPLC_cc21_1DE-DPLC_cc21
00024376 0000                       DPLC_cc21_4E: 	dc.w DPLC_cc21_1E3-DPLC_cc21
00024378 0000                       DPLC_cc21_50: 	dc.w DPLC_cc21_1E8-DPLC_cc21
0002437A 0000                       DPLC_cc21_52: 	dc.w DPLC_cc21_1ED-DPLC_cc21
0002437C 0000                       DPLC_cc21_54: 	dc.w DPLC_cc21_1F2-DPLC_cc21
0002437E 0000                       DPLC_cc21_56: 	dc.w DPLC_cc21_1FB-DPLC_cc21
00024380 0000                       DPLC_cc21_58: 	dc.w DPLC_cc21_200-DPLC_cc21
00024382 0000                       DPLC_cc21_5A: 	dc.w DPLC_cc21_209-DPLC_cc21
00024384 0000                       DPLC_cc21_5C: 	dc.w DPLC_cc21_20E-DPLC_cc21
00024386 0000                       DPLC_cc21_5E: 	dc.w DPLC_cc21_211-DPLC_cc21
00024388 0000                       DPLC_cc21_60: 	dc.w DPLC_cc21_214-DPLC_cc21
0002438A 0000                       DPLC_cc21_62: 	dc.w DPLC_cc21_217-DPLC_cc21
0002438C 0000                       DPLC_cc21_64: 	dc.w DPLC_cc21_21A-DPLC_cc21
0002438E 0000                       DPLC_cc21_66: 	dc.w DPLC_cc21_21D-DPLC_cc21
00024390 0000                       DPLC_cc21_68: 	dc.w DPLC_cc21_222-DPLC_cc21
00024392 0000                       DPLC_cc21_6A: 	dc.w DPLC_cc21_225-DPLC_cc21
00024394 0000                       DPLC_cc21_6C: 	dc.w DPLC_cc21_22A-DPLC_cc21
00024396 0000                       DPLC_cc21_6E: 	dc.w DPLC_cc21_22D-DPLC_cc21
00024398 0000                       DPLC_cc21_70: 	dc.w DPLC_cc21_232-DPLC_cc21
0002439A 0000                       DPLC_cc21_72: 	dc.w DPLC_cc21_23B-DPLC_cc21
0002439C 0000                       DPLC_cc21_74: 	dc.w DPLC_cc21_240-DPLC_cc21
0002439E 0000                       DPLC_cc21_76: 	dc.w DPLC_cc21_247-DPLC_cc21
000243A0 0000                       DPLC_cc21_78: 	dc.w DPLC_cc21_24E-DPLC_cc21
000243A2 0000                       DPLC_cc21_7A: 	dc.w DPLC_cc21_255-DPLC_cc21
000243A4 0000                       DPLC_cc21_7C: 	dc.w DPLC_cc21_258-DPLC_cc21
000243A6 0000                       DPLC_cc21_7E: 	dc.w DPLC_cc21_25F-DPLC_cc21
000243A8 0000                       DPLC_cc21_80: 	dc.w DPLC_cc21_266-DPLC_cc21
000243AA 0000                       DPLC_cc21_82: 	dc.w DPLC_cc21_26D-DPLC_cc21
000243AC 0000                       DPLC_cc21_84: 	dc.w DPLC_cc21_276-DPLC_cc21
000243AE 0000                       DPLC_cc21_86: 	dc.w DPLC_cc21_27F-DPLC_cc21
000243B0 0000                       DPLC_cc21_88: 	dc.w DPLC_cc21_28A-DPLC_cc21
000243B2 0000                       DPLC_cc21_8A: 	dc.w DPLC_cc21_295-DPLC_cc21
000243B4 0000                       DPLC_cc21_8C: 	dc.w DPLC_cc21_29A-DPLC_cc21
000243B6 0000                       DPLC_cc21_8E: 	dc.w DPLC_cc21_2A1-DPLC_cc21
000243B8 0000                       DPLC_cc21_90: 	dc.w DPLC_cc21_2A6-DPLC_cc21
000243BA 0000                       DPLC_cc21_92: 	dc.w DPLC_cc21_2AD-DPLC_cc21
000243BC 0000                       DPLC_cc21_94: 	dc.w DPLC_cc21_2B2-DPLC_cc21
000243BE 0000                       DPLC_cc21_96: 	dc.w DPLC_cc21_2B9-DPLC_cc21
000243C0 0000                       DPLC_cc21_98: 	dc.w DPLC_cc21_2C0-DPLC_cc21
000243C2 0000                       DPLC_cc21_9A: 	dc.w DPLC_cc21_2CB-DPLC_cc21
000243C4 0000                       DPLC_cc21_9C: 	dc.w DPLC_cc21_2D6-DPLC_cc21
000243C6 0000                       DPLC_cc21_9E: 	dc.w DPLC_cc21_2DB-DPLC_cc21
000243C8 0000                       DPLC_cc21_A0: 	dc.w DPLC_cc21_2E2-DPLC_cc21
000243CA 0000                       DPLC_cc21_A2: 	dc.w DPLC_cc21_2E5-DPLC_cc21
000243CC 0000                       DPLC_cc21_A4: 	dc.w DPLC_cc21_2E8-DPLC_cc21
000243CE 0000                       DPLC_cc21_A6: 	dc.w DPLC_cc21_2EB-DPLC_cc21
000243D0 0000                       DPLC_cc21_A8: 	dc.w DPLC_cc21_2F2-DPLC_cc21
000243D2 0000                       DPLC_cc21_AA: 	dc.w DPLC_cc21_2F9-DPLC_cc21
000243D4 0000                       DPLC_cc21_AC: 	dc.w DPLC_cc21_300-DPLC_cc21
000243D6 0000                       DPLC_cc21_AE: 	dc.w DPLC_cc21_307-DPLC_cc21
000243D8 0000                       DPLC_cc21_B0: 	dc.w DPLC_cc21_30C-DPLC_cc21
000243DA 0000                       DPLC_cc21_B2: 	dc.w DPLC_cc21_311-DPLC_cc21
000243DC 0000                       DPLC_cc21_B4: 	dc.w DPLC_cc21_316-DPLC_cc21
000243DE 00                         DPLC_cc21_B6: 	dc.b $0
000243DF 02                         DPLC_cc21_B7: 	dc.b $2
000243E0 F000                       	dc.b $F0, $0
000243E2 1010                       	dc.b $10, $10
000243E4 03                         DPLC_cc21_BC: 	dc.b $3
000243E5 5012                       	dc.b $50, $12
000243E7 5018                       	dc.b $50, $18
000243E9 201E                       	dc.b $20, $1E
000243EB 03                         DPLC_cc21_C3: 	dc.b $3
000243EC 5021                       	dc.b $50, $21
000243EE 5018                       	dc.b $50, $18
000243F0 201E                       	dc.b $20, $1E
000243F2 03                         DPLC_cc21_CA: 	dc.b $3
000243F3 5021                       	dc.b $50, $21
000243F5 5018                       	dc.b $50, $18
000243F7 2027                       	dc.b $20, $27
000243F9 03                         DPLC_cc21_D1: 	dc.b $3
000243FA 802A                       	dc.b $80, $2A
000243FC 2033                       	dc.b $20, $33
000243FE 2036                       	dc.b $20, $36
00024400 04                         DPLC_cc21_D8: 	dc.b $4
00024401 7039                       	dc.b $70, $39
00024403 5041                       	dc.b $50, $41
00024405 5047                       	dc.b $50, $47
00024407 104D                       	dc.b $10, $4D
00024409 02                         DPLC_cc21_E1: 	dc.b $2
0002440A 7039                       	dc.b $70, $39
0002440C B04F                       	dc.b $B0, $4F
0002440E 02                         DPLC_cc21_E6: 	dc.b $2
0002440F 505B                       	dc.b $50, $5B
00024411 8061                       	dc.b $80, $61
00024413 04                         DPLC_cc21_EB: 	dc.b $4
00024414 505B                       	dc.b $50, $5B
00024416 506A                       	dc.b $50, $6A
00024418 5070                       	dc.b $50, $70
0002441A 1076                       	dc.b $10, $76
0002441C 02                         DPLC_cc21_F4: 	dc.b $2
0002441D F51B                       	dc.b $F5, $1B
0002441F 152B                       	dc.b $15, $2B
00024421 03                         DPLC_cc21_F9: 	dc.b $3
00024422 7039                       	dc.b $70, $39
00024424 3079                       	dc.b $30, $79
00024426 507D                       	dc.b $50, $7D
00024428 05                         DPLC_cc21_100: 	dc.b $5
00024429 5083                       	dc.b $50, $83
0002442B 5089                       	dc.b $50, $89
0002442D 208F                       	dc.b $20, $8F
0002442F 5092                       	dc.b $50, $92
00024431 0098                       	dc.b $0, $98
00024433 06                         DPLC_cc21_10B: 	dc.b $6
00024434 5083                       	dc.b $50, $83
00024436 1099                       	dc.b $10, $99
00024438 309B                       	dc.b $30, $9B
0002443A 509F                       	dc.b $50, $9F
0002443C 30A5                       	dc.b $30, $A5
0002443E 00A9                       	dc.b $0, $A9
00024440 04                         DPLC_cc21_118: 	dc.b $4
00024441 50AA                       	dc.b $50, $AA
00024443 10B0                       	dc.b $10, $B0
00024445 70B2                       	dc.b $70, $B2
00024447 20BA                       	dc.b $20, $BA
00024449 05                         DPLC_cc21_121: 	dc.b $5
0002444A 50BD                       	dc.b $50, $BD
0002444C 30C3                       	dc.b $30, $C3
0002444E 70C7                       	dc.b $70, $C7
00024450 20CF                       	dc.b $20, $CF
00024452 10D2                       	dc.b $10, $D2
00024454 04                         DPLC_cc21_12C: 	dc.b $4
00024455 50BD                       	dc.b $50, $BD
00024457 10D4                       	dc.b $10, $D4
00024459 70D6                       	dc.b $70, $D6
0002445B 20DE                       	dc.b $20, $DE
0002445D 05                         DPLC_cc21_135: 	dc.b $5
0002445E 5083                       	dc.b $50, $83
00024460 1099                       	dc.b $10, $99
00024462 008F                       	dc.b $0, $8F
00024464 70E1                       	dc.b $70, $E1
00024466 20E9                       	dc.b $20, $E9
00024468 04                         DPLC_cc21_140: 	dc.b $4
00024469 70EC                       	dc.b $70, $EC
0002446B 50F4                       	dc.b $50, $F4
0002446D 10FA                       	dc.b $10, $FA
0002446F 50FC                       	dc.b $50, $FC
00024471 02                         DPLC_cc21_149: 	dc.b $2
00024472 70EC                       	dc.b $70, $EC
00024474 B102                       	dc.b $B1, $2
00024476 02                         DPLC_cc21_14E: 	dc.b $2
00024477 510E                       	dc.b $51, $E
00024479 8114                       	dc.b $81, $14
0002447B 04                         DPLC_cc21_153: 	dc.b $4
0002447C 510E                       	dc.b $51, $E
0002447E 511D                       	dc.b $51, $1D
00024480 1123                       	dc.b $11, $23
00024482 5125                       	dc.b $51, $25
00024484 02                         DPLC_cc21_15C: 	dc.b $2
00024485 510E                       	dc.b $51, $E
00024487 B12B                       	dc.b $B1, $2B
00024489 03                         DPLC_cc21_161: 	dc.b $3
0002448A 70EC                       	dc.b $70, $EC
0002448C 0102                       	dc.b $1, $2
0002448E 8137                       	dc.b $81, $37
00024490 06                         DPLC_cc21_168: 	dc.b $6
00024491 5140                       	dc.b $51, $40
00024493 1146                       	dc.b $11, $46
00024495 1148                       	dc.b $11, $48
00024497 814A                       	dc.b $81, $4A
00024499 0153                       	dc.b $1, $53
0002449B 0154                       	dc.b $1, $54
0002449D 06                         DPLC_cc21_175: 	dc.b $6
0002449E 5140                       	dc.b $51, $40
000244A0 2155                       	dc.b $21, $55
000244A2 1158                       	dc.b $11, $58
000244A4 115A                       	dc.b $11, $5A
000244A6 815C                       	dc.b $81, $5C
000244A8 0153                       	dc.b $1, $53
000244AA 04                         DPLC_cc21_182: 	dc.b $4
000244AB 5165                       	dc.b $51, $65
000244AD 116B                       	dc.b $11, $6B
000244AF 816D                       	dc.b $81, $6D
000244B1 1176                       	dc.b $11, $76
000244B3 05                         DPLC_cc21_18B: 	dc.b $5
000244B4 5178                       	dc.b $51, $78
000244B6 217E                       	dc.b $21, $7E
000244B8 1181                       	dc.b $11, $81
000244BA 7183                       	dc.b $71, $83
000244BC 218B                       	dc.b $21, $8B
000244BE 04                         DPLC_cc21_196: 	dc.b $4
000244BF 5178                       	dc.b $51, $78
000244C1 118E                       	dc.b $11, $8E
000244C3 8190                       	dc.b $81, $90
000244C5 1199                       	dc.b $11, $99
000244C7 05                         DPLC_cc21_19F: 	dc.b $5
000244C8 5140                       	dc.b $51, $40
000244CA 819B                       	dc.b $81, $9B
000244CC 115A                       	dc.b $11, $5A
000244CE 11A4                       	dc.b $11, $A4
000244D0 0153                       	dc.b $1, $53
000244D2 02                         DPLC_cc21_1AA: 	dc.b $2
000244D3 51A6                       	dc.b $51, $A6
000244D5 B1AC                       	dc.b $B1, $AC
000244D7 02                         DPLC_cc21_1AF: 	dc.b $2
000244D8 505B                       	dc.b $50, $5B
000244DA B1B8                       	dc.b $B1, $B8
000244DC 02                         DPLC_cc21_1B4: 	dc.b $2
000244DD 51A6                       	dc.b $51, $A6
000244DF B1C4                       	dc.b $B1, $C4
000244E1 02                         DPLC_cc21_1B9: 	dc.b $2
000244E2 505B                       	dc.b $50, $5B
000244E4 B1D0                       	dc.b $B1, $D0
000244E6 04                         DPLC_cc21_1BE: 	dc.b $4
000244E7 51DC                       	dc.b $51, $DC
000244E9 11E2                       	dc.b $11, $E2
000244EB B1E4                       	dc.b $B1, $E4
000244ED 01F0                       	dc.b $1, $F0
000244EF 03                         DPLC_cc21_1C7: 	dc.b $3
000244F0 51F1                       	dc.b $51, $F1
000244F2 11F7                       	dc.b $11, $F7
000244F4 B1F9                       	dc.b $B1, $F9
000244F6 04                         DPLC_cc21_1CE: 	dc.b $4
000244F7 51DC                       	dc.b $51, $DC
000244F9 1205                       	dc.b $12, $5
000244FB B207                       	dc.b $B2, $7
000244FD 01F0                       	dc.b $1, $F0
000244FF 03                         DPLC_cc21_1D7: 	dc.b $3
00024500 51F1                       	dc.b $51, $F1
00024502 11F7                       	dc.b $11, $F7
00024504 B213                       	dc.b $B2, $13
00024506 02                         DPLC_cc21_1DE: 	dc.b $2
00024507 521F                       	dc.b $52, $1F
00024509 B225                       	dc.b $B2, $25
0002450B 02                         DPLC_cc21_1E3: 	dc.b $2
0002450C 510E                       	dc.b $51, $E
0002450E B231                       	dc.b $B2, $31
00024510 02                         DPLC_cc21_1E8: 	dc.b $2
00024511 521F                       	dc.b $52, $1F
00024513 B23D                       	dc.b $B2, $3D
00024515 02                         DPLC_cc21_1ED: 	dc.b $2
00024516 510E                       	dc.b $51, $E
00024518 B249                       	dc.b $B2, $49
0002451A 04                         DPLC_cc21_1F2: 	dc.b $4
0002451B 5255                       	dc.b $52, $55
0002451D 125B                       	dc.b $12, $5B
0002451F B25D                       	dc.b $B2, $5D
00024521 0269                       	dc.b $2, $69
00024523 02                         DPLC_cc21_1FB: 	dc.b $2
00024524 726A                       	dc.b $72, $6A
00024526 B272                       	dc.b $B2, $72
00024528 04                         DPLC_cc21_200: 	dc.b $4
00024529 5255                       	dc.b $52, $55
0002452B 127E                       	dc.b $12, $7E
0002452D B280                       	dc.b $B2, $80
0002452F 0269                       	dc.b $2, $69
00024531 02                         DPLC_cc21_209: 	dc.b $2
00024532 726A                       	dc.b $72, $6A
00024534 B28C                       	dc.b $B2, $8C
00024536 01                         DPLC_cc21_20E: 	dc.b $1
00024537 F298                       	dc.b $F2, $98
00024539 01                         DPLC_cc21_211: 	dc.b $1
0002453A F2A8                       	dc.b $F2, $A8
0002453C 01                         DPLC_cc21_214: 	dc.b $1
0002453D F2B8                       	dc.b $F2, $B8
0002453F 01                         DPLC_cc21_217: 	dc.b $1
00024540 F2C8                       	dc.b $F2, $C8
00024542 01                         DPLC_cc21_21A: 	dc.b $1
00024543 F2D8                       	dc.b $F2, $D8
00024545 02                         DPLC_cc21_21D: 	dc.b $2
00024546 B2E8                       	dc.b $B2, $E8
00024548 22F4                       	dc.b $22, $F4
0002454A 01                         DPLC_cc21_222: 	dc.b $1
0002454B F2F7                       	dc.b $F2, $F7
0002454D 02                         DPLC_cc21_225: 	dc.b $2
0002454E B307                       	dc.b $B3, $7
00024550 2313                       	dc.b $23, $13
00024552 01                         DPLC_cc21_22A: 	dc.b $1
00024553 F316                       	dc.b $F3, $16
00024555 02                         DPLC_cc21_22D: 	dc.b $2
00024556 5326                       	dc.b $53, $26
00024558 B32C                       	dc.b $B3, $2C
0002455A 04                         DPLC_cc21_232: 	dc.b $4
0002455B 5338                       	dc.b $53, $38
0002455D 733E                       	dc.b $73, $3E
0002455F 1346                       	dc.b $13, $46
00024561 0348                       	dc.b $3, $48
00024563 02                         DPLC_cc21_23B: 	dc.b $2
00024564 D349                       	dc.b $D3, $49
00024566 3517                       	dc.b $35, $17
00024568 03                         DPLC_cc21_240: 	dc.b $3
00024569 2357                       	dc.b $23, $57
0002456B 235A                       	dc.b $23, $5A
0002456D F35D                       	dc.b $F3, $5D
0002456F 03                         DPLC_cc21_247: 	dc.b $3
00024570 B36D                       	dc.b $B3, $6D
00024572 7379                       	dc.b $73, $79
00024574 0078                       	dc.b $0, $78
00024576 03                         DPLC_cc21_24E: 	dc.b $3
00024577 7381                       	dc.b $73, $81
00024579 3389                       	dc.b $33, $89
0002457B 238D                       	dc.b $23, $8D
0002457D 01                         DPLC_cc21_255: 	dc.b $1
0002457E 8390                       	dc.b $83, $90
00024580 03                         DPLC_cc21_258: 	dc.b $3
00024581 7399                       	dc.b $73, $99
00024583 03A1                       	dc.b $3, $A1
00024585 33A2                       	dc.b $33, $A2
00024587 03                         DPLC_cc21_25F: 	dc.b $3
00024588 73A6                       	dc.b $73, $A6
0002458A 33AE                       	dc.b $33, $AE
0002458C 23B2                       	dc.b $23, $B2
0002458E 03                         DPLC_cc21_266: 	dc.b $3
0002458F B3B5                       	dc.b $B3, $B5
00024591 13C1                       	dc.b $13, $C1
00024593 03C3                       	dc.b $3, $C3
00024595 04                         DPLC_cc21_26D: 	dc.b $4
00024596 B3C4                       	dc.b $B3, $C4
00024598 33D0                       	dc.b $33, $D0
0002459A 03D4                       	dc.b $3, $D4
0002459C 03D5                       	dc.b $3, $D5
0002459E 04                         DPLC_cc21_276: 	dc.b $4
0002459F B3D6                       	dc.b $B3, $D6
000245A1 33E2                       	dc.b $33, $E2
000245A3 03E6                       	dc.b $3, $E6
000245A5 03E7                       	dc.b $3, $E7
000245A7 05                         DPLC_cc21_27F: 	dc.b $5
000245A8 83E8                       	dc.b $83, $E8
000245AA 13F1                       	dc.b $13, $F1
000245AC 53F3                       	dc.b $53, $F3
000245AE 13F9                       	dc.b $13, $F9
000245B0 03FB                       	dc.b $3, $FB
000245B2 05                         DPLC_cc21_28A: 	dc.b $5
000245B3 83FC                       	dc.b $83, $FC
000245B5 1405                       	dc.b $14, $5
000245B7 53F3                       	dc.b $53, $F3
000245B9 13F9                       	dc.b $13, $F9
000245BB 03FB                       	dc.b $3, $FB
000245BD 02                         DPLC_cc21_295: 	dc.b $2
000245BE 8407                       	dc.b $84, $7
000245C0 7410                       	dc.b $74, $10
000245C2 03                         DPLC_cc21_29A: 	dc.b $3
000245C3 8418                       	dc.b $84, $18
000245C5 2421                       	dc.b $24, $21
000245C7 1424                       	dc.b $14, $24
000245C9 02                         DPLC_cc21_2A1: 	dc.b $2
000245CA 8426                       	dc.b $84, $26
000245CC 742F                       	dc.b $74, $2F
000245CE 03                         DPLC_cc21_2A6: 	dc.b $3
000245CF 8418                       	dc.b $84, $18
000245D1 2437                       	dc.b $24, $37
000245D3 143A                       	dc.b $14, $3A
000245D5 02                         DPLC_cc21_2AD: 	dc.b $2
000245D6 543C                       	dc.b $54, $3C
000245D8 B442                       	dc.b $B4, $42
000245DA 03                         DPLC_cc21_2B2: 	dc.b $3
000245DB 844E                       	dc.b $84, $4E
000245DD 3457                       	dc.b $34, $57
000245DF 045B                       	dc.b $4, $5B
000245E1 03                         DPLC_cc21_2B9: 	dc.b $3
000245E2 745C                       	dc.b $74, $5C
000245E4 1464                       	dc.b $14, $64
000245E6 B466                       	dc.b $B4, $66
000245E8 05                         DPLC_cc21_2C0: 	dc.b $5
000245E9 7472                       	dc.b $74, $72
000245EB 147A                       	dc.b $14, $7A
000245ED 547C                       	dc.b $54, $7C
000245EF 3482                       	dc.b $34, $82
000245F1 0486                       	dc.b $4, $86
000245F3 05                         DPLC_cc21_2CB: 	dc.b $5
000245F4 7487                       	dc.b $74, $87
000245F6 147A                       	dc.b $14, $7A
000245F8 548F                       	dc.b $54, $8F
000245FA 3482                       	dc.b $34, $82
000245FC 0486                       	dc.b $4, $86
000245FE 02                         DPLC_cc21_2D6: 	dc.b $2
000245FF 2495                       	dc.b $24, $95
00024601 F498                       	dc.b $F4, $98
00024603 03                         DPLC_cc21_2DB: 	dc.b $3
00024604 24A8                       	dc.b $24, $A8
00024606 B4AB                       	dc.b $B4, $AB
00024608 24B7                       	dc.b $24, $B7
0002460A 01                         DPLC_cc21_2E2: 	dc.b $1
0002460B B4BA                       	dc.b $B4, $BA
0002460D 01                         DPLC_cc21_2E5: 	dc.b $1
0002460E 54C6                       	dc.b $54, $C6
00024610 01                         DPLC_cc21_2E8: 	dc.b $1
00024611 14CC                       	dc.b $14, $CC
00024613 03                         DPLC_cc21_2EB: 	dc.b $3
00024614 7381                       	dc.b $73, $81
00024616 3389                       	dc.b $33, $89
00024618 238D                       	dc.b $23, $8D
0002461A 03                         DPLC_cc21_2F2: 	dc.b $3
0002461B 7399                       	dc.b $73, $99
0002461D 03A1                       	dc.b $3, $A1
0002461F 33A2                       	dc.b $33, $A2
00024621 03                         DPLC_cc21_2F9: 	dc.b $3
00024622 B4CE                       	dc.b $B4, $CE
00024624 14DA                       	dc.b $14, $DA
00024626 34DC                       	dc.b $34, $DC
00024628 03                         DPLC_cc21_300: 	dc.b $3
00024629 54E0                       	dc.b $54, $E0
0002462B B4E6                       	dc.b $B4, $E6
0002462D 1074                       	dc.b $10, $74
0002462F 02                         DPLC_cc21_307: 	dc.b $2
00024630 F4F2                       	dc.b $F4, $F2
00024632 2502                       	dc.b $25, $2
00024634 02                         DPLC_cc21_30C: 	dc.b $2
00024635 F505                       	dc.b $F5, $5
00024637 1515                       	dc.b $15, $15
00024639 02                         DPLC_cc21_311: 	dc.b $2
0002463A F52D                       	dc.b $F5, $2D
0002463C 253D                       	dc.b $25, $3D
0002463E 02                         DPLC_cc21_316: 	dc.b $2
0002463F F540                       	dc.b $F5, $40
00024641 2550                       	dc.b $25, $50
00024644 00                         	even
00024644 00                         	even
00024644                            
00024644                            ; ---------------------------------------------------------------------------
00024644                            ; Uncompressed graphics	- Sonic
00024644                            ; ---------------------------------------------------------------------------
00024644                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002F0A4                            		even
0002F0A4                            ; ---------------------------------------------------------------------------
0002F0A4                            ; Compressed graphics - various
0002F0A4                            ; ---------------------------------------------------------------------------
0002F0A4                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F1A8                            		even
0002F1A8                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F1E2                            		even
0002F1E2                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002F378                            		even
0002F378                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002F4C0                            		even
0002F4C0                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F5CA                            		even
0002F5CA                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F61C                            		even
0002F61C                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002F864                            		even
0002F864                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002F9EA                            		even
0002F9EA                            ; ---------------------------------------------------------------------------
0002F9EA                            ; Sprite mappings - walls of the special stage
0002F9EA                            ; ---------------------------------------------------------------------------
0002F9EA                            Map_SSWalls:
0002F9EA                            	include "_maps\SSwalls.asm"
0002F9EA                            ; ---------------------------------------------------------------------------
0002F9EA                            ; Sprite mappings - walls of the special stage
0002F9EA                            ; ---------------------------------------------------------------------------
0002F9EA 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002F9EE 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002F9F2 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002F9F6 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002F9FA 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002F9FE 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002FA02 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002FA06 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002FA0A 01                         byte_2C584:	dc.b 1
0002FA0B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002FA10 01                         byte_2C58A:	dc.b 1
0002FA11 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002FA16 01                         byte_2C590:	dc.b 1
0002FA17 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002FA1C 01                         byte_2C596:	dc.b 1
0002FA1D F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002FA22 01                         byte_2C59C:	dc.b 1
0002FA23 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002FA28 01                         byte_2C5A2:	dc.b 1
0002FA29 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002FA2E 01                         byte_2C5A8:	dc.b 1
0002FA2F F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002FA34 01                         byte_2C5AE:	dc.b 1
0002FA35 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002FA3A 01                         byte_2C5B4:	dc.b 1
0002FA3B F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002FA40 01                         byte_2C5BA:	dc.b 1
0002FA41 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002FA46 01                         byte_2C5C0:	dc.b 1
0002FA47 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002FA4C 01                         byte_2C5C6:	dc.b 1
0002FA4D F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002FA52 01                         byte_2C5CC:	dc.b 1
0002FA53 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002FA58 01                         byte_2C5D2:	dc.b 1
0002FA59 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002FA5E 01                         byte_2C5D8:	dc.b 1
0002FA5F F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002FA64 01                         byte_2C5DE:	dc.b 1
0002FA65 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002FA6A                            		even
0002FA6A                            		even
0002FA6A                            ; ---------------------------------------------------------------------------
0002FA6A                            ; Compressed graphics - special stage
0002FA6A                            ; ---------------------------------------------------------------------------
0002FA6A                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000303A2                            		even
000303A2                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000304D6                            		even
000304D6                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00031166                            		even
00031166                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00031466                            		even
00031466                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003195A                            		even
0003195A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031A48                            		even
00031A48                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031B18                            		even
00031B18                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00031C0E                            		even
00031C0E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031C6C                            		even
00031C6C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031CFE                            		even
00031CFE                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031DC0                            		even
00031DC0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00031E8E                            		even
00031E8E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00031F5A                            		even
00031F5A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00032022                            		even
00032022                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000320EC                            		even
000320EC                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000321BC                            		even
000321BC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000323B0                            		even
000323B0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00032518                            		even
00032518                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000325C8                            		even
000325C8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000326A2                            		even
000326A2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00032726                            		even
00032726                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000328A4                            		even
000328A4                            ; ---------------------------------------------------------------------------
000328A4                            ; Compressed graphics - GHZ stuff
000328A4                            ; ---------------------------------------------------------------------------
000328A4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000328EE                            		even
000328EE                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00032A08                            		even
00032A08                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032AF4                            		even
00032AF4                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032B3C                            		even
00032B3C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032CDA                            		even
00032CDA                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032D56                            		even
00032D56                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00032F6A                            		even
00032F6A                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00033096                            		even
00033096                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000331C4                            		even
000331C4                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00033262                            		even
00033262                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000332C2                            		even
000332C2                            ; ---------------------------------------------------------------------------
000332C2                            ; Compressed graphics - LZ stuff
000332C2                            ; ---------------------------------------------------------------------------
000332C2                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000333E6                            		even
000333E6                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033BDA                            		even
00033BDA                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033D5A                            		even
00033D5A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00033EC4                            		even
00033EC4                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003451A                            		even
0003451A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000345D0                            		even
000345D0                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00034672                            		even
00034672                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000347CE                            		even
000347CE                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00034832                            		even
00034832                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00034984                            		even
00034984                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00034E66                            		even
00034E66                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00034FD6                            		even
00034FD6                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003528E                            		even
0003528E                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000353C6                            		even
000353C6                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000354F0                            		even
000354F0                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00035600                            		even
00035600                            ; ---------------------------------------------------------------------------
00035600                            ; Compressed graphics - MZ stuff
00035600                            ; ---------------------------------------------------------------------------
00035600                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003588E                            		even
0003588E                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003594C                            		even
0003594C                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00035A04                            		even
00035A04                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035A58                            		even
00035A58                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035D36                            		even
00035D36                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003664C                            		even
0003664C                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000367B0                            		even
000367B0                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00036838                            		even
00036838                            ; ---------------------------------------------------------------------------
00036838                            ; Compressed graphics - SLZ stuff
00036838                            ; ---------------------------------------------------------------------------
00036838                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00036A74                            		even
00036A74                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036BBA                            		even
00036BBA                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00036DFE                            		even
00036DFE                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00036E60                            		even
00036E60                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00036F42                            		even
00036F42                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00037124                            		even
00037124                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00037230                            		even
00037230                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000372D4                            		even
000372D4                            ; ---------------------------------------------------------------------------
000372D4                            ; Compressed graphics - SYZ stuff
000372D4                            ; ---------------------------------------------------------------------------
000372D4                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003743E                            		even
0003743E                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000374A0                            		even
000374A0                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00037582                            		even
00037582                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00037810                            		even
00037810                            ; ---------------------------------------------------------------------------
00037810                            ; Compressed graphics - SBZ stuff
00037810                            ; ---------------------------------------------------------------------------
00037810                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00037864                            		even
00037864                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037B00                            		even
00037B00                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037D04                            		even
00037D04                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00037EA2                            		even
00037EA2                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000381D2                            		even
000381D2                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000383B0                            		even
000383B0                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00038408                            		even
00038408                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00038588                            		even
00038588                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00038686                            		even
00038686                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00038812                            		even
00038812                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00038862                            		even
00038862                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000388BA                            		even
000388BA                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000389B6                            		even
000389B6                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038ACC                            		even
00038ACC                            ; ---------------------------------------------------------------------------
00038ACC                            ; Compressed graphics - enemies
00038ACC                            ; ---------------------------------------------------------------------------
00038ACC                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00038E8C                            		even
00038E8C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00039036 00                         		even
00039036                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000393F8 00                         		even
000393F8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
000395E0                            		even
000395E0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00039CCA                            		even
00039CCA                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039F32                            		even
00039F32                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003A1BC                            		even
0003A1BC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A6E0                            		even
0003A6E0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A8D6                            		even
0003A8D6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003AEF4                            		even
0003AEF4                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003B2DC                            		even
0003B2DC                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B5D8                            		even
0003B5D8                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B820                            		even
0003B820                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003BAB8                            		even
0003BAB8                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003BC96                            		even
0003BC96                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003BE24                            		even
0003BE24                            ; ---------------------------------------------------------------------------
0003BE24                            ; Compressed graphics - various
0003BE24                            ; ---------------------------------------------------------------------------
0003BE24                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C432                            		even
0003C432                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C528                            		even
0003C528                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C62E                            		even
0003C62E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C722                            		even
0003C722                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003CC66                            		even
0003CC66                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003D2CC                            		even
0003D2CC                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003D37C                            		even
0003D37C                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D50E                            		even
0003D50E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D610                            		even
0003D610                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D6EC                            		even
0003D6EC                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003DB68                            		even
0003DB68                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003DC28                            		even
0003DC28                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003DD9C                            		even
0003DD9C                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003E09E                            		even
0003E09E                            ; ---------------------------------------------------------------------------
0003E09E                            ; Compressed graphics - continue screen
0003E09E                            ; ---------------------------------------------------------------------------
0003E09E                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003E34E                            		even
0003E34E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E588                            		even
0003E588                            ; ---------------------------------------------------------------------------
0003E588                            ; Compressed graphics - animals
0003E588                            ; ---------------------------------------------------------------------------
0003E588                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E6E0                            		even
0003E6E0                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E83C                            		even
0003E83C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E9B8                            		even
0003E9B8                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003EAD4                            		even
0003EAD4                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003EC0A                            		even
0003EC0A                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003ED44                            		even
0003ED44                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003EEA0                            		even
0003EEA0                            ; ---------------------------------------------------------------------------
0003EEA0                            ; Compressed graphics - primary patterns and block mappings
0003EEA0                            ; ---------------------------------------------------------------------------
0003EEA0                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F7B4                            		even
0003F7B4                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
000410C2                            		even
000410C2                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00042442                            		even
00042442                            Blk256_GHZ:	incbin	map256\ghz.bin
00044740                            		even
00044740                            Blk16_LZ:	incbin	map16\lz.bin
00044A0A                            		even
00044A0A                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00046496                            		even
00046496                            Blk256_LZ:	incbin	map256\lz.bin
00048C7A                            		even
00048C7A                            Blk16_MZ:	incbin	map16\mz.bin
000493D6                            		even
000493D6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004BC5E                            		even
0004BC5E                            Blk256_MZ:	incbin	map256\mz.bin
0004D3E2                            		even
0004D3E2                            Blk16_SLZ:	incbin	map16\slz.bin
0004D6C8                            		even
0004D6C8                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E7EA                            		even
0004E7EA                            Blk256_SLZ:	incbin	map256\slz.bin
0004E9A4                            		even
0004E9A4                            Blk16_SYZ:	incbin	map16\syz.bin
0004F5CA                            		even
0004F5CA                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00053B5C                            		even
00053B5C                            Blk256_SYZ:	incbin	map256\syz.bin
00055BB8                            		even
00055BB8                            Blk16_SBZ:	incbin	map16\sbz.bin
00056A52                            		even
00056A52                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
000591FE                            		even
000591FE                            Blk256_SBZ:	incbin	map256\sbz.bin
0005BC4E                            		even
0005BC4E                            ; ---------------------------------------------------------------------------
0005BC4E                            ; Compressed graphics - bosses and ending sequence
0005BC4E                            ; ---------------------------------------------------------------------------
0005BC4E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005C468 00                         		even
0005C468                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005C752                            		even
0005C752                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005CFD6                            		even
0005CFD6                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005DD2C 00                         		even
0005DD2C                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005E494                            		even
0005E494                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005EA14                            		even
0005EA14                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005EB34                            		even
0005EB34                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005ED32                            		even
0005ED32                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005FF10                            		even
0005FF10                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00060854                            		even
00060854                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00060C2A                            		even
00060C2A                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000611BA                            		even
000611BA                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00061442                            		even
00061442                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00061A40                            		even
00061A40                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00061CC8                            		even
00061CC8                            		incbin	misc\padding2.bin
00061DCC                            		even
00061DCC                            ; ---------------------------------------------------------------------------
00061DCC                            ; Collision data
00061DCC                            ; ---------------------------------------------------------------------------
00061DCC                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00061ECC                            		even
00061ECC                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00062ECC                            		even
00062ECC                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00063ECC                            		even
00063ECC                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00064084 00                         		even
00064084                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006414C                            		even
0006414C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000642DC                            		even
000642DC                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000644D0                            		even
000644D0                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000646D6                            		even
000646D6                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006492E                            		even
0006492E                            ; ---------------------------------------------------------------------------
0006492E                            ; Special layouts
0006492E                            ; ---------------------------------------------------------------------------
0006492E                            SS_1:		incbin	sslayout\1.bin
00064BA8                            		even
00064BA8                            SS_2:		incbin	sslayout\2.bin
00064FBA                            		even
00064FBA                            SS_3:		incbin	sslayout\3.bin
00065316                            		even
00065316                            SS_4:		incbin	sslayout\4.bin
000657F0                            		even
000657F0                            SS_5:		incbin	sslayout\5.bin
00065CC2                            		even
00065CC2                            SS_6:		incbin	sslayout\6.bin
00065FD2                            		even
00065FD2                            ; ---------------------------------------------------------------------------
00065FD2                            ; Animated uncompressed graphics
00065FD2                            ; ---------------------------------------------------------------------------
00065FD2                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000661D2                            		even
000661D2                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000665D2                            		even
000665D2                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00066A52                            		even
00066A52                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00066D52                            		even
00066D52                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00067352                            		even
00067352                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00067652                            		even
00067652                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000680D2                            		even
000680D2                            
000680D2                            ; ---------------------------------------------------------------------------
000680D2                            ; Level	layout index
000680D2                            ; ---------------------------------------------------------------------------
000680D2 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000680D8 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000680DE 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000680E4 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000680EA 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000680F0 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000680F6 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000680FC 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00068102 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00068108 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006810E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00068114 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006811A 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068120 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068126 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006812C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00068132 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00068138 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006813E 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00068144 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006814A 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00068150 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00068156 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006815C 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00068162 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068168 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006816E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068174 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006817A                            
0006817A                            Level_GHZ1:	incbin	levels\ghz1.bin
0006826C                            		even
0006826C 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00068270                            Level_GHZ2:	incbin	levels\ghz2.bin
00068338                            		even
00068338 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006833C                            Level_GHZ3:	incbin	levels\ghz3.bin
0006845E                            		even
0006845E                            Level_GHZbg:	incbin	levels\ghzbg.bin
00068480                            		even
00068480 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00068484 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00068488                            
00068488                            Level_LZ1:	incbin	levels\lz1.bin
0006858A                            		even
0006858A                            Level_LZbg:	incbin	levels\lzbg.bin
0006868C                            		even
0006868C 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00068690                            Level_LZ2:	incbin	levels\lz2.bin
0006872A                            		even
0006872A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006872E                            Level_LZ3:	incbin	levels\lz3.bin
00068848                            		even
00068848 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006884C                            Level_SBZ3:	incbin	levels\sbz3.bin
00068906                            		even
00068906 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006890A                            
0006890A                            Level_MZ1:	incbin	levels\mz1.bin
000689A8                            		even
000689A8                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00068A22                            		even
00068A22                            Level_MZ2:	incbin	levels\mz2.bin
00068AC6                            		even
00068AC6                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00068B58                            		even
00068B58 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00068B5C                            Level_MZ3:	incbin	levels\mz3.bin
00068C3E                            		even
00068C3E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00068CE2 00                         		even
00068CE2 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00068CE6 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00068CEA                            
00068CEA                            Level_SLZ1:	incbin	levels\slz1.bin
00068DFC                            		even
00068DFC                            Level_SLZbg:	incbin	levels\slzbg.bin
00068E16                            		even
00068E16                            Level_SLZ2:	incbin	levels\slz2.bin
00068F06                            		even
00068F06                            Level_SLZ3:	incbin	levels\slz3.bin
00069020                            		even
00069020 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00069024                            
00069024                            Level_SYZ1:	incbin	levels\syz1.bin
000690E0 00                         		even
000690E0                            Level_SYZbg:	incbin	levels\syzbg.bin
0006911A                            		even
0006911A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006911E                            Level_SYZ2:	incbin	levels\syz2.bin
00069222                            		even
00069222 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00069226                            Level_SYZ3:	incbin	levels\syz3.bin
00069380 00                         		even
00069380 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00069384 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00069388                            
00069388                            Level_SBZ1:	incbin	levels\sbz1.bin
000694AA                            		even
000694AA                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000694E8                            		even
000694E8                            Level_SBZ2:	incbin	levels\sbz2.bin
0006962A                            		even
0006962A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00069794                            		even
00069794 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00069798 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006979C                            Level_End:	incbin	levels\ending.bin
000697CC 00                         		even
000697CC 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
000697D0                            
000697D0                            ; ---------------------------------------------------------------------------
000697D0                            ; Animated uncompressed giant ring graphics
000697D0                            ; ---------------------------------------------------------------------------
000697D0                            Art_BigRing:	incbin	artunc\bigring.bin
0006A410                            		even
0006A410                            
0006A410                            		incbin	misc\padding3.bin
0006A4AC                            		even
0006A4AC                            
0006A4AC                            ; ---------------------------------------------------------------------------
0006A4AC                            ; Sprite locations index
0006A4AC                            ; ---------------------------------------------------------------------------
0006A4AC 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4B0 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4B4 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4B8 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4BC 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4C0 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4C4 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4C8 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4CC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4D0 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4D4 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4D8 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4DC 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4E0 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4E4 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4E8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4EC 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4F0 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4F4 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4F8 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A4FC 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A500 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A504 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A508 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A50C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A510 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A514 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A518 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006A51C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006A520 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006A524 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006A528 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006A52C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006A530 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006A534 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006A538 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006A53C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006A542                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006AD88                            		even
0006AD88                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006AE3C                            		even
0006AE3C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006B880                            		even
0006B880                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006BC28                            		even
0006BC28                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006BF5E                            		even
0006BF5E                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006C4AA                            		even
0006C4AA                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006C942                            		even
0006C942                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006C974                            		even
0006C974                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006C9A6                            		even
0006C9A6                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006C9D8                            		even
0006C9D8                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006CA0A                            		even
0006CA0A                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006CA54                            		even
0006CA54                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006CA92                            		even
0006CA92                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006CDFE                            		even
0006CDFE                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006D2A8                            		even
0006D2A8                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006D81E                            		even
0006D81E                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006DD64                            		even
0006DD64                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006E1CC                            		even
0006E1CC                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006E7AE                            		even
0006E7AE                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006EE20                            		even
0006EE20                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006F38A                            		even
0006F38A                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006F990                            		even
0006F990                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000700CE                            		even
000700CE                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000707AC                            		even
000707AC                            ObjPos_FZ:	incbin	objpos\fz.bin
000707BE                            		even
000707BE                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000707F0                            		even
000707F0                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00070822                            		even
00070822                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00070854                            		even
00070854                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00070886                            		even
00070886                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000708B8                            		even
000708B8                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000708F0                            		even
000708F0                            ObjPos_End:	incbin	objpos\ending.bin
00070A4C                            		even
00070A4C FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00070A52                            ; ---------------------------------------------------------------------------
00070A52                            		incbin	misc\padding4.bin
0007107C                            		even
0007107C                            
0007107C 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00071080 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00071084 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00071088 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0007108C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00071090 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00071094                            ; ---------------------------------------------------------------------------
00071094                            ; PSG instruments used in music
00071094                            ; ---------------------------------------------------------------------------
00071094 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000710A0 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000710AC 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000710B8                            PSG1:		incbin	sound\psg1.bin
000710CF                            PSG2:		incbin	sound\psg2.bin
000710D6                            PSG3:		incbin	sound\psg3.bin
000710E7                            PSG4:		incbin	sound\psg4.bin
000710F2                            PSG6:		incbin	sound\psg6.bin
00071101                            PSG5:		incbin	sound\psg5.bin
0007112B                            PSG7:		incbin	sound\psg7.bin
00071147                            PSG8:		incbin	sound\psg8.bin
0007116F                            PSG9:		incbin	sound\psg9.bin
00071180                            
00071180 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00071188                            ; ---------------------------------------------------------------------------
00071188                            ; Music	Pointers
00071188                            ; ---------------------------------------------------------------------------
00071188 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00071190 0000 0000 0000 0000        		dc.l Music83, Music84
00071198 0000 0000 0000 0000        		dc.l Music85, Music86
000711A0 0000 0000 0000 0000        		dc.l Music87, Music88
000711A8 0000 0000 0000 0000        		dc.l Music89, Music8A
000711B0 0000 0000 0000 0000        		dc.l Music8B, Music8C
000711B8 0000 0000 0000 0000        		dc.l Music8D, Music8E
000711C0 0000 0000 0000 0000        		dc.l Music8F, Music90
000711C8 0000 0000 0000 0000        		dc.l Music91, Music92
000711D0 0000 0000 0000 0000        		dc.l Music93, Music94
000711D8 0000 0000 0000 0000        		dc.l Music95, Music96
000711E0 0000 0000 0000 0000        		dc.l Music97, Music98
000711E8 0000 0000 0000 0000        		dc.l Music99, Music9A
000711F0 0000 0000 0000 0000        		dc.l Music9B, Music9C
000711F8 0000 0000 0000 0000        		dc.l Music9D, Music9E
00071200 0000 0000                  		dc.l Music9F
00071204                            ; ---------------------------------------------------------------------------
00071204                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00071204                            ; ---------------------------------------------------------------------------
00071204 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00071214 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00071224 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00071234 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00071244 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00071254 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00071264 9090 9090                  		dc.b $90, $90, $90, $90
00071268                            
00071268                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071268                            
00071268                            
00071268                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00071268 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00071270 4E71                       		nop	
00071272 4E71                       		nop	
00071274 4E71                       		nop	
00071276                            
00071276                            loc_71B5A:
00071276 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007127E 66F6                       		bne.s	loc_71B5A
00071280                            
00071280 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00071288 6700                       		beq.s	loc_71B82
0007128A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071292 4E71                       		nop	
00071294 4E71                       		nop	
00071296 4E71                       		nop	
00071298 4E71                       		nop	
0007129A 4E71                       		nop	
0007129C 60CA                       		bra.s	sub_71B4C
0007129E                            ; ===========================================================================
0007129E                            
0007129E                            loc_71B82:
0007129E 4DF9 00FF F000             		lea	($FFF000).l,a6
000712A4 422E 000E                  		clr.b	$E(a6)
000712A8 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000712AC 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000712B0 532E 0001                  		subq.b	#1,1(a6)
000712B4 6600                       		bne.s	loc_71B9E
000712B6 4EBA 0000                  		jsr	sub_7260C(pc)
000712BA                            
000712BA                            loc_71B9E:
000712BA 102E 0004                  		move.b	4(a6),d0
000712BE 6700                       		beq.s	loc_71BA8
000712C0 4EBA 0000                  		jsr	sub_72504(pc)
000712C4                            
000712C4                            loc_71BA8:
000712C4 4A2E 0024                  		tst.b	$24(a6)
000712C8 6700                       		beq.s	loc_71BB2
000712CA 4EBA 0000                  		jsr	sub_7267C(pc)
000712CE                            
000712CE                            loc_71BB2:
000712CE 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000712D2 6700                       		beq.s	loc_71BBC	; if not, branch
000712D4 4EBA 0000                  		jsr	Sound_Play(pc)
000712D8                            
000712D8                            loc_71BBC:
000712D8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000712DE 6700                       		beq.s	loc_71BC8
000712E0 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000712E4                            
000712E4                            loc_71BC8:
000712E4 4BEE 0040                  		lea	$40(a6),a5
000712E8 4A15                       		tst.b	(a5)
000712EA 6A00                       		bpl.s	loc_71BD4
000712EC 4EBA 0000                  		jsr	sub_71C4E(pc)
000712F0                            
000712F0                            loc_71BD4:
000712F0 422E 0008                  		clr.b	8(a6)
000712F4 7E05                       		moveq	#5,d7
000712F6                            
000712F6                            loc_71BDA:
000712F6 DAFC 0030                  		adda.w	#$30,a5
000712FA 4A15                       		tst.b	(a5)
000712FC 6A00                       		bpl.s	loc_71BE6
000712FE 4EBA 0000                  		jsr	sub_71CCA(pc)
00071302                            
00071302                            loc_71BE6:
00071302 51CF FFF2                  		dbf	d7,loc_71BDA
00071306                            
00071306 7E02                       		moveq	#2,d7
00071308                            
00071308                            loc_71BEC:
00071308 DAFC 0030                  		adda.w	#$30,a5
0007130C 4A15                       		tst.b	(a5)
0007130E 6A00                       		bpl.s	loc_71BF8
00071310 4EBA 0000                  		jsr	sub_72850(pc)
00071314                            
00071314                            loc_71BF8:
00071314 51CF FFF2                  		dbf	d7,loc_71BEC
00071318                            
00071318 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007131E 7E02                       		moveq	#2,d7
00071320                            
00071320                            loc_71C04:
00071320 DAFC 0030                  		adda.w	#$30,a5
00071324 4A15                       		tst.b	(a5)
00071326 6A00                       		bpl.s	loc_71C10
00071328 4EBA 0000                  		jsr	sub_71CCA(pc)
0007132C                            
0007132C                            loc_71C10:
0007132C 51CF FFF2                  		dbf	d7,loc_71C04
00071330                            
00071330 7E02                       		moveq	#2,d7
00071332                            
00071332                            loc_71C16:
00071332 DAFC 0030                  		adda.w	#$30,a5
00071336 4A15                       		tst.b	(a5)
00071338 6A00                       		bpl.s	loc_71C22
0007133A 4EBA 0000                  		jsr	sub_72850(pc)
0007133E                            
0007133E                            loc_71C22:
0007133E 51CF FFF2                  		dbf	d7,loc_71C16
00071342 1D7C 0040 000E             		move.b	#$40,$E(a6)
00071348 DAFC 0030                  		adda.w	#$30,a5
0007134C 4A15                       		tst.b	(a5)
0007134E 6A00                       		bpl.s	loc_71C38
00071350 4EBA 0000                  		jsr	sub_71CCA(pc)
00071354                            
00071354                            loc_71C38:
00071354 DAFC 0030                  		adda.w	#$30,a5
00071358 4A15                       		tst.b	(a5)
0007135A 6A00                       		bpl.s	loc_71C44
0007135C 4EBA 0000                  		jsr	sub_72850(pc)
00071360                            
00071360                            loc_71C44:
00071360 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071368 4E75                       		rts	
0007136A                            ; End of function sub_71B4C
0007136A                            
0007136A                            
0007136A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007136A                            
0007136A                            
0007136A                            sub_71C4E:				; XREF: sub_71B4C
0007136A 532D 000E                  		subq.b	#1,$E(a5)
0007136E 6600                       		bne.s	locret_71CAA
00071370 1D7C 0080 0008             		move.b	#$80,8(a6)
00071376 286D 0004                  		movea.l	4(a5),a4
0007137A                            
0007137A                            loc_71C5E:
0007137A 7A00                       		moveq	#0,d5
0007137C 1A1C                       		move.b	(a4)+,d5
0007137E 0C05 00E0                  		cmpi.b	#-$20,d5
00071382 6500                       		bcs.s	loc_71C6E
00071384 4EBA 0000                  		jsr	sub_72A5A(pc)
00071388 60F0                       		bra.s	loc_71C5E
0007138A                            ; ===========================================================================
0007138A                            
0007138A                            loc_71C6E:
0007138A 4A05                       		tst.b	d5
0007138C 6A00                       		bpl.s	loc_71C84
0007138E 1B45 0010                  		move.b	d5,$10(a5)
00071392 1A1C                       		move.b	(a4)+,d5
00071394 6A00                       		bpl.s	loc_71C84
00071396 534C                       		subq.w	#1,a4
00071398 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007139E 6000                       		bra.s	loc_71C88
000713A0                            ; ===========================================================================
000713A0                            
000713A0                            loc_71C84:
000713A0 4EBA 0000                  		jsr	sub_71D40(pc)
000713A4                            
000713A4                            loc_71C88:
000713A4 2B4C 0004                  		move.l	a4,4(a5)
000713A8 0815 0002                  		btst	#2,(a5)
000713AC 6600                       		bne.s	locret_71CAA
000713AE 7000                       		moveq	#0,d0
000713B0 102D 0010                  		move.b	$10(a5),d0
000713B4 0C00 0080                  		cmpi.b	#$80,d0
000713B8 6700                       		beq.s	locret_71CAA
000713BA 0800 0003                  		btst	#3,d0
000713BE 6600                       		bne.s	loc_71CAC
000713C0 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000713C6                            
000713C6                            locret_71CAA:
000713C6 4E75                       		rts	
000713C8                            ; ===========================================================================
000713C8                            
000713C8                            loc_71CAC:
000713C8 0400 0088                  		subi.b	#$88,d0
000713CC 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000713D0 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000713D6 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000713DE 4E75                       		rts	
000713E0                            ; End of function sub_71C4E
000713E0                            
000713E0                            ; ===========================================================================
000713E0 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000713E6                            
000713E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000713E6                            
000713E6                            
000713E6                            sub_71CCA:				; XREF: sub_71B4C
000713E6 532D 000E                  		subq.b	#1,$E(a5)
000713EA 6600                       		bne.s	loc_71CE0
000713EC 0895 0004                  		bclr	#4,(a5)
000713F0 4EBA 0000                  		jsr	sub_71CEC(pc)
000713F4 4EBA 0000                  		jsr	sub_71E18(pc)
000713F8 6000 0000                  		bra.w	loc_726E2
000713FC                            ; ===========================================================================
000713FC                            
000713FC                            loc_71CE0:
000713FC 4EBA 0000                  		jsr	sub_71D9E(pc)
00071400 4EBA 0000                  		jsr	sub_71DC6(pc)
00071404 6000 0000                  		bra.w	loc_71E24
00071408                            ; End of function sub_71CCA
00071408                            
00071408                            
00071408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071408                            
00071408                            
00071408                            sub_71CEC:				; XREF: sub_71CCA
00071408 286D 0004                  		movea.l	4(a5),a4
0007140C 0895 0001                  		bclr	#1,(a5)
00071410                            
00071410                            loc_71CF4:
00071410 7A00                       		moveq	#0,d5
00071412 1A1C                       		move.b	(a4)+,d5
00071414 0C05 00E0                  		cmpi.b	#-$20,d5
00071418 6500                       		bcs.s	loc_71D04
0007141A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007141E 60F0                       		bra.s	loc_71CF4
00071420                            ; ===========================================================================
00071420                            
00071420                            loc_71D04:
00071420 4EBA 0000                  		jsr	sub_726FE(pc)
00071424 4A05                       		tst.b	d5
00071426 6A00                       		bpl.s	loc_71D1A
00071428 4EBA 0000                  		jsr	sub_71D22(pc)
0007142C 1A1C                       		move.b	(a4)+,d5
0007142E 6A00                       		bpl.s	loc_71D1A
00071430 534C                       		subq.w	#1,a4
00071432 6000 0000                  		bra.w	sub_71D60
00071436                            ; ===========================================================================
00071436                            
00071436                            loc_71D1A:
00071436 4EBA 0000                  		jsr	sub_71D40(pc)
0007143A 6000 0000                  		bra.w	sub_71D60
0007143E                            ; End of function sub_71CEC
0007143E                            
0007143E                            
0007143E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007143E                            
0007143E                            
0007143E                            sub_71D22:				; XREF: sub_71CEC
0007143E 0405 0080                  		subi.b	#$80,d5
00071442 6700                       		beq.s	loc_71D58
00071444 DA2D 0008                  		add.b	8(a5),d5
00071448 0245 007F                  		andi.w	#$7F,d5
0007144C E34D                       		lsl.w	#1,d5
0007144E 41FA 0000                  		lea	word_72790(pc),a0
00071452 3C30 5000                  		move.w	(a0,d5.w),d6
00071456 3B46 0010                  		move.w	d6,$10(a5)
0007145A 4E75                       		rts	
0007145C                            ; End of function sub_71D22
0007145C                            
0007145C                            
0007145C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007145C                            
0007145C                            
0007145C                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007145C 1005                       		move.b	d5,d0
0007145E 122D 0002                  		move.b	2(a5),d1
00071462                            
00071462                            loc_71D46:
00071462 5301                       		subq.b	#1,d1
00071464 6700                       		beq.s	loc_71D4E
00071466 D005                       		add.b	d5,d0
00071468 60F8                       		bra.s	loc_71D46
0007146A                            ; ===========================================================================
0007146A                            
0007146A                            loc_71D4E:
0007146A 1B40 000F                  		move.b	d0,$F(a5)
0007146E 1B40 000E                  		move.b	d0,$E(a5)
00071472 4E75                       		rts	
00071474                            ; End of function sub_71D40
00071474                            
00071474                            ; ===========================================================================
00071474                            
00071474                            loc_71D58:				; XREF: sub_71D22
00071474 08D5 0001                  		bset	#1,(a5)
00071478 426D 0010                  		clr.w	$10(a5)
0007147C                            
0007147C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007147C                            
0007147C                            
0007147C                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007147C 2B4C 0004                  		move.l	a4,4(a5)
00071480 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00071486 0815 0004                  		btst	#4,(a5)
0007148A 6600                       		bne.s	locret_71D9C
0007148C 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00071492 422D 000C                  		clr.b	$C(a5)
00071496 0815 0003                  		btst	#3,(a5)
0007149A 6700                       		beq.s	locret_71D9C
0007149C 206D 0014                  		movea.l	$14(a5),a0
000714A0 1B58 0018                  		move.b	(a0)+,$18(a5)
000714A4 1B58 0019                  		move.b	(a0)+,$19(a5)
000714A8 1B58 001A                  		move.b	(a0)+,$1A(a5)
000714AC 1018                       		move.b	(a0)+,d0
000714AE E208                       		lsr.b	#1,d0
000714B0 1B40 001B                  		move.b	d0,$1B(a5)
000714B4 426D 001C                  		clr.w	$1C(a5)
000714B8                            
000714B8                            locret_71D9C:
000714B8 4E75                       		rts	
000714BA                            ; End of function sub_71D60
000714BA                            
000714BA                            
000714BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000714BA                            
000714BA                            
000714BA                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000714BA 4A2D 0012                  		tst.b	$12(a5)
000714BE 6700                       		beq.s	locret_71DC4
000714C0 532D 0012                  		subq.b	#1,$12(a5)
000714C4 6600                       		bne.s	locret_71DC4
000714C6 08D5 0001                  		bset	#1,(a5)
000714CA 4A2D 0001                  		tst.b	1(a5)
000714CE 6B00 0000                  		bmi.w	loc_71DBE
000714D2 4EBA 0000                  		jsr	sub_726FE(pc)
000714D6 584F                       		addq.w	#4,sp
000714D8 4E75                       		rts	
000714DA                            ; ===========================================================================
000714DA                            
000714DA                            loc_71DBE:
000714DA 4EBA 0000                  		jsr	sub_729A0(pc)
000714DE 584F                       		addq.w	#4,sp
000714E0                            
000714E0                            locret_71DC4:
000714E0 4E75                       		rts	
000714E2                            ; End of function sub_71D9E
000714E2                            
000714E2                            
000714E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000714E2                            
000714E2                            
000714E2                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000714E2 584F                       		addq.w	#4,sp
000714E4 0815 0003                  		btst	#3,(a5)
000714E8 6700                       		beq.s	locret_71E16
000714EA 4A2D 0018                  		tst.b	$18(a5)
000714EE 6700                       		beq.s	loc_71DDA
000714F0 532D 0018                  		subq.b	#1,$18(a5)
000714F4 4E75                       		rts	
000714F6                            ; ===========================================================================
000714F6                            
000714F6                            loc_71DDA:
000714F6 532D 0019                  		subq.b	#1,$19(a5)
000714FA 6700                       		beq.s	loc_71DE2
000714FC 4E75                       		rts	
000714FE                            ; ===========================================================================
000714FE                            
000714FE                            loc_71DE2:
000714FE 206D 0014                  		movea.l	$14(a5),a0
00071502 1B68 0001 0019             		move.b	1(a0),$19(a5)
00071508 4A2D 001B                  		tst.b	$1B(a5)
0007150C 6600                       		bne.s	loc_71DFE
0007150E 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00071514 442D 001A                  		neg.b	$1A(a5)
00071518 4E75                       		rts	
0007151A                            ; ===========================================================================
0007151A                            
0007151A                            loc_71DFE:
0007151A 532D 001B                  		subq.b	#1,$1B(a5)
0007151E 1C2D 001A                  		move.b	$1A(a5),d6
00071522 4886                       		ext.w	d6
00071524 DC6D 001C                  		add.w	$1C(a5),d6
00071528 3B46 001C                  		move.w	d6,$1C(a5)
0007152C DC6D 0010                  		add.w	$10(a5),d6
00071530 594F                       		subq.w	#4,sp
00071532                            
00071532                            locret_71E16:
00071532 4E75                       		rts	
00071534                            ; End of function sub_71DC6
00071534                            
00071534                            
00071534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071534                            
00071534                            
00071534                            sub_71E18:				; XREF: sub_71CCA
00071534 0815 0001                  		btst	#1,(a5)
00071538 6600                       		bne.s	locret_71E48
0007153A 3C2D 0010                  		move.w	$10(a5),d6
0007153E 6700                       		beq.s	loc_71E4A
00071540                            
00071540                            loc_71E24:				; XREF: sub_71CCA
00071540 102D 001E                  		move.b	$1E(a5),d0
00071544 4880                       		ext.w	d0
00071546 DC40                       		add.w	d0,d6
00071548 0815 0002                  		btst	#2,(a5)
0007154C 6600                       		bne.s	locret_71E48
0007154E 3206                       		move.w	d6,d1
00071550 E049                       		lsr.w	#8,d1
00071552 103C 00A4                  		move.b	#-$5C,d0
00071556 4EBA 0000                  		jsr	sub_72722(pc)
0007155A 1206                       		move.b	d6,d1
0007155C 103C 00A0                  		move.b	#-$60,d0
00071560 4EBA 0000                  		jsr	sub_72722(pc)
00071564                            
00071564                            locret_71E48:
00071564 4E75                       		rts	
00071566                            ; ===========================================================================
00071566                            
00071566                            loc_71E4A:
00071566 08D5 0001                  		bset	#1,(a5)
0007156A 4E75                       		rts	
0007156C                            ; End of function sub_71E18
0007156C                            
0007156C                            ; ===========================================================================
0007156C                            
0007156C                            loc_71E50:				; XREF: sub_71B4C
0007156C 6B00                       		bmi.s	loc_71E94
0007156E 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00071574 6700 0000                  		beq.w	loc_71EFE
00071578 1D7C 0002 0003             		move.b	#2,3(a6)
0007157E 7602                       		moveq	#2,d3
00071580 103C 00B4                  		move.b	#-$4C,d0
00071584 7200                       		moveq	#0,d1
00071586                            
00071586                            loc_71E6A:
00071586 4EBA 0000                  		jsr	sub_7272E(pc)
0007158A 4EBA 0000                  		jsr	sub_72764(pc)
0007158E 5200                       		addq.b	#1,d0
00071590 51CB FFF4                  		dbf	d3,loc_71E6A
00071594                            
00071594 7602                       		moveq	#2,d3
00071596 7028                       		moveq	#$28,d0
00071598                            
00071598                            loc_71E7C:
00071598 1203                       		move.b	d3,d1
0007159A 4EBA 0000                  		jsr	sub_7272E(pc)
0007159E 5801                       		addq.b	#4,d1
000715A0 4EBA 0000                  		jsr	sub_7272E(pc)
000715A4 51CB FFF2                  		dbf	d3,loc_71E7C
000715A8                            
000715A8 4EBA 0000                  		jsr	sub_729B6(pc)
000715AC 6000 FDB2                  		bra.w	loc_71C44
000715B0                            ; ===========================================================================
000715B0                            
000715B0                            loc_71E94:				; XREF: loc_71E50
000715B0 422E 0003                  		clr.b	3(a6)
000715B4 7630                       		moveq	#$30,d3
000715B6 4BEE 0040                  		lea	$40(a6),a5
000715BA 7806                       		moveq	#6,d4
000715BC                            
000715BC                            loc_71EA0:
000715BC 0815 0007                  		btst	#7,(a5)
000715C0 6700                       		beq.s	loc_71EB8
000715C2 0815 0002                  		btst	#2,(a5)
000715C6 6600                       		bne.s	loc_71EB8
000715C8 103C 00B4                  		move.b	#-$4C,d0
000715CC 122D 000A                  		move.b	$A(a5),d1
000715D0 4EBA 0000                  		jsr	sub_72722(pc)
000715D4                            
000715D4                            loc_71EB8:
000715D4 DAC3                       		adda.w	d3,a5
000715D6 51CC FFE4                  		dbf	d4,loc_71EA0
000715DA                            
000715DA 4BEE 0220                  		lea	$220(a6),a5
000715DE 7802                       		moveq	#2,d4
000715E0                            
000715E0                            loc_71EC4:
000715E0 0815 0007                  		btst	#7,(a5)
000715E4 6700                       		beq.s	loc_71EDC
000715E6 0815 0002                  		btst	#2,(a5)
000715EA 6600                       		bne.s	loc_71EDC
000715EC 103C 00B4                  		move.b	#-$4C,d0
000715F0 122D 000A                  		move.b	$A(a5),d1
000715F4 4EBA 0000                  		jsr	sub_72722(pc)
000715F8                            
000715F8                            loc_71EDC:
000715F8 DAC3                       		adda.w	d3,a5
000715FA 51CC FFE4                  		dbf	d4,loc_71EC4
000715FE                            
000715FE 4BEE 0340                  		lea	$340(a6),a5
00071602 0815 0007                  		btst	#7,(a5)
00071606 6700                       		beq.s	loc_71EFE
00071608 0815 0002                  		btst	#2,(a5)
0007160C 6600                       		bne.s	loc_71EFE
0007160E 103C 00B4                  		move.b	#-$4C,d0
00071612 122D 000A                  		move.b	$A(a5),d1
00071616 4EBA 0000                  		jsr	sub_72722(pc)
0007161A                            
0007161A                            loc_71EFE:
0007161A 6000 FD44                  		bra.w	loc_71C44
0007161E                            
0007161E                            ; ---------------------------------------------------------------------------
0007161E                            ; Subroutine to	play a sound or	music track
0007161E                            ; ---------------------------------------------------------------------------
0007161E                            
0007161E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007161E                            
0007161E                            
0007161E                            Sound_Play:				; XREF: sub_71B4C
0007161E 2079 0007 107C             		movea.l	(Go_SoundTypes).l,a0
00071624 43EE 000A                  		lea	$A(a6),a1	; load music track number
00071628 1616                       		move.b	0(a6),d3
0007162A 7802                       		moveq	#2,d4
0007162C                            
0007162C                            loc_71F12:
0007162C 1011                       		move.b	(a1),d0		; move track number to d0
0007162E 1200                       		move.b	d0,d1
00071630 4219                       		clr.b	(a1)+
00071632 0400 0081                  		subi.b	#$81,d0
00071636 6500                       		bcs.s	loc_71F3E
00071638 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007163E 6700                       		beq.s	loc_71F2C
00071640 1D41 000A                  		move.b	d1,$A(a6)
00071644 6000                       		bra.s	loc_71F3E
00071646                            ; ===========================================================================
00071646                            
00071646                            loc_71F2C:
00071646 0240 007F                  		andi.w	#$7F,d0
0007164A 1430 0000                  		move.b	(a0,d0.w),d2
0007164E B403                       		cmp.b	d3,d2
00071650 6500                       		bcs.s	loc_71F3E
00071652 1602                       		move.b	d2,d3
00071654 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00071658                            
00071658                            loc_71F3E:
00071658 51CC FFD2                  		dbf	d4,loc_71F12
0007165C                            
0007165C 4A03                       		tst.b	d3
0007165E 6B00                       		bmi.s	locret_71F4A
00071660 1C83                       		move.b	d3,0(a6)
00071662                            
00071662                            locret_71F4A:
00071662 4E75                       		rts	
00071664                            ; End of function Sound_Play
00071664                            
00071664                            
00071664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071664                            
00071664                            
00071664                            Sound_ChkValue:				; XREF: sub_71B4C
00071664 7E00                       		moveq	#0,d7
00071666 1E2E 0009                  		move.b	9(a6),d7
0007166A 6700 0000                  		beq.w	Sound_E4
0007166E 6A00                       		bpl.s	locret_71F8C
00071670 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00071676 0C07 009F                  		cmpi.b	#$9F,d7
0007167A 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0007167E 0C07 00A0                  		cmpi.b	#$A0,d7
00071682 6500 0000                  		bcs.w	locret_71F8C
00071686 0C07 00CF                  		cmpi.b	#$CF,d7
0007168A 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0007168E 0C07 00D0                  		cmpi.b	#$D0,d7
00071692 6500 0000                  		bcs.w	locret_71F8C
00071696 0C07 00E0                  		cmpi.b	#$E0,d7
0007169A 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0007169E 0C07 00E5                  		cmpi.b	#$E5,d7
000716A2 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000716A4                            
000716A4                            locret_71F8C:
000716A4 4E75                       		rts	
000716A6                            ; ===========================================================================
000716A6                            
000716A6                            Sound_E0toE5				; XREF: Sound_ChkValue
000716A6 0407 00E0                  		subi.b	#$E0,d7
000716AA E54F                       		lsl.w	#2,d7
000716AC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000716B0                            ; ===========================================================================
000716B0                            
000716B0                            Sound_ExIndex:
000716B0 6000 0000                  		bra.w	Sound_E0
000716B4                            ; ===========================================================================
000716B4 6000 0000                  		bra.w	Sound_E1
000716B8                            ; ===========================================================================
000716B8 6000 0000                  		bra.w	Sound_E2
000716BC                            ; ===========================================================================
000716BC 6000 0000                  		bra.w	Sound_E3
000716C0                            ; ===========================================================================
000716C0 6000 0000                  		bra.w	Sound_E4
000716C4                            ; ===========================================================================
000716C4 6000 0000                  		bra.w	Sound_E5
000716C8                            ; ===========================================================================
000716C8                            ; ---------------------------------------------------------------------------
000716C8                            ; Play "Say-gaa" PCM sound
000716C8                            ; ---------------------------------------------------------------------------
000716C8                            
000716C8                            Sound_E1:				  
000716C8 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000716CE 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000716D4 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000716DC                            PlayPCM_Loop:	  
000716DC 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000716E2 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000716E6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000716EA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000716EC 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000716EE 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000716F2 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000716F8 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000716FC 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00071702 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00071704 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00071706                            return_PlayPCM: 
00071706 584F                       		addq.w	#4,sp 
00071708 4E75                       		rts
0007170A                            		
0007170A                            ; ---------------------------------------------------------------------------
0007170A                            ; Play you are an idiot pcm sound
0007170A                            ; ---------------------------------------------------------------------------
0007170A                            
0007170A                            Sound_E5:  
0007170A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00071710 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00071716 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007171E                            PlayPCM_LoopE5:	  
0007171E                            
0007171E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00071724                            		
00071724 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00071728                            		
00071728 1038 FE24                  		move.b	($FFFFFE24).w,d0
0007172C 0200 000F                  		andi.b	#$F,d0
00071730 6700                       		beq.s	SfxE5SwapPalette
00071732                            		
00071732 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00071736 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007173A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007173C 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007173E 60DE                       		bra.s	PlayPCM_LoopE5
00071740                            		
00071740                            SfxE5SwapPalette:
00071740                            		
00071740                            		
00071740                            		
00071740 4BF9 00C0 0004             		lea	($C00004).l,a5
00071746 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007174C                            		
0007174C                            		
0007174C 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00071752 6700                       		beq.s	@not_black
00071754 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007175A 6000                       		bra.s	@merge
0007175C                            	@not_black:
0007175C 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00071762                            	@merge:
00071762 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00071766 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007176A 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00071770 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00071774                            		
00071774 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00071778 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007177C 60A0                       		bra.s	PlayPCM_LoopE5
0007177E                            		
0007177E                            ; ===========================================================================
0007177E                            ; ---------------------------------------------------------------------------
0007177E                            ; Play music track $81-$9F
0007177E                            ; ---------------------------------------------------------------------------
0007177E                            
0007177E                            Sound_81to9F:				; XREF: Sound_ChkValue
0007177E 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00071782 6600                       		bne.s	loc_72024	; if not, branch
00071784 4A2E 0027                  		tst.b	$27(a6)
00071788 6600 0000                  		bne.w	loc_721B6
0007178C 4BEE 0040                  		lea	$40(a6),a5
00071790 7009                       		moveq	#9,d0
00071792                            
00071792                            loc_71FE6:
00071792 0895 0002                  		bclr	#2,(a5)
00071796 DAFC 0030                  		adda.w	#$30,a5
0007179A 51C8 FFF6                  		dbf	d0,loc_71FE6
0007179E                            
0007179E 4BEE 0220                  		lea	$220(a6),a5
000717A2 7005                       		moveq	#5,d0
000717A4                            
000717A4                            loc_71FF8:
000717A4 0895 0007                  		bclr	#7,(a5)
000717A8 DAFC 0030                  		adda.w	#$30,a5
000717AC 51C8 FFF6                  		dbf	d0,loc_71FF8
000717B0 4216                       		clr.b	0(a6)
000717B2 204E                       		movea.l	a6,a0
000717B4 43EE 03A0                  		lea	$3A0(a6),a1
000717B8 303C 0087                  		move.w	#$87,d0
000717BC                            
000717BC                            loc_72012:
000717BC 22D8                       		move.l	(a0)+,(a1)+
000717BE 51C8 FFFC                  		dbf	d0,loc_72012
000717C2                            
000717C2 1D7C 0080 0027             		move.b	#$80,$27(a6)
000717C8 4216                       		clr.b	0(a6)
000717CA 6000                       		bra.s	loc_7202C
000717CC                            ; ===========================================================================
000717CC                            
000717CC                            loc_72024:
000717CC 422E 0027                  		clr.b	$27(a6)
000717D0 422E 0026                  		clr.b	$26(a6)
000717D4                            
000717D4                            loc_7202C:
000717D4 4EBA 0000                  		jsr	sub_725CA(pc)
000717D8 2879 0007 108C             		movea.l	(off_719A0).l,a4
000717DE 0407 0081                  		subi.b	#$81,d7
000717E2 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000717E8 2879 0007 1084             		movea.l	(Go_MusicIndex).l,a4
000717EE E54F                       		lsl.w	#2,d7
000717F0 2874 7000                  		movea.l	(a4,d7.w),a4
000717F4 7000                       		moveq	#0,d0
000717F6 3014                       		move.w	(a4),d0
000717F8 D08C                       		add.l	a4,d0
000717FA 2D40 0018                  		move.l	d0,$18(a6)
000717FE 102C 0005                  		move.b	5(a4),d0
00071802 1D40 0028                  		move.b	d0,$28(a6)
00071806 4A2E 002A                  		tst.b	$2A(a6)
0007180A 6700                       		beq.s	loc_72068
0007180C 102E 0029                  		move.b	$29(a6),d0
00071810                            
00071810                            loc_72068:
00071810 1D40 0002                  		move.b	d0,2(a6)
00071814 1D40 0001                  		move.b	d0,1(a6)
00071818 7200                       		moveq	#0,d1
0007181A 264C                       		movea.l	a4,a3
0007181C 5C4C                       		addq.w	#6,a4
0007181E 7E00                       		moveq	#0,d7
00071820 1E2B 0002                  		move.b	2(a3),d7
00071824 6700 0000                  		beq.w	loc_72114
00071828 5307                       		subq.b	#1,d7
0007182A 123C 00C0                  		move.b	#-$40,d1
0007182E 182B 0004                  		move.b	4(a3),d4
00071832 7C30                       		moveq	#$30,d6
00071834 1A3C 0001                  		move.b	#1,d5
00071838 43EE 0040                  		lea	$40(a6),a1
0007183C 45FA 0000                  		lea	byte_721BA(pc),a2
00071840                            
00071840                            loc_72098:
00071840 08D1 0007                  		bset	#7,(a1)
00071844 135A 0001                  		move.b	(a2)+,1(a1)
00071848 1344 0002                  		move.b	d4,2(a1)
0007184C 1346 000D                  		move.b	d6,$D(a1)
00071850 1341 000A                  		move.b	d1,$A(a1)
00071854 1345 000E                  		move.b	d5,$E(a1)
00071858 7000                       		moveq	#0,d0
0007185A 301C                       		move.w	(a4)+,d0
0007185C D08B                       		add.l	a3,d0
0007185E 2340 0004                  		move.l	d0,4(a1)
00071862 335C 0008                  		move.w	(a4)+,8(a1)
00071866 D2C6                       		adda.w	d6,a1
00071868 51CF FFD6                  		dbf	d7,loc_72098
0007186C 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00071872 6600                       		bne.s	loc_720D8
00071874 702B                       		moveq	#$2B,d0
00071876 7200                       		moveq	#0,d1
00071878 4EBA 0000                  		jsr	sub_7272E(pc)
0007187C 6000 0000                  		bra.w	loc_72114
00071880                            ; ===========================================================================
00071880                            
00071880                            loc_720D8:
00071880 7028                       		moveq	#$28,d0
00071882 7206                       		moveq	#6,d1
00071884 4EBA 0000                  		jsr	sub_7272E(pc)
00071888 103C 0042                  		move.b	#$42,d0
0007188C 727F                       		moveq	#$7F,d1
0007188E 4EBA 0000                  		jsr	sub_72764(pc)
00071892 103C 004A                  		move.b	#$4A,d0
00071896 727F                       		moveq	#$7F,d1
00071898 4EBA 0000                  		jsr	sub_72764(pc)
0007189C 103C 0046                  		move.b	#$46,d0
000718A0 727F                       		moveq	#$7F,d1
000718A2 4EBA 0000                  		jsr	sub_72764(pc)
000718A6 103C 004E                  		move.b	#$4E,d0
000718AA 727F                       		moveq	#$7F,d1
000718AC 4EBA 0000                  		jsr	sub_72764(pc)
000718B0 103C 00B6                  		move.b	#-$4A,d0
000718B4 123C 00C0                  		move.b	#-$40,d1
000718B8 4EBA 0000                  		jsr	sub_72764(pc)
000718BC                            
000718BC                            loc_72114:
000718BC 7E00                       		moveq	#0,d7
000718BE 1E2B 0003                  		move.b	3(a3),d7
000718C2 6700                       		beq.s	loc_72154
000718C4 5307                       		subq.b	#1,d7
000718C6 43EE 0190                  		lea	$190(a6),a1
000718CA 45FA 0000                  		lea	byte_721C2(pc),a2
000718CE                            
000718CE                            loc_72126:
000718CE 08D1 0007                  		bset	#7,(a1)
000718D2 135A 0001                  		move.b	(a2)+,1(a1)
000718D6 1344 0002                  		move.b	d4,2(a1)
000718DA 1346 000D                  		move.b	d6,$D(a1)
000718DE 1345 000E                  		move.b	d5,$E(a1)
000718E2 7000                       		moveq	#0,d0
000718E4 301C                       		move.w	(a4)+,d0
000718E6 D08B                       		add.l	a3,d0
000718E8 2340 0004                  		move.l	d0,4(a1)
000718EC 335C 0008                  		move.w	(a4)+,8(a1)
000718F0 101C                       		move.b	(a4)+,d0
000718F2 135C 000B                  		move.b	(a4)+,$B(a1)
000718F6 D2C6                       		adda.w	d6,a1
000718F8 51CF FFD4                  		dbf	d7,loc_72126
000718FC                            
000718FC                            loc_72154:
000718FC 43EE 0220                  		lea	$220(a6),a1
00071900 7E05                       		moveq	#5,d7
00071902                            
00071902                            loc_7215A:
00071902 4A11                       		tst.b	(a1)
00071904 6A00 0000                  		bpl.w	loc_7217C
00071908 7000                       		moveq	#0,d0
0007190A 1029 0001                  		move.b	1(a1),d0
0007190E 6B00                       		bmi.s	loc_7216E
00071910 5500                       		subq.b	#2,d0
00071912 E508                       		lsl.b	#2,d0
00071914 6000                       		bra.s	loc_72170
00071916                            ; ===========================================================================
00071916                            
00071916                            loc_7216E:
00071916 E608                       		lsr.b	#3,d0
00071918                            
00071918                            loc_72170:
00071918 41FA 0000                  		lea	dword_722CC(pc),a0
0007191C 2070 0000                  		movea.l	(a0,d0.w),a0
00071920 08D0 0002                  		bset	#2,(a0)
00071924                            
00071924                            loc_7217C:
00071924 D2C6                       		adda.w	d6,a1
00071926 51CF FFDA                  		dbf	d7,loc_7215A
0007192A                            
0007192A 4A6E 0340                  		tst.w	$340(a6)
0007192E 6A00                       		bpl.s	loc_7218E
00071930 08EE 0002 0100             		bset	#2,$100(a6)
00071936                            
00071936                            loc_7218E:
00071936 4A6E 0370                  		tst.w	$370(a6)
0007193A 6A00                       		bpl.s	loc_7219A
0007193C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00071942                            
00071942                            loc_7219A:
00071942 4BEE 0070                  		lea	$70(a6),a5
00071946 7805                       		moveq	#5,d4
00071948                            
00071948                            loc_721A0:
00071948 4EBA 0000                  		jsr	sub_726FE(pc)
0007194C DAC6                       		adda.w	d6,a5
0007194E 51CC FFF8                  		dbf	d4,loc_721A0
00071952 7802                       		moveq	#2,d4
00071954                            
00071954                            loc_721AC:
00071954 4EBA 0000                  		jsr	sub_729A0(pc)
00071958 DAC6                       		adda.w	d6,a5
0007195A 51CC FFF8                  		dbf	d4,loc_721AC
0007195E                            
0007195E                            loc_721B6:
0007195E 584F                       		addq.w	#4,sp
00071960 4E75                       		rts	
00071962                            ; ===========================================================================
00071962 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007196A                            		even
0007196A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007196E                            		even
0007196E                            ; ===========================================================================
0007196E                            ; ---------------------------------------------------------------------------
0007196E                            ; Play normal sound effect
0007196E                            ; ---------------------------------------------------------------------------
0007196E                            
0007196E                            Sound_A0toCF:				; XREF: Sound_ChkValue
0007196E 4A2E 0027                  		tst.b	$27(a6)
00071972 6600 0000                  		bne.w	loc_722C6
00071976 4A2E 0004                  		tst.b	4(a6)
0007197A 6600 0000                  		bne.w	loc_722C6
0007197E 4A2E 0024                  		tst.b	$24(a6)
00071982 6600 0000                  		bne.w	loc_722C6
00071986 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007198A 6600                       		bne.s	Sound_notB5	; if not, branch
0007198C 4A2E 002B                  		tst.b	$2B(a6)
00071990 6600                       		bne.s	loc_721EE
00071992 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00071996                            
00071996                            loc_721EE:
00071996 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007199C                            
0007199C                            Sound_notB5:
0007199C 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000719A0 6600                       		bne.s	Sound_notA7	; if not, branch
000719A2 4A2E 002C                  		tst.b	$2C(a6)
000719A6 6600 0000                  		bne.w	locret_722C4
000719AA 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000719B0                            
000719B0                            Sound_notA7:
000719B0 2079 0007 1088             		movea.l	(Go_SoundIndex).l,a0
000719B6 0407 00A0                  		subi.b	#$A0,d7
000719BA E54F                       		lsl.w	#2,d7
000719BC 2670 7000                  		movea.l	(a0,d7.w),a3
000719C0 224B                       		movea.l	a3,a1
000719C2 7200                       		moveq	#0,d1
000719C4 3219                       		move.w	(a1)+,d1
000719C6 D28B                       		add.l	a3,d1
000719C8 1A19                       		move.b	(a1)+,d5
000719CA 1E19                       		move.b	(a1)+,d7
000719CC 5307                       		subq.b	#1,d7
000719CE 7C30                       		moveq	#$30,d6
000719D0                            
000719D0                            loc_72228:
000719D0 7600                       		moveq	#0,d3
000719D2 1629 0001                  		move.b	1(a1),d3
000719D6 1803                       		move.b	d3,d4
000719D8 6B00                       		bmi.s	loc_72244
000719DA 5543                       		subq.w	#2,d3
000719DC E54B                       		lsl.w	#2,d3
000719DE 4BFA 0000                  		lea	dword_722CC(pc),a5
000719E2 2A75 3000                  		movea.l	(a5,d3.w),a5
000719E6 08D5 0002                  		bset	#2,(a5)
000719EA 6000                       		bra.s	loc_7226E
000719EC                            ; ===========================================================================
000719EC                            
000719EC                            loc_72244:
000719EC E64B                       		lsr.w	#3,d3
000719EE 4BFA 0000                  		lea	dword_722CC(pc),a5
000719F2 2A75 3000                  		movea.l	(a5,d3.w),a5
000719F6 08D5 0002                  		bset	#2,(a5)
000719FA 0C04 00C0                  		cmpi.b	#$C0,d4
000719FE 6600                       		bne.s	loc_7226E
00071A00 1004                       		move.b	d4,d0
00071A02 0000 001F                  		ori.b	#$1F,d0
00071A06 13C0 00C0 0011             		move.b	d0,($C00011).l
00071A0C 0840 0005                  		bchg	#5,d0
00071A10 13C0 00C0 0011             		move.b	d0,($C00011).l
00071A16                            
00071A16                            loc_7226E:
00071A16 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00071A1A 244D                       		movea.l	a5,a2
00071A1C 700B                       		moveq	#$B,d0
00071A1E                            
00071A1E                            loc_72276:
00071A1E 429A                       		clr.l	(a2)+
00071A20 51C8 FFFC                  		dbf	d0,loc_72276
00071A24                            
00071A24 3A99                       		move.w	(a1)+,(a5)
00071A26 1B45 0002                  		move.b	d5,2(a5)
00071A2A 7000                       		moveq	#0,d0
00071A2C 3019                       		move.w	(a1)+,d0
00071A2E D08B                       		add.l	a3,d0
00071A30 2B40 0004                  		move.l	d0,4(a5)
00071A34 3B59 0008                  		move.w	(a1)+,8(a5)
00071A38 1B7C 0001 000E             		move.b	#1,$E(a5)
00071A3E 1B46 000D                  		move.b	d6,$D(a5)
00071A42 4A04                       		tst.b	d4
00071A44 6B00                       		bmi.s	loc_722A8
00071A46 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00071A4C 2B41 0020                  		move.l	d1,$20(a5)
00071A50                            
00071A50                            loc_722A8:
00071A50 51CF FF7E                  		dbf	d7,loc_72228
00071A54                            
00071A54 4A2E 0250                  		tst.b	$250(a6)
00071A58 6A00                       		bpl.s	loc_722B8
00071A5A 08EE 0002 0340             		bset	#2,$340(a6)
00071A60                            
00071A60                            loc_722B8:
00071A60 4A2E 0310                  		tst.b	$310(a6)
00071A64 6A00                       		bpl.s	locret_722C4
00071A66 08EE 0002 0370             		bset	#2,$370(a6)
00071A6C                            
00071A6C                            locret_722C4:
00071A6C 4E75                       		rts	
00071A6E                            ; ===========================================================================
00071A6E                            
00071A6E                            loc_722C6:
00071A6E 4216                       		clr.b	0(a6)
00071A70 4E75                       		rts	
00071A72                            ; ===========================================================================
00071A72 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00071A76 0000 0000                  		dc.l 0
00071A7A 00FF F100                  		dc.l $FFF100
00071A7E 00FF F130                  		dc.l $FFF130
00071A82 00FF F190                  		dc.l $FFF190
00071A86 00FF F1C0                  		dc.l $FFF1C0
00071A8A 00FF F1F0                  		dc.l $FFF1F0
00071A8E 00FF F1F0                  		dc.l $FFF1F0
00071A92 00FF F220                  dword_722EC:	dc.l $FFF220
00071A96 0000 0000                  		dc.l 0
00071A9A 00FF F250                  		dc.l $FFF250
00071A9E 00FF F280                  		dc.l $FFF280
00071AA2 00FF F2B0                  		dc.l $FFF2B0
00071AA6 00FF F2E0                  		dc.l $FFF2E0
00071AAA 00FF F310                  		dc.l $FFF310
00071AAE 00FF F310                  		dc.l $FFF310
00071AB2                            ; ===========================================================================
00071AB2                            ; ---------------------------------------------------------------------------
00071AB2                            ; Play GHZ waterfall sound
00071AB2                            ; ---------------------------------------------------------------------------
00071AB2                            
00071AB2                            Sound_D0toDF:				; XREF: Sound_ChkValue
00071AB2 4A2E 0027                  		tst.b	$27(a6)
00071AB6 6600 0000                  		bne.w	locret_723C6
00071ABA 4A2E 0004                  		tst.b	4(a6)
00071ABE 6600 0000                  		bne.w	locret_723C6
00071AC2 4A2E 0024                  		tst.b	$24(a6)
00071AC6 6600 0000                  		bne.w	locret_723C6
00071ACA 2079 0007 1080             		movea.l	(Go_SoundD0).l,a0
00071AD0 0407 00D0                  		subi.b	#$D0,d7
00071AD4 E54F                       		lsl.w	#2,d7
00071AD6 2670 7000                  		movea.l	(a0,d7.w),a3
00071ADA 224B                       		movea.l	a3,a1
00071ADC 7000                       		moveq	#0,d0
00071ADE 3019                       		move.w	(a1)+,d0
00071AE0 D08B                       		add.l	a3,d0
00071AE2 2D40 0020                  		move.l	d0,$20(a6)
00071AE6 1A19                       		move.b	(a1)+,d5
00071AE8 1E19                       		move.b	(a1)+,d7
00071AEA 5307                       		subq.b	#1,d7
00071AEC 7C30                       		moveq	#$30,d6
00071AEE                            
00071AEE                            loc_72348:
00071AEE 1829 0001                  		move.b	1(a1),d4
00071AF2 6B00                       		bmi.s	loc_7235A
00071AF4 08EE 0002 0100             		bset	#2,$100(a6)
00071AFA 4BEE 0340                  		lea	$340(a6),a5
00071AFE 6000                       		bra.s	loc_72364
00071B00                            ; ===========================================================================
00071B00                            
00071B00                            loc_7235A:
00071B00 08EE 0002 01F0             		bset	#2,$1F0(a6)
00071B06 4BEE 0370                  		lea	$370(a6),a5
00071B0A                            
00071B0A                            loc_72364:
00071B0A 244D                       		movea.l	a5,a2
00071B0C 700B                       		moveq	#$B,d0
00071B0E                            
00071B0E                            loc_72368:
00071B0E 429A                       		clr.l	(a2)+
00071B10 51C8 FFFC                  		dbf	d0,loc_72368
00071B14                            
00071B14 3A99                       		move.w	(a1)+,(a5)
00071B16 1B45 0002                  		move.b	d5,2(a5)
00071B1A 7000                       		moveq	#0,d0
00071B1C 3019                       		move.w	(a1)+,d0
00071B1E D08B                       		add.l	a3,d0
00071B20 2B40 0004                  		move.l	d0,4(a5)
00071B24 3B59 0008                  		move.w	(a1)+,8(a5)
00071B28 1B7C 0001 000E             		move.b	#1,$E(a5)
00071B2E 1B46 000D                  		move.b	d6,$D(a5)
00071B32 4A04                       		tst.b	d4
00071B34 6B00                       		bmi.s	loc_72396
00071B36 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00071B3C                            
00071B3C                            loc_72396:
00071B3C 51CF FFB0                  		dbf	d7,loc_72348
00071B40                            
00071B40 4A2E 0250                  		tst.b	$250(a6)
00071B44 6A00                       		bpl.s	loc_723A6
00071B46 08EE 0002 0340             		bset	#2,$340(a6)
00071B4C                            
00071B4C                            loc_723A6:
00071B4C 4A2E 0310                  		tst.b	$310(a6)
00071B50 6A00                       		bpl.s	locret_723C6
00071B52 08EE 0002 0370             		bset	#2,$370(a6)
00071B58 0004 001F                  		ori.b	#$1F,d4
00071B5C 13C4 00C0 0011             		move.b	d4,($C00011).l
00071B62 0844 0005                  		bchg	#5,d4
00071B66 13C4 00C0 0011             		move.b	d4,($C00011).l
00071B6C                            
00071B6C                            locret_723C6:
00071B6C 4E75                       		rts	
00071B6E                            ; End of function Sound_ChkValue
00071B6E                            
00071B6E                            ; ===========================================================================
00071B6E 00FF F100                  		dc.l $FFF100
00071B72 00FF F1F0                  		dc.l $FFF1F0
00071B76 00FF F250                  		dc.l $FFF250
00071B7A 00FF F310                  		dc.l $FFF310
00071B7E 00FF F340                  		dc.l $FFF340
00071B82 00FF F370                  		dc.l $FFF370
00071B86                            
00071B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B86                            
00071B86                            
00071B86                            Snd_FadeOut1:				; XREF: Sound_E0
00071B86 4216                       		clr.b	0(a6)
00071B88 4BEE 0220                  		lea	$220(a6),a5
00071B8C 7E05                       		moveq	#5,d7
00071B8E                            
00071B8E                            loc_723EA:
00071B8E 4A15                       		tst.b	(a5)
00071B90 6A00 0000                  		bpl.w	loc_72472
00071B94 0895 0007                  		bclr	#7,(a5)
00071B98 7600                       		moveq	#0,d3
00071B9A 162D 0001                  		move.b	1(a5),d3
00071B9E 6B00                       		bmi.s	loc_7243C
00071BA0 4EBA 0000                  		jsr	sub_726FE(pc)
00071BA4 0C03 0004                  		cmpi.b	#4,d3
00071BA8 6600                       		bne.s	loc_72416
00071BAA 4A2E 0340                  		tst.b	$340(a6)
00071BAE 6A00                       		bpl.s	loc_72416
00071BB0 4BEE 0340                  		lea	$340(a6),a5
00071BB4 226E 0020                  		movea.l	$20(a6),a1
00071BB8 6000                       		bra.s	loc_72428
00071BBA                            ; ===========================================================================
00071BBA                            
00071BBA                            loc_72416:
00071BBA 5503                       		subq.b	#2,d3
00071BBC E50B                       		lsl.b	#2,d3
00071BBE 41FA FEB2                  		lea	dword_722CC(pc),a0
00071BC2 264D                       		movea.l	a5,a3
00071BC4 2A70 3000                  		movea.l	(a0,d3.w),a5
00071BC8 226E 0018                  		movea.l	$18(a6),a1
00071BCC                            
00071BCC                            loc_72428:
00071BCC 0895 0002                  		bclr	#2,(a5)
00071BD0 08D5 0001                  		bset	#1,(a5)
00071BD4 102D 000B                  		move.b	$B(a5),d0
00071BD8 4EBA 0000                  		jsr	sub_72C4E(pc)
00071BDC 2A4B                       		movea.l	a3,a5
00071BDE 6000                       		bra.s	loc_72472
00071BE0                            ; ===========================================================================
00071BE0                            
00071BE0                            loc_7243C:
00071BE0 4EBA 0000                  		jsr	sub_729A0(pc)
00071BE4 41EE 0370                  		lea	$370(a6),a0
00071BE8 0C03 00E0                  		cmpi.b	#$E0,d3
00071BEC 6700                       		beq.s	loc_7245A
00071BEE 0C03 00C0                  		cmpi.b	#$C0,d3
00071BF2 6700                       		beq.s	loc_7245A
00071BF4 E60B                       		lsr.b	#3,d3
00071BF6 41FA FE7A                  		lea	dword_722CC(pc),a0
00071BFA 2070 3000                  		movea.l	(a0,d3.w),a0
00071BFE                            
00071BFE                            loc_7245A:
00071BFE 0890 0002                  		bclr	#2,(a0)
00071C02 08D0 0001                  		bset	#1,(a0)
00071C06 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00071C0C 6600                       		bne.s	loc_72472
00071C0E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00071C16                            
00071C16                            loc_72472:
00071C16 DAFC 0030                  		adda.w	#$30,a5
00071C1A 51CF FF72                  		dbf	d7,loc_723EA
00071C1E                            
00071C1E 4E75                       		rts	
00071C20                            ; End of function Snd_FadeOut1
00071C20                            
00071C20                            
00071C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C20                            
00071C20                            
00071C20                            Snd_FadeOut2:				; XREF: Sound_E0
00071C20 4BEE 0340                  		lea	$340(a6),a5
00071C24 4A15                       		tst.b	(a5)
00071C26 6A00                       		bpl.s	loc_724AE
00071C28 0895 0007                  		bclr	#7,(a5)
00071C2C 0815 0002                  		btst	#2,(a5)
00071C30 6600                       		bne.s	loc_724AE
00071C32 4EBA 0000                  		jsr	loc_7270A(pc)
00071C36 4BEE 0100                  		lea	$100(a6),a5
00071C3A 0895 0002                  		bclr	#2,(a5)
00071C3E 08D5 0001                  		bset	#1,(a5)
00071C42 4A15                       		tst.b	(a5)
00071C44 6A00                       		bpl.s	loc_724AE
00071C46 226E 0018                  		movea.l	$18(a6),a1
00071C4A 102D 000B                  		move.b	$B(a5),d0
00071C4E 4EBA 0000                  		jsr	sub_72C4E(pc)
00071C52                            
00071C52                            loc_724AE:
00071C52 4BEE 0370                  		lea	$370(a6),a5
00071C56 4A15                       		tst.b	(a5)
00071C58 6A00                       		bpl.s	locret_724E4
00071C5A 0895 0007                  		bclr	#7,(a5)
00071C5E 0815 0002                  		btst	#2,(a5)
00071C62 6600                       		bne.s	locret_724E4
00071C64 4EBA 0000                  		jsr	loc_729A6(pc)
00071C68 4BEE 01F0                  		lea	$1F0(a6),a5
00071C6C 0895 0002                  		bclr	#2,(a5)
00071C70 08D5 0001                  		bset	#1,(a5)
00071C74 4A15                       		tst.b	(a5)
00071C76 6A00                       		bpl.s	locret_724E4
00071C78 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00071C7E 6600                       		bne.s	locret_724E4
00071C80 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00071C88                            
00071C88                            locret_724E4:
00071C88 4E75                       		rts	
00071C8A                            ; End of function Snd_FadeOut2
00071C8A                            
00071C8A                            ; ===========================================================================
00071C8A                            ; ---------------------------------------------------------------------------
00071C8A                            ; Fade out music
00071C8A                            ; ---------------------------------------------------------------------------
00071C8A                            
00071C8A                            Sound_E0:				; XREF: Sound_ExIndex
00071C8A 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00071C8E 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00071C92 1D7C 0003 0006             		move.b	#3,6(a6)
00071C98 1D7C 0028 0004             		move.b	#$28,4(a6)
00071C9E 422E 0040                  		clr.b	$40(a6)
00071CA2 422E 002A                  		clr.b	$2A(a6)
00071CA6 4E75                       		rts	
00071CA8                            
00071CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CA8                            
00071CA8                            
00071CA8                            sub_72504:				; XREF: sub_71B4C
00071CA8 102E 0006                  		move.b	6(a6),d0
00071CAC 6700                       		beq.s	loc_72510
00071CAE 532E 0006                  		subq.b	#1,6(a6)
00071CB2 4E75                       		rts	
00071CB4                            ; ===========================================================================
00071CB4                            
00071CB4                            loc_72510:
00071CB4 532E 0004                  		subq.b	#1,4(a6)
00071CB8 6700 0000                  		beq.w	Sound_E4
00071CBC 1D7C 0003 0006             		move.b	#3,6(a6)
00071CC2 4BEE 0070                  		lea	$70(a6),a5
00071CC6 7E05                       		moveq	#5,d7
00071CC8                            
00071CC8                            loc_72524:
00071CC8 4A15                       		tst.b	(a5)
00071CCA 6A00                       		bpl.s	loc_72538
00071CCC 522D 0009                  		addq.b	#1,9(a5)
00071CD0 6A00                       		bpl.s	loc_72534
00071CD2 0895 0007                  		bclr	#7,(a5)
00071CD6 6000                       		bra.s	loc_72538
00071CD8                            ; ===========================================================================
00071CD8                            
00071CD8                            loc_72534:
00071CD8 4EBA 0000                  		jsr	sub_72CB4(pc)
00071CDC                            
00071CDC                            loc_72538:
00071CDC DAFC 0030                  		adda.w	#$30,a5
00071CE0 51CF FFE6                  		dbf	d7,loc_72524
00071CE4                            
00071CE4 7E02                       		moveq	#2,d7
00071CE6                            
00071CE6                            loc_72542:
00071CE6 4A15                       		tst.b	(a5)
00071CE8 6A00                       		bpl.s	loc_72560
00071CEA 522D 0009                  		addq.b	#1,9(a5)
00071CEE 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00071CF4 6500                       		bcs.s	loc_72558
00071CF6 0895 0007                  		bclr	#7,(a5)
00071CFA 6000                       		bra.s	loc_72560
00071CFC                            ; ===========================================================================
00071CFC                            
00071CFC                            loc_72558:
00071CFC 1C2D 0009                  		move.b	9(a5),d6
00071D00 4EBA 0000                  		jsr	sub_7296A(pc)
00071D04                            
00071D04                            loc_72560:
00071D04 DAFC 0030                  		adda.w	#$30,a5
00071D08 51CF FFDC                  		dbf	d7,loc_72542
00071D0C                            
00071D0C 4E75                       		rts	
00071D0E                            ; End of function sub_72504
00071D0E                            
00071D0E                            
00071D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D0E                            
00071D0E                            
00071D0E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00071D0E 7602                       		moveq	#2,d3
00071D10 7028                       		moveq	#$28,d0
00071D12                            
00071D12                            loc_7256E:
00071D12 1203                       		move.b	d3,d1
00071D14 4EBA 0000                  		jsr	sub_7272E(pc)
00071D18 5801                       		addq.b	#4,d1
00071D1A 4EBA 0000                  		jsr	sub_7272E(pc)
00071D1E 51CB FFF2                  		dbf	d3,loc_7256E
00071D22                            
00071D22 7040                       		moveq	#$40,d0
00071D24 727F                       		moveq	#$7F,d1
00071D26 7802                       		moveq	#2,d4
00071D28                            
00071D28                            loc_72584:
00071D28 7603                       		moveq	#3,d3
00071D2A                            
00071D2A                            loc_72586:
00071D2A 4EBA 0000                  		jsr	sub_7272E(pc)
00071D2E 4EBA 0000                  		jsr	sub_72764(pc)
00071D32 5840                       		addq.w	#4,d0
00071D34 51CB FFF4                  		dbf	d3,loc_72586
00071D38                            
00071D38 0400 000F                  		subi.b	#$F,d0
00071D3C 51CC FFEA                  		dbf	d4,loc_72584
00071D40                            
00071D40 4E75                       		rts	
00071D42                            ; End of function sub_7256A
00071D42                            
00071D42                            ; ===========================================================================
00071D42                            ; ---------------------------------------------------------------------------
00071D42                            ; Stop music
00071D42                            ; ---------------------------------------------------------------------------
00071D42                            
00071D42                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00071D42 702B                       		moveq	#$2B,d0
00071D44 123C 0080                  		move.b	#$80,d1
00071D48 4EBA 0000                  		jsr	sub_7272E(pc)
00071D4C 7027                       		moveq	#$27,d0
00071D4E 7200                       		moveq	#0,d1
00071D50 4EBA 0000                  		jsr	sub_7272E(pc)
00071D54 204E                       		movea.l	a6,a0
00071D56 303C 00E3                  		move.w	#$E3,d0
00071D5A                            
00071D5A                            loc_725B6:
00071D5A 4298                       		clr.l	(a0)+
00071D5C 51C8 FFFC                  		dbf	d0,loc_725B6
00071D60                            
00071D60 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00071D66 4EBA FFA6                  		jsr	sub_7256A(pc)
00071D6A 6000 0000                  		bra.w	sub_729B6
00071D6E                            
00071D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D6E                            
00071D6E                            
00071D6E                            sub_725CA:				; XREF: Sound_ChkValue
00071D6E 204E                       		movea.l	a6,a0
00071D70 1216                       		move.b	0(a6),d1
00071D72 142E 0027                  		move.b	$27(a6),d2
00071D76 162E 002A                  		move.b	$2A(a6),d3
00071D7A 182E 0026                  		move.b	$26(a6),d4
00071D7E 3A2E 000A                  		move.w	$A(a6),d5
00071D82 303C 0087                  		move.w	#$87,d0
00071D86                            
00071D86                            loc_725E4:
00071D86 4298                       		clr.l	(a0)+
00071D88 51C8 FFFC                  		dbf	d0,loc_725E4
00071D8C                            
00071D8C 1C81                       		move.b	d1,0(a6)
00071D8E 1D42 0027                  		move.b	d2,$27(a6)
00071D92 1D43 002A                  		move.b	d3,$2A(a6)
00071D96 1D44 0026                  		move.b	d4,$26(a6)
00071D9A 3D45 000A                  		move.w	d5,$A(a6)
00071D9E 1D7C 0080 0009             		move.b	#$80,9(a6)
00071DA4 4EBA FF68                  		jsr	sub_7256A(pc)
00071DA8 6000 0000                  		bra.w	sub_729B6
00071DAC                            ; End of function sub_725CA
00071DAC                            
00071DAC                            
00071DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071DAC                            
00071DAC                            
00071DAC                            sub_7260C:				; XREF: sub_71B4C
00071DAC 1D6E 0002 0001             		move.b	2(a6),1(a6)
00071DB2 41EE 004E                  		lea	$4E(a6),a0
00071DB6 7030                       		moveq	#$30,d0
00071DB8 7209                       		moveq	#9,d1
00071DBA                            
00071DBA                            loc_7261A:
00071DBA 5210                       		addq.b	#1,(a0)
00071DBC D0C0                       		adda.w	d0,a0
00071DBE 51C9 FFFA                  		dbf	d1,loc_7261A
00071DC2                            
00071DC2 4E75                       		rts	
00071DC4                            ; End of function sub_7260C
00071DC4                            
00071DC4                            ; ===========================================================================
00071DC4                            ; ---------------------------------------------------------------------------
00071DC4                            ; Speed	up music
00071DC4                            ; ---------------------------------------------------------------------------
00071DC4                            
00071DC4                            Sound_E2:				; XREF: Sound_ExIndex
00071DC4 4A2E 0027                  		tst.b	$27(a6)
00071DC8 6600                       		bne.s	loc_7263E
00071DCA 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00071DD0 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00071DD6 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00071DDC 4E75                       		rts	
00071DDE                            ; ===========================================================================
00071DDE                            
00071DDE                            loc_7263E:
00071DDE 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00071DE4 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00071DEA 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00071DF0 4E75                       		rts	
00071DF2                            ; ===========================================================================
00071DF2                            ; ---------------------------------------------------------------------------
00071DF2                            ; Change music back to normal speed
00071DF2                            ; ---------------------------------------------------------------------------
00071DF2                            
00071DF2                            Sound_E3:				; XREF: Sound_ExIndex
00071DF2 4A2E 0027                  		tst.b	$27(a6)
00071DF6 6600                       		bne.s	loc_7266A
00071DF8 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00071DFE 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00071E04 422E 002A                  		clr.b	$2A(a6)
00071E08 4E75                       		rts	
00071E0A                            ; ===========================================================================
00071E0A                            
00071E0A                            loc_7266A:
00071E0A 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00071E10 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00071E16 422E 03CA                  		clr.b	$3CA(a6)
00071E1A 4E75                       		rts	
00071E1C                            
00071E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E1C                            
00071E1C                            
00071E1C                            sub_7267C:				; XREF: sub_71B4C
00071E1C 4A2E 0025                  		tst.b	$25(a6)
00071E20 6700                       		beq.s	loc_72688
00071E22 532E 0025                  		subq.b	#1,$25(a6)
00071E26 4E75                       		rts	
00071E28                            ; ===========================================================================
00071E28                            
00071E28                            loc_72688:
00071E28 4A2E 0026                  		tst.b	$26(a6)
00071E2C 6700                       		beq.s	loc_726D6
00071E2E 532E 0026                  		subq.b	#1,$26(a6)
00071E32 1D7C 0002 0025             		move.b	#2,$25(a6)
00071E38 4BEE 0070                  		lea	$70(a6),a5
00071E3C 7E05                       		moveq	#5,d7
00071E3E                            
00071E3E                            loc_7269E:
00071E3E 4A15                       		tst.b	(a5)
00071E40 6A00                       		bpl.s	loc_726AA
00071E42 532D 0009                  		subq.b	#1,9(a5)
00071E46 4EBA 0000                  		jsr	sub_72CB4(pc)
00071E4A                            
00071E4A                            loc_726AA:
00071E4A DAFC 0030                  		adda.w	#$30,a5
00071E4E 51CF FFEE                  		dbf	d7,loc_7269E
00071E52 7E02                       		moveq	#2,d7
00071E54                            
00071E54                            loc_726B4:
00071E54 4A15                       		tst.b	(a5)
00071E56 6A00                       		bpl.s	loc_726CC
00071E58 532D 0009                  		subq.b	#1,9(a5)
00071E5C 1C2D 0009                  		move.b	9(a5),d6
00071E60 0C06 0010                  		cmpi.b	#$10,d6
00071E64 6500                       		bcs.s	loc_726C8
00071E66 7C0F                       		moveq	#$F,d6
00071E68                            
00071E68                            loc_726C8:
00071E68 4EBA 0000                  		jsr	sub_7296A(pc)
00071E6C                            
00071E6C                            loc_726CC:
00071E6C DAFC 0030                  		adda.w	#$30,a5
00071E70 51CF FFE2                  		dbf	d7,loc_726B4
00071E74 4E75                       		rts	
00071E76                            ; ===========================================================================
00071E76                            
00071E76                            loc_726D6:
00071E76 08AE 0002 0040             		bclr	#2,$40(a6)
00071E7C 422E 0024                  		clr.b	$24(a6)
00071E80 4E75                       		rts	
00071E82                            ; End of function sub_7267C
00071E82                            
00071E82                            ; ===========================================================================
00071E82                            
00071E82                            loc_726E2:				; XREF: sub_71CCA
00071E82 0815 0001                  		btst	#1,(a5)
00071E86 6600                       		bne.s	locret_726FC
00071E88 0815 0002                  		btst	#2,(a5)
00071E8C 6600                       		bne.s	locret_726FC
00071E8E 7028                       		moveq	#$28,d0
00071E90 122D 0001                  		move.b	1(a5),d1
00071E94 0001 00F0                  		ori.b	#-$10,d1
00071E98 6000 0000                  		bra.w	sub_7272E
00071E9C                            ; ===========================================================================
00071E9C                            
00071E9C                            locret_726FC:
00071E9C 4E75                       		rts	
00071E9E                            
00071E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E9E                            
00071E9E                            
00071E9E                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00071E9E 0815 0004                  		btst	#4,(a5)
00071EA2 6600                       		bne.s	locret_72714
00071EA4 0815 0002                  		btst	#2,(a5)
00071EA8 6600                       		bne.s	locret_72714
00071EAA                            
00071EAA                            loc_7270A:				; XREF: Snd_FadeOut2
00071EAA 7028                       		moveq	#$28,d0
00071EAC 122D 0001                  		move.b	1(a5),d1
00071EB0 6000 0000                  		bra.w	sub_7272E
00071EB4                            ; ===========================================================================
00071EB4                            
00071EB4                            locret_72714:
00071EB4 4E75                       		rts	
00071EB6                            ; End of function sub_726FE
00071EB6                            
00071EB6                            ; ===========================================================================
00071EB6                            
00071EB6                            loc_72716:				; XREF: sub_72A5A
00071EB6 0815 0002                  		btst	#2,(a5)
00071EBA 6600                       		bne.s	locret_72720
00071EBC 6000 0000                  		bra.w	sub_72722
00071EC0                            ; ===========================================================================
00071EC0                            
00071EC0                            locret_72720:
00071EC0 4E75                       		rts	
00071EC2                            
00071EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071EC2                            
00071EC2                            
00071EC2                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00071EC2 082D 0002 0001             		btst	#2,1(a5)
00071EC8 6600                       		bne.s	loc_7275A
00071ECA D02D 0001                  		add.b	1(a5),d0
00071ECE                            ; End of function sub_72722
00071ECE                            
00071ECE                            
00071ECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071ECE                            
00071ECE                            
00071ECE                            sub_7272E:				; XREF: loc_71E6A
00071ECE 1439 00A0 4000             		move.b	($A04000).l,d2
00071ED4 0802 0007                  		btst	#7,d2
00071ED8 66F4                       		bne.s	sub_7272E
00071EDA 13C0 00A0 4000             		move.b	d0,($A04000).l
00071EE0 4E71                       		nop	
00071EE2 4E71                       		nop	
00071EE4 4E71                       		nop	
00071EE6                            
00071EE6                            loc_72746:
00071EE6 1439 00A0 4000             		move.b	($A04000).l,d2
00071EEC 0802 0007                  		btst	#7,d2
00071EF0 66F4                       		bne.s	loc_72746
00071EF2                            
00071EF2 13C1 00A0 4001             		move.b	d1,($A04001).l
00071EF8 4E75                       		rts	
00071EFA                            ; End of function sub_7272E
00071EFA                            
00071EFA                            ; ===========================================================================
00071EFA                            
00071EFA                            loc_7275A:				; XREF: sub_72722
00071EFA 142D 0001                  		move.b	1(a5),d2
00071EFE 0882 0002                  		bclr	#2,d2
00071F02 D002                       		add.b	d2,d0
00071F04                            
00071F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071F04                            
00071F04                            
00071F04                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00071F04 1439 00A0 4000             		move.b	($A04000).l,d2
00071F0A 0802 0007                  		btst	#7,d2
00071F0E 66F4                       		bne.s	sub_72764
00071F10 13C0 00A0 4002             		move.b	d0,($A04002).l
00071F16 4E71                       		nop	
00071F18 4E71                       		nop	
00071F1A 4E71                       		nop	
00071F1C                            
00071F1C                            loc_7277C:
00071F1C 1439 00A0 4000             		move.b	($A04000).l,d2
00071F22 0802 0007                  		btst	#7,d2
00071F26 66F4                       		bne.s	loc_7277C
00071F28                            
00071F28 13C1 00A0 4003             		move.b	d1,($A04003).l
00071F2E 4E75                       		rts	
00071F30                            ; End of function sub_72764
00071F30                            
00071F30                            ; ===========================================================================
00071F30 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00071F42 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00071F54 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00071F64 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00071F74 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00071F84 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00071F94 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00071FA4 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00071FB4 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00071FC4 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00071FD4 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00071FE4 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00071FF0                            
00071FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071FF0                            
00071FF0                            
00071FF0                            sub_72850:				; XREF: sub_71B4C
00071FF0 532D 000E                  		subq.b	#1,$E(a5)
00071FF4 6600                       		bne.s	loc_72866
00071FF6 0895 0004                  		bclr	#4,(a5)
00071FFA 4EBA 0000                  		jsr	sub_72878(pc)
00071FFE 4EBA 0000                  		jsr	sub_728DC(pc)
00072002 6000 0000                  		bra.w	loc_7292E
00072006                            ; ===========================================================================
00072006                            
00072006                            loc_72866:
00072006 4EBA F4B2                  		jsr	sub_71D9E(pc)
0007200A 4EBA 0000                  		jsr	sub_72926(pc)
0007200E 4EBA F4D2                  		jsr	sub_71DC6(pc)
00072012 4EBA 0000                  		jsr	sub_728E2(pc)
00072016 4E75                       		rts	
00072018                            ; End of function sub_72850
00072018                            
00072018                            
00072018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072018                            
00072018                            
00072018                            sub_72878:				; XREF: sub_72850
00072018 0895 0001                  		bclr	#1,(a5)
0007201C 286D 0004                  		movea.l	4(a5),a4
00072020                            
00072020                            loc_72880:
00072020 7A00                       		moveq	#0,d5
00072022 1A1C                       		move.b	(a4)+,d5
00072024 0C05 00E0                  		cmpi.b	#$E0,d5
00072028 6500                       		bcs.s	loc_72890
0007202A 4EBA 0000                  		jsr	sub_72A5A(pc)
0007202E 60F0                       		bra.s	loc_72880
00072030                            ; ===========================================================================
00072030                            
00072030                            loc_72890:
00072030 4A05                       		tst.b	d5
00072032 6A00                       		bpl.s	loc_728A4
00072034 4EBA 0000                  		jsr	sub_728AC(pc)
00072038 1A1C                       		move.b	(a4)+,d5
0007203A 4A05                       		tst.b	d5
0007203C 6A00                       		bpl.s	loc_728A4
0007203E 534C                       		subq.w	#1,a4
00072040 6000 F43A                  		bra.w	sub_71D60
00072044                            ; ===========================================================================
00072044                            
00072044                            loc_728A4:
00072044 4EBA F416                  		jsr	sub_71D40(pc)
00072048 6000 F432                  		bra.w	sub_71D60
0007204C                            ; End of function sub_72878
0007204C                            
0007204C                            
0007204C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007204C                            
0007204C                            
0007204C                            sub_728AC:				; XREF: sub_72878
0007204C 0405 0081                  		subi.b	#$81,d5
00072050 6500                       		bcs.s	loc_728CA
00072052 DA2D 0008                  		add.b	8(a5),d5
00072056 0245 007F                  		andi.w	#$7F,d5
0007205A E34D                       		lsl.w	#1,d5
0007205C 41FA 0000                  		lea	word_729CE(pc),a0
00072060 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00072066 6000 F414                  		bra.w	sub_71D60
0007206A                            ; ===========================================================================
0007206A                            
0007206A                            loc_728CA:
0007206A 08D5 0001                  		bset	#1,(a5)
0007206E 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00072074 4EBA F406                  		jsr	sub_71D60(pc)
00072078 6000 0000                  		bra.w	sub_729A0
0007207C                            ; End of function sub_728AC
0007207C                            
0007207C                            
0007207C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007207C                            
0007207C                            
0007207C                            sub_728DC:				; XREF: sub_72850
0007207C 3C2D 0010                  		move.w	$10(a5),d6
00072080 6B00                       		bmi.s	loc_72920
00072082                            ; End of function sub_728DC
00072082                            
00072082                            
00072082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072082                            
00072082                            
00072082                            sub_728E2:				; XREF: sub_72850
00072082 102D 001E                  		move.b	$1E(a5),d0
00072086 4880                       		ext.w	d0
00072088 DC40                       		add.w	d0,d6
0007208A 0815 0002                  		btst	#2,(a5)
0007208E 6600                       		bne.s	locret_7291E
00072090 0815 0001                  		btst	#1,(a5)
00072094 6600                       		bne.s	locret_7291E
00072096 102D 0001                  		move.b	1(a5),d0
0007209A 0C00 00E0                  		cmpi.b	#$E0,d0
0007209E 6600                       		bne.s	loc_72904
000720A0 103C 00C0                  		move.b	#$C0,d0
000720A4                            
000720A4                            loc_72904:
000720A4 3206                       		move.w	d6,d1
000720A6 0201 000F                  		andi.b	#$F,d1
000720AA 8001                       		or.b	d1,d0
000720AC E84E                       		lsr.w	#4,d6
000720AE 0206 003F                  		andi.b	#$3F,d6
000720B2 13C0 00C0 0011             		move.b	d0,($C00011).l
000720B8 13C6 00C0 0011             		move.b	d6,($C00011).l
000720BE                            
000720BE                            locret_7291E:
000720BE 4E75                       		rts	
000720C0                            ; End of function sub_728E2
000720C0                            
000720C0                            ; ===========================================================================
000720C0                            
000720C0                            loc_72920:				; XREF: sub_728DC
000720C0 08D5 0001                  		bset	#1,(a5)
000720C4 4E75                       		rts	
000720C6                            
000720C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000720C6                            
000720C6                            
000720C6                            sub_72926:				; XREF: sub_72850
000720C6 4A2D 000B                  		tst.b	$B(a5)
000720CA 6700 0000                  		beq.w	locret_7298A
000720CE                            
000720CE                            loc_7292E:				; XREF: sub_72850
000720CE 1C2D 0009                  		move.b	9(a5),d6
000720D2 7000                       		moveq	#0,d0
000720D4 102D 000B                  		move.b	$B(a5),d0
000720D8 6700                       		beq.s	sub_7296A
000720DA 2079 0007 1090             		movea.l	(Go_PSGIndex).l,a0
000720E0 5340                       		subq.w	#1,d0
000720E2 E548                       		lsl.w	#2,d0
000720E4 2070 0000                  		movea.l	(a0,d0.w),a0
000720E8 102D 000C                  		move.b	$C(a5),d0
000720EC 1030 0000                  		move.b	(a0,d0.w),d0
000720F0 522D 000C                  		addq.b	#1,$C(a5)
000720F4 0800 0007                  		btst	#7,d0
000720F8 6700                       		beq.s	loc_72960
000720FA 0C00 0080                  		cmpi.b	#$80,d0
000720FE 6700                       		beq.s	loc_7299A
00072100                            
00072100                            loc_72960:
00072100 DC40                       		add.w	d0,d6
00072102 0C06 0010                  		cmpi.b	#$10,d6
00072106 6500                       		bcs.s	sub_7296A
00072108 7C0F                       		moveq	#$F,d6
0007210A                            ; End of function sub_72926
0007210A                            
0007210A                            
0007210A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007210A                            
0007210A                            
0007210A                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007210A 0815 0001                  		btst	#1,(a5)
0007210E 6600                       		bne.s	locret_7298A
00072110 0815 0002                  		btst	#2,(a5)
00072114 6600                       		bne.s	locret_7298A
00072116 0815 0004                  		btst	#4,(a5)
0007211A 6600                       		bne.s	loc_7298C
0007211C                            
0007211C                            loc_7297C:
0007211C 8C2D 0001                  		or.b	1(a5),d6
00072120 0606 0010                  		addi.b	#$10,d6
00072124 13C6 00C0 0011             		move.b	d6,($C00011).l
0007212A                            
0007212A                            locret_7298A:
0007212A 4E75                       		rts	
0007212C                            ; ===========================================================================
0007212C                            
0007212C                            loc_7298C:
0007212C 4A2D 0013                  		tst.b	$13(a5)
00072130 67EA                       		beq.s	loc_7297C
00072132 4A2D 0012                  		tst.b	$12(a5)
00072136 66E4                       		bne.s	loc_7297C
00072138 4E75                       		rts	
0007213A                            ; End of function sub_7296A
0007213A                            
0007213A                            ; ===========================================================================
0007213A                            
0007213A                            loc_7299A:				; XREF: sub_72926
0007213A 532D 000C                  		subq.b	#1,$C(a5)
0007213E 4E75                       		rts	
00072140                            
00072140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072140                            
00072140                            
00072140                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00072140 0815 0002                  		btst	#2,(a5)
00072144 6600                       		bne.s	locret_729B4
00072146                            
00072146                            loc_729A6:				; XREF: Snd_FadeOut2
00072146 102D 0001                  		move.b	1(a5),d0
0007214A 0000 001F                  		ori.b	#$1F,d0
0007214E 13C0 00C0 0011             		move.b	d0,($C00011).l
00072154                            
00072154                            locret_729B4:
00072154 4E75                       		rts	
00072156                            ; End of function sub_729A0
00072156                            
00072156                            
00072156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072156                            
00072156                            
00072156                            sub_729B6:				; XREF: loc_71E7C
00072156 41F9 00C0 0011             		lea	($C00011).l,a0
0007215C 10BC 009F                  		move.b	#$9F,(a0)
00072160 10BC 00BF                  		move.b	#$BF,(a0)
00072164 10BC 00DF                  		move.b	#$DF,(a0)
00072168 10BC 00FF                  		move.b	#$FF,(a0)
0007216C 4E75                       		rts	
0007216E                            ; End of function sub_729B6
0007216E                            
0007216E                            ; ===========================================================================
0007216E 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00072180 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00072192 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000721A6 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000721BA 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000721CE 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000721E2 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000721F6 0011 0000                  		dc.w $11, 0
000721FA                            
000721FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000721FA                            
000721FA                            
000721FA                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000721FA 0445 00E0                  		subi.w	#$E0,d5
000721FE E54D                       		lsl.w	#2,d5
00072200 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00072204                            ; End of function sub_72A5A
00072204                            
00072204                            ; ===========================================================================
00072204                            
00072204                            loc_72A64:
00072204 6000 0000                  		bra.w	loc_72ACC
00072208                            ; ===========================================================================
00072208 6000 0000                  		bra.w	loc_72AEC
0007220C                            ; ===========================================================================
0007220C 6000 0000                  		bra.w	loc_72AF2
00072210                            ; ===========================================================================
00072210 6000 0000                  		bra.w	loc_72AF8
00072214                            ; ===========================================================================
00072214 6000 0000                  		bra.w	loc_72B14
00072218                            ; ===========================================================================
00072218 6000 0000                  		bra.w	loc_72B9E
0007221C                            ; ===========================================================================
0007221C 6000 0000                  		bra.w	loc_72BA4
00072220                            ; ===========================================================================
00072220 6000 0000                  		bra.w	loc_72BAE
00072224                            ; ===========================================================================
00072224 6000 0000                  		bra.w	loc_72BB4
00072228                            ; ===========================================================================
00072228 6000 0000                  		bra.w	loc_72BBE
0007222C                            ; ===========================================================================
0007222C 6000 0000                  		bra.w	loc_72BC6
00072230                            ; ===========================================================================
00072230 6000 0000                  		bra.w	loc_72BD0
00072234                            ; ===========================================================================
00072234 6000 0000                  		bra.w	loc_72BE6
00072238                            ; ===========================================================================
00072238 6000 0000                  		bra.w	loc_72BEE
0007223C                            ; ===========================================================================
0007223C 6000 0000                  		bra.w	loc_72BF4
00072240                            ; ===========================================================================
00072240 6000 0000                  		bra.w	loc_72C26
00072244                            ; ===========================================================================
00072244 6000 0000                  		bra.w	loc_72D30
00072248                            ; ===========================================================================
00072248 6000 0000                  		bra.w	loc_72D52
0007224C                            ; ===========================================================================
0007224C 6000 0000                  		bra.w	loc_72D58
00072250                            ; ===========================================================================
00072250 6000 0000                  		bra.w	loc_72E06
00072254                            ; ===========================================================================
00072254 6000 0000                  		bra.w	loc_72E20
00072258                            ; ===========================================================================
00072258 6000 0000                  		bra.w	loc_72E26
0007225C                            ; ===========================================================================
0007225C 6000 0000                  		bra.w	loc_72E2C
00072260                            ; ===========================================================================
00072260 6000 0000                  		bra.w	loc_72E38
00072264                            ; ===========================================================================
00072264 6000 0000                  		bra.w	loc_72E52
00072268                            ; ===========================================================================
00072268 6000 0000                  		bra.w	loc_72E64
0007226C                            ; ===========================================================================
0007226C                            
0007226C                            loc_72ACC:				; XREF: loc_72A64
0007226C 121C                       		move.b	(a4)+,d1
0007226E 4A2D 0001                  		tst.b	1(a5)
00072272 6B00                       		bmi.s	locret_72AEA
00072274 102D 000A                  		move.b	$A(a5),d0
00072278 0200 0037                  		andi.b	#$37,d0
0007227C 8200                       		or.b	d0,d1
0007227E 1B41 000A                  		move.b	d1,$A(a5)
00072282 103C 00B4                  		move.b	#$B4,d0
00072286 6000 FC2E                  		bra.w	loc_72716
0007228A                            ; ===========================================================================
0007228A                            
0007228A                            locret_72AEA:
0007228A 4E75                       		rts	
0007228C                            ; ===========================================================================
0007228C                            
0007228C                            loc_72AEC:				; XREF: loc_72A64
0007228C 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00072290 4E75                       		rts	
00072292                            ; ===========================================================================
00072292                            
00072292                            loc_72AF2:				; XREF: loc_72A64
00072292 1D5C 0007                  		move.b	(a4)+,7(a6)
00072296 4E75                       		rts	
00072298                            ; ===========================================================================
00072298                            
00072298                            loc_72AF8:				; XREF: loc_72A64
00072298 7000                       		moveq	#0,d0
0007229A 102D 000D                  		move.b	$D(a5),d0
0007229E 2875 0000                  		movea.l	(a5,d0.w),a4
000722A2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000722AA 544C                       		addq.w	#2,a4
000722AC 5800                       		addq.b	#4,d0
000722AE 1B40 000D                  		move.b	d0,$D(a5)
000722B2 4E75                       		rts	
000722B4                            ; ===========================================================================
000722B4                            
000722B4                            loc_72B14:				; XREF: loc_72A64
000722B4 204E                       		movea.l	a6,a0
000722B6 43EE 03A0                  		lea	$3A0(a6),a1
000722BA 303C 0087                  		move.w	#$87,d0
000722BE                            
000722BE                            loc_72B1E:
000722BE 20D9                       		move.l	(a1)+,(a0)+
000722C0 51C8 FFFC                  		dbf	d0,loc_72B1E
000722C4                            
000722C4 08EE 0002 0040             		bset	#2,$40(a6)
000722CA 264D                       		movea.l	a5,a3
000722CC 1C3C 0028                  		move.b	#$28,d6
000722D0 9C2E 0026                  		sub.b	$26(a6),d6
000722D4 7E05                       		moveq	#5,d7
000722D6 4BEE 0070                  		lea	$70(a6),a5
000722DA                            
000722DA                            loc_72B3A:
000722DA 0815 0007                  		btst	#7,(a5)
000722DE 6700                       		beq.s	loc_72B5C
000722E0 08D5 0001                  		bset	#1,(a5)
000722E4 DD2D 0009                  		add.b	d6,9(a5)
000722E8 0815 0002                  		btst	#2,(a5)
000722EC 6600                       		bne.s	loc_72B5C
000722EE 7000                       		moveq	#0,d0
000722F0 102D 000B                  		move.b	$B(a5),d0
000722F4 226E 0018                  		movea.l	$18(a6),a1
000722F8 4EBA 0000                  		jsr	sub_72C4E(pc)
000722FC                            
000722FC                            loc_72B5C:
000722FC DAFC 0030                  		adda.w	#$30,a5
00072300 51CF FFD8                  		dbf	d7,loc_72B3A
00072304                            
00072304 7E02                       		moveq	#2,d7
00072306                            
00072306                            loc_72B66:
00072306 0815 0007                  		btst	#7,(a5)
0007230A 6700                       		beq.s	loc_72B78
0007230C 08D5 0001                  		bset	#1,(a5)
00072310 4EBA FE2E                  		jsr	sub_729A0(pc)
00072314 DD2D 0009                  		add.b	d6,9(a5)
00072318                            
00072318                            loc_72B78:
00072318 DAFC 0030                  		adda.w	#$30,a5
0007231C 51CF FFE8                  		dbf	d7,loc_72B66
00072320 2A4B                       		movea.l	a3,a5
00072322 1D7C 0080 0024             		move.b	#$80,$24(a6)
00072328 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007232E 422E 0027                  		clr.b	$27(a6)
00072332 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007233A 504F                       		addq.w	#8,sp
0007233C 4E75                       		rts	
0007233E                            ; ===========================================================================
0007233E                            
0007233E                            loc_72B9E:				; XREF: loc_72A64
0007233E 1B5C 0002                  		move.b	(a4)+,2(a5)
00072342 4E75                       		rts	
00072344                            ; ===========================================================================
00072344                            
00072344                            loc_72BA4:				; XREF: loc_72A64
00072344 101C                       		move.b	(a4)+,d0
00072346 D12D 0009                  		add.b	d0,9(a5)
0007234A 6000 0000                  		bra.w	sub_72CB4
0007234E                            ; ===========================================================================
0007234E                            
0007234E                            loc_72BAE:				; XREF: loc_72A64
0007234E 08D5 0004                  		bset	#4,(a5)
00072352 4E75                       		rts	
00072354                            ; ===========================================================================
00072354                            
00072354                            loc_72BB4:				; XREF: loc_72A64
00072354 1B54 0012                  		move.b	(a4),$12(a5)
00072358 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007235C 4E75                       		rts	
0007235E                            ; ===========================================================================
0007235E                            
0007235E                            loc_72BBE:				; XREF: loc_72A64
0007235E 101C                       		move.b	(a4)+,d0
00072360 D12D 0008                  		add.b	d0,8(a5)
00072364 4E75                       		rts	
00072366                            ; ===========================================================================
00072366                            
00072366                            loc_72BC6:				; XREF: loc_72A64
00072366 1D54 0002                  		move.b	(a4),2(a6)
0007236A 1D5C 0001                  		move.b	(a4)+,1(a6)
0007236E 4E75                       		rts	
00072370                            ; ===========================================================================
00072370                            
00072370                            loc_72BD0:				; XREF: loc_72A64
00072370 41EE 0040                  		lea	$40(a6),a0
00072374 101C                       		move.b	(a4)+,d0
00072376 7230                       		moveq	#$30,d1
00072378 7409                       		moveq	#9,d2
0007237A                            
0007237A                            loc_72BDA:
0007237A 1140 0002                  		move.b	d0,2(a0)
0007237E D0C1                       		adda.w	d1,a0
00072380 51CA FFF8                  		dbf	d2,loc_72BDA
00072384                            
00072384 4E75                       		rts	
00072386                            ; ===========================================================================
00072386                            
00072386                            loc_72BE6:				; XREF: loc_72A64
00072386 101C                       		move.b	(a4)+,d0
00072388 D12D 0009                  		add.b	d0,9(a5)
0007238C 4E75                       		rts	
0007238E                            ; ===========================================================================
0007238E                            
0007238E                            loc_72BEE:				; XREF: loc_72A64
0007238E 422E 002C                  		clr.b	$2C(a6)
00072392 4E75                       		rts	
00072394                            ; ===========================================================================
00072394                            
00072394                            loc_72BF4:				; XREF: loc_72A64
00072394 0895 0007                  		bclr	#7,(a5)
00072398 0895 0004                  		bclr	#4,(a5)
0007239C 4EBA FB00                  		jsr	sub_726FE(pc)
000723A0 4A2E 0250                  		tst.b	$250(a6)
000723A4 6B00                       		bmi.s	loc_72C22
000723A6 264D                       		movea.l	a5,a3
000723A8 4BEE 0100                  		lea	$100(a6),a5
000723AC 226E 0018                  		movea.l	$18(a6),a1
000723B0 0895 0002                  		bclr	#2,(a5)
000723B4 08D5 0001                  		bset	#1,(a5)
000723B8 102D 000B                  		move.b	$B(a5),d0
000723BC 4EBA 0000                  		jsr	sub_72C4E(pc)
000723C0 2A4B                       		movea.l	a3,a5
000723C2                            
000723C2                            loc_72C22:
000723C2 504F                       		addq.w	#8,sp
000723C4 4E75                       		rts	
000723C6                            ; ===========================================================================
000723C6                            
000723C6                            loc_72C26:				; XREF: loc_72A64
000723C6 7000                       		moveq	#0,d0
000723C8 101C                       		move.b	(a4)+,d0
000723CA 1B40 000B                  		move.b	d0,$B(a5)
000723CE 0815 0002                  		btst	#2,(a5)
000723D2 6600 0000                  		bne.w	locret_72CAA
000723D6 226E 0018                  		movea.l	$18(a6),a1
000723DA 4A2E 000E                  		tst.b	$E(a6)
000723DE 6700                       		beq.s	sub_72C4E
000723E0 226D 0020                  		movea.l	$20(a5),a1
000723E4 4A2E 000E                  		tst.b	$E(a6)
000723E8 6B00                       		bmi.s	sub_72C4E
000723EA 226E 0020                  		movea.l	$20(a6),a1
000723EE                            
000723EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000723EE                            
000723EE                            
000723EE                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000723EE 5340                       		subq.w	#1,d0
000723F0 6B00                       		bmi.s	loc_72C5C
000723F2 323C 0019                  		move.w	#$19,d1
000723F6                            
000723F6                            loc_72C56:
000723F6 D2C1                       		adda.w	d1,a1
000723F8 51C8 FFFC                  		dbf	d0,loc_72C56
000723FC                            
000723FC                            loc_72C5C:
000723FC 1219                       		move.b	(a1)+,d1
000723FE 1B41 001F                  		move.b	d1,$1F(a5)
00072402 1801                       		move.b	d1,d4
00072404 103C 00B0                  		move.b	#$B0,d0
00072408 4EBA FAB8                  		jsr	sub_72722(pc)
0007240C 45FA 0000                  		lea	byte_72D18(pc),a2
00072410 7613                       		moveq	#$13,d3
00072412                            
00072412                            loc_72C72:
00072412 101A                       		move.b	(a2)+,d0
00072414 1219                       		move.b	(a1)+,d1
00072416 4EBA FAAA                  		jsr	sub_72722(pc)
0007241A 51CB FFF6                  		dbf	d3,loc_72C72
0007241E 7A03                       		moveq	#3,d5
00072420 0244 0007                  		andi.w	#7,d4
00072424 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00072428 162D 0009                  		move.b	9(a5),d3
0007242C                            
0007242C                            loc_72C8C:
0007242C 101A                       		move.b	(a2)+,d0
0007242E 1219                       		move.b	(a1)+,d1
00072430 E20C                       		lsr.b	#1,d4
00072432 6400                       		bcc.s	loc_72C96
00072434 D203                       		add.b	d3,d1
00072436                            
00072436                            loc_72C96:
00072436 4EBA FA8A                  		jsr	sub_72722(pc)
0007243A 51CD FFF0                  		dbf	d5,loc_72C8C
0007243E 103C 00B4                  		move.b	#$B4,d0
00072442 122D 000A                  		move.b	$A(a5),d1
00072446 4EBA FA7A                  		jsr	sub_72722(pc)
0007244A                            
0007244A                            locret_72CAA:
0007244A 4E75                       		rts	
0007244C                            ; End of function sub_72C4E
0007244C                            
0007244C                            ; ===========================================================================
0007244C 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00072454                            
00072454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072454                            
00072454                            
00072454                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00072454 0815 0002                  		btst	#2,(a5)
00072458 6600                       		bne.s	locret_72D16
0007245A 7000                       		moveq	#0,d0
0007245C 102D 000B                  		move.b	$B(a5),d0
00072460 226E 0018                  		movea.l	$18(a6),a1
00072464 4A2E 000E                  		tst.b	$E(a6)
00072468 6700                       		beq.s	loc_72CD8
0007246A 226E 0020                  		movea.l	$20(a6),a1
0007246E 4A2E 000E                  		tst.b	$E(a6)
00072472 6B00                       		bmi.s	loc_72CD8
00072474 226E 0020                  		movea.l	$20(a6),a1
00072478                            
00072478                            loc_72CD8:
00072478 5340                       		subq.w	#1,d0
0007247A 6B00                       		bmi.s	loc_72CE6
0007247C 323C 0019                  		move.w	#$19,d1
00072480                            
00072480                            loc_72CE0:
00072480 D2C1                       		adda.w	d1,a1
00072482 51C8 FFFC                  		dbf	d0,loc_72CE0
00072486                            
00072486                            loc_72CE6:
00072486 D2FC 0015                  		adda.w	#$15,a1
0007248A 45FA 0000                  		lea	byte_72D2C(pc),a2
0007248E 102D 001F                  		move.b	$1F(a5),d0
00072492 0240 0007                  		andi.w	#7,d0
00072496 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007249A 162D 0009                  		move.b	9(a5),d3
0007249E 6B00                       		bmi.s	locret_72D16
000724A0 7A03                       		moveq	#3,d5
000724A2                            
000724A2                            loc_72D02:
000724A2 101A                       		move.b	(a2)+,d0
000724A4 1219                       		move.b	(a1)+,d1
000724A6 E20C                       		lsr.b	#1,d4
000724A8 6400                       		bcc.s	loc_72D12
000724AA D203                       		add.b	d3,d1
000724AC 6500                       		bcs.s	loc_72D12
000724AE 4EBA FA12                  		jsr	sub_72722(pc)
000724B2                            
000724B2                            loc_72D12:
000724B2 51CD FFEE                  		dbf	d5,loc_72D02
000724B6                            
000724B6                            locret_72D16:
000724B6 4E75                       		rts	
000724B8                            ; End of function sub_72CB4
000724B8                            
000724B8                            ; ===========================================================================
000724B8 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000724C2 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000724CC 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000724D0                            ; ===========================================================================
000724D0                            
000724D0                            loc_72D30:				; XREF: loc_72A64
000724D0 08D5 0003                  		bset	#3,(a5)
000724D4 2B4C 0014                  		move.l	a4,$14(a5)
000724D8 1B5C 0018                  		move.b	(a4)+,$18(a5)
000724DC 1B5C 0019                  		move.b	(a4)+,$19(a5)
000724E0 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000724E4 101C                       		move.b	(a4)+,d0
000724E6 E208                       		lsr.b	#1,d0
000724E8 1B40 001B                  		move.b	d0,$1B(a5)
000724EC 426D 001C                  		clr.w	$1C(a5)
000724F0 4E75                       		rts	
000724F2                            ; ===========================================================================
000724F2                            
000724F2                            loc_72D52:				; XREF: loc_72A64
000724F2 08D5 0003                  		bset	#3,(a5)
000724F6 4E75                       		rts	
000724F8                            ; ===========================================================================
000724F8                            
000724F8                            loc_72D58:				; XREF: loc_72A64
000724F8 0895 0007                  		bclr	#7,(a5)
000724FC 0895 0004                  		bclr	#4,(a5)
00072500 4A2D 0001                  		tst.b	1(a5)
00072504 6B00                       		bmi.s	loc_72D74
00072506 4A2E 0008                  		tst.b	8(a6)
0007250A 6B00 0000                  		bmi.w	loc_72E02
0007250E 4EBA F98E                  		jsr	sub_726FE(pc)
00072512 6000                       		bra.s	loc_72D78
00072514                            ; ===========================================================================
00072514                            
00072514                            loc_72D74:
00072514 4EBA FC2A                  		jsr	sub_729A0(pc)
00072518                            
00072518                            loc_72D78:
00072518 4A2E 000E                  		tst.b	$E(a6)
0007251C 6A00 0000                  		bpl.w	loc_72E02
00072520 4216                       		clr.b	0(a6)
00072522 7000                       		moveq	#0,d0
00072524 102D 0001                  		move.b	1(a5),d0
00072528 6B00                       		bmi.s	loc_72DCC
0007252A 41FA F546                  		lea	dword_722CC(pc),a0
0007252E 264D                       		movea.l	a5,a3
00072530 0C00 0004                  		cmpi.b	#4,d0
00072534 6600                       		bne.s	loc_72DA8
00072536 4A2E 0340                  		tst.b	$340(a6)
0007253A 6A00                       		bpl.s	loc_72DA8
0007253C 4BEE 0340                  		lea	$340(a6),a5
00072540 226E 0020                  		movea.l	$20(a6),a1
00072544 6000                       		bra.s	loc_72DB8
00072546                            ; ===========================================================================
00072546                            
00072546                            loc_72DA8:
00072546 5500                       		subq.b	#2,d0
00072548 E508                       		lsl.b	#2,d0
0007254A 2A70 0000                  		movea.l	(a0,d0.w),a5
0007254E 4A15                       		tst.b	(a5)
00072550 6A00                       		bpl.s	loc_72DC8
00072552 226E 0018                  		movea.l	$18(a6),a1
00072556                            
00072556                            loc_72DB8:
00072556 0895 0002                  		bclr	#2,(a5)
0007255A 08D5 0001                  		bset	#1,(a5)
0007255E 102D 000B                  		move.b	$B(a5),d0
00072562 4EBA FE8A                  		jsr	sub_72C4E(pc)
00072566                            
00072566                            loc_72DC8:
00072566 2A4B                       		movea.l	a3,a5
00072568 6000                       		bra.s	loc_72E02
0007256A                            ; ===========================================================================
0007256A                            
0007256A                            loc_72DCC:
0007256A 41EE 0370                  		lea	$370(a6),a0
0007256E 4A10                       		tst.b	(a0)
00072570 6A00                       		bpl.s	loc_72DE0
00072572 0C00 00E0                  		cmpi.b	#$E0,d0
00072576 6700                       		beq.s	loc_72DEA
00072578 0C00 00C0                  		cmpi.b	#$C0,d0
0007257C 6700                       		beq.s	loc_72DEA
0007257E                            
0007257E                            loc_72DE0:
0007257E 41FA F4F2                  		lea	dword_722CC(pc),a0
00072582 E608                       		lsr.b	#3,d0
00072584 2070 0000                  		movea.l	(a0,d0.w),a0
00072588                            
00072588                            loc_72DEA:
00072588 0890 0002                  		bclr	#2,(a0)
0007258C 08D0 0001                  		bset	#1,(a0)
00072590 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072596 6600                       		bne.s	loc_72E02
00072598 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000725A0                            
000725A0                            loc_72E02:
000725A0 504F                       		addq.w	#8,sp
000725A2 4E75                       		rts	
000725A4                            ; ===========================================================================
000725A4                            
000725A4                            loc_72E06:				; XREF: loc_72A64
000725A4 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000725AA 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000725AE 0815 0002                  		btst	#2,(a5)
000725B2 6600                       		bne.s	locret_72E1E
000725B4 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000725BC                            
000725BC                            locret_72E1E:
000725BC 4E75                       		rts	
000725BE                            ; ===========================================================================
000725BE                            
000725BE                            loc_72E20:				; XREF: loc_72A64
000725BE 0895 0003                  		bclr	#3,(a5)
000725C2 4E75                       		rts	
000725C4                            ; ===========================================================================
000725C4                            
000725C4                            loc_72E26:				; XREF: loc_72A64
000725C4 1B5C 000B                  		move.b	(a4)+,$B(a5)
000725C8 4E75                       		rts	
000725CA                            ; ===========================================================================
000725CA                            
000725CA                            loc_72E2C:				; XREF: loc_72A64
000725CA 101C                       		move.b	(a4)+,d0
000725CC E148                       		lsl.w	#8,d0
000725CE 101C                       		move.b	(a4)+,d0
000725D0 D8C0                       		adda.w	d0,a4
000725D2 534C                       		subq.w	#1,a4
000725D4 4E75                       		rts	
000725D6                            ; ===========================================================================
000725D6                            
000725D6                            loc_72E38:				; XREF: loc_72A64
000725D6 7000                       		moveq	#0,d0
000725D8 101C                       		move.b	(a4)+,d0
000725DA 121C                       		move.b	(a4)+,d1
000725DC 4A35 0024                  		tst.b	$24(a5,d0.w)
000725E0 6600                       		bne.s	loc_72E48
000725E2 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000725E6                            
000725E6                            loc_72E48:
000725E6 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000725EA 66DE                       		bne.s	loc_72E2C
000725EC 544C                       		addq.w	#2,a4
000725EE 4E75                       		rts	
000725F0                            ; ===========================================================================
000725F0                            
000725F0                            loc_72E52:				; XREF: loc_72A64
000725F0 7000                       		moveq	#0,d0
000725F2 102D 000D                  		move.b	$D(a5),d0
000725F6 5900                       		subq.b	#4,d0
000725F8 2B8C 0000                  		move.l	a4,(a5,d0.w)
000725FC 1B40 000D                  		move.b	d0,$D(a5)
00072600 60C8                       		bra.s	loc_72E2C
00072602                            ; ===========================================================================
00072602                            
00072602                            loc_72E64:				; XREF: loc_72A64
00072602 103C 0088                  		move.b	#$88,d0
00072606 123C 000F                  		move.b	#$F,d1
0007260A 4EBA F8C2                  		jsr	sub_7272E(pc)
0007260E 103C 008C                  		move.b	#$8C,d0
00072612 123C 000F                  		move.b	#$F,d1
00072616 6000 F8B6                  		bra.w	sub_7272E
0007261A                            ; ===========================================================================
0007261A                            Kos_Z80:	incbin	sound\z80_1.bin
000726CA 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000726CC 21                         		dc.b $21
000726CD 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000726CF                            		incbin	sound\z80_2.bin
00073D7A                            		even
00073D7A                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007A57A                            		even
0007A57A                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00083E18                            		even
00083E18                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000843A6                            		even
000843A6                            Music84:	include	sound\music84.asm ; Star Light Act 1
000843A6                            music84_Header:
000843A6 =00000001                  smpsHeaderStartSong = 1
000843A6 0000                       	smpsHeaderVoice     music84_Voices
000843A8 0603                       	smpsHeaderChan      $06, $03
000843AA 0205                       	smpsHeaderTempo     $02, $05
000843AC                            
000843B0 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000843B4 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000843B8 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000843BC 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000843C0 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000843C4 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000843CA 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000843D0 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000843D6                            
000843D6                            ; FM1 Data
000843D6                            music84_FM1:
000843D6 E0C0                       	smpsPan             panCenter, $00
000843DA E107                       	smpsAlterNote       $07
000843DC 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000843E0 E106                       	smpsAlterNote       $06
000843E2 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000843E6 E10B                       	smpsAlterNote       $0B
000843E8 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000843EE E10C                       	smpsAlterNote       $0C
000843F0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000843F3 E10B                       	smpsAlterNote       $0B
000843F5 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000843F8 E109                       	smpsAlterNote       $09
000843FA E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000843FF E108                       	smpsAlterNote       $08
00084401 8001                       	dc.b	nRst, $01
00084403 E10B                       	smpsAlterNote       $0B
00084405 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008440B E107                       	smpsAlterNote       $07
0008440D 9B03                       	dc.b	nD2, $03
0008440F                            
0008440F                            music84_Jump04:
0008440F E107                       	smpsAlterNote       $07
00084411 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084415 E10B                       	smpsAlterNote       $0B
00084417 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008441B E107                       	smpsAlterNote       $07
0008441D 9B03                       	dc.b	nD2, $03
0008441F E11A                       	smpsAlterNote       $1A
00084421 A301                       	dc.b	nBb2, $01
00084423 E1F2                       	smpsAlterNote       $F2
00084425 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084428 E1FF                       	smpsAlterNote       $FF
0008442A E701                       	dc.b	smpsNoAttack, $01
0008442C E111                       	smpsAlterNote       $11
0008442E E701                       	dc.b	smpsNoAttack, $01
00084430 E106                       	smpsAlterNote       $06
00084432 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084435 E107                       	smpsAlterNote       $07
00084437 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008443B E108                       	smpsAlterNote       $08
0008443D 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00084445 E109                       	smpsAlterNote       $09
00084447 A003                       	dc.b	nG2, $03
00084449 E10C                       	smpsAlterNote       $0C
0008444B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008444F E1FD                       	smpsAlterNote       $FD
00084451 A401                       	dc.b	nB2, $01
00084453 E109                       	smpsAlterNote       $09
00084455 E701                       	dc.b	smpsNoAttack, $01
00084457 E106                       	smpsAlterNote       $06
00084459 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008445C E109                       	smpsAlterNote       $09
0008445E A007                       	dc.b	nG2, $07
00084460 E108                       	smpsAlterNote       $08
00084462 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00084466 E107                       	smpsAlterNote       $07
00084468 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008446E E10B                       	smpsAlterNote       $0B
00084470 A203 8001                  	dc.b	nA2, $03, nRst, $01
00084474 E107                       	smpsAlterNote       $07
00084476 9B03                       	dc.b	nD2, $03
00084478 E11A                       	smpsAlterNote       $1A
0008447A A301                       	dc.b	nBb2, $01
0008447C E1F9                       	smpsAlterNote       $F9
0008447E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084481 E107                       	smpsAlterNote       $07
00084483 E701                       	dc.b	smpsNoAttack, $01
00084485 E111                       	smpsAlterNote       $11
00084487 E701                       	dc.b	smpsNoAttack, $01
00084489 E106                       	smpsAlterNote       $06
0008448B E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00084490 E107                       	smpsAlterNote       $07
00084492 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008449A E1EC                       	smpsAlterNote       $EC
0008449C A101                       	dc.b	nAb2, $01
0008449E E108                       	smpsAlterNote       $08
000844A0 E701                       	dc.b	smpsNoAttack, $01
000844A2 E116                       	smpsAlterNote       $16
000844A4 E701                       	dc.b	smpsNoAttack, $01
000844A6 E1F5                       	smpsAlterNote       $F5
000844A8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000844AB E10B                       	smpsAlterNote       $0B
000844AD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000844B1 E107                       	smpsAlterNote       $07
000844B3 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000844B9 E109                       	smpsAlterNote       $09
000844BB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000844BF E10B                       	smpsAlterNote       $0B
000844C1 9603                       	dc.b	nA1, $03
000844C3 E107                       	smpsAlterNote       $07
000844C5 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000844CB E10B                       	smpsAlterNote       $0B
000844CD A203 8001                  	dc.b	nA2, $03, nRst, $01
000844D1 E107                       	smpsAlterNote       $07
000844D3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000844D7 E11A                       	smpsAlterNote       $1A
000844D9 A301                       	dc.b	nBb2, $01
000844DB E1F9                       	smpsAlterNote       $F9
000844DD E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000844E0 E107                       	smpsAlterNote       $07
000844E2 E701                       	dc.b	smpsNoAttack, $01
000844E4 E1FB                       	smpsAlterNote       $FB
000844E6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000844E9 E106                       	smpsAlterNote       $06
000844EB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000844EF E107                       	smpsAlterNote       $07
000844F1 9B03                       	dc.b	nD2, $03
000844F3 E108                       	smpsAlterNote       $08
000844F5 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000844FB E109                       	smpsAlterNote       $09
000844FD A002 8001                  	dc.b	nG2, $02, nRst, $01
00084501 E10C                       	smpsAlterNote       $0C
00084503 A303                       	dc.b	nBb2, $03
00084505 E1F0                       	smpsAlterNote       $F0
00084507 A401                       	dc.b	nB2, $01
00084509 E1FD                       	smpsAlterNote       $FD
0008450B E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00084510 E106                       	smpsAlterNote       $06
00084512 8001                       	dc.b	nRst, $01
00084514 E109                       	smpsAlterNote       $09
00084516 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008451A E108                       	smpsAlterNote       $08
0008451C 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00084520 E107                       	smpsAlterNote       $07
00084522 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084528 E10B                       	smpsAlterNote       $0B
0008452A A203                       	dc.b	nA2, $03
0008452C E107                       	smpsAlterNote       $07
0008452E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084532 E1F2                       	smpsAlterNote       $F2
00084534 A401                       	dc.b	nB2, $01
00084536 E1FF                       	smpsAlterNote       $FF
00084538 E701                       	dc.b	smpsNoAttack, $01
0008453A E107                       	smpsAlterNote       $07
0008453C E701                       	dc.b	smpsNoAttack, $01
0008453E E1FB                       	smpsAlterNote       $FB
00084540 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084543 E106                       	smpsAlterNote       $06
00084545 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084549 E107                       	smpsAlterNote       $07
0008454B 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00084555 E117                       	smpsAlterNote       $17
00084557 A001                       	dc.b	nG2, $01
00084559 E1FA                       	smpsAlterNote       $FA
0008455B E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008455E E108                       	smpsAlterNote       $08
00084560 E701                       	dc.b	smpsNoAttack, $01
00084562 E1E7                       	smpsAlterNote       $E7
00084564 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084567 E103                       	smpsAlterNote       $03
00084569 E701                       	dc.b	smpsNoAttack, $01
0008456B E10B                       	smpsAlterNote       $0B
0008456D E702                       	dc.b	smpsNoAttack, $02
0008456F E107                       	smpsAlterNote       $07
00084571 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00084579 E106                       	smpsAlterNote       $06
0008457B 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00084581 E10C                       	smpsAlterNote       $0C
00084583 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00084589 E109                       	smpsAlterNote       $09
0008458B 9E03                       	dc.b	nF2, $03
0008458D E10C                       	smpsAlterNote       $0C
0008458F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084593 E1EA                       	smpsAlterNote       $EA
00084595 A201                       	dc.b	nA2, $01
00084597 E106                       	smpsAlterNote       $06
00084599 E701                       	dc.b	smpsNoAttack, $01
0008459B E1E2                       	smpsAlterNote       $E2
0008459D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000845A0 E1F0                       	smpsAlterNote       $F0
000845A2 E701                       	dc.b	smpsNoAttack, $01
000845A4 E10C                       	smpsAlterNote       $0C
000845A6 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000845B2 E116                       	smpsAlterNote       $16
000845B4 9C01                       	dc.b	nEb2, $01
000845B6 E105                       	smpsAlterNote       $05
000845B8 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000845BB E1F1                       	smpsAlterNote       $F1
000845BD E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000845C0 E1FF                       	smpsAlterNote       $FF
000845C2 E701                       	dc.b	smpsNoAttack, $01
000845C4 E109                       	smpsAlterNote       $09
000845C6 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000845CA E10C                       	smpsAlterNote       $0C
000845CC 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000845D8 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000845DE E109                       	smpsAlterNote       $09
000845E0 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000845E4 E10C                       	smpsAlterNote       $0C
000845E6 9703                       	dc.b	nBb1, $03
000845E8 E11A                       	smpsAlterNote       $1A
000845EA A101                       	dc.b	nAb2, $01
000845EC E1FB                       	smpsAlterNote       $FB
000845EE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000845F1 E10A                       	smpsAlterNote       $0A
000845F3 E701                       	dc.b	smpsNoAttack, $01
000845F5 E1E8                       	smpsAlterNote       $E8
000845F7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000845FA E106                       	smpsAlterNote       $06
000845FC E701                       	dc.b	smpsNoAttack, $01
000845FE E10C                       	smpsAlterNote       $0C
00084600 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008460C E1F9                       	smpsAlterNote       $F9
0008460E 9D01                       	dc.b	nE2, $01
00084610 E108                       	smpsAlterNote       $08
00084612 E701                       	dc.b	smpsNoAttack, $01
00084614 E1F6                       	smpsAlterNote       $F6
00084616 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084619 E109                       	smpsAlterNote       $09
0008461B E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008461F E10C                       	smpsAlterNote       $0C
00084621 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008462D E108                       	smpsAlterNote       $08
0008462F 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00084635 E106                       	smpsAlterNote       $06
00084637 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008463B E108                       	smpsAlterNote       $08
0008463D 9D03                       	dc.b	nE2, $03
0008463F E1EB                       	smpsAlterNote       $EB
00084641 A801                       	dc.b	nEb3, $01
00084643 E109                       	smpsAlterNote       $09
00084645 E701                       	dc.b	smpsNoAttack, $01
00084647 E1FA                       	smpsAlterNote       $FA
00084649 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008464C E108                       	smpsAlterNote       $08
0008464E E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008465A E1E9                       	smpsAlterNote       $E9
0008465C A301                       	dc.b	nBb2, $01
0008465E E107                       	smpsAlterNote       $07
00084660 E701                       	dc.b	smpsNoAttack, $01
00084662 E1F0                       	smpsAlterNote       $F0
00084664 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084667 E1F7                       	smpsAlterNote       $F7
00084669 E701                       	dc.b	smpsNoAttack, $01
0008466B E107                       	smpsAlterNote       $07
0008466D E701                       	dc.b	smpsNoAttack, $01
0008466F E106                       	smpsAlterNote       $06
00084671 E701                       	dc.b	smpsNoAttack, $01
00084673 E108                       	smpsAlterNote       $08
00084675 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008467B E106                       	smpsAlterNote       $06
0008467D A403 8001                  	dc.b	nB2, $03, nRst, $01
00084681 E108                       	smpsAlterNote       $08
00084683 9D03                       	dc.b	nE2, $03
00084685 E10B                       	smpsAlterNote       $0B
00084687 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008468F E108                       	smpsAlterNote       $08
00084691 9D03                       	dc.b	nE2, $03
00084693 E10B                       	smpsAlterNote       $0B
00084695 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084699 E113                       	smpsAlterNote       $13
0008469B A001                       	dc.b	nG2, $01
0008469D E118                       	smpsAlterNote       $18
0008469F E701                       	dc.b	smpsNoAttack, $01
000846A1 E1E9                       	smpsAlterNote       $E9
000846A3 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000846A6 E1F3                       	smpsAlterNote       $F3
000846A8 E701                       	dc.b	smpsNoAttack, $01
000846AA E1FD                       	smpsAlterNote       $FD
000846AC E701                       	dc.b	smpsNoAttack, $01
000846AE E102                       	smpsAlterNote       $02
000846B0 E701                       	dc.b	smpsNoAttack, $01
000846B2 E107                       	smpsAlterNote       $07
000846B4 8001                       	dc.b	nRst, $01
000846B6 E10B                       	smpsAlterNote       $0B
000846B8 9603                       	dc.b	nA1, $03
000846BA E10C                       	smpsAlterNote       $0C
000846BC 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000846C2 E10B                       	smpsAlterNote       $0B
000846C4 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000846D0 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000846D6 E107                       	smpsAlterNote       $07
000846D8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000846DE E10B                       	smpsAlterNote       $0B
000846E0 A203                       	dc.b	nA2, $03
000846E2 E107                       	smpsAlterNote       $07
000846E4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000846E8 E1F2                       	smpsAlterNote       $F2
000846EA A401                       	dc.b	nB2, $01
000846EC E1FF                       	smpsAlterNote       $FF
000846EE E701                       	dc.b	smpsNoAttack, $01
000846F0 E107                       	smpsAlterNote       $07
000846F2 E701                       	dc.b	smpsNoAttack, $01
000846F4 E1FB                       	smpsAlterNote       $FB
000846F6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000846F9 E106                       	smpsAlterNote       $06
000846FB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000846FF E107                       	smpsAlterNote       $07
00084701 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084705 E108                       	smpsAlterNote       $08
00084707 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008470D E109                       	smpsAlterNote       $09
0008470F A003 8001                  	dc.b	nG2, $03, nRst, $01
00084713 E10C                       	smpsAlterNote       $0C
00084715 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00084719 E1F0                       	smpsAlterNote       $F0
0008471B A401                       	dc.b	nB2, $01
0008471D E109                       	smpsAlterNote       $09
0008471F E701                       	dc.b	smpsNoAttack, $01
00084721 E106                       	smpsAlterNote       $06
00084723 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084726 E109                       	smpsAlterNote       $09
00084728 A007                       	dc.b	nG2, $07
0008472A E108                       	smpsAlterNote       $08
0008472C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00084730 E107                       	smpsAlterNote       $07
00084732 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084738 E10B                       	smpsAlterNote       $0B
0008473A A202 8001                  	dc.b	nA2, $02, nRst, $01
0008473E E107                       	smpsAlterNote       $07
00084740 9B03                       	dc.b	nD2, $03
00084742 E11A                       	smpsAlterNote       $1A
00084744 A301                       	dc.b	nBb2, $01
00084746 E1F2                       	smpsAlterNote       $F2
00084748 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008474B E1FF                       	smpsAlterNote       $FF
0008474D E701                       	dc.b	smpsNoAttack, $01
0008474F E111                       	smpsAlterNote       $11
00084751 E701                       	dc.b	smpsNoAttack, $01
00084753 E106                       	smpsAlterNote       $06
00084755 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084758 E107                       	smpsAlterNote       $07
0008475A 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00084766 E117                       	smpsAlterNote       $17
00084768 A001                       	dc.b	nG2, $01
0008476A E1FA                       	smpsAlterNote       $FA
0008476C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008476F E116                       	smpsAlterNote       $16
00084771 E701                       	dc.b	smpsNoAttack, $01
00084773 E1F5                       	smpsAlterNote       $F5
00084775 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084778 E103                       	smpsAlterNote       $03
0008477A E701                       	dc.b	smpsNoAttack, $01
0008477C E10B                       	smpsAlterNote       $0B
0008477E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084782 E107                       	smpsAlterNote       $07
00084784 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008478A E109                       	smpsAlterNote       $09
0008478C 9E03                       	dc.b	nF2, $03
0008478E E10B                       	smpsAlterNote       $0B
00084790 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084794 E107                       	smpsAlterNote       $07
00084796 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008479C E10B                       	smpsAlterNote       $0B
0008479E A203 8001                  	dc.b	nA2, $03, nRst, $01
000847A2 E107                       	smpsAlterNote       $07
000847A4 9B03                       	dc.b	nD2, $03
000847A6 E11A                       	smpsAlterNote       $1A
000847A8 A301                       	dc.b	nBb2, $01
000847AA E1F9                       	smpsAlterNote       $F9
000847AC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000847AF E107                       	smpsAlterNote       $07
000847B1 E701                       	dc.b	smpsNoAttack, $01
000847B3 E111                       	smpsAlterNote       $11
000847B5 E701                       	dc.b	smpsNoAttack, $01
000847B7 E106                       	smpsAlterNote       $06
000847B9 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000847BE E107                       	smpsAlterNote       $07
000847C0 9B03                       	dc.b	nD2, $03
000847C2 E108                       	smpsAlterNote       $08
000847C4 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000847CA E109                       	smpsAlterNote       $09
000847CC A003                       	dc.b	nG2, $03
000847CE E10C                       	smpsAlterNote       $0C
000847D0 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000847D4 E1FD                       	smpsAlterNote       $FD
000847D6 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000847DB E106                       	smpsAlterNote       $06
000847DD 8001                       	dc.b	nRst, $01
000847DF E109                       	smpsAlterNote       $09
000847E1 A006 8001                  	dc.b	nG2, $06, nRst, $01
000847E5 E108                       	smpsAlterNote       $08
000847E7 9C03                       	dc.b	nEb2, $03
000847E9 E107                       	smpsAlterNote       $07
000847EB 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000847F1 E10B                       	smpsAlterNote       $0B
000847F3 A203 8001                  	dc.b	nA2, $03, nRst, $01
000847F7 E107                       	smpsAlterNote       $07
000847F9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000847FD E11A                       	smpsAlterNote       $1A
000847FF A301                       	dc.b	nBb2, $01
00084801 E1F9                       	smpsAlterNote       $F9
00084803 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084806 E107                       	smpsAlterNote       $07
00084808 E701                       	dc.b	smpsNoAttack, $01
0008480A E1FB                       	smpsAlterNote       $FB
0008480C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008480F E106                       	smpsAlterNote       $06
00084811 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084815 E107                       	smpsAlterNote       $07
00084817 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008481F E1EC                       	smpsAlterNote       $EC
00084821 A101                       	dc.b	nAb2, $01
00084823 E108                       	smpsAlterNote       $08
00084825 E701                       	dc.b	smpsNoAttack, $01
00084827 E1E7                       	smpsAlterNote       $E7
00084829 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008482C E1F5                       	smpsAlterNote       $F5
0008482E E701                       	dc.b	smpsNoAttack, $01
00084830 E10B                       	smpsAlterNote       $0B
00084832 E702                       	dc.b	smpsNoAttack, $02
00084834 E107                       	smpsAlterNote       $07
00084836 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008483C E106                       	smpsAlterNote       $06
0008483E 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00084844 E10C                       	smpsAlterNote       $0C
00084846 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008484E E109                       	smpsAlterNote       $09
00084850 9E03                       	dc.b	nF2, $03
00084852 E10C                       	smpsAlterNote       $0C
00084854 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084858 E1EA                       	smpsAlterNote       $EA
0008485A A201                       	dc.b	nA2, $01
0008485C E106                       	smpsAlterNote       $06
0008485E E701                       	dc.b	smpsNoAttack, $01
00084860 E114                       	smpsAlterNote       $14
00084862 E701                       	dc.b	smpsNoAttack, $01
00084864 E1F0                       	smpsAlterNote       $F0
00084866 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084869 E10C                       	smpsAlterNote       $0C
0008486B E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00084877 9703                       	dc.b	nBb1, $03
00084879 E116                       	smpsAlterNote       $16
0008487B 9C01                       	dc.b	nEb2, $01
0008487D E105                       	smpsAlterNote       $05
0008487F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084882 E113                       	smpsAlterNote       $13
00084884 E701                       	dc.b	smpsNoAttack, $01
00084886 E1FF                       	smpsAlterNote       $FF
00084888 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008488B E109                       	smpsAlterNote       $09
0008488D E703                       	dc.b	smpsNoAttack, $03
0008488F E10C                       	smpsAlterNote       $0C
00084891 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008489D 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000848A5 E109                       	smpsAlterNote       $09
000848A7 9E03                       	dc.b	nF2, $03
000848A9 E10C                       	smpsAlterNote       $0C
000848AB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000848AF E1EC                       	smpsAlterNote       $EC
000848B1 A201                       	dc.b	nA2, $01
000848B3 E10A                       	smpsAlterNote       $0A
000848B5 E701                       	dc.b	smpsNoAttack, $01
000848B7 E1E8                       	smpsAlterNote       $E8
000848B9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000848BC E1F7                       	smpsAlterNote       $F7
000848BE E701                       	dc.b	smpsNoAttack, $01
000848C0 E10C                       	smpsAlterNote       $0C
000848C2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000848CE E1EA                       	smpsAlterNote       $EA
000848D0 9D01                       	dc.b	nE2, $01
000848D2 E108                       	smpsAlterNote       $08
000848D4 E701                       	dc.b	smpsNoAttack, $01
000848D6 E1F6                       	smpsAlterNote       $F6
000848D8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000848DB E105                       	smpsAlterNote       $05
000848DD E701                       	dc.b	smpsNoAttack, $01
000848DF E109                       	smpsAlterNote       $09
000848E1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000848E5 E10C                       	smpsAlterNote       $0C
000848E7 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000848F3 E108                       	smpsAlterNote       $08
000848F5 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000848FB E106                       	smpsAlterNote       $06
000848FD A403 8001                  	dc.b	nB2, $03, nRst, $01
00084901 E108                       	smpsAlterNote       $08
00084903 9D03                       	dc.b	nE2, $03
00084905 E1EB                       	smpsAlterNote       $EB
00084907 A801                       	dc.b	nEb3, $01
00084909 E109                       	smpsAlterNote       $09
0008490B E701                       	dc.b	smpsNoAttack, $01
0008490D E1EB                       	smpsAlterNote       $EB
0008490F E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00084912 E108                       	smpsAlterNote       $08
00084914 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00084920 E1E9                       	smpsAlterNote       $E9
00084922 A301                       	dc.b	nBb2, $01
00084924 E1F8                       	smpsAlterNote       $F8
00084926 E701                       	dc.b	smpsNoAttack, $01
00084928 E116                       	smpsAlterNote       $16
0008492A E701                       	dc.b	smpsNoAttack, $01
0008492C E1F7                       	smpsAlterNote       $F7
0008492E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084931 E107                       	smpsAlterNote       $07
00084933 E701                       	dc.b	smpsNoAttack, $01
00084935 E1EE                       	smpsAlterNote       $EE
00084937 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008493A E106                       	smpsAlterNote       $06
0008493C 8001                       	dc.b	nRst, $01
0008493E E108                       	smpsAlterNote       $08
00084940 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00084946 E106                       	smpsAlterNote       $06
00084948 A402 8001                  	dc.b	nB2, $02, nRst, $01
0008494C E108                       	smpsAlterNote       $08
0008494E 9D03                       	dc.b	nE2, $03
00084950 E10B                       	smpsAlterNote       $0B
00084952 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00084958 E108                       	smpsAlterNote       $08
0008495A 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008495E E10B                       	smpsAlterNote       $0B
00084960 9603                       	dc.b	nA1, $03
00084962 E10E                       	smpsAlterNote       $0E
00084964 A001                       	dc.b	nG2, $01
00084966 E118                       	smpsAlterNote       $18
00084968 E701                       	dc.b	smpsNoAttack, $01
0008496A E1E9                       	smpsAlterNote       $E9
0008496C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008496F E1EE                       	smpsAlterNote       $EE
00084971 E701                       	dc.b	smpsNoAttack, $01
00084973 E1F8                       	smpsAlterNote       $F8
00084975 E701                       	dc.b	smpsNoAttack, $01
00084977 E102                       	smpsAlterNote       $02
00084979 E701                       	dc.b	smpsNoAttack, $01
0008497B E107                       	smpsAlterNote       $07
0008497D 8001                       	dc.b	nRst, $01
0008497F E10B                       	smpsAlterNote       $0B
00084981 9603                       	dc.b	nA1, $03
00084983 E10C                       	smpsAlterNote       $0C
00084985 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008498B E10B                       	smpsAlterNote       $0B
0008498D 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00084999 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008499D E10C                       	smpsAlterNote       $0C
0008499F 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000849AB 8001                       	dc.b	nRst, $01
000849AD E10B                       	smpsAlterNote       $0B
000849AF 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000849B7 E107                       	smpsAlterNote       $07
000849B9 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000849BD E10B                       	smpsAlterNote       $0B
000849BF 9603                       	dc.b	nA1, $03
000849C1 E109                       	smpsAlterNote       $09
000849C3 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000849C7 E108                       	smpsAlterNote       $08
000849C9 9D06                       	dc.b	nE2, $06
000849CB E107                       	smpsAlterNote       $07
000849CD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000849D1 E106                       	smpsAlterNote       $06
000849D3 9903                       	dc.b	nC2, $03
000849D5 E10C                       	smpsAlterNote       $0C
000849D7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000849DB E10B                       	smpsAlterNote       $0B
000849DD 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000849E9 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000849F3 E10C                       	smpsAlterNote       $0C
000849F5 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00084A01 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00084A0D 8001                       	dc.b	nRst, $01
00084A0F E10B                       	smpsAlterNote       $0B
00084A11 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084A1D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00084A29 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00084A35 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084A3F E10C                       	smpsAlterNote       $0C
00084A41 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00084A4D E10B                       	smpsAlterNote       $0B
00084A4F 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00084A57 E107                       	smpsAlterNote       $07
00084A59 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00084A5D E10B                       	smpsAlterNote       $0B
00084A5F 9603                       	dc.b	nA1, $03
00084A61 E109                       	smpsAlterNote       $09
00084A63 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00084A67 E108                       	smpsAlterNote       $08
00084A69 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00084A6D E107                       	smpsAlterNote       $07
00084A6F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084A73 E106                       	smpsAlterNote       $06
00084A75 9903                       	dc.b	nC2, $03
00084A77 E10C                       	smpsAlterNote       $0C
00084A79 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084A7D E10B                       	smpsAlterNote       $0B
00084A7F 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084A8B 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084A95 E10C                       	smpsAlterNote       $0C
00084A97 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00084AA3 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00084AAF 8001                       	dc.b	nRst, $01
00084AB1 E10B                       	smpsAlterNote       $0B
00084AB3 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084ABF 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00084AC9 E10C                       	smpsAlterNote       $0C
00084ACB 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084AD7 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00084AE3 E10B                       	smpsAlterNote       $0B
00084AE5 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00084AF1 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00084AFB E10C                       	smpsAlterNote       $0C
00084AFD 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084B09 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00084B15 E10B                       	smpsAlterNote       $0B
00084B17 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00084B23 8001                       	dc.b	nRst, $01
00084B25 E1EC                       	smpsAlterNote       $EC
00084B27 A101                       	dc.b	nAb2, $01
00084B29 E1FA                       	smpsAlterNote       $FA
00084B2B E701                       	dc.b	smpsNoAttack, $01
00084B2D E116                       	smpsAlterNote       $16
00084B2F E701                       	dc.b	smpsNoAttack, $01
00084B31 E1F5                       	smpsAlterNote       $F5
00084B33 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084B36 E10B                       	smpsAlterNote       $0B
00084B38 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00084B44 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00084B50 E107                       	smpsAlterNote       $07
00084B52 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084B58 E10B                       	smpsAlterNote       $0B
00084B5A A203                       	dc.b	nA2, $03
00084B5C E107                       	smpsAlterNote       $07
00084B5E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084B62 E1F3                       	smpsAlterNote       $F3
00084B64 A401                       	dc.b	nB2, $01
00084B66 E102                       	smpsAlterNote       $02
00084B68 E701                       	dc.b	smpsNoAttack, $01
00084B6A E109                       	smpsAlterNote       $09
00084B6C E701                       	dc.b	smpsNoAttack, $01
00084B6E E102                       	smpsAlterNote       $02
00084B70 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084B73 E106                       	smpsAlterNote       $06
00084B75 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084B79 E107                       	smpsAlterNote       $07
00084B7B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084B7F E108                       	smpsAlterNote       $08
00084B81 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00084B87 E109                       	smpsAlterNote       $09
00084B89 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084B8D E1F2                       	smpsAlterNote       $F2
00084B8F A401                       	dc.b	nB2, $01
00084B91 E1FF                       	smpsAlterNote       $FF
00084B93 E701                       	dc.b	smpsNoAttack, $01
00084B95 E111                       	smpsAlterNote       $11
00084B97 E701                       	dc.b	smpsNoAttack, $01
00084B99 E1FB                       	smpsAlterNote       $FB
00084B9B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084B9E E106                       	smpsAlterNote       $06
00084BA0 E702                       	dc.b	smpsNoAttack, $02
00084BA2 E109                       	smpsAlterNote       $09
00084BA4 A007                       	dc.b	nG2, $07
00084BA6 E108                       	smpsAlterNote       $08
00084BA8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00084BAC E107                       	smpsAlterNote       $07
00084BAE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084BB4 E10B                       	smpsAlterNote       $0B
00084BB6 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084BBA E107                       	smpsAlterNote       $07
00084BBC 9B03                       	dc.b	nD2, $03
00084BBE E11A                       	smpsAlterNote       $1A
00084BC0 A301                       	dc.b	nBb2, $01
00084BC2 E1F2                       	smpsAlterNote       $F2
00084BC4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084BC7 E1FF                       	smpsAlterNote       $FF
00084BC9 E701                       	dc.b	smpsNoAttack, $01
00084BCB E111                       	smpsAlterNote       $11
00084BCD E701                       	dc.b	smpsNoAttack, $01
00084BCF E106                       	smpsAlterNote       $06
00084BD1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084BD4 E107                       	smpsAlterNote       $07
00084BD6 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00084BE2 E117                       	smpsAlterNote       $17
00084BE4 A001                       	dc.b	nG2, $01
00084BE6 E1FA                       	smpsAlterNote       $FA
00084BE8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00084BEB E116                       	smpsAlterNote       $16
00084BED E701                       	dc.b	smpsNoAttack, $01
00084BEF E1F5                       	smpsAlterNote       $F5
00084BF1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084BF4 E103                       	smpsAlterNote       $03
00084BF6 E701                       	dc.b	smpsNoAttack, $01
00084BF8 E10B                       	smpsAlterNote       $0B
00084BFA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00084BFE E107                       	smpsAlterNote       $07
00084C00 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084C06 E109                       	smpsAlterNote       $09
00084C08 9E03                       	dc.b	nF2, $03
00084C0A E10B                       	smpsAlterNote       $0B
00084C0C 9603 8001                  	dc.b	nA1, $03, nRst, $01
00084C10 E107                       	smpsAlterNote       $07
00084C12 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00084C18 E10B                       	smpsAlterNote       $0B
00084C1A A203 8001                  	dc.b	nA2, $03, nRst, $01
00084C1E E107                       	smpsAlterNote       $07
00084C20 9B03                       	dc.b	nD2, $03
00084C22 E11A                       	smpsAlterNote       $1A
00084C24 A301                       	dc.b	nBb2, $01
00084C26 E1F9                       	smpsAlterNote       $F9
00084C28 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084C2B E1FF                       	smpsAlterNote       $FF
00084C2D E701                       	dc.b	smpsNoAttack, $01
00084C2F E111                       	smpsAlterNote       $11
00084C31 E701                       	dc.b	smpsNoAttack, $01
00084C33 E106                       	smpsAlterNote       $06
00084C35 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084C38 E107                       	smpsAlterNote       $07
00084C3A 9B03                       	dc.b	nD2, $03
00084C3C E108                       	smpsAlterNote       $08
00084C3E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00084C44 E109                       	smpsAlterNote       $09
00084C46 A003                       	dc.b	nG2, $03
00084C48 E1F0                       	smpsAlterNote       $F0
00084C4A A501                       	dc.b	nC3, $01
00084C4C E106                       	smpsAlterNote       $06
00084C4E E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00084C52 E109                       	smpsAlterNote       $09
00084C54 A006 8001                  	dc.b	nG2, $06, nRst, $01
00084C58 E108                       	smpsAlterNote       $08
00084C5A 9C03                       	dc.b	nEb2, $03
00084C5C E107                       	smpsAlterNote       $07
00084C5E 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00084C64 E10B                       	smpsAlterNote       $0B
00084C66 A203 8001                  	dc.b	nA2, $03, nRst, $01
00084C6A E107                       	smpsAlterNote       $07
00084C6C 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084C70 E11A                       	smpsAlterNote       $1A
00084C72 A301                       	dc.b	nBb2, $01
00084C74 E1F9                       	smpsAlterNote       $F9
00084C76 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084C79 E107                       	smpsAlterNote       $07
00084C7B E701                       	dc.b	smpsNoAttack, $01
00084C7D E1FB                       	smpsAlterNote       $FB
00084C7F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084C82 E106                       	smpsAlterNote       $06
00084C84 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084C88 E107                       	smpsAlterNote       $07
00084C8A 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00084C92 E1EC                       	smpsAlterNote       $EC
00084C94 A101                       	dc.b	nAb2, $01
00084C96 E108                       	smpsAlterNote       $08
00084C98 E701                       	dc.b	smpsNoAttack, $01
00084C9A E1E7                       	smpsAlterNote       $E7
00084C9C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00084C9F E1F5                       	smpsAlterNote       $F5
00084CA1 E701                       	dc.b	smpsNoAttack, $01
00084CA3 E10B                       	smpsAlterNote       $0B
00084CA5 E702                       	dc.b	smpsNoAttack, $02
00084CA7 E107                       	smpsAlterNote       $07
00084CA9 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00084CAF E106                       	smpsAlterNote       $06
00084CB1 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00084CB7 E10C                       	smpsAlterNote       $0C
00084CB9 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00084CC1 E109                       	smpsAlterNote       $09
00084CC3 9E03                       	dc.b	nF2, $03
00084CC5 E10C                       	smpsAlterNote       $0C
00084CC7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084CCB E1EA                       	smpsAlterNote       $EA
00084CCD A201                       	dc.b	nA2, $01
00084CCF E106                       	smpsAlterNote       $06
00084CD1 E701                       	dc.b	smpsNoAttack, $01
00084CD3 E114                       	smpsAlterNote       $14
00084CD5 E701                       	dc.b	smpsNoAttack, $01
00084CD7 E1F0                       	smpsAlterNote       $F0
00084CD9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084CDC E10C                       	smpsAlterNote       $0C
00084CDE E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00084CEA 9703                       	dc.b	nBb1, $03
00084CEC E116                       	smpsAlterNote       $16
00084CEE 9C01                       	dc.b	nEb2, $01
00084CF0 E105                       	smpsAlterNote       $05
00084CF2 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084CF5 E113                       	smpsAlterNote       $13
00084CF7 E701                       	dc.b	smpsNoAttack, $01
00084CF9 E1FF                       	smpsAlterNote       $FF
00084CFB E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084CFE E109                       	smpsAlterNote       $09
00084D00 E703                       	dc.b	smpsNoAttack, $03
00084D02 E10C                       	smpsAlterNote       $0C
00084D04 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00084D10 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00084D18 E109                       	smpsAlterNote       $09
00084D1A 9E03                       	dc.b	nF2, $03
00084D1C E10C                       	smpsAlterNote       $0C
00084D1E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084D22 E1EA                       	smpsAlterNote       $EA
00084D24 A201                       	dc.b	nA2, $01
00084D26 E106                       	smpsAlterNote       $06
00084D28 E701                       	dc.b	smpsNoAttack, $01
00084D2A E1E2                       	smpsAlterNote       $E2
00084D2C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00084D2F E1F0                       	smpsAlterNote       $F0
00084D31 E701                       	dc.b	smpsNoAttack, $01
00084D33 E10C                       	smpsAlterNote       $0C
00084D35 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00084D41 E116                       	smpsAlterNote       $16
00084D43 9C01                       	dc.b	nEb2, $01
00084D45 E105                       	smpsAlterNote       $05
00084D47 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00084D4A E1F1                       	smpsAlterNote       $F1
00084D4C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00084D4F E1FF                       	smpsAlterNote       $FF
00084D51 E701                       	dc.b	smpsNoAttack, $01
00084D53 E109                       	smpsAlterNote       $09
00084D55 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084D59 E10C                       	smpsAlterNote       $0C
00084D5B 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00084D67 E106                       	smpsAlterNote       $06
00084D69 9903                       	dc.b	nC2, $03
00084D6B E107                       	smpsAlterNote       $07
00084D6D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084D71 E109                       	smpsAlterNote       $09
00084D73 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00084D79 E107                       	smpsAlterNote       $07
00084D7B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084D7F E108                       	smpsAlterNote       $08
00084D81 9D03                       	dc.b	nE2, $03
00084D83 E10B                       	smpsAlterNote       $0B
00084D85 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00084D8B E109                       	smpsAlterNote       $09
00084D8D 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00084D93 E10C                       	smpsAlterNote       $0C
00084D95 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00084D9B E106                       	smpsAlterNote       $06
00084D9D 9903                       	dc.b	nC2, $03
00084D9F E11A                       	smpsAlterNote       $1A
00084DA1 A301                       	dc.b	nBb2, $01
00084DA3 E1F9                       	smpsAlterNote       $F9
00084DA5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084DA8 E1FF                       	smpsAlterNote       $FF
00084DAA E701                       	dc.b	smpsNoAttack, $01
00084DAC E111                       	smpsAlterNote       $11
00084DAE E701                       	dc.b	smpsNoAttack, $01
00084DB0 E106                       	smpsAlterNote       $06
00084DB2 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00084DB9 E109                       	smpsAlterNote       $09
00084DBB A003                       	dc.b	nG2, $03
00084DBD E106                       	smpsAlterNote       $06
00084DBF 9907                       	dc.b	nC2, $07
00084DC1 E107                       	smpsAlterNote       $07
00084DC3 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00084DCB E10B                       	smpsAlterNote       $0B
00084DCD A203                       	dc.b	nA2, $03
00084DCF E107                       	smpsAlterNote       $07
00084DD1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084DD5 E1F2                       	smpsAlterNote       $F2
00084DD7 A401                       	dc.b	nB2, $01
00084DD9 E1F9                       	smpsAlterNote       $F9
00084DDB E701                       	dc.b	smpsNoAttack, $01
00084DDD E107                       	smpsAlterNote       $07
00084DDF E701                       	dc.b	smpsNoAttack, $01
00084DE1 E1FB                       	smpsAlterNote       $FB
00084DE3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084DE6 E106                       	smpsAlterNote       $06
00084DE8 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084DEC E107                       	smpsAlterNote       $07
00084DEE 9B03                       	dc.b	nD2, $03
00084DF0 E108                       	smpsAlterNote       $08
00084DF2 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00084DF8 E109                       	smpsAlterNote       $09
00084DFA A003 8001                  	dc.b	nG2, $03, nRst, $01
00084DFE E1F2                       	smpsAlterNote       $F2
00084E00 A401                       	dc.b	nB2, $01
00084E02 E1F9                       	smpsAlterNote       $F9
00084E04 E701                       	dc.b	smpsNoAttack, $01
00084E06 E107                       	smpsAlterNote       $07
00084E08 E701                       	dc.b	smpsNoAttack, $01
00084E0A E1FB                       	smpsAlterNote       $FB
00084E0C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084E0F E106                       	smpsAlterNote       $06
00084E11 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084E15 E108                       	smpsAlterNote       $08
00084E17 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00084E1B E10C                       	smpsAlterNote       $0C
00084E1D A302 8001                  	dc.b	nBb2, $02, nRst, $01
00084E21 E107                       	smpsAlterNote       $07
00084E23 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084E29 E10B                       	smpsAlterNote       $0B
00084E2B A203                       	dc.b	nA2, $03
00084E2D E107                       	smpsAlterNote       $07
00084E2F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084E33 E1F2                       	smpsAlterNote       $F2
00084E35 A401                       	dc.b	nB2, $01
00084E37 E1FF                       	smpsAlterNote       $FF
00084E39 E701                       	dc.b	smpsNoAttack, $01
00084E3B E107                       	smpsAlterNote       $07
00084E3D E701                       	dc.b	smpsNoAttack, $01
00084E3F E1FB                       	smpsAlterNote       $FB
00084E41 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084E44 E106                       	smpsAlterNote       $06
00084E46 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00084E4A E107                       	smpsAlterNote       $07
00084E4C 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00084E50 E108                       	smpsAlterNote       $08
00084E52 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00084E58 E109                       	smpsAlterNote       $09
00084E5A A003 8001                  	dc.b	nG2, $03, nRst, $01
00084E5E E1F2                       	smpsAlterNote       $F2
00084E60 A401                       	dc.b	nB2, $01
00084E62 E1FF                       	smpsAlterNote       $FF
00084E64 E701                       	dc.b	smpsNoAttack, $01
00084E66 E111                       	smpsAlterNote       $11
00084E68 E701                       	dc.b	smpsNoAttack, $01
00084E6A E1FB                       	smpsAlterNote       $FB
00084E6C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00084E6F E106                       	smpsAlterNote       $06
00084E71 E702                       	dc.b	smpsNoAttack, $02
00084E73 E108                       	smpsAlterNote       $08
00084E75 9C07                       	dc.b	nEb2, $07
00084E77 E10C                       	smpsAlterNote       $0C
00084E79 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084E7D E107                       	smpsAlterNote       $07
00084E7F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00084E85 E10B                       	smpsAlterNote       $0B
00084E87 A202 8001                  	dc.b	nA2, $02, nRst, $01
00084E8B E107                       	smpsAlterNote       $07
00084E8D 9B03                       	dc.b	nD2, $03
00084E8F E11A                       	smpsAlterNote       $1A
00084E91 A301                       	dc.b	nBb2, $01
00084E93 E1F2                       	smpsAlterNote       $F2
00084E95 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084E98 E1FF                       	smpsAlterNote       $FF
00084E9A E701                       	dc.b	smpsNoAttack, $01
00084E9C E111                       	smpsAlterNote       $11
00084E9E E701                       	dc.b	smpsNoAttack, $01
00084EA0 E106                       	smpsAlterNote       $06
00084EA2 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084EA5 E107                       	smpsAlterNote       $07
00084EA7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084EAB E108                       	smpsAlterNote       $08
00084EAD 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00084EB5 E109                       	smpsAlterNote       $09
00084EB7 A003                       	dc.b	nG2, $03
00084EB9 E11A                       	smpsAlterNote       $1A
00084EBB A301                       	dc.b	nBb2, $01
00084EBD E1F2                       	smpsAlterNote       $F2
00084EBF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00084EC2 E1FF                       	smpsAlterNote       $FF
00084EC4 E701                       	dc.b	smpsNoAttack, $01
00084EC6 E111                       	smpsAlterNote       $11
00084EC8 E701                       	dc.b	smpsNoAttack, $01
00084ECA E106                       	smpsAlterNote       $06
00084ECC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00084ECF E108                       	smpsAlterNote       $08
00084ED1 9C07                       	dc.b	nEb2, $07
00084ED3 E10C                       	smpsAlterNote       $0C
00084ED5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00084ED9 E107                       	smpsAlterNote       $07
00084EDB 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00084EE7 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00084EF1 E108                       	smpsAlterNote       $08
00084EF3 9C06                       	dc.b	nEb2, $06
00084EF5 E10C                       	smpsAlterNote       $0C
00084EF7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00084EFB E108                       	smpsAlterNote       $08
00084EFD 9C03                       	dc.b	nEb2, $03
00084EFF E109                       	smpsAlterNote       $09
00084F01 A003 8001                  	dc.b	nG2, $03, nRst, $01
00084F05 E10C                       	smpsAlterNote       $0C
00084F07 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00084F0F E107                       	smpsAlterNote       $07
00084F11 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00084F15 F6F4 F8                    	smpsJump            music84_Jump04
00084F18                            
00084F18                            ; FM2 Data
00084F18                            music84_FM2:
00084F18 E0C0                       	smpsPan             panCenter, $00
00084F1C E10B                       	smpsAlterNote       $0B
00084F1E C603 8007                  	dc.b	nA5, $03, nRst, $07
00084F22 E109                       	smpsAlterNote       $09
00084F24 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00084F28 E108                       	smpsAlterNote       $08
00084F2A C103 8004                  	dc.b	nE5, $03, nRst, $04
00084F30 E080                       	smpsPan             panLeft, $00
00084F32 E10C                       	smpsAlterNote       $0C
00084F34 E6F9                       	smpsAlterVol        $F9
00084F36 C703                       	dc.b	nBb5, $03
00084F38 E10B                       	smpsAlterNote       $0B
00084F3A C603 8001                  	dc.b	nA5, $03, nRst, $01
00084F3E E109                       	smpsAlterNote       $09
00084F40 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00084F46 E108                       	smpsAlterNote       $08
00084F48 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084F4C E106                       	smpsAlterNote       $06
00084F4E BD03                       	dc.b	nC5, $03
00084F50 E10B                       	smpsAlterNote       $0B
00084F52 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00084F58 E0C0                       	smpsPan             panCenter, $00
00084F5A E107                       	smpsAlterNote       $07
00084F5C E606                       	smpsAlterVol        $06
00084F5E BF03                       	dc.b	nD5, $03
00084F60                            
00084F60                            music84_Jump03:
00084F60 E108                       	smpsAlterNote       $08
00084F62 C103 8001                  	dc.b	nE5, $03, nRst, $01
00084F66 E109                       	smpsAlterNote       $09
00084F68 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00084F6E E10B                       	smpsAlterNote       $0B
00084F70 C607                       	dc.b	nA5, $07
00084F72 E107                       	smpsAlterNote       $07
00084F74 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00084F78 E106                       	smpsAlterNote       $06
00084F7A C90D                       	dc.b	nC6, $0D
00084F7C E100                       	smpsAlterNote       $00
00084F7E E701                       	dc.b	smpsNoAttack, $01
00084F80 E1FF                       	smpsAlterNote       $FF
00084F82 E701                       	dc.b	smpsNoAttack, $01
00084F84 E103                       	smpsAlterNote       $03
00084F86 E701                       	dc.b	smpsNoAttack, $01
00084F88 E109                       	smpsAlterNote       $09
00084F8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084F8E E106                       	smpsAlterNote       $06
00084F90 E701                       	dc.b	smpsNoAttack, $01
00084F92 E100                       	smpsAlterNote       $00
00084F94 E701                       	dc.b	smpsNoAttack, $01
00084F96 E10C                       	smpsAlterNote       $0C
00084F98 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00084F9C E10B                       	smpsAlterNote       $0B
00084F9E C603                       	dc.b	nA5, $03
00084FA0 E109                       	smpsAlterNote       $09
00084FA2 C403 8001                  	dc.b	nG5, $03, nRst, $01
00084FA6 E10B                       	smpsAlterNote       $0B
00084FA8 C60D                       	dc.b	nA5, $0D
00084FAA E105                       	smpsAlterNote       $05
00084FAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FB0 E10B                       	smpsAlterNote       $0B
00084FB2 E701                       	dc.b	smpsNoAttack, $01
00084FB4 E10E                       	smpsAlterNote       $0E
00084FB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FBA E108                       	smpsAlterNote       $08
00084FBC E701                       	dc.b	smpsNoAttack, $01
00084FBE E104                       	smpsAlterNote       $04
00084FC0 E701                       	dc.b	smpsNoAttack, $01
00084FC2 E105                       	smpsAlterNote       $05
00084FC4 E701                       	dc.b	smpsNoAttack, $01
00084FC6 E10B                       	smpsAlterNote       $0B
00084FC8 E701                       	dc.b	smpsNoAttack, $01
00084FCA E10F                       	smpsAlterNote       $0F
00084FCC E701                       	dc.b	smpsNoAttack, $01
00084FCE E10B                       	smpsAlterNote       $0B
00084FD0 E701                       	dc.b	smpsNoAttack, $01
00084FD2 E108                       	smpsAlterNote       $08
00084FD4 E701                       	dc.b	smpsNoAttack, $01
00084FD6 E104                       	smpsAlterNote       $04
00084FD8 E701                       	dc.b	smpsNoAttack, $01
00084FDA E108                       	smpsAlterNote       $08
00084FDC E701                       	dc.b	smpsNoAttack, $01
00084FDE E10E                       	smpsAlterNote       $0E
00084FE0 E701                       	dc.b	smpsNoAttack, $01
00084FE2 E10F                       	smpsAlterNote       $0F
00084FE4 E701                       	dc.b	smpsNoAttack, $01
00084FE6 E10B                       	smpsAlterNote       $0B
00084FE8 E701                       	dc.b	smpsNoAttack, $01
00084FEA E105                       	smpsAlterNote       $05
00084FEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FF0 E108                       	smpsAlterNote       $08
00084FF2 E701                       	dc.b	smpsNoAttack, $01
00084FF4 E10E                       	smpsAlterNote       $0E
00084FF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00084FFA E108                       	smpsAlterNote       $08
00084FFC E701                       	dc.b	smpsNoAttack, $01
00084FFE E105                       	smpsAlterNote       $05
00085000 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085004 E10B                       	smpsAlterNote       $0B
00085006 E701                       	dc.b	smpsNoAttack, $01
00085008 E10F                       	smpsAlterNote       $0F
0008500A E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008500E E107                       	smpsAlterNote       $07
00085010 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085014 E108                       	smpsAlterNote       $08
00085016 C103                       	dc.b	nE5, $03
00085018 E109                       	smpsAlterNote       $09
0008501A C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00085022 E10B                       	smpsAlterNote       $0B
00085024 C606 8001                  	dc.b	nA5, $06, nRst, $01
00085028 E107                       	smpsAlterNote       $07
0008502A BF03                       	dc.b	nD5, $03
0008502C E106                       	smpsAlterNote       $06
0008502E C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00085032 E107                       	smpsAlterNote       $07
00085034 CB03                       	dc.b	nD6, $03
00085036 E10C                       	smpsAlterNote       $0C
00085038 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008503C E10B                       	smpsAlterNote       $0B
0008503E C604 8001                  	dc.b	nA5, $04, nRst, $01
00085042 E109                       	smpsAlterNote       $09
00085044 C404                       	dc.b	nG5, $04
00085046 E10B                       	smpsAlterNote       $0B
00085048 C60D                       	dc.b	nA5, $0D
0008504A E108                       	smpsAlterNote       $08
0008504C E701                       	dc.b	smpsNoAttack, $01
0008504E E104                       	smpsAlterNote       $04
00085050 E701                       	dc.b	smpsNoAttack, $01
00085052 E108                       	smpsAlterNote       $08
00085054 E701                       	dc.b	smpsNoAttack, $01
00085056 E10B                       	smpsAlterNote       $0B
00085058 E701                       	dc.b	smpsNoAttack, $01
0008505A E10F                       	smpsAlterNote       $0F
0008505C E701                       	dc.b	smpsNoAttack, $01
0008505E E10B                       	smpsAlterNote       $0B
00085060 E701                       	dc.b	smpsNoAttack, $01
00085062 E105                       	smpsAlterNote       $05
00085064 E701                       	dc.b	smpsNoAttack, $01
00085066 E104                       	smpsAlterNote       $04
00085068 E701                       	dc.b	smpsNoAttack, $01
0008506A E108                       	smpsAlterNote       $08
0008506C E701                       	dc.b	smpsNoAttack, $01
0008506E E10E                       	smpsAlterNote       $0E
00085070 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085074 E10B                       	smpsAlterNote       $0B
00085076 E701                       	dc.b	smpsNoAttack, $01
00085078 E105                       	smpsAlterNote       $05
0008507A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008507E E10B                       	smpsAlterNote       $0B
00085080 E701                       	dc.b	smpsNoAttack, $01
00085082 E10E                       	smpsAlterNote       $0E
00085084 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085088 E108                       	smpsAlterNote       $08
0008508A E701                       	dc.b	smpsNoAttack, $01
0008508C E104                       	smpsAlterNote       $04
0008508E E701                       	dc.b	smpsNoAttack, $01
00085090 E105                       	smpsAlterNote       $05
00085092 E701                       	dc.b	smpsNoAttack, $01
00085094 E10B                       	smpsAlterNote       $0B
00085096 E701                       	dc.b	smpsNoAttack, $01
00085098 E10F                       	smpsAlterNote       $0F
0008509A E701                       	dc.b	smpsNoAttack, $01
0008509C E10B                       	smpsAlterNote       $0B
0008509E E701                       	dc.b	smpsNoAttack, $01
000850A0 E108                       	smpsAlterNote       $08
000850A2 E701                       	dc.b	smpsNoAttack, $01
000850A4 E105                       	smpsAlterNote       $05
000850A6 8001                       	dc.b	nRst, $01
000850A8 E109                       	smpsAlterNote       $09
000850AA C401                       	dc.b	nG5, $01
000850AC E10B                       	smpsAlterNote       $0B
000850AE E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000850B7 E109                       	smpsAlterNote       $09
000850B9 C404 8001                  	dc.b	nG5, $04, nRst, $01
000850BD E10B                       	smpsAlterNote       $0B
000850BF C604 8001                  	dc.b	nA5, $04, nRst, $01
000850C3 E107                       	smpsAlterNote       $07
000850C5 BF0D                       	dc.b	nD5, $0D
000850C7 E101                       	smpsAlterNote       $01
000850C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850CD E104                       	smpsAlterNote       $04
000850CF E701                       	dc.b	smpsNoAttack, $01
000850D1 E10A                       	smpsAlterNote       $0A
000850D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850D7 E104                       	smpsAlterNote       $04
000850D9 E701                       	dc.b	smpsNoAttack, $01
000850DB E101                       	smpsAlterNote       $01
000850DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000850E1 E107                       	smpsAlterNote       $07
000850E3 E701                       	dc.b	smpsNoAttack, $01
000850E5 E10B                       	smpsAlterNote       $0B
000850E7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000850EB E108                       	smpsAlterNote       $08
000850ED C101                       	dc.b	nE5, $01
000850EF E109                       	smpsAlterNote       $09
000850F1 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000850F6 E10B                       	smpsAlterNote       $0B
000850F8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00085100 E108                       	smpsAlterNote       $08
00085102 CD06                       	dc.b	nE6, $06
00085104 E109                       	smpsAlterNote       $09
00085106 CE07                       	dc.b	nF6, $07
00085108 E108                       	smpsAlterNote       $08
0008510A CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008510E E106                       	smpsAlterNote       $06
00085110 C903                       	dc.b	nC6, $03
00085112 E109                       	smpsAlterNote       $09
00085114 C403 8001                  	dc.b	nG5, $03, nRst, $01
00085118 E10C                       	smpsAlterNote       $0C
0008511A C70D                       	dc.b	nBb5, $0D
0008511C E106                       	smpsAlterNote       $06
0008511E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085122 E109                       	smpsAlterNote       $09
00085124 E701                       	dc.b	smpsNoAttack, $01
00085126 E10F                       	smpsAlterNote       $0F
00085128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008512C E109                       	smpsAlterNote       $09
0008512E E701                       	dc.b	smpsNoAttack, $01
00085130 E106                       	smpsAlterNote       $06
00085132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085136 E10C                       	smpsAlterNote       $0C
00085138 E701                       	dc.b	smpsNoAttack, $01
0008513A E110                       	smpsAlterNote       $10
0008513C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085140 E10B                       	smpsAlterNote       $0B
00085142 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00085146 E105                       	smpsAlterNote       $05
00085148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008514C E10B                       	smpsAlterNote       $0B
0008514E E701                       	dc.b	smpsNoAttack, $01
00085150 E10E                       	smpsAlterNote       $0E
00085152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085156 E108                       	smpsAlterNote       $08
00085158 E701                       	dc.b	smpsNoAttack, $01
0008515A E104                       	smpsAlterNote       $04
0008515C E701                       	dc.b	smpsNoAttack, $01
0008515E E105                       	smpsAlterNote       $05
00085160 E701                       	dc.b	smpsNoAttack, $01
00085162 E10B                       	smpsAlterNote       $0B
00085164 E701                       	dc.b	smpsNoAttack, $01
00085166 E10F                       	smpsAlterNote       $0F
00085168 E701                       	dc.b	smpsNoAttack, $01
0008516A E10B                       	smpsAlterNote       $0B
0008516C E701                       	dc.b	smpsNoAttack, $01
0008516E E108                       	smpsAlterNote       $08
00085170 E701                       	dc.b	smpsNoAttack, $01
00085172 E104                       	smpsAlterNote       $04
00085174 E701                       	dc.b	smpsNoAttack, $01
00085176 E108                       	smpsAlterNote       $08
00085178 E701                       	dc.b	smpsNoAttack, $01
0008517A E10E                       	smpsAlterNote       $0E
0008517C E701                       	dc.b	smpsNoAttack, $01
0008517E E10F                       	smpsAlterNote       $0F
00085180 E701                       	dc.b	smpsNoAttack, $01
00085182 E10B                       	smpsAlterNote       $0B
00085184 E701                       	dc.b	smpsNoAttack, $01
00085186 E105                       	smpsAlterNote       $05
00085188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008518C E108                       	smpsAlterNote       $08
0008518E E701                       	dc.b	smpsNoAttack, $01
00085190 E10E                       	smpsAlterNote       $0E
00085192 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085196 E108                       	smpsAlterNote       $08
00085198 E701                       	dc.b	smpsNoAttack, $01
0008519A E105                       	smpsAlterNote       $05
0008519C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851A0 E10B                       	smpsAlterNote       $0B
000851A2 E701                       	dc.b	smpsNoAttack, $01
000851A4 E10F                       	smpsAlterNote       $0F
000851A6 E701                       	dc.b	smpsNoAttack, $01
000851A8 E10E                       	smpsAlterNote       $0E
000851AA E701                       	dc.b	smpsNoAttack, $01
000851AC E108                       	smpsAlterNote       $08
000851AE E701                       	dc.b	smpsNoAttack, $01
000851B0 E104                       	smpsAlterNote       $04
000851B2 E701                       	dc.b	smpsNoAttack, $01
000851B4 E108                       	smpsAlterNote       $08
000851B6 E701                       	dc.b	smpsNoAttack, $01
000851B8 E10E                       	smpsAlterNote       $0E
000851BA E701                       	dc.b	smpsNoAttack, $01
000851BC E10F                       	smpsAlterNote       $0F
000851BE E701                       	dc.b	smpsNoAttack, $01
000851C0 E10B                       	smpsAlterNote       $0B
000851C2 E701                       	dc.b	smpsNoAttack, $01
000851C4 E105                       	smpsAlterNote       $05
000851C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851CA E108                       	smpsAlterNote       $08
000851CC E701                       	dc.b	smpsNoAttack, $01
000851CE E10E                       	smpsAlterNote       $0E
000851D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000851D4 E108                       	smpsAlterNote       $08
000851D6 E701                       	dc.b	smpsNoAttack, $01
000851D8 E105                       	smpsAlterNote       $05
000851DA E701                       	dc.b	smpsNoAttack, $01
000851DC E10B                       	smpsAlterNote       $0B
000851DE C60D                       	dc.b	nA5, $0D
000851E0 E108                       	smpsAlterNote       $08
000851E2 E701                       	dc.b	smpsNoAttack, $01
000851E4 E104                       	smpsAlterNote       $04
000851E6 E701                       	dc.b	smpsNoAttack, $01
000851E8 E105                       	smpsAlterNote       $05
000851EA E701                       	dc.b	smpsNoAttack, $01
000851EC E10B                       	smpsAlterNote       $0B
000851EE E701                       	dc.b	smpsNoAttack, $01
000851F0 E10F                       	smpsAlterNote       $0F
000851F2 E701                       	dc.b	smpsNoAttack, $01
000851F4 E10B                       	smpsAlterNote       $0B
000851F6 E701                       	dc.b	smpsNoAttack, $01
000851F8 E108                       	smpsAlterNote       $08
000851FA E701                       	dc.b	smpsNoAttack, $01
000851FC E104                       	smpsAlterNote       $04
000851FE E701                       	dc.b	smpsNoAttack, $01
00085200 E108                       	smpsAlterNote       $08
00085202 E701                       	dc.b	smpsNoAttack, $01
00085204 E10E                       	smpsAlterNote       $0E
00085206 E701                       	dc.b	smpsNoAttack, $01
00085208 E10F                       	smpsAlterNote       $0F
0008520A E701                       	dc.b	smpsNoAttack, $01
0008520E E109                       	smpsAlterNote       $09
00085210 E6FF                       	smpsAlterVol        $FF
00085212 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008521C E108                       	smpsAlterNote       $08
0008521E C103 800E                  	dc.b	nE5, $03, nRst, $0E
00085224 E107                       	smpsAlterNote       $07
00085226 E601                       	smpsAlterVol        $01
00085228 BF03                       	dc.b	nD5, $03
0008522A E108                       	smpsAlterNote       $08
0008522C C103 8001                  	dc.b	nE5, $03, nRst, $01
00085230 E109                       	smpsAlterNote       $09
00085232 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00085238 E10B                       	smpsAlterNote       $0B
0008523A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008523E E107                       	smpsAlterNote       $07
00085240 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085244 E106                       	smpsAlterNote       $06
00085246 C90D                       	dc.b	nC6, $0D
00085248 E103                       	smpsAlterNote       $03
0008524A E701                       	dc.b	smpsNoAttack, $01
0008524C E1FF                       	smpsAlterNote       $FF
0008524E E701                       	dc.b	smpsNoAttack, $01
00085250 E103                       	smpsAlterNote       $03
00085252 E701                       	dc.b	smpsNoAttack, $01
00085254 E109                       	smpsAlterNote       $09
00085256 E701                       	dc.b	smpsNoAttack, $01
00085258 E10A                       	smpsAlterNote       $0A
0008525A E701                       	dc.b	smpsNoAttack, $01
0008525C E106                       	smpsAlterNote       $06
0008525E E701                       	dc.b	smpsNoAttack, $01
00085260 E100                       	smpsAlterNote       $00
00085262 E701                       	dc.b	smpsNoAttack, $01
00085264 E10C                       	smpsAlterNote       $0C
00085266 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008526A E10B                       	smpsAlterNote       $0B
0008526C C603                       	dc.b	nA5, $03
0008526E E109                       	smpsAlterNote       $09
00085270 C403 8001                  	dc.b	nG5, $03, nRst, $01
00085274 E10B                       	smpsAlterNote       $0B
00085276 C60D                       	dc.b	nA5, $0D
00085278 E105                       	smpsAlterNote       $05
0008527A E701                       	dc.b	smpsNoAttack, $01
0008527C E104                       	smpsAlterNote       $04
0008527E E701                       	dc.b	smpsNoAttack, $01
00085280 E108                       	smpsAlterNote       $08
00085282 E701                       	dc.b	smpsNoAttack, $01
00085284 E10E                       	smpsAlterNote       $0E
00085286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008528A E10B                       	smpsAlterNote       $0B
0008528C E701                       	dc.b	smpsNoAttack, $01
0008528E E105                       	smpsAlterNote       $05
00085290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085294 E10B                       	smpsAlterNote       $0B
00085296 E701                       	dc.b	smpsNoAttack, $01
00085298 E10E                       	smpsAlterNote       $0E
0008529A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008529E E108                       	smpsAlterNote       $08
000852A0 E701                       	dc.b	smpsNoAttack, $01
000852A2 E104                       	smpsAlterNote       $04
000852A4 E701                       	dc.b	smpsNoAttack, $01
000852A6 E105                       	smpsAlterNote       $05
000852A8 E701                       	dc.b	smpsNoAttack, $01
000852AA E10B                       	smpsAlterNote       $0B
000852AC E701                       	dc.b	smpsNoAttack, $01
000852AE E10F                       	smpsAlterNote       $0F
000852B0 E701                       	dc.b	smpsNoAttack, $01
000852B2 E10B                       	smpsAlterNote       $0B
000852B4 E701                       	dc.b	smpsNoAttack, $01
000852B6 E108                       	smpsAlterNote       $08
000852B8 E701                       	dc.b	smpsNoAttack, $01
000852BA E104                       	smpsAlterNote       $04
000852BC E701                       	dc.b	smpsNoAttack, $01
000852BE E108                       	smpsAlterNote       $08
000852C0 E701                       	dc.b	smpsNoAttack, $01
000852C2 E10E                       	smpsAlterNote       $0E
000852C4 E701                       	dc.b	smpsNoAttack, $01
000852C6 E10F                       	smpsAlterNote       $0F
000852C8 E701                       	dc.b	smpsNoAttack, $01
000852CA E10B                       	smpsAlterNote       $0B
000852CC E701                       	dc.b	smpsNoAttack, $01
000852CE E105                       	smpsAlterNote       $05
000852D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000852D4 E108                       	smpsAlterNote       $08
000852D6 E701                       	dc.b	smpsNoAttack, $01
000852D8 E10E                       	smpsAlterNote       $0E
000852DA E701                       	dc.b	smpsNoAttack, $01
000852DC E10F                       	smpsAlterNote       $0F
000852DE 800F                       	dc.b	nRst, $0F
000852E0 E107                       	smpsAlterNote       $07
000852E2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000852E6 E108                       	smpsAlterNote       $08
000852E8 C103                       	dc.b	nE5, $03
000852EA E109                       	smpsAlterNote       $09
000852EC C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000852F2 E10B                       	smpsAlterNote       $0B
000852F4 C606 8001                  	dc.b	nA5, $06, nRst, $01
000852F8 E107                       	smpsAlterNote       $07
000852FA BF03                       	dc.b	nD5, $03
000852FC E106                       	smpsAlterNote       $06
000852FE C90E                       	dc.b	nC6, $0E
00085300 E107                       	smpsAlterNote       $07
00085302 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00085306 E10C                       	smpsAlterNote       $0C
00085308 C704                       	dc.b	nBb5, $04
0008530A E10B                       	smpsAlterNote       $0B
0008530C C604 8001                  	dc.b	nA5, $04, nRst, $01
00085310 E109                       	smpsAlterNote       $09
00085312 C404                       	dc.b	nG5, $04
00085314 E10B                       	smpsAlterNote       $0B
00085316 C60D                       	dc.b	nA5, $0D
00085318 E108                       	smpsAlterNote       $08
0008531A E701                       	dc.b	smpsNoAttack, $01
0008531C E105                       	smpsAlterNote       $05
0008531E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085322 E10B                       	smpsAlterNote       $0B
00085324 E701                       	dc.b	smpsNoAttack, $01
00085326 E10F                       	smpsAlterNote       $0F
00085328 E701                       	dc.b	smpsNoAttack, $01
0008532A E10E                       	smpsAlterNote       $0E
0008532C E701                       	dc.b	smpsNoAttack, $01
0008532E E108                       	smpsAlterNote       $08
00085330 E701                       	dc.b	smpsNoAttack, $01
00085332 E104                       	smpsAlterNote       $04
00085334 E701                       	dc.b	smpsNoAttack, $01
00085336 E108                       	smpsAlterNote       $08
00085338 E701                       	dc.b	smpsNoAttack, $01
0008533A E10B                       	smpsAlterNote       $0B
0008533C E701                       	dc.b	smpsNoAttack, $01
0008533E E10F                       	smpsAlterNote       $0F
00085340 E701                       	dc.b	smpsNoAttack, $01
00085342 E10B                       	smpsAlterNote       $0B
00085344 E701                       	dc.b	smpsNoAttack, $01
00085346 E105                       	smpsAlterNote       $05
00085348 E701                       	dc.b	smpsNoAttack, $01
0008534A E104                       	smpsAlterNote       $04
0008534C E701                       	dc.b	smpsNoAttack, $01
0008534E E108                       	smpsAlterNote       $08
00085350 E701                       	dc.b	smpsNoAttack, $01
00085352 E10E                       	smpsAlterNote       $0E
00085354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085358 E10B                       	smpsAlterNote       $0B
0008535A E701                       	dc.b	smpsNoAttack, $01
0008535C E105                       	smpsAlterNote       $05
0008535E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085362 E10B                       	smpsAlterNote       $0B
00085364 E701                       	dc.b	smpsNoAttack, $01
00085366 E10E                       	smpsAlterNote       $0E
00085368 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008536C E108                       	smpsAlterNote       $08
0008536E E701                       	dc.b	smpsNoAttack, $01
00085370 E105                       	smpsAlterNote       $05
00085372 8001                       	dc.b	nRst, $01
00085374 E109                       	smpsAlterNote       $09
00085376 C402                       	dc.b	nG5, $02
00085378 E10B                       	smpsAlterNote       $0B
0008537A E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00085383 E109                       	smpsAlterNote       $09
00085385 C404                       	dc.b	nG5, $04
00085387 E10B                       	smpsAlterNote       $0B
00085389 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008538D E107                       	smpsAlterNote       $07
0008538F BF0D                       	dc.b	nD5, $0D
00085391 E101                       	smpsAlterNote       $01
00085393 E701                       	dc.b	smpsNoAttack, $01
00085395 E100                       	smpsAlterNote       $00
00085397 E701                       	dc.b	smpsNoAttack, $01
00085399 E104                       	smpsAlterNote       $04
0008539B E701                       	dc.b	smpsNoAttack, $01
0008539D E10A                       	smpsAlterNote       $0A
0008539F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853A3 E107                       	smpsAlterNote       $07
000853A5 E701                       	dc.b	smpsNoAttack, $01
000853A7 E101                       	smpsAlterNote       $01
000853A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000853AD E107                       	smpsAlterNote       $07
000853AF E701                       	dc.b	smpsNoAttack, $01
000853B1 E10A                       	smpsAlterNote       $0A
000853B3 E701                       	dc.b	smpsNoAttack, $01
000853B5 E10B                       	smpsAlterNote       $0B
000853B7 8001                       	dc.b	nRst, $01
000853B9 E108                       	smpsAlterNote       $08
000853BB C101                       	dc.b	nE5, $01
000853BD E109                       	smpsAlterNote       $09
000853BF E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000853C4 E10B                       	smpsAlterNote       $0B
000853C6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000853CE E108                       	smpsAlterNote       $08
000853D0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000853D4 E109                       	smpsAlterNote       $09
000853D6 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000853DA E108                       	smpsAlterNote       $08
000853DC CD02 8001                  	dc.b	nE6, $02, nRst, $01
000853E0 E106                       	smpsAlterNote       $06
000853E2 C903                       	dc.b	nC6, $03
000853E4 E109                       	smpsAlterNote       $09
000853E6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000853EA E10C                       	smpsAlterNote       $0C
000853EC C70D                       	dc.b	nBb5, $0D
000853EE E109                       	smpsAlterNote       $09
000853F0 E701                       	dc.b	smpsNoAttack, $01
000853F2 E105                       	smpsAlterNote       $05
000853F4 E701                       	dc.b	smpsNoAttack, $01
000853F6 E109                       	smpsAlterNote       $09
000853F8 E701                       	dc.b	smpsNoAttack, $01
000853FA E10F                       	smpsAlterNote       $0F
000853FC E701                       	dc.b	smpsNoAttack, $01
000853FE E110                       	smpsAlterNote       $10
00085400 E701                       	dc.b	smpsNoAttack, $01
00085402 E10C                       	smpsAlterNote       $0C
00085404 E701                       	dc.b	smpsNoAttack, $01
00085406 E106                       	smpsAlterNote       $06
00085408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008540C E109                       	smpsAlterNote       $09
0008540E E701                       	dc.b	smpsNoAttack, $01
00085410 E10F                       	smpsAlterNote       $0F
00085412 E701                       	dc.b	smpsNoAttack, $01
00085414 E110                       	smpsAlterNote       $10
00085416 8001                       	dc.b	nRst, $01
00085418 E10B                       	smpsAlterNote       $0B
0008541A C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00085420 E105                       	smpsAlterNote       $05
00085422 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085426 E108                       	smpsAlterNote       $08
00085428 E701                       	dc.b	smpsNoAttack, $01
0008542A E10E                       	smpsAlterNote       $0E
0008542C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085430 E108                       	smpsAlterNote       $08
00085432 E701                       	dc.b	smpsNoAttack, $01
00085434 E105                       	smpsAlterNote       $05
00085436 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008543A E10B                       	smpsAlterNote       $0B
0008543C E701                       	dc.b	smpsNoAttack, $01
0008543E E10F                       	smpsAlterNote       $0F
00085440 E701                       	dc.b	smpsNoAttack, $01
00085442 E10E                       	smpsAlterNote       $0E
00085444 E701                       	dc.b	smpsNoAttack, $01
00085446 E108                       	smpsAlterNote       $08
00085448 E701                       	dc.b	smpsNoAttack, $01
0008544A E104                       	smpsAlterNote       $04
0008544C E701                       	dc.b	smpsNoAttack, $01
0008544E E108                       	smpsAlterNote       $08
00085450 E701                       	dc.b	smpsNoAttack, $01
00085452 E10B                       	smpsAlterNote       $0B
00085454 E701                       	dc.b	smpsNoAttack, $01
00085456 E10F                       	smpsAlterNote       $0F
00085458 E701                       	dc.b	smpsNoAttack, $01
0008545A E10B                       	smpsAlterNote       $0B
0008545C E701                       	dc.b	smpsNoAttack, $01
0008545E E105                       	smpsAlterNote       $05
00085460 E701                       	dc.b	smpsNoAttack, $01
00085462 E104                       	smpsAlterNote       $04
00085464 E701                       	dc.b	smpsNoAttack, $01
00085466 E108                       	smpsAlterNote       $08
00085468 E701                       	dc.b	smpsNoAttack, $01
0008546A E10E                       	smpsAlterNote       $0E
0008546C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085470 E10B                       	smpsAlterNote       $0B
00085472 E701                       	dc.b	smpsNoAttack, $01
00085474 E105                       	smpsAlterNote       $05
00085476 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008547A E10B                       	smpsAlterNote       $0B
0008547C E701                       	dc.b	smpsNoAttack, $01
0008547E E10E                       	smpsAlterNote       $0E
00085480 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085484 E108                       	smpsAlterNote       $08
00085486 E701                       	dc.b	smpsNoAttack, $01
00085488 E104                       	smpsAlterNote       $04
0008548A E701                       	dc.b	smpsNoAttack, $01
0008548C E105                       	smpsAlterNote       $05
0008548E E701                       	dc.b	smpsNoAttack, $01
00085490 E10B                       	smpsAlterNote       $0B
00085492 E701                       	dc.b	smpsNoAttack, $01
00085494 E10F                       	smpsAlterNote       $0F
00085496 E701                       	dc.b	smpsNoAttack, $01
00085498 E10B                       	smpsAlterNote       $0B
0008549A E701                       	dc.b	smpsNoAttack, $01
0008549C E108                       	smpsAlterNote       $08
0008549E E701                       	dc.b	smpsNoAttack, $01
000854A0 E104                       	smpsAlterNote       $04
000854A2 E701                       	dc.b	smpsNoAttack, $01
000854A4 E108                       	smpsAlterNote       $08
000854A6 E701                       	dc.b	smpsNoAttack, $01
000854A8 E10E                       	smpsAlterNote       $0E
000854AA E701                       	dc.b	smpsNoAttack, $01
000854AC E10F                       	smpsAlterNote       $0F
000854AE E701                       	dc.b	smpsNoAttack, $01
000854B0 E10B                       	smpsAlterNote       $0B
000854B2 E701                       	dc.b	smpsNoAttack, $01
000854B4 E105                       	smpsAlterNote       $05
000854B6 E701                       	dc.b	smpsNoAttack, $01
000854B8 E10B                       	smpsAlterNote       $0B
000854BA C60E                       	dc.b	nA5, $0E
000854BC E105                       	smpsAlterNote       $05
000854BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854C2 E10B                       	smpsAlterNote       $0B
000854C4 E701                       	dc.b	smpsNoAttack, $01
000854C6 E10E                       	smpsAlterNote       $0E
000854C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000854CC E108                       	smpsAlterNote       $08
000854CE E701                       	dc.b	smpsNoAttack, $01
000854D0 E104                       	smpsAlterNote       $04
000854D2 E701                       	dc.b	smpsNoAttack, $01
000854D4 E105                       	smpsAlterNote       $05
000854D6 E701                       	dc.b	smpsNoAttack, $01
000854D8 E10B                       	smpsAlterNote       $0B
000854DA E701                       	dc.b	smpsNoAttack, $01
000854DC E10F                       	smpsAlterNote       $0F
000854DE E701                       	dc.b	smpsNoAttack, $01
000854E0 E10B                       	smpsAlterNote       $0B
000854E2 E701                       	dc.b	smpsNoAttack, $01
000854E4 E108                       	smpsAlterNote       $08
000854E6 E701                       	dc.b	smpsNoAttack, $01
000854E8 E104                       	smpsAlterNote       $04
000854EA E701                       	dc.b	smpsNoAttack, $01
000854EC E108                       	smpsAlterNote       $08
000854EE E701                       	dc.b	smpsNoAttack, $01
000854F0 E10E                       	smpsAlterNote       $0E
000854F2 E701                       	dc.b	smpsNoAttack, $01
000854F4 E10F                       	smpsAlterNote       $0F
000854F6 E701                       	dc.b	smpsNoAttack, $01
000854F8 E10B                       	smpsAlterNote       $0B
000854FA E701                       	dc.b	smpsNoAttack, $01
000854FC E105                       	smpsAlterNote       $05
000854FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085502 E108                       	smpsAlterNote       $08
00085504 E701                       	dc.b	smpsNoAttack, $01
00085506 E10E                       	smpsAlterNote       $0E
00085508 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008550C E108                       	smpsAlterNote       $08
0008550E E701                       	dc.b	smpsNoAttack, $01
00085510 E105                       	smpsAlterNote       $05
00085512 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085516 E10B                       	smpsAlterNote       $0B
00085518 E701                       	dc.b	smpsNoAttack, $01
0008551A E10F                       	smpsAlterNote       $0F
0008551C E701                       	dc.b	smpsNoAttack, $01
0008551E E10E                       	smpsAlterNote       $0E
00085520 E701                       	dc.b	smpsNoAttack, $01
00085522 E108                       	smpsAlterNote       $08
00085524 E701                       	dc.b	smpsNoAttack, $01
00085526 E104                       	smpsAlterNote       $04
00085528 E701                       	dc.b	smpsNoAttack, $01
0008552A E108                       	smpsAlterNote       $08
0008552C E701                       	dc.b	smpsNoAttack, $01
0008552E E10E                       	smpsAlterNote       $0E
00085530 E701                       	dc.b	smpsNoAttack, $01
00085532 E10F                       	smpsAlterNote       $0F
00085534 E701                       	dc.b	smpsNoAttack, $01
00085536 E10B                       	smpsAlterNote       $0B
00085538 E701                       	dc.b	smpsNoAttack, $01
0008553A E105                       	smpsAlterNote       $05
0008553C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085540 E108                       	smpsAlterNote       $08
00085542 E701                       	dc.b	smpsNoAttack, $01
00085544 E10E                       	smpsAlterNote       $0E
00085546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008554A E108                       	smpsAlterNote       $08
0008554C E701                       	dc.b	smpsNoAttack, $01
0008554E E105                       	smpsAlterNote       $05
00085550 E701                       	dc.b	smpsNoAttack, $01
00085554 E10B                       	smpsAlterNote       $0B
00085556 E6FD                       	smpsAlterVol        $FD
00085558 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008555C E109                       	smpsAlterNote       $09
0008555E C404                       	dc.b	nG5, $04
00085560 E10B                       	smpsAlterNote       $0B
00085562 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085566 E107                       	smpsAlterNote       $07
00085568 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008556E E10B                       	smpsAlterNote       $0B
00085570 C604                       	dc.b	nA5, $04
00085572 E109                       	smpsAlterNote       $09
00085574 C404 8001                  	dc.b	nG5, $04, nRst, $01
00085578 E10B                       	smpsAlterNote       $0B
0008557A C604                       	dc.b	nA5, $04
0008557C E108                       	smpsAlterNote       $08
0008557E C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00085586 E106                       	smpsAlterNote       $06
00085588 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008558C E10C                       	smpsAlterNote       $0C
0008558E C704                       	dc.b	nBb5, $04
00085590 E10B                       	smpsAlterNote       $0B
00085592 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085596 E109                       	smpsAlterNote       $09
00085598 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000855A2 E10B                       	smpsAlterNote       $0B
000855A4 C60D                       	dc.b	nA5, $0D
000855A6 E108                       	smpsAlterNote       $08
000855A8 E701                       	dc.b	smpsNoAttack, $01
000855AA E104                       	smpsAlterNote       $04
000855AC E701                       	dc.b	smpsNoAttack, $01
000855AE E108                       	smpsAlterNote       $08
000855B0 E701                       	dc.b	smpsNoAttack, $01
000855B2 E10E                       	smpsAlterNote       $0E
000855B4 E701                       	dc.b	smpsNoAttack, $01
000855B6 E10F                       	smpsAlterNote       $0F
000855B8 E701                       	dc.b	smpsNoAttack, $01
000855BA E10B                       	smpsAlterNote       $0B
000855BC E701                       	dc.b	smpsNoAttack, $01
000855BE E105                       	smpsAlterNote       $05
000855C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855C4 E108                       	smpsAlterNote       $08
000855C6 E701                       	dc.b	smpsNoAttack, $01
000855C8 E10E                       	smpsAlterNote       $0E
000855CA E701                       	dc.b	smpsNoAttack, $01
000855CC E10F                       	smpsAlterNote       $0F
000855CE 8001                       	dc.b	nRst, $01
000855D0 E109                       	smpsAlterNote       $09
000855D2 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000855D8 E108                       	smpsAlterNote       $08
000855DA C10D                       	dc.b	nE5, $0D
000855DC E102                       	smpsAlterNote       $02
000855DE E701                       	dc.b	smpsNoAttack, $01
000855E0 E101                       	smpsAlterNote       $01
000855E2 E701                       	dc.b	smpsNoAttack, $01
000855E4 E105                       	smpsAlterNote       $05
000855E6 E701                       	dc.b	smpsNoAttack, $01
000855E8 E10B                       	smpsAlterNote       $0B
000855EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855EE E108                       	smpsAlterNote       $08
000855F0 E701                       	dc.b	smpsNoAttack, $01
000855F2 E102                       	smpsAlterNote       $02
000855F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000855F8 E108                       	smpsAlterNote       $08
000855FA E701                       	dc.b	smpsNoAttack, $01
000855FC E10B                       	smpsAlterNote       $0B
000855FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085602 E105                       	smpsAlterNote       $05
00085604 E701                       	dc.b	smpsNoAttack, $01
00085606 E101                       	smpsAlterNote       $01
00085608 E701                       	dc.b	smpsNoAttack, $01
0008560A E102                       	smpsAlterNote       $02
0008560C E701                       	dc.b	smpsNoAttack, $01
0008560E E108                       	smpsAlterNote       $08
00085610 E701                       	dc.b	smpsNoAttack, $01
00085612 E10C                       	smpsAlterNote       $0C
00085614 E701                       	dc.b	smpsNoAttack, $01
00085616 E108                       	smpsAlterNote       $08
00085618 E701                       	dc.b	smpsNoAttack, $01
0008561A E105                       	smpsAlterNote       $05
0008561C E701                       	dc.b	smpsNoAttack, $01
0008561E E101                       	smpsAlterNote       $01
00085620 E701                       	dc.b	smpsNoAttack, $01
00085622 E105                       	smpsAlterNote       $05
00085624 E701                       	dc.b	smpsNoAttack, $01
00085626 E10B                       	smpsAlterNote       $0B
00085628 E701                       	dc.b	smpsNoAttack, $01
0008562A E10C                       	smpsAlterNote       $0C
0008562C E701                       	dc.b	smpsNoAttack, $01
0008562E E108                       	smpsAlterNote       $08
00085630 E701                       	dc.b	smpsNoAttack, $01
00085632 E102                       	smpsAlterNote       $02
00085634 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085638 E105                       	smpsAlterNote       $05
0008563A E701                       	dc.b	smpsNoAttack, $01
0008563C E10B                       	smpsAlterNote       $0B
0008563E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085642 E105                       	smpsAlterNote       $05
00085644 E701                       	dc.b	smpsNoAttack, $01
00085646 E102                       	smpsAlterNote       $02
00085648 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008564C E108                       	smpsAlterNote       $08
0008564E E701                       	dc.b	smpsNoAttack, $01
00085650 E10C                       	smpsAlterNote       $0C
00085652 E701                       	dc.b	smpsNoAttack, $01
00085654 E10B                       	smpsAlterNote       $0B
00085656 E701                       	dc.b	smpsNoAttack, $01
00085658 E105                       	smpsAlterNote       $05
0008565A E701                       	dc.b	smpsNoAttack, $01
0008565C E101                       	smpsAlterNote       $01
0008565E E701                       	dc.b	smpsNoAttack, $01
00085660 E105                       	smpsAlterNote       $05
00085662 E701                       	dc.b	smpsNoAttack, $01
00085664 E108                       	smpsAlterNote       $08
00085666 E701                       	dc.b	smpsNoAttack, $01
00085668 E10C                       	smpsAlterNote       $0C
0008566A E701                       	dc.b	smpsNoAttack, $01
0008566C E108                       	smpsAlterNote       $08
0008566E E701                       	dc.b	smpsNoAttack, $01
00085670 E102                       	smpsAlterNote       $02
00085672 E701                       	dc.b	smpsNoAttack, $01
00085674 E101                       	smpsAlterNote       $01
00085676 E701                       	dc.b	smpsNoAttack, $01
00085678 E105                       	smpsAlterNote       $05
0008567A E701                       	dc.b	smpsNoAttack, $01
0008567C E10B                       	smpsAlterNote       $0B
0008567E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085682 E108                       	smpsAlterNote       $08
00085684 E701                       	dc.b	smpsNoAttack, $01
00085686 E102                       	smpsAlterNote       $02
00085688 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008568C E108                       	smpsAlterNote       $08
0008568E E701                       	dc.b	smpsNoAttack, $01
00085690 E10B                       	smpsAlterNote       $0B
00085692 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085696 E105                       	smpsAlterNote       $05
00085698 E701                       	dc.b	smpsNoAttack, $01
0008569A E101                       	smpsAlterNote       $01
0008569C E701                       	dc.b	smpsNoAttack, $01
0008569E E102                       	smpsAlterNote       $02
000856A0 E701                       	dc.b	smpsNoAttack, $01
000856A2 E108                       	smpsAlterNote       $08
000856A4 E701                       	dc.b	smpsNoAttack, $01
000856A6 E10C                       	smpsAlterNote       $0C
000856A8 E701                       	dc.b	smpsNoAttack, $01
000856AA E108                       	smpsAlterNote       $08
000856AC E701                       	dc.b	smpsNoAttack, $01
000856AE E105                       	smpsAlterNote       $05
000856B0 E701                       	dc.b	smpsNoAttack, $01
000856B2 E101                       	smpsAlterNote       $01
000856B4 E701                       	dc.b	smpsNoAttack, $01
000856B6 E105                       	smpsAlterNote       $05
000856B8 E701                       	dc.b	smpsNoAttack, $01
000856BA E10B                       	smpsAlterNote       $0B
000856BC E701                       	dc.b	smpsNoAttack, $01
000856BE E10C                       	smpsAlterNote       $0C
000856C0 E701                       	dc.b	smpsNoAttack, $01
000856C2 E108                       	smpsAlterNote       $08
000856C4 E701                       	dc.b	smpsNoAttack, $01
000856C6 E102                       	smpsAlterNote       $02
000856C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856CC E105                       	smpsAlterNote       $05
000856CE E701                       	dc.b	smpsNoAttack, $01
000856D0 E10B                       	smpsAlterNote       $0B
000856D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000856D6 E105                       	smpsAlterNote       $05
000856D8 E701                       	dc.b	smpsNoAttack, $01
000856DA E101                       	smpsAlterNote       $01
000856DC E701                       	dc.b	smpsNoAttack, $01
000856DE E102                       	smpsAlterNote       $02
000856E0 E701                       	dc.b	smpsNoAttack, $01
000856E2 E108                       	smpsAlterNote       $08
000856E4 E701                       	dc.b	smpsNoAttack, $01
000856E6 E10C                       	smpsAlterNote       $0C
000856E8 E701                       	dc.b	smpsNoAttack, $01
000856EA E108                       	smpsAlterNote       $08
000856EC E701                       	dc.b	smpsNoAttack, $01
000856EE E105                       	smpsAlterNote       $05
000856F0 E701                       	dc.b	smpsNoAttack, $01
000856F2 E101                       	smpsAlterNote       $01
000856F4 E701                       	dc.b	smpsNoAttack, $01
000856F6 E105                       	smpsAlterNote       $05
000856F8 E701                       	dc.b	smpsNoAttack, $01
000856FA E10B                       	smpsAlterNote       $0B
000856FC E701                       	dc.b	smpsNoAttack, $01
000856FE E10C                       	smpsAlterNote       $0C
00085700 E701                       	dc.b	smpsNoAttack, $01
00085702 E108                       	smpsAlterNote       $08
00085704 E701                       	dc.b	smpsNoAttack, $01
00085706 E102                       	smpsAlterNote       $02
00085708 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008570C E105                       	smpsAlterNote       $05
0008570E E701                       	dc.b	smpsNoAttack, $01
00085710 E10B                       	smpsAlterNote       $0B
00085712 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085716 E105                       	smpsAlterNote       $05
00085718 E701                       	dc.b	smpsNoAttack, $01
0008571A E102                       	smpsAlterNote       $02
0008571C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085720 E108                       	smpsAlterNote       $08
00085722 E701                       	dc.b	smpsNoAttack, $01
00085724 E10C                       	smpsAlterNote       $0C
00085726 E701                       	dc.b	smpsNoAttack, $01
00085728 E10B                       	smpsAlterNote       $0B
0008572A E701                       	dc.b	smpsNoAttack, $01
0008572C E105                       	smpsAlterNote       $05
0008572E E701                       	dc.b	smpsNoAttack, $01
00085730 E101                       	smpsAlterNote       $01
00085732 E701                       	dc.b	smpsNoAttack, $01
00085734 E105                       	smpsAlterNote       $05
00085736 E701                       	dc.b	smpsNoAttack, $01
00085738 E108                       	smpsAlterNote       $08
0008573A E701                       	dc.b	smpsNoAttack, $01
0008573C E10C                       	smpsAlterNote       $0C
0008573E E701                       	dc.b	smpsNoAttack, $01
00085742 E10B                       	smpsAlterNote       $0B
00085744 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085748 E109                       	smpsAlterNote       $09
0008574A C404                       	dc.b	nG5, $04
0008574C E10B                       	smpsAlterNote       $0B
0008574E C604 8001                  	dc.b	nA5, $04, nRst, $01
00085752 E107                       	smpsAlterNote       $07
00085754 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008575A E10B                       	smpsAlterNote       $0B
0008575C C604                       	dc.b	nA5, $04
0008575E E109                       	smpsAlterNote       $09
00085760 C404 8001                  	dc.b	nG5, $04, nRst, $01
00085764 E10B                       	smpsAlterNote       $0B
00085766 C604                       	dc.b	nA5, $04
00085768 E108                       	smpsAlterNote       $08
0008576A C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00085770 E106                       	smpsAlterNote       $06
00085772 C904 8001                  	dc.b	nC6, $04, nRst, $01
00085776 E10C                       	smpsAlterNote       $0C
00085778 C704                       	dc.b	nBb5, $04
0008577A E10B                       	smpsAlterNote       $0B
0008577C C604 8001                  	dc.b	nA5, $04, nRst, $01
00085780 E109                       	smpsAlterNote       $09
00085782 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008578C E10B                       	smpsAlterNote       $0B
0008578E C60D                       	dc.b	nA5, $0D
00085790 E108                       	smpsAlterNote       $08
00085792 E701                       	dc.b	smpsNoAttack, $01
00085794 E104                       	smpsAlterNote       $04
00085796 E701                       	dc.b	smpsNoAttack, $01
00085798 E108                       	smpsAlterNote       $08
0008579A E701                       	dc.b	smpsNoAttack, $01
0008579C E10B                       	smpsAlterNote       $0B
0008579E E701                       	dc.b	smpsNoAttack, $01
000857A0 E10F                       	smpsAlterNote       $0F
000857A2 E701                       	dc.b	smpsNoAttack, $01
000857A4 E10B                       	smpsAlterNote       $0B
000857A6 E701                       	dc.b	smpsNoAttack, $01
000857A8 E105                       	smpsAlterNote       $05
000857AA E701                       	dc.b	smpsNoAttack, $01
000857AC E104                       	smpsAlterNote       $04
000857AE E701                       	dc.b	smpsNoAttack, $01
000857B0 E108                       	smpsAlterNote       $08
000857B2 E701                       	dc.b	smpsNoAttack, $01
000857B4 E10E                       	smpsAlterNote       $0E
000857B6 E701                       	dc.b	smpsNoAttack, $01
000857B8 E10F                       	smpsAlterNote       $0F
000857BA 8001                       	dc.b	nRst, $01
000857BC E109                       	smpsAlterNote       $09
000857BE C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000857C4 E108                       	smpsAlterNote       $08
000857C6 C10D                       	dc.b	nE5, $0D
000857C8 E105                       	smpsAlterNote       $05
000857CA E701                       	dc.b	smpsNoAttack, $01
000857CC E101                       	smpsAlterNote       $01
000857CE E701                       	dc.b	smpsNoAttack, $01
000857D0 E105                       	smpsAlterNote       $05
000857D2 E701                       	dc.b	smpsNoAttack, $01
000857D4 E10B                       	smpsAlterNote       $0B
000857D6 E701                       	dc.b	smpsNoAttack, $01
000857D8 E10C                       	smpsAlterNote       $0C
000857DA E701                       	dc.b	smpsNoAttack, $01
000857DC E108                       	smpsAlterNote       $08
000857DE E701                       	dc.b	smpsNoAttack, $01
000857E0 E102                       	smpsAlterNote       $02
000857E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857E6 E105                       	smpsAlterNote       $05
000857E8 E701                       	dc.b	smpsNoAttack, $01
000857EA E10B                       	smpsAlterNote       $0B
000857EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857F0 E105                       	smpsAlterNote       $05
000857F2 E701                       	dc.b	smpsNoAttack, $01
000857F4 E102                       	smpsAlterNote       $02
000857F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000857FA E108                       	smpsAlterNote       $08
000857FC E701                       	dc.b	smpsNoAttack, $01
000857FE E10C                       	smpsAlterNote       $0C
00085800 E701                       	dc.b	smpsNoAttack, $01
00085802 E10B                       	smpsAlterNote       $0B
00085804 E701                       	dc.b	smpsNoAttack, $01
00085806 E105                       	smpsAlterNote       $05
00085808 E701                       	dc.b	smpsNoAttack, $01
0008580A E101                       	smpsAlterNote       $01
0008580C E701                       	dc.b	smpsNoAttack, $01
0008580E E105                       	smpsAlterNote       $05
00085810 E701                       	dc.b	smpsNoAttack, $01
00085812 E108                       	smpsAlterNote       $08
00085814 E701                       	dc.b	smpsNoAttack, $01
00085816 E10C                       	smpsAlterNote       $0C
00085818 E701                       	dc.b	smpsNoAttack, $01
0008581A E108                       	smpsAlterNote       $08
0008581C E701                       	dc.b	smpsNoAttack, $01
0008581E E102                       	smpsAlterNote       $02
00085820 E701                       	dc.b	smpsNoAttack, $01
00085822 E101                       	smpsAlterNote       $01
00085824 E701                       	dc.b	smpsNoAttack, $01
00085826 E105                       	smpsAlterNote       $05
00085828 E701                       	dc.b	smpsNoAttack, $01
0008582A E10B                       	smpsAlterNote       $0B
0008582C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085830 E108                       	smpsAlterNote       $08
00085832 E701                       	dc.b	smpsNoAttack, $01
00085834 E102                       	smpsAlterNote       $02
00085836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008583A E108                       	smpsAlterNote       $08
0008583C E701                       	dc.b	smpsNoAttack, $01
0008583E E10B                       	smpsAlterNote       $0B
00085840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085844 E105                       	smpsAlterNote       $05
00085846 E701                       	dc.b	smpsNoAttack, $01
00085848 E101                       	smpsAlterNote       $01
0008584A E701                       	dc.b	smpsNoAttack, $01
0008584C E102                       	smpsAlterNote       $02
0008584E E701                       	dc.b	smpsNoAttack, $01
00085850 E108                       	smpsAlterNote       $08
00085852 E701                       	dc.b	smpsNoAttack, $01
00085854 E10C                       	smpsAlterNote       $0C
00085856 E701                       	dc.b	smpsNoAttack, $01
00085858 E108                       	smpsAlterNote       $08
0008585A E701                       	dc.b	smpsNoAttack, $01
0008585C E105                       	smpsAlterNote       $05
0008585E E701                       	dc.b	smpsNoAttack, $01
00085860 E101                       	smpsAlterNote       $01
00085862 E701                       	dc.b	smpsNoAttack, $01
00085864 E105                       	smpsAlterNote       $05
00085866 E701                       	dc.b	smpsNoAttack, $01
00085868 E10B                       	smpsAlterNote       $0B
0008586A E701                       	dc.b	smpsNoAttack, $01
0008586C E10C                       	smpsAlterNote       $0C
0008586E E701                       	dc.b	smpsNoAttack, $01
00085870 E108                       	smpsAlterNote       $08
00085872 E701                       	dc.b	smpsNoAttack, $01
00085874 E102                       	smpsAlterNote       $02
00085876 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008587A E108                       	smpsAlterNote       $08
0008587C E701                       	dc.b	smpsNoAttack, $01
0008587E E10B                       	smpsAlterNote       $0B
00085880 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085884 E105                       	smpsAlterNote       $05
00085886 E701                       	dc.b	smpsNoAttack, $01
00085888 E101                       	smpsAlterNote       $01
0008588A E701                       	dc.b	smpsNoAttack, $01
0008588C E102                       	smpsAlterNote       $02
0008588E E701                       	dc.b	smpsNoAttack, $01
00085890 E108                       	smpsAlterNote       $08
00085892 E701                       	dc.b	smpsNoAttack, $01
00085894 E10C                       	smpsAlterNote       $0C
00085896 E701                       	dc.b	smpsNoAttack, $01
00085898 E108                       	smpsAlterNote       $08
0008589A E701                       	dc.b	smpsNoAttack, $01
0008589C E105                       	smpsAlterNote       $05
0008589E E701                       	dc.b	smpsNoAttack, $01
000858A0 E101                       	smpsAlterNote       $01
000858A2 E701                       	dc.b	smpsNoAttack, $01
000858A4 E105                       	smpsAlterNote       $05
000858A6 E701                       	dc.b	smpsNoAttack, $01
000858A8 E10B                       	smpsAlterNote       $0B
000858AA E701                       	dc.b	smpsNoAttack, $01
000858AC E10C                       	smpsAlterNote       $0C
000858AE E701                       	dc.b	smpsNoAttack, $01
000858B0 E108                       	smpsAlterNote       $08
000858B2 E701                       	dc.b	smpsNoAttack, $01
000858B4 E102                       	smpsAlterNote       $02
000858B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858BA E105                       	smpsAlterNote       $05
000858BC E701                       	dc.b	smpsNoAttack, $01
000858BE E10B                       	smpsAlterNote       $0B
000858C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858C4 E105                       	smpsAlterNote       $05
000858C6 E701                       	dc.b	smpsNoAttack, $01
000858C8 E102                       	smpsAlterNote       $02
000858CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000858CE E108                       	smpsAlterNote       $08
000858D0 E701                       	dc.b	smpsNoAttack, $01
000858D2 E10C                       	smpsAlterNote       $0C
000858D4 E701                       	dc.b	smpsNoAttack, $01
000858D6 E10B                       	smpsAlterNote       $0B
000858D8 E701                       	dc.b	smpsNoAttack, $01
000858DA E105                       	smpsAlterNote       $05
000858DC E701                       	dc.b	smpsNoAttack, $01
000858DE E101                       	smpsAlterNote       $01
000858E0 E701                       	dc.b	smpsNoAttack, $01
000858E2 E105                       	smpsAlterNote       $05
000858E4 E701                       	dc.b	smpsNoAttack, $01
000858E6 E108                       	smpsAlterNote       $08
000858E8 E701                       	dc.b	smpsNoAttack, $01
000858EA E10C                       	smpsAlterNote       $0C
000858EC E701                       	dc.b	smpsNoAttack, $01
000858EE E108                       	smpsAlterNote       $08
000858F0 E701                       	dc.b	smpsNoAttack, $01
000858F2 E102                       	smpsAlterNote       $02
000858F4 E701                       	dc.b	smpsNoAttack, $01
000858F6 E101                       	smpsAlterNote       $01
000858F8 E701                       	dc.b	smpsNoAttack, $01
000858FA E105                       	smpsAlterNote       $05
000858FC E701                       	dc.b	smpsNoAttack, $01
000858FE E10B                       	smpsAlterNote       $0B
00085900 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085904 E108                       	smpsAlterNote       $08
00085906 E701                       	dc.b	smpsNoAttack, $01
00085908 E102                       	smpsAlterNote       $02
0008590A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008590E E108                       	smpsAlterNote       $08
00085910 E701                       	dc.b	smpsNoAttack, $01
00085912 E10B                       	smpsAlterNote       $0B
00085914 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085918 E105                       	smpsAlterNote       $05
0008591A E701                       	dc.b	smpsNoAttack, $01
0008591C E102                       	smpsAlterNote       $02
0008591E 8001                       	dc.b	nRst, $01
00085920 E107                       	smpsAlterNote       $07
00085922 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00085926 E108                       	smpsAlterNote       $08
00085928 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008592C E102                       	smpsAlterNote       $02
0008592E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085932 E108                       	smpsAlterNote       $08
00085934 E701                       	dc.b	smpsNoAttack, $01
00085936 E10B                       	smpsAlterNote       $0B
00085938 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008593C E105                       	smpsAlterNote       $05
0008593E E701                       	dc.b	smpsNoAttack, $01
00085940 E101                       	smpsAlterNote       $01
00085942 E701                       	dc.b	smpsNoAttack, $01
00085944 E102                       	smpsAlterNote       $02
00085946 E701                       	dc.b	smpsNoAttack, $01
00085948 E108                       	smpsAlterNote       $08
0008594A E701                       	dc.b	smpsNoAttack, $01
0008594C E10C                       	smpsAlterNote       $0C
0008594E E701                       	dc.b	smpsNoAttack, $01
00085950 E108                       	smpsAlterNote       $08
00085952 E701                       	dc.b	smpsNoAttack, $01
00085954 E105                       	smpsAlterNote       $05
00085956 E701                       	dc.b	smpsNoAttack, $01
00085958 E101                       	smpsAlterNote       $01
0008595A E701                       	dc.b	smpsNoAttack, $01
0008595C E105                       	smpsAlterNote       $05
0008595E E701                       	dc.b	smpsNoAttack, $01
00085960 E10B                       	smpsAlterNote       $0B
00085962 E701                       	dc.b	smpsNoAttack, $01
00085964 E10C                       	smpsAlterNote       $0C
00085966 E701                       	dc.b	smpsNoAttack, $01
00085968 E108                       	smpsAlterNote       $08
0008596A E701                       	dc.b	smpsNoAttack, $01
0008596C E102                       	smpsAlterNote       $02
0008596E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085972 E105                       	smpsAlterNote       $05
00085974 E701                       	dc.b	smpsNoAttack, $01
00085976 E10B                       	smpsAlterNote       $0B
00085978 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008597C E105                       	smpsAlterNote       $05
0008597E E701                       	dc.b	smpsNoAttack, $01
00085980 E102                       	smpsAlterNote       $02
00085982 E701                       	dc.b	smpsNoAttack, $01
00085984 E109                       	smpsAlterNote       $09
00085986 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008598A E108                       	smpsAlterNote       $08
0008598C C10D                       	dc.b	nE5, $0D
0008598E E105                       	smpsAlterNote       $05
00085990 E701                       	dc.b	smpsNoAttack, $01
00085992 E101                       	smpsAlterNote       $01
00085994 E701                       	dc.b	smpsNoAttack, $01
00085996 E102                       	smpsAlterNote       $02
00085998 E701                       	dc.b	smpsNoAttack, $01
0008599A E108                       	smpsAlterNote       $08
0008599C E701                       	dc.b	smpsNoAttack, $01
0008599E E10C                       	smpsAlterNote       $0C
000859A0 E701                       	dc.b	smpsNoAttack, $01
000859A2 E108                       	smpsAlterNote       $08
000859A4 E701                       	dc.b	smpsNoAttack, $01
000859A6 E105                       	smpsAlterNote       $05
000859A8 E701                       	dc.b	smpsNoAttack, $01
000859AA E101                       	smpsAlterNote       $01
000859AC E701                       	dc.b	smpsNoAttack, $01
000859AE E105                       	smpsAlterNote       $05
000859B0 E701                       	dc.b	smpsNoAttack, $01
000859B2 E10B                       	smpsAlterNote       $0B
000859B4 E701                       	dc.b	smpsNoAttack, $01
000859B6 E10C                       	smpsAlterNote       $0C
000859B8 E701                       	dc.b	smpsNoAttack, $01
000859BA E108                       	smpsAlterNote       $08
000859BC E701                       	dc.b	smpsNoAttack, $01
000859BE E102                       	smpsAlterNote       $02
000859C0 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000859C8 E10B                       	smpsAlterNote       $0B
000859CA BA01 8001                  	dc.b	nA4, $01, nRst, $01
000859CE E10C                       	smpsAlterNote       $0C
000859D0 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000859D4 E10B                       	smpsAlterNote       $0B
000859D6 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000859DC E107                       	smpsAlterNote       $07
000859DE BF03                       	dc.b	nD5, $03
000859E0 E108                       	smpsAlterNote       $08
000859E2 C103 8001                  	dc.b	nE5, $03, nRst, $01
000859E6 E109                       	smpsAlterNote       $09
000859E8 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000859EE E10B                       	smpsAlterNote       $0B
000859F0 C606 8001                  	dc.b	nA5, $06, nRst, $01
000859F4 E107                       	smpsAlterNote       $07
000859F6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000859FA E106                       	smpsAlterNote       $06
000859FC C90D                       	dc.b	nC6, $0D
000859FE E103                       	smpsAlterNote       $03
00085A00 E701                       	dc.b	smpsNoAttack, $01
00085A02 E1FF                       	smpsAlterNote       $FF
00085A04 E701                       	dc.b	smpsNoAttack, $01
00085A06 E103                       	smpsAlterNote       $03
00085A08 E701                       	dc.b	smpsNoAttack, $01
00085A0A E109                       	smpsAlterNote       $09
00085A0C E701                       	dc.b	smpsNoAttack, $01
00085A0E E10A                       	smpsAlterNote       $0A
00085A10 E701                       	dc.b	smpsNoAttack, $01
00085A12 E106                       	smpsAlterNote       $06
00085A14 E701                       	dc.b	smpsNoAttack, $01
00085A16 E100                       	smpsAlterNote       $00
00085A18 E701                       	dc.b	smpsNoAttack, $01
00085A1A E10C                       	smpsAlterNote       $0C
00085A1C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00085A20 E10B                       	smpsAlterNote       $0B
00085A22 C603                       	dc.b	nA5, $03
00085A24 E109                       	smpsAlterNote       $09
00085A26 C403 8001                  	dc.b	nG5, $03, nRst, $01
00085A2A E10B                       	smpsAlterNote       $0B
00085A2C C60D                       	dc.b	nA5, $0D
00085A2E E105                       	smpsAlterNote       $05
00085A30 E701                       	dc.b	smpsNoAttack, $01
00085A32 E104                       	smpsAlterNote       $04
00085A34 E701                       	dc.b	smpsNoAttack, $01
00085A36 E108                       	smpsAlterNote       $08
00085A38 E701                       	dc.b	smpsNoAttack, $01
00085A3A E10E                       	smpsAlterNote       $0E
00085A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A40 E10B                       	smpsAlterNote       $0B
00085A42 E701                       	dc.b	smpsNoAttack, $01
00085A44 E105                       	smpsAlterNote       $05
00085A46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A4A E10B                       	smpsAlterNote       $0B
00085A4C E701                       	dc.b	smpsNoAttack, $01
00085A4E E10E                       	smpsAlterNote       $0E
00085A50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A54 E108                       	smpsAlterNote       $08
00085A56 E701                       	dc.b	smpsNoAttack, $01
00085A58 E104                       	smpsAlterNote       $04
00085A5A E701                       	dc.b	smpsNoAttack, $01
00085A5C E105                       	smpsAlterNote       $05
00085A5E E701                       	dc.b	smpsNoAttack, $01
00085A60 E10B                       	smpsAlterNote       $0B
00085A62 E701                       	dc.b	smpsNoAttack, $01
00085A64 E10F                       	smpsAlterNote       $0F
00085A66 E701                       	dc.b	smpsNoAttack, $01
00085A68 E10B                       	smpsAlterNote       $0B
00085A6A E701                       	dc.b	smpsNoAttack, $01
00085A6C E108                       	smpsAlterNote       $08
00085A6E E701                       	dc.b	smpsNoAttack, $01
00085A70 E104                       	smpsAlterNote       $04
00085A72 E701                       	dc.b	smpsNoAttack, $01
00085A74 E108                       	smpsAlterNote       $08
00085A76 E701                       	dc.b	smpsNoAttack, $01
00085A78 E10E                       	smpsAlterNote       $0E
00085A7A E701                       	dc.b	smpsNoAttack, $01
00085A7C E10F                       	smpsAlterNote       $0F
00085A7E E701                       	dc.b	smpsNoAttack, $01
00085A80 E10B                       	smpsAlterNote       $0B
00085A82 E701                       	dc.b	smpsNoAttack, $01
00085A84 E105                       	smpsAlterNote       $05
00085A86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085A8A E108                       	smpsAlterNote       $08
00085A8C E701                       	dc.b	smpsNoAttack, $01
00085A8E E10E                       	smpsAlterNote       $0E
00085A90 E701                       	dc.b	smpsNoAttack, $01
00085A92 E10F                       	smpsAlterNote       $0F
00085A94 800F                       	dc.b	nRst, $0F
00085A96 E107                       	smpsAlterNote       $07
00085A98 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00085A9C E108                       	smpsAlterNote       $08
00085A9E C103                       	dc.b	nE5, $03
00085AA0 E109                       	smpsAlterNote       $09
00085AA2 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00085AA8 E10B                       	smpsAlterNote       $0B
00085AAA C607                       	dc.b	nA5, $07
00085AAC E107                       	smpsAlterNote       $07
00085AAE BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085AB2 E106                       	smpsAlterNote       $06
00085AB4 C90D                       	dc.b	nC6, $0D
00085AB6 E107                       	smpsAlterNote       $07
00085AB8 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00085ABC E10C                       	smpsAlterNote       $0C
00085ABE C704                       	dc.b	nBb5, $04
00085AC0 E10B                       	smpsAlterNote       $0B
00085AC2 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085AC6 E109                       	smpsAlterNote       $09
00085AC8 C404                       	dc.b	nG5, $04
00085ACA E10B                       	smpsAlterNote       $0B
00085ACC C60D                       	dc.b	nA5, $0D
00085ACE E108                       	smpsAlterNote       $08
00085AD0 E701                       	dc.b	smpsNoAttack, $01
00085AD2 E105                       	smpsAlterNote       $05
00085AD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085AD8 E10B                       	smpsAlterNote       $0B
00085ADA E701                       	dc.b	smpsNoAttack, $01
00085ADC E10F                       	smpsAlterNote       $0F
00085ADE E701                       	dc.b	smpsNoAttack, $01
00085AE0 E10E                       	smpsAlterNote       $0E
00085AE2 E701                       	dc.b	smpsNoAttack, $01
00085AE4 E108                       	smpsAlterNote       $08
00085AE6 E701                       	dc.b	smpsNoAttack, $01
00085AE8 E104                       	smpsAlterNote       $04
00085AEA E701                       	dc.b	smpsNoAttack, $01
00085AEC E108                       	smpsAlterNote       $08
00085AEE E701                       	dc.b	smpsNoAttack, $01
00085AF0 E10B                       	smpsAlterNote       $0B
00085AF2 E701                       	dc.b	smpsNoAttack, $01
00085AF4 E10F                       	smpsAlterNote       $0F
00085AF6 E701                       	dc.b	smpsNoAttack, $01
00085AF8 E10B                       	smpsAlterNote       $0B
00085AFA E701                       	dc.b	smpsNoAttack, $01
00085AFC E105                       	smpsAlterNote       $05
00085AFE E701                       	dc.b	smpsNoAttack, $01
00085B00 E104                       	smpsAlterNote       $04
00085B02 E701                       	dc.b	smpsNoAttack, $01
00085B04 E108                       	smpsAlterNote       $08
00085B06 E701                       	dc.b	smpsNoAttack, $01
00085B08 E10E                       	smpsAlterNote       $0E
00085B0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B0E E10B                       	smpsAlterNote       $0B
00085B10 E701                       	dc.b	smpsNoAttack, $01
00085B12 E105                       	smpsAlterNote       $05
00085B14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B18 E10B                       	smpsAlterNote       $0B
00085B1A E701                       	dc.b	smpsNoAttack, $01
00085B1C E10E                       	smpsAlterNote       $0E
00085B1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B22 E108                       	smpsAlterNote       $08
00085B24 E701                       	dc.b	smpsNoAttack, $01
00085B26 E105                       	smpsAlterNote       $05
00085B28 8001                       	dc.b	nRst, $01
00085B2A E109                       	smpsAlterNote       $09
00085B2C C401 8001                  	dc.b	nG5, $01, nRst, $01
00085B30 E10B                       	smpsAlterNote       $0B
00085B32 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00085B3A E109                       	smpsAlterNote       $09
00085B3C C404                       	dc.b	nG5, $04
00085B3E E10B                       	smpsAlterNote       $0B
00085B40 C604 8001                  	dc.b	nA5, $04, nRst, $01
00085B44 E107                       	smpsAlterNote       $07
00085B46 BF0D                       	dc.b	nD5, $0D
00085B48 E101                       	smpsAlterNote       $01
00085B4A E701                       	dc.b	smpsNoAttack, $01
00085B4C E100                       	smpsAlterNote       $00
00085B4E E701                       	dc.b	smpsNoAttack, $01
00085B50 E104                       	smpsAlterNote       $04
00085B52 E701                       	dc.b	smpsNoAttack, $01
00085B54 E10A                       	smpsAlterNote       $0A
00085B56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B5A E107                       	smpsAlterNote       $07
00085B5C E701                       	dc.b	smpsNoAttack, $01
00085B5E E101                       	smpsAlterNote       $01
00085B60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085B64 E107                       	smpsAlterNote       $07
00085B66 E701                       	dc.b	smpsNoAttack, $01
00085B68 E10A                       	smpsAlterNote       $0A
00085B6A E701                       	dc.b	smpsNoAttack, $01
00085B6C E10B                       	smpsAlterNote       $0B
00085B6E 8001                       	dc.b	nRst, $01
00085B70 E108                       	smpsAlterNote       $08
00085B72 8001                       	dc.b	nRst, $01
00085B74 E109                       	smpsAlterNote       $09
00085B76 8001 C401                  	dc.b	nRst, $01, nG5, $01
00085B7A E10B                       	smpsAlterNote       $0B
00085B7C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00085B84 E108                       	smpsAlterNote       $08
00085B86 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00085B8A E109                       	smpsAlterNote       $09
00085B8C CE06 8001                  	dc.b	nF6, $06, nRst, $01
00085B90 E108                       	smpsAlterNote       $08
00085B92 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00085B96 E106                       	smpsAlterNote       $06
00085B98 C903                       	dc.b	nC6, $03
00085B9A E109                       	smpsAlterNote       $09
00085B9C C403 8001                  	dc.b	nG5, $03, nRst, $01
00085BA0 E10C                       	smpsAlterNote       $0C
00085BA2 C70D                       	dc.b	nBb5, $0D
00085BA4 E109                       	smpsAlterNote       $09
00085BA6 E701                       	dc.b	smpsNoAttack, $01
00085BA8 E105                       	smpsAlterNote       $05
00085BAA E701                       	dc.b	smpsNoAttack, $01
00085BAC E109                       	smpsAlterNote       $09
00085BAE E701                       	dc.b	smpsNoAttack, $01
00085BB0 E10F                       	smpsAlterNote       $0F
00085BB2 E701                       	dc.b	smpsNoAttack, $01
00085BB4 E110                       	smpsAlterNote       $10
00085BB6 E701                       	dc.b	smpsNoAttack, $01
00085BB8 E10C                       	smpsAlterNote       $0C
00085BBA E701                       	dc.b	smpsNoAttack, $01
00085BBC E106                       	smpsAlterNote       $06
00085BBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BC2 E109                       	smpsAlterNote       $09
00085BC4 E701                       	dc.b	smpsNoAttack, $01
00085BC6 E10F                       	smpsAlterNote       $0F
00085BC8 E701                       	dc.b	smpsNoAttack, $01
00085BCA E110                       	smpsAlterNote       $10
00085BCC 8001                       	dc.b	nRst, $01
00085BCE E10B                       	smpsAlterNote       $0B
00085BD0 C606 8001                  	dc.b	nA5, $06, nRst, $01
00085BD4 E109                       	smpsAlterNote       $09
00085BD6 C40D                       	dc.b	nG5, $0D
00085BD8 E103                       	smpsAlterNote       $03
00085BDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BDE E106                       	smpsAlterNote       $06
00085BE0 E701                       	dc.b	smpsNoAttack, $01
00085BE2 E10C                       	smpsAlterNote       $0C
00085BE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BE8 E106                       	smpsAlterNote       $06
00085BEA E701                       	dc.b	smpsNoAttack, $01
00085BEC E103                       	smpsAlterNote       $03
00085BEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085BF2 E109                       	smpsAlterNote       $09
00085BF4 E701                       	dc.b	smpsNoAttack, $01
00085BF6 E10D                       	smpsAlterNote       $0D
00085BF8 E701                       	dc.b	smpsNoAttack, $01
00085BFA E10C                       	smpsAlterNote       $0C
00085BFC E701                       	dc.b	smpsNoAttack, $01
00085BFE E106                       	smpsAlterNote       $06
00085C00 E701                       	dc.b	smpsNoAttack, $01
00085C02 E102                       	smpsAlterNote       $02
00085C04 E701                       	dc.b	smpsNoAttack, $01
00085C06 E103                       	smpsAlterNote       $03
00085C08 8001                       	dc.b	nRst, $01
00085C0A E10B                       	smpsAlterNote       $0B
00085C0C C60D                       	dc.b	nA5, $0D
00085C0E E108                       	smpsAlterNote       $08
00085C10 E701                       	dc.b	smpsNoAttack, $01
00085C12 E104                       	smpsAlterNote       $04
00085C14 E701                       	dc.b	smpsNoAttack, $01
00085C16 E108                       	smpsAlterNote       $08
00085C18 E701                       	dc.b	smpsNoAttack, $01
00085C1A E10B                       	smpsAlterNote       $0B
00085C1C E701                       	dc.b	smpsNoAttack, $01
00085C1E E10F                       	smpsAlterNote       $0F
00085C20 E701                       	dc.b	smpsNoAttack, $01
00085C22 E10B                       	smpsAlterNote       $0B
00085C24 E701                       	dc.b	smpsNoAttack, $01
00085C26 E105                       	smpsAlterNote       $05
00085C28 E701                       	dc.b	smpsNoAttack, $01
00085C2A E104                       	smpsAlterNote       $04
00085C2C E701                       	dc.b	smpsNoAttack, $01
00085C2E E108                       	smpsAlterNote       $08
00085C30 E701                       	dc.b	smpsNoAttack, $01
00085C32 E10E                       	smpsAlterNote       $0E
00085C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C38 E10B                       	smpsAlterNote       $0B
00085C3A E701                       	dc.b	smpsNoAttack, $01
00085C3C E105                       	smpsAlterNote       $05
00085C3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C42 E10C                       	smpsAlterNote       $0C
00085C44 C70E                       	dc.b	nBb5, $0E
00085C46 E106                       	smpsAlterNote       $06
00085C48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C4C E10C                       	smpsAlterNote       $0C
00085C4E E701                       	dc.b	smpsNoAttack, $01
00085C50 E10F                       	smpsAlterNote       $0F
00085C52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085C56 E109                       	smpsAlterNote       $09
00085C58 E701                       	dc.b	smpsNoAttack, $01
00085C5A E105                       	smpsAlterNote       $05
00085C5C E701                       	dc.b	smpsNoAttack, $01
00085C5E E106                       	smpsAlterNote       $06
00085C60 E701                       	dc.b	smpsNoAttack, $01
00085C62 E10C                       	smpsAlterNote       $0C
00085C64 E701                       	dc.b	smpsNoAttack, $01
00085C66 E110                       	smpsAlterNote       $10
00085C68 E701                       	dc.b	smpsNoAttack, $01
00085C6A E10C                       	smpsAlterNote       $0C
00085C6C E701                       	dc.b	smpsNoAttack, $01
00085C6E E109                       	smpsAlterNote       $09
00085C70 E701                       	dc.b	smpsNoAttack, $01
00085C72 E105                       	smpsAlterNote       $05
00085C74 E701                       	dc.b	smpsNoAttack, $01
00085C76 E106                       	smpsAlterNote       $06
00085C78 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00085C7C E107                       	smpsAlterNote       $07
00085C7E CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00085C83 E108                       	smpsAlterNote       $08
00085C85 CD0D                       	dc.b	nE6, $0D
00085C87 E107                       	smpsAlterNote       $07
00085C89 CB0D                       	dc.b	nD6, $0D
00085C8B E104                       	smpsAlterNote       $04
00085C8D E701                       	dc.b	smpsNoAttack, $01
00085C8F E100                       	smpsAlterNote       $00
00085C91 E701                       	dc.b	smpsNoAttack, $01
00085C93 E101                       	smpsAlterNote       $01
00085C95 E701                       	dc.b	smpsNoAttack, $01
00085C97 E107                       	smpsAlterNote       $07
00085C99 E701                       	dc.b	smpsNoAttack, $01
00085C9B E10B                       	smpsAlterNote       $0B
00085C9D E701                       	dc.b	smpsNoAttack, $01
00085C9F E107                       	smpsAlterNote       $07
00085CA1 E701                       	dc.b	smpsNoAttack, $01
00085CA3 E104                       	smpsAlterNote       $04
00085CA5 E701                       	dc.b	smpsNoAttack, $01
00085CA7 E100                       	smpsAlterNote       $00
00085CA9 E701                       	dc.b	smpsNoAttack, $01
00085CAB E104                       	smpsAlterNote       $04
00085CAD E701                       	dc.b	smpsNoAttack, $01
00085CAF E10A                       	smpsAlterNote       $0A
00085CB1 E701                       	dc.b	smpsNoAttack, $01
00085CB3 E10B                       	smpsAlterNote       $0B
00085CB5 E701                       	dc.b	smpsNoAttack, $01
00085CB7 E108                       	smpsAlterNote       $08
00085CB9 CC0D                       	dc.b	nEb6, $0D
00085CBB E105                       	smpsAlterNote       $05
00085CBD E701                       	dc.b	smpsNoAttack, $01
00085CBF E101                       	smpsAlterNote       $01
00085CC1 E701                       	dc.b	smpsNoAttack, $01
00085CC3 E102                       	smpsAlterNote       $02
00085CC5 E701                       	dc.b	smpsNoAttack, $01
00085CC7 E108                       	smpsAlterNote       $08
00085CC9 E701                       	dc.b	smpsNoAttack, $01
00085CCB E106                       	smpsAlterNote       $06
00085CCD C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00085CD9 8001                       	dc.b	nRst, $01
00085CDB E107                       	smpsAlterNote       $07
00085CDD CB0D                       	dc.b	nD6, $0D
00085CDF E104                       	smpsAlterNote       $04
00085CE1 E701                       	dc.b	smpsNoAttack, $01
00085CE3 E100                       	smpsAlterNote       $00
00085CE5 E701                       	dc.b	smpsNoAttack, $01
00085CE7 E104                       	smpsAlterNote       $04
00085CE9 E701                       	dc.b	smpsNoAttack, $01
00085CEB E107                       	smpsAlterNote       $07
00085CED E701                       	dc.b	smpsNoAttack, $01
00085CEF E10B                       	smpsAlterNote       $0B
00085CF1 E701                       	dc.b	smpsNoAttack, $01
00085CF3 E107                       	smpsAlterNote       $07
00085CF5 E701                       	dc.b	smpsNoAttack, $01
00085CF7 E101                       	smpsAlterNote       $01
00085CF9 E701                       	dc.b	smpsNoAttack, $01
00085CFB E100                       	smpsAlterNote       $00
00085CFD E701                       	dc.b	smpsNoAttack, $01
00085CFF E104                       	smpsAlterNote       $04
00085D01 E701                       	dc.b	smpsNoAttack, $01
00085D03 E10A                       	smpsAlterNote       $0A
00085D05 E701                       	dc.b	smpsNoAttack, $01
00085D07 E10B                       	smpsAlterNote       $0B
00085D09 8001                       	dc.b	nRst, $01
00085D0B E109                       	smpsAlterNote       $09
00085D0D CE0A                       	dc.b	nF6, $0A
00085D0F E108                       	smpsAlterNote       $08
00085D11 CC07                       	dc.b	nEb6, $07
00085D13 E106                       	smpsAlterNote       $06
00085D15 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00085D21 E107                       	smpsAlterNote       $07
00085D23 CB0D                       	dc.b	nD6, $0D
00085D25 E101                       	smpsAlterNote       $01
00085D27 E701                       	dc.b	smpsNoAttack, $01
00085D29 E100                       	smpsAlterNote       $00
00085D2B E701                       	dc.b	smpsNoAttack, $01
00085D2D E104                       	smpsAlterNote       $04
00085D2F E701                       	dc.b	smpsNoAttack, $01
00085D31 E10A                       	smpsAlterNote       $0A
00085D33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D37 E107                       	smpsAlterNote       $07
00085D39 E701                       	dc.b	smpsNoAttack, $01
00085D3B E101                       	smpsAlterNote       $01
00085D3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D41 E107                       	smpsAlterNote       $07
00085D43 E701                       	dc.b	smpsNoAttack, $01
00085D45 E10A                       	smpsAlterNote       $0A
00085D47 E701                       	dc.b	smpsNoAttack, $01
00085D49 E10B                       	smpsAlterNote       $0B
00085D4B 8001                       	dc.b	nRst, $01
00085D4D E108                       	smpsAlterNote       $08
00085D4F CC0D                       	dc.b	nEb6, $0D
00085D51 E102                       	smpsAlterNote       $02
00085D53 E701                       	dc.b	smpsNoAttack, $01
00085D55 E101                       	smpsAlterNote       $01
00085D57 E701                       	dc.b	smpsNoAttack, $01
00085D59 E105                       	smpsAlterNote       $05
00085D5B E701                       	dc.b	smpsNoAttack, $01
00085D5D E108                       	smpsAlterNote       $08
00085D5F 8001                       	dc.b	nRst, $01
00085D61 E106                       	smpsAlterNote       $06
00085D63 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00085D6F 8001                       	dc.b	nRst, $01
00085D71 E107                       	smpsAlterNote       $07
00085D73 CB0D                       	dc.b	nD6, $0D
00085D75 E101                       	smpsAlterNote       $01
00085D77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D7B E104                       	smpsAlterNote       $04
00085D7D E701                       	dc.b	smpsNoAttack, $01
00085D7F E10A                       	smpsAlterNote       $0A
00085D81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D85 E104                       	smpsAlterNote       $04
00085D87 E701                       	dc.b	smpsNoAttack, $01
00085D89 E101                       	smpsAlterNote       $01
00085D8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085D8F E107                       	smpsAlterNote       $07
00085D91 E701                       	dc.b	smpsNoAttack, $01
00085D93 E10B                       	smpsAlterNote       $0B
00085D95 E701                       	dc.b	smpsNoAttack, $01
00085D97 E10A                       	smpsAlterNote       $0A
00085D99 E701                       	dc.b	smpsNoAttack, $01
00085D9B E104                       	smpsAlterNote       $04
00085D9D E701                       	dc.b	smpsNoAttack, $01
00085D9F E100                       	smpsAlterNote       $00
00085DA1 E701                       	dc.b	smpsNoAttack, $01
00085DA3 E101                       	smpsAlterNote       $01
00085DA5 801C                       	dc.b	nRst, $1C
00085DA9 E107                       	smpsAlterNote       $07
00085DAB BF03 8001                  	dc.b	nD5, $03, nRst, $01
00085DAF E603                       	smpsAlterVol        $03
00085DB1 F6F1 AD                    	smpsJump            music84_Jump03
00085DB4                            
00085DB4                            ; FM3 Data
00085DB4                            music84_FM3:
00085DB4 E0C0                       	smpsPan             panCenter, $00
00085DB8 E109                       	smpsAlterNote       $09
00085DBA C203 8007                  	dc.b	nF5, $03, nRst, $07
00085DBE E108                       	smpsAlterNote       $08
00085DC0 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00085DC4 E10B                       	smpsAlterNote       $0B
00085DC6 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00085DCC E040                       	smpsPan             panRight, $00
00085DCE E110                       	smpsAlterNote       $10
00085DD0 E6F9                       	smpsAlterVol        $F9
00085DD2 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00085DD6 E10F                       	smpsAlterNote       $0F
00085DD8 C603                       	dc.b	nA5, $03
00085DDA E10D                       	smpsAlterNote       $0D
00085DDC C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00085DE2 E10C                       	smpsAlterNote       $0C
00085DE4 C103 8001                  	dc.b	nE5, $03, nRst, $01
00085DE8 E10A                       	smpsAlterNote       $0A
00085DEA BD02 8001                  	dc.b	nC5, $02, nRst, $01
00085DEE E10F                       	smpsAlterNote       $0F
00085DF0 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00085DF4 E0C0                       	smpsPan             panCenter, $00
00085DF8 E109                       	smpsAlterNote       $09
00085DFA E609                       	smpsAlterVol        $09
00085DFC B603                       	dc.b	nF4, $03
00085DFE                            
00085DFE                            music84_Jump02:
00085DFE E70A                       	dc.b	smpsNoAttack, $0A
00085E00 E103                       	smpsAlterNote       $03
00085E02 E701                       	dc.b	smpsNoAttack, $01
00085E04 E102                       	smpsAlterNote       $02
00085E06 E701                       	dc.b	smpsNoAttack, $01
00085E08 E106                       	smpsAlterNote       $06
00085E0A E701                       	dc.b	smpsNoAttack, $01
00085E0C E10C                       	smpsAlterNote       $0C
00085E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E12 E109                       	smpsAlterNote       $09
00085E14 E701                       	dc.b	smpsNoAttack, $01
00085E16 E103                       	smpsAlterNote       $03
00085E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E1C E109                       	smpsAlterNote       $09
00085E1E E701                       	dc.b	smpsNoAttack, $01
00085E20 E10C                       	smpsAlterNote       $0C
00085E22 E701                       	dc.b	smpsNoAttack, $01
00085E24 E10D                       	smpsAlterNote       $0D
00085E26 8001                       	dc.b	nRst, $01
00085E28 E109                       	smpsAlterNote       $09
00085E2A B80D                       	dc.b	nG4, $0D
00085E2C E103                       	smpsAlterNote       $03
00085E2E E701                       	dc.b	smpsNoAttack, $01
00085E30 E102                       	smpsAlterNote       $02
00085E32 E701                       	dc.b	smpsNoAttack, $01
00085E34 E106                       	smpsAlterNote       $06
00085E36 E701                       	dc.b	smpsNoAttack, $01
00085E38 E10C                       	smpsAlterNote       $0C
00085E3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E3E E109                       	smpsAlterNote       $09
00085E40 E701                       	dc.b	smpsNoAttack, $01
00085E42 E103                       	smpsAlterNote       $03
00085E44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E48 E109                       	smpsAlterNote       $09
00085E4A E701                       	dc.b	smpsNoAttack, $01
00085E4C E10C                       	smpsAlterNote       $0C
00085E4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E52 E106                       	smpsAlterNote       $06
00085E54 E701                       	dc.b	smpsNoAttack, $01
00085E56 E102                       	smpsAlterNote       $02
00085E58 E701                       	dc.b	smpsNoAttack, $01
00085E5A E103                       	smpsAlterNote       $03
00085E5C E701                       	dc.b	smpsNoAttack, $01
00085E5E E109                       	smpsAlterNote       $09
00085E60 E701                       	dc.b	smpsNoAttack, $01
00085E62 E10D                       	smpsAlterNote       $0D
00085E64 E701                       	dc.b	smpsNoAttack, $01
00085E66 E109                       	smpsAlterNote       $09
00085E68 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085E6C E10B                       	smpsAlterNote       $0B
00085E6E BA0D                       	dc.b	nA4, $0D
00085E70 E105                       	smpsAlterNote       $05
00085E72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E76 E108                       	smpsAlterNote       $08
00085E78 E701                       	dc.b	smpsNoAttack, $01
00085E7A E10E                       	smpsAlterNote       $0E
00085E7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085E80 E108                       	smpsAlterNote       $08
00085E82 E701                       	dc.b	smpsNoAttack, $01
00085E84 E104                       	smpsAlterNote       $04
00085E86 E701                       	dc.b	smpsNoAttack, $01
00085E88 E105                       	smpsAlterNote       $05
00085E8A E701                       	dc.b	smpsNoAttack, $01
00085E8C E10B                       	smpsAlterNote       $0B
00085E8E E701                       	dc.b	smpsNoAttack, $01
00085E90 E10F                       	smpsAlterNote       $0F
00085E92 E701                       	dc.b	smpsNoAttack, $01
00085E94 E10B                       	smpsAlterNote       $0B
00085E96 E701                       	dc.b	smpsNoAttack, $01
00085E98 E108                       	smpsAlterNote       $08
00085E9A E701                       	dc.b	smpsNoAttack, $01
00085E9C E104                       	smpsAlterNote       $04
00085E9E E701                       	dc.b	smpsNoAttack, $01
00085EA0 E108                       	smpsAlterNote       $08
00085EA2 E701                       	dc.b	smpsNoAttack, $01
00085EA4 E10E                       	smpsAlterNote       $0E
00085EA6 E701                       	dc.b	smpsNoAttack, $01
00085EA8 E10F                       	smpsAlterNote       $0F
00085EAA E701                       	dc.b	smpsNoAttack, $01
00085EAC E10B                       	smpsAlterNote       $0B
00085EAE E701                       	dc.b	smpsNoAttack, $01
00085EB0 E105                       	smpsAlterNote       $05
00085EB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EB6 E108                       	smpsAlterNote       $08
00085EB8 E701                       	dc.b	smpsNoAttack, $01
00085EBA E10E                       	smpsAlterNote       $0E
00085EBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EC0 E108                       	smpsAlterNote       $08
00085EC2 E701                       	dc.b	smpsNoAttack, $01
00085EC4 E105                       	smpsAlterNote       $05
00085EC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085ECA E10B                       	smpsAlterNote       $0B
00085ECC E701                       	dc.b	smpsNoAttack, $01
00085ECE E10F                       	smpsAlterNote       $0F
00085ED0 E701                       	dc.b	smpsNoAttack, $01
00085ED2 E10E                       	smpsAlterNote       $0E
00085ED4 E701                       	dc.b	smpsNoAttack, $01
00085ED6 E108                       	smpsAlterNote       $08
00085ED8 E701                       	dc.b	smpsNoAttack, $01
00085EDA E104                       	smpsAlterNote       $04
00085EDC E701                       	dc.b	smpsNoAttack, $01
00085EDE E105                       	smpsAlterNote       $05
00085EE0 8001                       	dc.b	nRst, $01
00085EE2 E108                       	smpsAlterNote       $08
00085EE4 B50A                       	dc.b	nE4, $0A
00085EE6 E109                       	smpsAlterNote       $09
00085EE8 B60D                       	dc.b	nF4, $0D
00085EEA E106                       	smpsAlterNote       $06
00085EEC E701                       	dc.b	smpsNoAttack, $01
00085EEE E103                       	smpsAlterNote       $03
00085EF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085EF4 E109                       	smpsAlterNote       $09
00085EF6 E701                       	dc.b	smpsNoAttack, $01
00085EF8 E10D                       	smpsAlterNote       $0D
00085EFA E701                       	dc.b	smpsNoAttack, $01
00085EFC E10C                       	smpsAlterNote       $0C
00085EFE E701                       	dc.b	smpsNoAttack, $01
00085F00 E106                       	smpsAlterNote       $06
00085F02 E701                       	dc.b	smpsNoAttack, $01
00085F04 E102                       	smpsAlterNote       $02
00085F06 E701                       	dc.b	smpsNoAttack, $01
00085F08 E106                       	smpsAlterNote       $06
00085F0A E701                       	dc.b	smpsNoAttack, $01
00085F0C E109                       	smpsAlterNote       $09
00085F0E E701                       	dc.b	smpsNoAttack, $01
00085F10 E10D                       	smpsAlterNote       $0D
00085F12 E701                       	dc.b	smpsNoAttack, $01
00085F14 E109                       	smpsAlterNote       $09
00085F16 B80D                       	dc.b	nG4, $0D
00085F18 E106                       	smpsAlterNote       $06
00085F1A E701                       	dc.b	smpsNoAttack, $01
00085F1C E103                       	smpsAlterNote       $03
00085F1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F22 E109                       	smpsAlterNote       $09
00085F24 E701                       	dc.b	smpsNoAttack, $01
00085F26 E10D                       	smpsAlterNote       $0D
00085F28 E701                       	dc.b	smpsNoAttack, $01
00085F2A E10C                       	smpsAlterNote       $0C
00085F2C E701                       	dc.b	smpsNoAttack, $01
00085F2E E106                       	smpsAlterNote       $06
00085F30 E701                       	dc.b	smpsNoAttack, $01
00085F32 E102                       	smpsAlterNote       $02
00085F34 E701                       	dc.b	smpsNoAttack, $01
00085F36 E106                       	smpsAlterNote       $06
00085F38 E701                       	dc.b	smpsNoAttack, $01
00085F3A E109                       	smpsAlterNote       $09
00085F3C E701                       	dc.b	smpsNoAttack, $01
00085F3E E10D                       	smpsAlterNote       $0D
00085F40 E701                       	dc.b	smpsNoAttack, $01
00085F42 E109                       	smpsAlterNote       $09
00085F44 E701                       	dc.b	smpsNoAttack, $01
00085F46 E103                       	smpsAlterNote       $03
00085F48 E701                       	dc.b	smpsNoAttack, $01
00085F4A E102                       	smpsAlterNote       $02
00085F4C E701                       	dc.b	smpsNoAttack, $01
00085F4E E106                       	smpsAlterNote       $06
00085F50 E701                       	dc.b	smpsNoAttack, $01
00085F52 E10C                       	smpsAlterNote       $0C
00085F54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F58 E109                       	smpsAlterNote       $09
00085F5A E701                       	dc.b	smpsNoAttack, $01
00085F5C E10B                       	smpsAlterNote       $0B
00085F5E BA0D                       	dc.b	nA4, $0D
00085F60 E108                       	smpsAlterNote       $08
00085F62 E701                       	dc.b	smpsNoAttack, $01
00085F64 E104                       	smpsAlterNote       $04
00085F66 E701                       	dc.b	smpsNoAttack, $01
00085F68 E108                       	smpsAlterNote       $08
00085F6A E701                       	dc.b	smpsNoAttack, $01
00085F6C E10B                       	smpsAlterNote       $0B
00085F6E E701                       	dc.b	smpsNoAttack, $01
00085F70 E10F                       	smpsAlterNote       $0F
00085F72 E701                       	dc.b	smpsNoAttack, $01
00085F74 E10B                       	smpsAlterNote       $0B
00085F76 E701                       	dc.b	smpsNoAttack, $01
00085F78 E105                       	smpsAlterNote       $05
00085F7A E701                       	dc.b	smpsNoAttack, $01
00085F7C E104                       	smpsAlterNote       $04
00085F7E E701                       	dc.b	smpsNoAttack, $01
00085F80 E108                       	smpsAlterNote       $08
00085F82 E701                       	dc.b	smpsNoAttack, $01
00085F84 E10E                       	smpsAlterNote       $0E
00085F86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F8A E10B                       	smpsAlterNote       $0B
00085F8C E701                       	dc.b	smpsNoAttack, $01
00085F8E E105                       	smpsAlterNote       $05
00085F90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F94 E10B                       	smpsAlterNote       $0B
00085F96 E701                       	dc.b	smpsNoAttack, $01
00085F98 E10E                       	smpsAlterNote       $0E
00085F9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00085F9E E108                       	smpsAlterNote       $08
00085FA0 E701                       	dc.b	smpsNoAttack, $01
00085FA2 E104                       	smpsAlterNote       $04
00085FA4 E701                       	dc.b	smpsNoAttack, $01
00085FA6 E105                       	smpsAlterNote       $05
00085FA8 E701                       	dc.b	smpsNoAttack, $01
00085FAA E10B                       	smpsAlterNote       $0B
00085FAC E701                       	dc.b	smpsNoAttack, $01
00085FAE E10F                       	smpsAlterNote       $0F
00085FB0 E701                       	dc.b	smpsNoAttack, $01
00085FB2 E10B                       	smpsAlterNote       $0B
00085FB4 E701                       	dc.b	smpsNoAttack, $01
00085FB6 E108                       	smpsAlterNote       $08
00085FB8 E701                       	dc.b	smpsNoAttack, $01
00085FBA E105                       	smpsAlterNote       $05
00085FBC 8001                       	dc.b	nRst, $01
00085FBE E109                       	smpsAlterNote       $09
00085FC0 B609 8001                  	dc.b	nF4, $09, nRst, $01
00085FC4 E108                       	smpsAlterNote       $08
00085FC6 B506 8001                  	dc.b	nE4, $06, nRst, $01
00085FCA E107                       	smpsAlterNote       $07
00085FCC B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00085FD0 E108                       	smpsAlterNote       $08
00085FD2 B502 8001                  	dc.b	nE4, $02, nRst, $01
00085FD6 E109                       	smpsAlterNote       $09
00085FD8 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00085FDE E10B                       	smpsAlterNote       $0B
00085FE0 BA0D                       	dc.b	nA4, $0D
00085FE2 E108                       	smpsAlterNote       $08
00085FE4 E701                       	dc.b	smpsNoAttack, $01
00085FE6 E104                       	smpsAlterNote       $04
00085FE8 E701                       	dc.b	smpsNoAttack, $01
00085FEA E108                       	smpsAlterNote       $08
00085FEC E701                       	dc.b	smpsNoAttack, $01
00085FEE E10E                       	smpsAlterNote       $0E
00085FF0 E701                       	dc.b	smpsNoAttack, $01
00085FF2 E10F                       	smpsAlterNote       $0F
00085FF4 E701                       	dc.b	smpsNoAttack, $01
00085FF6 E10B                       	smpsAlterNote       $0B
00085FF8 E701                       	dc.b	smpsNoAttack, $01
00085FFA E105                       	smpsAlterNote       $05
00085FFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086000 E108                       	smpsAlterNote       $08
00086002 E701                       	dc.b	smpsNoAttack, $01
00086004 E10E                       	smpsAlterNote       $0E
00086006 E701                       	dc.b	smpsNoAttack, $01
00086008 E10F                       	smpsAlterNote       $0F
0008600A 8001                       	dc.b	nRst, $01
0008600C E109                       	smpsAlterNote       $09
0008600E C20D                       	dc.b	nF5, $0D
00086010 E103                       	smpsAlterNote       $03
00086012 E701                       	dc.b	smpsNoAttack, $01
00086014 E102                       	smpsAlterNote       $02
00086016 E701                       	dc.b	smpsNoAttack, $01
00086018 E106                       	smpsAlterNote       $06
0008601A E701                       	dc.b	smpsNoAttack, $01
0008601C E10C                       	smpsAlterNote       $0C
0008601E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086022 E109                       	smpsAlterNote       $09
00086024 E701                       	dc.b	smpsNoAttack, $01
00086026 E103                       	smpsAlterNote       $03
00086028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008602C E109                       	smpsAlterNote       $09
0008602E E701                       	dc.b	smpsNoAttack, $01
00086030 E10C                       	smpsAlterNote       $0C
00086032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086036 E106                       	smpsAlterNote       $06
00086038 E701                       	dc.b	smpsNoAttack, $01
0008603A E102                       	smpsAlterNote       $02
0008603C E701                       	dc.b	smpsNoAttack, $01
0008603E E103                       	smpsAlterNote       $03
00086040 E701                       	dc.b	smpsNoAttack, $01
00086042 E109                       	smpsAlterNote       $09
00086044 E701                       	dc.b	smpsNoAttack, $01
00086046 E10D                       	smpsAlterNote       $0D
00086048 E701                       	dc.b	smpsNoAttack, $01
0008604A E109                       	smpsAlterNote       $09
0008604C E701                       	dc.b	smpsNoAttack, $01
0008604E E106                       	smpsAlterNote       $06
00086050 E701                       	dc.b	smpsNoAttack, $01
00086052 E102                       	smpsAlterNote       $02
00086054 E701                       	dc.b	smpsNoAttack, $01
00086056 E106                       	smpsAlterNote       $06
00086058 E701                       	dc.b	smpsNoAttack, $01
0008605A E10C                       	smpsAlterNote       $0C
0008605C E701                       	dc.b	smpsNoAttack, $01
0008605E E10D                       	smpsAlterNote       $0D
00086060 E701                       	dc.b	smpsNoAttack, $01
00086062 E109                       	smpsAlterNote       $09
00086064 E701                       	dc.b	smpsNoAttack, $01
00086066 E103                       	smpsAlterNote       $03
00086068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008606C E106                       	smpsAlterNote       $06
0008606E E701                       	dc.b	smpsNoAttack, $01
00086070 E10C                       	smpsAlterNote       $0C
00086072 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086076 E106                       	smpsAlterNote       $06
00086078 E701                       	dc.b	smpsNoAttack, $01
0008607A E103                       	smpsAlterNote       $03
0008607C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086080 E109                       	smpsAlterNote       $09
00086082 E701                       	dc.b	smpsNoAttack, $01
00086084 E10D                       	smpsAlterNote       $0D
00086086 E701                       	dc.b	smpsNoAttack, $01
00086088 E10C                       	smpsAlterNote       $0C
0008608A E701                       	dc.b	smpsNoAttack, $01
0008608C E106                       	smpsAlterNote       $06
0008608E E701                       	dc.b	smpsNoAttack, $01
00086090 E102                       	smpsAlterNote       $02
00086092 E701                       	dc.b	smpsNoAttack, $01
00086094 E106                       	smpsAlterNote       $06
00086096 E701                       	dc.b	smpsNoAttack, $01
00086098 E109                       	smpsAlterNote       $09
0008609A E701                       	dc.b	smpsNoAttack, $01
0008609C E10D                       	smpsAlterNote       $0D
0008609E E701                       	dc.b	smpsNoAttack, $01
000860A0 E109                       	smpsAlterNote       $09
000860A2 E701                       	dc.b	smpsNoAttack, $01
000860A4 E103                       	smpsAlterNote       $03
000860A6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000860AA E109                       	smpsAlterNote       $09
000860AC C206                       	dc.b	nF5, $06
000860AE E108                       	smpsAlterNote       $08
000860B0 C10E                       	dc.b	nE5, $0E
000860B2 E102                       	smpsAlterNote       $02
000860B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860B8 E108                       	smpsAlterNote       $08
000860BA E701                       	dc.b	smpsNoAttack, $01
000860BC E10B                       	smpsAlterNote       $0B
000860BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860C2 E105                       	smpsAlterNote       $05
000860C4 E701                       	dc.b	smpsNoAttack, $01
000860C6 E101                       	smpsAlterNote       $01
000860C8 E701                       	dc.b	smpsNoAttack, $01
000860CA E102                       	smpsAlterNote       $02
000860CC E701                       	dc.b	smpsNoAttack, $01
000860CE E108                       	smpsAlterNote       $08
000860D0 E701                       	dc.b	smpsNoAttack, $01
000860D2 E10C                       	smpsAlterNote       $0C
000860D4 E701                       	dc.b	smpsNoAttack, $01
000860D6 E107                       	smpsAlterNote       $07
000860D8 BF0E                       	dc.b	nD5, $0E
000860DA E101                       	smpsAlterNote       $01
000860DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860E0 E107                       	smpsAlterNote       $07
000860E2 E701                       	dc.b	smpsNoAttack, $01
000860E4 E10A                       	smpsAlterNote       $0A
000860E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000860EA E104                       	smpsAlterNote       $04
000860EC E701                       	dc.b	smpsNoAttack, $01
000860EE E100                       	smpsAlterNote       $00
000860F0 E701                       	dc.b	smpsNoAttack, $01
000860F2 E104                       	smpsAlterNote       $04
000860F4 E701                       	dc.b	smpsNoAttack, $01
000860F6 E107                       	smpsAlterNote       $07
000860F8 E701                       	dc.b	smpsNoAttack, $01
000860FA E10B                       	smpsAlterNote       $0B
000860FC E701                       	dc.b	smpsNoAttack, $01
000860FE E107                       	smpsAlterNote       $07
00086100 E701                       	dc.b	smpsNoAttack, $01
00086102 E101                       	smpsAlterNote       $01
00086104 E701                       	dc.b	smpsNoAttack, $01
00086106 E100                       	smpsAlterNote       $00
00086108 E701                       	dc.b	smpsNoAttack, $01
0008610A E104                       	smpsAlterNote       $04
0008610C E701                       	dc.b	smpsNoAttack, $01
0008610E E10A                       	smpsAlterNote       $0A
00086110 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086114 E107                       	smpsAlterNote       $07
00086116 E701                       	dc.b	smpsNoAttack, $01
00086118 E101                       	smpsAlterNote       $01
0008611A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008611E E107                       	smpsAlterNote       $07
00086120 E701                       	dc.b	smpsNoAttack, $01
00086122 E10A                       	smpsAlterNote       $0A
00086124 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086128 E104                       	smpsAlterNote       $04
0008612A E701                       	dc.b	smpsNoAttack, $01
0008612C E100                       	smpsAlterNote       $00
0008612E E701                       	dc.b	smpsNoAttack, $01
00086130 E101                       	smpsAlterNote       $01
00086132 E701                       	dc.b	smpsNoAttack, $01
00086134 E107                       	smpsAlterNote       $07
00086136 E701                       	dc.b	smpsNoAttack, $01
00086138 E10B                       	smpsAlterNote       $0B
0008613A E701                       	dc.b	smpsNoAttack, $01
0008613C E107                       	smpsAlterNote       $07
0008613E E701                       	dc.b	smpsNoAttack, $01
00086140 E104                       	smpsAlterNote       $04
00086142 E701                       	dc.b	smpsNoAttack, $01
00086144 E100                       	smpsAlterNote       $00
00086146 E701                       	dc.b	smpsNoAttack, $01
00086148 E104                       	smpsAlterNote       $04
0008614A E701                       	dc.b	smpsNoAttack, $01
0008614C E10A                       	smpsAlterNote       $0A
0008614E E701                       	dc.b	smpsNoAttack, $01
00086150 E10B                       	smpsAlterNote       $0B
00086152 E701                       	dc.b	smpsNoAttack, $01
00086154 E107                       	smpsAlterNote       $07
00086156 E701                       	dc.b	smpsNoAttack, $01
00086158 E101                       	smpsAlterNote       $01
0008615A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008615E E104                       	smpsAlterNote       $04
00086160 E701                       	dc.b	smpsNoAttack, $01
00086162 E10A                       	smpsAlterNote       $0A
00086164 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086168 E104                       	smpsAlterNote       $04
0008616A E701                       	dc.b	smpsNoAttack, $01
0008616C E101                       	smpsAlterNote       $01
0008616E E701                       	dc.b	smpsNoAttack, $01
00086172 E107                       	smpsAlterNote       $07
00086174 E6FF                       	smpsAlterVol        $FF
00086176 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00086182 8004                       	dc.b	nRst, $04
00086186 E109                       	smpsAlterNote       $09
00086188 E602                       	smpsAlterVol        $02
0008618A B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00086190 E108                       	smpsAlterNote       $08
00086192 B502 8001                  	dc.b	nE4, $02, nRst, $01
00086196 E109                       	smpsAlterNote       $09
00086198 B60D                       	dc.b	nF4, $0D
0008619A E106                       	smpsAlterNote       $06
0008619C E701                       	dc.b	smpsNoAttack, $01
0008619E E102                       	smpsAlterNote       $02
000861A0 E701                       	dc.b	smpsNoAttack, $01
000861A2 E106                       	smpsAlterNote       $06
000861A4 E701                       	dc.b	smpsNoAttack, $01
000861A6 E109                       	smpsAlterNote       $09
000861A8 E701                       	dc.b	smpsNoAttack, $01
000861AA E10D                       	smpsAlterNote       $0D
000861AC E701                       	dc.b	smpsNoAttack, $01
000861AE E109                       	smpsAlterNote       $09
000861B0 E701                       	dc.b	smpsNoAttack, $01
000861B2 E103                       	smpsAlterNote       $03
000861B4 E701                       	dc.b	smpsNoAttack, $01
000861B6 E102                       	smpsAlterNote       $02
000861B8 E701                       	dc.b	smpsNoAttack, $01
000861BA E106                       	smpsAlterNote       $06
000861BC E701                       	dc.b	smpsNoAttack, $01
000861BE E10C                       	smpsAlterNote       $0C
000861C0 E701                       	dc.b	smpsNoAttack, $01
000861C2 E10D                       	smpsAlterNote       $0D
000861C4 8001                       	dc.b	nRst, $01
000861C6 E109                       	smpsAlterNote       $09
000861C8 B80D                       	dc.b	nG4, $0D
000861CA E106                       	smpsAlterNote       $06
000861CC E701                       	dc.b	smpsNoAttack, $01
000861CE E102                       	smpsAlterNote       $02
000861D0 E701                       	dc.b	smpsNoAttack, $01
000861D2 E106                       	smpsAlterNote       $06
000861D4 E701                       	dc.b	smpsNoAttack, $01
000861D6 E10C                       	smpsAlterNote       $0C
000861D8 E701                       	dc.b	smpsNoAttack, $01
000861DA E10D                       	smpsAlterNote       $0D
000861DC E701                       	dc.b	smpsNoAttack, $01
000861DE E109                       	smpsAlterNote       $09
000861E0 E701                       	dc.b	smpsNoAttack, $01
000861E2 E103                       	smpsAlterNote       $03
000861E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861E8 E106                       	smpsAlterNote       $06
000861EA E701                       	dc.b	smpsNoAttack, $01
000861EC E10C                       	smpsAlterNote       $0C
000861EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861F2 E106                       	smpsAlterNote       $06
000861F4 E701                       	dc.b	smpsNoAttack, $01
000861F6 E103                       	smpsAlterNote       $03
000861F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861FC E109                       	smpsAlterNote       $09
000861FE E701                       	dc.b	smpsNoAttack, $01
00086200 E10D                       	smpsAlterNote       $0D
00086202 E701                       	dc.b	smpsNoAttack, $01
00086204 E10C                       	smpsAlterNote       $0C
00086206 E701                       	dc.b	smpsNoAttack, $01
00086208 E109                       	smpsAlterNote       $09
0008620A 8001                       	dc.b	nRst, $01
0008620C E10B                       	smpsAlterNote       $0B
0008620E BA03                       	dc.b	nA4, $03
00086210 E10C                       	smpsAlterNote       $0C
00086212 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00086216 E10B                       	smpsAlterNote       $0B
00086218 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008621E E10C                       	smpsAlterNote       $0C
00086220 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086224 E10B                       	smpsAlterNote       $0B
00086226 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008622C E10C                       	smpsAlterNote       $0C
0008622E D303                       	dc.b	nBb6, $03
00086230 E10B                       	smpsAlterNote       $0B
00086232 D20D                       	dc.b	nA6, $0D
00086234 E108                       	smpsAlterNote       $08
00086236 E701                       	dc.b	smpsNoAttack, $01
00086238 E104                       	smpsAlterNote       $04
0008623A E701                       	dc.b	smpsNoAttack, $01
0008623C E105                       	smpsAlterNote       $05
0008623E E701                       	dc.b	smpsNoAttack, $01
00086240 E10B                       	smpsAlterNote       $0B
00086242 E701                       	dc.b	smpsNoAttack, $01
00086244 E10F                       	smpsAlterNote       $0F
00086246 E701                       	dc.b	smpsNoAttack, $01
00086248 E10B                       	smpsAlterNote       $0B
0008624A E701                       	dc.b	smpsNoAttack, $01
0008624C E108                       	smpsAlterNote       $08
0008624E E701                       	dc.b	smpsNoAttack, $01
00086250 E104                       	smpsAlterNote       $04
00086252 E701                       	dc.b	smpsNoAttack, $01
00086254 E108                       	smpsAlterNote       $08
00086256 E701                       	dc.b	smpsNoAttack, $01
00086258 E10E                       	smpsAlterNote       $0E
0008625A E701                       	dc.b	smpsNoAttack, $01
0008625C E10F                       	smpsAlterNote       $0F
0008625E E701                       	dc.b	smpsNoAttack, $01
00086260 E10B                       	smpsAlterNote       $0B
00086262 E701                       	dc.b	smpsNoAttack, $01
00086264 E105                       	smpsAlterNote       $05
00086266 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008626C E109                       	smpsAlterNote       $09
0008626E CE07                       	dc.b	nF6, $07
00086270 E108                       	smpsAlterNote       $08
00086272 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086276 E109                       	smpsAlterNote       $09
00086278 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008627C E108                       	smpsAlterNote       $08
0008627E CC0D                       	dc.b	nEb6, $0D
00086280 E102                       	smpsAlterNote       $02
00086282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086286 E108                       	smpsAlterNote       $08
00086288 E701                       	dc.b	smpsNoAttack, $01
0008628A E10B                       	smpsAlterNote       $0B
0008628C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086290 E105                       	smpsAlterNote       $05
00086292 E701                       	dc.b	smpsNoAttack, $01
00086294 E101                       	smpsAlterNote       $01
00086296 E701                       	dc.b	smpsNoAttack, $01
00086298 E102                       	smpsAlterNote       $02
0008629A E701                       	dc.b	smpsNoAttack, $01
0008629C E108                       	smpsAlterNote       $08
0008629E E701                       	dc.b	smpsNoAttack, $01
000862A0 E10C                       	smpsAlterNote       $0C
000862A2 E701                       	dc.b	smpsNoAttack, $01
000862A4 E108                       	smpsAlterNote       $08
000862A6 E701                       	dc.b	smpsNoAttack, $01
000862A8 E105                       	smpsAlterNote       $05
000862AA E701                       	dc.b	smpsNoAttack, $01
000862AC E101                       	smpsAlterNote       $01
000862AE E701                       	dc.b	smpsNoAttack, $01
000862B0 E105                       	smpsAlterNote       $05
000862B2 E701                       	dc.b	smpsNoAttack, $01
000862B4 E10B                       	smpsAlterNote       $0B
000862B6 E701                       	dc.b	smpsNoAttack, $01
000862B8 E10C                       	smpsAlterNote       $0C
000862BA E701                       	dc.b	smpsNoAttack, $01
000862BC E108                       	smpsAlterNote       $08
000862BE E701                       	dc.b	smpsNoAttack, $01
000862C0 E107                       	smpsAlterNote       $07
000862C2 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000862CC E10B                       	smpsAlterNote       $0B
000862CE C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000862D8 E109                       	smpsAlterNote       $09
000862DA C203                       	dc.b	nF5, $03
000862DC E108                       	smpsAlterNote       $08
000862DE C103 8001                  	dc.b	nE5, $03, nRst, $01
000862E2 E109                       	smpsAlterNote       $09
000862E4 C20D                       	dc.b	nF5, $0D
000862E6 E108                       	smpsAlterNote       $08
000862E8 C10E                       	dc.b	nE5, $0E
000862EA E107                       	smpsAlterNote       $07
000862EC BF0D                       	dc.b	nD5, $0D
000862EE E104                       	smpsAlterNote       $04
000862F0 E701                       	dc.b	smpsNoAttack, $01
000862F2 E100                       	smpsAlterNote       $00
000862F4 E701                       	dc.b	smpsNoAttack, $01
000862F6 E104                       	smpsAlterNote       $04
000862F8 E701                       	dc.b	smpsNoAttack, $01
000862FA E107                       	smpsAlterNote       $07
000862FC E701                       	dc.b	smpsNoAttack, $01
000862FE E10B                       	smpsAlterNote       $0B
00086300 E701                       	dc.b	smpsNoAttack, $01
00086302 E107                       	smpsAlterNote       $07
00086304 E701                       	dc.b	smpsNoAttack, $01
00086306 E101                       	smpsAlterNote       $01
00086308 E701                       	dc.b	smpsNoAttack, $01
0008630A E100                       	smpsAlterNote       $00
0008630C E701                       	dc.b	smpsNoAttack, $01
0008630E E104                       	smpsAlterNote       $04
00086310 E701                       	dc.b	smpsNoAttack, $01
00086312 E10A                       	smpsAlterNote       $0A
00086314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086318 E107                       	smpsAlterNote       $07
0008631A E701                       	dc.b	smpsNoAttack, $01
0008631C E101                       	smpsAlterNote       $01
0008631E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086322 E107                       	smpsAlterNote       $07
00086324 E701                       	dc.b	smpsNoAttack, $01
00086326 E10A                       	smpsAlterNote       $0A
00086328 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008632C E104                       	smpsAlterNote       $04
0008632E E701                       	dc.b	smpsNoAttack, $01
00086330 E100                       	smpsAlterNote       $00
00086332 E701                       	dc.b	smpsNoAttack, $01
00086334 E101                       	smpsAlterNote       $01
00086336 E701                       	dc.b	smpsNoAttack, $01
00086338 E107                       	smpsAlterNote       $07
0008633A E701                       	dc.b	smpsNoAttack, $01
0008633C E10B                       	smpsAlterNote       $0B
0008633E E701                       	dc.b	smpsNoAttack, $01
00086340 E107                       	smpsAlterNote       $07
00086342 E701                       	dc.b	smpsNoAttack, $01
00086344 E104                       	smpsAlterNote       $04
00086346 E701                       	dc.b	smpsNoAttack, $01
00086348 E100                       	smpsAlterNote       $00
0008634A E701                       	dc.b	smpsNoAttack, $01
0008634C E104                       	smpsAlterNote       $04
0008634E E701                       	dc.b	smpsNoAttack, $01
00086350 E10A                       	smpsAlterNote       $0A
00086352 E701                       	dc.b	smpsNoAttack, $01
00086354 E10B                       	smpsAlterNote       $0B
00086356 E701                       	dc.b	smpsNoAttack, $01
00086358 E107                       	smpsAlterNote       $07
0008635A E701                       	dc.b	smpsNoAttack, $01
0008635C E101                       	smpsAlterNote       $01
0008635E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086362 E104                       	smpsAlterNote       $04
00086364 E701                       	dc.b	smpsNoAttack, $01
00086366 E10A                       	smpsAlterNote       $0A
00086368 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008636C E104                       	smpsAlterNote       $04
0008636E E701                       	dc.b	smpsNoAttack, $01
00086370 E101                       	smpsAlterNote       $01
00086372 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086376 E107                       	smpsAlterNote       $07
00086378 E701                       	dc.b	smpsNoAttack, $01
0008637A E10B                       	smpsAlterNote       $0B
0008637C E701                       	dc.b	smpsNoAttack, $01
0008637E E10A                       	smpsAlterNote       $0A
00086380 E701                       	dc.b	smpsNoAttack, $01
00086382 E104                       	smpsAlterNote       $04
00086384 E701                       	dc.b	smpsNoAttack, $01
00086386 E100                       	smpsAlterNote       $00
00086388 E701                       	dc.b	smpsNoAttack, $01
0008638A E104                       	smpsAlterNote       $04
0008638C E701                       	dc.b	smpsNoAttack, $01
0008638E E107                       	smpsAlterNote       $07
00086390 E701                       	dc.b	smpsNoAttack, $01
00086392 E10B                       	smpsAlterNote       $0B
00086394 E701                       	dc.b	smpsNoAttack, $01
00086396 E107                       	smpsAlterNote       $07
00086398 E701                       	dc.b	smpsNoAttack, $01
0008639A E101                       	smpsAlterNote       $01
0008639C E701                       	dc.b	smpsNoAttack, $01
0008639E E100                       	smpsAlterNote       $00
000863A0 E701                       	dc.b	smpsNoAttack, $01
000863A2 E104                       	smpsAlterNote       $04
000863A4 E701                       	dc.b	smpsNoAttack, $01
000863A6 E10A                       	smpsAlterNote       $0A
000863A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863AC E107                       	smpsAlterNote       $07
000863AE E701                       	dc.b	smpsNoAttack, $01
000863B0 E101                       	smpsAlterNote       $01
000863B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863B6 E107                       	smpsAlterNote       $07
000863B8 E701                       	dc.b	smpsNoAttack, $01
000863BA E10A                       	smpsAlterNote       $0A
000863BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863C0 E104                       	smpsAlterNote       $04
000863C2 E701                       	dc.b	smpsNoAttack, $01
000863C4 E100                       	smpsAlterNote       $00
000863C6 E701                       	dc.b	smpsNoAttack, $01
000863C8 E101                       	smpsAlterNote       $01
000863CA E701                       	dc.b	smpsNoAttack, $01
000863CC E107                       	smpsAlterNote       $07
000863CE E701                       	dc.b	smpsNoAttack, $01
000863D0 E10B                       	smpsAlterNote       $0B
000863D2 E701                       	dc.b	smpsNoAttack, $01
000863D4 E107                       	smpsAlterNote       $07
000863D6 E701                       	dc.b	smpsNoAttack, $01
000863D8 E104                       	smpsAlterNote       $04
000863DA E701                       	dc.b	smpsNoAttack, $01
000863DC E100                       	smpsAlterNote       $00
000863DE E701                       	dc.b	smpsNoAttack, $01
000863E0 E101                       	smpsAlterNote       $01
000863E2 8001                       	dc.b	nRst, $01
000863E4 E109                       	smpsAlterNote       $09
000863E6 C20D                       	dc.b	nF5, $0D
000863E8 E106                       	smpsAlterNote       $06
000863EA E701                       	dc.b	smpsNoAttack, $01
000863EC E102                       	smpsAlterNote       $02
000863EE E701                       	dc.b	smpsNoAttack, $01
000863F0 E106                       	smpsAlterNote       $06
000863F2 E701                       	dc.b	smpsNoAttack, $01
000863F4 E10C                       	smpsAlterNote       $0C
000863F6 E701                       	dc.b	smpsNoAttack, $01
000863F8 E10D                       	smpsAlterNote       $0D
000863FA E701                       	dc.b	smpsNoAttack, $01
000863FC E109                       	smpsAlterNote       $09
000863FE E701                       	dc.b	smpsNoAttack, $01
00086400 E103                       	smpsAlterNote       $03
00086402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086406 E106                       	smpsAlterNote       $06
00086408 E701                       	dc.b	smpsNoAttack, $01
0008640A E10C                       	smpsAlterNote       $0C
0008640C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086410 E106                       	smpsAlterNote       $06
00086412 E701                       	dc.b	smpsNoAttack, $01
00086414 E103                       	smpsAlterNote       $03
00086416 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008641A E109                       	smpsAlterNote       $09
0008641C E701                       	dc.b	smpsNoAttack, $01
0008641E E10D                       	smpsAlterNote       $0D
00086420 E701                       	dc.b	smpsNoAttack, $01
00086422 E10C                       	smpsAlterNote       $0C
00086424 E701                       	dc.b	smpsNoAttack, $01
00086426 E109                       	smpsAlterNote       $09
00086428 8001                       	dc.b	nRst, $01
0008642A E108                       	smpsAlterNote       $08
0008642C C10D                       	dc.b	nE5, $0D
0008642E E109                       	smpsAlterNote       $09
00086430 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00086434 E108                       	smpsAlterNote       $08
00086436 C10D                       	dc.b	nE5, $0D
00086438 E102                       	smpsAlterNote       $02
0008643A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008643E E105                       	smpsAlterNote       $05
00086440 E701                       	dc.b	smpsNoAttack, $01
00086442 E108                       	smpsAlterNote       $08
00086444 8001                       	dc.b	nRst, $01
00086446 E107                       	smpsAlterNote       $07
00086448 BF0D                       	dc.b	nD5, $0D
0008644A E108                       	smpsAlterNote       $08
0008644C C107                       	dc.b	nE5, $07
0008644E E109                       	smpsAlterNote       $09
00086450 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00086456 E10B                       	smpsAlterNote       $0B
00086458 C603                       	dc.b	nA5, $03
0008645A E10C                       	smpsAlterNote       $0C
0008645C C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00086462 E10B                       	smpsAlterNote       $0B
00086464 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008646A E109                       	smpsAlterNote       $09
0008646C D003                       	dc.b	nG6, $03
0008646E E108                       	smpsAlterNote       $08
00086470 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00086474 E10B                       	smpsAlterNote       $0B
00086476 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008647A E108                       	smpsAlterNote       $08
0008647C C102                       	dc.b	nE5, $02
00086480 E10C                       	smpsAlterNote       $0C
00086482 E6FB                       	smpsAlterVol        $FB
00086484 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00086490 8001                       	dc.b	nRst, $01
00086492 E10B                       	smpsAlterNote       $0B
00086494 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008649C E107                       	smpsAlterNote       $07
0008649E A706 8001                  	dc.b	nD3, $06, nRst, $01
000864A2 E10B                       	smpsAlterNote       $0B
000864A4 A203                       	dc.b	nA2, $03
000864A6 E109                       	smpsAlterNote       $09
000864A8 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000864AC E108                       	smpsAlterNote       $08
000864AE A906                       	dc.b	nE3, $06
000864B0 E107                       	smpsAlterNote       $07
000864B2 A703 8001                  	dc.b	nD3, $03, nRst, $01
000864B6 E106                       	smpsAlterNote       $06
000864B8 A503                       	dc.b	nC3, $03
000864BA E10C                       	smpsAlterNote       $0C
000864BC A303 8001                  	dc.b	nBb2, $03, nRst, $01
000864C0 E10B                       	smpsAlterNote       $0B
000864C2 A203 8004                  	dc.b	nA2, $03, nRst, $04
000864C6 E11B                       	smpsAlterNote       $1B
000864C8 C401                       	dc.b	nG5, $01
000864CA E1F4                       	smpsAlterNote       $F4
000864CC E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000864CF E106                       	smpsAlterNote       $06
000864D1 E701                       	dc.b	smpsNoAttack, $01
000864D3 E10F                       	smpsAlterNote       $0F
000864D5 E701                       	dc.b	smpsNoAttack, $01
000864D7 E1E4                       	smpsAlterNote       $E4
000864D9 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000864DC E1F6                       	smpsAlterNote       $F6
000864DE E701                       	dc.b	smpsNoAttack, $01
000864E0 E108                       	smpsAlterNote       $08
000864E2 E701                       	dc.b	smpsNoAttack, $01
000864E4 E10B                       	smpsAlterNote       $0B
000864E6 E706                       	dc.b	smpsNoAttack, $06
000864E8 E105                       	smpsAlterNote       $05
000864EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864EE E108                       	smpsAlterNote       $08
000864F0 E701                       	dc.b	smpsNoAttack, $01
000864F2 E10E                       	smpsAlterNote       $0E
000864F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864F8 E108                       	smpsAlterNote       $08
000864FA E701                       	dc.b	smpsNoAttack, $01
000864FC E105                       	smpsAlterNote       $05
000864FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086502 E10B                       	smpsAlterNote       $0B
00086504 E701                       	dc.b	smpsNoAttack, $01
00086506 E10F                       	smpsAlterNote       $0F
00086508 E701                       	dc.b	smpsNoAttack, $01
0008650A E10E                       	smpsAlterNote       $0E
0008650C E701                       	dc.b	smpsNoAttack, $01
0008650E E108                       	smpsAlterNote       $08
00086510 E701                       	dc.b	smpsNoAttack, $01
00086512 E104                       	smpsAlterNote       $04
00086514 E701                       	dc.b	smpsNoAttack, $01
00086516 E108                       	smpsAlterNote       $08
00086518 E701                       	dc.b	smpsNoAttack, $01
0008651A E10B                       	smpsAlterNote       $0B
0008651C E701                       	dc.b	smpsNoAttack, $01
0008651E E10F                       	smpsAlterNote       $0F
00086520 E701                       	dc.b	smpsNoAttack, $01
00086522 E10B                       	smpsAlterNote       $0B
00086524 E701                       	dc.b	smpsNoAttack, $01
00086526 E105                       	smpsAlterNote       $05
00086528 E701                       	dc.b	smpsNoAttack, $01
0008652A E104                       	smpsAlterNote       $04
0008652C E701                       	dc.b	smpsNoAttack, $01
0008652E E108                       	smpsAlterNote       $08
00086530 E701                       	dc.b	smpsNoAttack, $01
00086532 E10E                       	smpsAlterNote       $0E
00086534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086538 E10B                       	smpsAlterNote       $0B
0008653A E701                       	dc.b	smpsNoAttack, $01
0008653C E105                       	smpsAlterNote       $05
0008653E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086542 E10B                       	smpsAlterNote       $0B
00086544 E701                       	dc.b	smpsNoAttack, $01
00086546 E10E                       	smpsAlterNote       $0E
00086548 E701                       	dc.b	smpsNoAttack, $01
0008654A E10F                       	smpsAlterNote       $0F
0008654C 8001                       	dc.b	nRst, $01
0008654E E109                       	smpsAlterNote       $09
00086550 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00086556 E108                       	smpsAlterNote       $08
00086558 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008655C E109                       	smpsAlterNote       $09
0008655E C202                       	dc.b	nF5, $02
00086560 E108                       	smpsAlterNote       $08
00086562 C102                       	dc.b	nE5, $02
00086564 E107                       	smpsAlterNote       $07
00086566 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008656A E108                       	smpsAlterNote       $08
0008656C C101 8001                  	dc.b	nE5, $01, nRst, $01
00086570 E107                       	smpsAlterNote       $07
00086572 BF02                       	dc.b	nD5, $02
00086574 E106                       	smpsAlterNote       $06
00086576 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008657A E107                       	smpsAlterNote       $07
0008657C BF01 8001                  	dc.b	nD5, $01, nRst, $01
00086580 E106                       	smpsAlterNote       $06
00086582 BD02                       	dc.b	nC5, $02
00086584 E10C                       	smpsAlterNote       $0C
00086586 BB02                       	dc.b	nBb4, $02
00086588 E106                       	smpsAlterNote       $06
0008658A BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008658E E10C                       	smpsAlterNote       $0C
00086590 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00086594 E10B                       	smpsAlterNote       $0B
00086596 BA02                       	dc.b	nA4, $02
00086598 E10C                       	smpsAlterNote       $0C
0008659A BB02                       	dc.b	nBb4, $02
0008659C E10B                       	smpsAlterNote       $0B
0008659E BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000865A8 E108                       	smpsAlterNote       $08
000865AA B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000865B2 E107                       	smpsAlterNote       $07
000865B4 BE02                       	dc.b	nCs5, $02
000865B6 E10B                       	smpsAlterNote       $0B
000865B8 BA02                       	dc.b	nA4, $02
000865BA E109                       	smpsAlterNote       $09
000865BC B802 8001                  	dc.b	nG4, $02, nRst, $01
000865C0 E108                       	smpsAlterNote       $08
000865C2 B501 8001                  	dc.b	nE4, $01, nRst, $01
000865C6 E10B                       	smpsAlterNote       $0B
000865C8 AE02                       	dc.b	nA3, $02
000865CA E10C                       	smpsAlterNote       $0C
000865CC A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000865D8 E10B                       	smpsAlterNote       $0B
000865DA A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000865E2 E107                       	smpsAlterNote       $07
000865E4 A706 8001                  	dc.b	nD3, $06, nRst, $01
000865E8 E10B                       	smpsAlterNote       $0B
000865EA A203                       	dc.b	nA2, $03
000865EC E109                       	smpsAlterNote       $09
000865EE AA03 8001                  	dc.b	nF3, $03, nRst, $01
000865F2 E108                       	smpsAlterNote       $08
000865F4 A906 8001                  	dc.b	nE3, $06, nRst, $01
000865F8 E107                       	smpsAlterNote       $07
000865FA A702 8001                  	dc.b	nD3, $02, nRst, $01
000865FE E106                       	smpsAlterNote       $06
00086600 A503                       	dc.b	nC3, $03
00086602 E10C                       	smpsAlterNote       $0C
00086604 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008660A E107                       	smpsAlterNote       $07
0008660C B20D                       	dc.b	nCs4, $0D
0008660E E104                       	smpsAlterNote       $04
00086610 E701                       	dc.b	smpsNoAttack, $01
00086612 E100                       	smpsAlterNote       $00
00086614 E701                       	dc.b	smpsNoAttack, $01
00086616 E104                       	smpsAlterNote       $04
00086618 E701                       	dc.b	smpsNoAttack, $01
0008661A E10A                       	smpsAlterNote       $0A
0008661C E701                       	dc.b	smpsNoAttack, $01
0008661E E10B                       	smpsAlterNote       $0B
00086620 E701                       	dc.b	smpsNoAttack, $01
00086622 E107                       	smpsAlterNote       $07
00086624 E701                       	dc.b	smpsNoAttack, $01
00086626 E101                       	smpsAlterNote       $01
00086628 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008662C E104                       	smpsAlterNote       $04
0008662E E701                       	dc.b	smpsNoAttack, $01
00086630 E10A                       	smpsAlterNote       $0A
00086632 E701                       	dc.b	smpsNoAttack, $01
00086634 E10B                       	smpsAlterNote       $0B
00086636 8001                       	dc.b	nRst, $01
00086638 E107                       	smpsAlterNote       $07
0008663A B30D                       	dc.b	nD4, $0D
0008663C E104                       	smpsAlterNote       $04
0008663E E701                       	dc.b	smpsNoAttack, $01
00086640 E100                       	smpsAlterNote       $00
00086642 E701                       	dc.b	smpsNoAttack, $01
00086644 E104                       	smpsAlterNote       $04
00086646 E701                       	dc.b	smpsNoAttack, $01
00086648 E10A                       	smpsAlterNote       $0A
0008664A E701                       	dc.b	smpsNoAttack, $01
0008664C E10B                       	smpsAlterNote       $0B
0008664E E701                       	dc.b	smpsNoAttack, $01
00086650 E107                       	smpsAlterNote       $07
00086652 E701                       	dc.b	smpsNoAttack, $01
00086654 E101                       	smpsAlterNote       $01
00086656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008665A E104                       	smpsAlterNote       $04
0008665C E701                       	dc.b	smpsNoAttack, $01
0008665E E10A                       	smpsAlterNote       $0A
00086660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086664 E104                       	smpsAlterNote       $04
00086666 E701                       	dc.b	smpsNoAttack, $01
00086668 E101                       	smpsAlterNote       $01
0008666A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008666E E107                       	smpsAlterNote       $07
00086670 E701                       	dc.b	smpsNoAttack, $01
00086672 E10B                       	smpsAlterNote       $0B
00086674 E701                       	dc.b	smpsNoAttack, $01
00086676 E10A                       	smpsAlterNote       $0A
00086678 E701                       	dc.b	smpsNoAttack, $01
0008667A E107                       	smpsAlterNote       $07
0008667C 8001                       	dc.b	nRst, $01
0008667E E108                       	smpsAlterNote       $08
00086680 B50D                       	dc.b	nE4, $0D
00086682 E102                       	smpsAlterNote       $02
00086684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086688 E105                       	smpsAlterNote       $05
0008668A E701                       	dc.b	smpsNoAttack, $01
0008668C E10B                       	smpsAlterNote       $0B
0008668E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086692 E105                       	smpsAlterNote       $05
00086694 E701                       	dc.b	smpsNoAttack, $01
00086696 E102                       	smpsAlterNote       $02
00086698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008669C E108                       	smpsAlterNote       $08
0008669E E701                       	dc.b	smpsNoAttack, $01
000866A0 E10C                       	smpsAlterNote       $0C
000866A2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000866A6 E107                       	smpsAlterNote       $07
000866A8 B30D                       	dc.b	nD4, $0D
000866AA E101                       	smpsAlterNote       $01
000866AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866B0 E104                       	smpsAlterNote       $04
000866B2 E701                       	dc.b	smpsNoAttack, $01
000866B4 E10A                       	smpsAlterNote       $0A
000866B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866BA E104                       	smpsAlterNote       $04
000866BC E701                       	dc.b	smpsNoAttack, $01
000866BE E101                       	smpsAlterNote       $01
000866C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866C4 E107                       	smpsAlterNote       $07
000866C6 E701                       	dc.b	smpsNoAttack, $01
000866C8 E10B                       	smpsAlterNote       $0B
000866CA E701                       	dc.b	smpsNoAttack, $01
000866CC E10A                       	smpsAlterNote       $0A
000866CE E701                       	dc.b	smpsNoAttack, $01
000866D0 E104                       	smpsAlterNote       $04
000866D2 E701                       	dc.b	smpsNoAttack, $01
000866D4 E100                       	smpsAlterNote       $00
000866D6 E701                       	dc.b	smpsNoAttack, $01
000866D8 E104                       	smpsAlterNote       $04
000866DA E701                       	dc.b	smpsNoAttack, $01
000866DC E107                       	smpsAlterNote       $07
000866DE E701                       	dc.b	smpsNoAttack, $01
000866E0 E10B                       	smpsAlterNote       $0B
000866E2 E701                       	dc.b	smpsNoAttack, $01
000866E4 E107                       	smpsAlterNote       $07
000866E6 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000866EA E101                       	smpsAlterNote       $01
000866EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866F0 E107                       	smpsAlterNote       $07
000866F2 E701                       	dc.b	smpsNoAttack, $01
000866F4 E10A                       	smpsAlterNote       $0A
000866F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866FA E104                       	smpsAlterNote       $04
000866FC E701                       	dc.b	smpsNoAttack, $01
000866FE E100                       	smpsAlterNote       $00
00086700 E701                       	dc.b	smpsNoAttack, $01
00086702 E101                       	smpsAlterNote       $01
00086704 E701                       	dc.b	smpsNoAttack, $01
00086706 E107                       	smpsAlterNote       $07
00086708 E701                       	dc.b	smpsNoAttack, $01
0008670A E10B                       	smpsAlterNote       $0B
0008670C E701                       	dc.b	smpsNoAttack, $01
0008670E E107                       	smpsAlterNote       $07
00086710 B30E                       	dc.b	nD4, $0E
00086712 E101                       	smpsAlterNote       $01
00086714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086718 E107                       	smpsAlterNote       $07
0008671A E701                       	dc.b	smpsNoAttack, $01
0008671C E10A                       	smpsAlterNote       $0A
0008671E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086722 E104                       	smpsAlterNote       $04
00086724 E701                       	dc.b	smpsNoAttack, $01
00086726 E100                       	smpsAlterNote       $00
00086728 E701                       	dc.b	smpsNoAttack, $01
0008672A E101                       	smpsAlterNote       $01
0008672C E701                       	dc.b	smpsNoAttack, $01
0008672E E107                       	smpsAlterNote       $07
00086730 E701                       	dc.b	smpsNoAttack, $01
00086732 E10B                       	smpsAlterNote       $0B
00086734 E701                       	dc.b	smpsNoAttack, $01
00086736 E107                       	smpsAlterNote       $07
00086738 E701                       	dc.b	smpsNoAttack, $01
0008673A E104                       	smpsAlterNote       $04
0008673C E701                       	dc.b	smpsNoAttack, $01
0008673E E100                       	smpsAlterNote       $00
00086740 E701                       	dc.b	smpsNoAttack, $01
00086742 E104                       	smpsAlterNote       $04
00086744 E701                       	dc.b	smpsNoAttack, $01
00086746 E10A                       	smpsAlterNote       $0A
00086748 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008674C E107                       	smpsAlterNote       $07
0008674E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00086752 E104                       	smpsAlterNote       $04
00086754 E701                       	dc.b	smpsNoAttack, $01
00086756 E100                       	smpsAlterNote       $00
00086758 E701                       	dc.b	smpsNoAttack, $01
0008675A E101                       	smpsAlterNote       $01
0008675C E701                       	dc.b	smpsNoAttack, $01
0008675E E107                       	smpsAlterNote       $07
00086760 E701                       	dc.b	smpsNoAttack, $01
00086762 E10B                       	smpsAlterNote       $0B
00086764 E701                       	dc.b	smpsNoAttack, $01
00086766 E107                       	smpsAlterNote       $07
00086768 E701                       	dc.b	smpsNoAttack, $01
0008676A E104                       	smpsAlterNote       $04
0008676C E701                       	dc.b	smpsNoAttack, $01
0008676E E100                       	smpsAlterNote       $00
00086770 E701                       	dc.b	smpsNoAttack, $01
00086772 E104                       	smpsAlterNote       $04
00086774 E701                       	dc.b	smpsNoAttack, $01
00086776 E10A                       	smpsAlterNote       $0A
00086778 E701                       	dc.b	smpsNoAttack, $01
0008677A E10B                       	smpsAlterNote       $0B
0008677C E701                       	dc.b	smpsNoAttack, $01
00086780 E6FF                       	smpsAlterVol        $FF
00086782 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008678E 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00086796 E109                       	smpsAlterNote       $09
00086798 E601                       	smpsAlterVol        $01
0008679A B60D                       	dc.b	nF4, $0D
0008679C E106                       	smpsAlterNote       $06
0008679E E701                       	dc.b	smpsNoAttack, $01
000867A0 E102                       	smpsAlterNote       $02
000867A2 E701                       	dc.b	smpsNoAttack, $01
000867A4 E106                       	smpsAlterNote       $06
000867A6 E701                       	dc.b	smpsNoAttack, $01
000867A8 E109                       	smpsAlterNote       $09
000867AA E701                       	dc.b	smpsNoAttack, $01
000867AC E10D                       	smpsAlterNote       $0D
000867AE E701                       	dc.b	smpsNoAttack, $01
000867B0 E109                       	smpsAlterNote       $09
000867B2 E701                       	dc.b	smpsNoAttack, $01
000867B4 E103                       	smpsAlterNote       $03
000867B6 E701                       	dc.b	smpsNoAttack, $01
000867B8 E102                       	smpsAlterNote       $02
000867BA E701                       	dc.b	smpsNoAttack, $01
000867BC E106                       	smpsAlterNote       $06
000867BE E701                       	dc.b	smpsNoAttack, $01
000867C0 E10C                       	smpsAlterNote       $0C
000867C2 E701                       	dc.b	smpsNoAttack, $01
000867C4 E10D                       	smpsAlterNote       $0D
000867C6 8001                       	dc.b	nRst, $01
000867C8 E109                       	smpsAlterNote       $09
000867CA B80D                       	dc.b	nG4, $0D
000867CC E106                       	smpsAlterNote       $06
000867CE E701                       	dc.b	smpsNoAttack, $01
000867D0 E102                       	smpsAlterNote       $02
000867D2 E701                       	dc.b	smpsNoAttack, $01
000867D4 E106                       	smpsAlterNote       $06
000867D6 E701                       	dc.b	smpsNoAttack, $01
000867D8 E109                       	smpsAlterNote       $09
000867DA E701                       	dc.b	smpsNoAttack, $01
000867DC E10D                       	smpsAlterNote       $0D
000867DE E701                       	dc.b	smpsNoAttack, $01
000867E0 E109                       	smpsAlterNote       $09
000867E2 E701                       	dc.b	smpsNoAttack, $01
000867E4 E103                       	smpsAlterNote       $03
000867E6 E701                       	dc.b	smpsNoAttack, $01
000867E8 E102                       	smpsAlterNote       $02
000867EA E701                       	dc.b	smpsNoAttack, $01
000867EC E106                       	smpsAlterNote       $06
000867EE E701                       	dc.b	smpsNoAttack, $01
000867F0 E10C                       	smpsAlterNote       $0C
000867F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867F6 E106                       	smpsAlterNote       $06
000867F8 E701                       	dc.b	smpsNoAttack, $01
000867FA E103                       	smpsAlterNote       $03
000867FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086800 E109                       	smpsAlterNote       $09
00086802 E701                       	dc.b	smpsNoAttack, $01
00086804 E10D                       	smpsAlterNote       $0D
00086806 E701                       	dc.b	smpsNoAttack, $01
00086808 E10C                       	smpsAlterNote       $0C
0008680A E701                       	dc.b	smpsNoAttack, $01
0008680C E109                       	smpsAlterNote       $09
0008680E 8001                       	dc.b	nRst, $01
00086810 E10B                       	smpsAlterNote       $0B
00086812 BA0D                       	dc.b	nA4, $0D
00086814 E105                       	smpsAlterNote       $05
00086816 E701                       	dc.b	smpsNoAttack, $01
00086818 E104                       	smpsAlterNote       $04
0008681A E701                       	dc.b	smpsNoAttack, $01
0008681C E108                       	smpsAlterNote       $08
0008681E E701                       	dc.b	smpsNoAttack, $01
00086820 E10E                       	smpsAlterNote       $0E
00086822 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086826 E10B                       	smpsAlterNote       $0B
00086828 E701                       	dc.b	smpsNoAttack, $01
0008682A E105                       	smpsAlterNote       $05
0008682C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086830 E10B                       	smpsAlterNote       $0B
00086832 E701                       	dc.b	smpsNoAttack, $01
00086834 E10E                       	smpsAlterNote       $0E
00086836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008683A E108                       	smpsAlterNote       $08
0008683C E701                       	dc.b	smpsNoAttack, $01
0008683E E104                       	smpsAlterNote       $04
00086840 E701                       	dc.b	smpsNoAttack, $01
00086842 E105                       	smpsAlterNote       $05
00086844 E701                       	dc.b	smpsNoAttack, $01
00086846 E10B                       	smpsAlterNote       $0B
00086848 E701                       	dc.b	smpsNoAttack, $01
0008684A E10F                       	smpsAlterNote       $0F
0008684C E701                       	dc.b	smpsNoAttack, $01
0008684E E10B                       	smpsAlterNote       $0B
00086850 E701                       	dc.b	smpsNoAttack, $01
00086852 E108                       	smpsAlterNote       $08
00086854 E701                       	dc.b	smpsNoAttack, $01
00086856 E104                       	smpsAlterNote       $04
00086858 E701                       	dc.b	smpsNoAttack, $01
0008685A E108                       	smpsAlterNote       $08
0008685C E701                       	dc.b	smpsNoAttack, $01
0008685E E10E                       	smpsAlterNote       $0E
00086860 E701                       	dc.b	smpsNoAttack, $01
00086862 E10F                       	smpsAlterNote       $0F
00086864 E701                       	dc.b	smpsNoAttack, $01
00086866 E10B                       	smpsAlterNote       $0B
00086868 E701                       	dc.b	smpsNoAttack, $01
0008686A E105                       	smpsAlterNote       $05
0008686C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086870 E108                       	smpsAlterNote       $08
00086872 E701                       	dc.b	smpsNoAttack, $01
00086874 E10E                       	smpsAlterNote       $0E
00086876 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008687A E108                       	smpsAlterNote       $08
0008687C E701                       	dc.b	smpsNoAttack, $01
0008687E E105                       	smpsAlterNote       $05
00086880 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086884 E108                       	smpsAlterNote       $08
00086886 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008688A E109                       	smpsAlterNote       $09
0008688C B60D                       	dc.b	nF4, $0D
0008688E E103                       	smpsAlterNote       $03
00086890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086894 E106                       	smpsAlterNote       $06
00086896 E701                       	dc.b	smpsNoAttack, $01
00086898 E10C                       	smpsAlterNote       $0C
0008689A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008689E E106                       	smpsAlterNote       $06
000868A0 E701                       	dc.b	smpsNoAttack, $01
000868A2 E103                       	smpsAlterNote       $03
000868A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868A8 E109                       	smpsAlterNote       $09
000868AA E701                       	dc.b	smpsNoAttack, $01
000868AC E10D                       	smpsAlterNote       $0D
000868AE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000868B2 E109                       	smpsAlterNote       $09
000868B4 B80D                       	dc.b	nG4, $0D
000868B6 E103                       	smpsAlterNote       $03
000868B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868BC E109                       	smpsAlterNote       $09
000868BE E701                       	dc.b	smpsNoAttack, $01
000868C0 E10C                       	smpsAlterNote       $0C
000868C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868C6 E106                       	smpsAlterNote       $06
000868C8 E701                       	dc.b	smpsNoAttack, $01
000868CA E102                       	smpsAlterNote       $02
000868CC E701                       	dc.b	smpsNoAttack, $01
000868CE E103                       	smpsAlterNote       $03
000868D0 E701                       	dc.b	smpsNoAttack, $01
000868D2 E109                       	smpsAlterNote       $09
000868D4 E701                       	dc.b	smpsNoAttack, $01
000868D6 E10D                       	smpsAlterNote       $0D
000868D8 E701                       	dc.b	smpsNoAttack, $01
000868DA E109                       	smpsAlterNote       $09
000868DC E701                       	dc.b	smpsNoAttack, $01
000868DE E106                       	smpsAlterNote       $06
000868E0 E701                       	dc.b	smpsNoAttack, $01
000868E2 E102                       	smpsAlterNote       $02
000868E4 E701                       	dc.b	smpsNoAttack, $01
000868E6 E106                       	smpsAlterNote       $06
000868E8 E701                       	dc.b	smpsNoAttack, $01
000868EA E10C                       	smpsAlterNote       $0C
000868EC E701                       	dc.b	smpsNoAttack, $01
000868EE E10D                       	smpsAlterNote       $0D
000868F0 E701                       	dc.b	smpsNoAttack, $01
000868F2 E109                       	smpsAlterNote       $09
000868F4 E701                       	dc.b	smpsNoAttack, $01
000868F6 E10B                       	smpsAlterNote       $0B
000868F8 BA0D                       	dc.b	nA4, $0D
000868FA E108                       	smpsAlterNote       $08
000868FC E701                       	dc.b	smpsNoAttack, $01
000868FE E105                       	smpsAlterNote       $05
00086900 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086904 E10B                       	smpsAlterNote       $0B
00086906 E701                       	dc.b	smpsNoAttack, $01
00086908 E10F                       	smpsAlterNote       $0F
0008690A E701                       	dc.b	smpsNoAttack, $01
0008690C E10E                       	smpsAlterNote       $0E
0008690E E701                       	dc.b	smpsNoAttack, $01
00086910 E108                       	smpsAlterNote       $08
00086912 E701                       	dc.b	smpsNoAttack, $01
00086914 E104                       	smpsAlterNote       $04
00086916 E701                       	dc.b	smpsNoAttack, $01
00086918 E108                       	smpsAlterNote       $08
0008691A E701                       	dc.b	smpsNoAttack, $01
0008691C E10B                       	smpsAlterNote       $0B
0008691E E701                       	dc.b	smpsNoAttack, $01
00086920 E10F                       	smpsAlterNote       $0F
00086922 E701                       	dc.b	smpsNoAttack, $01
00086924 E10B                       	smpsAlterNote       $0B
00086926 E701                       	dc.b	smpsNoAttack, $01
00086928 E105                       	smpsAlterNote       $05
0008692A E701                       	dc.b	smpsNoAttack, $01
0008692C E104                       	smpsAlterNote       $04
0008692E E701                       	dc.b	smpsNoAttack, $01
00086930 E108                       	smpsAlterNote       $08
00086932 E701                       	dc.b	smpsNoAttack, $01
00086934 E10E                       	smpsAlterNote       $0E
00086936 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008693A E10B                       	smpsAlterNote       $0B
0008693C E701                       	dc.b	smpsNoAttack, $01
0008693E E105                       	smpsAlterNote       $05
00086940 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086944 E10B                       	smpsAlterNote       $0B
00086946 E701                       	dc.b	smpsNoAttack, $01
00086948 E10E                       	smpsAlterNote       $0E
0008694A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008694E E108                       	smpsAlterNote       $08
00086950 E701                       	dc.b	smpsNoAttack, $01
00086952 E105                       	smpsAlterNote       $05
00086954 8001                       	dc.b	nRst, $01
00086956 E109                       	smpsAlterNote       $09
00086958 B60A                       	dc.b	nF4, $0A
0008695A E108                       	smpsAlterNote       $08
0008695C B507                       	dc.b	nE4, $07
0008695E E107                       	smpsAlterNote       $07
00086960 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00086964 E108                       	smpsAlterNote       $08
00086966 B503                       	dc.b	nE4, $03
00086968 E109                       	smpsAlterNote       $09
0008696A B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00086972 E10B                       	smpsAlterNote       $0B
00086974 BA0D                       	dc.b	nA4, $0D
00086976 E108                       	smpsAlterNote       $08
00086978 E701                       	dc.b	smpsNoAttack, $01
0008697A E104                       	smpsAlterNote       $04
0008697C E701                       	dc.b	smpsNoAttack, $01
0008697E E108                       	smpsAlterNote       $08
00086980 E701                       	dc.b	smpsNoAttack, $01
00086982 E10B                       	smpsAlterNote       $0B
00086984 E701                       	dc.b	smpsNoAttack, $01
00086986 E10F                       	smpsAlterNote       $0F
00086988 E701                       	dc.b	smpsNoAttack, $01
0008698A E10B                       	smpsAlterNote       $0B
0008698C E701                       	dc.b	smpsNoAttack, $01
0008698E E105                       	smpsAlterNote       $05
00086990 E701                       	dc.b	smpsNoAttack, $01
00086992 E104                       	smpsAlterNote       $04
00086994 E701                       	dc.b	smpsNoAttack, $01
00086996 E108                       	smpsAlterNote       $08
00086998 E701                       	dc.b	smpsNoAttack, $01
0008699A E10E                       	smpsAlterNote       $0E
0008699C E701                       	dc.b	smpsNoAttack, $01
0008699E E10F                       	smpsAlterNote       $0F
000869A0 8001                       	dc.b	nRst, $01
000869A2 E109                       	smpsAlterNote       $09
000869A4 C20D                       	dc.b	nF5, $0D
000869A6 E106                       	smpsAlterNote       $06
000869A8 E701                       	dc.b	smpsNoAttack, $01
000869AA E102                       	smpsAlterNote       $02
000869AC E701                       	dc.b	smpsNoAttack, $01
000869AE E106                       	smpsAlterNote       $06
000869B0 E701                       	dc.b	smpsNoAttack, $01
000869B2 E109                       	smpsAlterNote       $09
000869B4 E701                       	dc.b	smpsNoAttack, $01
000869B6 E10D                       	smpsAlterNote       $0D
000869B8 E701                       	dc.b	smpsNoAttack, $01
000869BA E109                       	smpsAlterNote       $09
000869BC E701                       	dc.b	smpsNoAttack, $01
000869BE E103                       	smpsAlterNote       $03
000869C0 E701                       	dc.b	smpsNoAttack, $01
000869C2 E102                       	smpsAlterNote       $02
000869C4 E701                       	dc.b	smpsNoAttack, $01
000869C6 E106                       	smpsAlterNote       $06
000869C8 E701                       	dc.b	smpsNoAttack, $01
000869CA E10C                       	smpsAlterNote       $0C
000869CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869D0 E109                       	smpsAlterNote       $09
000869D2 E701                       	dc.b	smpsNoAttack, $01
000869D4 E103                       	smpsAlterNote       $03
000869D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869DA E109                       	smpsAlterNote       $09
000869DC E701                       	dc.b	smpsNoAttack, $01
000869DE E10C                       	smpsAlterNote       $0C
000869E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869E4 E106                       	smpsAlterNote       $06
000869E6 E701                       	dc.b	smpsNoAttack, $01
000869E8 E102                       	smpsAlterNote       $02
000869EA E701                       	dc.b	smpsNoAttack, $01
000869EC E103                       	smpsAlterNote       $03
000869EE E701                       	dc.b	smpsNoAttack, $01
000869F0 E109                       	smpsAlterNote       $09
000869F2 E701                       	dc.b	smpsNoAttack, $01
000869F4 E10D                       	smpsAlterNote       $0D
000869F6 E701                       	dc.b	smpsNoAttack, $01
000869F8 E109                       	smpsAlterNote       $09
000869FA E701                       	dc.b	smpsNoAttack, $01
000869FC E106                       	smpsAlterNote       $06
000869FE E701                       	dc.b	smpsNoAttack, $01
00086A00 E102                       	smpsAlterNote       $02
00086A02 E701                       	dc.b	smpsNoAttack, $01
00086A04 E106                       	smpsAlterNote       $06
00086A06 E701                       	dc.b	smpsNoAttack, $01
00086A08 E10C                       	smpsAlterNote       $0C
00086A0A E701                       	dc.b	smpsNoAttack, $01
00086A0C E10D                       	smpsAlterNote       $0D
00086A0E E701                       	dc.b	smpsNoAttack, $01
00086A10 E109                       	smpsAlterNote       $09
00086A12 E701                       	dc.b	smpsNoAttack, $01
00086A14 E103                       	smpsAlterNote       $03
00086A16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A1A E106                       	smpsAlterNote       $06
00086A1C E701                       	dc.b	smpsNoAttack, $01
00086A1E E10C                       	smpsAlterNote       $0C
00086A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A24 E106                       	smpsAlterNote       $06
00086A26 E701                       	dc.b	smpsNoAttack, $01
00086A28 E103                       	smpsAlterNote       $03
00086A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A2E E109                       	smpsAlterNote       $09
00086A30 E701                       	dc.b	smpsNoAttack, $01
00086A32 E10D                       	smpsAlterNote       $0D
00086A34 E701                       	dc.b	smpsNoAttack, $01
00086A36 E10C                       	smpsAlterNote       $0C
00086A38 E701                       	dc.b	smpsNoAttack, $01
00086A3A E106                       	smpsAlterNote       $06
00086A3C E701                       	dc.b	smpsNoAttack, $01
00086A3E E103                       	smpsAlterNote       $03
00086A40 8001                       	dc.b	nRst, $01
00086A42 E109                       	smpsAlterNote       $09
00086A44 C206 8001                  	dc.b	nF5, $06, nRst, $01
00086A4A E10C                       	smpsAlterNote       $0C
00086A4C E601                       	smpsAlterVol        $01
00086A4E BB0D                       	dc.b	nBb4, $0D
00086A50 E106                       	smpsAlterNote       $06
00086A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A56 E109                       	smpsAlterNote       $09
00086A58 E701                       	dc.b	smpsNoAttack, $01
00086A5A E10F                       	smpsAlterNote       $0F
00086A5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A60 E109                       	smpsAlterNote       $09
00086A62 E701                       	dc.b	smpsNoAttack, $01
00086A64 E106                       	smpsAlterNote       $06
00086A66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A6A E10C                       	smpsAlterNote       $0C
00086A6C E701                       	dc.b	smpsNoAttack, $01
00086A6E E110                       	smpsAlterNote       $10
00086A70 E701                       	dc.b	smpsNoAttack, $01
00086A72 E10F                       	smpsAlterNote       $0F
00086A74 E701                       	dc.b	smpsNoAttack, $01
00086A76 E109                       	smpsAlterNote       $09
00086A78 E701                       	dc.b	smpsNoAttack, $01
00086A7A E105                       	smpsAlterNote       $05
00086A7C E701                       	dc.b	smpsNoAttack, $01
00086A7E E106                       	smpsAlterNote       $06
00086A80 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00086A84 E103                       	smpsAlterNote       $03
00086A86 E701                       	dc.b	smpsNoAttack, $01
00086A88 E1FF                       	smpsAlterNote       $FF
00086A8A E701                       	dc.b	smpsNoAttack, $01
00086A8C E103                       	smpsAlterNote       $03
00086A8E E701                       	dc.b	smpsNoAttack, $01
00086A90 E106                       	smpsAlterNote       $06
00086A92 E701                       	dc.b	smpsNoAttack, $01
00086A94 E10A                       	smpsAlterNote       $0A
00086A96 E701                       	dc.b	smpsNoAttack, $01
00086A98 E106                       	smpsAlterNote       $06
00086A9A E701                       	dc.b	smpsNoAttack, $01
00086A9C E100                       	smpsAlterNote       $00
00086A9E E701                       	dc.b	smpsNoAttack, $01
00086AA0 E1FF                       	smpsAlterNote       $FF
00086AA2 E701                       	dc.b	smpsNoAttack, $01
00086AA4 E103                       	smpsAlterNote       $03
00086AA6 E701                       	dc.b	smpsNoAttack, $01
00086AA8 E109                       	smpsAlterNote       $09
00086AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AAE E106                       	smpsAlterNote       $06
00086AB0 E701                       	dc.b	smpsNoAttack, $01
00086AB2 E100                       	smpsAlterNote       $00
00086AB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AB8 E107                       	smpsAlterNote       $07
00086ABA BF0E                       	dc.b	nD5, $0E
00086ABC E101                       	smpsAlterNote       $01
00086ABE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AC2 E107                       	smpsAlterNote       $07
00086AC4 E701                       	dc.b	smpsNoAttack, $01
00086AC6 E10A                       	smpsAlterNote       $0A
00086AC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ACC E104                       	smpsAlterNote       $04
00086ACE E701                       	dc.b	smpsNoAttack, $01
00086AD0 E100                       	smpsAlterNote       $00
00086AD2 E701                       	dc.b	smpsNoAttack, $01
00086AD4 E101                       	smpsAlterNote       $01
00086AD6 E701                       	dc.b	smpsNoAttack, $01
00086AD8 E107                       	smpsAlterNote       $07
00086ADA E701                       	dc.b	smpsNoAttack, $01
00086ADC E10B                       	smpsAlterNote       $0B
00086ADE E701                       	dc.b	smpsNoAttack, $01
00086AE0 E107                       	smpsAlterNote       $07
00086AE2 E701                       	dc.b	smpsNoAttack, $01
00086AE4 E104                       	smpsAlterNote       $04
00086AE6 E701                       	dc.b	smpsNoAttack, $01
00086AE8 E100                       	smpsAlterNote       $00
00086AEA E701                       	dc.b	smpsNoAttack, $01
00086AEC E101                       	smpsAlterNote       $01
00086AEE 8001                       	dc.b	nRst, $01
00086AF0 E108                       	smpsAlterNote       $08
00086AF2 C10C                       	dc.b	nE5, $0C
00086AF4 E109                       	smpsAlterNote       $09
00086AF6 C201 8001                  	dc.b	nF5, $01, nRst, $01
00086AFA E10A                       	smpsAlterNote       $0A
00086AFC 8001                       	dc.b	nRst, $01
00086AFE E109                       	smpsAlterNote       $09
00086B00 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00086B04 E106                       	smpsAlterNote       $06
00086B06 E701                       	dc.b	smpsNoAttack, $01
00086B08 E102                       	smpsAlterNote       $02
00086B0A E701                       	dc.b	smpsNoAttack, $01
00086B0C E103                       	smpsAlterNote       $03
00086B0E E701                       	dc.b	smpsNoAttack, $01
00086B10 E109                       	smpsAlterNote       $09
00086B12 E701                       	dc.b	smpsNoAttack, $01
00086B14 E10D                       	smpsAlterNote       $0D
00086B16 E701                       	dc.b	smpsNoAttack, $01
00086B18 E109                       	smpsAlterNote       $09
00086B1A E701                       	dc.b	smpsNoAttack, $01
00086B1C E106                       	smpsAlterNote       $06
00086B1E E701                       	dc.b	smpsNoAttack, $01
00086B20 E102                       	smpsAlterNote       $02
00086B22 E701                       	dc.b	smpsNoAttack, $01
00086B24 E106                       	smpsAlterNote       $06
00086B26 E701                       	dc.b	smpsNoAttack, $01
00086B28 E10C                       	smpsAlterNote       $0C
00086B2A E701                       	dc.b	smpsNoAttack, $01
00086B2C E10D                       	smpsAlterNote       $0D
00086B2E E701                       	dc.b	smpsNoAttack, $01
00086B30 E109                       	smpsAlterNote       $09
00086B32 C40D                       	dc.b	nG5, $0D
00086B34 E106                       	smpsAlterNote       $06
00086B36 E701                       	dc.b	smpsNoAttack, $01
00086B38 E102                       	smpsAlterNote       $02
00086B3A E701                       	dc.b	smpsNoAttack, $01
00086B3C E103                       	smpsAlterNote       $03
00086B3E E701                       	dc.b	smpsNoAttack, $01
00086B40 E109                       	smpsAlterNote       $09
00086B42 E701                       	dc.b	smpsNoAttack, $01
00086B44 E108                       	smpsAlterNote       $08
00086B46 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00086B52 E109                       	smpsAlterNote       $09
00086B54 C20D                       	dc.b	nF5, $0D
00086B56 E106                       	smpsAlterNote       $06
00086B58 E701                       	dc.b	smpsNoAttack, $01
00086B5A E102                       	smpsAlterNote       $02
00086B5C E701                       	dc.b	smpsNoAttack, $01
00086B5E E106                       	smpsAlterNote       $06
00086B60 E701                       	dc.b	smpsNoAttack, $01
00086B62 E109                       	smpsAlterNote       $09
00086B64 E701                       	dc.b	smpsNoAttack, $01
00086B66 E10D                       	smpsAlterNote       $0D
00086B68 E701                       	dc.b	smpsNoAttack, $01
00086B6A E109                       	smpsAlterNote       $09
00086B6C E701                       	dc.b	smpsNoAttack, $01
00086B6E E103                       	smpsAlterNote       $03
00086B70 E701                       	dc.b	smpsNoAttack, $01
00086B72 E102                       	smpsAlterNote       $02
00086B74 E701                       	dc.b	smpsNoAttack, $01
00086B76 E106                       	smpsAlterNote       $06
00086B78 E701                       	dc.b	smpsNoAttack, $01
00086B7A E10C                       	smpsAlterNote       $0C
00086B7C E701                       	dc.b	smpsNoAttack, $01
00086B7E E10D                       	smpsAlterNote       $0D
00086B80 8001                       	dc.b	nRst, $01
00086B82 E112                       	smpsAlterNote       $12
00086B84 C401                       	dc.b	nG5, $01
00086B86 E1EB                       	smpsAlterNote       $EB
00086B88 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00086B8B E1FD                       	smpsAlterNote       $FD
00086B8D E701                       	dc.b	smpsNoAttack, $01
00086B8F E10F                       	smpsAlterNote       $0F
00086B91 E701                       	dc.b	smpsNoAttack, $01
00086B93 E118                       	smpsAlterNote       $18
00086B95 E701                       	dc.b	smpsNoAttack, $01
00086B97 E1ED                       	smpsAlterNote       $ED
00086B99 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00086B9C E1FF                       	smpsAlterNote       $FF
00086B9E E701                       	dc.b	smpsNoAttack, $01
00086BA0 E10B                       	smpsAlterNote       $0B
00086BA2 E703                       	dc.b	smpsNoAttack, $03
00086BA4 E109                       	smpsAlterNote       $09
00086BA6 C407                       	dc.b	nG5, $07
00086BA8 E108                       	smpsAlterNote       $08
00086BAA C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00086BB6 E109                       	smpsAlterNote       $09
00086BB8 C20D                       	dc.b	nF5, $0D
00086BBA E103                       	smpsAlterNote       $03
00086BBC E701                       	dc.b	smpsNoAttack, $01
00086BBE E102                       	smpsAlterNote       $02
00086BC0 E701                       	dc.b	smpsNoAttack, $01
00086BC2 E106                       	smpsAlterNote       $06
00086BC4 E701                       	dc.b	smpsNoAttack, $01
00086BC6 E10C                       	smpsAlterNote       $0C
00086BC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BCC E109                       	smpsAlterNote       $09
00086BCE E701                       	dc.b	smpsNoAttack, $01
00086BD0 E103                       	smpsAlterNote       $03
00086BD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086BD6 E109                       	smpsAlterNote       $09
00086BD8 E701                       	dc.b	smpsNoAttack, $01
00086BDA E10C                       	smpsAlterNote       $0C
00086BDC E701                       	dc.b	smpsNoAttack, $01
00086BDE E10D                       	smpsAlterNote       $0D
00086BE0 8001                       	dc.b	nRst, $01
00086BE2 E10B                       	smpsAlterNote       $0B
00086BE4 C609 8001                  	dc.b	nA5, $09, nRst, $01
00086BE8 E109                       	smpsAlterNote       $09
00086BEA B806 8001                  	dc.b	nG4, $06, nRst, $01
00086BEE E108                       	smpsAlterNote       $08
00086BF0 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00086BFC 8001                       	dc.b	nRst, $01
00086BFE E109                       	smpsAlterNote       $09
00086C00 C20D                       	dc.b	nF5, $0D
00086C02 E103                       	smpsAlterNote       $03
00086C04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C08 E106                       	smpsAlterNote       $06
00086C0A E701                       	dc.b	smpsNoAttack, $01
00086C0C E10C                       	smpsAlterNote       $0C
00086C0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C12 E106                       	smpsAlterNote       $06
00086C14 E701                       	dc.b	smpsNoAttack, $01
00086C16 E103                       	smpsAlterNote       $03
00086C18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C1C E109                       	smpsAlterNote       $09
00086C1E E701                       	dc.b	smpsNoAttack, $01
00086C20 E10D                       	smpsAlterNote       $0D
00086C22 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086C28 E108                       	smpsAlterNote       $08
00086C2A E6FF                       	smpsAlterVol        $FF
00086C2C A806                       	dc.b	nEb3, $06
00086C2E E10C                       	smpsAlterNote       $0C
00086C30 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00086C34 E108                       	smpsAlterNote       $08
00086C36 A803                       	dc.b	nEb3, $03
00086C38 E109                       	smpsAlterNote       $09
00086C3A AC03 8001                  	dc.b	nG3, $03, nRst, $01
00086C3E E10C                       	smpsAlterNote       $0C
00086C40 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00086C4A E109                       	smpsAlterNote       $09
00086C4C E602                       	smpsAlterVol        $02
00086C4E B604                       	dc.b	nF4, $04
00086C50 E602                       	smpsAlterVol        $02
00086C52 F6F1 AA                    	smpsJump            music84_Jump02
00086C55                            
00086C55                            ; FM4 Data
00086C55                            music84_FM4:
00086C57 E040                       	smpsPan             panRight, $00
00086C59 8003                       	dc.b	nRst, $03
00086C5B E10F                       	smpsAlterNote       $0F
00086C5D C603 8008                  	dc.b	nA5, $03, nRst, $08
00086C61 E10D                       	smpsAlterNote       $0D
00086C63 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00086C67 E10C                       	smpsAlterNote       $0C
00086C69 C103 8004                  	dc.b	nE5, $03, nRst, $04
00086C6F E6FE                       	smpsAlterVol        $FE
00086C71 E110                       	smpsAlterNote       $10
00086C73 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086C77 E10F                       	smpsAlterNote       $0F
00086C79 C602 8001                  	dc.b	nA5, $02, nRst, $01
00086C7D E10D                       	smpsAlterNote       $0D
00086C7F C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00086C88 E10C                       	smpsAlterNote       $0C
00086C8A C103                       	dc.b	nE5, $03
00086C8C E10A                       	smpsAlterNote       $0A
00086C8E BD03 8001                  	dc.b	nC5, $03, nRst, $01
00086C94 03                         	dc.b	$03
00086C95                            
00086C95                            music84_Jump01:
00086C95 E10B                       	smpsAlterNote       $0B
00086C97 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086C9B E10C                       	smpsAlterNote       $0C
00086C9D C102 8001                  	dc.b	nE5, $02, nRst, $01
00086CA1 E10D                       	smpsAlterNote       $0D
00086CA3 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00086CAD E10B                       	smpsAlterNote       $0B
00086CAF BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00086CB3 E107                       	smpsAlterNote       $07
00086CB5 E701                       	dc.b	smpsNoAttack, $01
00086CB7 E103                       	smpsAlterNote       $03
00086CB9 E701                       	dc.b	smpsNoAttack, $01
00086CBB E104                       	smpsAlterNote       $04
00086CBD E701                       	dc.b	smpsNoAttack, $01
00086CBF E10A                       	smpsAlterNote       $0A
00086CC1 E701                       	dc.b	smpsNoAttack, $01
00086CC3 E10E                       	smpsAlterNote       $0E
00086CC5 E701                       	dc.b	smpsNoAttack, $01
00086CC7 E10A                       	smpsAlterNote       $0A
00086CC9 E701                       	dc.b	smpsNoAttack, $01
00086CCB E107                       	smpsAlterNote       $07
00086CCD E701                       	dc.b	smpsNoAttack, $01
00086CCF E104                       	smpsAlterNote       $04
00086CD1 8001                       	dc.b	nRst, $01
00086CD3 E110                       	smpsAlterNote       $10
00086CD5 C703                       	dc.b	nBb5, $03
00086CD7 E10F                       	smpsAlterNote       $0F
00086CD9 C603 8001                  	dc.b	nA5, $03, nRst, $01
00086CDD E10D                       	smpsAlterNote       $0D
00086CDF C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00086CE5 E10C                       	smpsAlterNote       $0C
00086CE7 E701                       	dc.b	smpsNoAttack, $01
00086CE9 E108                       	smpsAlterNote       $08
00086CEB E701                       	dc.b	smpsNoAttack, $01
00086CED E10C                       	smpsAlterNote       $0C
00086CEF E701                       	dc.b	smpsNoAttack, $01
00086CF1 E10F                       	smpsAlterNote       $0F
00086CF3 E701                       	dc.b	smpsNoAttack, $01
00086CF5 E113                       	smpsAlterNote       $13
00086CF7 E701                       	dc.b	smpsNoAttack, $01
00086CF9 E10F                       	smpsAlterNote       $0F
00086CFB E701                       	dc.b	smpsNoAttack, $01
00086CFD E109                       	smpsAlterNote       $09
00086CFF E701                       	dc.b	smpsNoAttack, $01
00086D01 E108                       	smpsAlterNote       $08
00086D03 E701                       	dc.b	smpsNoAttack, $01
00086D05 E10C                       	smpsAlterNote       $0C
00086D07 E701                       	dc.b	smpsNoAttack, $01
00086D09 E112                       	smpsAlterNote       $12
00086D0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D0F E10C                       	smpsAlterNote       $0C
00086D11 E701                       	dc.b	smpsNoAttack, $01
00086D13 E109                       	smpsAlterNote       $09
00086D15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D19 E10F                       	smpsAlterNote       $0F
00086D1B E701                       	dc.b	smpsNoAttack, $01
00086D1D E113                       	smpsAlterNote       $13
00086D1F E701                       	dc.b	smpsNoAttack, $01
00086D21 E112                       	smpsAlterNote       $12
00086D23 E701                       	dc.b	smpsNoAttack, $01
00086D25 E10C                       	smpsAlterNote       $0C
00086D27 E701                       	dc.b	smpsNoAttack, $01
00086D29 E108                       	smpsAlterNote       $08
00086D2B E701                       	dc.b	smpsNoAttack, $01
00086D2D E10C                       	smpsAlterNote       $0C
00086D2F E701                       	dc.b	smpsNoAttack, $01
00086D31 E10F                       	smpsAlterNote       $0F
00086D33 E701                       	dc.b	smpsNoAttack, $01
00086D35 E113                       	smpsAlterNote       $13
00086D37 E701                       	dc.b	smpsNoAttack, $01
00086D39 E10F                       	smpsAlterNote       $0F
00086D3B E701                       	dc.b	smpsNoAttack, $01
00086D3D E109                       	smpsAlterNote       $09
00086D3F E701                       	dc.b	smpsNoAttack, $01
00086D41 E108                       	smpsAlterNote       $08
00086D43 E701                       	dc.b	smpsNoAttack, $01
00086D45 E10C                       	smpsAlterNote       $0C
00086D47 E701                       	dc.b	smpsNoAttack, $01
00086D49 E112                       	smpsAlterNote       $12
00086D4B E701                       	dc.b	smpsNoAttack, $01
00086D4D E113                       	smpsAlterNote       $13
00086D4F 800F                       	dc.b	nRst, $0F
00086D51 E10B                       	smpsAlterNote       $0B
00086D53 BF03                       	dc.b	nD5, $03
00086D55 E10C                       	smpsAlterNote       $0C
00086D57 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086D5B E10D                       	smpsAlterNote       $0D
00086D5D C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00086D65 E10B                       	smpsAlterNote       $0B
00086D67 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00086D71 E110                       	smpsAlterNote       $10
00086D73 C704                       	dc.b	nBb5, $04
00086D75 E10F                       	smpsAlterNote       $0F
00086D77 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086D7B E10D                       	smpsAlterNote       $0D
00086D7D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00086D83 E109                       	smpsAlterNote       $09
00086D85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D89 E10F                       	smpsAlterNote       $0F
00086D8B E701                       	dc.b	smpsNoAttack, $01
00086D8D E112                       	smpsAlterNote       $12
00086D8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D93 E10C                       	smpsAlterNote       $0C
00086D95 E701                       	dc.b	smpsNoAttack, $01
00086D97 E108                       	smpsAlterNote       $08
00086D99 E701                       	dc.b	smpsNoAttack, $01
00086D9B E109                       	smpsAlterNote       $09
00086D9D E701                       	dc.b	smpsNoAttack, $01
00086D9F E10F                       	smpsAlterNote       $0F
00086DA1 E701                       	dc.b	smpsNoAttack, $01
00086DA3 E113                       	smpsAlterNote       $13
00086DA5 E701                       	dc.b	smpsNoAttack, $01
00086DA7 E10F                       	smpsAlterNote       $0F
00086DA9 E701                       	dc.b	smpsNoAttack, $01
00086DAB E10C                       	smpsAlterNote       $0C
00086DAD E701                       	dc.b	smpsNoAttack, $01
00086DAF E108                       	smpsAlterNote       $08
00086DB1 E701                       	dc.b	smpsNoAttack, $01
00086DB3 E10C                       	smpsAlterNote       $0C
00086DB5 E701                       	dc.b	smpsNoAttack, $01
00086DB7 E112                       	smpsAlterNote       $12
00086DB9 E701                       	dc.b	smpsNoAttack, $01
00086DBB E113                       	smpsAlterNote       $13
00086DBD E701                       	dc.b	smpsNoAttack, $01
00086DBF E10F                       	smpsAlterNote       $0F
00086DC1 E701                       	dc.b	smpsNoAttack, $01
00086DC3 E109                       	smpsAlterNote       $09
00086DC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DC9 E10C                       	smpsAlterNote       $0C
00086DCB E701                       	dc.b	smpsNoAttack, $01
00086DCD E112                       	smpsAlterNote       $12
00086DCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DD3 E10C                       	smpsAlterNote       $0C
00086DD5 E701                       	dc.b	smpsNoAttack, $01
00086DD7 E109                       	smpsAlterNote       $09
00086DD9 E701                       	dc.b	smpsNoAttack, $01
00086DDB E10D                       	smpsAlterNote       $0D
00086DDD C401 8001                  	dc.b	nG5, $01, nRst, $01
00086DE1 E10F                       	smpsAlterNote       $0F
00086DE3 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00086DED E10D                       	smpsAlterNote       $0D
00086DEF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00086DF5 E10B                       	smpsAlterNote       $0B
00086DF7 BF0D                       	dc.b	nD5, $0D
00086DF9 E108                       	smpsAlterNote       $08
00086DFB E701                       	dc.b	smpsNoAttack, $01
00086DFD E104                       	smpsAlterNote       $04
00086DFF E701                       	dc.b	smpsNoAttack, $01
00086E01 E108                       	smpsAlterNote       $08
00086E03 E701                       	dc.b	smpsNoAttack, $01
00086E05 E10B                       	smpsAlterNote       $0B
00086E07 E701                       	dc.b	smpsNoAttack, $01
00086E09 E10F                       	smpsAlterNote       $0F
00086E0B E701                       	dc.b	smpsNoAttack, $01
00086E0D E10B                       	smpsAlterNote       $0B
00086E0F E701                       	dc.b	smpsNoAttack, $01
00086E11 E105                       	smpsAlterNote       $05
00086E13 E701                       	dc.b	smpsNoAttack, $01
00086E15 E104                       	smpsAlterNote       $04
00086E17 E701                       	dc.b	smpsNoAttack, $01
00086E19 E108                       	smpsAlterNote       $08
00086E1B E701                       	dc.b	smpsNoAttack, $01
00086E1D E10E                       	smpsAlterNote       $0E
00086E1F E701                       	dc.b	smpsNoAttack, $01
00086E21 E10F                       	smpsAlterNote       $0F
00086E23 8001                       	dc.b	nRst, $01
00086E25 E10C                       	smpsAlterNote       $0C
00086E27 C101                       	dc.b	nE5, $01
00086E29 E10D                       	smpsAlterNote       $0D
00086E2B C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00086E31 E10F                       	smpsAlterNote       $0F
00086E33 C606 8001                  	dc.b	nA5, $06, nRst, $01
00086E37 E10C                       	smpsAlterNote       $0C
00086E39 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086E3D E10D                       	smpsAlterNote       $0D
00086E3F CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086E43 E10C                       	smpsAlterNote       $0C
00086E45 CD03                       	dc.b	nE6, $03
00086E47 E10A                       	smpsAlterNote       $0A
00086E49 C903 8001                  	dc.b	nC6, $03, nRst, $01
00086E4D E10D                       	smpsAlterNote       $0D
00086E4F C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00086E57 E109                       	smpsAlterNote       $09
00086E59 E701                       	dc.b	smpsNoAttack, $01
00086E5B E10D                       	smpsAlterNote       $0D
00086E5D E701                       	dc.b	smpsNoAttack, $01
00086E5F E110                       	smpsAlterNote       $10
00086E61 E701                       	dc.b	smpsNoAttack, $01
00086E63 E114                       	smpsAlterNote       $14
00086E65 E701                       	dc.b	smpsNoAttack, $01
00086E67 E110                       	smpsAlterNote       $10
00086E69 E701                       	dc.b	smpsNoAttack, $01
00086E6B E10A                       	smpsAlterNote       $0A
00086E6D E701                       	dc.b	smpsNoAttack, $01
00086E6F E109                       	smpsAlterNote       $09
00086E71 E701                       	dc.b	smpsNoAttack, $01
00086E73 E10D                       	smpsAlterNote       $0D
00086E75 E701                       	dc.b	smpsNoAttack, $01
00086E77 E113                       	smpsAlterNote       $13
00086E79 E701                       	dc.b	smpsNoAttack, $01
00086E7B E114                       	smpsAlterNote       $14
00086E7D 8001                       	dc.b	nRst, $01
00086E7F E10F                       	smpsAlterNote       $0F
00086E81 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00086E87 E10C                       	smpsAlterNote       $0C
00086E89 E701                       	dc.b	smpsNoAttack, $01
00086E8B E108                       	smpsAlterNote       $08
00086E8D E701                       	dc.b	smpsNoAttack, $01
00086E8F E10C                       	smpsAlterNote       $0C
00086E91 E701                       	dc.b	smpsNoAttack, $01
00086E93 E112                       	smpsAlterNote       $12
00086E95 E701                       	dc.b	smpsNoAttack, $01
00086E97 E113                       	smpsAlterNote       $13
00086E99 E701                       	dc.b	smpsNoAttack, $01
00086E9B E10F                       	smpsAlterNote       $0F
00086E9D E701                       	dc.b	smpsNoAttack, $01
00086E9F E109                       	smpsAlterNote       $09
00086EA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EA5 E10C                       	smpsAlterNote       $0C
00086EA7 E701                       	dc.b	smpsNoAttack, $01
00086EA9 E112                       	smpsAlterNote       $12
00086EAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EAF E10C                       	smpsAlterNote       $0C
00086EB1 E701                       	dc.b	smpsNoAttack, $01
00086EB3 E109                       	smpsAlterNote       $09
00086EB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EB9 E10F                       	smpsAlterNote       $0F
00086EBB E701                       	dc.b	smpsNoAttack, $01
00086EBD E113                       	smpsAlterNote       $13
00086EBF E701                       	dc.b	smpsNoAttack, $01
00086EC1 E112                       	smpsAlterNote       $12
00086EC3 E701                       	dc.b	smpsNoAttack, $01
00086EC5 E10C                       	smpsAlterNote       $0C
00086EC7 E701                       	dc.b	smpsNoAttack, $01
00086EC9 E108                       	smpsAlterNote       $08
00086ECB E701                       	dc.b	smpsNoAttack, $01
00086ECD E10C                       	smpsAlterNote       $0C
00086ECF E701                       	dc.b	smpsNoAttack, $01
00086ED1 E10F                       	smpsAlterNote       $0F
00086ED3 E701                       	dc.b	smpsNoAttack, $01
00086ED5 E113                       	smpsAlterNote       $13
00086ED7 E701                       	dc.b	smpsNoAttack, $01
00086ED9 E10F                       	smpsAlterNote       $0F
00086EDB E701                       	dc.b	smpsNoAttack, $01
00086EDD E109                       	smpsAlterNote       $09
00086EDF E701                       	dc.b	smpsNoAttack, $01
00086EE1 E108                       	smpsAlterNote       $08
00086EE3 E701                       	dc.b	smpsNoAttack, $01
00086EE5 E10C                       	smpsAlterNote       $0C
00086EE7 E701                       	dc.b	smpsNoAttack, $01
00086EE9 E112                       	smpsAlterNote       $12
00086EEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EEF E10F                       	smpsAlterNote       $0F
00086EF1 E701                       	dc.b	smpsNoAttack, $01
00086EF3 E109                       	smpsAlterNote       $09
00086EF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086EF9 E10F                       	smpsAlterNote       $0F
00086EFB E701                       	dc.b	smpsNoAttack, $01
00086EFD E113                       	smpsAlterNote       $13
00086EFF E701                       	dc.b	smpsNoAttack, $01
00086F01 E112                       	smpsAlterNote       $12
00086F03 E701                       	dc.b	smpsNoAttack, $01
00086F05 E10C                       	smpsAlterNote       $0C
00086F07 E701                       	dc.b	smpsNoAttack, $01
00086F09 E108                       	smpsAlterNote       $08
00086F0B E701                       	dc.b	smpsNoAttack, $01
00086F0D E10C                       	smpsAlterNote       $0C
00086F0F E701                       	dc.b	smpsNoAttack, $01
00086F11 E10F                       	smpsAlterNote       $0F
00086F13 E701                       	dc.b	smpsNoAttack, $01
00086F15 E113                       	smpsAlterNote       $13
00086F17 E701                       	dc.b	smpsNoAttack, $01
00086F19 E10F                       	smpsAlterNote       $0F
00086F1B E701                       	dc.b	smpsNoAttack, $01
00086F1D E109                       	smpsAlterNote       $09
00086F1F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086F23 E10F                       	smpsAlterNote       $0F
00086F25 C60D                       	dc.b	nA5, $0D
00086F27 E109                       	smpsAlterNote       $09
00086F29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F2D E10C                       	smpsAlterNote       $0C
00086F2F E701                       	dc.b	smpsNoAttack, $01
00086F31 E112                       	smpsAlterNote       $12
00086F33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F37 E10C                       	smpsAlterNote       $0C
00086F39 E701                       	dc.b	smpsNoAttack, $01
00086F3B E109                       	smpsAlterNote       $09
00086F3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F41 E10F                       	smpsAlterNote       $0F
00086F43 E701                       	dc.b	smpsNoAttack, $01
00086F45 E113                       	smpsAlterNote       $13
00086F47 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086F4D E10D                       	smpsAlterNote       $0D
00086F4F C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00086F57 E10C                       	smpsAlterNote       $0C
00086F59 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00086F5F E6FF                       	smpsAlterVol        $FF
00086F61 E10B                       	smpsAlterNote       $0B
00086F63 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086F67 E10C                       	smpsAlterNote       $0C
00086F69 C103                       	dc.b	nE5, $03
00086F6B E10D                       	smpsAlterNote       $0D
00086F6D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00086F77 E10B                       	smpsAlterNote       $0B
00086F79 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00086F7D E107                       	smpsAlterNote       $07
00086F7F E701                       	dc.b	smpsNoAttack, $01
00086F81 E104                       	smpsAlterNote       $04
00086F83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F87 E10A                       	smpsAlterNote       $0A
00086F89 E701                       	dc.b	smpsNoAttack, $01
00086F8B E10D                       	smpsAlterNote       $0D
00086F8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F91 E107                       	smpsAlterNote       $07
00086F93 E701                       	dc.b	smpsNoAttack, $01
00086F95 E104                       	smpsAlterNote       $04
00086F97 8001                       	dc.b	nRst, $01
00086F99 E110                       	smpsAlterNote       $10
00086F9B C703                       	dc.b	nBb5, $03
00086F9D E10F                       	smpsAlterNote       $0F
00086F9F C603 8001                  	dc.b	nA5, $03, nRst, $01
00086FA3 E10D                       	smpsAlterNote       $0D
00086FA5 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00086FA9 E10C                       	smpsAlterNote       $0C
00086FAB E701                       	dc.b	smpsNoAttack, $01
00086FAD E108                       	smpsAlterNote       $08
00086FAF E701                       	dc.b	smpsNoAttack, $01
00086FB1 E109                       	smpsAlterNote       $09
00086FB3 E701                       	dc.b	smpsNoAttack, $01
00086FB5 E10F                       	smpsAlterNote       $0F
00086FB7 E701                       	dc.b	smpsNoAttack, $01
00086FB9 E113                       	smpsAlterNote       $13
00086FBB E701                       	dc.b	smpsNoAttack, $01
00086FBD E10F                       	smpsAlterNote       $0F
00086FBF E701                       	dc.b	smpsNoAttack, $01
00086FC1 E10C                       	smpsAlterNote       $0C
00086FC3 E701                       	dc.b	smpsNoAttack, $01
00086FC5 E108                       	smpsAlterNote       $08
00086FC7 E701                       	dc.b	smpsNoAttack, $01
00086FC9 E10C                       	smpsAlterNote       $0C
00086FCB E701                       	dc.b	smpsNoAttack, $01
00086FCD E112                       	smpsAlterNote       $12
00086FCF E701                       	dc.b	smpsNoAttack, $01
00086FD1 E113                       	smpsAlterNote       $13
00086FD3 E701                       	dc.b	smpsNoAttack, $01
00086FD5 E10F                       	smpsAlterNote       $0F
00086FD7 E701                       	dc.b	smpsNoAttack, $01
00086FD9 E109                       	smpsAlterNote       $09
00086FDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FDF E10C                       	smpsAlterNote       $0C
00086FE1 E701                       	dc.b	smpsNoAttack, $01
00086FE3 E112                       	smpsAlterNote       $12
00086FE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FE9 E10C                       	smpsAlterNote       $0C
00086FEB E701                       	dc.b	smpsNoAttack, $01
00086FED E109                       	smpsAlterNote       $09
00086FEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086FF3 E10F                       	smpsAlterNote       $0F
00086FF5 E701                       	dc.b	smpsNoAttack, $01
00086FF7 E113                       	smpsAlterNote       $13
00086FF9 E701                       	dc.b	smpsNoAttack, $01
00086FFB E112                       	smpsAlterNote       $12
00086FFD E701                       	dc.b	smpsNoAttack, $01
00086FFF E10C                       	smpsAlterNote       $0C
00087001 E701                       	dc.b	smpsNoAttack, $01
00087003 E108                       	smpsAlterNote       $08
00087005 E701                       	dc.b	smpsNoAttack, $01
00087007 E10C                       	smpsAlterNote       $0C
00087009 E701                       	dc.b	smpsNoAttack, $01
0008700B E10F                       	smpsAlterNote       $0F
0008700D E701                       	dc.b	smpsNoAttack, $01
0008700F E113                       	smpsAlterNote       $13
00087011 E701                       	dc.b	smpsNoAttack, $01
00087013 E10F                       	smpsAlterNote       $0F
00087015 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00087019 E110                       	smpsAlterNote       $10
0008701B BB03                       	dc.b	nBb4, $03
0008701D E10F                       	smpsAlterNote       $0F
0008701F BA06 8001                  	dc.b	nA4, $06, nRst, $01
00087023 E10B                       	smpsAlterNote       $0B
00087025 BF03                       	dc.b	nD5, $03
00087027 E10C                       	smpsAlterNote       $0C
00087029 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008702D E10D                       	smpsAlterNote       $0D
0008702F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00087039 E10B                       	smpsAlterNote       $0B
0008703B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00087047 E110                       	smpsAlterNote       $10
00087049 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008704D E10F                       	smpsAlterNote       $0F
0008704F C604                       	dc.b	nA5, $04
00087051 E10D                       	smpsAlterNote       $0D
00087053 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00087059 E109                       	smpsAlterNote       $09
0008705B E701                       	dc.b	smpsNoAttack, $01
0008705D E108                       	smpsAlterNote       $08
0008705F E701                       	dc.b	smpsNoAttack, $01
00087061 E10C                       	smpsAlterNote       $0C
00087063 E701                       	dc.b	smpsNoAttack, $01
00087065 E112                       	smpsAlterNote       $12
00087067 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008706B E10F                       	smpsAlterNote       $0F
0008706D E701                       	dc.b	smpsNoAttack, $01
0008706F E109                       	smpsAlterNote       $09
00087071 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087075 E10F                       	smpsAlterNote       $0F
00087077 E701                       	dc.b	smpsNoAttack, $01
00087079 E112                       	smpsAlterNote       $12
0008707B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008707F E10C                       	smpsAlterNote       $0C
00087081 E701                       	dc.b	smpsNoAttack, $01
00087083 E108                       	smpsAlterNote       $08
00087085 E701                       	dc.b	smpsNoAttack, $01
00087087 E109                       	smpsAlterNote       $09
00087089 E701                       	dc.b	smpsNoAttack, $01
0008708B E10F                       	smpsAlterNote       $0F
0008708D E701                       	dc.b	smpsNoAttack, $01
0008708F E113                       	smpsAlterNote       $13
00087091 E701                       	dc.b	smpsNoAttack, $01
00087093 E10F                       	smpsAlterNote       $0F
00087095 E701                       	dc.b	smpsNoAttack, $01
00087097 E10C                       	smpsAlterNote       $0C
00087099 E701                       	dc.b	smpsNoAttack, $01
0008709B E108                       	smpsAlterNote       $08
0008709D E701                       	dc.b	smpsNoAttack, $01
0008709F E10C                       	smpsAlterNote       $0C
000870A1 E701                       	dc.b	smpsNoAttack, $01
000870A3 E112                       	smpsAlterNote       $12
000870A5 E701                       	dc.b	smpsNoAttack, $01
000870A7 E113                       	smpsAlterNote       $13
000870A9 E701                       	dc.b	smpsNoAttack, $01
000870AB E10F                       	smpsAlterNote       $0F
000870AD E701                       	dc.b	smpsNoAttack, $01
000870AF E109                       	smpsAlterNote       $09
000870B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870B5 E10C                       	smpsAlterNote       $0C
000870B7 E701                       	dc.b	smpsNoAttack, $01
000870B9 E112                       	smpsAlterNote       $12
000870BB E701                       	dc.b	smpsNoAttack, $01
000870BD E113                       	smpsAlterNote       $13
000870BF 8001                       	dc.b	nRst, $01
000870C1 E10F                       	smpsAlterNote       $0F
000870C3 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000870CF C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000870D7 E10D                       	smpsAlterNote       $0D
000870D9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000870DF E10B                       	smpsAlterNote       $0B
000870E1 BF0D                       	dc.b	nD5, $0D
000870E3 E108                       	smpsAlterNote       $08
000870E5 E701                       	dc.b	smpsNoAttack, $01
000870E7 E104                       	smpsAlterNote       $04
000870E9 E701                       	dc.b	smpsNoAttack, $01
000870EB E105                       	smpsAlterNote       $05
000870ED E701                       	dc.b	smpsNoAttack, $01
000870EF E10B                       	smpsAlterNote       $0B
000870F1 E701                       	dc.b	smpsNoAttack, $01
000870F3 E10F                       	smpsAlterNote       $0F
000870F5 E701                       	dc.b	smpsNoAttack, $01
000870F7 E10B                       	smpsAlterNote       $0B
000870F9 E701                       	dc.b	smpsNoAttack, $01
000870FB E108                       	smpsAlterNote       $08
000870FD E701                       	dc.b	smpsNoAttack, $01
000870FF E104                       	smpsAlterNote       $04
00087101 E701                       	dc.b	smpsNoAttack, $01
00087103 E108                       	smpsAlterNote       $08
00087105 E701                       	dc.b	smpsNoAttack, $01
00087107 E10E                       	smpsAlterNote       $0E
00087109 E701                       	dc.b	smpsNoAttack, $01
0008710B E10F                       	smpsAlterNote       $0F
0008710D E701                       	dc.b	smpsNoAttack, $01
0008710F E10C                       	smpsAlterNote       $0C
00087111 C101                       	dc.b	nE5, $01
00087113 E10D                       	smpsAlterNote       $0D
00087115 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008711D E10F                       	smpsAlterNote       $0F
0008711F C607                       	dc.b	nA5, $07
00087121 E10C                       	smpsAlterNote       $0C
00087123 CD07                       	dc.b	nE6, $07
00087125 E10D                       	smpsAlterNote       $0D
00087127 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008712B E10C                       	smpsAlterNote       $0C
0008712D CD03                       	dc.b	nE6, $03
0008712F E10A                       	smpsAlterNote       $0A
00087131 C903 8001                  	dc.b	nC6, $03, nRst, $01
00087135 E10D                       	smpsAlterNote       $0D
00087137 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008713D E10A                       	smpsAlterNote       $0A
0008713F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087143 E110                       	smpsAlterNote       $10
00087145 E701                       	dc.b	smpsNoAttack, $01
00087147 E114                       	smpsAlterNote       $14
00087149 E701                       	dc.b	smpsNoAttack, $01
0008714B E113                       	smpsAlterNote       $13
0008714D E701                       	dc.b	smpsNoAttack, $01
0008714F E10D                       	smpsAlterNote       $0D
00087151 E701                       	dc.b	smpsNoAttack, $01
00087153 E109                       	smpsAlterNote       $09
00087155 E701                       	dc.b	smpsNoAttack, $01
00087157 E10D                       	smpsAlterNote       $0D
00087159 E701                       	dc.b	smpsNoAttack, $01
0008715B E110                       	smpsAlterNote       $10
0008715D E701                       	dc.b	smpsNoAttack, $01
0008715F E114                       	smpsAlterNote       $14
00087161 E701                       	dc.b	smpsNoAttack, $01
00087163 E10F                       	smpsAlterNote       $0F
00087165 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00087169 E10C                       	smpsAlterNote       $0C
0008716B E701                       	dc.b	smpsNoAttack, $01
0008716D E108                       	smpsAlterNote       $08
0008716F E701                       	dc.b	smpsNoAttack, $01
00087171 E10C                       	smpsAlterNote       $0C
00087173 E701                       	dc.b	smpsNoAttack, $01
00087175 E10F                       	smpsAlterNote       $0F
00087177 E701                       	dc.b	smpsNoAttack, $01
00087179 E113                       	smpsAlterNote       $13
0008717B E701                       	dc.b	smpsNoAttack, $01
0008717D E10F                       	smpsAlterNote       $0F
0008717F E701                       	dc.b	smpsNoAttack, $01
00087181 E109                       	smpsAlterNote       $09
00087183 E701                       	dc.b	smpsNoAttack, $01
00087185 E108                       	smpsAlterNote       $08
00087187 E701                       	dc.b	smpsNoAttack, $01
00087189 E10C                       	smpsAlterNote       $0C
0008718B E701                       	dc.b	smpsNoAttack, $01
0008718D E112                       	smpsAlterNote       $12
0008718F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087193 E10F                       	smpsAlterNote       $0F
00087195 E701                       	dc.b	smpsNoAttack, $01
00087197 E109                       	smpsAlterNote       $09
00087199 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008719D E10F                       	smpsAlterNote       $0F
0008719F E701                       	dc.b	smpsNoAttack, $01
000871A1 E112                       	smpsAlterNote       $12
000871A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871A7 E10C                       	smpsAlterNote       $0C
000871A9 E701                       	dc.b	smpsNoAttack, $01
000871AB E108                       	smpsAlterNote       $08
000871AD E701                       	dc.b	smpsNoAttack, $01
000871AF E109                       	smpsAlterNote       $09
000871B1 E701                       	dc.b	smpsNoAttack, $01
000871B3 E10F                       	smpsAlterNote       $0F
000871B5 E701                       	dc.b	smpsNoAttack, $01
000871B7 E113                       	smpsAlterNote       $13
000871B9 E701                       	dc.b	smpsNoAttack, $01
000871BB E10F                       	smpsAlterNote       $0F
000871BD E701                       	dc.b	smpsNoAttack, $01
000871BF E10C                       	smpsAlterNote       $0C
000871C1 E701                       	dc.b	smpsNoAttack, $01
000871C3 E108                       	smpsAlterNote       $08
000871C5 E701                       	dc.b	smpsNoAttack, $01
000871C7 E10C                       	smpsAlterNote       $0C
000871C9 E701                       	dc.b	smpsNoAttack, $01
000871CB E112                       	smpsAlterNote       $12
000871CD E701                       	dc.b	smpsNoAttack, $01
000871CF E113                       	smpsAlterNote       $13
000871D1 E701                       	dc.b	smpsNoAttack, $01
000871D3 E10F                       	smpsAlterNote       $0F
000871D5 E701                       	dc.b	smpsNoAttack, $01
000871D7 E109                       	smpsAlterNote       $09
000871D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871DD E10C                       	smpsAlterNote       $0C
000871DF E701                       	dc.b	smpsNoAttack, $01
000871E1 E112                       	smpsAlterNote       $12
000871E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871E7 E10C                       	smpsAlterNote       $0C
000871E9 E701                       	dc.b	smpsNoAttack, $01
000871EB E109                       	smpsAlterNote       $09
000871ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871F1 E10F                       	smpsAlterNote       $0F
000871F3 E701                       	dc.b	smpsNoAttack, $01
000871F5 E113                       	smpsAlterNote       $13
000871F7 E701                       	dc.b	smpsNoAttack, $01
000871F9 E112                       	smpsAlterNote       $12
000871FB E701                       	dc.b	smpsNoAttack, $01
000871FD E10C                       	smpsAlterNote       $0C
000871FF E701                       	dc.b	smpsNoAttack, $01
00087201 E109                       	smpsAlterNote       $09
00087203 8001                       	dc.b	nRst, $01
00087205 E10F                       	smpsAlterNote       $0F
00087207 C60D                       	dc.b	nA5, $0D
00087209 E10C                       	smpsAlterNote       $0C
0008720B E701                       	dc.b	smpsNoAttack, $01
0008720D E108                       	smpsAlterNote       $08
0008720F E701                       	dc.b	smpsNoAttack, $01
00087211 E10C                       	smpsAlterNote       $0C
00087213 E701                       	dc.b	smpsNoAttack, $01
00087215 E112                       	smpsAlterNote       $12
00087217 E701                       	dc.b	smpsNoAttack, $01
00087219 E113                       	smpsAlterNote       $13
0008721B E701                       	dc.b	smpsNoAttack, $01
0008721D E10F                       	smpsAlterNote       $0F
0008721F E701                       	dc.b	smpsNoAttack, $01
00087221 E109                       	smpsAlterNote       $09
00087223 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087227 E10C                       	smpsAlterNote       $0C
00087229 E701                       	dc.b	smpsNoAttack, $01
0008722B E112                       	smpsAlterNote       $12
0008722D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087231 E10C                       	smpsAlterNote       $0C
00087233 E701                       	dc.b	smpsNoAttack, $01
00087235 E109                       	smpsAlterNote       $09
00087237 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008723B E10F                       	smpsAlterNote       $0F
0008723D E701                       	dc.b	smpsNoAttack, $01
0008723F E113                       	smpsAlterNote       $13
00087241 E701                       	dc.b	smpsNoAttack, $01
00087243 E112                       	smpsAlterNote       $12
00087245 E701                       	dc.b	smpsNoAttack, $01
00087247 E10C                       	smpsAlterNote       $0C
00087249 E701                       	dc.b	smpsNoAttack, $01
0008724B E108                       	smpsAlterNote       $08
0008724D E701                       	dc.b	smpsNoAttack, $01
0008724F E10C                       	smpsAlterNote       $0C
00087251 E701                       	dc.b	smpsNoAttack, $01
00087253 E10F                       	smpsAlterNote       $0F
00087255 E701                       	dc.b	smpsNoAttack, $01
00087257 E113                       	smpsAlterNote       $13
00087259 E701                       	dc.b	smpsNoAttack, $01
0008725B E10F                       	smpsAlterNote       $0F
0008725D E701                       	dc.b	smpsNoAttack, $01
0008725F E109                       	smpsAlterNote       $09
00087261 E701                       	dc.b	smpsNoAttack, $01
00087263 E108                       	smpsAlterNote       $08
00087265 E701                       	dc.b	smpsNoAttack, $01
00087267 E10C                       	smpsAlterNote       $0C
00087269 E701                       	dc.b	smpsNoAttack, $01
0008726B E112                       	smpsAlterNote       $12
0008726D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087271 E10F                       	smpsAlterNote       $0F
00087273 E701                       	dc.b	smpsNoAttack, $01
00087275 E109                       	smpsAlterNote       $09
00087277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008727B E10F                       	smpsAlterNote       $0F
0008727D E701                       	dc.b	smpsNoAttack, $01
0008727F E112                       	smpsAlterNote       $12
00087281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087285 E10C                       	smpsAlterNote       $0C
00087287 E701                       	dc.b	smpsNoAttack, $01
00087289 E108                       	smpsAlterNote       $08
0008728B E701                       	dc.b	smpsNoAttack, $01
0008728D E10C                       	smpsAlterNote       $0C
0008728F E701                       	dc.b	smpsNoAttack, $01
00087291 E10F                       	smpsAlterNote       $0F
00087293 E701                       	dc.b	smpsNoAttack, $01
00087295 E113                       	smpsAlterNote       $13
00087297 E701                       	dc.b	smpsNoAttack, $01
00087299 E10F                       	smpsAlterNote       $0F
0008729B E701                       	dc.b	smpsNoAttack, $01
0008729D E109                       	smpsAlterNote       $09
0008729F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000872A5 E601                       	smpsAlterVol        $01
000872A7 E10F                       	smpsAlterNote       $0F
000872A9 C604                       	dc.b	nA5, $04
000872AB E10D                       	smpsAlterNote       $0D
000872AD C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000872B3 E10B                       	smpsAlterNote       $0B
000872B5 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000872BD E10F                       	smpsAlterNote       $0F
000872BF C604 8001                  	dc.b	nA5, $04, nRst, $01
000872C3 E10D                       	smpsAlterNote       $0D
000872C5 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000872CB E10C                       	smpsAlterNote       $0C
000872CD C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000872D3 E10A                       	smpsAlterNote       $0A
000872D5 C904 8001                  	dc.b	nC6, $04, nRst, $01
000872D9 E110                       	smpsAlterNote       $10
000872DB C704 8001                  	dc.b	nBb5, $04, nRst, $01
000872DF E10F                       	smpsAlterNote       $0F
000872E1 C604                       	dc.b	nA5, $04
000872E3 E10D                       	smpsAlterNote       $0D
000872E5 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000872F1 E109                       	smpsAlterNote       $09
000872F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872F7 E10F                       	smpsAlterNote       $0F
000872F9 E701                       	dc.b	smpsNoAttack, $01
000872FB E112                       	smpsAlterNote       $12
000872FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087301 E10C                       	smpsAlterNote       $0C
00087303 E701                       	dc.b	smpsNoAttack, $01
00087305 E108                       	smpsAlterNote       $08
00087307 E701                       	dc.b	smpsNoAttack, $01
00087309 E10C                       	smpsAlterNote       $0C
0008730B E701                       	dc.b	smpsNoAttack, $01
0008730D E10F                       	smpsAlterNote       $0F
0008730F E701                       	dc.b	smpsNoAttack, $01
00087311 E113                       	smpsAlterNote       $13
00087313 E701                       	dc.b	smpsNoAttack, $01
00087315 E10D                       	smpsAlterNote       $0D
00087317 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008731D E10C                       	smpsAlterNote       $0C
0008731F C10D                       	dc.b	nE5, $0D
00087321 E109                       	smpsAlterNote       $09
00087323 E701                       	dc.b	smpsNoAttack, $01
00087325 E105                       	smpsAlterNote       $05
00087327 E701                       	dc.b	smpsNoAttack, $01
00087329 E106                       	smpsAlterNote       $06
0008732B E701                       	dc.b	smpsNoAttack, $01
0008732D E10C                       	smpsAlterNote       $0C
0008732F E701                       	dc.b	smpsNoAttack, $01
00087331 E110                       	smpsAlterNote       $10
00087333 E701                       	dc.b	smpsNoAttack, $01
00087335 E10C                       	smpsAlterNote       $0C
00087337 E701                       	dc.b	smpsNoAttack, $01
00087339 E109                       	smpsAlterNote       $09
0008733B E701                       	dc.b	smpsNoAttack, $01
0008733D E105                       	smpsAlterNote       $05
0008733F E701                       	dc.b	smpsNoAttack, $01
00087341 E109                       	smpsAlterNote       $09
00087343 E701                       	dc.b	smpsNoAttack, $01
00087345 E10F                       	smpsAlterNote       $0F
00087347 E701                       	dc.b	smpsNoAttack, $01
00087349 E110                       	smpsAlterNote       $10
0008734B E701                       	dc.b	smpsNoAttack, $01
0008734D E10C                       	smpsAlterNote       $0C
0008734F E701                       	dc.b	smpsNoAttack, $01
00087351 E106                       	smpsAlterNote       $06
00087353 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087357 E109                       	smpsAlterNote       $09
00087359 E701                       	dc.b	smpsNoAttack, $01
0008735B E10F                       	smpsAlterNote       $0F
0008735D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087361 E109                       	smpsAlterNote       $09
00087363 E701                       	dc.b	smpsNoAttack, $01
00087365 E106                       	smpsAlterNote       $06
00087367 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008736B E10C                       	smpsAlterNote       $0C
0008736D E701                       	dc.b	smpsNoAttack, $01
0008736F E110                       	smpsAlterNote       $10
00087371 E701                       	dc.b	smpsNoAttack, $01
00087373 E10F                       	smpsAlterNote       $0F
00087375 E701                       	dc.b	smpsNoAttack, $01
00087377 E109                       	smpsAlterNote       $09
00087379 E701                       	dc.b	smpsNoAttack, $01
0008737B E105                       	smpsAlterNote       $05
0008737D E701                       	dc.b	smpsNoAttack, $01
0008737F E109                       	smpsAlterNote       $09
00087381 E701                       	dc.b	smpsNoAttack, $01
00087383 E10C                       	smpsAlterNote       $0C
00087385 E701                       	dc.b	smpsNoAttack, $01
00087387 E110                       	smpsAlterNote       $10
00087389 E701                       	dc.b	smpsNoAttack, $01
0008738B E10C                       	smpsAlterNote       $0C
0008738D E701                       	dc.b	smpsNoAttack, $01
0008738F E106                       	smpsAlterNote       $06
00087391 E701                       	dc.b	smpsNoAttack, $01
00087393 E105                       	smpsAlterNote       $05
00087395 E701                       	dc.b	smpsNoAttack, $01
00087397 E109                       	smpsAlterNote       $09
00087399 E701                       	dc.b	smpsNoAttack, $01
0008739B E10F                       	smpsAlterNote       $0F
0008739D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873A1 E10C                       	smpsAlterNote       $0C
000873A3 E701                       	dc.b	smpsNoAttack, $01
000873A5 E106                       	smpsAlterNote       $06
000873A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873AB E10C                       	smpsAlterNote       $0C
000873AD E701                       	dc.b	smpsNoAttack, $01
000873AF E10F                       	smpsAlterNote       $0F
000873B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873B5 E109                       	smpsAlterNote       $09
000873B7 E701                       	dc.b	smpsNoAttack, $01
000873B9 E105                       	smpsAlterNote       $05
000873BB E701                       	dc.b	smpsNoAttack, $01
000873BD E106                       	smpsAlterNote       $06
000873BF E701                       	dc.b	smpsNoAttack, $01
000873C1 E10C                       	smpsAlterNote       $0C
000873C3 E701                       	dc.b	smpsNoAttack, $01
000873C5 E110                       	smpsAlterNote       $10
000873C7 E701                       	dc.b	smpsNoAttack, $01
000873C9 E10C                       	smpsAlterNote       $0C
000873CB E701                       	dc.b	smpsNoAttack, $01
000873CD E109                       	smpsAlterNote       $09
000873CF E701                       	dc.b	smpsNoAttack, $01
000873D1 E105                       	smpsAlterNote       $05
000873D3 E701                       	dc.b	smpsNoAttack, $01
000873D5 E109                       	smpsAlterNote       $09
000873D7 E701                       	dc.b	smpsNoAttack, $01
000873D9 E10F                       	smpsAlterNote       $0F
000873DB E701                       	dc.b	smpsNoAttack, $01
000873DD E110                       	smpsAlterNote       $10
000873DF E701                       	dc.b	smpsNoAttack, $01
000873E1 E10C                       	smpsAlterNote       $0C
000873E3 E701                       	dc.b	smpsNoAttack, $01
000873E5 E106                       	smpsAlterNote       $06
000873E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873EB E109                       	smpsAlterNote       $09
000873ED E701                       	dc.b	smpsNoAttack, $01
000873EF E10F                       	smpsAlterNote       $0F
000873F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873F5 E109                       	smpsAlterNote       $09
000873F7 E701                       	dc.b	smpsNoAttack, $01
000873F9 E106                       	smpsAlterNote       $06
000873FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873FF E10C                       	smpsAlterNote       $0C
00087401 E701                       	dc.b	smpsNoAttack, $01
00087403 E110                       	smpsAlterNote       $10
00087405 E701                       	dc.b	smpsNoAttack, $01
00087407 E10F                       	smpsAlterNote       $0F
00087409 E701                       	dc.b	smpsNoAttack, $01
0008740B E109                       	smpsAlterNote       $09
0008740D E701                       	dc.b	smpsNoAttack, $01
0008740F E105                       	smpsAlterNote       $05
00087411 E701                       	dc.b	smpsNoAttack, $01
00087413 E109                       	smpsAlterNote       $09
00087415 E701                       	dc.b	smpsNoAttack, $01
00087417 E10C                       	smpsAlterNote       $0C
00087419 E701                       	dc.b	smpsNoAttack, $01
0008741B E110                       	smpsAlterNote       $10
0008741D E701                       	dc.b	smpsNoAttack, $01
0008741F E10C                       	smpsAlterNote       $0C
00087421 E701                       	dc.b	smpsNoAttack, $01
00087423 E106                       	smpsAlterNote       $06
00087425 E701                       	dc.b	smpsNoAttack, $01
00087427 E105                       	smpsAlterNote       $05
00087429 E701                       	dc.b	smpsNoAttack, $01
0008742B E109                       	smpsAlterNote       $09
0008742D E701                       	dc.b	smpsNoAttack, $01
0008742F E10F                       	smpsAlterNote       $0F
00087431 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087435 E109                       	smpsAlterNote       $09
00087437 E701                       	dc.b	smpsNoAttack, $01
00087439 E106                       	smpsAlterNote       $06
0008743B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008743F E10C                       	smpsAlterNote       $0C
00087441 E701                       	dc.b	smpsNoAttack, $01
00087443 E110                       	smpsAlterNote       $10
00087445 E701                       	dc.b	smpsNoAttack, $01
00087447 E10F                       	smpsAlterNote       $0F
00087449 E701                       	dc.b	smpsNoAttack, $01
0008744B E109                       	smpsAlterNote       $09
0008744D E701                       	dc.b	smpsNoAttack, $01
0008744F E105                       	smpsAlterNote       $05
00087451 E701                       	dc.b	smpsNoAttack, $01
00087453 E109                       	smpsAlterNote       $09
00087455 E701                       	dc.b	smpsNoAttack, $01
00087457 E10C                       	smpsAlterNote       $0C
00087459 E701                       	dc.b	smpsNoAttack, $01
0008745B E110                       	smpsAlterNote       $10
0008745D E701                       	dc.b	smpsNoAttack, $01
0008745F E10C                       	smpsAlterNote       $0C
00087461 E701                       	dc.b	smpsNoAttack, $01
00087463 E106                       	smpsAlterNote       $06
00087465 E701                       	dc.b	smpsNoAttack, $01
00087467 E105                       	smpsAlterNote       $05
00087469 E701                       	dc.b	smpsNoAttack, $01
0008746B E109                       	smpsAlterNote       $09
0008746D E701                       	dc.b	smpsNoAttack, $01
0008746F E10F                       	smpsAlterNote       $0F
00087471 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087475 E10C                       	smpsAlterNote       $0C
00087477 E701                       	dc.b	smpsNoAttack, $01
00087479 E106                       	smpsAlterNote       $06
0008747B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008747F E10C                       	smpsAlterNote       $0C
00087481 E701                       	dc.b	smpsNoAttack, $01
00087483 E10F                       	smpsAlterNote       $0F
00087485 E701                       	dc.b	smpsNoAttack, $01
00087487 E110                       	smpsAlterNote       $10
00087489 8001                       	dc.b	nRst, $01
0008748B E10F                       	smpsAlterNote       $0F
0008748D C604                       	dc.b	nA5, $04
0008748F E10D                       	smpsAlterNote       $0D
00087491 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00087497 E10B                       	smpsAlterNote       $0B
00087499 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008749F E10F                       	smpsAlterNote       $0F
000874A1 C604 8001                  	dc.b	nA5, $04, nRst, $01
000874A5 E10D                       	smpsAlterNote       $0D
000874A7 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000874AD E10C                       	smpsAlterNote       $0C
000874AF C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000874B5 E10A                       	smpsAlterNote       $0A
000874B7 C904                       	dc.b	nC6, $04
000874B9 E110                       	smpsAlterNote       $10
000874BB C704 8001                  	dc.b	nBb5, $04, nRst, $01
000874BF E10F                       	smpsAlterNote       $0F
000874C1 C604                       	dc.b	nA5, $04
000874C3 E10D                       	smpsAlterNote       $0D
000874C5 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000874D1 E109                       	smpsAlterNote       $09
000874D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874D7 E10F                       	smpsAlterNote       $0F
000874D9 E701                       	dc.b	smpsNoAttack, $01
000874DB E112                       	smpsAlterNote       $12
000874DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000874E1 E10C                       	smpsAlterNote       $0C
000874E3 E701                       	dc.b	smpsNoAttack, $01
000874E5 E108                       	smpsAlterNote       $08
000874E7 E701                       	dc.b	smpsNoAttack, $01
000874E9 E109                       	smpsAlterNote       $09
000874EB E701                       	dc.b	smpsNoAttack, $01
000874ED E10F                       	smpsAlterNote       $0F
000874EF E701                       	dc.b	smpsNoAttack, $01
000874F1 E113                       	smpsAlterNote       $13
000874F3 E701                       	dc.b	smpsNoAttack, $01
000874F5 E10D                       	smpsAlterNote       $0D
000874F7 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000874FD E10C                       	smpsAlterNote       $0C
000874FF C10D                       	dc.b	nE5, $0D
00087501 E109                       	smpsAlterNote       $09
00087503 E701                       	dc.b	smpsNoAttack, $01
00087505 E106                       	smpsAlterNote       $06
00087507 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008750B E10C                       	smpsAlterNote       $0C
0008750D E701                       	dc.b	smpsNoAttack, $01
0008750F E110                       	smpsAlterNote       $10
00087511 E701                       	dc.b	smpsNoAttack, $01
00087513 E10F                       	smpsAlterNote       $0F
00087515 E701                       	dc.b	smpsNoAttack, $01
00087517 E109                       	smpsAlterNote       $09
00087519 E701                       	dc.b	smpsNoAttack, $01
0008751B E105                       	smpsAlterNote       $05
0008751D E701                       	dc.b	smpsNoAttack, $01
0008751F E109                       	smpsAlterNote       $09
00087521 E701                       	dc.b	smpsNoAttack, $01
00087523 E10C                       	smpsAlterNote       $0C
00087525 E701                       	dc.b	smpsNoAttack, $01
00087527 E110                       	smpsAlterNote       $10
00087529 E701                       	dc.b	smpsNoAttack, $01
0008752B E10C                       	smpsAlterNote       $0C
0008752D E701                       	dc.b	smpsNoAttack, $01
0008752F E106                       	smpsAlterNote       $06
00087531 E701                       	dc.b	smpsNoAttack, $01
00087533 E105                       	smpsAlterNote       $05
00087535 E701                       	dc.b	smpsNoAttack, $01
00087537 E109                       	smpsAlterNote       $09
00087539 E701                       	dc.b	smpsNoAttack, $01
0008753B E10F                       	smpsAlterNote       $0F
0008753D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087541 E10C                       	smpsAlterNote       $0C
00087543 E701                       	dc.b	smpsNoAttack, $01
00087545 E106                       	smpsAlterNote       $06
00087547 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008754B E10C                       	smpsAlterNote       $0C
0008754D E701                       	dc.b	smpsNoAttack, $01
0008754F E10F                       	smpsAlterNote       $0F
00087551 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087555 E109                       	smpsAlterNote       $09
00087557 E701                       	dc.b	smpsNoAttack, $01
00087559 E105                       	smpsAlterNote       $05
0008755B E701                       	dc.b	smpsNoAttack, $01
0008755D E106                       	smpsAlterNote       $06
0008755F E701                       	dc.b	smpsNoAttack, $01
00087561 E10C                       	smpsAlterNote       $0C
00087563 E701                       	dc.b	smpsNoAttack, $01
00087565 E110                       	smpsAlterNote       $10
00087567 E701                       	dc.b	smpsNoAttack, $01
00087569 E10C                       	smpsAlterNote       $0C
0008756B E701                       	dc.b	smpsNoAttack, $01
0008756D E109                       	smpsAlterNote       $09
0008756F E701                       	dc.b	smpsNoAttack, $01
00087571 E105                       	smpsAlterNote       $05
00087573 E701                       	dc.b	smpsNoAttack, $01
00087575 E109                       	smpsAlterNote       $09
00087577 E701                       	dc.b	smpsNoAttack, $01
00087579 E10F                       	smpsAlterNote       $0F
0008757B E701                       	dc.b	smpsNoAttack, $01
0008757D E110                       	smpsAlterNote       $10
0008757F E701                       	dc.b	smpsNoAttack, $01
00087581 E10C                       	smpsAlterNote       $0C
00087583 E701                       	dc.b	smpsNoAttack, $01
00087585 E106                       	smpsAlterNote       $06
00087587 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008758B E109                       	smpsAlterNote       $09
0008758D E701                       	dc.b	smpsNoAttack, $01
0008758F E10F                       	smpsAlterNote       $0F
00087591 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087595 E109                       	smpsAlterNote       $09
00087597 E701                       	dc.b	smpsNoAttack, $01
00087599 E106                       	smpsAlterNote       $06
0008759B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008759F E10C                       	smpsAlterNote       $0C
000875A1 E701                       	dc.b	smpsNoAttack, $01
000875A3 E110                       	smpsAlterNote       $10
000875A5 E701                       	dc.b	smpsNoAttack, $01
000875A7 E10F                       	smpsAlterNote       $0F
000875A9 E701                       	dc.b	smpsNoAttack, $01
000875AB E109                       	smpsAlterNote       $09
000875AD E701                       	dc.b	smpsNoAttack, $01
000875AF E105                       	smpsAlterNote       $05
000875B1 E701                       	dc.b	smpsNoAttack, $01
000875B3 E109                       	smpsAlterNote       $09
000875B5 E701                       	dc.b	smpsNoAttack, $01
000875B7 E10F                       	smpsAlterNote       $0F
000875B9 E701                       	dc.b	smpsNoAttack, $01
000875BB E110                       	smpsAlterNote       $10
000875BD E701                       	dc.b	smpsNoAttack, $01
000875BF E10C                       	smpsAlterNote       $0C
000875C1 E701                       	dc.b	smpsNoAttack, $01
000875C3 E106                       	smpsAlterNote       $06
000875C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875C9 E109                       	smpsAlterNote       $09
000875CB E701                       	dc.b	smpsNoAttack, $01
000875CD E10F                       	smpsAlterNote       $0F
000875CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875D3 E109                       	smpsAlterNote       $09
000875D5 E701                       	dc.b	smpsNoAttack, $01
000875D7 E106                       	smpsAlterNote       $06
000875D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875DD E10C                       	smpsAlterNote       $0C
000875DF E701                       	dc.b	smpsNoAttack, $01
000875E1 E110                       	smpsAlterNote       $10
000875E3 E701                       	dc.b	smpsNoAttack, $01
000875E5 E10F                       	smpsAlterNote       $0F
000875E7 E701                       	dc.b	smpsNoAttack, $01
000875E9 E109                       	smpsAlterNote       $09
000875EB E701                       	dc.b	smpsNoAttack, $01
000875ED E105                       	smpsAlterNote       $05
000875EF E701                       	dc.b	smpsNoAttack, $01
000875F1 E109                       	smpsAlterNote       $09
000875F3 E701                       	dc.b	smpsNoAttack, $01
000875F5 E10C                       	smpsAlterNote       $0C
000875F7 E701                       	dc.b	smpsNoAttack, $01
000875F9 E110                       	smpsAlterNote       $10
000875FB E701                       	dc.b	smpsNoAttack, $01
000875FD E10C                       	smpsAlterNote       $0C
000875FF E701                       	dc.b	smpsNoAttack, $01
00087601 E106                       	smpsAlterNote       $06
00087603 E701                       	dc.b	smpsNoAttack, $01
00087605 E105                       	smpsAlterNote       $05
00087607 E701                       	dc.b	smpsNoAttack, $01
00087609 E109                       	smpsAlterNote       $09
0008760B E701                       	dc.b	smpsNoAttack, $01
0008760D E10F                       	smpsAlterNote       $0F
0008760F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087613 E10C                       	smpsAlterNote       $0C
00087615 E701                       	dc.b	smpsNoAttack, $01
00087617 E106                       	smpsAlterNote       $06
00087619 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008761D E10C                       	smpsAlterNote       $0C
0008761F E701                       	dc.b	smpsNoAttack, $01
00087621 E10F                       	smpsAlterNote       $0F
00087623 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087627 E109                       	smpsAlterNote       $09
00087629 E701                       	dc.b	smpsNoAttack, $01
0008762B E105                       	smpsAlterNote       $05
0008762D E701                       	dc.b	smpsNoAttack, $01
0008762F E106                       	smpsAlterNote       $06
00087631 E701                       	dc.b	smpsNoAttack, $01
00087633 E10C                       	smpsAlterNote       $0C
00087635 E701                       	dc.b	smpsNoAttack, $01
00087637 E110                       	smpsAlterNote       $10
00087639 E701                       	dc.b	smpsNoAttack, $01
0008763B E10C                       	smpsAlterNote       $0C
0008763D E701                       	dc.b	smpsNoAttack, $01
0008763F E109                       	smpsAlterNote       $09
00087641 E701                       	dc.b	smpsNoAttack, $01
00087643 E105                       	smpsAlterNote       $05
00087645 E701                       	dc.b	smpsNoAttack, $01
00087647 E109                       	smpsAlterNote       $09
00087649 E701                       	dc.b	smpsNoAttack, $01
0008764B E10F                       	smpsAlterNote       $0F
0008764D E701                       	dc.b	smpsNoAttack, $01
0008764F E110                       	smpsAlterNote       $10
00087651 E701                       	dc.b	smpsNoAttack, $01
00087653 E10C                       	smpsAlterNote       $0C
00087655 E701                       	dc.b	smpsNoAttack, $01
00087657 E106                       	smpsAlterNote       $06
00087659 E701                       	dc.b	smpsNoAttack, $01
0008765B E10B                       	smpsAlterNote       $0B
0008765D BF02                       	dc.b	nD5, $02
0008765F E10C                       	smpsAlterNote       $0C
00087661 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00087667 E109                       	smpsAlterNote       $09
00087669 E701                       	dc.b	smpsNoAttack, $01
0008766B E105                       	smpsAlterNote       $05
0008766D E701                       	dc.b	smpsNoAttack, $01
0008766F E109                       	smpsAlterNote       $09
00087671 E701                       	dc.b	smpsNoAttack, $01
00087673 E10F                       	smpsAlterNote       $0F
00087675 E701                       	dc.b	smpsNoAttack, $01
00087677 E110                       	smpsAlterNote       $10
00087679 E701                       	dc.b	smpsNoAttack, $01
0008767B E10C                       	smpsAlterNote       $0C
0008767D E701                       	dc.b	smpsNoAttack, $01
0008767F E106                       	smpsAlterNote       $06
00087681 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087685 E109                       	smpsAlterNote       $09
00087687 E701                       	dc.b	smpsNoAttack, $01
00087689 E10F                       	smpsAlterNote       $0F
0008768B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008768F E109                       	smpsAlterNote       $09
00087691 E701                       	dc.b	smpsNoAttack, $01
00087693 E106                       	smpsAlterNote       $06
00087695 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087699 E10C                       	smpsAlterNote       $0C
0008769B E701                       	dc.b	smpsNoAttack, $01
0008769D E110                       	smpsAlterNote       $10
0008769F E701                       	dc.b	smpsNoAttack, $01
000876A1 E10F                       	smpsAlterNote       $0F
000876A3 E701                       	dc.b	smpsNoAttack, $01
000876A5 E109                       	smpsAlterNote       $09
000876A7 E701                       	dc.b	smpsNoAttack, $01
000876A9 E105                       	smpsAlterNote       $05
000876AB E701                       	dc.b	smpsNoAttack, $01
000876AD E109                       	smpsAlterNote       $09
000876AF E701                       	dc.b	smpsNoAttack, $01
000876B1 E10C                       	smpsAlterNote       $0C
000876B3 E701                       	dc.b	smpsNoAttack, $01
000876B5 E110                       	smpsAlterNote       $10
000876B7 E701                       	dc.b	smpsNoAttack, $01
000876B9 E10C                       	smpsAlterNote       $0C
000876BB E701                       	dc.b	smpsNoAttack, $01
000876BD E106                       	smpsAlterNote       $06
000876BF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000876C3 E10D                       	smpsAlterNote       $0D
000876C5 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000876CD E10C                       	smpsAlterNote       $0C
000876CF C10D                       	dc.b	nE5, $0D
000876D1 E106                       	smpsAlterNote       $06
000876D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876D7 E109                       	smpsAlterNote       $09
000876D9 E701                       	dc.b	smpsNoAttack, $01
000876DB E10F                       	smpsAlterNote       $0F
000876DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876E1 E109                       	smpsAlterNote       $09
000876E3 E701                       	dc.b	smpsNoAttack, $01
000876E5 E106                       	smpsAlterNote       $06
000876E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876EB E10C                       	smpsAlterNote       $0C
000876ED E701                       	dc.b	smpsNoAttack, $01
000876EF E110                       	smpsAlterNote       $10
000876F1 E701                       	dc.b	smpsNoAttack, $01
000876F3 E10F                       	smpsAlterNote       $0F
000876F5 E701                       	dc.b	smpsNoAttack, $01
000876F7 E109                       	smpsAlterNote       $09
000876F9 E701                       	dc.b	smpsNoAttack, $01
000876FB E105                       	smpsAlterNote       $05
000876FD E701                       	dc.b	smpsNoAttack, $01
000876FF E106                       	smpsAlterNote       $06
00087701 800F                       	dc.b	nRst, $0F
00087705 E6FF                       	smpsAlterVol        $FF
00087707 E10F                       	smpsAlterNote       $0F
00087709 BA01                       	dc.b	nA4, $01
0008770B E110                       	smpsAlterNote       $10
0008770D BB02                       	dc.b	nBb4, $02
0008770F E10F                       	smpsAlterNote       $0F
00087711 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00087717 E10B                       	smpsAlterNote       $0B
00087719 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008771D E10C                       	smpsAlterNote       $0C
0008771F C103                       	dc.b	nE5, $03
00087721 E10D                       	smpsAlterNote       $0D
00087723 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008772D E10B                       	smpsAlterNote       $0B
0008772F BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00087733 E104                       	smpsAlterNote       $04
00087735 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087739 E10A                       	smpsAlterNote       $0A
0008773B E701                       	dc.b	smpsNoAttack, $01
0008773D E10D                       	smpsAlterNote       $0D
0008773F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087743 E107                       	smpsAlterNote       $07
00087745 E701                       	dc.b	smpsNoAttack, $01
00087747 E104                       	smpsAlterNote       $04
00087749 8001                       	dc.b	nRst, $01
0008774B E110                       	smpsAlterNote       $10
0008774D C703                       	dc.b	nBb5, $03
0008774F E10F                       	smpsAlterNote       $0F
00087751 C603 8001                  	dc.b	nA5, $03, nRst, $01
00087755 E10D                       	smpsAlterNote       $0D
00087757 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008775B E10C                       	smpsAlterNote       $0C
0008775D E701                       	dc.b	smpsNoAttack, $01
0008775F E108                       	smpsAlterNote       $08
00087761 E701                       	dc.b	smpsNoAttack, $01
00087763 E109                       	smpsAlterNote       $09
00087765 E701                       	dc.b	smpsNoAttack, $01
00087767 E10F                       	smpsAlterNote       $0F
00087769 E701                       	dc.b	smpsNoAttack, $01
0008776B E113                       	smpsAlterNote       $13
0008776D E701                       	dc.b	smpsNoAttack, $01
0008776F E10F                       	smpsAlterNote       $0F
00087771 E701                       	dc.b	smpsNoAttack, $01
00087773 E10C                       	smpsAlterNote       $0C
00087775 E701                       	dc.b	smpsNoAttack, $01
00087777 E108                       	smpsAlterNote       $08
00087779 E701                       	dc.b	smpsNoAttack, $01
0008777B E10C                       	smpsAlterNote       $0C
0008777D E701                       	dc.b	smpsNoAttack, $01
0008777F E112                       	smpsAlterNote       $12
00087781 E701                       	dc.b	smpsNoAttack, $01
00087783 E113                       	smpsAlterNote       $13
00087785 E701                       	dc.b	smpsNoAttack, $01
00087787 E10F                       	smpsAlterNote       $0F
00087789 E701                       	dc.b	smpsNoAttack, $01
0008778B E109                       	smpsAlterNote       $09
0008778D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087791 E10C                       	smpsAlterNote       $0C
00087793 E701                       	dc.b	smpsNoAttack, $01
00087795 E112                       	smpsAlterNote       $12
00087797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008779B E10C                       	smpsAlterNote       $0C
0008779D E701                       	dc.b	smpsNoAttack, $01
0008779F E109                       	smpsAlterNote       $09
000877A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000877A5 E10F                       	smpsAlterNote       $0F
000877A7 E701                       	dc.b	smpsNoAttack, $01
000877A9 E113                       	smpsAlterNote       $13
000877AB E701                       	dc.b	smpsNoAttack, $01
000877AD E112                       	smpsAlterNote       $12
000877AF E701                       	dc.b	smpsNoAttack, $01
000877B1 E10C                       	smpsAlterNote       $0C
000877B3 E701                       	dc.b	smpsNoAttack, $01
000877B5 E108                       	smpsAlterNote       $08
000877B7 E701                       	dc.b	smpsNoAttack, $01
000877B9 E10C                       	smpsAlterNote       $0C
000877BB E701                       	dc.b	smpsNoAttack, $01
000877BD E10F                       	smpsAlterNote       $0F
000877BF E701                       	dc.b	smpsNoAttack, $01
000877C1 E113                       	smpsAlterNote       $13
000877C3 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000877C7 E10B                       	smpsAlterNote       $0B
000877C9 BF03                       	dc.b	nD5, $03
000877CB E10C                       	smpsAlterNote       $0C
000877CD C103 8001                  	dc.b	nE5, $03, nRst, $01
000877D1 E10D                       	smpsAlterNote       $0D
000877D3 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000877DD E10B                       	smpsAlterNote       $0B
000877DF BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000877EB E110                       	smpsAlterNote       $10
000877ED C704 8001                  	dc.b	nBb5, $04, nRst, $01
000877F1 E10F                       	smpsAlterNote       $0F
000877F3 C604                       	dc.b	nA5, $04
000877F5 E10D                       	smpsAlterNote       $0D
000877F7 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000877FD E109                       	smpsAlterNote       $09
000877FF E701                       	dc.b	smpsNoAttack, $01
00087801 E108                       	smpsAlterNote       $08
00087803 E701                       	dc.b	smpsNoAttack, $01
00087805 E10C                       	smpsAlterNote       $0C
00087807 E701                       	dc.b	smpsNoAttack, $01
00087809 E112                       	smpsAlterNote       $12
0008780B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008780F E10F                       	smpsAlterNote       $0F
00087811 E701                       	dc.b	smpsNoAttack, $01
00087813 E109                       	smpsAlterNote       $09
00087815 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087819 E10F                       	smpsAlterNote       $0F
0008781B E701                       	dc.b	smpsNoAttack, $01
0008781D E112                       	smpsAlterNote       $12
0008781F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087823 E10C                       	smpsAlterNote       $0C
00087825 E701                       	dc.b	smpsNoAttack, $01
00087827 E108                       	smpsAlterNote       $08
00087829 E701                       	dc.b	smpsNoAttack, $01
0008782B E109                       	smpsAlterNote       $09
0008782D E701                       	dc.b	smpsNoAttack, $01
0008782F E10F                       	smpsAlterNote       $0F
00087831 E701                       	dc.b	smpsNoAttack, $01
00087833 E113                       	smpsAlterNote       $13
00087835 E701                       	dc.b	smpsNoAttack, $01
00087837 E10F                       	smpsAlterNote       $0F
00087839 E701                       	dc.b	smpsNoAttack, $01
0008783B E10C                       	smpsAlterNote       $0C
0008783D E701                       	dc.b	smpsNoAttack, $01
0008783F E108                       	smpsAlterNote       $08
00087841 E701                       	dc.b	smpsNoAttack, $01
00087843 E10C                       	smpsAlterNote       $0C
00087845 E701                       	dc.b	smpsNoAttack, $01
00087847 E112                       	smpsAlterNote       $12
00087849 E701                       	dc.b	smpsNoAttack, $01
0008784B E113                       	smpsAlterNote       $13
0008784D E701                       	dc.b	smpsNoAttack, $01
0008784F E10F                       	smpsAlterNote       $0F
00087851 E701                       	dc.b	smpsNoAttack, $01
00087853 E109                       	smpsAlterNote       $09
00087855 E701                       	dc.b	smpsNoAttack, $01
00087857 E10D                       	smpsAlterNote       $0D
00087859 C402                       	dc.b	nG5, $02
0008785B E10F                       	smpsAlterNote       $0F
0008785D C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00087867 E10D                       	smpsAlterNote       $0D
00087869 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008786F E10B                       	smpsAlterNote       $0B
00087871 BF0D                       	dc.b	nD5, $0D
00087873 E108                       	smpsAlterNote       $08
00087875 E701                       	dc.b	smpsNoAttack, $01
00087877 E104                       	smpsAlterNote       $04
00087879 E701                       	dc.b	smpsNoAttack, $01
0008787B E105                       	smpsAlterNote       $05
0008787D E701                       	dc.b	smpsNoAttack, $01
0008787F E10B                       	smpsAlterNote       $0B
00087881 E701                       	dc.b	smpsNoAttack, $01
00087883 E10F                       	smpsAlterNote       $0F
00087885 E701                       	dc.b	smpsNoAttack, $01
00087887 E10B                       	smpsAlterNote       $0B
00087889 E701                       	dc.b	smpsNoAttack, $01
0008788B E108                       	smpsAlterNote       $08
0008788D E701                       	dc.b	smpsNoAttack, $01
0008788F E104                       	smpsAlterNote       $04
00087891 E701                       	dc.b	smpsNoAttack, $01
00087893 E108                       	smpsAlterNote       $08
00087895 E701                       	dc.b	smpsNoAttack, $01
00087897 E10E                       	smpsAlterNote       $0E
00087899 E701                       	dc.b	smpsNoAttack, $01
0008789B E10F                       	smpsAlterNote       $0F
0008789D E701                       	dc.b	smpsNoAttack, $01
0008789F E10C                       	smpsAlterNote       $0C
000878A1 C101                       	dc.b	nE5, $01
000878A3 E10D                       	smpsAlterNote       $0D
000878A5 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000878AD E10F                       	smpsAlterNote       $0F
000878AF C607                       	dc.b	nA5, $07
000878B1 E10C                       	smpsAlterNote       $0C
000878B3 CD07                       	dc.b	nE6, $07
000878B5 E10D                       	smpsAlterNote       $0D
000878B7 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000878BB E10C                       	smpsAlterNote       $0C
000878BD CD03                       	dc.b	nE6, $03
000878BF E10A                       	smpsAlterNote       $0A
000878C1 C903 8001                  	dc.b	nC6, $03, nRst, $01
000878C5 E10D                       	smpsAlterNote       $0D
000878C7 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000878CD E10A                       	smpsAlterNote       $0A
000878CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878D3 E110                       	smpsAlterNote       $10
000878D5 E701                       	dc.b	smpsNoAttack, $01
000878D7 E114                       	smpsAlterNote       $14
000878D9 E701                       	dc.b	smpsNoAttack, $01
000878DB E113                       	smpsAlterNote       $13
000878DD E701                       	dc.b	smpsNoAttack, $01
000878DF E10D                       	smpsAlterNote       $0D
000878E1 E701                       	dc.b	smpsNoAttack, $01
000878E3 E109                       	smpsAlterNote       $09
000878E5 E701                       	dc.b	smpsNoAttack, $01
000878E7 E10D                       	smpsAlterNote       $0D
000878E9 E701                       	dc.b	smpsNoAttack, $01
000878EB E110                       	smpsAlterNote       $10
000878ED E701                       	dc.b	smpsNoAttack, $01
000878EF E114                       	smpsAlterNote       $14
000878F1 E701                       	dc.b	smpsNoAttack, $01
000878F3 E10F                       	smpsAlterNote       $0F
000878F5 C607                       	dc.b	nA5, $07
000878F7 E10D                       	smpsAlterNote       $0D
000878F9 C40D                       	dc.b	nG5, $0D
000878FB E10A                       	smpsAlterNote       $0A
000878FD E701                       	dc.b	smpsNoAttack, $01
000878FF E106                       	smpsAlterNote       $06
00087901 E701                       	dc.b	smpsNoAttack, $01
00087903 E10A                       	smpsAlterNote       $0A
00087905 E701                       	dc.b	smpsNoAttack, $01
00087907 E10D                       	smpsAlterNote       $0D
00087909 E701                       	dc.b	smpsNoAttack, $01
0008790B E111                       	smpsAlterNote       $11
0008790D E701                       	dc.b	smpsNoAttack, $01
0008790F E10D                       	smpsAlterNote       $0D
00087911 E701                       	dc.b	smpsNoAttack, $01
00087913 E107                       	smpsAlterNote       $07
00087915 E701                       	dc.b	smpsNoAttack, $01
00087917 E106                       	smpsAlterNote       $06
00087919 E701                       	dc.b	smpsNoAttack, $01
0008791B E10A                       	smpsAlterNote       $0A
0008791D E701                       	dc.b	smpsNoAttack, $01
0008791F E110                       	smpsAlterNote       $10
00087921 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087925 E10D                       	smpsAlterNote       $0D
00087927 E701                       	dc.b	smpsNoAttack, $01
00087929 E107                       	smpsAlterNote       $07
0008792B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008792F E10F                       	smpsAlterNote       $0F
00087931 C60E                       	dc.b	nA5, $0E
00087933 E109                       	smpsAlterNote       $09
00087935 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087939 E10F                       	smpsAlterNote       $0F
0008793B E701                       	dc.b	smpsNoAttack, $01
0008793D E112                       	smpsAlterNote       $12
0008793F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087943 E10C                       	smpsAlterNote       $0C
00087945 E701                       	dc.b	smpsNoAttack, $01
00087947 E108                       	smpsAlterNote       $08
00087949 E701                       	dc.b	smpsNoAttack, $01
0008794B E109                       	smpsAlterNote       $09
0008794D E701                       	dc.b	smpsNoAttack, $01
0008794F E10F                       	smpsAlterNote       $0F
00087951 E701                       	dc.b	smpsNoAttack, $01
00087953 E113                       	smpsAlterNote       $13
00087955 E701                       	dc.b	smpsNoAttack, $01
00087957 E10F                       	smpsAlterNote       $0F
00087959 E701                       	dc.b	smpsNoAttack, $01
0008795B E10C                       	smpsAlterNote       $0C
0008795D E701                       	dc.b	smpsNoAttack, $01
0008795F E108                       	smpsAlterNote       $08
00087961 E701                       	dc.b	smpsNoAttack, $01
00087963 E109                       	smpsAlterNote       $09
00087965 8001                       	dc.b	nRst, $01
00087967 E110                       	smpsAlterNote       $10
00087969 C70D                       	dc.b	nBb5, $0D
0008796B E10D                       	smpsAlterNote       $0D
0008796D E701                       	dc.b	smpsNoAttack, $01
0008796F E109                       	smpsAlterNote       $09
00087971 E701                       	dc.b	smpsNoAttack, $01
00087973 E10D                       	smpsAlterNote       $0D
00087975 E701                       	dc.b	smpsNoAttack, $01
00087977 E113                       	smpsAlterNote       $13
00087979 E701                       	dc.b	smpsNoAttack, $01
0008797B E114                       	smpsAlterNote       $14
0008797D E701                       	dc.b	smpsNoAttack, $01
0008797F E110                       	smpsAlterNote       $10
00087981 E701                       	dc.b	smpsNoAttack, $01
00087983 E10A                       	smpsAlterNote       $0A
00087985 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087989 E10D                       	smpsAlterNote       $0D
0008798B E701                       	dc.b	smpsNoAttack, $01
0008798D E113                       	smpsAlterNote       $13
0008798F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087993 E10D                       	smpsAlterNote       $0D
00087995 E701                       	dc.b	smpsNoAttack, $01
00087997 E10A                       	smpsAlterNote       $0A
00087999 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000879A3 E10B                       	smpsAlterNote       $0B
000879A5 8001                       	dc.b	nRst, $01
000879A7 E10C                       	smpsAlterNote       $0C
000879A9 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000879AD E10B                       	smpsAlterNote       $0B
000879AF CB0D                       	dc.b	nD6, $0D
000879B1 E105                       	smpsAlterNote       $05
000879B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879B7 E108                       	smpsAlterNote       $08
000879B9 E701                       	dc.b	smpsNoAttack, $01
000879BB E10E                       	smpsAlterNote       $0E
000879BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879C1 E108                       	smpsAlterNote       $08
000879C3 E701                       	dc.b	smpsNoAttack, $01
000879C5 E105                       	smpsAlterNote       $05
000879C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879CB E10B                       	smpsAlterNote       $0B
000879CD E701                       	dc.b	smpsNoAttack, $01
000879CF E10F                       	smpsAlterNote       $0F
000879D1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000879D5 E10C                       	smpsAlterNote       $0C
000879D7 CC0D                       	dc.b	nEb6, $0D
000879D9 E106                       	smpsAlterNote       $06
000879DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879DF E109                       	smpsAlterNote       $09
000879E1 E701                       	dc.b	smpsNoAttack, $01
000879E3 E10C                       	smpsAlterNote       $0C
000879E5 8001                       	dc.b	nRst, $01
000879E7 E10A                       	smpsAlterNote       $0A
000879E9 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000879F5 CB0E                       	dc.b	nD6, $0E
000879F7 E105                       	smpsAlterNote       $05
000879F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879FD E10B                       	smpsAlterNote       $0B
000879FF E701                       	dc.b	smpsNoAttack, $01
00087A01 E10E                       	smpsAlterNote       $0E
00087A03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A07 E108                       	smpsAlterNote       $08
00087A09 E701                       	dc.b	smpsNoAttack, $01
00087A0B E104                       	smpsAlterNote       $04
00087A0D E701                       	dc.b	smpsNoAttack, $01
00087A0F E105                       	smpsAlterNote       $05
00087A11 E701                       	dc.b	smpsNoAttack, $01
00087A13 E10B                       	smpsAlterNote       $0B
00087A15 E701                       	dc.b	smpsNoAttack, $01
00087A17 E10F                       	smpsAlterNote       $0F
00087A19 E701                       	dc.b	smpsNoAttack, $01
00087A1B E10D                       	smpsAlterNote       $0D
00087A1D CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00087A21 E10C                       	smpsAlterNote       $0C
00087A23 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00087A27 E10A                       	smpsAlterNote       $0A
00087A29 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00087A35 CB0D                       	dc.b	nD6, $0D
00087A37 E108                       	smpsAlterNote       $08
00087A39 E701                       	dc.b	smpsNoAttack, $01
00087A3B E104                       	smpsAlterNote       $04
00087A3D E701                       	dc.b	smpsNoAttack, $01
00087A3F E105                       	smpsAlterNote       $05
00087A41 E701                       	dc.b	smpsNoAttack, $01
00087A43 E10B                       	smpsAlterNote       $0B
00087A45 E701                       	dc.b	smpsNoAttack, $01
00087A47 E10F                       	smpsAlterNote       $0F
00087A49 E701                       	dc.b	smpsNoAttack, $01
00087A4B E10B                       	smpsAlterNote       $0B
00087A4D E701                       	dc.b	smpsNoAttack, $01
00087A4F E108                       	smpsAlterNote       $08
00087A51 E701                       	dc.b	smpsNoAttack, $01
00087A53 E104                       	smpsAlterNote       $04
00087A55 E701                       	dc.b	smpsNoAttack, $01
00087A57 E108                       	smpsAlterNote       $08
00087A59 E701                       	dc.b	smpsNoAttack, $01
00087A5B E10E                       	smpsAlterNote       $0E
00087A5D E701                       	dc.b	smpsNoAttack, $01
00087A5F E10F                       	smpsAlterNote       $0F
00087A61 E701                       	dc.b	smpsNoAttack, $01
00087A63 E10C                       	smpsAlterNote       $0C
00087A65 CC0D                       	dc.b	nEb6, $0D
00087A67 E109                       	smpsAlterNote       $09
00087A69 E701                       	dc.b	smpsNoAttack, $01
00087A6B E105                       	smpsAlterNote       $05
00087A6D E701                       	dc.b	smpsNoAttack, $01
00087A6F E106                       	smpsAlterNote       $06
00087A71 E701                       	dc.b	smpsNoAttack, $01
00087A73 E10C                       	smpsAlterNote       $0C
00087A75 E701                       	dc.b	smpsNoAttack, $01
00087A77 E10A                       	smpsAlterNote       $0A
00087A79 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00087A85 CB0D                       	dc.b	nD6, $0D
00087A87 E108                       	smpsAlterNote       $08
00087A89 E701                       	dc.b	smpsNoAttack, $01
00087A8B E104                       	smpsAlterNote       $04
00087A8D E701                       	dc.b	smpsNoAttack, $01
00087A8F E108                       	smpsAlterNote       $08
00087A91 E701                       	dc.b	smpsNoAttack, $01
00087A93 E10B                       	smpsAlterNote       $0B
00087A95 E701                       	dc.b	smpsNoAttack, $01
00087A97 E10F                       	smpsAlterNote       $0F
00087A99 E701                       	dc.b	smpsNoAttack, $01
00087A9B E10B                       	smpsAlterNote       $0B
00087A9D E701                       	dc.b	smpsNoAttack, $01
00087A9F E105                       	smpsAlterNote       $05
00087AA1 E701                       	dc.b	smpsNoAttack, $01
00087AA3 E104                       	smpsAlterNote       $04
00087AA5 E701                       	dc.b	smpsNoAttack, $01
00087AA7 E108                       	smpsAlterNote       $08
00087AA9 E701                       	dc.b	smpsNoAttack, $01
00087AAB E10E                       	smpsAlterNote       $0E
00087AAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AB1 E10B                       	smpsAlterNote       $0B
00087AB3 E701                       	dc.b	smpsNoAttack, $01
00087AB5 E105                       	smpsAlterNote       $05
00087AB7 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00087ABF 03                         	dc.b	$03
00087AC0 E601                       	smpsAlterVol        $01
00087AC2 F6F1 D1                    	smpsJump            music84_Jump01
00087AC5                            
00087AC5                            ; FM5 Data
00087AC5                            music84_FM5:
00087AC7 E080                       	smpsPan             panLeft, $00
00087AC9 8003                       	dc.b	nRst, $03
00087ACB E10D                       	smpsAlterNote       $0D
00087ACD C203 8008                  	dc.b	nF5, $03, nRst, $08
00087AD1 E10C                       	smpsAlterNote       $0C
00087AD3 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00087AD7 E10F                       	smpsAlterNote       $0F
00087AD9 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00087ADF E6FE                       	smpsAlterVol        $FE
00087AE1 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00087AE7 E10D                       	smpsAlterNote       $0D
00087AE9 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00087AEF E10C                       	smpsAlterNote       $0C
00087AF1 C102 8001                  	dc.b	nE5, $02, nRst, $01
00087AF5 E10A                       	smpsAlterNote       $0A
00087AF7 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00087AFD 03                         	dc.b	$03
00087AFE                            
00087AFE                            music84_Jump00:
00087AFE 8004                       	dc.b	nRst, $04
00087B00 E602                       	smpsAlterVol        $02
00087B02 E10D                       	smpsAlterNote       $0D
00087B04 B60D                       	dc.b	nF4, $0D
00087B06 E107                       	smpsAlterNote       $07
00087B08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B0C E10A                       	smpsAlterNote       $0A
00087B0E E701                       	dc.b	smpsNoAttack, $01
00087B10 E110                       	smpsAlterNote       $10
00087B12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B16 E10A                       	smpsAlterNote       $0A
00087B18 E701                       	dc.b	smpsNoAttack, $01
00087B1A E107                       	smpsAlterNote       $07
00087B1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B20 E10D                       	smpsAlterNote       $0D
00087B22 E701                       	dc.b	smpsNoAttack, $01
00087B24 E111                       	smpsAlterNote       $11
00087B26 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087B2A E10D                       	smpsAlterNote       $0D
00087B2C B80D                       	dc.b	nG4, $0D
00087B2E E107                       	smpsAlterNote       $07
00087B30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B34 E10A                       	smpsAlterNote       $0A
00087B36 E701                       	dc.b	smpsNoAttack, $01
00087B38 E110                       	smpsAlterNote       $10
00087B3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B3E E10A                       	smpsAlterNote       $0A
00087B40 E701                       	dc.b	smpsNoAttack, $01
00087B42 E107                       	smpsAlterNote       $07
00087B44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B48 E10D                       	smpsAlterNote       $0D
00087B4A E701                       	dc.b	smpsNoAttack, $01
00087B4C E111                       	smpsAlterNote       $11
00087B4E E701                       	dc.b	smpsNoAttack, $01
00087B50 E110                       	smpsAlterNote       $10
00087B52 E701                       	dc.b	smpsNoAttack, $01
00087B54 E10A                       	smpsAlterNote       $0A
00087B56 E701                       	dc.b	smpsNoAttack, $01
00087B58 E106                       	smpsAlterNote       $06
00087B5A E701                       	dc.b	smpsNoAttack, $01
00087B5C E10A                       	smpsAlterNote       $0A
00087B5E E701                       	dc.b	smpsNoAttack, $01
00087B60 E10D                       	smpsAlterNote       $0D
00087B62 E701                       	dc.b	smpsNoAttack, $01
00087B64 E111                       	smpsAlterNote       $11
00087B66 E701                       	dc.b	smpsNoAttack, $01
00087B68 E10D                       	smpsAlterNote       $0D
00087B6A E701                       	dc.b	smpsNoAttack, $01
00087B6C E10F                       	smpsAlterNote       $0F
00087B6E BA0E                       	dc.b	nA4, $0E
00087B70 E109                       	smpsAlterNote       $09
00087B72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B76 E10F                       	smpsAlterNote       $0F
00087B78 E701                       	dc.b	smpsNoAttack, $01
00087B7A E112                       	smpsAlterNote       $12
00087B7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B80 E10C                       	smpsAlterNote       $0C
00087B82 E701                       	dc.b	smpsNoAttack, $01
00087B84 E108                       	smpsAlterNote       $08
00087B86 E701                       	dc.b	smpsNoAttack, $01
00087B88 E109                       	smpsAlterNote       $09
00087B8A E701                       	dc.b	smpsNoAttack, $01
00087B8C E10F                       	smpsAlterNote       $0F
00087B8E E701                       	dc.b	smpsNoAttack, $01
00087B90 E113                       	smpsAlterNote       $13
00087B92 E701                       	dc.b	smpsNoAttack, $01
00087B94 E10F                       	smpsAlterNote       $0F
00087B96 E701                       	dc.b	smpsNoAttack, $01
00087B98 E109                       	smpsAlterNote       $09
00087B9A E701                       	dc.b	smpsNoAttack, $01
00087B9C E108                       	smpsAlterNote       $08
00087B9E E701                       	dc.b	smpsNoAttack, $01
00087BA0 E10C                       	smpsAlterNote       $0C
00087BA2 E701                       	dc.b	smpsNoAttack, $01
00087BA4 E112                       	smpsAlterNote       $12
00087BA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BAA E10F                       	smpsAlterNote       $0F
00087BAC E701                       	dc.b	smpsNoAttack, $01
00087BAE E109                       	smpsAlterNote       $09
00087BB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BB4 E10F                       	smpsAlterNote       $0F
00087BB6 E701                       	dc.b	smpsNoAttack, $01
00087BB8 E112                       	smpsAlterNote       $12
00087BBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BBE E10C                       	smpsAlterNote       $0C
00087BC0 E701                       	dc.b	smpsNoAttack, $01
00087BC2 E108                       	smpsAlterNote       $08
00087BC4 E701                       	dc.b	smpsNoAttack, $01
00087BC6 E109                       	smpsAlterNote       $09
00087BC8 E701                       	dc.b	smpsNoAttack, $01
00087BCA E10F                       	smpsAlterNote       $0F
00087BCC E701                       	dc.b	smpsNoAttack, $01
00087BCE E113                       	smpsAlterNote       $13
00087BD0 E701                       	dc.b	smpsNoAttack, $01
00087BD2 E10F                       	smpsAlterNote       $0F
00087BD4 E701                       	dc.b	smpsNoAttack, $01
00087BD6 E10C                       	smpsAlterNote       $0C
00087BD8 E701                       	dc.b	smpsNoAttack, $01
00087BDA E108                       	smpsAlterNote       $08
00087BDC E701                       	dc.b	smpsNoAttack, $01
00087BDE E109                       	smpsAlterNote       $09
00087BE0 8001                       	dc.b	nRst, $01
00087BE2 E10C                       	smpsAlterNote       $0C
00087BE4 B50A                       	dc.b	nE4, $0A
00087BE6 E10D                       	smpsAlterNote       $0D
00087BE8 B60D                       	dc.b	nF4, $0D
00087BEA E10A                       	smpsAlterNote       $0A
00087BEC E701                       	dc.b	smpsNoAttack, $01
00087BEE E106                       	smpsAlterNote       $06
00087BF0 E701                       	dc.b	smpsNoAttack, $01
00087BF2 E107                       	smpsAlterNote       $07
00087BF4 E701                       	dc.b	smpsNoAttack, $01
00087BF6 E10D                       	smpsAlterNote       $0D
00087BF8 E701                       	dc.b	smpsNoAttack, $01
00087BFA E111                       	smpsAlterNote       $11
00087BFC E701                       	dc.b	smpsNoAttack, $01
00087BFE E10D                       	smpsAlterNote       $0D
00087C00 E701                       	dc.b	smpsNoAttack, $01
00087C02 E10A                       	smpsAlterNote       $0A
00087C04 E701                       	dc.b	smpsNoAttack, $01
00087C06 E106                       	smpsAlterNote       $06
00087C08 E701                       	dc.b	smpsNoAttack, $01
00087C0A E10A                       	smpsAlterNote       $0A
00087C0C E701                       	dc.b	smpsNoAttack, $01
00087C0E E110                       	smpsAlterNote       $10
00087C10 E701                       	dc.b	smpsNoAttack, $01
00087C12 E111                       	smpsAlterNote       $11
00087C14 E701                       	dc.b	smpsNoAttack, $01
00087C16 E10D                       	smpsAlterNote       $0D
00087C18 B80D                       	dc.b	nG4, $0D
00087C1A E10A                       	smpsAlterNote       $0A
00087C1C E701                       	dc.b	smpsNoAttack, $01
00087C1E E106                       	smpsAlterNote       $06
00087C20 E701                       	dc.b	smpsNoAttack, $01
00087C22 E107                       	smpsAlterNote       $07
00087C24 E701                       	dc.b	smpsNoAttack, $01
00087C26 E10D                       	smpsAlterNote       $0D
00087C28 E701                       	dc.b	smpsNoAttack, $01
00087C2A E111                       	smpsAlterNote       $11
00087C2C E701                       	dc.b	smpsNoAttack, $01
00087C2E E10D                       	smpsAlterNote       $0D
00087C30 E701                       	dc.b	smpsNoAttack, $01
00087C32 E10A                       	smpsAlterNote       $0A
00087C34 E701                       	dc.b	smpsNoAttack, $01
00087C36 E106                       	smpsAlterNote       $06
00087C38 E701                       	dc.b	smpsNoAttack, $01
00087C3A E10A                       	smpsAlterNote       $0A
00087C3C E701                       	dc.b	smpsNoAttack, $01
00087C3E E110                       	smpsAlterNote       $10
00087C40 E701                       	dc.b	smpsNoAttack, $01
00087C42 E111                       	smpsAlterNote       $11
00087C44 E701                       	dc.b	smpsNoAttack, $01
00087C46 E10D                       	smpsAlterNote       $0D
00087C48 E701                       	dc.b	smpsNoAttack, $01
00087C4A E107                       	smpsAlterNote       $07
00087C4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C50 E10A                       	smpsAlterNote       $0A
00087C52 E701                       	dc.b	smpsNoAttack, $01
00087C54 E110                       	smpsAlterNote       $10
00087C56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C5A E10D                       	smpsAlterNote       $0D
00087C5C 8001                       	dc.b	nRst, $01
00087C5E E10F                       	smpsAlterNote       $0F
00087C60 BA0D                       	dc.b	nA4, $0D
00087C62 E10C                       	smpsAlterNote       $0C
00087C64 E701                       	dc.b	smpsNoAttack, $01
00087C66 E108                       	smpsAlterNote       $08
00087C68 E701                       	dc.b	smpsNoAttack, $01
00087C6A E10C                       	smpsAlterNote       $0C
00087C6C E701                       	dc.b	smpsNoAttack, $01
00087C6E E112                       	smpsAlterNote       $12
00087C70 E701                       	dc.b	smpsNoAttack, $01
00087C72 E113                       	smpsAlterNote       $13
00087C74 E701                       	dc.b	smpsNoAttack, $01
00087C76 E10F                       	smpsAlterNote       $0F
00087C78 E701                       	dc.b	smpsNoAttack, $01
00087C7A E109                       	smpsAlterNote       $09
00087C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C80 E10C                       	smpsAlterNote       $0C
00087C82 E701                       	dc.b	smpsNoAttack, $01
00087C84 E112                       	smpsAlterNote       $12
00087C86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C8A E10C                       	smpsAlterNote       $0C
00087C8C E701                       	dc.b	smpsNoAttack, $01
00087C8E E109                       	smpsAlterNote       $09
00087C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C94 E10F                       	smpsAlterNote       $0F
00087C96 E701                       	dc.b	smpsNoAttack, $01
00087C98 E113                       	smpsAlterNote       $13
00087C9A E701                       	dc.b	smpsNoAttack, $01
00087C9C E112                       	smpsAlterNote       $12
00087C9E E701                       	dc.b	smpsNoAttack, $01
00087CA0 E10C                       	smpsAlterNote       $0C
00087CA2 E701                       	dc.b	smpsNoAttack, $01
00087CA4 E108                       	smpsAlterNote       $08
00087CA6 E701                       	dc.b	smpsNoAttack, $01
00087CA8 E10C                       	smpsAlterNote       $0C
00087CAA E701                       	dc.b	smpsNoAttack, $01
00087CAC E10F                       	smpsAlterNote       $0F
00087CAE E701                       	dc.b	smpsNoAttack, $01
00087CB0 E113                       	smpsAlterNote       $13
00087CB2 E701                       	dc.b	smpsNoAttack, $01
00087CB4 E10F                       	smpsAlterNote       $0F
00087CB6 E701                       	dc.b	smpsNoAttack, $01
00087CB8 E109                       	smpsAlterNote       $09
00087CBA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087CBE E10D                       	smpsAlterNote       $0D
00087CC0 B609 8001                  	dc.b	nF4, $09, nRst, $01
00087CC4 E10C                       	smpsAlterNote       $0C
00087CC6 B506 8001                  	dc.b	nE4, $06, nRst, $01
00087CCA E10B                       	smpsAlterNote       $0B
00087CCC B30D                       	dc.b	nD4, $0D
00087CCE E10C                       	smpsAlterNote       $0C
00087CD0 B503 8001                  	dc.b	nE4, $03, nRst, $01
00087CD4 E10D                       	smpsAlterNote       $0D
00087CD6 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00087CDE E109                       	smpsAlterNote       $09
00087CE0 E701                       	dc.b	smpsNoAttack, $01
00087CE2 E108                       	smpsAlterNote       $08
00087CE4 E701                       	dc.b	smpsNoAttack, $01
00087CE6 E10C                       	smpsAlterNote       $0C
00087CE8 E701                       	dc.b	smpsNoAttack, $01
00087CEA E112                       	smpsAlterNote       $12
00087CEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CF0 E10F                       	smpsAlterNote       $0F
00087CF2 E701                       	dc.b	smpsNoAttack, $01
00087CF4 E109                       	smpsAlterNote       $09
00087CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CFA E10F                       	smpsAlterNote       $0F
00087CFC E701                       	dc.b	smpsNoAttack, $01
00087CFE E112                       	smpsAlterNote       $12
00087D00 E701                       	dc.b	smpsNoAttack, $01
00087D02 E113                       	smpsAlterNote       $13
00087D04 8001                       	dc.b	nRst, $01
00087D06 E10D                       	smpsAlterNote       $0D
00087D08 C20D                       	dc.b	nF5, $0D
00087D0A E107                       	smpsAlterNote       $07
00087D0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D10 E10A                       	smpsAlterNote       $0A
00087D12 E701                       	dc.b	smpsNoAttack, $01
00087D14 E110                       	smpsAlterNote       $10
00087D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D1A E10A                       	smpsAlterNote       $0A
00087D1C E701                       	dc.b	smpsNoAttack, $01
00087D1E E107                       	smpsAlterNote       $07
00087D20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D24 E10D                       	smpsAlterNote       $0D
00087D26 E701                       	dc.b	smpsNoAttack, $01
00087D28 E111                       	smpsAlterNote       $11
00087D2A E701                       	dc.b	smpsNoAttack, $01
00087D2C E110                       	smpsAlterNote       $10
00087D2E E701                       	dc.b	smpsNoAttack, $01
00087D30 E10A                       	smpsAlterNote       $0A
00087D32 E701                       	dc.b	smpsNoAttack, $01
00087D34 E106                       	smpsAlterNote       $06
00087D36 E701                       	dc.b	smpsNoAttack, $01
00087D38 E10A                       	smpsAlterNote       $0A
00087D3A E701                       	dc.b	smpsNoAttack, $01
00087D3C E10D                       	smpsAlterNote       $0D
00087D3E E701                       	dc.b	smpsNoAttack, $01
00087D40 E111                       	smpsAlterNote       $11
00087D42 E701                       	dc.b	smpsNoAttack, $01
00087D44 E10D                       	smpsAlterNote       $0D
00087D46 E701                       	dc.b	smpsNoAttack, $01
00087D48 E107                       	smpsAlterNote       $07
00087D4A E701                       	dc.b	smpsNoAttack, $01
00087D4C E106                       	smpsAlterNote       $06
00087D4E E701                       	dc.b	smpsNoAttack, $01
00087D50 E10A                       	smpsAlterNote       $0A
00087D52 E701                       	dc.b	smpsNoAttack, $01
00087D54 E110                       	smpsAlterNote       $10
00087D56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D5A E10D                       	smpsAlterNote       $0D
00087D5C E701                       	dc.b	smpsNoAttack, $01
00087D5E E107                       	smpsAlterNote       $07
00087D60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D64 E10D                       	smpsAlterNote       $0D
00087D66 E701                       	dc.b	smpsNoAttack, $01
00087D68 E110                       	smpsAlterNote       $10
00087D6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087D6E E10A                       	smpsAlterNote       $0A
00087D70 E701                       	dc.b	smpsNoAttack, $01
00087D72 E106                       	smpsAlterNote       $06
00087D74 E701                       	dc.b	smpsNoAttack, $01
00087D76 E107                       	smpsAlterNote       $07
00087D78 E701                       	dc.b	smpsNoAttack, $01
00087D7A E10D                       	smpsAlterNote       $0D
00087D7C E701                       	dc.b	smpsNoAttack, $01
00087D7E E111                       	smpsAlterNote       $11
00087D80 E701                       	dc.b	smpsNoAttack, $01
00087D82 E10D                       	smpsAlterNote       $0D
00087D84 E701                       	dc.b	smpsNoAttack, $01
00087D86 E10A                       	smpsAlterNote       $0A
00087D88 E701                       	dc.b	smpsNoAttack, $01
00087D8A E106                       	smpsAlterNote       $06
00087D8C E701                       	dc.b	smpsNoAttack, $01
00087D8E E10A                       	smpsAlterNote       $0A
00087D90 E701                       	dc.b	smpsNoAttack, $01
00087D92 E110                       	smpsAlterNote       $10
00087D94 E701                       	dc.b	smpsNoAttack, $01
00087D96 E111                       	smpsAlterNote       $11
00087D98 E701                       	dc.b	smpsNoAttack, $01
00087D9A E10D                       	smpsAlterNote       $0D
00087D9C E701                       	dc.b	smpsNoAttack, $01
00087D9E E107                       	smpsAlterNote       $07
00087DA0 E701                       	dc.b	smpsNoAttack, $01
00087DA2 E10D                       	smpsAlterNote       $0D
00087DA4 C207                       	dc.b	nF5, $07
00087DA6 E10C                       	smpsAlterNote       $0C
00087DA8 C10D                       	dc.b	nE5, $0D
00087DAA E109                       	smpsAlterNote       $09
00087DAC E701                       	dc.b	smpsNoAttack, $01
00087DAE E106                       	smpsAlterNote       $06
00087DB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DB4 E10C                       	smpsAlterNote       $0C
00087DB6 E701                       	dc.b	smpsNoAttack, $01
00087DB8 E110                       	smpsAlterNote       $10
00087DBA E701                       	dc.b	smpsNoAttack, $01
00087DBC E10F                       	smpsAlterNote       $0F
00087DBE E701                       	dc.b	smpsNoAttack, $01
00087DC0 E109                       	smpsAlterNote       $09
00087DC2 E701                       	dc.b	smpsNoAttack, $01
00087DC4 E105                       	smpsAlterNote       $05
00087DC6 E701                       	dc.b	smpsNoAttack, $01
00087DC8 E109                       	smpsAlterNote       $09
00087DCA E701                       	dc.b	smpsNoAttack, $01
00087DCC E10C                       	smpsAlterNote       $0C
00087DCE E701                       	dc.b	smpsNoAttack, $01
00087DD0 E110                       	smpsAlterNote       $10
00087DD2 E701                       	dc.b	smpsNoAttack, $01
00087DD4 E10B                       	smpsAlterNote       $0B
00087DD6 BF0D                       	dc.b	nD5, $0D
00087DD8 E108                       	smpsAlterNote       $08
00087DDA E701                       	dc.b	smpsNoAttack, $01
00087DDC E105                       	smpsAlterNote       $05
00087DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DE2 E10B                       	smpsAlterNote       $0B
00087DE4 E701                       	dc.b	smpsNoAttack, $01
00087DE6 E10F                       	smpsAlterNote       $0F
00087DE8 E701                       	dc.b	smpsNoAttack, $01
00087DEA E10E                       	smpsAlterNote       $0E
00087DEC E701                       	dc.b	smpsNoAttack, $01
00087DEE E108                       	smpsAlterNote       $08
00087DF0 E701                       	dc.b	smpsNoAttack, $01
00087DF2 E104                       	smpsAlterNote       $04
00087DF4 E701                       	dc.b	smpsNoAttack, $01
00087DF6 E108                       	smpsAlterNote       $08
00087DF8 E701                       	dc.b	smpsNoAttack, $01
00087DFA E10E                       	smpsAlterNote       $0E
00087DFC E701                       	dc.b	smpsNoAttack, $01
00087DFE E10F                       	smpsAlterNote       $0F
00087E00 E701                       	dc.b	smpsNoAttack, $01
00087E02 E10B                       	smpsAlterNote       $0B
00087E04 E701                       	dc.b	smpsNoAttack, $01
00087E06 E105                       	smpsAlterNote       $05
00087E08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E0C E108                       	smpsAlterNote       $08
00087E0E E701                       	dc.b	smpsNoAttack, $01
00087E10 E10E                       	smpsAlterNote       $0E
00087E12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E16 E108                       	smpsAlterNote       $08
00087E18 E701                       	dc.b	smpsNoAttack, $01
00087E1A E105                       	smpsAlterNote       $05
00087E1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E20 E10B                       	smpsAlterNote       $0B
00087E22 E701                       	dc.b	smpsNoAttack, $01
00087E24 E10F                       	smpsAlterNote       $0F
00087E26 E701                       	dc.b	smpsNoAttack, $01
00087E28 E10E                       	smpsAlterNote       $0E
00087E2A E701                       	dc.b	smpsNoAttack, $01
00087E2C E108                       	smpsAlterNote       $08
00087E2E E701                       	dc.b	smpsNoAttack, $01
00087E30 E104                       	smpsAlterNote       $04
00087E32 E701                       	dc.b	smpsNoAttack, $01
00087E34 E108                       	smpsAlterNote       $08
00087E36 E701                       	dc.b	smpsNoAttack, $01
00087E38 E10B                       	smpsAlterNote       $0B
00087E3A E701                       	dc.b	smpsNoAttack, $01
00087E3C E10F                       	smpsAlterNote       $0F
00087E3E E701                       	dc.b	smpsNoAttack, $01
00087E40 E10B                       	smpsAlterNote       $0B
00087E42 E701                       	dc.b	smpsNoAttack, $01
00087E44 E105                       	smpsAlterNote       $05
00087E46 E701                       	dc.b	smpsNoAttack, $01
00087E48 E104                       	smpsAlterNote       $04
00087E4A E701                       	dc.b	smpsNoAttack, $01
00087E4C E108                       	smpsAlterNote       $08
00087E4E E701                       	dc.b	smpsNoAttack, $01
00087E50 E10E                       	smpsAlterNote       $0E
00087E52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E56 E10B                       	smpsAlterNote       $0B
00087E58 E701                       	dc.b	smpsNoAttack, $01
00087E5A E105                       	smpsAlterNote       $05
00087E5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E60 E10B                       	smpsAlterNote       $0B
00087E62 E701                       	dc.b	smpsNoAttack, $01
00087E64 E10E                       	smpsAlterNote       $0E
00087E66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E6A E108                       	smpsAlterNote       $08
00087E6C E701                       	dc.b	smpsNoAttack, $01
00087E6E E105                       	smpsAlterNote       $05
00087E70 8001                       	dc.b	nRst, $01
00087E74 E601                       	smpsAlterVol        $01
00087E76 E10B                       	smpsAlterNote       $0B
00087E78 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00087E84 8004                       	dc.b	nRst, $04
00087E88 E6FF                       	smpsAlterVol        $FF
00087E8A E10D                       	smpsAlterNote       $0D
00087E8C B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00087E94 E10C                       	smpsAlterNote       $0C
00087E96 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00087E9B E10D                       	smpsAlterNote       $0D
00087E9D B60D                       	dc.b	nF4, $0D
00087E9F E10A                       	smpsAlterNote       $0A
00087EA1 E701                       	dc.b	smpsNoAttack, $01
00087EA3 E106                       	smpsAlterNote       $06
00087EA5 E701                       	dc.b	smpsNoAttack, $01
00087EA7 E10A                       	smpsAlterNote       $0A
00087EA9 E701                       	dc.b	smpsNoAttack, $01
00087EAB E110                       	smpsAlterNote       $10
00087EAD E701                       	dc.b	smpsNoAttack, $01
00087EAF E111                       	smpsAlterNote       $11
00087EB1 E701                       	dc.b	smpsNoAttack, $01
00087EB3 E10D                       	smpsAlterNote       $0D
00087EB5 E701                       	dc.b	smpsNoAttack, $01
00087EB7 E107                       	smpsAlterNote       $07
00087EB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EBD E10A                       	smpsAlterNote       $0A
00087EBF E701                       	dc.b	smpsNoAttack, $01
00087EC1 E110                       	smpsAlterNote       $10
00087EC3 E701                       	dc.b	smpsNoAttack, $01
00087EC5 E111                       	smpsAlterNote       $11
00087EC7 8001                       	dc.b	nRst, $01
00087EC9 E10D                       	smpsAlterNote       $0D
00087ECB B80D                       	dc.b	nG4, $0D
00087ECD E10A                       	smpsAlterNote       $0A
00087ECF E701                       	dc.b	smpsNoAttack, $01
00087ED1 E106                       	smpsAlterNote       $06
00087ED3 E701                       	dc.b	smpsNoAttack, $01
00087ED5 E10A                       	smpsAlterNote       $0A
00087ED7 E701                       	dc.b	smpsNoAttack, $01
00087ED9 E110                       	smpsAlterNote       $10
00087EDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EDF E10D                       	smpsAlterNote       $0D
00087EE1 E701                       	dc.b	smpsNoAttack, $01
00087EE3 E107                       	smpsAlterNote       $07
00087EE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EE9 E10D                       	smpsAlterNote       $0D
00087EEB E701                       	dc.b	smpsNoAttack, $01
00087EED E110                       	smpsAlterNote       $10
00087EEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087EF3 E10A                       	smpsAlterNote       $0A
00087EF5 E701                       	dc.b	smpsNoAttack, $01
00087EF7 E106                       	smpsAlterNote       $06
00087EF9 E701                       	dc.b	smpsNoAttack, $01
00087EFB E107                       	smpsAlterNote       $07
00087EFD E701                       	dc.b	smpsNoAttack, $01
00087EFF E10D                       	smpsAlterNote       $0D
00087F01 E701                       	dc.b	smpsNoAttack, $01
00087F03 E111                       	smpsAlterNote       $11
00087F05 E701                       	dc.b	smpsNoAttack, $01
00087F07 E10D                       	smpsAlterNote       $0D
00087F09 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087F0D E10F                       	smpsAlterNote       $0F
00087F0F BA02 8001                  	dc.b	nA4, $02, nRst, $01
00087F13 E110                       	smpsAlterNote       $10
00087F15 BB03                       	dc.b	nBb4, $03
00087F17 E10F                       	smpsAlterNote       $0F
00087F19 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00087F1F E110                       	smpsAlterNote       $10
00087F21 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00087F25 E10F                       	smpsAlterNote       $0F
00087F27 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00087F2D E110                       	smpsAlterNote       $10
00087F2F D302 8001                  	dc.b	nBb6, $02, nRst, $01
00087F33 E10F                       	smpsAlterNote       $0F
00087F35 D20D                       	dc.b	nA6, $0D
00087F37 E10C                       	smpsAlterNote       $0C
00087F39 E701                       	dc.b	smpsNoAttack, $01
00087F3B E108                       	smpsAlterNote       $08
00087F3D E701                       	dc.b	smpsNoAttack, $01
00087F3F E10C                       	smpsAlterNote       $0C
00087F41 E701                       	dc.b	smpsNoAttack, $01
00087F43 E10F                       	smpsAlterNote       $0F
00087F45 E701                       	dc.b	smpsNoAttack, $01
00087F47 E113                       	smpsAlterNote       $13
00087F49 E701                       	dc.b	smpsNoAttack, $01
00087F4B E10F                       	smpsAlterNote       $0F
00087F4D E701                       	dc.b	smpsNoAttack, $01
00087F4F E109                       	smpsAlterNote       $09
00087F51 E701                       	dc.b	smpsNoAttack, $01
00087F53 E108                       	smpsAlterNote       $08
00087F55 E701                       	dc.b	smpsNoAttack, $01
00087F57 E10C                       	smpsAlterNote       $0C
00087F59 E701                       	dc.b	smpsNoAttack, $01
00087F5B E112                       	smpsAlterNote       $12
00087F5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F61 E10F                       	smpsAlterNote       $0F
00087F63 E701                       	dc.b	smpsNoAttack, $01
00087F65 E109                       	smpsAlterNote       $09
00087F67 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00087F6D E10D                       	smpsAlterNote       $0D
00087F6F CE07                       	dc.b	nF6, $07
00087F71 E10C                       	smpsAlterNote       $0C
00087F73 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00087F77 E10D                       	smpsAlterNote       $0D
00087F79 CE03                       	dc.b	nF6, $03
00087F7B E10C                       	smpsAlterNote       $0C
00087F7D CC0D                       	dc.b	nEb6, $0D
00087F7F E109                       	smpsAlterNote       $09
00087F81 E701                       	dc.b	smpsNoAttack, $01
00087F83 E106                       	smpsAlterNote       $06
00087F85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F89 E10C                       	smpsAlterNote       $0C
00087F8B E701                       	dc.b	smpsNoAttack, $01
00087F8D E110                       	smpsAlterNote       $10
00087F8F E701                       	dc.b	smpsNoAttack, $01
00087F91 E10F                       	smpsAlterNote       $0F
00087F93 E701                       	dc.b	smpsNoAttack, $01
00087F95 E109                       	smpsAlterNote       $09
00087F97 E701                       	dc.b	smpsNoAttack, $01
00087F99 E105                       	smpsAlterNote       $05
00087F9B E701                       	dc.b	smpsNoAttack, $01
00087F9D E109                       	smpsAlterNote       $09
00087F9F E701                       	dc.b	smpsNoAttack, $01
00087FA1 E10C                       	smpsAlterNote       $0C
00087FA3 E701                       	dc.b	smpsNoAttack, $01
00087FA5 E110                       	smpsAlterNote       $10
00087FA7 E701                       	dc.b	smpsNoAttack, $01
00087FA9 E10C                       	smpsAlterNote       $0C
00087FAB E701                       	dc.b	smpsNoAttack, $01
00087FAD E106                       	smpsAlterNote       $06
00087FAF E701                       	dc.b	smpsNoAttack, $01
00087FB1 E105                       	smpsAlterNote       $05
00087FB3 E701                       	dc.b	smpsNoAttack, $01
00087FB5 E109                       	smpsAlterNote       $09
00087FB7 E701                       	dc.b	smpsNoAttack, $01
00087FB9 E10F                       	smpsAlterNote       $0F
00087FBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FBF E10C                       	smpsAlterNote       $0C
00087FC1 E701                       	dc.b	smpsNoAttack, $01
00087FC3 E10B                       	smpsAlterNote       $0B
00087FC5 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00087FCF E10F                       	smpsAlterNote       $0F
00087FD1 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00087FDB E10D                       	smpsAlterNote       $0D
00087FDD C203                       	dc.b	nF5, $03
00087FDF E10C                       	smpsAlterNote       $0C
00087FE1 C103 8001                  	dc.b	nE5, $03, nRst, $01
00087FE5 E10D                       	smpsAlterNote       $0D
00087FE7 C20D                       	dc.b	nF5, $0D
00087FE9 E10C                       	smpsAlterNote       $0C
00087FEB C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00087FEF E10B                       	smpsAlterNote       $0B
00087FF1 BF0D                       	dc.b	nD5, $0D
00087FF3 E108                       	smpsAlterNote       $08
00087FF5 E701                       	dc.b	smpsNoAttack, $01
00087FF7 E104                       	smpsAlterNote       $04
00087FF9 E701                       	dc.b	smpsNoAttack, $01
00087FFB E108                       	smpsAlterNote       $08
00087FFD E701                       	dc.b	smpsNoAttack, $01
00087FFF E10E                       	smpsAlterNote       $0E
00088001 E701                       	dc.b	smpsNoAttack, $01
00088003 E10F                       	smpsAlterNote       $0F
00088005 E701                       	dc.b	smpsNoAttack, $01
00088007 E10B                       	smpsAlterNote       $0B
00088009 E701                       	dc.b	smpsNoAttack, $01
0008800B E105                       	smpsAlterNote       $05
0008800D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088011 E108                       	smpsAlterNote       $08
00088013 E701                       	dc.b	smpsNoAttack, $01
00088015 E10E                       	smpsAlterNote       $0E
00088017 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008801B E108                       	smpsAlterNote       $08
0008801D E701                       	dc.b	smpsNoAttack, $01
0008801F E105                       	smpsAlterNote       $05
00088021 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088025 E10B                       	smpsAlterNote       $0B
00088027 E701                       	dc.b	smpsNoAttack, $01
00088029 E10F                       	smpsAlterNote       $0F
0008802B E701                       	dc.b	smpsNoAttack, $01
0008802D E10E                       	smpsAlterNote       $0E
0008802F E701                       	dc.b	smpsNoAttack, $01
00088031 E108                       	smpsAlterNote       $08
00088033 E701                       	dc.b	smpsNoAttack, $01
00088035 E104                       	smpsAlterNote       $04
00088037 E701                       	dc.b	smpsNoAttack, $01
00088039 E108                       	smpsAlterNote       $08
0008803B E701                       	dc.b	smpsNoAttack, $01
0008803D E10B                       	smpsAlterNote       $0B
0008803F E701                       	dc.b	smpsNoAttack, $01
00088041 E10F                       	smpsAlterNote       $0F
00088043 E701                       	dc.b	smpsNoAttack, $01
00088045 E10B                       	smpsAlterNote       $0B
00088047 E701                       	dc.b	smpsNoAttack, $01
00088049 E105                       	smpsAlterNote       $05
0008804B E701                       	dc.b	smpsNoAttack, $01
0008804D E104                       	smpsAlterNote       $04
0008804F E701                       	dc.b	smpsNoAttack, $01
00088051 E108                       	smpsAlterNote       $08
00088053 E701                       	dc.b	smpsNoAttack, $01
00088055 E10E                       	smpsAlterNote       $0E
00088057 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008805B E10B                       	smpsAlterNote       $0B
0008805D E701                       	dc.b	smpsNoAttack, $01
0008805F E105                       	smpsAlterNote       $05
00088061 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088065 E10B                       	smpsAlterNote       $0B
00088067 E701                       	dc.b	smpsNoAttack, $01
00088069 E10E                       	smpsAlterNote       $0E
0008806B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008806F E108                       	smpsAlterNote       $08
00088071 E701                       	dc.b	smpsNoAttack, $01
00088073 E104                       	smpsAlterNote       $04
00088075 E701                       	dc.b	smpsNoAttack, $01
00088077 E105                       	smpsAlterNote       $05
00088079 E701                       	dc.b	smpsNoAttack, $01
0008807B E10B                       	smpsAlterNote       $0B
0008807D E701                       	dc.b	smpsNoAttack, $01
0008807F E10F                       	smpsAlterNote       $0F
00088081 E701                       	dc.b	smpsNoAttack, $01
00088083 E10B                       	smpsAlterNote       $0B
00088085 E701                       	dc.b	smpsNoAttack, $01
00088087 E108                       	smpsAlterNote       $08
00088089 E701                       	dc.b	smpsNoAttack, $01
0008808B E104                       	smpsAlterNote       $04
0008808D E701                       	dc.b	smpsNoAttack, $01
0008808F E108                       	smpsAlterNote       $08
00088091 E701                       	dc.b	smpsNoAttack, $01
00088093 E10E                       	smpsAlterNote       $0E
00088095 E701                       	dc.b	smpsNoAttack, $01
00088097 E10F                       	smpsAlterNote       $0F
00088099 E701                       	dc.b	smpsNoAttack, $01
0008809B E10B                       	smpsAlterNote       $0B
0008809D E701                       	dc.b	smpsNoAttack, $01
0008809F E105                       	smpsAlterNote       $05
000880A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880A5 E108                       	smpsAlterNote       $08
000880A7 E701                       	dc.b	smpsNoAttack, $01
000880A9 E10E                       	smpsAlterNote       $0E
000880AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880AF E108                       	smpsAlterNote       $08
000880B1 E701                       	dc.b	smpsNoAttack, $01
000880B3 E105                       	smpsAlterNote       $05
000880B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880B9 E10B                       	smpsAlterNote       $0B
000880BB E701                       	dc.b	smpsNoAttack, $01
000880BD E10F                       	smpsAlterNote       $0F
000880BF E701                       	dc.b	smpsNoAttack, $01
000880C1 E10E                       	smpsAlterNote       $0E
000880C3 E701                       	dc.b	smpsNoAttack, $01
000880C5 E108                       	smpsAlterNote       $08
000880C7 E701                       	dc.b	smpsNoAttack, $01
000880C9 E104                       	smpsAlterNote       $04
000880CB E701                       	dc.b	smpsNoAttack, $01
000880CD E108                       	smpsAlterNote       $08
000880CF E701                       	dc.b	smpsNoAttack, $01
000880D1 E10B                       	smpsAlterNote       $0B
000880D3 E701                       	dc.b	smpsNoAttack, $01
000880D5 E10F                       	smpsAlterNote       $0F
000880D7 E701                       	dc.b	smpsNoAttack, $01
000880D9 E10B                       	smpsAlterNote       $0B
000880DB E701                       	dc.b	smpsNoAttack, $01
000880DD E105                       	smpsAlterNote       $05
000880DF E701                       	dc.b	smpsNoAttack, $01
000880E1 E104                       	smpsAlterNote       $04
000880E3 E701                       	dc.b	smpsNoAttack, $01
000880E5 E105                       	smpsAlterNote       $05
000880E7 8001                       	dc.b	nRst, $01
000880E9 E10D                       	smpsAlterNote       $0D
000880EB C20D                       	dc.b	nF5, $0D
000880ED E107                       	smpsAlterNote       $07
000880EF E701                       	dc.b	smpsNoAttack, $01
000880F1 E106                       	smpsAlterNote       $06
000880F3 E701                       	dc.b	smpsNoAttack, $01
000880F5 E10A                       	smpsAlterNote       $0A
000880F7 E701                       	dc.b	smpsNoAttack, $01
000880F9 E110                       	smpsAlterNote       $10
000880FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880FF E10D                       	smpsAlterNote       $0D
00088101 E701                       	dc.b	smpsNoAttack, $01
00088103 E107                       	smpsAlterNote       $07
00088105 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088109 E10D                       	smpsAlterNote       $0D
0008810B E701                       	dc.b	smpsNoAttack, $01
0008810D E110                       	smpsAlterNote       $10
0008810F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088113 E10A                       	smpsAlterNote       $0A
00088115 E701                       	dc.b	smpsNoAttack, $01
00088117 E106                       	smpsAlterNote       $06
00088119 E701                       	dc.b	smpsNoAttack, $01
0008811B E107                       	smpsAlterNote       $07
0008811D E701                       	dc.b	smpsNoAttack, $01
0008811F E10D                       	smpsAlterNote       $0D
00088121 E701                       	dc.b	smpsNoAttack, $01
00088123 E111                       	smpsAlterNote       $11
00088125 E701                       	dc.b	smpsNoAttack, $01
00088127 E10D                       	smpsAlterNote       $0D
00088129 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008812D E10C                       	smpsAlterNote       $0C
0008812F C10D                       	dc.b	nE5, $0D
00088131 E10D                       	smpsAlterNote       $0D
00088133 C20A                       	dc.b	nF5, $0A
00088135 E10C                       	smpsAlterNote       $0C
00088137 C10E                       	dc.b	nE5, $0E
00088139 E106                       	smpsAlterNote       $06
0008813B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008813F E10C                       	smpsAlterNote       $0C
00088141 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088145 E10B                       	smpsAlterNote       $0B
00088147 BF0D                       	dc.b	nD5, $0D
00088149 E10C                       	smpsAlterNote       $0C
0008814B C107                       	dc.b	nE5, $07
0008814D E10D                       	smpsAlterNote       $0D
0008814F C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00088159 E110                       	smpsAlterNote       $10
0008815B C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00088161 E10F                       	smpsAlterNote       $0F
00088163 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008816B E10D                       	smpsAlterNote       $0D
0008816D D003                       	dc.b	nG6, $03
00088171 E0C0                       	smpsPan             panCenter, $00
00088173 E6FF                       	smpsAlterVol        $FF
00088175 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00088181 8001                       	dc.b	nRst, $01
00088183 E10C                       	smpsAlterNote       $0C
00088185 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008818F E604                       	smpsAlterVol        $04
00088191 E10B                       	smpsAlterNote       $0B
00088193 B306 8001                  	dc.b	nD4, $06, nRst, $01
00088197 E10F                       	smpsAlterNote       $0F
00088199 AE03                       	dc.b	nA3, $03
0008819B E10D                       	smpsAlterNote       $0D
0008819D B603 8001                  	dc.b	nF4, $03, nRst, $01
000881A1 E10C                       	smpsAlterNote       $0C
000881A3 B506 8001                  	dc.b	nE4, $06, nRst, $01
000881A7 E10B                       	smpsAlterNote       $0B
000881A9 B302 8001                  	dc.b	nD4, $02, nRst, $01
000881AD E10A                       	smpsAlterNote       $0A
000881AF B103                       	dc.b	nC4, $03
000881B1 E110                       	smpsAlterNote       $10
000881B3 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000881B7 E10F                       	smpsAlterNote       $0F
000881B9 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000881BD E080                       	smpsPan             panLeft, $00
000881BF 01                         	dc.b	$01
000881C2 E6FB                       	smpsAlterVol        $FB
000881C4 E1E4                       	smpsAlterNote       $E4
000881C6 C501                       	dc.b	nAb5, $01
000881C8 E1F4                       	smpsAlterNote       $F4
000881CA E701                       	dc.b	smpsNoAttack, $01
000881CC E104                       	smpsAlterNote       $04
000881CE E701                       	dc.b	smpsNoAttack, $01
000881D0 E114                       	smpsAlterNote       $14
000881D2 E701                       	dc.b	smpsNoAttack, $01
000881D4 E11C                       	smpsAlterNote       $1C
000881D6 E701                       	dc.b	smpsNoAttack, $01
000881D8 E1EF                       	smpsAlterNote       $EF
000881DA E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000881DD E1FF                       	smpsAlterNote       $FF
000881DF E701                       	dc.b	smpsNoAttack, $01
000881E1 E10F                       	smpsAlterNote       $0F
000881E3 C606                       	dc.b	nA5, $06
000881E5 E109                       	smpsAlterNote       $09
000881E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881EB E10F                       	smpsAlterNote       $0F
000881ED E701                       	dc.b	smpsNoAttack, $01
000881EF E112                       	smpsAlterNote       $12
000881F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881F5 E10C                       	smpsAlterNote       $0C
000881F7 E701                       	dc.b	smpsNoAttack, $01
000881F9 E108                       	smpsAlterNote       $08
000881FB E701                       	dc.b	smpsNoAttack, $01
000881FD E109                       	smpsAlterNote       $09
000881FF E701                       	dc.b	smpsNoAttack, $01
00088201 E10F                       	smpsAlterNote       $0F
00088203 E701                       	dc.b	smpsNoAttack, $01
00088205 E113                       	smpsAlterNote       $13
00088207 E701                       	dc.b	smpsNoAttack, $01
00088209 E10F                       	smpsAlterNote       $0F
0008820B E701                       	dc.b	smpsNoAttack, $01
0008820D E10C                       	smpsAlterNote       $0C
0008820F E701                       	dc.b	smpsNoAttack, $01
00088211 E108                       	smpsAlterNote       $08
00088213 E701                       	dc.b	smpsNoAttack, $01
00088215 E10C                       	smpsAlterNote       $0C
00088217 E701                       	dc.b	smpsNoAttack, $01
00088219 E112                       	smpsAlterNote       $12
0008821B E701                       	dc.b	smpsNoAttack, $01
0008821D E113                       	smpsAlterNote       $13
0008821F E701                       	dc.b	smpsNoAttack, $01
00088221 E10F                       	smpsAlterNote       $0F
00088223 E701                       	dc.b	smpsNoAttack, $01
00088225 E109                       	smpsAlterNote       $09
00088227 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008822B E10C                       	smpsAlterNote       $0C
0008822D E701                       	dc.b	smpsNoAttack, $01
0008822F E112                       	smpsAlterNote       $12
00088231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088235 E10C                       	smpsAlterNote       $0C
00088237 E701                       	dc.b	smpsNoAttack, $01
00088239 E109                       	smpsAlterNote       $09
0008823B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008823F E10F                       	smpsAlterNote       $0F
00088241 E701                       	dc.b	smpsNoAttack, $01
00088243 E113                       	smpsAlterNote       $13
00088245 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088249 E10D                       	smpsAlterNote       $0D
0008824B C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00088251 E10C                       	smpsAlterNote       $0C
00088253 C102 8001                  	dc.b	nE5, $02, nRst, $01
00088257 E10D                       	smpsAlterNote       $0D
00088259 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008825D E10C                       	smpsAlterNote       $0C
0008825F C102                       	dc.b	nE5, $02
00088261 E10B                       	smpsAlterNote       $0B
00088263 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088267 E10C                       	smpsAlterNote       $0C
00088269 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008826D E10B                       	smpsAlterNote       $0B
0008826F BF02                       	dc.b	nD5, $02
00088271 E10A                       	smpsAlterNote       $0A
00088273 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008827D E110                       	smpsAlterNote       $10
0008827F BB02                       	dc.b	nBb4, $02
00088281 E10A                       	smpsAlterNote       $0A
00088283 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00088287 E110                       	smpsAlterNote       $10
00088289 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008828D E10F                       	smpsAlterNote       $0F
0008828F BA01 8001                  	dc.b	nA4, $01, nRst, $01
00088293 E110                       	smpsAlterNote       $10
00088295 BB02                       	dc.b	nBb4, $02
00088297 E10F                       	smpsAlterNote       $0F
00088299 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000882A3 E10C                       	smpsAlterNote       $0C
000882A5 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000882AD E10B                       	smpsAlterNote       $0B
000882AF BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000882B3 E10F                       	smpsAlterNote       $0F
000882B5 BA02                       	dc.b	nA4, $02
000882B9 E0C0                       	smpsPan             panCenter, $00
000882BB E601                       	smpsAlterVol        $01
000882BD E109                       	smpsAlterNote       $09
000882BF AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000882CB E108                       	smpsAlterNote       $08
000882CD A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000882D3 E107                       	smpsAlterNote       $07
000882D5 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000882DB E109                       	smpsAlterNote       $09
000882DD B603 8001                  	dc.b	nF4, $03, nRst, $01
000882E1 E108                       	smpsAlterNote       $08
000882E3 B506 8001                  	dc.b	nE4, $06, nRst, $01
000882E7 E107                       	smpsAlterNote       $07
000882E9 B302 8001                  	dc.b	nD4, $02, nRst, $01
000882ED E106                       	smpsAlterNote       $06
000882EF B103                       	dc.b	nC4, $03
000882F1 E10C                       	smpsAlterNote       $0C
000882F3 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000882F9 E080                       	smpsPan             panLeft, $00
000882FB 07                         	dc.b	$07
000882FC E6FE                       	smpsAlterVol        $FE
000882FE E10B                       	smpsAlterNote       $0B
00088300 B20D                       	dc.b	nCs4, $0D
00088302 E105                       	smpsAlterNote       $05
00088304 E701                       	dc.b	smpsNoAttack, $01
00088306 E104                       	smpsAlterNote       $04
00088308 E701                       	dc.b	smpsNoAttack, $01
0008830A E108                       	smpsAlterNote       $08
0008830C E701                       	dc.b	smpsNoAttack, $01
0008830E E10E                       	smpsAlterNote       $0E
00088310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088314 E10B                       	smpsAlterNote       $0B
00088316 E701                       	dc.b	smpsNoAttack, $01
00088318 E105                       	smpsAlterNote       $05
0008831A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008831E E10B                       	smpsAlterNote       $0B
00088320 E701                       	dc.b	smpsNoAttack, $01
00088322 E10E                       	smpsAlterNote       $0E
00088324 E701                       	dc.b	smpsNoAttack, $01
00088326 E10F                       	smpsAlterNote       $0F
00088328 8001                       	dc.b	nRst, $01
0008832A E10B                       	smpsAlterNote       $0B
0008832C B30D                       	dc.b	nD4, $0D
0008832E E105                       	smpsAlterNote       $05
00088330 E701                       	dc.b	smpsNoAttack, $01
00088332 E104                       	smpsAlterNote       $04
00088334 E701                       	dc.b	smpsNoAttack, $01
00088336 E108                       	smpsAlterNote       $08
00088338 E701                       	dc.b	smpsNoAttack, $01
0008833A E10E                       	smpsAlterNote       $0E
0008833C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088340 E10B                       	smpsAlterNote       $0B
00088342 E701                       	dc.b	smpsNoAttack, $01
00088344 E105                       	smpsAlterNote       $05
00088346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008834A E10B                       	smpsAlterNote       $0B
0008834C E701                       	dc.b	smpsNoAttack, $01
0008834E E10E                       	smpsAlterNote       $0E
00088350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088354 E108                       	smpsAlterNote       $08
00088356 E701                       	dc.b	smpsNoAttack, $01
00088358 E104                       	smpsAlterNote       $04
0008835A E701                       	dc.b	smpsNoAttack, $01
0008835C E105                       	smpsAlterNote       $05
0008835E E701                       	dc.b	smpsNoAttack, $01
00088360 E10B                       	smpsAlterNote       $0B
00088362 E701                       	dc.b	smpsNoAttack, $01
00088364 E10F                       	smpsAlterNote       $0F
00088366 E701                       	dc.b	smpsNoAttack, $01
00088368 E10B                       	smpsAlterNote       $0B
0008836A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008836E E10C                       	smpsAlterNote       $0C
00088370 B50D                       	dc.b	nE4, $0D
00088372 E106                       	smpsAlterNote       $06
00088374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088378 E10C                       	smpsAlterNote       $0C
0008837A E701                       	dc.b	smpsNoAttack, $01
0008837C E10F                       	smpsAlterNote       $0F
0008837E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088382 E109                       	smpsAlterNote       $09
00088384 E701                       	dc.b	smpsNoAttack, $01
00088386 E105                       	smpsAlterNote       $05
00088388 E701                       	dc.b	smpsNoAttack, $01
0008838A E106                       	smpsAlterNote       $06
0008838C E701                       	dc.b	smpsNoAttack, $01
0008838E E10C                       	smpsAlterNote       $0C
00088390 E701                       	dc.b	smpsNoAttack, $01
00088392 E110                       	smpsAlterNote       $10
00088394 E701                       	dc.b	smpsNoAttack, $01
00088396 E10B                       	smpsAlterNote       $0B
00088398 B30E                       	dc.b	nD4, $0E
0008839A E105                       	smpsAlterNote       $05
0008839C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883A0 E10B                       	smpsAlterNote       $0B
000883A2 E701                       	dc.b	smpsNoAttack, $01
000883A4 E10E                       	smpsAlterNote       $0E
000883A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883AA E108                       	smpsAlterNote       $08
000883AC E701                       	dc.b	smpsNoAttack, $01
000883AE E104                       	smpsAlterNote       $04
000883B0 E701                       	dc.b	smpsNoAttack, $01
000883B2 E105                       	smpsAlterNote       $05
000883B4 E701                       	dc.b	smpsNoAttack, $01
000883B6 E10B                       	smpsAlterNote       $0B
000883B8 E701                       	dc.b	smpsNoAttack, $01
000883BA E10F                       	smpsAlterNote       $0F
000883BC E701                       	dc.b	smpsNoAttack, $01
000883BE E10B                       	smpsAlterNote       $0B
000883C0 E701                       	dc.b	smpsNoAttack, $01
000883C2 E108                       	smpsAlterNote       $08
000883C4 E701                       	dc.b	smpsNoAttack, $01
000883C6 E104                       	smpsAlterNote       $04
000883C8 E701                       	dc.b	smpsNoAttack, $01
000883CA E108                       	smpsAlterNote       $08
000883CC E701                       	dc.b	smpsNoAttack, $01
000883CE E10E                       	smpsAlterNote       $0E
000883D0 E701                       	dc.b	smpsNoAttack, $01
000883D2 E10F                       	smpsAlterNote       $0F
000883D4 E701                       	dc.b	smpsNoAttack, $01
000883D6 E10B                       	smpsAlterNote       $0B
000883D8 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000883DC E108                       	smpsAlterNote       $08
000883DE E701                       	dc.b	smpsNoAttack, $01
000883E0 E105                       	smpsAlterNote       $05
000883E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883E6 E10B                       	smpsAlterNote       $0B
000883E8 E701                       	dc.b	smpsNoAttack, $01
000883EA E10F                       	smpsAlterNote       $0F
000883EC E701                       	dc.b	smpsNoAttack, $01
000883EE E10E                       	smpsAlterNote       $0E
000883F0 E701                       	dc.b	smpsNoAttack, $01
000883F2 E108                       	smpsAlterNote       $08
000883F4 E701                       	dc.b	smpsNoAttack, $01
000883F6 E104                       	smpsAlterNote       $04
000883F8 E701                       	dc.b	smpsNoAttack, $01
000883FA E108                       	smpsAlterNote       $08
000883FC E701                       	dc.b	smpsNoAttack, $01
000883FE E10B                       	smpsAlterNote       $0B
00088400 E701                       	dc.b	smpsNoAttack, $01
00088402 E10F                       	smpsAlterNote       $0F
00088404 E701                       	dc.b	smpsNoAttack, $01
00088406 E10B                       	smpsAlterNote       $0B
00088408 B30D                       	dc.b	nD4, $0D
0008840A E108                       	smpsAlterNote       $08
0008840C E701                       	dc.b	smpsNoAttack, $01
0008840E E105                       	smpsAlterNote       $05
00088410 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088414 E10B                       	smpsAlterNote       $0B
00088416 E701                       	dc.b	smpsNoAttack, $01
00088418 E10F                       	smpsAlterNote       $0F
0008841A E701                       	dc.b	smpsNoAttack, $01
0008841C E10E                       	smpsAlterNote       $0E
0008841E E701                       	dc.b	smpsNoAttack, $01
00088420 E108                       	smpsAlterNote       $08
00088422 E701                       	dc.b	smpsNoAttack, $01
00088424 E104                       	smpsAlterNote       $04
00088426 E701                       	dc.b	smpsNoAttack, $01
00088428 E108                       	smpsAlterNote       $08
0008842A E701                       	dc.b	smpsNoAttack, $01
0008842C E10B                       	smpsAlterNote       $0B
0008842E E701                       	dc.b	smpsNoAttack, $01
00088430 E10F                       	smpsAlterNote       $0F
00088432 E701                       	dc.b	smpsNoAttack, $01
00088434 E10B                       	smpsAlterNote       $0B
00088436 E701                       	dc.b	smpsNoAttack, $01
00088438 E105                       	smpsAlterNote       $05
0008843A E701                       	dc.b	smpsNoAttack, $01
0008843C E104                       	smpsAlterNote       $04
0008843E E701                       	dc.b	smpsNoAttack, $01
00088440 E108                       	smpsAlterNote       $08
00088442 E701                       	dc.b	smpsNoAttack, $01
00088444 E10E                       	smpsAlterNote       $0E
00088446 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008844A E10B                       	smpsAlterNote       $0B
0008844C 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00088450 E108                       	smpsAlterNote       $08
00088452 E701                       	dc.b	smpsNoAttack, $01
00088454 E104                       	smpsAlterNote       $04
00088456 E701                       	dc.b	smpsNoAttack, $01
00088458 E108                       	smpsAlterNote       $08
0008845A E701                       	dc.b	smpsNoAttack, $01
0008845C E10B                       	smpsAlterNote       $0B
0008845E E701                       	dc.b	smpsNoAttack, $01
00088462 E0C0                       	smpsPan             panCenter, $00
00088464 E601                       	smpsAlterVol        $01
00088466 E108                       	smpsAlterNote       $08
00088468 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00088474 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008847C E080                       	smpsPan             panLeft, $00
0008847E 07                         	dc.b	$07
0008847F E6FF                       	smpsAlterVol        $FF
00088481 E10D                       	smpsAlterNote       $0D
00088483 B60D                       	dc.b	nF4, $0D
00088485 E10A                       	smpsAlterNote       $0A
00088487 E701                       	dc.b	smpsNoAttack, $01
00088489 E106                       	smpsAlterNote       $06
0008848B E701                       	dc.b	smpsNoAttack, $01
0008848D E10A                       	smpsAlterNote       $0A
0008848F E701                       	dc.b	smpsNoAttack, $01
00088491 E110                       	smpsAlterNote       $10
00088493 E701                       	dc.b	smpsNoAttack, $01
00088495 E111                       	smpsAlterNote       $11
00088497 E701                       	dc.b	smpsNoAttack, $01
00088499 E10D                       	smpsAlterNote       $0D
0008849B E701                       	dc.b	smpsNoAttack, $01
0008849D E107                       	smpsAlterNote       $07
0008849F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884A3 E10A                       	smpsAlterNote       $0A
000884A5 E701                       	dc.b	smpsNoAttack, $01
000884A7 E110                       	smpsAlterNote       $10
000884A9 E701                       	dc.b	smpsNoAttack, $01
000884AB E111                       	smpsAlterNote       $11
000884AD 8001                       	dc.b	nRst, $01
000884AF E10D                       	smpsAlterNote       $0D
000884B1 B80D                       	dc.b	nG4, $0D
000884B3 E10A                       	smpsAlterNote       $0A
000884B5 E701                       	dc.b	smpsNoAttack, $01
000884B7 E106                       	smpsAlterNote       $06
000884B9 E701                       	dc.b	smpsNoAttack, $01
000884BB E10A                       	smpsAlterNote       $0A
000884BD E701                       	dc.b	smpsNoAttack, $01
000884BF E110                       	smpsAlterNote       $10
000884C1 E701                       	dc.b	smpsNoAttack, $01
000884C3 E111                       	smpsAlterNote       $11
000884C5 E701                       	dc.b	smpsNoAttack, $01
000884C7 E10D                       	smpsAlterNote       $0D
000884C9 E701                       	dc.b	smpsNoAttack, $01
000884CB E107                       	smpsAlterNote       $07
000884CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884D1 E10D                       	smpsAlterNote       $0D
000884D3 E701                       	dc.b	smpsNoAttack, $01
000884D5 E110                       	smpsAlterNote       $10
000884D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884DB E10A                       	smpsAlterNote       $0A
000884DD E701                       	dc.b	smpsNoAttack, $01
000884DF E106                       	smpsAlterNote       $06
000884E1 E701                       	dc.b	smpsNoAttack, $01
000884E3 E107                       	smpsAlterNote       $07
000884E5 E701                       	dc.b	smpsNoAttack, $01
000884E7 E10D                       	smpsAlterNote       $0D
000884E9 E701                       	dc.b	smpsNoAttack, $01
000884EB E111                       	smpsAlterNote       $11
000884ED E701                       	dc.b	smpsNoAttack, $01
000884EF E10D                       	smpsAlterNote       $0D
000884F1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000884F5 E10F                       	smpsAlterNote       $0F
000884F7 BA0D                       	dc.b	nA4, $0D
000884F9 E109                       	smpsAlterNote       $09
000884FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884FF E10C                       	smpsAlterNote       $0C
00088501 E701                       	dc.b	smpsNoAttack, $01
00088503 E112                       	smpsAlterNote       $12
00088505 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088509 E10C                       	smpsAlterNote       $0C
0008850B E701                       	dc.b	smpsNoAttack, $01
0008850D E109                       	smpsAlterNote       $09
0008850F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088513 E10F                       	smpsAlterNote       $0F
00088515 E701                       	dc.b	smpsNoAttack, $01
00088517 E113                       	smpsAlterNote       $13
00088519 E701                       	dc.b	smpsNoAttack, $01
0008851B E112                       	smpsAlterNote       $12
0008851D E701                       	dc.b	smpsNoAttack, $01
0008851F E10C                       	smpsAlterNote       $0C
00088521 E701                       	dc.b	smpsNoAttack, $01
00088523 E108                       	smpsAlterNote       $08
00088525 E701                       	dc.b	smpsNoAttack, $01
00088527 E10C                       	smpsAlterNote       $0C
00088529 E701                       	dc.b	smpsNoAttack, $01
0008852B E10F                       	smpsAlterNote       $0F
0008852D E701                       	dc.b	smpsNoAttack, $01
0008852F E113                       	smpsAlterNote       $13
00088531 E701                       	dc.b	smpsNoAttack, $01
00088533 E10F                       	smpsAlterNote       $0F
00088535 E701                       	dc.b	smpsNoAttack, $01
00088537 E109                       	smpsAlterNote       $09
00088539 E701                       	dc.b	smpsNoAttack, $01
0008853B E108                       	smpsAlterNote       $08
0008853D E701                       	dc.b	smpsNoAttack, $01
0008853F E10C                       	smpsAlterNote       $0C
00088541 E701                       	dc.b	smpsNoAttack, $01
00088543 E112                       	smpsAlterNote       $12
00088545 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088549 E10F                       	smpsAlterNote       $0F
0008854B E701                       	dc.b	smpsNoAttack, $01
0008854D E109                       	smpsAlterNote       $09
0008854F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088553 E10F                       	smpsAlterNote       $0F
00088555 E701                       	dc.b	smpsNoAttack, $01
00088557 E112                       	smpsAlterNote       $12
00088559 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008855D E10C                       	smpsAlterNote       $0C
0008855F E701                       	dc.b	smpsNoAttack, $01
00088561 E108                       	smpsAlterNote       $08
00088563 E701                       	dc.b	smpsNoAttack, $01
00088565 E109                       	smpsAlterNote       $09
00088567 E701                       	dc.b	smpsNoAttack, $01
00088569 E10C                       	smpsAlterNote       $0C
0008856B B50A                       	dc.b	nE4, $0A
0008856D E10D                       	smpsAlterNote       $0D
0008856F B60E                       	dc.b	nF4, $0E
00088571 E107                       	smpsAlterNote       $07
00088573 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088577 E10D                       	smpsAlterNote       $0D
00088579 E701                       	dc.b	smpsNoAttack, $01
0008857B E110                       	smpsAlterNote       $10
0008857D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088581 E10A                       	smpsAlterNote       $0A
00088583 E701                       	dc.b	smpsNoAttack, $01
00088585 E106                       	smpsAlterNote       $06
00088587 E701                       	dc.b	smpsNoAttack, $01
00088589 E107                       	smpsAlterNote       $07
0008858B E701                       	dc.b	smpsNoAttack, $01
0008858D E10D                       	smpsAlterNote       $0D
0008858F E701                       	dc.b	smpsNoAttack, $01
00088591 E111                       	smpsAlterNote       $11
00088593 E701                       	dc.b	smpsNoAttack, $01
00088595 E10D                       	smpsAlterNote       $0D
00088597 B80D                       	dc.b	nG4, $0D
00088599 E10A                       	smpsAlterNote       $0A
0008859B E701                       	dc.b	smpsNoAttack, $01
0008859D E107                       	smpsAlterNote       $07
0008859F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885A3 E10D                       	smpsAlterNote       $0D
000885A5 E701                       	dc.b	smpsNoAttack, $01
000885A7 E111                       	smpsAlterNote       $11
000885A9 E701                       	dc.b	smpsNoAttack, $01
000885AB E110                       	smpsAlterNote       $10
000885AD E701                       	dc.b	smpsNoAttack, $01
000885AF E10A                       	smpsAlterNote       $0A
000885B1 E701                       	dc.b	smpsNoAttack, $01
000885B3 E106                       	smpsAlterNote       $06
000885B5 E701                       	dc.b	smpsNoAttack, $01
000885B7 E10A                       	smpsAlterNote       $0A
000885B9 E701                       	dc.b	smpsNoAttack, $01
000885BB E10D                       	smpsAlterNote       $0D
000885BD E701                       	dc.b	smpsNoAttack, $01
000885BF E111                       	smpsAlterNote       $11
000885C1 E701                       	dc.b	smpsNoAttack, $01
000885C3 E10D                       	smpsAlterNote       $0D
000885C5 E701                       	dc.b	smpsNoAttack, $01
000885C7 E107                       	smpsAlterNote       $07
000885C9 E701                       	dc.b	smpsNoAttack, $01
000885CB E106                       	smpsAlterNote       $06
000885CD E701                       	dc.b	smpsNoAttack, $01
000885CF E10A                       	smpsAlterNote       $0A
000885D1 E701                       	dc.b	smpsNoAttack, $01
000885D3 E110                       	smpsAlterNote       $10
000885D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885D9 E10D                       	smpsAlterNote       $0D
000885DB E701                       	dc.b	smpsNoAttack, $01
000885DD E10F                       	smpsAlterNote       $0F
000885DF BA0D                       	dc.b	nA4, $0D
000885E1 E10C                       	smpsAlterNote       $0C
000885E3 E701                       	dc.b	smpsNoAttack, $01
000885E5 E108                       	smpsAlterNote       $08
000885E7 E701                       	dc.b	smpsNoAttack, $01
000885E9 E109                       	smpsAlterNote       $09
000885EB E701                       	dc.b	smpsNoAttack, $01
000885ED E10F                       	smpsAlterNote       $0F
000885EF E701                       	dc.b	smpsNoAttack, $01
000885F1 E113                       	smpsAlterNote       $13
000885F3 E701                       	dc.b	smpsNoAttack, $01
000885F5 E10F                       	smpsAlterNote       $0F
000885F7 E701                       	dc.b	smpsNoAttack, $01
000885F9 E10C                       	smpsAlterNote       $0C
000885FB E701                       	dc.b	smpsNoAttack, $01
000885FD E108                       	smpsAlterNote       $08
000885FF E701                       	dc.b	smpsNoAttack, $01
00088601 E10C                       	smpsAlterNote       $0C
00088603 E701                       	dc.b	smpsNoAttack, $01
00088605 E112                       	smpsAlterNote       $12
00088607 E701                       	dc.b	smpsNoAttack, $01
00088609 E113                       	smpsAlterNote       $13
0008860B E701                       	dc.b	smpsNoAttack, $01
0008860D E10F                       	smpsAlterNote       $0F
0008860F E701                       	dc.b	smpsNoAttack, $01
00088611 E109                       	smpsAlterNote       $09
00088613 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088617 E10C                       	smpsAlterNote       $0C
00088619 E701                       	dc.b	smpsNoAttack, $01
0008861B E112                       	smpsAlterNote       $12
0008861D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088621 E10C                       	smpsAlterNote       $0C
00088623 E701                       	dc.b	smpsNoAttack, $01
00088625 E109                       	smpsAlterNote       $09
00088627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008862B E10F                       	smpsAlterNote       $0F
0008862D E701                       	dc.b	smpsNoAttack, $01
0008862F E113                       	smpsAlterNote       $13
00088631 E701                       	dc.b	smpsNoAttack, $01
00088633 E112                       	smpsAlterNote       $12
00088635 E701                       	dc.b	smpsNoAttack, $01
00088637 E10C                       	smpsAlterNote       $0C
00088639 E701                       	dc.b	smpsNoAttack, $01
0008863B E109                       	smpsAlterNote       $09
0008863D 8001                       	dc.b	nRst, $01
0008863F E10D                       	smpsAlterNote       $0D
00088641 B60A                       	dc.b	nF4, $0A
00088643 E10C                       	smpsAlterNote       $0C
00088645 B506 8001                  	dc.b	nE4, $06, nRst, $01
00088649 E10B                       	smpsAlterNote       $0B
0008864B B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008864F E10C                       	smpsAlterNote       $0C
00088651 B503                       	dc.b	nE4, $03
00088653 E10D                       	smpsAlterNote       $0D
00088655 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008865F E10C                       	smpsAlterNote       $0C
00088661 E701                       	dc.b	smpsNoAttack, $01
00088663 E108                       	smpsAlterNote       $08
00088665 E701                       	dc.b	smpsNoAttack, $01
00088667 E10C                       	smpsAlterNote       $0C
00088669 E701                       	dc.b	smpsNoAttack, $01
0008866B E112                       	smpsAlterNote       $12
0008866D E701                       	dc.b	smpsNoAttack, $01
0008866F E113                       	smpsAlterNote       $13
00088671 E701                       	dc.b	smpsNoAttack, $01
00088673 E10F                       	smpsAlterNote       $0F
00088675 E701                       	dc.b	smpsNoAttack, $01
00088677 E109                       	smpsAlterNote       $09
00088679 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008867D E10C                       	smpsAlterNote       $0C
0008867F E701                       	dc.b	smpsNoAttack, $01
00088681 E112                       	smpsAlterNote       $12
00088683 E701                       	dc.b	smpsNoAttack, $01
00088685 E113                       	smpsAlterNote       $13
00088687 8001                       	dc.b	nRst, $01
00088689 E10D                       	smpsAlterNote       $0D
0008868B C20D                       	dc.b	nF5, $0D
0008868D E10A                       	smpsAlterNote       $0A
0008868F E701                       	dc.b	smpsNoAttack, $01
00088691 E106                       	smpsAlterNote       $06
00088693 E701                       	dc.b	smpsNoAttack, $01
00088695 E10A                       	smpsAlterNote       $0A
00088697 E701                       	dc.b	smpsNoAttack, $01
00088699 E110                       	smpsAlterNote       $10
0008869B E701                       	dc.b	smpsNoAttack, $01
0008869D E111                       	smpsAlterNote       $11
0008869F E701                       	dc.b	smpsNoAttack, $01
000886A1 E10D                       	smpsAlterNote       $0D
000886A3 E701                       	dc.b	smpsNoAttack, $01
000886A5 E107                       	smpsAlterNote       $07
000886A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886AB E10A                       	smpsAlterNote       $0A
000886AD E701                       	dc.b	smpsNoAttack, $01
000886AF E110                       	smpsAlterNote       $10
000886B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886B5 E10A                       	smpsAlterNote       $0A
000886B7 E701                       	dc.b	smpsNoAttack, $01
000886B9 E107                       	smpsAlterNote       $07
000886BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886BF E10D                       	smpsAlterNote       $0D
000886C1 E701                       	dc.b	smpsNoAttack, $01
000886C3 E111                       	smpsAlterNote       $11
000886C5 E701                       	dc.b	smpsNoAttack, $01
000886C7 E110                       	smpsAlterNote       $10
000886C9 E701                       	dc.b	smpsNoAttack, $01
000886CB E10A                       	smpsAlterNote       $0A
000886CD E701                       	dc.b	smpsNoAttack, $01
000886CF E106                       	smpsAlterNote       $06
000886D1 E701                       	dc.b	smpsNoAttack, $01
000886D3 E10A                       	smpsAlterNote       $0A
000886D5 E701                       	dc.b	smpsNoAttack, $01
000886D7 E10D                       	smpsAlterNote       $0D
000886D9 E701                       	dc.b	smpsNoAttack, $01
000886DB E111                       	smpsAlterNote       $11
000886DD E701                       	dc.b	smpsNoAttack, $01
000886DF E10D                       	smpsAlterNote       $0D
000886E1 E701                       	dc.b	smpsNoAttack, $01
000886E3 E107                       	smpsAlterNote       $07
000886E5 E701                       	dc.b	smpsNoAttack, $01
000886E7 E106                       	smpsAlterNote       $06
000886E9 E701                       	dc.b	smpsNoAttack, $01
000886EB E10A                       	smpsAlterNote       $0A
000886ED E701                       	dc.b	smpsNoAttack, $01
000886EF E110                       	smpsAlterNote       $10
000886F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886F5 E10D                       	smpsAlterNote       $0D
000886F7 E701                       	dc.b	smpsNoAttack, $01
000886F9 E107                       	smpsAlterNote       $07
000886FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886FF E10D                       	smpsAlterNote       $0D
00088701 E701                       	dc.b	smpsNoAttack, $01
00088703 E110                       	smpsAlterNote       $10
00088705 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088709 E10A                       	smpsAlterNote       $0A
0008870B E701                       	dc.b	smpsNoAttack, $01
0008870D E106                       	smpsAlterNote       $06
0008870F E701                       	dc.b	smpsNoAttack, $01
00088711 E107                       	smpsAlterNote       $07
00088713 E701                       	dc.b	smpsNoAttack, $01
00088715 E10D                       	smpsAlterNote       $0D
00088717 E701                       	dc.b	smpsNoAttack, $01
00088719 E111                       	smpsAlterNote       $11
0008871B E701                       	dc.b	smpsNoAttack, $01
0008871D E10D                       	smpsAlterNote       $0D
0008871F E701                       	dc.b	smpsNoAttack, $01
00088721 E10A                       	smpsAlterNote       $0A
00088723 E701                       	dc.b	smpsNoAttack, $01
00088725 E107                       	smpsAlterNote       $07
00088727 8001                       	dc.b	nRst, $01
00088729 E10D                       	smpsAlterNote       $0D
0008872B C206 8001                  	dc.b	nF5, $06, nRst, $01
00088731 E601                       	smpsAlterVol        $01
00088733 E110                       	smpsAlterNote       $10
00088735 BB0D                       	dc.b	nBb4, $0D
00088737 E10A                       	smpsAlterNote       $0A
00088739 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008873D E110                       	smpsAlterNote       $10
0008873F E701                       	dc.b	smpsNoAttack, $01
00088741 E113                       	smpsAlterNote       $13
00088743 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088747 E10D                       	smpsAlterNote       $0D
00088749 E701                       	dc.b	smpsNoAttack, $01
0008874B E109                       	smpsAlterNote       $09
0008874D E701                       	dc.b	smpsNoAttack, $01
0008874F E10A                       	smpsAlterNote       $0A
00088751 E701                       	dc.b	smpsNoAttack, $01
00088753 E110                       	smpsAlterNote       $10
00088755 E701                       	dc.b	smpsNoAttack, $01
00088757 E114                       	smpsAlterNote       $14
00088759 E701                       	dc.b	smpsNoAttack, $01
0008875B E110                       	smpsAlterNote       $10
0008875D E701                       	dc.b	smpsNoAttack, $01
0008875F E10D                       	smpsAlterNote       $0D
00088761 E701                       	dc.b	smpsNoAttack, $01
00088763 E109                       	smpsAlterNote       $09
00088765 E701                       	dc.b	smpsNoAttack, $01
00088767 E10A                       	smpsAlterNote       $0A
00088769 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008876D E107                       	smpsAlterNote       $07
0008876F E701                       	dc.b	smpsNoAttack, $01
00088771 E103                       	smpsAlterNote       $03
00088773 E701                       	dc.b	smpsNoAttack, $01
00088775 E107                       	smpsAlterNote       $07
00088777 E701                       	dc.b	smpsNoAttack, $01
00088779 E10D                       	smpsAlterNote       $0D
0008877B E701                       	dc.b	smpsNoAttack, $01
0008877D E10E                       	smpsAlterNote       $0E
0008877F E701                       	dc.b	smpsNoAttack, $01
00088781 E10A                       	smpsAlterNote       $0A
00088783 E701                       	dc.b	smpsNoAttack, $01
00088785 E104                       	smpsAlterNote       $04
00088787 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008878B E107                       	smpsAlterNote       $07
0008878D E701                       	dc.b	smpsNoAttack, $01
0008878F E10D                       	smpsAlterNote       $0D
00088791 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088795 E107                       	smpsAlterNote       $07
00088797 E701                       	dc.b	smpsNoAttack, $01
00088799 E104                       	smpsAlterNote       $04
0008879B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008879F E10B                       	smpsAlterNote       $0B
000887A1 BF0D                       	dc.b	nD5, $0D
000887A3 E108                       	smpsAlterNote       $08
000887A5 E701                       	dc.b	smpsNoAttack, $01
000887A7 E105                       	smpsAlterNote       $05
000887A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887AD E10B                       	smpsAlterNote       $0B
000887AF E701                       	dc.b	smpsNoAttack, $01
000887B1 E10F                       	smpsAlterNote       $0F
000887B3 E701                       	dc.b	smpsNoAttack, $01
000887B5 E10E                       	smpsAlterNote       $0E
000887B7 E701                       	dc.b	smpsNoAttack, $01
000887B9 E108                       	smpsAlterNote       $08
000887BB E701                       	dc.b	smpsNoAttack, $01
000887BD E104                       	smpsAlterNote       $04
000887BF E701                       	dc.b	smpsNoAttack, $01
000887C1 E108                       	smpsAlterNote       $08
000887C3 E701                       	dc.b	smpsNoAttack, $01
000887C5 E10B                       	smpsAlterNote       $0B
000887C7 E701                       	dc.b	smpsNoAttack, $01
000887C9 E10F                       	smpsAlterNote       $0F
000887CB E701                       	dc.b	smpsNoAttack, $01
000887CD E10B                       	smpsAlterNote       $0B
000887CF E701                       	dc.b	smpsNoAttack, $01
000887D1 E105                       	smpsAlterNote       $05
000887D3 E701                       	dc.b	smpsNoAttack, $01
000887D5 E104                       	smpsAlterNote       $04
000887D7 E701                       	dc.b	smpsNoAttack, $01
000887D9 E105                       	smpsAlterNote       $05
000887DB 8001                       	dc.b	nRst, $01
000887DD E10C                       	smpsAlterNote       $0C
000887DF C10C                       	dc.b	nE5, $0C
000887E1 E10D                       	smpsAlterNote       $0D
000887E3 C201                       	dc.b	nF5, $01
000887E5 E10E                       	smpsAlterNote       $0E
000887E7 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000887EB E10D                       	smpsAlterNote       $0D
000887ED C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000887F1 E10A                       	smpsAlterNote       $0A
000887F3 E701                       	dc.b	smpsNoAttack, $01
000887F5 E106                       	smpsAlterNote       $06
000887F7 E701                       	dc.b	smpsNoAttack, $01
000887F9 E10A                       	smpsAlterNote       $0A
000887FB E701                       	dc.b	smpsNoAttack, $01
000887FD E10D                       	smpsAlterNote       $0D
000887FF E701                       	dc.b	smpsNoAttack, $01
00088801 E111                       	smpsAlterNote       $11
00088803 E701                       	dc.b	smpsNoAttack, $01
00088805 E10D                       	smpsAlterNote       $0D
00088807 E701                       	dc.b	smpsNoAttack, $01
00088809 E107                       	smpsAlterNote       $07
0008880B E701                       	dc.b	smpsNoAttack, $01
0008880D E106                       	smpsAlterNote       $06
0008880F E701                       	dc.b	smpsNoAttack, $01
00088811 E10A                       	smpsAlterNote       $0A
00088813 E701                       	dc.b	smpsNoAttack, $01
00088815 E110                       	smpsAlterNote       $10
00088817 E701                       	dc.b	smpsNoAttack, $01
00088819 E111                       	smpsAlterNote       $11
0008881B 8001                       	dc.b	nRst, $01
0008881D E10D                       	smpsAlterNote       $0D
0008881F C40D                       	dc.b	nG5, $0D
00088821 E10A                       	smpsAlterNote       $0A
00088823 E701                       	dc.b	smpsNoAttack, $01
00088825 E106                       	smpsAlterNote       $06
00088827 E701                       	dc.b	smpsNoAttack, $01
00088829 E10A                       	smpsAlterNote       $0A
0008882B E701                       	dc.b	smpsNoAttack, $01
0008882D E10D                       	smpsAlterNote       $0D
0008882F E701                       	dc.b	smpsNoAttack, $01
00088831 E10C                       	smpsAlterNote       $0C
00088833 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008883F 8001                       	dc.b	nRst, $01
00088841 E10D                       	smpsAlterNote       $0D
00088843 C20D                       	dc.b	nF5, $0D
00088845 E10A                       	smpsAlterNote       $0A
00088847 E701                       	dc.b	smpsNoAttack, $01
00088849 E106                       	smpsAlterNote       $06
0008884B E701                       	dc.b	smpsNoAttack, $01
0008884D E10A                       	smpsAlterNote       $0A
0008884F E701                       	dc.b	smpsNoAttack, $01
00088851 E110                       	smpsAlterNote       $10
00088853 E701                       	dc.b	smpsNoAttack, $01
00088855 E111                       	smpsAlterNote       $11
00088857 E701                       	dc.b	smpsNoAttack, $01
00088859 E10D                       	smpsAlterNote       $0D
0008885B E701                       	dc.b	smpsNoAttack, $01
0008885D E107                       	smpsAlterNote       $07
0008885F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088863 E10A                       	smpsAlterNote       $0A
00088865 E701                       	dc.b	smpsNoAttack, $01
00088867 E110                       	smpsAlterNote       $10
00088869 E701                       	dc.b	smpsNoAttack, $01
0008886B E111                       	smpsAlterNote       $11
0008886D 8001                       	dc.b	nRst, $01
0008886F E10F                       	smpsAlterNote       $0F
00088871 C60A                       	dc.b	nA5, $0A
00088873 E10D                       	smpsAlterNote       $0D
00088875 C406 8001                  	dc.b	nG5, $06, nRst, $01
00088879 E10C                       	smpsAlterNote       $0C
0008887B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00088887 8001                       	dc.b	nRst, $01
00088889 E10D                       	smpsAlterNote       $0D
0008888B C20D                       	dc.b	nF5, $0D
0008888D E107                       	smpsAlterNote       $07
0008888F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088893 E10A                       	smpsAlterNote       $0A
00088895 E701                       	dc.b	smpsNoAttack, $01
00088897 E110                       	smpsAlterNote       $10
00088899 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008889D E10A                       	smpsAlterNote       $0A
0008889F E701                       	dc.b	smpsNoAttack, $01
000888A1 E107                       	smpsAlterNote       $07
000888A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888A7 E10D                       	smpsAlterNote       $0D
000888A9 E701                       	dc.b	smpsNoAttack, $01
000888AB E111                       	smpsAlterNote       $11
000888AD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000888B1 E10D                       	smpsAlterNote       $0D
000888B3 C40D                       	dc.b	nG5, $0D
000888B5 E107                       	smpsAlterNote       $07
000888B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888BB E10A                       	smpsAlterNote       $0A
000888BD E701                       	dc.b	smpsNoAttack, $01
000888BF E10D                       	smpsAlterNote       $0D
000888C1 8001                       	dc.b	nRst, $01
000888C3 E10C                       	smpsAlterNote       $0C
000888C5 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000888D1 E10D                       	smpsAlterNote       $0D
000888D3 C20E                       	dc.b	nF5, $0E
000888D5 E107                       	smpsAlterNote       $07
000888D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888DB E10D                       	smpsAlterNote       $0D
000888DD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000888E3 E0C0                       	smpsPan             panCenter, $00
000888E5 E603                       	smpsAlterVol        $03
000888E7 E108                       	smpsAlterNote       $08
000888E9 B406                       	dc.b	nEb4, $06
000888EB E10C                       	smpsAlterNote       $0C
000888ED AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000888F1 E108                       	smpsAlterNote       $08
000888F3 B403                       	dc.b	nEb4, $03
000888F5 E109                       	smpsAlterNote       $09
000888F7 B803 8001                  	dc.b	nG4, $03, nRst, $01
000888FB E10C                       	smpsAlterNote       $0C
000888FD BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00088905 03                         	dc.b	$03
00088906 E6FD                       	smpsAlterVol        $FD
00088908 F6F1 F4                    	smpsJump            music84_Jump00
0008890B                            
0008890B                            ; PSG1 Data
0008890B                            music84_PSG1:
0008890B E1FD                       	smpsAlterNote       $FD
0008890D EC04                       	smpsPSGAlterVol     $04
0008890F 9203                       	dc.b	nF1, $03
00088911 E1FE                       	smpsAlterNote       $FE
00088913 9603                       	dc.b	nA1, $03
00088915 EC04                       	smpsPSGAlterVol     $04
00088917 E701                       	dc.b	smpsNoAttack, $01
00088919 E1FF                       	smpsAlterNote       $FF
0008891B ECFC                       	smpsPSGAlterVol     $FC
0008891D 9B03                       	dc.b	nD2, $03
0008891F E1FD                       	smpsAlterNote       $FD
00088921 9403                       	dc.b	nG1, $03
00088923 EC04                       	smpsPSGAlterVol     $04
00088925 E701                       	dc.b	smpsNoAttack, $01
00088927 E1FE                       	smpsAlterNote       $FE
00088929 ECFC                       	smpsPSGAlterVol     $FC
0008892B 9703                       	dc.b	nBb1, $03
0008892D E1FF                       	smpsAlterNote       $FF
0008892F 9B03                       	dc.b	nD2, $03
00088931 EC04                       	smpsPSGAlterVol     $04
00088933 E701                       	dc.b	smpsNoAttack, $01
00088935 E1FE                       	smpsAlterNote       $FE
00088937 ECFC                       	smpsPSGAlterVol     $FC
00088939 A002                       	dc.b	nG2, $02
0008893B EC04                       	smpsPSGAlterVol     $04
0008893D E701                       	dc.b	smpsNoAttack, $01
0008893F E1FF                       	smpsAlterNote       $FF
00088941 ECFC                       	smpsPSGAlterVol     $FC
00088943 A203                       	dc.b	nA2, $03
00088945 EC0B                       	smpsPSGAlterVol     $0B
00088947 800A                       	dc.b	nRst, $0A
00088949 E105                       	smpsAlterNote       $05
0008894B 01                         	dc.b	$01
0008894C E1FC                       	smpsAlterNote       $FC
0008894E 01                         	dc.b	$01
0008894F E105                       	smpsAlterNote       $05
00088951 01                         	dc.b	$01
00088952 E1FD                       	smpsAlterNote       $FD
00088954 01                         	dc.b	$01
00088955 E105                       	smpsAlterNote       $05
00088957 01                         	dc.b	$01
00088958 E1FD                       	smpsAlterNote       $FD
0008895A 01                         	dc.b	$01
0008895B E1FA                       	smpsAlterNote       $FA
0008895D 01                         	dc.b	$01
0008895E E1FC                       	smpsAlterNote       $FC
00088960 01                         	dc.b	$01
00088961 E105                       	smpsAlterNote       $05
00088963 01                         	dc.b	$01
00088964 E108                       	smpsAlterNote       $08
00088966 0101                       	dc.b	$01, $01
00088968 E105                       	smpsAlterNote       $05
0008896A 01                         	dc.b	$01
0008896B E1FA                       	smpsAlterNote       $FA
0008896D 0101                       	dc.b	$01, $01
0008896F E1FD                       	smpsAlterNote       $FD
00088971 01                         	dc.b	$01
00088972 E105                       	smpsAlterNote       $05
00088974 01                         	dc.b	$01
00088975 E108                       	smpsAlterNote       $08
00088977 01                         	dc.b	$01
00088978 E105                       	smpsAlterNote       $05
0008897A 01                         	dc.b	$01
0008897B E1FC                       	smpsAlterNote       $FC
0008897D 01                         	dc.b	$01
0008897E E105                       	smpsAlterNote       $05
00088980 01                         	dc.b	$01
00088981 E1FD                       	smpsAlterNote       $FD
00088983 01                         	dc.b	$01
00088984                            
00088984                            music84_Jump07:
00088984 E105                       	smpsAlterNote       $05
00088986 8001                       	dc.b	nRst, $01
00088988 E1FD                       	smpsAlterNote       $FD
0008898A 01                         	dc.b	$01
0008898B E1FA                       	smpsAlterNote       $FA
0008898D 01                         	dc.b	$01
0008898E E1FC                       	smpsAlterNote       $FC
00088990 01                         	dc.b	$01
00088991 E1FD                       	smpsAlterNote       $FD
00088993 ECF5                       	smpsPSGAlterVol     $F5
00088995 9206                       	dc.b	nF1, $06
00088997 EC04                       	smpsPSGAlterVol     $04
00088999 E701                       	dc.b	smpsNoAttack, $01
0008899B EC07                       	smpsPSGAlterVol     $07
0008899D 8003                       	dc.b	nRst, $03
0008899F ECF5                       	smpsPSGAlterVol     $F5
000889A1 9206                       	dc.b	nF1, $06
000889A3 EC04                       	smpsPSGAlterVol     $04
000889A5 E701                       	dc.b	smpsNoAttack, $01
000889A7 EC07                       	smpsPSGAlterVol     $07
000889A9 8006                       	dc.b	nRst, $06
000889AB E100                       	smpsAlterNote       $00
000889AD 01                         	dc.b	$01
000889AE E104                       	smpsAlterNote       $04
000889B0 01                         	dc.b	$01
000889B1 E100                       	smpsAlterNote       $00
000889B3 01                         	dc.b	$01
000889B4 E1FB                       	smpsAlterNote       $FB
000889B6 01                         	dc.b	$01
000889B7 E1FD                       	smpsAlterNote       $FD
000889B9 ECF5                       	smpsPSGAlterVol     $F5
000889BB 9406                       	dc.b	nG1, $06
000889BD EC04                       	smpsPSGAlterVol     $04
000889BF E701                       	dc.b	smpsNoAttack, $01
000889C1 EC07                       	smpsPSGAlterVol     $07
000889C3 8003                       	dc.b	nRst, $03
000889C5 ECF5                       	smpsPSGAlterVol     $F5
000889C7 9407                       	dc.b	nG1, $07
000889C9 EC0B                       	smpsPSGAlterVol     $0B
000889CB 8006                       	dc.b	nRst, $06
000889CD E100                       	smpsAlterNote       $00
000889CF 01                         	dc.b	$01
000889D0 E103                       	smpsAlterNote       $03
000889D2 0101                       	dc.b	$01, $01
000889D4 E1FD                       	smpsAlterNote       $FD
000889D6 01                         	dc.b	$01
000889D7 ECF5                       	smpsPSGAlterVol     $F5
000889D9 9207                       	dc.b	nF1, $07
000889DB EC0B                       	smpsPSGAlterVol     $0B
000889DD 8004                       	dc.b	nRst, $04
000889DF ECF5                       	smpsPSGAlterVol     $F5
000889E1 9206                       	dc.b	nF1, $06
000889E3 EC04                       	smpsPSGAlterVol     $04
000889E5 E701                       	dc.b	smpsNoAttack, $01
000889E7 EC07                       	smpsPSGAlterVol     $07
000889E9 8006                       	dc.b	nRst, $06
000889EB E103                       	smpsAlterNote       $03
000889ED 01                         	dc.b	$01
000889EE E104                       	smpsAlterNote       $04
000889F0 01                         	dc.b	$01
000889F1 E100                       	smpsAlterNote       $00
000889F3 01                         	dc.b	$01
000889F4 E1FA                       	smpsAlterNote       $FA
000889F6 01                         	dc.b	$01
000889F7 E1FD                       	smpsAlterNote       $FD
000889F9 ECF5                       	smpsPSGAlterVol     $F5
000889FB 9206                       	dc.b	nF1, $06
000889FD EC04                       	smpsPSGAlterVol     $04
000889FF E701                       	dc.b	smpsNoAttack, $01
00088A01 EC07                       	smpsPSGAlterVol     $07
00088A03 8003                       	dc.b	nRst, $03
00088A05 ECF5                       	smpsPSGAlterVol     $F5
00088A07 9106                       	dc.b	nE1, $06
00088A09 EC04                       	smpsPSGAlterVol     $04
00088A0B E701                       	dc.b	smpsNoAttack, $01
00088A0D EC07                       	smpsPSGAlterVol     $07
00088A0F 8006                       	dc.b	nRst, $06
00088A11 E100                       	smpsAlterNote       $00
00088A13 01                         	dc.b	$01
00088A14 E104                       	smpsAlterNote       $04
00088A16 01                         	dc.b	$01
00088A17 E100                       	smpsAlterNote       $00
00088A19 01                         	dc.b	$01
00088A1A E1FD                       	smpsAlterNote       $FD
00088A1C 01                         	dc.b	$01
00088A1D ECF5                       	smpsPSGAlterVol     $F5
00088A1F 9206                       	dc.b	nF1, $06
00088A21 EC04                       	smpsPSGAlterVol     $04
00088A23 E701                       	dc.b	smpsNoAttack, $01
00088A25 EC07                       	smpsPSGAlterVol     $07
00088A27 8003                       	dc.b	nRst, $03
00088A29 ECF5                       	smpsPSGAlterVol     $F5
00088A2B 9207                       	dc.b	nF1, $07
00088A2D EC0B                       	smpsPSGAlterVol     $0B
00088A2F 8007                       	dc.b	nRst, $07
00088A31 E103                       	smpsAlterNote       $03
00088A33 0101                       	dc.b	$01, $01
00088A35 E1FD                       	smpsAlterNote       $FD
00088A37 01                         	dc.b	$01
00088A38 E1FB                       	smpsAlterNote       $FB
00088A3A 01                         	dc.b	$01
00088A3B E1FD                       	smpsAlterNote       $FD
00088A3D ECF5                       	smpsPSGAlterVol     $F5
00088A3F 9406                       	dc.b	nG1, $06
00088A41 EC0B                       	smpsPSGAlterVol     $0B
00088A43 8004                       	dc.b	nRst, $04
00088A45 ECF5                       	smpsPSGAlterVol     $F5
00088A47 9406                       	dc.b	nG1, $06
00088A49 EC04                       	smpsPSGAlterVol     $04
00088A4B E701                       	dc.b	smpsNoAttack, $01
00088A4D EC07                       	smpsPSGAlterVol     $07
00088A4F 8006                       	dc.b	nRst, $06
00088A51 E100                       	smpsAlterNote       $00
00088A53 01                         	dc.b	$01
00088A54 E104                       	smpsAlterNote       $04
00088A56 01                         	dc.b	$01
00088A57 E100                       	smpsAlterNote       $00
00088A59 01                         	dc.b	$01
00088A5A E1F9                       	smpsAlterNote       $F9
00088A5C 01                         	dc.b	$01
00088A5D E1FD                       	smpsAlterNote       $FD
00088A5F ECF5                       	smpsPSGAlterVol     $F5
00088A61 9206                       	dc.b	nF1, $06
00088A63 EC04                       	smpsPSGAlterVol     $04
00088A65 E701                       	dc.b	smpsNoAttack, $01
00088A67 EC07                       	smpsPSGAlterVol     $07
00088A69 8003                       	dc.b	nRst, $03
00088A6B ECF5                       	smpsPSGAlterVol     $F5
00088A6D 9207                       	dc.b	nF1, $07
00088A6F EC0B                       	smpsPSGAlterVol     $0B
00088A71 8006                       	dc.b	nRst, $06
00088A73 E100                       	smpsAlterNote       $00
00088A75 01                         	dc.b	$01
00088A76 E104                       	smpsAlterNote       $04
00088A78 01                         	dc.b	$01
00088A79 E103                       	smpsAlterNote       $03
00088A7B 01                         	dc.b	$01
00088A7C E1FD                       	smpsAlterNote       $FD
00088A7E 01                         	dc.b	$01
00088A7F ECF5                       	smpsPSGAlterVol     $F5
00088A81 9207                       	dc.b	nF1, $07
00088A83 EC0B                       	smpsPSGAlterVol     $0B
00088A85 8004                       	dc.b	nRst, $04
00088A87 ECF5                       	smpsPSGAlterVol     $F5
00088A89 9206                       	dc.b	nF1, $06
00088A8B EC0B                       	smpsPSGAlterVol     $0B
00088A8D 8007                       	dc.b	nRst, $07
00088A8F E103                       	smpsAlterNote       $03
00088A91 0101                       	dc.b	$01, $01
00088A93 E100                       	smpsAlterNote       $00
00088A95 01                         	dc.b	$01
00088A96 E1FA                       	smpsAlterNote       $FA
00088A98 01                         	dc.b	$01
00088A99 E1FD                       	smpsAlterNote       $FD
00088A9B ECF5                       	smpsPSGAlterVol     $F5
00088A9D 9206                       	dc.b	nF1, $06
00088A9F EC04                       	smpsPSGAlterVol     $04
00088AA1 E701                       	dc.b	smpsNoAttack, $01
00088AA3 EC07                       	smpsPSGAlterVol     $07
00088AA5 8003                       	dc.b	nRst, $03
00088AA7 ECF5                       	smpsPSGAlterVol     $F5
00088AA9 9206                       	dc.b	nF1, $06
00088AAB EC04                       	smpsPSGAlterVol     $04
00088AAD E701                       	dc.b	smpsNoAttack, $01
00088AAF EC07                       	smpsPSGAlterVol     $07
00088AB1 8006                       	dc.b	nRst, $06
00088AB3 E100                       	smpsAlterNote       $00
00088AB5 01                         	dc.b	$01
00088AB6 E104                       	smpsAlterNote       $04
00088AB8 01                         	dc.b	$01
00088AB9 E100                       	smpsAlterNote       $00
00088ABB 01                         	dc.b	$01
00088ABC E1FD                       	smpsAlterNote       $FD
00088ABE 01                         	dc.b	$01
00088ABF ECF5                       	smpsPSGAlterVol     $F5
00088AC1 9206                       	dc.b	nF1, $06
00088AC3 EC04                       	smpsPSGAlterVol     $04
00088AC5 E701                       	dc.b	smpsNoAttack, $01
00088AC7 EC07                       	smpsPSGAlterVol     $07
00088AC9 8003                       	dc.b	nRst, $03
00088ACB ECF5                       	smpsPSGAlterVol     $F5
00088ACD 9207                       	dc.b	nF1, $07
00088ACF EC0B                       	smpsPSGAlterVol     $0B
00088AD1 8007                       	dc.b	nRst, $07
00088AD3 E103                       	smpsAlterNote       $03
00088AD5 0101                       	dc.b	$01, $01
00088AD7 E1FD                       	smpsAlterNote       $FD
00088AD9 01                         	dc.b	$01
00088ADA E1FA                       	smpsAlterNote       $FA
00088ADC 01                         	dc.b	$01
00088ADD E1FD                       	smpsAlterNote       $FD
00088ADF ECF5                       	smpsPSGAlterVol     $F5
00088AE1 9206                       	dc.b	nF1, $06
00088AE3 EC0B                       	smpsPSGAlterVol     $0B
00088AE5 8004                       	dc.b	nRst, $04
00088AE7 ECF5                       	smpsPSGAlterVol     $F5
00088AE9 9206                       	dc.b	nF1, $06
00088AEB EC04                       	smpsPSGAlterVol     $04
00088AED E701                       	dc.b	smpsNoAttack, $01
00088AEF EC07                       	smpsPSGAlterVol     $07
00088AF1 8006                       	dc.b	nRst, $06
00088AF3 E103                       	smpsAlterNote       $03
00088AF5 01                         	dc.b	$01
00088AF6 E104                       	smpsAlterNote       $04
00088AF8 01                         	dc.b	$01
00088AF9 E100                       	smpsAlterNote       $00
00088AFB 01                         	dc.b	$01
00088AFC E1FA                       	smpsAlterNote       $FA
00088AFE 01                         	dc.b	$01
00088AFF E1FD                       	smpsAlterNote       $FD
00088B01 ECF5                       	smpsPSGAlterVol     $F5
00088B03 9206                       	dc.b	nF1, $06
00088B05 EC04                       	smpsPSGAlterVol     $04
00088B07 E701                       	dc.b	smpsNoAttack, $01
00088B09 EC07                       	smpsPSGAlterVol     $07
00088B0B 8003                       	dc.b	nRst, $03
00088B0D ECF5                       	smpsPSGAlterVol     $F5
00088B0F 9206                       	dc.b	nF1, $06
00088B11 EC04                       	smpsPSGAlterVol     $04
00088B13 E701                       	dc.b	smpsNoAttack, $01
00088B15 EC07                       	smpsPSGAlterVol     $07
00088B17 8006                       	dc.b	nRst, $06
00088B19 E100                       	smpsAlterNote       $00
00088B1B 01                         	dc.b	$01
00088B1C E104                       	smpsAlterNote       $04
00088B1E 01                         	dc.b	$01
00088B1F E103                       	smpsAlterNote       $03
00088B21 01                         	dc.b	$01
00088B22 E1FD                       	smpsAlterNote       $FD
00088B24 01                         	dc.b	$01
00088B25 ECF5                       	smpsPSGAlterVol     $F5
00088B27 9107                       	dc.b	nE1, $07
00088B29 EC0B                       	smpsPSGAlterVol     $0B
00088B2B 8004                       	dc.b	nRst, $04
00088B2D ECF5                       	smpsPSGAlterVol     $F5
00088B2F 9106                       	dc.b	nE1, $06
00088B31 EC0B                       	smpsPSGAlterVol     $0B
00088B33 8007                       	dc.b	nRst, $07
00088B35 E103                       	smpsAlterNote       $03
00088B37 0101                       	dc.b	$01, $01
00088B39 E100                       	smpsAlterNote       $00
00088B3B 01                         	dc.b	$01
00088B3C E1FA                       	smpsAlterNote       $FA
00088B3E 01                         	dc.b	$01
00088B3F E1FD                       	smpsAlterNote       $FD
00088B41 ECF5                       	smpsPSGAlterVol     $F5
00088B43 9106                       	dc.b	nE1, $06
00088B45 EC04                       	smpsPSGAlterVol     $04
00088B47 E701                       	dc.b	smpsNoAttack, $01
00088B49 EC07                       	smpsPSGAlterVol     $07
00088B4B 8003                       	dc.b	nRst, $03
00088B4D ECF5                       	smpsPSGAlterVol     $F5
00088B4F 9106                       	dc.b	nE1, $06
00088B51 EC04                       	smpsPSGAlterVol     $04
00088B53 E701                       	dc.b	smpsNoAttack, $01
00088B55 EC07                       	smpsPSGAlterVol     $07
00088B57 8006                       	dc.b	nRst, $06
00088B59 E100                       	smpsAlterNote       $00
00088B5B 01                         	dc.b	$01
00088B5C E104                       	smpsAlterNote       $04
00088B5E 01                         	dc.b	$01
00088B5F E100                       	smpsAlterNote       $00
00088B61 01                         	dc.b	$01
00088B62 E1FA                       	smpsAlterNote       $FA
00088B64 01                         	dc.b	$01
00088B65 E1FD                       	smpsAlterNote       $FD
00088B67 ECF5                       	smpsPSGAlterVol     $F5
00088B69 9106                       	dc.b	nE1, $06
00088B6B EC04                       	smpsPSGAlterVol     $04
00088B6D E701                       	dc.b	smpsNoAttack, $01
00088B6F EC07                       	smpsPSGAlterVol     $07
00088B71 8003                       	dc.b	nRst, $03
00088B73 ECF5                       	smpsPSGAlterVol     $F5
00088B75 9107 9106                  	dc.b	nE1, $07, nE1, $06
00088B79 EC04                       	smpsPSGAlterVol     $04
00088B7B E701                       	dc.b	smpsNoAttack, $01
00088B7D ECFC                       	smpsPSGAlterVol     $FC
00088B7F 9103 9103                  	dc.b	nE1, $03, nE1, $03
00088B83 EC04                       	smpsPSGAlterVol     $04
00088B85 E701                       	dc.b	smpsNoAttack, $01
00088B87 ECFC                       	smpsPSGAlterVol     $FC
00088B89 9106                       	dc.b	nE1, $06
00088B8B EC04                       	smpsPSGAlterVol     $04
00088B8D E701                       	dc.b	smpsNoAttack, $01
00088B8F EC07                       	smpsPSGAlterVol     $07
00088B91 8006                       	dc.b	nRst, $06
00088B93 E100                       	smpsAlterNote       $00
00088B95 01                         	dc.b	$01
00088B96 E104                       	smpsAlterNote       $04
00088B98 01                         	dc.b	$01
00088B99 E100                       	smpsAlterNote       $00
00088B9B 01                         	dc.b	$01
00088B9C E1FA                       	smpsAlterNote       $FA
00088B9E 01                         	dc.b	$01
00088B9F E1F9                       	smpsAlterNote       $F9
00088BA1 01                         	dc.b	$01
00088BA2 E1FD                       	smpsAlterNote       $FD
00088BA4 01                         	dc.b	$01
00088BA5 E103                       	smpsAlterNote       $03
00088BA7 01                         	dc.b	$01
00088BA8 E104                       	smpsAlterNote       $04
00088BAA 01                         	dc.b	$01
00088BAB E100                       	smpsAlterNote       $00
00088BAD 01                         	dc.b	$01
00088BAE E1FA                       	smpsAlterNote       $FA
00088BB0 0101                       	dc.b	$01, $01
00088BB2 E1FD                       	smpsAlterNote       $FD
00088BB4 ECF5                       	smpsPSGAlterVol     $F5
00088BB6 9206                       	dc.b	nF1, $06
00088BB8 EC04                       	smpsPSGAlterVol     $04
00088BBA E701                       	dc.b	smpsNoAttack, $01
00088BBC EC07                       	smpsPSGAlterVol     $07
00088BBE 8003                       	dc.b	nRst, $03
00088BC0 ECF5                       	smpsPSGAlterVol     $F5
00088BC2 9206                       	dc.b	nF1, $06
00088BC4 EC04                       	smpsPSGAlterVol     $04
00088BC6 E701                       	dc.b	smpsNoAttack, $01
00088BC8 EC07                       	smpsPSGAlterVol     $07
00088BCA 8006                       	dc.b	nRst, $06
00088BCC E100                       	smpsAlterNote       $00
00088BCE 01                         	dc.b	$01
00088BCF E104                       	smpsAlterNote       $04
00088BD1 01                         	dc.b	$01
00088BD2 E103                       	smpsAlterNote       $03
00088BD4 01                         	dc.b	$01
00088BD5 E1FD                       	smpsAlterNote       $FD
00088BD7 01                         	dc.b	$01
00088BD8 ECF5                       	smpsPSGAlterVol     $F5
00088BDA 9407                       	dc.b	nG1, $07
00088BDC EC0B                       	smpsPSGAlterVol     $0B
00088BDE 8004                       	dc.b	nRst, $04
00088BE0 ECF5                       	smpsPSGAlterVol     $F5
00088BE2 9406                       	dc.b	nG1, $06
00088BE4 EC0B                       	smpsPSGAlterVol     $0B
00088BE6 8007                       	dc.b	nRst, $07
00088BE8 E103                       	smpsAlterNote       $03
00088BEA 0101                       	dc.b	$01, $01
00088BEC E1FD                       	smpsAlterNote       $FD
00088BEE 01                         	dc.b	$01
00088BEF E1F9                       	smpsAlterNote       $F9
00088BF1 01                         	dc.b	$01
00088BF2 E1FD                       	smpsAlterNote       $FD
00088BF4 ECF5                       	smpsPSGAlterVol     $F5
00088BF6 9206                       	dc.b	nF1, $06
00088BF8 EC04                       	smpsPSGAlterVol     $04
00088BFA E701                       	dc.b	smpsNoAttack, $01
00088BFC EC07                       	smpsPSGAlterVol     $07
00088BFE 8003                       	dc.b	nRst, $03
00088C00 ECF5                       	smpsPSGAlterVol     $F5
00088C02 9206                       	dc.b	nF1, $06
00088C04 EC04                       	smpsPSGAlterVol     $04
00088C06 E701                       	dc.b	smpsNoAttack, $01
00088C08 EC07                       	smpsPSGAlterVol     $07
00088C0A 8006                       	dc.b	nRst, $06
00088C0C E100                       	smpsAlterNote       $00
00088C0E 01                         	dc.b	$01
00088C0F E104                       	smpsAlterNote       $04
00088C11 01                         	dc.b	$01
00088C12 E100                       	smpsAlterNote       $00
00088C14 01                         	dc.b	$01
00088C15 E1FA                       	smpsAlterNote       $FA
00088C17 01                         	dc.b	$01
00088C18 E1FD                       	smpsAlterNote       $FD
00088C1A ECF5                       	smpsPSGAlterVol     $F5
00088C1C 9206                       	dc.b	nF1, $06
00088C1E EC04                       	smpsPSGAlterVol     $04
00088C20 E701                       	dc.b	smpsNoAttack, $01
00088C22 EC07                       	smpsPSGAlterVol     $07
00088C24 8003                       	dc.b	nRst, $03
00088C26 ECF5                       	smpsPSGAlterVol     $F5
00088C28 9107                       	dc.b	nE1, $07
00088C2A EC0B                       	smpsPSGAlterVol     $0B
00088C2C 8006                       	dc.b	nRst, $06
00088C2E E100                       	smpsAlterNote       $00
00088C30 01                         	dc.b	$01
00088C31 E103                       	smpsAlterNote       $03
00088C33 0101                       	dc.b	$01, $01
00088C35 E1FD                       	smpsAlterNote       $FD
00088C37 01                         	dc.b	$01
00088C38 ECF5                       	smpsPSGAlterVol     $F5
00088C3A 9207                       	dc.b	nF1, $07
00088C3C EC0B                       	smpsPSGAlterVol     $0B
00088C3E 8004                       	dc.b	nRst, $04
00088C40 ECF5                       	smpsPSGAlterVol     $F5
00088C42 9206                       	dc.b	nF1, $06
00088C44 EC04                       	smpsPSGAlterVol     $04
00088C46 E701                       	dc.b	smpsNoAttack, $01
00088C48 EC07                       	smpsPSGAlterVol     $07
00088C4A 8006                       	dc.b	nRst, $06
00088C4C E103                       	smpsAlterNote       $03
00088C4E 01                         	dc.b	$01
00088C4F E104                       	smpsAlterNote       $04
00088C51 01                         	dc.b	$01
00088C52 E100                       	smpsAlterNote       $00
00088C54 01                         	dc.b	$01
00088C55 E1FB                       	smpsAlterNote       $FB
00088C57 01                         	dc.b	$01
00088C58 E1FD                       	smpsAlterNote       $FD
00088C5A ECF5                       	smpsPSGAlterVol     $F5
00088C5C 9406                       	dc.b	nG1, $06
00088C5E EC04                       	smpsPSGAlterVol     $04
00088C60 E701                       	dc.b	smpsNoAttack, $01
00088C62 EC07                       	smpsPSGAlterVol     $07
00088C64 8003                       	dc.b	nRst, $03
00088C66 ECF5                       	smpsPSGAlterVol     $F5
00088C68 9406                       	dc.b	nG1, $06
00088C6A EC04                       	smpsPSGAlterVol     $04
00088C6C E701                       	dc.b	smpsNoAttack, $01
00088C6E EC07                       	smpsPSGAlterVol     $07
00088C70 8006                       	dc.b	nRst, $06
00088C72 E100                       	smpsAlterNote       $00
00088C74 01                         	dc.b	$01
00088C75 E104                       	smpsAlterNote       $04
00088C77 01                         	dc.b	$01
00088C78 E100                       	smpsAlterNote       $00
00088C7A 01                         	dc.b	$01
00088C7B E1FD                       	smpsAlterNote       $FD
00088C7D 01                         	dc.b	$01
00088C7E ECF5                       	smpsPSGAlterVol     $F5
00088C80 9206                       	dc.b	nF1, $06
00088C82 EC04                       	smpsPSGAlterVol     $04
00088C84 E701                       	dc.b	smpsNoAttack, $01
00088C86 EC07                       	smpsPSGAlterVol     $07
00088C88 8003                       	dc.b	nRst, $03
00088C8A ECF5                       	smpsPSGAlterVol     $F5
00088C8C 9207                       	dc.b	nF1, $07
00088C8E EC0B                       	smpsPSGAlterVol     $0B
00088C90 8007                       	dc.b	nRst, $07
00088C92 E103                       	smpsAlterNote       $03
00088C94 0101                       	dc.b	$01, $01
00088C96 E1FD                       	smpsAlterNote       $FD
00088C98 01                         	dc.b	$01
00088C99 E1FA                       	smpsAlterNote       $FA
00088C9B 01                         	dc.b	$01
00088C9C E1FD                       	smpsAlterNote       $FD
00088C9E ECF5                       	smpsPSGAlterVol     $F5
00088CA0 9206                       	dc.b	nF1, $06
00088CA2 EC0B                       	smpsPSGAlterVol     $0B
00088CA4 8004                       	dc.b	nRst, $04
00088CA6 ECF5                       	smpsPSGAlterVol     $F5
00088CA8 9206                       	dc.b	nF1, $06
00088CAA EC04                       	smpsPSGAlterVol     $04
00088CAC E701                       	dc.b	smpsNoAttack, $01
00088CAE EC07                       	smpsPSGAlterVol     $07
00088CB0 8006                       	dc.b	nRst, $06
00088CB2 E100                       	smpsAlterNote       $00
00088CB4 01                         	dc.b	$01
00088CB5 E104                       	smpsAlterNote       $04
00088CB7 01                         	dc.b	$01
00088CB8 E100                       	smpsAlterNote       $00
00088CBA 01                         	dc.b	$01
00088CBB E1FA                       	smpsAlterNote       $FA
00088CBD 01                         	dc.b	$01
00088CBE E1FD                       	smpsAlterNote       $FD
00088CC0 ECF5                       	smpsPSGAlterVol     $F5
00088CC2 9206                       	dc.b	nF1, $06
00088CC4 EC04                       	smpsPSGAlterVol     $04
00088CC6 E704                       	dc.b	smpsNoAttack, $04
00088CC8 ECFC                       	smpsPSGAlterVol     $FC
00088CCA 9207                       	dc.b	nF1, $07
00088CCC EC0B                       	smpsPSGAlterVol     $0B
00088CCE 8006                       	dc.b	nRst, $06
00088CD0 E100                       	smpsAlterNote       $00
00088CD2 01                         	dc.b	$01
00088CD3 E104                       	smpsAlterNote       $04
00088CD5 01                         	dc.b	$01
00088CD6 E103                       	smpsAlterNote       $03
00088CD8 01                         	dc.b	$01
00088CD9 E1FD                       	smpsAlterNote       $FD
00088CDB 01                         	dc.b	$01
00088CDC ECF5                       	smpsPSGAlterVol     $F5
00088CDE 9207                       	dc.b	nF1, $07
00088CE0 EC0B                       	smpsPSGAlterVol     $0B
00088CE2 8004                       	dc.b	nRst, $04
00088CE4 ECF5                       	smpsPSGAlterVol     $F5
00088CE6 9206                       	dc.b	nF1, $06
00088CE8 EC0B                       	smpsPSGAlterVol     $0B
00088CEA 8007                       	dc.b	nRst, $07
00088CEC E103                       	smpsAlterNote       $03
00088CEE 0101                       	dc.b	$01, $01
00088CF0 E100                       	smpsAlterNote       $00
00088CF2 01                         	dc.b	$01
00088CF3 E1FA                       	smpsAlterNote       $FA
00088CF5 01                         	dc.b	$01
00088CF6 E1FD                       	smpsAlterNote       $FD
00088CF8 ECF5                       	smpsPSGAlterVol     $F5
00088CFA 9206                       	dc.b	nF1, $06
00088CFC EC04                       	smpsPSGAlterVol     $04
00088CFE E704                       	dc.b	smpsNoAttack, $04
00088D00 ECFC                       	smpsPSGAlterVol     $FC
00088D02 9206                       	dc.b	nF1, $06
00088D04 EC04                       	smpsPSGAlterVol     $04
00088D06 E701                       	dc.b	smpsNoAttack, $01
00088D08 EC07                       	smpsPSGAlterVol     $07
00088D0A 8006                       	dc.b	nRst, $06
00088D0C E100                       	smpsAlterNote       $00
00088D0E 01                         	dc.b	$01
00088D0F E104                       	smpsAlterNote       $04
00088D11 01                         	dc.b	$01
00088D12 E100                       	smpsAlterNote       $00
00088D14 01                         	dc.b	$01
00088D15 E1FD                       	smpsAlterNote       $FD
00088D17 01                         	dc.b	$01
00088D18 ECF5                       	smpsPSGAlterVol     $F5
00088D1A 9206                       	dc.b	nF1, $06
00088D1C EC04                       	smpsPSGAlterVol     $04
00088D1E E701                       	dc.b	smpsNoAttack, $01
00088D20 EC07                       	smpsPSGAlterVol     $07
00088D22 8003                       	dc.b	nRst, $03
00088D24 ECF5                       	smpsPSGAlterVol     $F5
00088D26 9207                       	dc.b	nF1, $07
00088D28 EC0B                       	smpsPSGAlterVol     $0B
00088D2A 8007                       	dc.b	nRst, $07
00088D2C E103                       	smpsAlterNote       $03
00088D2E 0101                       	dc.b	$01, $01
00088D30 E1FD                       	smpsAlterNote       $FD
00088D32 01                         	dc.b	$01
00088D33 E1FA                       	smpsAlterNote       $FA
00088D35 01                         	dc.b	$01
00088D36 E1FD                       	smpsAlterNote       $FD
00088D38 ECF5                       	smpsPSGAlterVol     $F5
00088D3A 9106                       	dc.b	nE1, $06
00088D3C EC0B                       	smpsPSGAlterVol     $0B
00088D3E 8004                       	dc.b	nRst, $04
00088D40 ECF5                       	smpsPSGAlterVol     $F5
00088D42 9106                       	dc.b	nE1, $06
00088D44 EC04                       	smpsPSGAlterVol     $04
00088D46 E701                       	dc.b	smpsNoAttack, $01
00088D48 EC07                       	smpsPSGAlterVol     $07
00088D4A 8006                       	dc.b	nRst, $06
00088D4C E100                       	smpsAlterNote       $00
00088D4E 01                         	dc.b	$01
00088D4F E104                       	smpsAlterNote       $04
00088D51 01                         	dc.b	$01
00088D52 E100                       	smpsAlterNote       $00
00088D54 01                         	dc.b	$01
00088D55 E1FA                       	smpsAlterNote       $FA
00088D57 01                         	dc.b	$01
00088D58 E1FD                       	smpsAlterNote       $FD
00088D5A ECF5                       	smpsPSGAlterVol     $F5
00088D5C 9106                       	dc.b	nE1, $06
00088D5E EC04                       	smpsPSGAlterVol     $04
00088D60 E701                       	dc.b	smpsNoAttack, $01
00088D62 EC07                       	smpsPSGAlterVol     $07
00088D64 8003                       	dc.b	nRst, $03
00088D66 ECF5                       	smpsPSGAlterVol     $F5
00088D68 9106                       	dc.b	nE1, $06
00088D6A EC04                       	smpsPSGAlterVol     $04
00088D6C E701                       	dc.b	smpsNoAttack, $01
00088D6E EC07                       	smpsPSGAlterVol     $07
00088D70 8006                       	dc.b	nRst, $06
00088D72 E100                       	smpsAlterNote       $00
00088D74 01                         	dc.b	$01
00088D75 E104                       	smpsAlterNote       $04
00088D77 01                         	dc.b	$01
00088D78 E103                       	smpsAlterNote       $03
00088D7A 01                         	dc.b	$01
00088D7B E1FD                       	smpsAlterNote       $FD
00088D7D 01                         	dc.b	$01
00088D7E ECF5                       	smpsPSGAlterVol     $F5
00088D80 9107                       	dc.b	nE1, $07
00088D82 EC0B                       	smpsPSGAlterVol     $0B
00088D84 8004                       	dc.b	nRst, $04
00088D86 ECF5                       	smpsPSGAlterVol     $F5
00088D88 9106                       	dc.b	nE1, $06
00088D8A EC0B                       	smpsPSGAlterVol     $0B
00088D8C 8007                       	dc.b	nRst, $07
00088D8E E103                       	smpsAlterNote       $03
00088D90 0101                       	dc.b	$01, $01
00088D92 E100                       	smpsAlterNote       $00
00088D94 01                         	dc.b	$01
00088D95 E1FA                       	smpsAlterNote       $FA
00088D97 01                         	dc.b	$01
00088D98 E1FD                       	smpsAlterNote       $FD
00088D9A ECF5                       	smpsPSGAlterVol     $F5
00088D9C 9106                       	dc.b	nE1, $06
00088D9E EC04                       	smpsPSGAlterVol     $04
00088DA0 E701                       	dc.b	smpsNoAttack, $01
00088DA2 EC07                       	smpsPSGAlterVol     $07
00088DA4 8003                       	dc.b	nRst, $03
00088DA6 ECF5                       	smpsPSGAlterVol     $F5
00088DA8 9106                       	dc.b	nE1, $06
00088DAA EC04                       	smpsPSGAlterVol     $04
00088DAC E701                       	dc.b	smpsNoAttack, $01
00088DAE EC07                       	smpsPSGAlterVol     $07
00088DB0 8003                       	dc.b	nRst, $03
00088DB2 ECF5                       	smpsPSGAlterVol     $F5
00088DB4 9207                       	dc.b	nF1, $07
00088DB6 EC0B                       	smpsPSGAlterVol     $0B
00088DB8 8006                       	dc.b	nRst, $06
00088DBA E100                       	smpsAlterNote       $00
00088DBC 01                         	dc.b	$01
00088DBD E104                       	smpsAlterNote       $04
00088DBF 01                         	dc.b	$01
00088DC0 E103                       	smpsAlterNote       $03
00088DC2 01                         	dc.b	$01
00088DC3 E1FD                       	smpsAlterNote       $FD
00088DC5 01                         	dc.b	$01
00088DC6 E1F9                       	smpsAlterNote       $F9
00088DC8 01                         	dc.b	$01
00088DC9 E1FD                       	smpsAlterNote       $FD
00088DCB 01                         	dc.b	$01
00088DCC E100                       	smpsAlterNote       $00
00088DCE 01                         	dc.b	$01
00088DCF E104                       	smpsAlterNote       $04
00088DD1 01                         	dc.b	$01
00088DD2 E1FD                       	smpsAlterNote       $FD
00088DD4 ECF5                       	smpsPSGAlterVol     $F5
00088DD6 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088DDA EC04                       	smpsPSGAlterVol     $04
00088DDC E701                       	dc.b	smpsNoAttack, $01
00088DDE EC07                       	smpsPSGAlterVol     $07
00088DE0 8009                       	dc.b	nRst, $09
00088DE2 E100                       	smpsAlterNote       $00
00088DE4 01                         	dc.b	$01
00088DE5 E104                       	smpsAlterNote       $04
00088DE7 01                         	dc.b	$01
00088DE8 E103                       	smpsAlterNote       $03
00088DEA 01                         	dc.b	$01
00088DEB E1FD                       	smpsAlterNote       $FD
00088DED 01                         	dc.b	$01
00088DEE E1F9                       	smpsAlterNote       $F9
00088DF0 01                         	dc.b	$01
00088DF1 E1FD                       	smpsAlterNote       $FD
00088DF3 01                         	dc.b	$01
00088DF4 E100                       	smpsAlterNote       $00
00088DF6 01                         	dc.b	$01
00088DF7 E104                       	smpsAlterNote       $04
00088DF9 01                         	dc.b	$01
00088DFA E100                       	smpsAlterNote       $00
00088DFC 01                         	dc.b	$01
00088DFD E1FA                       	smpsAlterNote       $FA
00088DFF 01                         	dc.b	$01
00088E00 E1F9                       	smpsAlterNote       $F9
00088E02 01                         	dc.b	$01
00088E03 E1FD                       	smpsAlterNote       $FD
00088E05 01                         	dc.b	$01
00088E06 E103                       	smpsAlterNote       $03
00088E08 0101                       	dc.b	$01, $01
00088E0A E100                       	smpsAlterNote       $00
00088E0C 01                         	dc.b	$01
00088E0D E1FD                       	smpsAlterNote       $FD
00088E0F ECF5                       	smpsPSGAlterVol     $F5
00088E11 9202                       	dc.b	nF1, $02
00088E13 EC04                       	smpsPSGAlterVol     $04
00088E15 E701                       	dc.b	smpsNoAttack, $01
00088E17 ECFC                       	smpsPSGAlterVol     $FC
00088E19 9106                       	dc.b	nE1, $06
00088E1B EC04                       	smpsPSGAlterVol     $04
00088E1D E701                       	dc.b	smpsNoAttack, $01
00088E1F EC07                       	smpsPSGAlterVol     $07
00088E21 8006                       	dc.b	nRst, $06
00088E23 E100                       	smpsAlterNote       $00
00088E25 01                         	dc.b	$01
00088E26 E104                       	smpsAlterNote       $04
00088E28 01                         	dc.b	$01
00088E29 E100                       	smpsAlterNote       $00
00088E2B 01                         	dc.b	$01
00088E2C E1FD                       	smpsAlterNote       $FD
00088E2E 01                         	dc.b	$01
00088E2F E1F9                       	smpsAlterNote       $F9
00088E31 01                         	dc.b	$01
00088E32 E1FD                       	smpsAlterNote       $FD
00088E34 01                         	dc.b	$01
00088E35 E103                       	smpsAlterNote       $03
00088E37 01                         	dc.b	$01
00088E38 E104                       	smpsAlterNote       $04
00088E3A 01                         	dc.b	$01
00088E3B E1FD                       	smpsAlterNote       $FD
00088E3D ECF5                       	smpsPSGAlterVol     $F5
00088E3F 9102                       	dc.b	nE1, $02
00088E41 EC04                       	smpsPSGAlterVol     $04
00088E43 E701                       	dc.b	smpsNoAttack, $01
00088E45 ECFC                       	smpsPSGAlterVol     $FC
00088E47 920D                       	dc.b	nF1, $0D
00088E49 E100                       	smpsAlterNote       $00
00088E4B E701                       	dc.b	smpsNoAttack, $01
00088E4D E104                       	smpsAlterNote       $04
00088E4F E701                       	dc.b	smpsNoAttack, $01
00088E51 E100                       	smpsAlterNote       $00
00088E53 E701                       	dc.b	smpsNoAttack, $01
00088E55 E1FD                       	smpsAlterNote       $FD
00088E57 E701                       	dc.b	smpsNoAttack, $01
00088E59 E1F9                       	smpsAlterNote       $F9
00088E5B E701                       	dc.b	smpsNoAttack, $01
00088E5D E1FD                       	smpsAlterNote       $FD
00088E5F E701                       	dc.b	smpsNoAttack, $01
00088E61 E103                       	smpsAlterNote       $03
00088E63 E701                       	dc.b	smpsNoAttack, $01
00088E65 E104                       	smpsAlterNote       $04
00088E67 E701                       	dc.b	smpsNoAttack, $01
00088E69 E100                       	smpsAlterNote       $00
00088E6B E701                       	dc.b	smpsNoAttack, $01
00088E6D E1FA                       	smpsAlterNote       $FA
00088E6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E73 E1FD                       	smpsAlterNote       $FD
00088E75 E701                       	dc.b	smpsNoAttack, $01
00088E77 E103                       	smpsAlterNote       $03
00088E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E7D E1FD                       	smpsAlterNote       $FD
00088E7F E701                       	dc.b	smpsNoAttack, $01
00088E81 E1F9                       	smpsAlterNote       $F9
00088E83 E701                       	dc.b	smpsNoAttack, $01
00088E85 E1FA                       	smpsAlterNote       $FA
00088E87 E701                       	dc.b	smpsNoAttack, $01
00088E89 E100                       	smpsAlterNote       $00
00088E8B EC04                       	smpsPSGAlterVol     $04
00088E8D E701                       	dc.b	smpsNoAttack, $01
00088E8F EC07                       	smpsPSGAlterVol     $07
00088E91 E104                       	smpsAlterNote       $04
00088E93 8001                       	dc.b	nRst, $01
00088E95 E100                       	smpsAlterNote       $00
00088E97 01                         	dc.b	$01
00088E98 E1FD                       	smpsAlterNote       $FD
00088E9A 01                         	dc.b	$01
00088E9B E1F9                       	smpsAlterNote       $F9
00088E9D 01                         	dc.b	$01
00088E9E E1FD                       	smpsAlterNote       $FD
00088EA0 01                         	dc.b	$01
00088EA1 E103                       	smpsAlterNote       $03
00088EA3 01                         	dc.b	$01
00088EA4 E104                       	smpsAlterNote       $04
00088EA6 01                         	dc.b	$01
00088EA7 E1FD                       	smpsAlterNote       $FD
00088EA9 ECF5                       	smpsPSGAlterVol     $F5
00088EAB 9106                       	dc.b	nE1, $06
00088EAD EC04                       	smpsPSGAlterVol     $04
00088EAF E701                       	dc.b	smpsNoAttack, $01
00088EB1 EC07                       	smpsPSGAlterVol     $07
00088EB3 8003                       	dc.b	nRst, $03
00088EB5 ECF5                       	smpsPSGAlterVol     $F5
00088EB7 9106                       	dc.b	nE1, $06
00088EB9 EC04                       	smpsPSGAlterVol     $04
00088EBB E701                       	dc.b	smpsNoAttack, $01
00088EBD EC07                       	smpsPSGAlterVol     $07
00088EBF 8006                       	dc.b	nRst, $06
00088EC1 E100                       	smpsAlterNote       $00
00088EC3 01                         	dc.b	$01
00088EC4 E104                       	smpsAlterNote       $04
00088EC6 01                         	dc.b	$01
00088EC7 E100                       	smpsAlterNote       $00
00088EC9 01                         	dc.b	$01
00088ECA E1FA                       	smpsAlterNote       $FA
00088ECC 01                         	dc.b	$01
00088ECD E1FD                       	smpsAlterNote       $FD
00088ECF ECF5                       	smpsPSGAlterVol     $F5
00088ED1 9206                       	dc.b	nF1, $06
00088ED3 EC04                       	smpsPSGAlterVol     $04
00088ED5 E701                       	dc.b	smpsNoAttack, $01
00088ED7 EC07                       	smpsPSGAlterVol     $07
00088ED9 8003                       	dc.b	nRst, $03
00088EDB ECF5                       	smpsPSGAlterVol     $F5
00088EDD 9207                       	dc.b	nF1, $07
00088EDF EC0B                       	smpsPSGAlterVol     $0B
00088EE1 8006                       	dc.b	nRst, $06
00088EE3 E100                       	smpsAlterNote       $00
00088EE5 01                         	dc.b	$01
00088EE6 E103                       	smpsAlterNote       $03
00088EE8 0101                       	dc.b	$01, $01
00088EEA E1FD                       	smpsAlterNote       $FD
00088EEC 01                         	dc.b	$01
00088EED ECF5                       	smpsPSGAlterVol     $F5
00088EEF 9107                       	dc.b	nE1, $07
00088EF1 EC0B                       	smpsPSGAlterVol     $0B
00088EF3 8004                       	dc.b	nRst, $04
00088EF5 ECF5                       	smpsPSGAlterVol     $F5
00088EF7 9106                       	dc.b	nE1, $06
00088EF9 EC04                       	smpsPSGAlterVol     $04
00088EFB E701                       	dc.b	smpsNoAttack, $01
00088EFD EC07                       	smpsPSGAlterVol     $07
00088EFF 8006                       	dc.b	nRst, $06
00088F01 E103                       	smpsAlterNote       $03
00088F03 01                         	dc.b	$01
00088F04 E104                       	smpsAlterNote       $04
00088F06 01                         	dc.b	$01
00088F07 E100                       	smpsAlterNote       $00
00088F09 01                         	dc.b	$01
00088F0A E1FA                       	smpsAlterNote       $FA
00088F0C 01                         	dc.b	$01
00088F0D E1FD                       	smpsAlterNote       $FD
00088F0F ECF5                       	smpsPSGAlterVol     $F5
00088F11 9106                       	dc.b	nE1, $06
00088F13 EC04                       	smpsPSGAlterVol     $04
00088F15 E701                       	dc.b	smpsNoAttack, $01
00088F17 EC07                       	smpsPSGAlterVol     $07
00088F19 8003                       	dc.b	nRst, $03
00088F1B ECF5                       	smpsPSGAlterVol     $F5
00088F1D 9106                       	dc.b	nE1, $06
00088F1F EC04                       	smpsPSGAlterVol     $04
00088F21 E701                       	dc.b	smpsNoAttack, $01
00088F23 EC07                       	smpsPSGAlterVol     $07
00088F25 8003                       	dc.b	nRst, $03
00088F27 ECF5                       	smpsPSGAlterVol     $F5
00088F29 9207                       	dc.b	nF1, $07
00088F2B EC0B                       	smpsPSGAlterVol     $0B
00088F2D 8006                       	dc.b	nRst, $06
00088F2F E100                       	smpsAlterNote       $00
00088F31 01                         	dc.b	$01
00088F32 E103                       	smpsAlterNote       $03
00088F34 0101                       	dc.b	$01, $01
00088F36 E1FD                       	smpsAlterNote       $FD
00088F38 01                         	dc.b	$01
00088F39 E1F9                       	smpsAlterNote       $F9
00088F3B 01                         	dc.b	$01
00088F3C E1FA                       	smpsAlterNote       $FA
00088F3E 01                         	dc.b	$01
00088F3F E100                       	smpsAlterNote       $00
00088F41 01                         	dc.b	$01
00088F42 E104                       	smpsAlterNote       $04
00088F44 01                         	dc.b	$01
00088F45 E1FD                       	smpsAlterNote       $FD
00088F47 ECF5                       	smpsPSGAlterVol     $F5
00088F49 9203 9203                  	dc.b	nF1, $03, nF1, $03
00088F4D EC04                       	smpsPSGAlterVol     $04
00088F4F E701                       	dc.b	smpsNoAttack, $01
00088F51 EC07                       	smpsPSGAlterVol     $07
00088F53 8009                       	dc.b	nRst, $09
00088F55 E100                       	smpsAlterNote       $00
00088F57 01                         	dc.b	$01
00088F58 E103                       	smpsAlterNote       $03
00088F5A 0101                       	dc.b	$01, $01
00088F5C E1FD                       	smpsAlterNote       $FD
00088F5E 01                         	dc.b	$01
00088F5F E1F9                       	smpsAlterNote       $F9
00088F61 01                         	dc.b	$01
00088F62 E1FA                       	smpsAlterNote       $FA
00088F64 01                         	dc.b	$01
00088F65 E100                       	smpsAlterNote       $00
00088F67 01                         	dc.b	$01
00088F68 E104                       	smpsAlterNote       $04
00088F6A 01                         	dc.b	$01
00088F6B E100                       	smpsAlterNote       $00
00088F6D 01                         	dc.b	$01
00088F6E E1FD                       	smpsAlterNote       $FD
00088F70 01                         	dc.b	$01
00088F71 E1F9                       	smpsAlterNote       $F9
00088F73 01                         	dc.b	$01
00088F74 E1FD                       	smpsAlterNote       $FD
00088F76 01                         	dc.b	$01
00088F77 E103                       	smpsAlterNote       $03
00088F79 01                         	dc.b	$01
00088F7A E104                       	smpsAlterNote       $04
00088F7C 01                         	dc.b	$01
00088F7D E100                       	smpsAlterNote       $00
00088F7F 01                         	dc.b	$01
00088F80 E1FD                       	smpsAlterNote       $FD
00088F82 ECF5                       	smpsPSGAlterVol     $F5
00088F84 9203 9106                  	dc.b	nF1, $03, nE1, $06
00088F88 EC04                       	smpsPSGAlterVol     $04
00088F8A E701                       	dc.b	smpsNoAttack, $01
00088F8C EC07                       	smpsPSGAlterVol     $07
00088F8E 8006                       	dc.b	nRst, $06
00088F90 E100                       	smpsAlterNote       $00
00088F92 01                         	dc.b	$01
00088F93 E104                       	smpsAlterNote       $04
00088F95 01                         	dc.b	$01
00088F96 E103                       	smpsAlterNote       $03
00088F98 01                         	dc.b	$01
00088F99 E1FD                       	smpsAlterNote       $FD
00088F9B 01                         	dc.b	$01
00088F9C E1F9                       	smpsAlterNote       $F9
00088F9E 01                         	dc.b	$01
00088F9F E1FD                       	smpsAlterNote       $FD
00088FA1 01                         	dc.b	$01
00088FA2 E100                       	smpsAlterNote       $00
00088FA4 01                         	dc.b	$01
00088FA5 E104                       	smpsAlterNote       $04
00088FA7 01                         	dc.b	$01
00088FA8 E1FD                       	smpsAlterNote       $FD
00088FAA ECF5                       	smpsPSGAlterVol     $F5
00088FAC 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00088FB0 E100                       	smpsAlterNote       $00
00088FB2 E701                       	dc.b	smpsNoAttack, $01
00088FB4 E104                       	smpsAlterNote       $04
00088FB6 E701                       	dc.b	smpsNoAttack, $01
00088FB8 E100                       	smpsAlterNote       $00
00088FBA E701                       	dc.b	smpsNoAttack, $01
00088FBC E1FD                       	smpsAlterNote       $FD
00088FBE E701                       	dc.b	smpsNoAttack, $01
00088FC0 E1F9                       	smpsAlterNote       $F9
00088FC2 E701                       	dc.b	smpsNoAttack, $01
00088FC4 E1FD                       	smpsAlterNote       $FD
00088FC6 E701                       	dc.b	smpsNoAttack, $01
00088FC8 E103                       	smpsAlterNote       $03
00088FCA E701                       	dc.b	smpsNoAttack, $01
00088FCC E104                       	smpsAlterNote       $04
00088FCE E701                       	dc.b	smpsNoAttack, $01
00088FD0 E100                       	smpsAlterNote       $00
00088FD2 E701                       	dc.b	smpsNoAttack, $01
00088FD4 E1FA                       	smpsAlterNote       $FA
00088FD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FDA E1FD                       	smpsAlterNote       $FD
00088FDC E701                       	dc.b	smpsNoAttack, $01
00088FDE E103                       	smpsAlterNote       $03
00088FE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FE4 E100                       	smpsAlterNote       $00
00088FE6 E701                       	dc.b	smpsNoAttack, $01
00088FE8 E1FA                       	smpsAlterNote       $FA
00088FEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FEE E100                       	smpsAlterNote       $00
00088FF0 EC04                       	smpsPSGAlterVol     $04
00088FF2 E701                       	dc.b	smpsNoAttack, $01
00088FF4 EC07                       	smpsPSGAlterVol     $07
00088FF6 E104                       	smpsAlterNote       $04
00088FF8 8001                       	dc.b	nRst, $01
00088FFA E103                       	smpsAlterNote       $03
00088FFC 01                         	dc.b	$01
00088FFD E1FD                       	smpsAlterNote       $FD
00088FFF 01                         	dc.b	$01
00089000 E1F9                       	smpsAlterNote       $F9
00089002 01                         	dc.b	$01
00089003 E1FD                       	smpsAlterNote       $FD
00089005 01                         	dc.b	$01
00089006 E100                       	smpsAlterNote       $00
00089008 01                         	dc.b	$01
00089009 E104                       	smpsAlterNote       $04
0008900B 01                         	dc.b	$01
0008900C E1FD                       	smpsAlterNote       $FD
0008900E ECF5                       	smpsPSGAlterVol     $F5
00089010 9106                       	dc.b	nE1, $06
00089012 EC04                       	smpsPSGAlterVol     $04
00089014 E701                       	dc.b	smpsNoAttack, $01
00089016 EC07                       	smpsPSGAlterVol     $07
00089018 8003                       	dc.b	nRst, $03
0008901A ECF5                       	smpsPSGAlterVol     $F5
0008901C 9106                       	dc.b	nE1, $06
0008901E EC04                       	smpsPSGAlterVol     $04
00089020 E701                       	dc.b	smpsNoAttack, $01
00089022 EC07                       	smpsPSGAlterVol     $07
00089024 8006                       	dc.b	nRst, $06
00089026 E100                       	smpsAlterNote       $00
00089028 01                         	dc.b	$01
00089029 E104                       	smpsAlterNote       $04
0008902B 01                         	dc.b	$01
0008902C E100                       	smpsAlterNote       $00
0008902E 01                         	dc.b	$01
0008902F E1FD                       	smpsAlterNote       $FD
00089031 01                         	dc.b	$01
00089032 ECF5                       	smpsPSGAlterVol     $F5
00089034 9206                       	dc.b	nF1, $06
00089036 EC04                       	smpsPSGAlterVol     $04
00089038 E701                       	dc.b	smpsNoAttack, $01
0008903A EC07                       	smpsPSGAlterVol     $07
0008903C 8003                       	dc.b	nRst, $03
0008903E ECF5                       	smpsPSGAlterVol     $F5
00089040 9207                       	dc.b	nF1, $07
00089042 EC0B                       	smpsPSGAlterVol     $0B
00089044 8007                       	dc.b	nRst, $07
00089046 E103                       	smpsAlterNote       $03
00089048 0101                       	dc.b	$01, $01
0008904A E1FD                       	smpsAlterNote       $FD
0008904C 01                         	dc.b	$01
0008904D E1FA                       	smpsAlterNote       $FA
0008904F 01                         	dc.b	$01
00089050 E1FD                       	smpsAlterNote       $FD
00089052 ECF5                       	smpsPSGAlterVol     $F5
00089054 9106                       	dc.b	nE1, $06
00089056 EC0B                       	smpsPSGAlterVol     $0B
00089058 8004                       	dc.b	nRst, $04
0008905A ECF5                       	smpsPSGAlterVol     $F5
0008905C 9106                       	dc.b	nE1, $06
0008905E EC04                       	smpsPSGAlterVol     $04
00089060 E701                       	dc.b	smpsNoAttack, $01
00089062 EC07                       	smpsPSGAlterVol     $07
00089064 8006                       	dc.b	nRst, $06
00089066 E100                       	smpsAlterNote       $00
00089068 01                         	dc.b	$01
00089069 E104                       	smpsAlterNote       $04
0008906B 01                         	dc.b	$01
0008906C E100                       	smpsAlterNote       $00
0008906E 01                         	dc.b	$01
0008906F E1FA                       	smpsAlterNote       $FA
00089071 01                         	dc.b	$01
00089072 E1FD                       	smpsAlterNote       $FD
00089074 ECF5                       	smpsPSGAlterVol     $F5
00089076 9206                       	dc.b	nF1, $06
00089078 EC04                       	smpsPSGAlterVol     $04
0008907A E701                       	dc.b	smpsNoAttack, $01
0008907C EC07                       	smpsPSGAlterVol     $07
0008907E 8003                       	dc.b	nRst, $03
00089080 ECF5                       	smpsPSGAlterVol     $F5
00089082 9206                       	dc.b	nF1, $06
00089084 EC04                       	smpsPSGAlterVol     $04
00089086 E701                       	dc.b	smpsNoAttack, $01
00089088 EC07                       	smpsPSGAlterVol     $07
0008908A 8006                       	dc.b	nRst, $06
0008908C E100                       	smpsAlterNote       $00
0008908E 01                         	dc.b	$01
0008908F E104                       	smpsAlterNote       $04
00089091 01                         	dc.b	$01
00089092 E103                       	smpsAlterNote       $03
00089094 01                         	dc.b	$01
00089095 E1FD                       	smpsAlterNote       $FD
00089097 01                         	dc.b	$01
00089098 ECF5                       	smpsPSGAlterVol     $F5
0008909A 9107                       	dc.b	nE1, $07
0008909C EC0B                       	smpsPSGAlterVol     $0B
0008909E 8004                       	dc.b	nRst, $04
000890A0 ECF5                       	smpsPSGAlterVol     $F5
000890A2 9106                       	dc.b	nE1, $06
000890A4 EC0B                       	smpsPSGAlterVol     $0B
000890A6 8007                       	dc.b	nRst, $07
000890A8 E103                       	smpsAlterNote       $03
000890AA 0101                       	dc.b	$01, $01
000890AC E100                       	smpsAlterNote       $00
000890AE 01                         	dc.b	$01
000890AF E1FA                       	smpsAlterNote       $FA
000890B1 01                         	dc.b	$01
000890B2 E1FD                       	smpsAlterNote       $FD
000890B4 ECF5                       	smpsPSGAlterVol     $F5
000890B6 9206                       	dc.b	nF1, $06
000890B8 EC04                       	smpsPSGAlterVol     $04
000890BA E701                       	dc.b	smpsNoAttack, $01
000890BC EC07                       	smpsPSGAlterVol     $07
000890BE 8003                       	dc.b	nRst, $03
000890C0 ECF5                       	smpsPSGAlterVol     $F5
000890C2 9206                       	dc.b	nF1, $06
000890C4 EC04                       	smpsPSGAlterVol     $04
000890C6 E701                       	dc.b	smpsNoAttack, $01
000890C8 EC07                       	smpsPSGAlterVol     $07
000890CA 8006                       	dc.b	nRst, $06
000890CC E100                       	smpsAlterNote       $00
000890CE 01                         	dc.b	$01
000890CF E104                       	smpsAlterNote       $04
000890D1 01                         	dc.b	$01
000890D2 E100                       	smpsAlterNote       $00
000890D4 01                         	dc.b	$01
000890D5 E1FD                       	smpsAlterNote       $FD
000890D7 01                         	dc.b	$01
000890D8 ECF5                       	smpsPSGAlterVol     $F5
000890DA 9106                       	dc.b	nE1, $06
000890DC EC04                       	smpsPSGAlterVol     $04
000890DE E701                       	dc.b	smpsNoAttack, $01
000890E0 EC07                       	smpsPSGAlterVol     $07
000890E2 8003                       	dc.b	nRst, $03
000890E4 ECF5                       	smpsPSGAlterVol     $F5
000890E6 9107 9106                  	dc.b	nE1, $07, nE1, $06
000890EA EC04                       	smpsPSGAlterVol     $04
000890EC E701                       	dc.b	smpsNoAttack, $01
000890EE ECFC                       	smpsPSGAlterVol     $FC
000890F0 9103                       	dc.b	nE1, $03
000890F2 EC04                       	smpsPSGAlterVol     $04
000890F4 E701                       	dc.b	smpsNoAttack, $01
000890F6 ECFC                       	smpsPSGAlterVol     $FC
000890F8 9102                       	dc.b	nE1, $02
000890FA EC04                       	smpsPSGAlterVol     $04
000890FC E701                       	dc.b	smpsNoAttack, $01
000890FE ECFC                       	smpsPSGAlterVol     $FC
00089100 9103                       	dc.b	nE1, $03
00089102 EC0B                       	smpsPSGAlterVol     $0B
00089104 800A                       	dc.b	nRst, $0A
00089106 E100                       	smpsAlterNote       $00
00089108 01                         	dc.b	$01
00089109 E104                       	smpsAlterNote       $04
0008910B 01                         	dc.b	$01
0008910C E100                       	smpsAlterNote       $00
0008910E 01                         	dc.b	$01
0008910F E1FA                       	smpsAlterNote       $FA
00089111 01                         	dc.b	$01
00089112 E1F9                       	smpsAlterNote       $F9
00089114 01                         	dc.b	$01
00089115 E1FD                       	smpsAlterNote       $FD
00089117 01                         	dc.b	$01
00089118 E103                       	smpsAlterNote       $03
0008911A 0101                       	dc.b	$01, $01
0008911C E100                       	smpsAlterNote       $00
0008911E 01                         	dc.b	$01
0008911F E1FA                       	smpsAlterNote       $FA
00089121 0101                       	dc.b	$01, $01
00089123 E1FD                       	smpsAlterNote       $FD
00089125 ECF5                       	smpsPSGAlterVol     $F5
00089127 9206                       	dc.b	nF1, $06
00089129 EC04                       	smpsPSGAlterVol     $04
0008912B E704                       	dc.b	smpsNoAttack, $04
0008912D ECFC                       	smpsPSGAlterVol     $FC
0008912F 9206                       	dc.b	nF1, $06
00089131 EC04                       	smpsPSGAlterVol     $04
00089133 E701                       	dc.b	smpsNoAttack, $01
00089135 EC07                       	smpsPSGAlterVol     $07
00089137 8006                       	dc.b	nRst, $06
00089139 E100                       	smpsAlterNote       $00
0008913B 01                         	dc.b	$01
0008913C E104                       	smpsAlterNote       $04
0008913E 01                         	dc.b	$01
0008913F E103                       	smpsAlterNote       $03
00089141 01                         	dc.b	$01
00089142 E1FD                       	smpsAlterNote       $FD
00089144 01                         	dc.b	$01
00089145 ECF5                       	smpsPSGAlterVol     $F5
00089147 9407                       	dc.b	nG1, $07
00089149 EC0B                       	smpsPSGAlterVol     $0B
0008914B 8004                       	dc.b	nRst, $04
0008914D ECF5                       	smpsPSGAlterVol     $F5
0008914F 9406                       	dc.b	nG1, $06
00089151 EC0B                       	smpsPSGAlterVol     $0B
00089153 8007                       	dc.b	nRst, $07
00089155 E103                       	smpsAlterNote       $03
00089157 0101                       	dc.b	$01, $01
00089159 E1FD                       	smpsAlterNote       $FD
0008915B 01                         	dc.b	$01
0008915C E1F9                       	smpsAlterNote       $F9
0008915E 01                         	dc.b	$01
0008915F E1FD                       	smpsAlterNote       $FD
00089161 ECF5                       	smpsPSGAlterVol     $F5
00089163 9206                       	dc.b	nF1, $06
00089165 EC04                       	smpsPSGAlterVol     $04
00089167 E701                       	dc.b	smpsNoAttack, $01
00089169 EC07                       	smpsPSGAlterVol     $07
0008916B 8003                       	dc.b	nRst, $03
0008916D ECF5                       	smpsPSGAlterVol     $F5
0008916F 9206                       	dc.b	nF1, $06
00089171 EC04                       	smpsPSGAlterVol     $04
00089173 E701                       	dc.b	smpsNoAttack, $01
00089175 EC07                       	smpsPSGAlterVol     $07
00089177 8006                       	dc.b	nRst, $06
00089179 E100                       	smpsAlterNote       $00
0008917B 01                         	dc.b	$01
0008917C E104                       	smpsAlterNote       $04
0008917E 01                         	dc.b	$01
0008917F E100                       	smpsAlterNote       $00
00089181 01                         	dc.b	$01
00089182 E1FA                       	smpsAlterNote       $FA
00089184 01                         	dc.b	$01
00089185 E1FD                       	smpsAlterNote       $FD
00089187 ECF5                       	smpsPSGAlterVol     $F5
00089189 9206                       	dc.b	nF1, $06
0008918B EC04                       	smpsPSGAlterVol     $04
0008918D E701                       	dc.b	smpsNoAttack, $01
0008918F EC07                       	smpsPSGAlterVol     $07
00089191 8003                       	dc.b	nRst, $03
00089193 ECF5                       	smpsPSGAlterVol     $F5
00089195 9107                       	dc.b	nE1, $07
00089197 EC0B                       	smpsPSGAlterVol     $0B
00089199 8006                       	dc.b	nRst, $06
0008919B E100                       	smpsAlterNote       $00
0008919D 01                         	dc.b	$01
0008919E E103                       	smpsAlterNote       $03
000891A0 0101                       	dc.b	$01, $01
000891A2 E1FD                       	smpsAlterNote       $FD
000891A4 01                         	dc.b	$01
000891A5 ECF5                       	smpsPSGAlterVol     $F5
000891A7 9207                       	dc.b	nF1, $07
000891A9 EC0B                       	smpsPSGAlterVol     $0B
000891AB 8004                       	dc.b	nRst, $04
000891AD ECF5                       	smpsPSGAlterVol     $F5
000891AF 9206                       	dc.b	nF1, $06
000891B1 EC04                       	smpsPSGAlterVol     $04
000891B3 E701                       	dc.b	smpsNoAttack, $01
000891B5 EC07                       	smpsPSGAlterVol     $07
000891B7 8006                       	dc.b	nRst, $06
000891B9 E103                       	smpsAlterNote       $03
000891BB 01                         	dc.b	$01
000891BC E104                       	smpsAlterNote       $04
000891BE 01                         	dc.b	$01
000891BF E100                       	smpsAlterNote       $00
000891C1 01                         	dc.b	$01
000891C2 E1FB                       	smpsAlterNote       $FB
000891C4 01                         	dc.b	$01
000891C5 E1FD                       	smpsAlterNote       $FD
000891C7 ECF5                       	smpsPSGAlterVol     $F5
000891C9 9406                       	dc.b	nG1, $06
000891CB EC04                       	smpsPSGAlterVol     $04
000891CD E701                       	dc.b	smpsNoAttack, $01
000891CF EC07                       	smpsPSGAlterVol     $07
000891D1 8003                       	dc.b	nRst, $03
000891D3 ECF5                       	smpsPSGAlterVol     $F5
000891D5 9406                       	dc.b	nG1, $06
000891D7 EC04                       	smpsPSGAlterVol     $04
000891D9 E701                       	dc.b	smpsNoAttack, $01
000891DB EC07                       	smpsPSGAlterVol     $07
000891DD 8006                       	dc.b	nRst, $06
000891DF E100                       	smpsAlterNote       $00
000891E1 01                         	dc.b	$01
000891E2 E104                       	smpsAlterNote       $04
000891E4 01                         	dc.b	$01
000891E5 E100                       	smpsAlterNote       $00
000891E7 01                         	dc.b	$01
000891E8 E1FD                       	smpsAlterNote       $FD
000891EA 01                         	dc.b	$01
000891EB ECF5                       	smpsPSGAlterVol     $F5
000891ED 9206                       	dc.b	nF1, $06
000891EF EC04                       	smpsPSGAlterVol     $04
000891F1 E701                       	dc.b	smpsNoAttack, $01
000891F3 EC07                       	smpsPSGAlterVol     $07
000891F5 8003                       	dc.b	nRst, $03
000891F7 ECF5                       	smpsPSGAlterVol     $F5
000891F9 9207                       	dc.b	nF1, $07
000891FB EC0B                       	smpsPSGAlterVol     $0B
000891FD 8007                       	dc.b	nRst, $07
000891FF E103                       	smpsAlterNote       $03
00089201 0101                       	dc.b	$01, $01
00089203 E1FD                       	smpsAlterNote       $FD
00089205 01                         	dc.b	$01
00089206 E1FA                       	smpsAlterNote       $FA
00089208 01                         	dc.b	$01
00089209 E1FD                       	smpsAlterNote       $FD
0008920B ECF5                       	smpsPSGAlterVol     $F5
0008920D 9206                       	dc.b	nF1, $06
0008920F EC0B                       	smpsPSGAlterVol     $0B
00089211 8004                       	dc.b	nRst, $04
00089213 ECF5                       	smpsPSGAlterVol     $F5
00089215 9206                       	dc.b	nF1, $06
00089217 EC04                       	smpsPSGAlterVol     $04
00089219 E701                       	dc.b	smpsNoAttack, $01
0008921B EC07                       	smpsPSGAlterVol     $07
0008921D 8006                       	dc.b	nRst, $06
0008921F E100                       	smpsAlterNote       $00
00089221 01                         	dc.b	$01
00089222 E104                       	smpsAlterNote       $04
00089224 01                         	dc.b	$01
00089225 E100                       	smpsAlterNote       $00
00089227 01                         	dc.b	$01
00089228 E1FA                       	smpsAlterNote       $FA
0008922A 01                         	dc.b	$01
0008922B E1FD                       	smpsAlterNote       $FD
0008922D ECF5                       	smpsPSGAlterVol     $F5
0008922F 9206                       	dc.b	nF1, $06
00089231 EC04                       	smpsPSGAlterVol     $04
00089233 E701                       	dc.b	smpsNoAttack, $01
00089235 EC07                       	smpsPSGAlterVol     $07
00089237 8003                       	dc.b	nRst, $03
00089239 ECF5                       	smpsPSGAlterVol     $F5
0008923B 9207                       	dc.b	nF1, $07
0008923D EC0B                       	smpsPSGAlterVol     $0B
0008923F 8006                       	dc.b	nRst, $06
00089241 E100                       	smpsAlterNote       $00
00089243 01                         	dc.b	$01
00089244 E103                       	smpsAlterNote       $03
00089246 0101                       	dc.b	$01, $01
00089248 E1FD                       	smpsAlterNote       $FD
0008924A 01                         	dc.b	$01
0008924B ECF5                       	smpsPSGAlterVol     $F5
0008924D 9207                       	dc.b	nF1, $07
0008924F EC0B                       	smpsPSGAlterVol     $0B
00089251 8004                       	dc.b	nRst, $04
00089253 ECF5                       	smpsPSGAlterVol     $F5
00089255 9206                       	dc.b	nF1, $06
00089257 EC0B                       	smpsPSGAlterVol     $0B
00089259 8007                       	dc.b	nRst, $07
0008925B E103                       	smpsAlterNote       $03
0008925D 0101                       	dc.b	$01, $01
0008925F E100                       	smpsAlterNote       $00
00089261 01                         	dc.b	$01
00089262 E1FA                       	smpsAlterNote       $FA
00089264 01                         	dc.b	$01
00089265 E1FD                       	smpsAlterNote       $FD
00089267 ECF5                       	smpsPSGAlterVol     $F5
00089269 9206                       	dc.b	nF1, $06
0008926B EC04                       	smpsPSGAlterVol     $04
0008926D E701                       	dc.b	smpsNoAttack, $01
0008926F EC07                       	smpsPSGAlterVol     $07
00089271 8003                       	dc.b	nRst, $03
00089273 ECF5                       	smpsPSGAlterVol     $F5
00089275 9206                       	dc.b	nF1, $06
00089277 EC04                       	smpsPSGAlterVol     $04
00089279 E701                       	dc.b	smpsNoAttack, $01
0008927B EC07                       	smpsPSGAlterVol     $07
0008927D 8006                       	dc.b	nRst, $06
0008927F E100                       	smpsAlterNote       $00
00089281 01                         	dc.b	$01
00089282 E104                       	smpsAlterNote       $04
00089284 01                         	dc.b	$01
00089285 E100                       	smpsAlterNote       $00
00089287 01                         	dc.b	$01
00089288 E1FD                       	smpsAlterNote       $FD
0008928A 01                         	dc.b	$01
0008928B ECF5                       	smpsPSGAlterVol     $F5
0008928D 9206                       	dc.b	nF1, $06
0008928F EC04                       	smpsPSGAlterVol     $04
00089291 E701                       	dc.b	smpsNoAttack, $01
00089293 EC07                       	smpsPSGAlterVol     $07
00089295 8003                       	dc.b	nRst, $03
00089297 ECF5                       	smpsPSGAlterVol     $F5
00089299 9207                       	dc.b	nF1, $07
0008929B EC0B                       	smpsPSGAlterVol     $0B
0008929D 8007                       	dc.b	nRst, $07
0008929F E104                       	smpsAlterNote       $04
000892A1 0101                       	dc.b	$01, $01
000892A3 E1FB                       	smpsAlterNote       $FB
000892A5 01                         	dc.b	$01
000892A6 E1F6                       	smpsAlterNote       $F6
000892A8 0101                       	dc.b	$01, $01
000892AA E1FF                       	smpsAlterNote       $FF
000892AC 01                         	dc.b	$01
000892AD E105                       	smpsAlterNote       $05
000892AF 01                         	dc.b	$01
000892B0 E104                       	smpsAlterNote       $04
000892B2 01                         	dc.b	$01
000892B3 E1FB                       	smpsAlterNote       $FB
000892B5 01                         	dc.b	$01
000892B6 E1F5                       	smpsAlterNote       $F5
000892B8 01                         	dc.b	$01
000892B9 E1FC                       	smpsAlterNote       $FC
000892BB ECF5                       	smpsPSGAlterVol     $F5
000892BD 8B0E                       	dc.b	nBb0, $0E
000892BF E102                       	smpsAlterNote       $02
000892C1 EC0B                       	smpsPSGAlterVol     $0B
000892C3 8001                       	dc.b	nRst, $01
000892C5 E101                       	smpsAlterNote       $01
000892C7 01                         	dc.b	$01
000892C8 E1FC                       	smpsAlterNote       $FC
000892CA 01                         	dc.b	$01
000892CB E1F9                       	smpsAlterNote       $F9
000892CD 0101                       	dc.b	$01, $01
000892CF E1FF                       	smpsAlterNote       $FF
000892D1 01                         	dc.b	$01
000892D2 E102                       	smpsAlterNote       $02
000892D4 01                         	dc.b	$01
000892D5 E1FF                       	smpsAlterNote       $FF
000892D7 01                         	dc.b	$01
000892D8 E1FC                       	smpsAlterNote       $FC
000892DA 01                         	dc.b	$01
000892DB E1F8                       	smpsAlterNote       $F8
000892DD 01                         	dc.b	$01
000892DE E1FC                       	smpsAlterNote       $FC
000892E0 01                         	dc.b	$01
000892E1 E101                       	smpsAlterNote       $01
000892E3 01                         	dc.b	$01
000892E4 E102                       	smpsAlterNote       $02
000892E6 01                         	dc.b	$01
000892E7 E1FF                       	smpsAlterNote       $FF
000892E9 01                         	dc.b	$01
000892EA E1FB                       	smpsAlterNote       $FB
000892EC ECF5                       	smpsPSGAlterVol     $F5
000892EE 8D0D                       	dc.b	nC1, $0D
000892F0 E101                       	smpsAlterNote       $01
000892F2 EC0B                       	smpsPSGAlterVol     $0B
000892F4 8001                       	dc.b	nRst, $01
000892F6 E102                       	smpsAlterNote       $02
000892F8 01                         	dc.b	$01
000892F9 E1FF                       	smpsAlterNote       $FF
000892FB 01                         	dc.b	$01
000892FC E1F9                       	smpsAlterNote       $F9
000892FE 0101                       	dc.b	$01, $01
00089300 E1FC                       	smpsAlterNote       $FC
00089302 01                         	dc.b	$01
00089303 E101                       	smpsAlterNote       $01
00089305 0101                       	dc.b	$01, $01
00089307 E1FC                       	smpsAlterNote       $FC
00089309 01                         	dc.b	$01
0008930A E1F9                       	smpsAlterNote       $F9
0008930C 0101                       	dc.b	$01, $01
0008930E E1FF                       	smpsAlterNote       $FF
00089310 01                         	dc.b	$01
00089311 E102                       	smpsAlterNote       $02
00089313 01                         	dc.b	$01
00089314 E101                       	smpsAlterNote       $01
00089316 01                         	dc.b	$01
00089317 E1FC                       	smpsAlterNote       $FC
00089319 ECF5                       	smpsPSGAlterVol     $F5
0008931B 8F0D                       	dc.b	nD1, $0D
0008931D E1FF                       	smpsAlterNote       $FF
0008931F EC04                       	smpsPSGAlterVol     $04
00089321 E701                       	dc.b	smpsNoAttack, $01
00089323 EC07                       	smpsPSGAlterVol     $07
00089325 E103                       	smpsAlterNote       $03
00089327 8001                       	dc.b	nRst, $01
00089329 E102                       	smpsAlterNote       $02
0008932B 01                         	dc.b	$01
0008932C E1FD                       	smpsAlterNote       $FD
0008932E 01                         	dc.b	$01
0008932F E1F9                       	smpsAlterNote       $F9
00089331 01                         	dc.b	$01
00089332 E1FD                       	smpsAlterNote       $FD
00089334 01                         	dc.b	$01
00089335 E100                       	smpsAlterNote       $00
00089337 01                         	dc.b	$01
00089338 E103                       	smpsAlterNote       $03
0008933A 01                         	dc.b	$01
0008933B E100                       	smpsAlterNote       $00
0008933D 01                         	dc.b	$01
0008933E E1FA                       	smpsAlterNote       $FA
00089340 01                         	dc.b	$01
00089341 E1F9                       	smpsAlterNote       $F9
00089343 01                         	dc.b	$01
00089344 E1FD                       	smpsAlterNote       $FD
00089346 01                         	dc.b	$01
00089347 E102                       	smpsAlterNote       $02
00089349 0101                       	dc.b	$01, $01
0008934B E100                       	smpsAlterNote       $00
0008934D 01                         	dc.b	$01
0008934E E1FD                       	smpsAlterNote       $FD
00089350 ECF5                       	smpsPSGAlterVol     $F5
00089352 910D                       	dc.b	nE1, $0D
00089354 E103                       	smpsAlterNote       $03
00089356 EC0B                       	smpsPSGAlterVol     $0B
00089358 8001 01                    	dc.b	nRst, $01, $01
0008935B E100                       	smpsAlterNote       $00
0008935D 01                         	dc.b	$01
0008935E E1FA                       	smpsAlterNote       $FA
00089360 0101                       	dc.b	$01, $01
00089362 E100                       	smpsAlterNote       $00
00089364 01                         	dc.b	$01
00089365 E103                       	smpsAlterNote       $03
00089367 01                         	dc.b	$01
00089368 E1FD                       	smpsAlterNote       $FD
0008936A ECF5                       	smpsPSGAlterVol     $F5
0008936C 9206                       	dc.b	nF1, $06
0008936E EC04                       	smpsPSGAlterVol     $04
00089370 E701                       	dc.b	smpsNoAttack, $01
00089372 EC07                       	smpsPSGAlterVol     $07
00089374 8003                       	dc.b	nRst, $03
00089376 ECF5                       	smpsPSGAlterVol     $F5
00089378 9207                       	dc.b	nF1, $07
0008937A EC0B                       	smpsPSGAlterVol     $0B
0008937C 8006                       	dc.b	nRst, $06
0008937E E100                       	smpsAlterNote       $00
00089380 01                         	dc.b	$01
00089381 E103                       	smpsAlterNote       $03
00089383 0101                       	dc.b	$01, $01
00089385 E1FD                       	smpsAlterNote       $FD
00089387 01                         	dc.b	$01
00089388 ECF5                       	smpsPSGAlterVol     $F5
0008938A 9407                       	dc.b	nG1, $07
0008938C EC0B                       	smpsPSGAlterVol     $0B
0008938E 8004                       	dc.b	nRst, $04
00089390 ECF5                       	smpsPSGAlterVol     $F5
00089392 9406                       	dc.b	nG1, $06
00089394 EC04                       	smpsPSGAlterVol     $04
00089396 E701                       	dc.b	smpsNoAttack, $01
00089398 EC07                       	smpsPSGAlterVol     $07
0008939A 8006                       	dc.b	nRst, $06
0008939C E103                       	smpsAlterNote       $03
0008939E 01                         	dc.b	$01
0008939F E104                       	smpsAlterNote       $04
000893A1 01                         	dc.b	$01
000893A2 E100                       	smpsAlterNote       $00
000893A4 01                         	dc.b	$01
000893A5 E1F9                       	smpsAlterNote       $F9
000893A7 01                         	dc.b	$01
000893A8 E1FD                       	smpsAlterNote       $FD
000893AA ECF5                       	smpsPSGAlterVol     $F5
000893AC 9206                       	dc.b	nF1, $06
000893AE EC04                       	smpsPSGAlterVol     $04
000893B0 E701                       	dc.b	smpsNoAttack, $01
000893B2 EC07                       	smpsPSGAlterVol     $07
000893B4 8003                       	dc.b	nRst, $03
000893B6 ECF5                       	smpsPSGAlterVol     $F5
000893B8 9206                       	dc.b	nF1, $06
000893BA EC04                       	smpsPSGAlterVol     $04
000893BC E701                       	dc.b	smpsNoAttack, $01
000893BE EC07                       	smpsPSGAlterVol     $07
000893C0 8006                       	dc.b	nRst, $06
000893C2 E100                       	smpsAlterNote       $00
000893C4 01                         	dc.b	$01
000893C5 E104                       	smpsAlterNote       $04
000893C7 01                         	dc.b	$01
000893C8 E103                       	smpsAlterNote       $03
000893CA 01                         	dc.b	$01
000893CB E1FD                       	smpsAlterNote       $FD
000893CD 01                         	dc.b	$01
000893CE ECF5                       	smpsPSGAlterVol     $F5
000893D0 9407                       	dc.b	nG1, $07
000893D2 EC0B                       	smpsPSGAlterVol     $0B
000893D4 8004                       	dc.b	nRst, $04
000893D6 ECF5                       	smpsPSGAlterVol     $F5
000893D8 9406                       	dc.b	nG1, $06
000893DA EC0B                       	smpsPSGAlterVol     $0B
000893DC 8007                       	dc.b	nRst, $07
000893DE E103                       	smpsAlterNote       $03
000893E0 0101                       	dc.b	$01, $01
000893E2 E100                       	smpsAlterNote       $00
000893E4 01                         	dc.b	$01
000893E5 E1F9                       	smpsAlterNote       $F9
000893E7 01                         	dc.b	$01
000893E8 E1FD                       	smpsAlterNote       $FD
000893EA ECF5                       	smpsPSGAlterVol     $F5
000893EC 9206                       	dc.b	nF1, $06
000893EE EC04                       	smpsPSGAlterVol     $04
000893F0 E701                       	dc.b	smpsNoAttack, $01
000893F2 EC07                       	smpsPSGAlterVol     $07
000893F4 8003                       	dc.b	nRst, $03
000893F6 ECF5                       	smpsPSGAlterVol     $F5
000893F8 9206                       	dc.b	nF1, $06
000893FA EC04                       	smpsPSGAlterVol     $04
000893FC E701                       	dc.b	smpsNoAttack, $01
000893FE EC07                       	smpsPSGAlterVol     $07
00089400 8006                       	dc.b	nRst, $06
00089402 E100                       	smpsAlterNote       $00
00089404 01                         	dc.b	$01
00089405 E104                       	smpsAlterNote       $04
00089407 01                         	dc.b	$01
00089408 E100                       	smpsAlterNote       $00
0008940A 01                         	dc.b	$01
0008940B E1FB                       	smpsAlterNote       $FB
0008940D 01                         	dc.b	$01
0008940E E1FD                       	smpsAlterNote       $FD
00089410 ECF5                       	smpsPSGAlterVol     $F5
00089412 9406                       	dc.b	nG1, $06
00089414 EC04                       	smpsPSGAlterVol     $04
00089416 E701                       	dc.b	smpsNoAttack, $01
00089418 EC07                       	smpsPSGAlterVol     $07
0008941A 8003                       	dc.b	nRst, $03
0008941C ECF5                       	smpsPSGAlterVol     $F5
0008941E 9407                       	dc.b	nG1, $07
00089420 EC0B                       	smpsPSGAlterVol     $0B
00089422 8006                       	dc.b	nRst, $06
00089424 E100                       	smpsAlterNote       $00
00089426 01                         	dc.b	$01
00089427 E103                       	smpsAlterNote       $03
00089429 0101                       	dc.b	$01, $01
0008942B E1FD                       	smpsAlterNote       $FD
0008942D 01                         	dc.b	$01
0008942E ECF5                       	smpsPSGAlterVol     $F5
00089430 9207                       	dc.b	nF1, $07
00089432 EC0B                       	smpsPSGAlterVol     $0B
00089434 8004                       	dc.b	nRst, $04
00089436 ECF5                       	smpsPSGAlterVol     $F5
00089438 9206                       	dc.b	nF1, $06
0008943A EC04                       	smpsPSGAlterVol     $04
0008943C E701                       	dc.b	smpsNoAttack, $01
0008943E ECFC                       	smpsPSGAlterVol     $FC
00089440 E1FC                       	smpsAlterNote       $FC
00089442 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00089446 EC04                       	smpsPSGAlterVol     $04
00089448 E701                       	dc.b	smpsNoAttack, $01
0008944A ECFC                       	smpsPSGAlterVol     $FC
0008944C 9003                       	dc.b	nEb1, $03
0008944E E1FD                       	smpsAlterNote       $FD
00089450 9403                       	dc.b	nG1, $03
00089452 EC04                       	smpsPSGAlterVol     $04
00089454 E701                       	dc.b	smpsNoAttack, $01
00089456 E1FE                       	smpsAlterNote       $FE
00089458 ECFC                       	smpsPSGAlterVol     $FC
0008945A 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008945E EC04                       	smpsPSGAlterVol     $04
00089460 E701                       	dc.b	smpsNoAttack, $01
00089462 EC07                       	smpsPSGAlterVol     $07
00089464 8009                       	dc.b	nRst, $09
00089466 E100                       	smpsAlterNote       $00
00089468 01                         	dc.b	$01
00089469 F6F5 19                    	smpsJump            music84_Jump07
0008946C                            
0008946C                            ; PSG2 Data
0008946C                            music84_PSG2:
0008946C E1FC                       	smpsAlterNote       $FC
0008946E EC04                       	smpsPSGAlterVol     $04
00089470 8F03                       	dc.b	nD1, $03
00089472 E1FD                       	smpsAlterNote       $FD
00089474 9203                       	dc.b	nF1, $03
00089476 EC04                       	smpsPSGAlterVol     $04
00089478 E701                       	dc.b	smpsNoAttack, $01
0008947A E1FE                       	smpsAlterNote       $FE
0008947C ECFC                       	smpsPSGAlterVol     $FC
0008947E 9603                       	dc.b	nA1, $03
00089480 E1FD                       	smpsAlterNote       $FD
00089482 9103                       	dc.b	nE1, $03
00089484 EC04                       	smpsPSGAlterVol     $04
00089486 E701                       	dc.b	smpsNoAttack, $01
00089488 ECFC                       	smpsPSGAlterVol     $FC
0008948A 9403                       	dc.b	nG1, $03
0008948C E1FE                       	smpsAlterNote       $FE
0008948E 9703                       	dc.b	nBb1, $03
00089490 EC04                       	smpsPSGAlterVol     $04
00089492 E701                       	dc.b	smpsNoAttack, $01
00089494 E1FF                       	smpsAlterNote       $FF
00089496 ECFC                       	smpsPSGAlterVol     $FC
00089498 9B02                       	dc.b	nD2, $02
0008949A EC04                       	smpsPSGAlterVol     $04
0008949C E701                       	dc.b	smpsNoAttack, $01
0008949E ECFC                       	smpsPSGAlterVol     $FC
000894A0 E1FE                       	smpsAlterNote       $FE
000894A2 9A03                       	dc.b	nCs2, $03
000894A4 EC0B                       	smpsPSGAlterVol     $0B
000894A6 800A                       	dc.b	nRst, $0A
000894A8 E102                       	smpsAlterNote       $02
000894AA 01                         	dc.b	$01
000894AB E10A                       	smpsAlterNote       $0A
000894AD 01                         	dc.b	$01
000894AE E102                       	smpsAlterNote       $02
000894B0 01                         	dc.b	$01
000894B1 E1FC                       	smpsAlterNote       $FC
000894B3 01                         	dc.b	$01
000894B4 E10A                       	smpsAlterNote       $0A
000894B6 01                         	dc.b	$01
000894B7 E1FC                       	smpsAlterNote       $FC
000894B9 01                         	dc.b	$01
000894BA E108                       	smpsAlterNote       $08
000894BC 01                         	dc.b	$01
000894BD E10A                       	smpsAlterNote       $0A
000894BF 01                         	dc.b	$01
000894C0 E102                       	smpsAlterNote       $02
000894C2 01                         	dc.b	$01
000894C3 E1F7                       	smpsAlterNote       $F7
000894C5 0101                       	dc.b	$01, $01
000894C7 E102                       	smpsAlterNote       $02
000894C9 01                         	dc.b	$01
000894CA E108                       	smpsAlterNote       $08
000894CC 0101                       	dc.b	$01, $01
000894CE E1FC                       	smpsAlterNote       $FC
000894D0 01                         	dc.b	$01
000894D1 E10A                       	smpsAlterNote       $0A
000894D3 01                         	dc.b	$01
000894D4 E1F7                       	smpsAlterNote       $F7
000894D6 01                         	dc.b	$01
000894D7 E102                       	smpsAlterNote       $02
000894D9 01                         	dc.b	$01
000894DA E10A                       	smpsAlterNote       $0A
000894DC 01                         	dc.b	$01
000894DD E102                       	smpsAlterNote       $02
000894DF 01                         	dc.b	$01
000894E0 E1FC                       	smpsAlterNote       $FC
000894E2 01                         	dc.b	$01
000894E3                            
000894E3                            music84_Jump06:
000894E3 E10A                       	smpsAlterNote       $0A
000894E5 8001                       	dc.b	nRst, $01
000894E7 E1FC                       	smpsAlterNote       $FC
000894E9 01                         	dc.b	$01
000894EA E108                       	smpsAlterNote       $08
000894EC 01                         	dc.b	$01
000894ED E10A                       	smpsAlterNote       $0A
000894EF 01                         	dc.b	$01
000894F0 E1FC                       	smpsAlterNote       $FC
000894F2 ECF5                       	smpsPSGAlterVol     $F5
000894F4 8F06                       	dc.b	nD1, $06
000894F6 EC04                       	smpsPSGAlterVol     $04
000894F8 E701                       	dc.b	smpsNoAttack, $01
000894FA EC07                       	smpsPSGAlterVol     $07
000894FC 8003                       	dc.b	nRst, $03
000894FE ECF5                       	smpsPSGAlterVol     $F5
00089500 8F06                       	dc.b	nD1, $06
00089502 EC04                       	smpsPSGAlterVol     $04
00089504 E701                       	dc.b	smpsNoAttack, $01
00089506 EC07                       	smpsPSGAlterVol     $07
00089508 8006                       	dc.b	nRst, $06
0008950A E1FF                       	smpsAlterNote       $FF
0008950C 01                         	dc.b	$01
0008950D E102                       	smpsAlterNote       $02
0008950F 01                         	dc.b	$01
00089510 E1FF                       	smpsAlterNote       $FF
00089512 01                         	dc.b	$01
00089513 E1F9                       	smpsAlterNote       $F9
00089515 01                         	dc.b	$01
00089516 E1FC                       	smpsAlterNote       $FC
00089518 ECF5                       	smpsPSGAlterVol     $F5
0008951A 9006                       	dc.b	nEb1, $06
0008951C EC04                       	smpsPSGAlterVol     $04
0008951E E701                       	dc.b	smpsNoAttack, $01
00089520 EC07                       	smpsPSGAlterVol     $07
00089522 8003                       	dc.b	nRst, $03
00089524 ECF5                       	smpsPSGAlterVol     $F5
00089526 9007                       	dc.b	nEb1, $07
00089528 EC0B                       	smpsPSGAlterVol     $0B
0008952A 8006                       	dc.b	nRst, $06
0008952C E1FF                       	smpsAlterNote       $FF
0008952E 01                         	dc.b	$01
0008952F E103                       	smpsAlterNote       $03
00089531 0101                       	dc.b	$01, $01
00089533 E1FC                       	smpsAlterNote       $FC
00089535 01                         	dc.b	$01
00089536 ECF5                       	smpsPSGAlterVol     $F5
00089538 8F07                       	dc.b	nD1, $07
0008953A EC0B                       	smpsPSGAlterVol     $0B
0008953C 8004                       	dc.b	nRst, $04
0008953E ECF5                       	smpsPSGAlterVol     $F5
00089540 8F06                       	dc.b	nD1, $06
00089542 EC04                       	smpsPSGAlterVol     $04
00089544 E701                       	dc.b	smpsNoAttack, $01
00089546 EC07                       	smpsPSGAlterVol     $07
00089548 8006                       	dc.b	nRst, $06
0008954A E102                       	smpsAlterNote       $02
0008954C 01                         	dc.b	$01
0008954D E103                       	smpsAlterNote       $03
0008954F 01                         	dc.b	$01
00089550 E1FF                       	smpsAlterNote       $FF
00089552 01                         	dc.b	$01
00089553 E1F9                       	smpsAlterNote       $F9
00089555 01                         	dc.b	$01
00089556 E1FC                       	smpsAlterNote       $FC
00089558 ECF5                       	smpsPSGAlterVol     $F5
0008955A 8F06                       	dc.b	nD1, $06
0008955C EC04                       	smpsPSGAlterVol     $04
0008955E E701                       	dc.b	smpsNoAttack, $01
00089560 EC07                       	smpsPSGAlterVol     $07
00089562 8003                       	dc.b	nRst, $03
00089564 ECF5                       	smpsPSGAlterVol     $F5
00089566 8F06                       	dc.b	nD1, $06
00089568 EC04                       	smpsPSGAlterVol     $04
0008956A E701                       	dc.b	smpsNoAttack, $01
0008956C EC07                       	smpsPSGAlterVol     $07
0008956E 8006                       	dc.b	nRst, $06
00089570 E1FF                       	smpsAlterNote       $FF
00089572 01                         	dc.b	$01
00089573 E103                       	smpsAlterNote       $03
00089575 01                         	dc.b	$01
00089576 E1FF                       	smpsAlterNote       $FF
00089578 01                         	dc.b	$01
00089579 E1FC                       	smpsAlterNote       $FC
0008957B 01                         	dc.b	$01
0008957C ECF5                       	smpsPSGAlterVol     $F5
0008957E 8F06                       	dc.b	nD1, $06
00089580 EC04                       	smpsPSGAlterVol     $04
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 EC07                       	smpsPSGAlterVol     $07
00089586 8003                       	dc.b	nRst, $03
00089588 ECF5                       	smpsPSGAlterVol     $F5
0008958A 8F07                       	dc.b	nD1, $07
0008958C EC0B                       	smpsPSGAlterVol     $0B
0008958E 8007                       	dc.b	nRst, $07
00089590 E101                       	smpsAlterNote       $01
00089592 0101                       	dc.b	$01, $01
00089594 E1FC                       	smpsAlterNote       $FC
00089596 01                         	dc.b	$01
00089597 E1F9                       	smpsAlterNote       $F9
00089599 01                         	dc.b	$01
0008959A E1FC                       	smpsAlterNote       $FC
0008959C ECF5                       	smpsPSGAlterVol     $F5
0008959E 9006                       	dc.b	nEb1, $06
000895A0 EC0B                       	smpsPSGAlterVol     $0B
000895A2 8004                       	dc.b	nRst, $04
000895A4 ECF5                       	smpsPSGAlterVol     $F5
000895A6 9006                       	dc.b	nEb1, $06
000895A8 EC04                       	smpsPSGAlterVol     $04
000895AA E701                       	dc.b	smpsNoAttack, $01
000895AC EC07                       	smpsPSGAlterVol     $07
000895AE 8006                       	dc.b	nRst, $06
000895B0 E100                       	smpsAlterNote       $00
000895B2 01                         	dc.b	$01
000895B3 E102                       	smpsAlterNote       $02
000895B5 01                         	dc.b	$01
000895B6 E100                       	smpsAlterNote       $00
000895B8 01                         	dc.b	$01
000895B9 E1FD                       	smpsAlterNote       $FD
000895BB 01                         	dc.b	$01
000895BC E1FF                       	smpsAlterNote       $FF
000895BE ECF5                       	smpsPSGAlterVol     $F5
000895C0 9B06                       	dc.b	nD2, $06
000895C2 EC04                       	smpsPSGAlterVol     $04
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 EC07                       	smpsPSGAlterVol     $07
000895C8 8003                       	dc.b	nRst, $03
000895CA ECF5                       	smpsPSGAlterVol     $F5
000895CC 9B07                       	dc.b	nD2, $07
000895CE EC0B                       	smpsPSGAlterVol     $0B
000895D0 8006                       	dc.b	nRst, $06
000895D2 E102                       	smpsAlterNote       $02
000895D4 01                         	dc.b	$01
000895D5 E106                       	smpsAlterNote       $06
000895D7 01                         	dc.b	$01
000895D8 E105                       	smpsAlterNote       $05
000895DA 01                         	dc.b	$01
000895DB E1FF                       	smpsAlterNote       $FF
000895DD 01                         	dc.b	$01
000895DE ECF5                       	smpsPSGAlterVol     $F5
000895E0 9B07                       	dc.b	nD2, $07
000895E2 EC0B                       	smpsPSGAlterVol     $0B
000895E4 8004                       	dc.b	nRst, $04
000895E6 ECF5                       	smpsPSGAlterVol     $F5
000895E8 9B06                       	dc.b	nD2, $06
000895EA EC0B                       	smpsPSGAlterVol     $0B
000895EC 8007                       	dc.b	nRst, $07
000895EE E105                       	smpsAlterNote       $05
000895F0 0101                       	dc.b	$01, $01
000895F2 E102                       	smpsAlterNote       $02
000895F4 01                         	dc.b	$01
000895F5 E1FC                       	smpsAlterNote       $FC
000895F7 01                         	dc.b	$01
000895F8 E1FF                       	smpsAlterNote       $FF
000895FA ECF5                       	smpsPSGAlterVol     $F5
000895FC 9B06                       	dc.b	nD2, $06
000895FE EC04                       	smpsPSGAlterVol     $04
00089600 E701                       	dc.b	smpsNoAttack, $01
00089602 EC07                       	smpsPSGAlterVol     $07
00089604 8003                       	dc.b	nRst, $03
00089606 ECF5                       	smpsPSGAlterVol     $F5
00089608 9B06                       	dc.b	nD2, $06
0008960A EC04                       	smpsPSGAlterVol     $04
0008960C E701                       	dc.b	smpsNoAttack, $01
0008960E EC07                       	smpsPSGAlterVol     $07
00089610 8006                       	dc.b	nRst, $06
00089612 E102                       	smpsAlterNote       $02
00089614 01                         	dc.b	$01
00089615 E106                       	smpsAlterNote       $06
00089617 01                         	dc.b	$01
00089618 E102                       	smpsAlterNote       $02
0008961A 01                         	dc.b	$01
0008961B E1FF                       	smpsAlterNote       $FF
0008961D 01                         	dc.b	$01
0008961E ECF5                       	smpsPSGAlterVol     $F5
00089620 9B06                       	dc.b	nD2, $06
00089622 EC04                       	smpsPSGAlterVol     $04
00089624 E701                       	dc.b	smpsNoAttack, $01
00089626 EC07                       	smpsPSGAlterVol     $07
00089628 8003                       	dc.b	nRst, $03
0008962A ECF5                       	smpsPSGAlterVol     $F5
0008962C 9B07                       	dc.b	nD2, $07
0008962E EC0B                       	smpsPSGAlterVol     $0B
00089630 8007                       	dc.b	nRst, $07
00089632 E105                       	smpsAlterNote       $05
00089634 0101                       	dc.b	$01, $01
00089636 E1FF                       	smpsAlterNote       $FF
00089638 01                         	dc.b	$01
00089639 E1FC                       	smpsAlterNote       $FC
0008963B 01                         	dc.b	$01
0008963C E1FF                       	smpsAlterNote       $FF
0008963E ECF5                       	smpsPSGAlterVol     $F5
00089640 9B06                       	dc.b	nD2, $06
00089642 EC0B                       	smpsPSGAlterVol     $0B
00089644 8004                       	dc.b	nRst, $04
00089646 ECF5                       	smpsPSGAlterVol     $F5
00089648 9B06                       	dc.b	nD2, $06
0008964A EC04                       	smpsPSGAlterVol     $04
0008964C E701                       	dc.b	smpsNoAttack, $01
0008964E EC07                       	smpsPSGAlterVol     $07
00089650 8006                       	dc.b	nRst, $06
00089652 E105                       	smpsAlterNote       $05
00089654 01                         	dc.b	$01
00089655 E106                       	smpsAlterNote       $06
00089657 01                         	dc.b	$01
00089658 E102                       	smpsAlterNote       $02
0008965A 01                         	dc.b	$01
0008965B E1FC                       	smpsAlterNote       $FC
0008965D 01                         	dc.b	$01
0008965E E1FF                       	smpsAlterNote       $FF
00089660 ECF5                       	smpsPSGAlterVol     $F5
00089662 9B06                       	dc.b	nD2, $06
00089664 EC04                       	smpsPSGAlterVol     $04
00089666 E701                       	dc.b	smpsNoAttack, $01
00089668 EC07                       	smpsPSGAlterVol     $07
0008966A 8003                       	dc.b	nRst, $03
0008966C ECF5                       	smpsPSGAlterVol     $F5
0008966E 9B06                       	dc.b	nD2, $06
00089670 EC04                       	smpsPSGAlterVol     $04
00089672 E701                       	dc.b	smpsNoAttack, $01
00089674 EC07                       	smpsPSGAlterVol     $07
00089676 8006                       	dc.b	nRst, $06
00089678 E102                       	smpsAlterNote       $02
0008967A 01                         	dc.b	$01
0008967B E106                       	smpsAlterNote       $06
0008967D 01                         	dc.b	$01
0008967E E105                       	smpsAlterNote       $05
00089680 01                         	dc.b	$01
00089681 E1FF                       	smpsAlterNote       $FF
00089683 01                         	dc.b	$01
00089684 ECF5                       	smpsPSGAlterVol     $F5
00089686 9B07                       	dc.b	nD2, $07
00089688 EC0B                       	smpsPSGAlterVol     $0B
0008968A 8004                       	dc.b	nRst, $04
0008968C ECF5                       	smpsPSGAlterVol     $F5
0008968E 9B06                       	dc.b	nD2, $06
00089690 EC0B                       	smpsPSGAlterVol     $0B
00089692 8007                       	dc.b	nRst, $07
00089694 E105                       	smpsAlterNote       $05
00089696 0101                       	dc.b	$01, $01
00089698 E102                       	smpsAlterNote       $02
0008969A 01                         	dc.b	$01
0008969B E1FC                       	smpsAlterNote       $FC
0008969D 01                         	dc.b	$01
0008969E E1FF                       	smpsAlterNote       $FF
000896A0 ECF5                       	smpsPSGAlterVol     $F5
000896A2 9B06                       	dc.b	nD2, $06
000896A4 EC04                       	smpsPSGAlterVol     $04
000896A6 E701                       	dc.b	smpsNoAttack, $01
000896A8 EC07                       	smpsPSGAlterVol     $07
000896AA 8003                       	dc.b	nRst, $03
000896AC ECF5                       	smpsPSGAlterVol     $F5
000896AE 9B06                       	dc.b	nD2, $06
000896B0 EC04                       	smpsPSGAlterVol     $04
000896B2 E701                       	dc.b	smpsNoAttack, $01
000896B4 EC07                       	smpsPSGAlterVol     $07
000896B6 8006                       	dc.b	nRst, $06
000896B8 E102                       	smpsAlterNote       $02
000896BA 01                         	dc.b	$01
000896BB E106                       	smpsAlterNote       $06
000896BD 01                         	dc.b	$01
000896BE E102                       	smpsAlterNote       $02
000896C0 01                         	dc.b	$01
000896C1 E1FF                       	smpsAlterNote       $FF
000896C3 01                         	dc.b	$01
000896C4 ECF5                       	smpsPSGAlterVol     $F5
000896C6 9B06                       	dc.b	nD2, $06
000896C8 EC04                       	smpsPSGAlterVol     $04
000896CA E701                       	dc.b	smpsNoAttack, $01
000896CC EC07                       	smpsPSGAlterVol     $07
000896CE 8003                       	dc.b	nRst, $03
000896D0 ECF5                       	smpsPSGAlterVol     $F5
000896D2 9B07                       	dc.b	nD2, $07
000896D4 E1FE                       	smpsAlterNote       $FE
000896D6 9706                       	dc.b	nBb1, $06
000896D8 EC04                       	smpsPSGAlterVol     $04
000896DA E701                       	dc.b	smpsNoAttack, $01
000896DC ECFC                       	smpsPSGAlterVol     $FC
000896DE 9703                       	dc.b	nBb1, $03
000896E0 EC04                       	smpsPSGAlterVol     $04
000896E2 E701                       	dc.b	smpsNoAttack, $01
000896E4 ECFC                       	smpsPSGAlterVol     $FC
000896E6 9702                       	dc.b	nBb1, $02
000896E8 EC04                       	smpsPSGAlterVol     $04
000896EA E701                       	dc.b	smpsNoAttack, $01
000896EC ECFC                       	smpsPSGAlterVol     $FC
000896EE 9606                       	dc.b	nA1, $06
000896F0 EC04                       	smpsPSGAlterVol     $04
000896F2 E701                       	dc.b	smpsNoAttack, $01
000896F4 EC07                       	smpsPSGAlterVol     $07
000896F6 8006                       	dc.b	nRst, $06
000896F8 E101                       	smpsAlterNote       $01
000896FA 01                         	dc.b	$01
000896FB E107                       	smpsAlterNote       $07
000896FD 01                         	dc.b	$01
000896FE E101                       	smpsAlterNote       $01
00089700 01                         	dc.b	$01
00089701 E1F8                       	smpsAlterNote       $F8
00089703 01                         	dc.b	$01
00089704 E1F7                       	smpsAlterNote       $F7
00089706 01                         	dc.b	$01
00089707 E1FC                       	smpsAlterNote       $FC
00089709 01                         	dc.b	$01
0008970A E106                       	smpsAlterNote       $06
0008970C 01                         	dc.b	$01
0008970D E107                       	smpsAlterNote       $07
0008970F 01                         	dc.b	$01
00089710 E101                       	smpsAlterNote       $01
00089712 01                         	dc.b	$01
00089713 E1F8                       	smpsAlterNote       $F8
00089715 0101                       	dc.b	$01, $01
00089717 E1FC                       	smpsAlterNote       $FC
00089719 ECF5                       	smpsPSGAlterVol     $F5
0008971B 8F06                       	dc.b	nD1, $06
0008971D EC04                       	smpsPSGAlterVol     $04
0008971F E701                       	dc.b	smpsNoAttack, $01
00089721 EC07                       	smpsPSGAlterVol     $07
00089723 8003                       	dc.b	nRst, $03
00089725 ECF5                       	smpsPSGAlterVol     $F5
00089727 8F06                       	dc.b	nD1, $06
00089729 EC04                       	smpsPSGAlterVol     $04
0008972B E701                       	dc.b	smpsNoAttack, $01
0008972D EC07                       	smpsPSGAlterVol     $07
0008972F 8006                       	dc.b	nRst, $06
00089731 E1FF                       	smpsAlterNote       $FF
00089733 01                         	dc.b	$01
00089734 E102                       	smpsAlterNote       $02
00089736 01                         	dc.b	$01
00089737 E101                       	smpsAlterNote       $01
00089739 01                         	dc.b	$01
0008973A E1FC                       	smpsAlterNote       $FC
0008973C 01                         	dc.b	$01
0008973D ECF5                       	smpsPSGAlterVol     $F5
0008973F 9007                       	dc.b	nEb1, $07
00089741 EC0B                       	smpsPSGAlterVol     $0B
00089743 8004                       	dc.b	nRst, $04
00089745 ECF5                       	smpsPSGAlterVol     $F5
00089747 9006                       	dc.b	nEb1, $06
00089749 EC0B                       	smpsPSGAlterVol     $0B
0008974B 8007                       	dc.b	nRst, $07
0008974D E103                       	smpsAlterNote       $03
0008974F 0101                       	dc.b	$01, $01
00089751 E1FC                       	smpsAlterNote       $FC
00089753 01                         	dc.b	$01
00089754 E1F9                       	smpsAlterNote       $F9
00089756 01                         	dc.b	$01
00089757 E1FC                       	smpsAlterNote       $FC
00089759 ECF5                       	smpsPSGAlterVol     $F5
0008975B 8F06                       	dc.b	nD1, $06
0008975D EC04                       	smpsPSGAlterVol     $04
0008975F E701                       	dc.b	smpsNoAttack, $01
00089761 EC07                       	smpsPSGAlterVol     $07
00089763 8003                       	dc.b	nRst, $03
00089765 ECF5                       	smpsPSGAlterVol     $F5
00089767 8F06                       	dc.b	nD1, $06
00089769 EC04                       	smpsPSGAlterVol     $04
0008976B E701                       	dc.b	smpsNoAttack, $01
0008976D EC07                       	smpsPSGAlterVol     $07
0008976F 8006                       	dc.b	nRst, $06
00089771 E1FF                       	smpsAlterNote       $FF
00089773 01                         	dc.b	$01
00089774 E103                       	smpsAlterNote       $03
00089776 01                         	dc.b	$01
00089777 E1FF                       	smpsAlterNote       $FF
00089779 01                         	dc.b	$01
0008977A E1F9                       	smpsAlterNote       $F9
0008977C 01                         	dc.b	$01
0008977D E1FC                       	smpsAlterNote       $FC
0008977F ECF5                       	smpsPSGAlterVol     $F5
00089781 8F06                       	dc.b	nD1, $06
00089783 EC04                       	smpsPSGAlterVol     $04
00089785 E701                       	dc.b	smpsNoAttack, $01
00089787 EC07                       	smpsPSGAlterVol     $07
00089789 8003                       	dc.b	nRst, $03
0008978B ECF5                       	smpsPSGAlterVol     $F5
0008978D 8F07                       	dc.b	nD1, $07
0008978F EC0B                       	smpsPSGAlterVol     $0B
00089791 8006                       	dc.b	nRst, $06
00089793 E1FF                       	smpsAlterNote       $FF
00089795 01                         	dc.b	$01
00089796 E102                       	smpsAlterNote       $02
00089798 0101                       	dc.b	$01, $01
0008979A E1FC                       	smpsAlterNote       $FC
0008979C 01                         	dc.b	$01
0008979D ECF5                       	smpsPSGAlterVol     $F5
0008979F 8F07                       	dc.b	nD1, $07
000897A1 EC0B                       	smpsPSGAlterVol     $0B
000897A3 8004                       	dc.b	nRst, $04
000897A5 ECF5                       	smpsPSGAlterVol     $F5
000897A7 8F06                       	dc.b	nD1, $06
000897A9 EC04                       	smpsPSGAlterVol     $04
000897AB E701                       	dc.b	smpsNoAttack, $01
000897AD EC07                       	smpsPSGAlterVol     $07
000897AF 8006                       	dc.b	nRst, $06
000897B1 E101                       	smpsAlterNote       $01
000897B3 01                         	dc.b	$01
000897B4 E102                       	smpsAlterNote       $02
000897B6 01                         	dc.b	$01
000897B7 E1FF                       	smpsAlterNote       $FF
000897B9 01                         	dc.b	$01
000897BA E1F9                       	smpsAlterNote       $F9
000897BC 01                         	dc.b	$01
000897BD E1FC                       	smpsAlterNote       $FC
000897BF ECF5                       	smpsPSGAlterVol     $F5
000897C1 9006                       	dc.b	nEb1, $06
000897C3 EC04                       	smpsPSGAlterVol     $04
000897C5 E701                       	dc.b	smpsNoAttack, $01
000897C7 EC07                       	smpsPSGAlterVol     $07
000897C9 8003                       	dc.b	nRst, $03
000897CB ECF5                       	smpsPSGAlterVol     $F5
000897CD 9006                       	dc.b	nEb1, $06
000897CF EC04                       	smpsPSGAlterVol     $04
000897D1 E701                       	dc.b	smpsNoAttack, $01
000897D3 EC07                       	smpsPSGAlterVol     $07
000897D5 8006                       	dc.b	nRst, $06
000897D7 E100                       	smpsAlterNote       $00
000897D9 01                         	dc.b	$01
000897DA E102                       	smpsAlterNote       $02
000897DC 01                         	dc.b	$01
000897DD E100                       	smpsAlterNote       $00
000897DF 01                         	dc.b	$01
000897E0 E1FF                       	smpsAlterNote       $FF
000897E2 01                         	dc.b	$01
000897E3 ECF5                       	smpsPSGAlterVol     $F5
000897E5 9B06                       	dc.b	nD2, $06
000897E7 EC04                       	smpsPSGAlterVol     $04
000897E9 E701                       	dc.b	smpsNoAttack, $01
000897EB EC07                       	smpsPSGAlterVol     $07
000897ED 8003                       	dc.b	nRst, $03
000897EF ECF5                       	smpsPSGAlterVol     $F5
000897F1 9B07                       	dc.b	nD2, $07
000897F3 EC0B                       	smpsPSGAlterVol     $0B
000897F5 8007                       	dc.b	nRst, $07
000897F7 E105                       	smpsAlterNote       $05
000897F9 0101                       	dc.b	$01, $01
000897FB E1FF                       	smpsAlterNote       $FF
000897FD 01                         	dc.b	$01
000897FE E1FC                       	smpsAlterNote       $FC
00089800 01                         	dc.b	$01
00089801 E1FF                       	smpsAlterNote       $FF
00089803 ECF5                       	smpsPSGAlterVol     $F5
00089805 9B06                       	dc.b	nD2, $06
00089807 EC0B                       	smpsPSGAlterVol     $0B
00089809 8004                       	dc.b	nRst, $04
0008980B ECF5                       	smpsPSGAlterVol     $F5
0008980D 9B06                       	dc.b	nD2, $06
0008980F EC04                       	smpsPSGAlterVol     $04
00089811 E701                       	dc.b	smpsNoAttack, $01
00089813 EC07                       	smpsPSGAlterVol     $07
00089815 8006                       	dc.b	nRst, $06
00089817 E102                       	smpsAlterNote       $02
00089819 01                         	dc.b	$01
0008981A E106                       	smpsAlterNote       $06
0008981C 01                         	dc.b	$01
0008981D E102                       	smpsAlterNote       $02
0008981F 01                         	dc.b	$01
00089820 E1FC                       	smpsAlterNote       $FC
00089822 01                         	dc.b	$01
00089823 E1FF                       	smpsAlterNote       $FF
00089825 ECF5                       	smpsPSGAlterVol     $F5
00089827 9B06                       	dc.b	nD2, $06
00089829 EC04                       	smpsPSGAlterVol     $04
0008982B E701                       	dc.b	smpsNoAttack, $01
0008982D EC07                       	smpsPSGAlterVol     $07
0008982F 8003                       	dc.b	nRst, $03
00089831 ECF5                       	smpsPSGAlterVol     $F5
00089833 9B07                       	dc.b	nD2, $07
00089835 EC0B                       	smpsPSGAlterVol     $0B
00089837 8006                       	dc.b	nRst, $06
00089839 E102                       	smpsAlterNote       $02
0008983B 01                         	dc.b	$01
0008983C E105                       	smpsAlterNote       $05
0008983E 0101                       	dc.b	$01, $01
00089840 E1FF                       	smpsAlterNote       $FF
00089842 01                         	dc.b	$01
00089843 ECF5                       	smpsPSGAlterVol     $F5
00089845 9B07                       	dc.b	nD2, $07
00089847 EC0B                       	smpsPSGAlterVol     $0B
00089849 8004                       	dc.b	nRst, $04
0008984B ECF5                       	smpsPSGAlterVol     $F5
0008984D 9B06                       	dc.b	nD2, $06
0008984F EC0B                       	smpsPSGAlterVol     $0B
00089851 8007                       	dc.b	nRst, $07
00089853 E105                       	smpsAlterNote       $05
00089855 0101                       	dc.b	$01, $01
00089857 E102                       	smpsAlterNote       $02
00089859 01                         	dc.b	$01
0008985A E1FC                       	smpsAlterNote       $FC
0008985C 01                         	dc.b	$01
0008985D E1FF                       	smpsAlterNote       $FF
0008985F ECF5                       	smpsPSGAlterVol     $F5
00089861 9B06                       	dc.b	nD2, $06
00089863 EC04                       	smpsPSGAlterVol     $04
00089865 E701                       	dc.b	smpsNoAttack, $01
00089867 EC07                       	smpsPSGAlterVol     $07
00089869 8003                       	dc.b	nRst, $03
0008986B ECF5                       	smpsPSGAlterVol     $F5
0008986D 9B06                       	dc.b	nD2, $06
0008986F EC04                       	smpsPSGAlterVol     $04
00089871 E701                       	dc.b	smpsNoAttack, $01
00089873 EC07                       	smpsPSGAlterVol     $07
00089875 8006                       	dc.b	nRst, $06
00089877 E102                       	smpsAlterNote       $02
00089879 01                         	dc.b	$01
0008987A E106                       	smpsAlterNote       $06
0008987C 01                         	dc.b	$01
0008987D E102                       	smpsAlterNote       $02
0008987F 01                         	dc.b	$01
00089880 E1FF                       	smpsAlterNote       $FF
00089882 01                         	dc.b	$01
00089883 ECF5                       	smpsPSGAlterVol     $F5
00089885 9B06                       	dc.b	nD2, $06
00089887 EC04                       	smpsPSGAlterVol     $04
00089889 E701                       	dc.b	smpsNoAttack, $01
0008988B EC07                       	smpsPSGAlterVol     $07
0008988D 8003                       	dc.b	nRst, $03
0008988F ECF5                       	smpsPSGAlterVol     $F5
00089891 9B07                       	dc.b	nD2, $07
00089893 EC0B                       	smpsPSGAlterVol     $0B
00089895 8007                       	dc.b	nRst, $07
00089897 E105                       	smpsAlterNote       $05
00089899 0101                       	dc.b	$01, $01
0008989B E1FF                       	smpsAlterNote       $FF
0008989D 01                         	dc.b	$01
0008989E E1FC                       	smpsAlterNote       $FC
000898A0 01                         	dc.b	$01
000898A1 E1FF                       	smpsAlterNote       $FF
000898A3 ECF5                       	smpsPSGAlterVol     $F5
000898A5 9B06                       	dc.b	nD2, $06
000898A7 EC0B                       	smpsPSGAlterVol     $0B
000898A9 8004                       	dc.b	nRst, $04
000898AB ECF5                       	smpsPSGAlterVol     $F5
000898AD 9B06                       	dc.b	nD2, $06
000898AF EC04                       	smpsPSGAlterVol     $04
000898B1 E701                       	dc.b	smpsNoAttack, $01
000898B3 EC07                       	smpsPSGAlterVol     $07
000898B5 8006                       	dc.b	nRst, $06
000898B7 E102                       	smpsAlterNote       $02
000898B9 01                         	dc.b	$01
000898BA E106                       	smpsAlterNote       $06
000898BC 01                         	dc.b	$01
000898BD E102                       	smpsAlterNote       $02
000898BF 01                         	dc.b	$01
000898C0 E1FC                       	smpsAlterNote       $FC
000898C2 01                         	dc.b	$01
000898C3 E1FF                       	smpsAlterNote       $FF
000898C5 ECF5                       	smpsPSGAlterVol     $F5
000898C7 9B06                       	dc.b	nD2, $06
000898C9 EC04                       	smpsPSGAlterVol     $04
000898CB E701                       	dc.b	smpsNoAttack, $01
000898CD EC07                       	smpsPSGAlterVol     $07
000898CF 8003                       	dc.b	nRst, $03
000898D1 ECF5                       	smpsPSGAlterVol     $F5
000898D3 9B06                       	dc.b	nD2, $06
000898D5 EC04                       	smpsPSGAlterVol     $04
000898D7 E701                       	dc.b	smpsNoAttack, $01
000898D9 EC07                       	smpsPSGAlterVol     $07
000898DB 8006                       	dc.b	nRst, $06
000898DD E102                       	smpsAlterNote       $02
000898DF 01                         	dc.b	$01
000898E0 E106                       	smpsAlterNote       $06
000898E2 01                         	dc.b	$01
000898E3 E105                       	smpsAlterNote       $05
000898E5 01                         	dc.b	$01
000898E6 E1FF                       	smpsAlterNote       $FF
000898E8 01                         	dc.b	$01
000898E9 ECF5                       	smpsPSGAlterVol     $F5
000898EB 9B07                       	dc.b	nD2, $07
000898ED EC0B                       	smpsPSGAlterVol     $0B
000898EF 8004                       	dc.b	nRst, $04
000898F1 ECF5                       	smpsPSGAlterVol     $F5
000898F3 9B06                       	dc.b	nD2, $06
000898F5 EC0B                       	smpsPSGAlterVol     $0B
000898F7 8007                       	dc.b	nRst, $07
000898F9 E105                       	smpsAlterNote       $05
000898FB 0101                       	dc.b	$01, $01
000898FD E101                       	smpsAlterNote       $01
000898FF 01                         	dc.b	$01
00089900 E1FB                       	smpsAlterNote       $FB
00089902 01                         	dc.b	$01
00089903 E1FE                       	smpsAlterNote       $FE
00089905 ECF5                       	smpsPSGAlterVol     $F5
00089907 9A06                       	dc.b	nCs2, $06
00089909 EC04                       	smpsPSGAlterVol     $04
0008990B E701                       	dc.b	smpsNoAttack, $01
0008990D EC07                       	smpsPSGAlterVol     $07
0008990F 8003                       	dc.b	nRst, $03
00089911 ECF5                       	smpsPSGAlterVol     $F5
00089913 9A06                       	dc.b	nCs2, $06
00089915 EC04                       	smpsPSGAlterVol     $04
00089917 E701                       	dc.b	smpsNoAttack, $01
00089919 EC07                       	smpsPSGAlterVol     $07
0008991B 8003                       	dc.b	nRst, $03
0008991D E1FC                       	smpsAlterNote       $FC
0008991F ECF5                       	smpsPSGAlterVol     $F5
00089921 8F07                       	dc.b	nD1, $07
00089923 EC0B                       	smpsPSGAlterVol     $0B
00089925 8006                       	dc.b	nRst, $06
00089927 E1FF                       	smpsAlterNote       $FF
00089929 01                         	dc.b	$01
0008992A E103                       	smpsAlterNote       $03
0008992C 01                         	dc.b	$01
0008992D E102                       	smpsAlterNote       $02
0008992F 01                         	dc.b	$01
00089930 E1FC                       	smpsAlterNote       $FC
00089932 01                         	dc.b	$01
00089933 E1F8                       	smpsAlterNote       $F8
00089935 01                         	dc.b	$01
00089936 E1FC                       	smpsAlterNote       $FC
00089938 01                         	dc.b	$01
00089939 E1FF                       	smpsAlterNote       $FF
0008993B 01                         	dc.b	$01
0008993C E103                       	smpsAlterNote       $03
0008993E 01                         	dc.b	$01
0008993F E1FC                       	smpsAlterNote       $FC
00089941 ECF5                       	smpsPSGAlterVol     $F5
00089943 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00089947 EC04                       	smpsPSGAlterVol     $04
00089949 E701                       	dc.b	smpsNoAttack, $01
0008994B EC07                       	smpsPSGAlterVol     $07
0008994D 8009                       	dc.b	nRst, $09
0008994F E1FF                       	smpsAlterNote       $FF
00089951 01                         	dc.b	$01
00089952 E103                       	smpsAlterNote       $03
00089954 01                         	dc.b	$01
00089955 E102                       	smpsAlterNote       $02
00089957 01                         	dc.b	$01
00089958 E1FC                       	smpsAlterNote       $FC
0008995A 01                         	dc.b	$01
0008995B E1F8                       	smpsAlterNote       $F8
0008995D 01                         	dc.b	$01
0008995E E1FC                       	smpsAlterNote       $FC
00089960 01                         	dc.b	$01
00089961 E1FF                       	smpsAlterNote       $FF
00089963 01                         	dc.b	$01
00089964 E103                       	smpsAlterNote       $03
00089966 01                         	dc.b	$01
00089967 E1FF                       	smpsAlterNote       $FF
00089969 01                         	dc.b	$01
0008996A E1F9                       	smpsAlterNote       $F9
0008996C 01                         	dc.b	$01
0008996D E1F8                       	smpsAlterNote       $F8
0008996F 01                         	dc.b	$01
00089970 E1FC                       	smpsAlterNote       $FC
00089972 01                         	dc.b	$01
00089973 E102                       	smpsAlterNote       $02
00089975 0101                       	dc.b	$01, $01
00089977 E1FF                       	smpsAlterNote       $FF
00089979 01                         	dc.b	$01
0008997A E1FC                       	smpsAlterNote       $FC
0008997C ECF5                       	smpsPSGAlterVol     $F5
0008997E 8F02                       	dc.b	nD1, $02
00089980 EC04                       	smpsPSGAlterVol     $04
00089982 E701                       	dc.b	smpsNoAttack, $01
00089984 ECFC                       	smpsPSGAlterVol     $FC
00089986 E1FB                       	smpsAlterNote       $FB
00089988 8D06                       	dc.b	nC1, $06
0008998A EC04                       	smpsPSGAlterVol     $04
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E EC07                       	smpsPSGAlterVol     $07
00089990 8006                       	dc.b	nRst, $06
00089992 E1FE                       	smpsAlterNote       $FE
00089994 01                         	dc.b	$01
00089995 E102                       	smpsAlterNote       $02
00089997 01                         	dc.b	$01
00089998 E1FE                       	smpsAlterNote       $FE
0008999A 01                         	dc.b	$01
0008999B E1FB                       	smpsAlterNote       $FB
0008999D 01                         	dc.b	$01
0008999E E1F7                       	smpsAlterNote       $F7
000899A0 01                         	dc.b	$01
000899A1 E1FB                       	smpsAlterNote       $FB
000899A3 01                         	dc.b	$01
000899A4 E101                       	smpsAlterNote       $01
000899A6 01                         	dc.b	$01
000899A7 E102                       	smpsAlterNote       $02
000899A9 01                         	dc.b	$01
000899AA E1FB                       	smpsAlterNote       $FB
000899AC ECF5                       	smpsPSGAlterVol     $F5
000899AE 8D02                       	dc.b	nC1, $02
000899B0 EC04                       	smpsPSGAlterVol     $04
000899B2 E701                       	dc.b	smpsNoAttack, $01
000899B4 E1FC                       	smpsAlterNote       $FC
000899B6 ECFC                       	smpsPSGAlterVol     $FC
000899B8 8F0D                       	dc.b	nD1, $0D
000899BA E1FF                       	smpsAlterNote       $FF
000899BC E701                       	dc.b	smpsNoAttack, $01
000899BE E103                       	smpsAlterNote       $03
000899C0 E701                       	dc.b	smpsNoAttack, $01
000899C2 E1FF                       	smpsAlterNote       $FF
000899C4 E701                       	dc.b	smpsNoAttack, $01
000899C6 E1FC                       	smpsAlterNote       $FC
000899C8 E701                       	dc.b	smpsNoAttack, $01
000899CA E1F8                       	smpsAlterNote       $F8
000899CC E701                       	dc.b	smpsNoAttack, $01
000899CE E1FC                       	smpsAlterNote       $FC
000899D0 E701                       	dc.b	smpsNoAttack, $01
000899D2 E102                       	smpsAlterNote       $02
000899D4 E701                       	dc.b	smpsNoAttack, $01
000899D6 E103                       	smpsAlterNote       $03
000899D8 E701                       	dc.b	smpsNoAttack, $01
000899DA E1FF                       	smpsAlterNote       $FF
000899DC E701                       	dc.b	smpsNoAttack, $01
000899DE E1F9                       	smpsAlterNote       $F9
000899E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899E4 E1FC                       	smpsAlterNote       $FC
000899E6 E701                       	dc.b	smpsNoAttack, $01
000899E8 E102                       	smpsAlterNote       $02
000899EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899EE E1FC                       	smpsAlterNote       $FC
000899F0 E701                       	dc.b	smpsNoAttack, $01
000899F2 E1F9                       	smpsAlterNote       $F9
000899F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899F8 E1FF                       	smpsAlterNote       $FF
000899FA EC04                       	smpsPSGAlterVol     $04
000899FC E701                       	dc.b	smpsNoAttack, $01
000899FE EC07                       	smpsPSGAlterVol     $07
00089A00 E103                       	smpsAlterNote       $03
00089A02 8001                       	dc.b	nRst, $01
00089A04 E102                       	smpsAlterNote       $02
00089A06 01                         	dc.b	$01
00089A07 E1FB                       	smpsAlterNote       $FB
00089A09 01                         	dc.b	$01
00089A0A E1F7                       	smpsAlterNote       $F7
00089A0C 01                         	dc.b	$01
00089A0D E1FB                       	smpsAlterNote       $FB
00089A0F 01                         	dc.b	$01
00089A10 E102                       	smpsAlterNote       $02
00089A12 01                         	dc.b	$01
00089A13 E103                       	smpsAlterNote       $03
00089A15 01                         	dc.b	$01
00089A16 E1FB                       	smpsAlterNote       $FB
00089A18 ECF5                       	smpsPSGAlterVol     $F5
00089A1A 8E06                       	dc.b	nCs1, $06
00089A1C EC04                       	smpsPSGAlterVol     $04
00089A1E E701                       	dc.b	smpsNoAttack, $01
00089A20 EC07                       	smpsPSGAlterVol     $07
00089A22 8003                       	dc.b	nRst, $03
00089A24 ECF5                       	smpsPSGAlterVol     $F5
00089A26 8E06                       	dc.b	nCs1, $06
00089A28 EC04                       	smpsPSGAlterVol     $04
00089A2A E701                       	dc.b	smpsNoAttack, $01
00089A2C EC07                       	smpsPSGAlterVol     $07
00089A2E 8006                       	dc.b	nRst, $06
00089A30 E1FE                       	smpsAlterNote       $FE
00089A32 01                         	dc.b	$01
00089A33 E102                       	smpsAlterNote       $02
00089A35 01                         	dc.b	$01
00089A36 E1FE                       	smpsAlterNote       $FE
00089A38 01                         	dc.b	$01
00089A39 E1F9                       	smpsAlterNote       $F9
00089A3B 01                         	dc.b	$01
00089A3C E1FC                       	smpsAlterNote       $FC
00089A3E ECF5                       	smpsPSGAlterVol     $F5
00089A40 8F06                       	dc.b	nD1, $06
00089A42 EC04                       	smpsPSGAlterVol     $04
00089A44 E701                       	dc.b	smpsNoAttack, $01
00089A46 EC07                       	smpsPSGAlterVol     $07
00089A48 8003                       	dc.b	nRst, $03
00089A4A ECF5                       	smpsPSGAlterVol     $F5
00089A4C 8F07                       	dc.b	nD1, $07
00089A4E EC0B                       	smpsPSGAlterVol     $0B
00089A50 8006                       	dc.b	nRst, $06
00089A52 E1FF                       	smpsAlterNote       $FF
00089A54 01                         	dc.b	$01
00089A55 E102                       	smpsAlterNote       $02
00089A57 0101                       	dc.b	$01, $01
00089A59 E1FB                       	smpsAlterNote       $FB
00089A5B 01                         	dc.b	$01
00089A5C ECF5                       	smpsPSGAlterVol     $F5
00089A5E 8E07                       	dc.b	nCs1, $07
00089A60 EC0B                       	smpsPSGAlterVol     $0B
00089A62 8004                       	dc.b	nRst, $04
00089A64 ECF5                       	smpsPSGAlterVol     $F5
00089A66 8E06                       	dc.b	nCs1, $06
00089A68 EC04                       	smpsPSGAlterVol     $04
00089A6A E701                       	dc.b	smpsNoAttack, $01
00089A6C EC07                       	smpsPSGAlterVol     $07
00089A6E 8006                       	dc.b	nRst, $06
00089A70 E101                       	smpsAlterNote       $01
00089A72 01                         	dc.b	$01
00089A73 E102                       	smpsAlterNote       $02
00089A75 01                         	dc.b	$01
00089A76 E1FE                       	smpsAlterNote       $FE
00089A78 01                         	dc.b	$01
00089A79 E1F8                       	smpsAlterNote       $F8
00089A7B 01                         	dc.b	$01
00089A7C E1FB                       	smpsAlterNote       $FB
00089A7E ECF5                       	smpsPSGAlterVol     $F5
00089A80 8E06                       	dc.b	nCs1, $06
00089A82 EC04                       	smpsPSGAlterVol     $04
00089A84 E701                       	dc.b	smpsNoAttack, $01
00089A86 EC07                       	smpsPSGAlterVol     $07
00089A88 8003                       	dc.b	nRst, $03
00089A8A ECF5                       	smpsPSGAlterVol     $F5
00089A8C 8E06                       	dc.b	nCs1, $06
00089A8E EC04                       	smpsPSGAlterVol     $04
00089A90 E701                       	dc.b	smpsNoAttack, $01
00089A92 EC07                       	smpsPSGAlterVol     $07
00089A94 8004                       	dc.b	nRst, $04
00089A96 E1FC                       	smpsAlterNote       $FC
00089A98 ECF5                       	smpsPSGAlterVol     $F5
00089A9A 8F06                       	dc.b	nD1, $06
00089A9C EC0B                       	smpsPSGAlterVol     $0B
00089A9E 8006                       	dc.b	nRst, $06
00089AA0 E1FF                       	smpsAlterNote       $FF
00089AA2 01                         	dc.b	$01
00089AA3 E102                       	smpsAlterNote       $02
00089AA5 0101                       	dc.b	$01, $01
00089AA7 E1FC                       	smpsAlterNote       $FC
00089AA9 01                         	dc.b	$01
00089AAA E1F8                       	smpsAlterNote       $F8
00089AAC 01                         	dc.b	$01
00089AAD E1F9                       	smpsAlterNote       $F9
00089AAF 01                         	dc.b	$01
00089AB0 E1FF                       	smpsAlterNote       $FF
00089AB2 01                         	dc.b	$01
00089AB3 E103                       	smpsAlterNote       $03
00089AB5 01                         	dc.b	$01
00089AB6 E1FC                       	smpsAlterNote       $FC
00089AB8 ECF5                       	smpsPSGAlterVol     $F5
00089ABA 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00089ABE EC04                       	smpsPSGAlterVol     $04
00089AC0 E701                       	dc.b	smpsNoAttack, $01
00089AC2 EC07                       	smpsPSGAlterVol     $07
00089AC4 8009                       	dc.b	nRst, $09
00089AC6 E1FF                       	smpsAlterNote       $FF
00089AC8 01                         	dc.b	$01
00089AC9 E102                       	smpsAlterNote       $02
00089ACB 0101                       	dc.b	$01, $01
00089ACD E1FC                       	smpsAlterNote       $FC
00089ACF 01                         	dc.b	$01
00089AD0 E1F8                       	smpsAlterNote       $F8
00089AD2 01                         	dc.b	$01
00089AD3 E1F9                       	smpsAlterNote       $F9
00089AD5 01                         	dc.b	$01
00089AD6 E1FF                       	smpsAlterNote       $FF
00089AD8 01                         	dc.b	$01
00089AD9 E103                       	smpsAlterNote       $03
00089ADB 01                         	dc.b	$01
00089ADC E1FF                       	smpsAlterNote       $FF
00089ADE 01                         	dc.b	$01
00089ADF E1FC                       	smpsAlterNote       $FC
00089AE1 01                         	dc.b	$01
00089AE2 E1F8                       	smpsAlterNote       $F8
00089AE4 01                         	dc.b	$01
00089AE5 E1FC                       	smpsAlterNote       $FC
00089AE7 01                         	dc.b	$01
00089AE8 E102                       	smpsAlterNote       $02
00089AEA 01                         	dc.b	$01
00089AEB E103                       	smpsAlterNote       $03
00089AED 01                         	dc.b	$01
00089AEE E1FF                       	smpsAlterNote       $FF
00089AF0 01                         	dc.b	$01
00089AF1 E1FC                       	smpsAlterNote       $FC
00089AF3 ECF5                       	smpsPSGAlterVol     $F5
00089AF5 8F03                       	dc.b	nD1, $03
00089AF7 E1FB                       	smpsAlterNote       $FB
00089AF9 8D06                       	dc.b	nC1, $06
00089AFB EC04                       	smpsPSGAlterVol     $04
00089AFD E701                       	dc.b	smpsNoAttack, $01
00089AFF EC07                       	smpsPSGAlterVol     $07
00089B01 8006                       	dc.b	nRst, $06
00089B03 E1FE                       	smpsAlterNote       $FE
00089B05 01                         	dc.b	$01
00089B06 E102                       	smpsAlterNote       $02
00089B08 01                         	dc.b	$01
00089B09 E101                       	smpsAlterNote       $01
00089B0B 01                         	dc.b	$01
00089B0C E1FB                       	smpsAlterNote       $FB
00089B0E 01                         	dc.b	$01
00089B0F E1F7                       	smpsAlterNote       $F7
00089B11 01                         	dc.b	$01
00089B12 E1FB                       	smpsAlterNote       $FB
00089B14 01                         	dc.b	$01
00089B15 E1FE                       	smpsAlterNote       $FE
00089B17 01                         	dc.b	$01
00089B18 E102                       	smpsAlterNote       $02
00089B1A 01                         	dc.b	$01
00089B1B E1FB                       	smpsAlterNote       $FB
00089B1D ECF5                       	smpsPSGAlterVol     $F5
00089B1F 8D03                       	dc.b	nC1, $03
00089B21 E1FC                       	smpsAlterNote       $FC
00089B23 8F0D                       	dc.b	nD1, $0D
00089B25 E1FF                       	smpsAlterNote       $FF
00089B27 E701                       	dc.b	smpsNoAttack, $01
00089B29 E103                       	smpsAlterNote       $03
00089B2B E701                       	dc.b	smpsNoAttack, $01
00089B2D E1FF                       	smpsAlterNote       $FF
00089B2F E701                       	dc.b	smpsNoAttack, $01
00089B31 E1FC                       	smpsAlterNote       $FC
00089B33 E701                       	dc.b	smpsNoAttack, $01
00089B35 E1F8                       	smpsAlterNote       $F8
00089B37 E701                       	dc.b	smpsNoAttack, $01
00089B39 E1FC                       	smpsAlterNote       $FC
00089B3B E701                       	dc.b	smpsNoAttack, $01
00089B3D E102                       	smpsAlterNote       $02
00089B3F E701                       	dc.b	smpsNoAttack, $01
00089B41 E103                       	smpsAlterNote       $03
00089B43 E701                       	dc.b	smpsNoAttack, $01
00089B45 E1FF                       	smpsAlterNote       $FF
00089B47 E701                       	dc.b	smpsNoAttack, $01
00089B49 E1F9                       	smpsAlterNote       $F9
00089B4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B4F E1FC                       	smpsAlterNote       $FC
00089B51 E701                       	dc.b	smpsNoAttack, $01
00089B53 E102                       	smpsAlterNote       $02
00089B55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B59 E1FF                       	smpsAlterNote       $FF
00089B5B E701                       	dc.b	smpsNoAttack, $01
00089B5D E1F9                       	smpsAlterNote       $F9
00089B5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B63 E1FF                       	smpsAlterNote       $FF
00089B65 EC04                       	smpsPSGAlterVol     $04
00089B67 E701                       	dc.b	smpsNoAttack, $01
00089B69 EC07                       	smpsPSGAlterVol     $07
00089B6B E103                       	smpsAlterNote       $03
00089B6D 8001                       	dc.b	nRst, $01
00089B6F E102                       	smpsAlterNote       $02
00089B71 01                         	dc.b	$01
00089B72 E1FB                       	smpsAlterNote       $FB
00089B74 01                         	dc.b	$01
00089B75 E1F7                       	smpsAlterNote       $F7
00089B77 01                         	dc.b	$01
00089B78 E1FB                       	smpsAlterNote       $FB
00089B7A 01                         	dc.b	$01
00089B7B E1FF                       	smpsAlterNote       $FF
00089B7D 01                         	dc.b	$01
00089B7E E103                       	smpsAlterNote       $03
00089B80 01                         	dc.b	$01
00089B81 E1FB                       	smpsAlterNote       $FB
00089B83 ECF5                       	smpsPSGAlterVol     $F5
00089B85 8E06                       	dc.b	nCs1, $06
00089B87 EC04                       	smpsPSGAlterVol     $04
00089B89 E701                       	dc.b	smpsNoAttack, $01
00089B8B EC07                       	smpsPSGAlterVol     $07
00089B8D 8003                       	dc.b	nRst, $03
00089B8F ECF5                       	smpsPSGAlterVol     $F5
00089B91 8E06                       	dc.b	nCs1, $06
00089B93 EC04                       	smpsPSGAlterVol     $04
00089B95 E701                       	dc.b	smpsNoAttack, $01
00089B97 EC07                       	smpsPSGAlterVol     $07
00089B99 8006                       	dc.b	nRst, $06
00089B9B E1FE                       	smpsAlterNote       $FE
00089B9D 01                         	dc.b	$01
00089B9E E102                       	smpsAlterNote       $02
00089BA0 01                         	dc.b	$01
00089BA1 E1FE                       	smpsAlterNote       $FE
00089BA3 01                         	dc.b	$01
00089BA4 E1FC                       	smpsAlterNote       $FC
00089BA6 01                         	dc.b	$01
00089BA7 ECF5                       	smpsPSGAlterVol     $F5
00089BA9 8F06                       	dc.b	nD1, $06
00089BAB EC04                       	smpsPSGAlterVol     $04
00089BAD E701                       	dc.b	smpsNoAttack, $01
00089BAF EC07                       	smpsPSGAlterVol     $07
00089BB1 8003                       	dc.b	nRst, $03
00089BB3 ECF5                       	smpsPSGAlterVol     $F5
00089BB5 8F07                       	dc.b	nD1, $07
00089BB7 EC0B                       	smpsPSGAlterVol     $0B
00089BB9 8007                       	dc.b	nRst, $07
00089BBB E102                       	smpsAlterNote       $02
00089BBD 0101                       	dc.b	$01, $01
00089BBF E1FB                       	smpsAlterNote       $FB
00089BC1 01                         	dc.b	$01
00089BC2 E1F8                       	smpsAlterNote       $F8
00089BC4 01                         	dc.b	$01
00089BC5 E1FB                       	smpsAlterNote       $FB
00089BC7 ECF5                       	smpsPSGAlterVol     $F5
00089BC9 8E06                       	dc.b	nCs1, $06
00089BCB EC0B                       	smpsPSGAlterVol     $0B
00089BCD 8004                       	dc.b	nRst, $04
00089BCF ECF5                       	smpsPSGAlterVol     $F5
00089BD1 8E06                       	dc.b	nCs1, $06
00089BD3 EC04                       	smpsPSGAlterVol     $04
00089BD5 E701                       	dc.b	smpsNoAttack, $01
00089BD7 EC07                       	smpsPSGAlterVol     $07
00089BD9 8006                       	dc.b	nRst, $06
00089BDB E1FE                       	smpsAlterNote       $FE
00089BDD 01                         	dc.b	$01
00089BDE E102                       	smpsAlterNote       $02
00089BE0 01                         	dc.b	$01
00089BE1 E1FE                       	smpsAlterNote       $FE
00089BE3 01                         	dc.b	$01
00089BE4 E1F9                       	smpsAlterNote       $F9
00089BE6 01                         	dc.b	$01
00089BE7 E1FC                       	smpsAlterNote       $FC
00089BE9 ECF5                       	smpsPSGAlterVol     $F5
00089BEB 8F06                       	dc.b	nD1, $06
00089BED EC04                       	smpsPSGAlterVol     $04
00089BEF E701                       	dc.b	smpsNoAttack, $01
00089BF1 EC07                       	smpsPSGAlterVol     $07
00089BF3 8003                       	dc.b	nRst, $03
00089BF5 ECF5                       	smpsPSGAlterVol     $F5
00089BF7 8F06                       	dc.b	nD1, $06
00089BF9 EC04                       	smpsPSGAlterVol     $04
00089BFB E701                       	dc.b	smpsNoAttack, $01
00089BFD EC07                       	smpsPSGAlterVol     $07
00089BFF 8006                       	dc.b	nRst, $06
00089C01 E1FF                       	smpsAlterNote       $FF
00089C03 01                         	dc.b	$01
00089C04 E103                       	smpsAlterNote       $03
00089C06 01                         	dc.b	$01
00089C07 E102                       	smpsAlterNote       $02
00089C09 01                         	dc.b	$01
00089C0A E1FB                       	smpsAlterNote       $FB
00089C0C 01                         	dc.b	$01
00089C0D ECF5                       	smpsPSGAlterVol     $F5
00089C0F 8E07                       	dc.b	nCs1, $07
00089C11 EC0B                       	smpsPSGAlterVol     $0B
00089C13 8004                       	dc.b	nRst, $04
00089C15 ECF5                       	smpsPSGAlterVol     $F5
00089C17 8E06                       	dc.b	nCs1, $06
00089C19 EC0B                       	smpsPSGAlterVol     $0B
00089C1B 8007                       	dc.b	nRst, $07
00089C1D E101                       	smpsAlterNote       $01
00089C1F 0101                       	dc.b	$01, $01
00089C21 E1FE                       	smpsAlterNote       $FE
00089C23 01                         	dc.b	$01
00089C24 E1F9                       	smpsAlterNote       $F9
00089C26 01                         	dc.b	$01
00089C27 E1FC                       	smpsAlterNote       $FC
00089C29 ECF5                       	smpsPSGAlterVol     $F5
00089C2B 8F06                       	dc.b	nD1, $06
00089C2D EC04                       	smpsPSGAlterVol     $04
00089C2F E701                       	dc.b	smpsNoAttack, $01
00089C31 EC07                       	smpsPSGAlterVol     $07
00089C33 8003                       	dc.b	nRst, $03
00089C35 ECF5                       	smpsPSGAlterVol     $F5
00089C37 8F06                       	dc.b	nD1, $06
00089C39 EC04                       	smpsPSGAlterVol     $04
00089C3B E701                       	dc.b	smpsNoAttack, $01
00089C3D EC07                       	smpsPSGAlterVol     $07
00089C3F 8006                       	dc.b	nRst, $06
00089C41 E1FF                       	smpsAlterNote       $FF
00089C43 01                         	dc.b	$01
00089C44 E103                       	smpsAlterNote       $03
00089C46 01                         	dc.b	$01
00089C47 E1FF                       	smpsAlterNote       $FF
00089C49 01                         	dc.b	$01
00089C4A E1FB                       	smpsAlterNote       $FB
00089C4C 01                         	dc.b	$01
00089C4D ECF5                       	smpsPSGAlterVol     $F5
00089C4F 8E06                       	dc.b	nCs1, $06
00089C51 EC04                       	smpsPSGAlterVol     $04
00089C53 E701                       	dc.b	smpsNoAttack, $01
00089C55 EC07                       	smpsPSGAlterVol     $07
00089C57 8003                       	dc.b	nRst, $03
00089C59 ECF5                       	smpsPSGAlterVol     $F5
00089C5B 8E07                       	dc.b	nCs1, $07
00089C5D E1FF                       	smpsAlterNote       $FF
00089C5F 9B06                       	dc.b	nD2, $06
00089C61 EC04                       	smpsPSGAlterVol     $04
00089C63 E701                       	dc.b	smpsNoAttack, $01
00089C65 ECFC                       	smpsPSGAlterVol     $FC
00089C67 9B03                       	dc.b	nD2, $03
00089C69 EC04                       	smpsPSGAlterVol     $04
00089C6B E701                       	dc.b	smpsNoAttack, $01
00089C6D ECFC                       	smpsPSGAlterVol     $FC
00089C6F 9B02                       	dc.b	nD2, $02
00089C71 EC04                       	smpsPSGAlterVol     $04
00089C73 E701                       	dc.b	smpsNoAttack, $01
00089C75 ECFC                       	smpsPSGAlterVol     $FC
00089C77 E1FE                       	smpsAlterNote       $FE
00089C79 9A03                       	dc.b	nCs2, $03
00089C7B EC0B                       	smpsPSGAlterVol     $0B
00089C7D 800A                       	dc.b	nRst, $0A
00089C7F E102                       	smpsAlterNote       $02
00089C81 01                         	dc.b	$01
00089C82 E10A                       	smpsAlterNote       $0A
00089C84 01                         	dc.b	$01
00089C85 E102                       	smpsAlterNote       $02
00089C87 01                         	dc.b	$01
00089C88 E1F7                       	smpsAlterNote       $F7
00089C8A 01                         	dc.b	$01
00089C8B E10A                       	smpsAlterNote       $0A
00089C8D 01                         	dc.b	$01
00089C8E E1FC                       	smpsAlterNote       $FC
00089C90 01                         	dc.b	$01
00089C91 E108                       	smpsAlterNote       $08
00089C93 0101                       	dc.b	$01, $01
00089C95 E102                       	smpsAlterNote       $02
00089C97 01                         	dc.b	$01
00089C98 E1F7                       	smpsAlterNote       $F7
00089C9A 0101                       	dc.b	$01, $01
00089C9C E1FC                       	smpsAlterNote       $FC
00089C9E ECF5                       	smpsPSGAlterVol     $F5
00089CA0 8F06                       	dc.b	nD1, $06
00089CA2 EC04                       	smpsPSGAlterVol     $04
00089CA4 E701                       	dc.b	smpsNoAttack, $01
00089CA6 EC07                       	smpsPSGAlterVol     $07
00089CA8 8003                       	dc.b	nRst, $03
00089CAA ECF5                       	smpsPSGAlterVol     $F5
00089CAC 8F06                       	dc.b	nD1, $06
00089CAE EC04                       	smpsPSGAlterVol     $04
00089CB0 E701                       	dc.b	smpsNoAttack, $01
00089CB2 EC07                       	smpsPSGAlterVol     $07
00089CB4 8006                       	dc.b	nRst, $06
00089CB6 E1FF                       	smpsAlterNote       $FF
00089CB8 01                         	dc.b	$01
00089CB9 E102                       	smpsAlterNote       $02
00089CBB 01                         	dc.b	$01
00089CBC E101                       	smpsAlterNote       $01
00089CBE 01                         	dc.b	$01
00089CBF E1FC                       	smpsAlterNote       $FC
00089CC1 01                         	dc.b	$01
00089CC2 ECF5                       	smpsPSGAlterVol     $F5
00089CC4 9007                       	dc.b	nEb1, $07
00089CC6 EC0B                       	smpsPSGAlterVol     $0B
00089CC8 8004                       	dc.b	nRst, $04
00089CCA ECF5                       	smpsPSGAlterVol     $F5
00089CCC 9006                       	dc.b	nEb1, $06
00089CCE EC0B                       	smpsPSGAlterVol     $0B
00089CD0 8007                       	dc.b	nRst, $07
00089CD2 E103                       	smpsAlterNote       $03
00089CD4 0101                       	dc.b	$01, $01
00089CD6 E1FF                       	smpsAlterNote       $FF
00089CD8 01                         	dc.b	$01
00089CD9 E1F9                       	smpsAlterNote       $F9
00089CDB 01                         	dc.b	$01
00089CDC E1FC                       	smpsAlterNote       $FC
00089CDE ECF5                       	smpsPSGAlterVol     $F5
00089CE0 8F06                       	dc.b	nD1, $06
00089CE2 EC04                       	smpsPSGAlterVol     $04
00089CE4 E701                       	dc.b	smpsNoAttack, $01
00089CE6 EC07                       	smpsPSGAlterVol     $07
00089CE8 8003                       	dc.b	nRst, $03
00089CEA ECF5                       	smpsPSGAlterVol     $F5
00089CEC 8F06                       	dc.b	nD1, $06
00089CEE EC04                       	smpsPSGAlterVol     $04
00089CF0 E701                       	dc.b	smpsNoAttack, $01
00089CF2 EC07                       	smpsPSGAlterVol     $07
00089CF4 8006                       	dc.b	nRst, $06
00089CF6 E1FF                       	smpsAlterNote       $FF
00089CF8 01                         	dc.b	$01
00089CF9 E103                       	smpsAlterNote       $03
00089CFB 01                         	dc.b	$01
00089CFC E1FF                       	smpsAlterNote       $FF
00089CFE 01                         	dc.b	$01
00089CFF E1F9                       	smpsAlterNote       $F9
00089D01 01                         	dc.b	$01
00089D02 E1FC                       	smpsAlterNote       $FC
00089D04 ECF5                       	smpsPSGAlterVol     $F5
00089D06 8F06                       	dc.b	nD1, $06
00089D08 EC04                       	smpsPSGAlterVol     $04
00089D0A E701                       	dc.b	smpsNoAttack, $01
00089D0C EC07                       	smpsPSGAlterVol     $07
00089D0E 8003                       	dc.b	nRst, $03
00089D10 ECF5                       	smpsPSGAlterVol     $F5
00089D12 8F07                       	dc.b	nD1, $07
00089D14 EC0B                       	smpsPSGAlterVol     $0B
00089D16 8006                       	dc.b	nRst, $06
00089D18 E1FF                       	smpsAlterNote       $FF
00089D1A 01                         	dc.b	$01
00089D1B E102                       	smpsAlterNote       $02
00089D1D 0101                       	dc.b	$01, $01
00089D1F E1FC                       	smpsAlterNote       $FC
00089D21 01                         	dc.b	$01
00089D22 ECF5                       	smpsPSGAlterVol     $F5
00089D24 8F07                       	dc.b	nD1, $07
00089D26 EC0B                       	smpsPSGAlterVol     $0B
00089D28 8004                       	dc.b	nRst, $04
00089D2A ECF5                       	smpsPSGAlterVol     $F5
00089D2C 8F06                       	dc.b	nD1, $06
00089D2E EC04                       	smpsPSGAlterVol     $04
00089D30 E701                       	dc.b	smpsNoAttack, $01
00089D32 EC07                       	smpsPSGAlterVol     $07
00089D34 8006                       	dc.b	nRst, $06
00089D36 E101                       	smpsAlterNote       $01
00089D38 01                         	dc.b	$01
00089D39 E102                       	smpsAlterNote       $02
00089D3B 01                         	dc.b	$01
00089D3C E1FF                       	smpsAlterNote       $FF
00089D3E 01                         	dc.b	$01
00089D3F E1F9                       	smpsAlterNote       $F9
00089D41 01                         	dc.b	$01
00089D42 E1FC                       	smpsAlterNote       $FC
00089D44 ECF5                       	smpsPSGAlterVol     $F5
00089D46 9006                       	dc.b	nEb1, $06
00089D48 EC04                       	smpsPSGAlterVol     $04
00089D4A E701                       	dc.b	smpsNoAttack, $01
00089D4C EC07                       	smpsPSGAlterVol     $07
00089D4E 8003                       	dc.b	nRst, $03
00089D50 ECF5                       	smpsPSGAlterVol     $F5
00089D52 9006                       	dc.b	nEb1, $06
00089D54 EC04                       	smpsPSGAlterVol     $04
00089D56 E701                       	dc.b	smpsNoAttack, $01
00089D58 EC07                       	smpsPSGAlterVol     $07
00089D5A 8006                       	dc.b	nRst, $06
00089D5C E100                       	smpsAlterNote       $00
00089D5E 01                         	dc.b	$01
00089D5F E102                       	smpsAlterNote       $02
00089D61 01                         	dc.b	$01
00089D62 E100                       	smpsAlterNote       $00
00089D64 01                         	dc.b	$01
00089D65 E1FF                       	smpsAlterNote       $FF
00089D67 01                         	dc.b	$01
00089D68 ECF5                       	smpsPSGAlterVol     $F5
00089D6A 9B06                       	dc.b	nD2, $06
00089D6C EC04                       	smpsPSGAlterVol     $04
00089D6E E701                       	dc.b	smpsNoAttack, $01
00089D70 EC07                       	smpsPSGAlterVol     $07
00089D72 8003                       	dc.b	nRst, $03
00089D74 ECF5                       	smpsPSGAlterVol     $F5
00089D76 9B07                       	dc.b	nD2, $07
00089D78 EC0B                       	smpsPSGAlterVol     $0B
00089D7A 8007                       	dc.b	nRst, $07
00089D7C E105                       	smpsAlterNote       $05
00089D7E 0101                       	dc.b	$01, $01
00089D80 E1FF                       	smpsAlterNote       $FF
00089D82 01                         	dc.b	$01
00089D83 E1FC                       	smpsAlterNote       $FC
00089D85 01                         	dc.b	$01
00089D86 E1FF                       	smpsAlterNote       $FF
00089D88 ECF5                       	smpsPSGAlterVol     $F5
00089D8A 9B06                       	dc.b	nD2, $06
00089D8C EC0B                       	smpsPSGAlterVol     $0B
00089D8E 8004                       	dc.b	nRst, $04
00089D90 ECF5                       	smpsPSGAlterVol     $F5
00089D92 9B06                       	dc.b	nD2, $06
00089D94 EC04                       	smpsPSGAlterVol     $04
00089D96 E701                       	dc.b	smpsNoAttack, $01
00089D98 EC07                       	smpsPSGAlterVol     $07
00089D9A 8006                       	dc.b	nRst, $06
00089D9C E102                       	smpsAlterNote       $02
00089D9E 01                         	dc.b	$01
00089D9F E106                       	smpsAlterNote       $06
00089DA1 01                         	dc.b	$01
00089DA2 E102                       	smpsAlterNote       $02
00089DA4 01                         	dc.b	$01
00089DA5 E1FC                       	smpsAlterNote       $FC
00089DA7 01                         	dc.b	$01
00089DA8 E1FF                       	smpsAlterNote       $FF
00089DAA ECF5                       	smpsPSGAlterVol     $F5
00089DAC 9B06                       	dc.b	nD2, $06
00089DAE EC04                       	smpsPSGAlterVol     $04
00089DB0 E701                       	dc.b	smpsNoAttack, $01
00089DB2 EC07                       	smpsPSGAlterVol     $07
00089DB4 8003                       	dc.b	nRst, $03
00089DB6 ECF5                       	smpsPSGAlterVol     $F5
00089DB8 9B07                       	dc.b	nD2, $07
00089DBA EC0B                       	smpsPSGAlterVol     $0B
00089DBC 8006                       	dc.b	nRst, $06
00089DBE E102                       	smpsAlterNote       $02
00089DC0 01                         	dc.b	$01
00089DC1 E105                       	smpsAlterNote       $05
00089DC3 0101                       	dc.b	$01, $01
00089DC5 E1FF                       	smpsAlterNote       $FF
00089DC7 01                         	dc.b	$01
00089DC8 ECF5                       	smpsPSGAlterVol     $F5
00089DCA 9B07                       	dc.b	nD2, $07
00089DCC EC0B                       	smpsPSGAlterVol     $0B
00089DCE 8004                       	dc.b	nRst, $04
00089DD0 ECF5                       	smpsPSGAlterVol     $F5
00089DD2 9B06                       	dc.b	nD2, $06
00089DD4 EC04                       	smpsPSGAlterVol     $04
00089DD6 E701                       	dc.b	smpsNoAttack, $01
00089DD8 EC07                       	smpsPSGAlterVol     $07
00089DDA 8006                       	dc.b	nRst, $06
00089DDC E105                       	smpsAlterNote       $05
00089DDE 0101                       	dc.b	$01, $01
00089DE0 E102                       	smpsAlterNote       $02
00089DE2 01                         	dc.b	$01
00089DE3 E1FC                       	smpsAlterNote       $FC
00089DE5 01                         	dc.b	$01
00089DE6 E1FF                       	smpsAlterNote       $FF
00089DE8 ECF5                       	smpsPSGAlterVol     $F5
00089DEA 9B06                       	dc.b	nD2, $06
00089DEC EC04                       	smpsPSGAlterVol     $04
00089DEE E701                       	dc.b	smpsNoAttack, $01
00089DF0 EC07                       	smpsPSGAlterVol     $07
00089DF2 8003                       	dc.b	nRst, $03
00089DF4 ECF5                       	smpsPSGAlterVol     $F5
00089DF6 9B06                       	dc.b	nD2, $06
00089DF8 EC04                       	smpsPSGAlterVol     $04
00089DFA E701                       	dc.b	smpsNoAttack, $01
00089DFC EC07                       	smpsPSGAlterVol     $07
00089DFE 8006                       	dc.b	nRst, $06
00089E00 E102                       	smpsAlterNote       $02
00089E02 01                         	dc.b	$01
00089E03 E106                       	smpsAlterNote       $06
00089E05 01                         	dc.b	$01
00089E06 E102                       	smpsAlterNote       $02
00089E08 01                         	dc.b	$01
00089E09 E1FF                       	smpsAlterNote       $FF
00089E0B 01                         	dc.b	$01
00089E0C ECF5                       	smpsPSGAlterVol     $F5
00089E0E 9B06                       	dc.b	nD2, $06
00089E10 EC04                       	smpsPSGAlterVol     $04
00089E12 E701                       	dc.b	smpsNoAttack, $01
00089E14 EC07                       	smpsPSGAlterVol     $07
00089E16 8003                       	dc.b	nRst, $03
00089E18 ECF5                       	smpsPSGAlterVol     $F5
00089E1A 9B07                       	dc.b	nD2, $07
00089E1C EC0B                       	smpsPSGAlterVol     $0B
00089E1E 8007                       	dc.b	nRst, $07
00089E20 E107                       	smpsAlterNote       $07
00089E22 0101                       	dc.b	$01, $01
00089E24 E1FE                       	smpsAlterNote       $FE
00089E26 01                         	dc.b	$01
00089E27 E1FA                       	smpsAlterNote       $FA
00089E29 0101                       	dc.b	$01, $01
00089E2B E103                       	smpsAlterNote       $03
00089E2D 01                         	dc.b	$01
00089E2E E109                       	smpsAlterNote       $09
00089E30 01                         	dc.b	$01
00089E31 E107                       	smpsAlterNote       $07
00089E33 01                         	dc.b	$01
00089E34 E1FE                       	smpsAlterNote       $FE
00089E36 01                         	dc.b	$01
00089E37 E108                       	smpsAlterNote       $08
00089E39 01                         	dc.b	$01
00089E3A E1FD                       	smpsAlterNote       $FD
00089E3C ECF5                       	smpsPSGAlterVol     $F5
00089E3E 940E                       	dc.b	nG1, $0E
00089E40 E103                       	smpsAlterNote       $03
00089E42 EC0B                       	smpsPSGAlterVol     $0B
00089E44 8001 01                    	dc.b	nRst, $01, $01
00089E47 E1FD                       	smpsAlterNote       $FD
00089E49 01                         	dc.b	$01
00089E4A E1FB                       	smpsAlterNote       $FB
00089E4C 0101                       	dc.b	$01, $01
00089E4E E100                       	smpsAlterNote       $00
00089E50 01                         	dc.b	$01
00089E51 E103                       	smpsAlterNote       $03
00089E53 01                         	dc.b	$01
00089E54 E100                       	smpsAlterNote       $00
00089E56 01                         	dc.b	$01
00089E57 E1FD                       	smpsAlterNote       $FD
00089E59 01                         	dc.b	$01
00089E5A E1FA                       	smpsAlterNote       $FA
00089E5C 01                         	dc.b	$01
00089E5D E1FD                       	smpsAlterNote       $FD
00089E5F 01                         	dc.b	$01
00089E60 E103                       	smpsAlterNote       $03
00089E62 0101                       	dc.b	$01, $01
00089E64 E100                       	smpsAlterNote       $00
00089E66 01                         	dc.b	$01
00089E67 E1FE                       	smpsAlterNote       $FE
00089E69 ECF5                       	smpsPSGAlterVol     $F5
00089E6B 960D                       	dc.b	nA1, $0D
00089E6D E104                       	smpsAlterNote       $04
00089E6F EC0B                       	smpsPSGAlterVol     $0B
00089E71 8001 01                    	dc.b	nRst, $01, $01
00089E74 E101                       	smpsAlterNote       $01
00089E76 01                         	dc.b	$01
00089E77 E1FB                       	smpsAlterNote       $FB
00089E79 0101                       	dc.b	$01, $01
00089E7B E1FE                       	smpsAlterNote       $FE
00089E7D 01                         	dc.b	$01
00089E7E E104                       	smpsAlterNote       $04
00089E80 0101                       	dc.b	$01, $01
00089E82 E1FE                       	smpsAlterNote       $FE
00089E84 01                         	dc.b	$01
00089E85 E1FB                       	smpsAlterNote       $FB
00089E87 0101                       	dc.b	$01, $01
00089E89 E101                       	smpsAlterNote       $01
00089E8B 01                         	dc.b	$01
00089E8C E104                       	smpsAlterNote       $04
00089E8E 0101                       	dc.b	$01, $01
00089E90 E1FE                       	smpsAlterNote       $FE
00089E92 ECF5                       	smpsPSGAlterVol     $F5
00089E94 970D                       	dc.b	nBb1, $0D
00089E96 E101                       	smpsAlterNote       $01
00089E98 EC04                       	smpsPSGAlterVol     $04
00089E9A E701                       	dc.b	smpsNoAttack, $01
00089E9C EC07                       	smpsPSGAlterVol     $07
00089E9E E104                       	smpsAlterNote       $04
00089EA0 8001                       	dc.b	nRst, $01
00089EA2 E103                       	smpsAlterNote       $03
00089EA4 01                         	dc.b	$01
00089EA5 E1FE                       	smpsAlterNote       $FE
00089EA7 01                         	dc.b	$01
00089EA8 E1FA                       	smpsAlterNote       $FA
00089EAA 01                         	dc.b	$01
00089EAB E1FE                       	smpsAlterNote       $FE
00089EAD 01                         	dc.b	$01
00089EAE E101                       	smpsAlterNote       $01
00089EB0 01                         	dc.b	$01
00089EB1 E104                       	smpsAlterNote       $04
00089EB3 01                         	dc.b	$01
00089EB4 E101                       	smpsAlterNote       $01
00089EB6 01                         	dc.b	$01
00089EB7 E1FB                       	smpsAlterNote       $FB
00089EB9 01                         	dc.b	$01
00089EBA E1FA                       	smpsAlterNote       $FA
00089EBC 01                         	dc.b	$01
00089EBD E1FE                       	smpsAlterNote       $FE
00089EBF 01                         	dc.b	$01
00089EC0 E103                       	smpsAlterNote       $03
00089EC2 0101                       	dc.b	$01, $01
00089EC4 E101                       	smpsAlterNote       $01
00089EC6 01                         	dc.b	$01
00089EC7 E1FE                       	smpsAlterNote       $FE
00089EC9 ECF5                       	smpsPSGAlterVol     $F5
00089ECB 990D                       	dc.b	nC2, $0D
00089ECD E104                       	smpsAlterNote       $04
00089ECF EC0B                       	smpsPSGAlterVol     $0B
00089ED1 8001 01                    	dc.b	nRst, $01, $01
00089ED4 E102                       	smpsAlterNote       $02
00089ED6 01                         	dc.b	$01
00089ED7 E1FC                       	smpsAlterNote       $FC
00089ED9 0101                       	dc.b	$01, $01
00089EDB E102                       	smpsAlterNote       $02
00089EDD 01                         	dc.b	$01
00089EDE E104                       	smpsAlterNote       $04
00089EE0 01                         	dc.b	$01
00089EE1 E1FF                       	smpsAlterNote       $FF
00089EE3 ECF5                       	smpsPSGAlterVol     $F5
00089EE5 9B06                       	dc.b	nD2, $06
00089EE7 EC04                       	smpsPSGAlterVol     $04
00089EE9 E701                       	dc.b	smpsNoAttack, $01
00089EEB EC07                       	smpsPSGAlterVol     $07
00089EED 8003                       	dc.b	nRst, $03
00089EEF ECF5                       	smpsPSGAlterVol     $F5
00089EF1 9B07                       	dc.b	nD2, $07
00089EF3 EC0B                       	smpsPSGAlterVol     $0B
00089EF5 8006                       	dc.b	nRst, $06
00089EF7 E101                       	smpsAlterNote       $01
00089EF9 01                         	dc.b	$01
00089EFA E104                       	smpsAlterNote       $04
00089EFC 0101                       	dc.b	$01, $01
00089EFE E1FE                       	smpsAlterNote       $FE
00089F00 01                         	dc.b	$01
00089F01 E1FC                       	smpsAlterNote       $FC
00089F03 01                         	dc.b	$01
00089F04 E1FE                       	smpsAlterNote       $FE
00089F06 ECF5                       	smpsPSGAlterVol     $F5
00089F08 9C06                       	dc.b	nEb2, $06
00089F0A EC0B                       	smpsPSGAlterVol     $0B
00089F0C 8004                       	dc.b	nRst, $04
00089F0E ECF5                       	smpsPSGAlterVol     $F5
00089F10 9C06                       	dc.b	nEb2, $06
00089F12 EC04                       	smpsPSGAlterVol     $04
00089F14 E701                       	dc.b	smpsNoAttack, $01
00089F16 EC07                       	smpsPSGAlterVol     $07
00089F18 8006                       	dc.b	nRst, $06
00089F1A E105                       	smpsAlterNote       $05
00089F1C 01                         	dc.b	$01
00089F1D E106                       	smpsAlterNote       $06
00089F1F 01                         	dc.b	$01
00089F20 E102                       	smpsAlterNote       $02
00089F22 01                         	dc.b	$01
00089F23 E1FB                       	smpsAlterNote       $FB
00089F25 01                         	dc.b	$01
00089F26 E1FF                       	smpsAlterNote       $FF
00089F28 ECF5                       	smpsPSGAlterVol     $F5
00089F2A 9B06                       	dc.b	nD2, $06
00089F2C EC04                       	smpsPSGAlterVol     $04
00089F2E E701                       	dc.b	smpsNoAttack, $01
00089F30 EC07                       	smpsPSGAlterVol     $07
00089F32 8003                       	dc.b	nRst, $03
00089F34 ECF5                       	smpsPSGAlterVol     $F5
00089F36 9B06                       	dc.b	nD2, $06
00089F38 EC04                       	smpsPSGAlterVol     $04
00089F3A E701                       	dc.b	smpsNoAttack, $01
00089F3C EC07                       	smpsPSGAlterVol     $07
00089F3E 8006                       	dc.b	nRst, $06
00089F40 E101                       	smpsAlterNote       $01
00089F42 01                         	dc.b	$01
00089F43 E105                       	smpsAlterNote       $05
00089F45 01                         	dc.b	$01
00089F46 E104                       	smpsAlterNote       $04
00089F48 01                         	dc.b	$01
00089F49 E1FE                       	smpsAlterNote       $FE
00089F4B 01                         	dc.b	$01
00089F4C ECF5                       	smpsPSGAlterVol     $F5
00089F4E 9C07                       	dc.b	nEb2, $07
00089F50 EC0B                       	smpsPSGAlterVol     $0B
00089F52 8004                       	dc.b	nRst, $04
00089F54 ECF5                       	smpsPSGAlterVol     $F5
00089F56 9C06                       	dc.b	nEb2, $06
00089F58 EC0B                       	smpsPSGAlterVol     $0B
00089F5A 8007                       	dc.b	nRst, $07
00089F5C E105                       	smpsAlterNote       $05
00089F5E 0101                       	dc.b	$01, $01
00089F60 E102                       	smpsAlterNote       $02
00089F62 01                         	dc.b	$01
00089F63 E1FB                       	smpsAlterNote       $FB
00089F65 01                         	dc.b	$01
00089F66 E1FF                       	smpsAlterNote       $FF
00089F68 ECF5                       	smpsPSGAlterVol     $F5
00089F6A 9B06                       	dc.b	nD2, $06
00089F6C EC04                       	smpsPSGAlterVol     $04
00089F6E E701                       	dc.b	smpsNoAttack, $01
00089F70 EC07                       	smpsPSGAlterVol     $07
00089F72 8003                       	dc.b	nRst, $03
00089F74 ECF5                       	smpsPSGAlterVol     $F5
00089F76 9B06                       	dc.b	nD2, $06
00089F78 EC04                       	smpsPSGAlterVol     $04
00089F7A E701                       	dc.b	smpsNoAttack, $01
00089F7C EC07                       	smpsPSGAlterVol     $07
00089F7E 8006                       	dc.b	nRst, $06
00089F80 E101                       	smpsAlterNote       $01
00089F82 01                         	dc.b	$01
00089F83 E105                       	smpsAlterNote       $05
00089F85 01                         	dc.b	$01
00089F86 E101                       	smpsAlterNote       $01
00089F88 01                         	dc.b	$01
00089F89 E1FC                       	smpsAlterNote       $FC
00089F8B 01                         	dc.b	$01
00089F8C E1FE                       	smpsAlterNote       $FE
00089F8E ECF5                       	smpsPSGAlterVol     $F5
00089F90 9C06                       	dc.b	nEb2, $06
00089F92 EC04                       	smpsPSGAlterVol     $04
00089F94 E701                       	dc.b	smpsNoAttack, $01
00089F96 EC07                       	smpsPSGAlterVol     $07
00089F98 8003                       	dc.b	nRst, $03
00089F9A ECF5                       	smpsPSGAlterVol     $F5
00089F9C 9C07                       	dc.b	nEb2, $07
00089F9E EC0B                       	smpsPSGAlterVol     $0B
00089FA0 8006                       	dc.b	nRst, $06
00089FA2 E102                       	smpsAlterNote       $02
00089FA4 01                         	dc.b	$01
00089FA5 E105                       	smpsAlterNote       $05
00089FA7 0101                       	dc.b	$01, $01
00089FA9 E1FF                       	smpsAlterNote       $FF
00089FAB 01                         	dc.b	$01
00089FAC ECF5                       	smpsPSGAlterVol     $F5
00089FAE 9B07                       	dc.b	nD2, $07
00089FB0 EC0B                       	smpsPSGAlterVol     $0B
00089FB2 8004                       	dc.b	nRst, $04
00089FB4 ECF5                       	smpsPSGAlterVol     $F5
00089FB6 9B06                       	dc.b	nD2, $06
00089FB8 EC04                       	smpsPSGAlterVol     $04
00089FBA E701                       	dc.b	smpsNoAttack, $01
00089FBC EC07                       	smpsPSGAlterVol     $07
00089FBE 8002                       	dc.b	nRst, $02
00089FC0 E1FC                       	smpsAlterNote       $FC
00089FC2 ECF5                       	smpsPSGAlterVol     $F5
00089FC4 9006                       	dc.b	nEb1, $06
00089FC6 EC04                       	smpsPSGAlterVol     $04
00089FC8 E701                       	dc.b	smpsNoAttack, $01
00089FCA ECFC                       	smpsPSGAlterVol     $FC
00089FCC 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00089FD0 EC04                       	smpsPSGAlterVol     $04
00089FD2 E701                       	dc.b	smpsNoAttack, $01
00089FD4 E1FD                       	smpsAlterNote       $FD
00089FD6 ECFC                       	smpsPSGAlterVol     $FC
00089FD8 9402                       	dc.b	nG1, $02
00089FDA EC04                       	smpsPSGAlterVol     $04
00089FDC E701                       	dc.b	smpsNoAttack, $01
00089FDE E1FE                       	smpsAlterNote       $FE
00089FE0 ECFC                       	smpsPSGAlterVol     $FC
00089FE2 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00089FE6 EC04                       	smpsPSGAlterVol     $04
00089FE8 E701                       	dc.b	smpsNoAttack, $01
00089FEA EC07                       	smpsPSGAlterVol     $07
00089FEC 8008                       	dc.b	nRst, $08
00089FEE F6F4 F3                    	smpsJump            music84_Jump06
00089FF1                            
00089FF1                            ; PSG3 Data
00089FF1                            music84_PSG3:
00089FF1 F500                       	smpsPSGvoice        $00
00089FF3 E1FF                       	smpsAlterNote       $FF
00089FF5 EC0F                       	smpsPSGAlterVol     $0F
00089FF7 803A                       	dc.b	nRst, $3A
00089FF9                            
00089FF9                            music84_Jump05:
00089FF9 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008A005 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008A00F F6FF E8                    	smpsJump            music84_Jump05
0008A012                            
0008A012                            ; DAC Data
0008A012                            music84_DAC:
0008A012 E0C0                       	smpsPan             panCenter, $00
0008A014 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008A020 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008A02C 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008A038 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008A044 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008A050 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008A05C 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008A068 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008A074 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008A080 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008A08C 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008A098 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008A0A4 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008A0B0 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008A0BC 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008A0C8 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008A0D4 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008A0E0 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008A0EC 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008A0F8 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008A104 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008A110 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008A11C 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008A128 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008A134 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008A140 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008A14C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008A158 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008A164 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008A170 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008A17C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008A188 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008A194 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008A1A0 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008A1AC 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008A1B8 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008A1C4 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008A1D0 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008A1DC 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008A1E8 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008A1F4 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008A200 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008A20C 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008A218 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008A224 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008A230 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008A23C 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008A248 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008A254 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008A260 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008A26C 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008A278 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008A284 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008A290 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008A29C 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008A2A8 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008A2B4 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008A2C0 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008A2CC 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008A2D8 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008A2E4 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008A2F0 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008A2FC 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008A308 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008A314 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008A320 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008A32C 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008A338 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008A344 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008A350 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008A35C 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008A368 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008A374 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008A380 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008A38C 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008A398 E0C0                       	smpsPan             panCenter, $00
0008A39A F2                         	smpsStop
0008A39B                            
0008A39B                            music84_Voices:
0008A39B                            ;	Voice $00
0008A39B                            ;	$3D
0008A39B                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008A39B                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008A39B                            	smpsVcAlgorithm     $05
0008A39B                            	smpsVcFeedback      $07
0008A39B                            	smpsVcUnusedBits    $00
0008A39B                            	smpsVcDetune        $05, $04, $03, $04
0008A39B                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008A39B                            	smpsVcRateScale     $00, $00, $00, $00
0008A39B                            	smpsVcAttackRate    $11, $11, $11, $11
0008A39B                            	smpsVcAmpMod        $00, $00, $00, $00
0008A39B                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008A39B                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008A39B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008A39B                            	smpsVcReleaseRate   $08, $08, $08, $07
0008A39B 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008A3B4                            
0008A3B4                            ;	Voice $01
0008A3B4                            ;	$04
0008A3B4                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008A3B4                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008A3B4                            	smpsVcAlgorithm     $04
0008A3B4                            	smpsVcFeedback      $00
0008A3B4                            	smpsVcUnusedBits    $00
0008A3B4                            	smpsVcDetune        $04, $03, $04, $05
0008A3B4                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008A3B4                            	smpsVcRateScale     $00, $01, $00, $01
0008A3B4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008A3B4                            	smpsVcAmpMod        $00, $00, $00, $00
0008A3B4                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008A3B4                            	smpsVcDecayRate2    $05, $00, $05, $00
0008A3B4                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008A3B4                            	smpsVcReleaseRate   $06, $06, $06, $06
0008A3B4 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008A3CD                            
0008A3CD                            ;	Voice $02
0008A3CD                            ;	$30
0008A3CD                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008A3CD                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008A3CD                            	smpsVcAlgorithm     $00
0008A3CD                            	smpsVcFeedback      $06
0008A3CD                            	smpsVcUnusedBits    $00
0008A3CD                            	smpsVcDetune        $04, $02, $00, $06
0008A3CD                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008A3CD                            	smpsVcRateScale     $00, $00, $00, $00
0008A3CD                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008A3CD                            	smpsVcAmpMod        $00, $00, $00, $00
0008A3CD                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008A3CD                            	smpsVcDecayRate2    $01, $01, $01, $01
0008A3CD                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008A3CD                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008A3CD 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008A3E6                            
0008A3E6                            ;	Voice $03
0008A3E6                            ;	$3A
0008A3E6                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008A3E6                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008A3E6                            	smpsVcAlgorithm     $02
0008A3E6                            	smpsVcFeedback      $07
0008A3E6                            	smpsVcUnusedBits    $00
0008A3E6                            	smpsVcDetune        $04, $06, $02, $00
0008A3E6                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008A3E6                            	smpsVcRateScale     $00, $00, $00, $00
0008A3E6                            	smpsVcAttackRate    $18, $19, $14, $14
0008A3E6                            	smpsVcAmpMod        $00, $00, $00, $00
0008A3E6                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008A3E6                            	smpsVcDecayRate2    $00, $00, $00, $00
0008A3E6                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008A3E6                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008A3E6 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008A3FF                            
0008A3FF                            ;	Voice $04
0008A3FF                            ;	$3C
0008A3FF                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008A3FF                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008A3FF                            	smpsVcAlgorithm     $04
0008A3FF                            	smpsVcFeedback      $07
0008A3FF                            	smpsVcUnusedBits    $00
0008A3FF                            	smpsVcDetune        $07, $00, $00, $03
0008A3FF                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008A3FF                            	smpsVcRateScale     $00, $00, $00, $00
0008A3FF                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008A3FF                            	smpsVcAmpMod        $00, $00, $00, $00
0008A3FF                            	smpsVcDecayRate1    $00, $00, $00, $00
0008A3FF                            	smpsVcDecayRate2    $00, $00, $00, $00
0008A3FF                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008A3FF                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008A3FF 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008A418                            
0008A418                            ;	Voice $05
0008A418                            ;	$38
0008A418                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008A418                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008A418                            	smpsVcAlgorithm     $00
0008A418                            	smpsVcFeedback      $07
0008A418                            	smpsVcUnusedBits    $00
0008A418                            	smpsVcDetune        $04, $06, $02, $00
0008A418                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008A418                            	smpsVcRateScale     $00, $00, $00, $00
0008A418                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008A418                            	smpsVcAmpMod        $00, $00, $00, $00
0008A418                            	smpsVcDecayRate1    $00, $03, $00, $17
0008A418                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008A418                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008A418                            	smpsVcReleaseRate   $08, $05, $05, $05
0008A418 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008A431                            
0008A431                            
0008A432 00                         		even
0008A432                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008E642                            		even
0008E642                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0009219A 00                         		even
0009219A                            Music87:	include	sound\music87.asm; Invincibility
0009219A                            triple_Header:
0009219A =00000001                  smpsHeaderStartSong = 1
0009219A 0000                       	smpsHeaderVoice     triple_Voices
0009219C 0501                       	smpsHeaderChan      $05, $01
0009219E 0200                       	smpsHeaderTempo     $02, $00
000921A0                            
000921A4 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000921A8 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000921AC 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000921B0 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000921B4 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000921BA                            
000921BA                            ; DAC Data
000921BA                            triple_DAC:
000921BA E0C0                       	smpsPan             panCenter, $00
000921BC 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000921C2                            
000921C2                            triple_Loop01:
000921C2 8282 82                    	dc.b	dSnare, dSnare, dSnare
000921C5                            
000921C5                            triple_Loop00:
000921C5 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000921D1 06                         	dc.b	$06
000921D2 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000921D7 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000921E3 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000921EA F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000921EF 0303 1B                    	dc.b	$03, $03, $1B
000921F2 E0C0                       	smpsPan             panCenter, $00
000921F4 F6FF C4                    	smpsJump triple_DAC
000921F7                            
000921F7                            ; FM1 Data
000921F7                            triple_FM1:
000921F7 E0C0                       	smpsPan             panCenter, $00
000921FB 8018                       	dc.b	nRst, $18
000921FD                            
000921FD                            triple_Loop0B:
000921FD AC06 B8                    	dc.b	nG3, $06, nG4
00092200 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00092205                            
00092205                            triple_Loop0C:
00092205 A7B3                       	dc.b	nD3, nD4
00092207 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
0009220C                            
0009220C                            triple_Loop0D:
0009220C A9B5                       	dc.b	nE3, nE4
0009220E F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00092213 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0009221B F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00092220 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
0009222C 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00092238 AD                         	dc.b	nAb3
00092239 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0009223E 8018                       	dc.b	nRst, $18
00092240 E0C0                       	smpsPan             panCenter, $00
00092244 F6FF B1                    	smpsJump triple_FM1
00092247                            
00092247                            ; FM2 Data
00092247                            triple_FM2:
00092247 E0C0                       	smpsPan             panCenter, $00
0009224B 8018                       	dc.b	nRst, $18
0009224D                            
0009224D                            triple_Loop07:
0009224D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00092259 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00092265 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0009226A 8003                       	dc.b	nRst, $03
0009226C                            
0009226C                            triple_Loop08:
0009226C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00092272 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00092277 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009227D                            
0009227D                            triple_Loop09:
0009227D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00092289 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00092295 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0009229A 8003                       	dc.b	nRst, $03
0009229C                            
0009229C                            triple_Loop0A:
0009229C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000922A2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000922A7 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000922AD E0C0                       	smpsPan             panCenter, $00
000922B1 F6FF 94                    	smpsJump triple_FM2
000922B4                            
000922B4                            ; FM3 Data
000922B4                            triple_FM3:
000922B4 E0C0                       	smpsPan             panCenter, $00
000922B8 8018                       	dc.b	nRst, $18
000922BA                            
000922BA                            triple_Loop06:
000922BA B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000922C1 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000922C6 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000922D2 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000922DE C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000922E1 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000922E6 8018                       	dc.b	nRst, $18
000922E8 E0C0                       	smpsPan             panCenter, $00
000922EC F6FF C6                    	smpsJump triple_FM3
000922EF                            
000922EF                            ; FM4 Data
000922EF                            triple_FM4:
000922EF E103                       	smpsAlterNote       $03
000922F3 E0C0                       	smpsPan             panCenter, $00
000922F5 8018                       	dc.b	nRst, $18
000922F7                            
000922F7                            triple_Loop02:
000922F7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00092303 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009230F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00092314 8003                       	dc.b	nRst, $03
00092316                            
00092316                            triple_Loop03:
00092316 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009231C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00092321 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00092327                            
00092327                            triple_Loop04:
00092327 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00092333 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009233F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00092344 8003                       	dc.b	nRst, $03
00092346                            
00092346                            triple_Loop05:
00092346 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009234C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00092351 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00092357 E0C0                       	smpsPan             panCenter, $00
00092359 F6FF 94                    	smpsJump triple_FM4
0009235C                            
0009235C                            ; PSG1 Data
0009235C                            triple_PSG1:
0009235C 8018                       	dc.b	nRst, $18
0009235E                            
0009235E                            triple_Loop0E:
0009235E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009236A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00092376 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00092382 9402 8004                  	dc.b	nG1, $02, nRst, $04
00092386 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0009238B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00092397 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000923A3 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000923AF 9402 8007                  	dc.b	nG1, $02, nRst, $07
000923B3                            
000923B3                            triple_Loop0F:
000923B3 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000923B9 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000923BE 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000923C4                            
000923C4                            triple_Loop10:
000923C4 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000923D0 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000923DC 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000923E8 9402 8004                  	dc.b	nG1, $02, nRst, $04
000923EC F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000923F1 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000923FD 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00092409 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00092415 9402 8007                  	dc.b	nG1, $02, nRst, $07
00092419                            
00092419                            triple_Loop11:
00092419 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009241F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00092424 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0009242A F500                       	smpsPSGvoice        $00
0009242C F6FF 2E                    	smpsJump triple_PSG1
0009242F                            
0009242F                            triple_Voices:
0009242F                            ;	Voice $00
0009242F                            ;	$3A
0009242F                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009242F                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009242F                            	smpsVcAlgorithm     $02
0009242F                            	smpsVcFeedback      $07
0009242F                            	smpsVcUnusedBits    $00
0009242F                            	smpsVcDetune        $00, $00, $00, $00
0009242F                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009242F                            	smpsVcRateScale     $01, $02, $02, $02
0009242F                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009242F                            	smpsVcAmpMod        $00, $00, $00, $00
0009242F                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009242F                            	smpsVcDecayRate2    $00, $00, $00, $00
0009242F                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009242F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009242F 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00092448                            
00092448                            ;	Voice $01
00092448                            ;	$20
00092448                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00092448                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00092448                            	smpsVcAlgorithm     $00
00092448                            	smpsVcFeedback      $04
00092448                            	smpsVcUnusedBits    $00
00092448                            	smpsVcDetune        $00, $00, $03, $07
00092448                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00092448                            	smpsVcRateScale     $03, $03, $03, $02
00092448                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00092448                            	smpsVcAmpMod        $00, $00, $00, $00
00092448                            	smpsVcDecayRate1    $04, $04, $0A, $10
00092448                            	smpsVcDecayRate2    $08, $08, $08, $0F
00092448                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00092448                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00092448 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00092448 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00092462 00                         		even
00092462                            Music88:	incbin	sound\music88.bin; Extra Life
00092550                            		even
00092550                            Music89:	incbin	sound\music89.bin; Special Stage
00096418 00                         		even
00096418                            Music8A:	incbin	sound\music8A.bin; Title Screen
000965E2                            		even
000965E2                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009687C                            		even
0009687C                            Music8C:	incbin	sound\music8C.bin; VS Boss
00096A98                            		even
00096A98                            Music8D:	incbin	sound\music8D.bin; Final Zone
00096CB4                            		even
00096CB4                            Music8E:	incbin	sound\fle.bin ;		Act Clear
00097122 00                         		even
00097122                            Music8F:	incbin	sound\music8F.bin ; Game Over
00097762 00                         		even
00097762                            Music90:	incbin	sound\music90.bin ; Continue
000978C0                            		even
000978C0                            Music91:	incbin	sound\music91.bin ; Credits
00098B8E                            		even
00098B8E                            Music92:	incbin	sound\music92.bin ; Drowning
00098CB8                            		even
00098CB8                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
00098D88                            		even
00098D88                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
00098DC2 00                         		even
00098DC2                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00098DFC 00                         		even
00098DFC                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
00098E36 00                         		even
00098E36                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
00098E70 00                         		even
00098E70                            Music98:	incbin	sound\music98.bin ; Marble Act 2
00098EAA 00                         		even
00098EAA                            Music99:	incbin	sound\music99.bin ; Marble Act 3
00098EE4 00                         		even
00098EE4                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
00098F1E 00                         		even
00098F1E                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
00098F58 00                         		even
00098F58                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
00098F92 00                         		even
00098F92                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
00098FCC 00                         		even
00098FCC                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
00099006 00                         		even
00099006                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
00099040 00                         		even
00099040                            ; ---------------------------------------------------------------------------
00099040                            ; Sound	effect pointers
00099040                            ; ---------------------------------------------------------------------------
00099040 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009904C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00099058 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00099064 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00099070 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009907C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00099088 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00099094 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000990A0 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000990AC 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000990B8 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000990C4 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000990D0 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000990DC 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000990E8 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000990F4 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00099100 0000 0000                  SoundD0Index:	dc.l SoundD0
00099104                            SoundA0:	incbin	sound\soundA0.bin
0009911A                            		even
0009911A                            SoundA1:	incbin	sound\soundA1.bin
00099144                            		even
00099144                            SoundA2:	incbin	sound\soundA2.bin
00099164                            		even
00099164                            SoundA3:	incbin	sound\soundA3.bin
00099196                            		even
00099196                            SoundA4:	incbin	sound\soundA4.bin
000991CC                            		even
000991CC                            SoundA5:	incbin	sound\soundA5.bin
000991F8                            		even
000991F8                            SoundA6:	incbin	sound\soundA6.bin
00099228                            		even
00099228                            SoundA7:	incbin	sound\soundA7.bin
00099258                            		even
00099258                            SoundA8:	incbin	sound\soundA8.bin
0009928C                            		even
0009928C                            SoundA9:	incbin	sound\soundA9.bin
0009929E                            		even
0009929E                            SoundAA:	incbin	sound\soundAA.bin
000992E0                            		even
000992E0                            SoundAB:	incbin	sound\soundAB.bin
00099300                            		even
00099300                            SoundAC:	incbin	sound\soundAC.bin
00099334                            		even
00099334                            SoundAD:	incbin	sound\soundAD.bin
0009936A                            		even
0009936A                            SoundAE:	incbin	sound\soundAE.bin
000993B4                            		even
000993B4                            SoundAF:	incbin	sound\soundAF.bin
000993E2                            		even
000993E2                            SoundB0:	incbin	sound\soundB0.bin
00099414                            		even
00099414                            SoundB1:	incbin	sound\soundB1.bin
00099440                            		even
00099440                            SoundB2:	incbin	sound\soundB2.bin
00099490                            		even
00099490                            SoundB3:	incbin	sound\soundB3.bin
000994DA                            		even
000994DA                            SoundB4:	include	sound\soundB4.asm
000994DA                            SndB4_Bumper_Header:
000994DA =00000001                  smpsHeaderStartSong = 1
000994DA 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000994DC 01                         	smpsHeaderTempoSFX  $01
000994DD 03                         	smpsHeaderChanSFX   $03
000994DE                            
000994F0                            
000994F0                            ; FM5 Data
000994F0                            SndB4_Bumper_FM5:
000994F2 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000994F5                            
000994F5                            ; FM4 Data
000994F5                            SndB4_Bumper_FM4:
000994F5 F2                         	smpsStop
000994F6                            
000994F6                            SndB4_Bumper_Jump00:
000994F6 A020                       	dc.b	nG2, $20
000994F8 F2                         	smpsStop
000994F9                            
000994F9                            ; FM3 Data
000994F9                            SndB4_Bumper_FM3:
000994F9 F2                         	smpsStop
000994FA                            
000994FA                            SndB4_Bumper_Voices:
000994FA                            ;	Voice $00
000994FA                            ;	$32
000994FA                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000994FA                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000994FA                            	smpsVcAlgorithm     $02
000994FA                            	smpsVcFeedback      $06
000994FA                            	smpsVcUnusedBits    $00
000994FA                            	smpsVcDetune        $07, $07, $02, $00
000994FA                            	smpsVcCoarseFreq    $00, $00, $00, $04
000994FA                            	smpsVcRateScale     $00, $00, $00, $00
000994FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000994FA                            	smpsVcAmpMod        $00, $00, $00, $00
000994FA                            	smpsVcDecayRate1    $08, $00, $00, $09
000994FA                            	smpsVcDecayRate2    $0B, $00, $00, $09
000994FA                            	smpsVcDecayLevel    $00, $00, $00, $00
000994FA                            	smpsVcReleaseRate   $0F, $00, $00, $00
000994FA 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000994FA 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00099514 00                         		even
00099514                            SoundB5:	incbin	sound\soundB5.bin
00099542                            		even
00099542                            SoundB6:	incbin	sound\soundB6.bin
00099560                            		even
00099560                            SoundB7:	incbin	sound\soundB7.bin
0009959C                            		even
0009959C                            SoundB8:	incbin	sound\soundB8.bin
000995BA                            		even
000995BA                            SoundB9:	incbin	sound\soundB9.bin
0009961E                            		even
0009961E                            SoundBA:	incbin	sound\soundBA.bin
00099646                            		even
00099646                            SoundBB:	incbin	sound\soundBB.bin
00099672                            		even
00099672                            SoundBC:	incbin	sound\soundBC.bin
000996B4                            		even
000996B4                            SoundBD:	incbin	sound\soundBD.bin
00099708                            		even
00099708                            SoundBE:	incbin	sound\soundBE.bin
00099742                            		even
00099742                            SoundBF:	incbin	sound\soundBF.bin
000997B4                            		even
000997B4                            SoundC0:	incbin	sound\soundC0.bin
000997E2                            		even
000997E2                            SoundC1:	incbin	sound\soundC1.bin
0009983C                            		even
0009983C                            SoundC2:	incbin	sound\soundC2.bin
00099866                            		even
00099866                            SoundC3:	incbin	sound\soundC3.bin
000998E0                            		even
000998E0                            SoundC4:	incbin	sound\soundC4.bin
00099908                            		even
00099908                            SoundC5:	incbin	sound\soundC5.bin
00099970                            		even
00099970                            SoundC6:	incbin	sound\soundC6.bin
000999B2                            		even
000999B2                            SoundC7:	incbin	sound\soundC7.bin
000999E0                            		even
000999E0                            SoundC8:	incbin	sound\soundC8.bin
000999F2                            		even
000999F2                            SoundC9:	incbin	sound\soundC9.bin
00099A20                            		even
00099A20                            SoundCA:	incbin	sound\soundCA.bin
00099A4E                            		even
00099A4E                            SoundCB:	incbin	sound\soundCB.bin
00099A9A                            		even
00099A9A                            SoundCC:	incbin	sound\C9.ssf
00099AC8                            		even
00099AC8                            SoundCD:	incbin	sound\soundCD.bin
00099AD6                            		even
00099AD6                            SoundCE:	incbin	sound\soundCE.bin
00099B04                            		even
00099B04                            SoundCF:	incbin	sound\soundCF.bin
00099B3C                            		even
00099B3C                            SoundD0:	incbin	sound\soundD0.bin
00099B76                            		even
00099B76                            SegaPCM:	incbin	sound\segapcm.bin
000B3CCC                            SegaPCM_end:	even
000B3CCC                            
000B3CCC                            IdiotPCM:	incbin	sound\youare.bin
000BDD9E 00                         IdiotPCM_end:	even
000BDD9E                            
000BDD9E                            ; end of 'ROM'
000BDD9E                            EndOfRom:
000BDD9E                            
000BDD9E                            
